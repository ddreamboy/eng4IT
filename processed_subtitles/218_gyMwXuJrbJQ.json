{
  "text": "If you're interested in learning\nabout blockchain, this is the\ncourse for you. Patrick Collins\nis a veteran software engineer\nand longtime finance industry\ndeveloper. Be sure to leave a\ncomment with something you\nlearned from this course.\nWelcome to the ultimate solidity\nsmart contract and blockchain\nDeveloper course, JavaScript\naddition, we recently did a\nversion of this video in Python\nthat has over 2 million views\nright now making it the most\nwatched smart contract tutorial\non the planet. We've learned a\nton from doing that first\ncourse. And if you love the\nPython language, definitely be\nsure to check that one out.\nWe've taken all the learnings\nwe've got from making that first\ncourse, wrapped it up and put it\ninto this JavaScript video for\nyou. If you're looking to get\nstarted in web three blockchain\nsmart contracts or any of these\nterms, this is the course for\nyou. And it's for anybody and\neverybody, no matter your\nexperience level in programming\nor in blockchain. Ideally, you\nknow, a little bit of JavaScript\nbefore starting this. But if you\ndon't, no worries, we will help\nyou along the way. And in case\nyou do want to learn a little\nbit of JavaScript before\nstarting here, there are some\nfantastic courses on Free Code\nCamp to learn more, but you\nabsolutely don't have to. And\nreally, any experience with any\nobject oriented programming\nlanguage will work, right. So if\nyou're brand new to coding, or\nif you're brand new to\nblockchain, this is exactly\nwhere you should be. And if you\nalready know a lot about\nblockchain or coding, this\ncourse will give you even more\ndeep fundamentals on the space.\nSo welcome to the edge of the\nrabbit hole. So for those of you\nwho don't know, my name is\nPatrick Collins. I'm a smart\ncontract engineer, developer\nadvocate on the chain link\nprotocol. And I live in breed\nsmart contracts. I also make\nYouTube videos on my own\nchannel, medium Twitter threads\nand more. teaching people about\nsmart contracts about coding and\nabout this new technology. I\nlove helping developers learn,\ngrow and learn about this new\nAdvent. That's blockchain and\nsmart contracts. And I'll be\ntaking you on your journey to\nbecoming a blockchain expert and\nWizard of the smart contract\ndeveloping world. And even if\nyou don't want to become a\ndeveloper, the first section our\nblockchain basics, will give you\na lot of fundamental knowledge\nabout how blockchain and smart\ncontracts, even work. I am so\nexcited for you to be here. And\nI hope you enjoy the journey.\nThis is a data dump, passion\neducational project of\neverything I've learned working\nin this space. And I am 100%\ncertain that if you follow\nalong, you'll come out the other\nside of this, armed with the\nknowledge to be a positive force\nin this incredible industry,\nsolidity and smart contract\ndevelopers are massively in\ndemand with an average salary of\nbeing around $145,000 a year,\nthere is massive economic\nopportunity from learning this\ncourse. And this technology has\nthe ability to revolutionize\neverything that we interact\nwith, and you can be one of the\npioneers ushering in this new\nage. In our courses. We already\nhave a track record of giving\npeople these educational needs\nand sending them into their\ncareers in the blockchain and\nsmart contract space. And we are\ngoing to give you all of the\ncutting edge tools and how to\nuse them including working with\nthings like D phi NF TS Dows,\nERC 20s upgradable, smart\ncontracts and more. We're going\nto teach you the skills\nnecessary to build defy\napplications like Ave synthetics\nand compound, billion dollar\ndecentralized applications, or\nmassively successful NFT\nprojects like crypto punks, or\nboard apes. Dow is like maker\nDow or developer, Dow and any of\nthe amazing things you've seen\nin the cryptocurrency world. In\nlearning these skills, you will\nhave all these economic\nopportunities at your fingertips\nand the ability to be a pioneer\nin completely changing the way\nwe interact with each other. In\na fundamental way. Building\ndecentralized smart contract\napplications is building a world\nthat's more accountable a world\nwith unbreakable promises, a\nfaster, more efficient,\nfinancially free world, a\ncollaborative community,\ncombining the prowess of\nphilosophy and technology into a\nnew system. We'll learn more\nabout the purpose and the value\nof smart contracts and\ndecentralized applications in\nlesson one of this course, and\nwhy they're so exciting. Finish\nthis course. And you'll be\nready. So again, I want to give\na major thank you and a major\nkudos to you because you've\ntaken the first step to enter\nthis realm. So welcome to Web\nthree. Welcome to the\nblockchain. Welcome to smart\ncontracts. And I'll see you at\nthe bottom of the rabbit hole.\nSo let's jump into some best\npractices for this course so\nthat you can learn most\neffectively and learn with this\ncourse as best you can.\nYou do not want to skip\nthis part. It'll help you solve\n80% of your issue. Now, while\ngoing through this course be\n100% certain to follow along\nwith a GitHub repository\nassociated with this course we\nhave a link in the description\nof this video for you to\nabsolutely click on follow along\nhave open in a tab as you're\ndoing this because it has all\nthe code Sam polls, timestamps a\ncommunity to interact with and\nmore, it is going to be your\nBible for watching this course.\nAnd yes, we have a Discussions\ntab. This Discussions tab is a\nplace where you can ask\nquestions, engage with other\ndevelopers who are going through\nthis course as well. Get some\nhelp, and etc. Be sure to say\nhello and meet other like minded\nindividuals like yourselves.\nNow, blockchain and smart\ncontracts move really quickly.\nAnd things are constantly being\nupdated. So to make sure you're\nalways up to date with the\nlatest, when I open up some\ndocumentation, try to open up\nthe documentation for yourself\nas well. And maybe even have the\ncode sample next to you. And as\nyou're writing code, be sure to\nrefer back to make sure that you\nare keeping pace, and then you\nhave the most up to date\nsamples, sometimes technology\nmight change, and there might be\na way to do something a little\nbit better. So we have this file\ncalled chronological updates, be\nsure that this is the first\nplace to check when you run into\nan issue to see if maybe\nsomething was updated that you\nmissed, it'll be chronologically\nordered. So it's easier to find\nupdates. Basically, this is to\nsay, always refer back to the\nGitHub repo first. And if you do\nto find a mistake, or something\nisn't working the way you\nexpected, jump into the\nconversation, leave a\ndiscussion, leave an issue, ask\nquestions here, take breaks, I\ncannot tell you how many people\ntried rushing through our entire\nfirst course in one setting and\ndidn't retain as much\ninformation, your brain\nremembers information much\nbetter if you take breaks. So\nevery 25 minutes or half an\nhour, maybe take a five minute\nwalk. And then every two hours\ntake a much longer break. And if\nyou really want to make sure\nsomething drills in, try to go\nback and reflect on what you did\nfor the lesson prior before\ncontinuing to the next lesson.\nAnd at the same time, though,\nlearn at your own speed. There\nis no right speed for this\ncourse. If it takes you a day, a\nweek, a month or even a year, it\ndoesn't matter. Learn at the\npace that's right for you, you\ncan change the speed at which I\ntalked using the little gear\nicon in the YouTube video. If\nI'm talking way too fast for\nyou, you can slow me down. And\nat the same time, if I'm talking\ntoo slow, you can speed me up,\nyou also don't even have to go\nin order. You can bounce around\ntopic to topic, if you don't\nwant to learn full stack, you\ncan skip the full stack stuff.\nIf you don't want to learn\ncoding, we can skip the coding\nstuff. If you only want to go to\nthe advanced stuff, go to the\nadvanced stuff. You are highly\nencouraged to pause, come back\nand ask questions. The\nblockchain and smart contract\nworld is incredibly\ncollaborative. So be sure to use\ntools like the discussions tab\nof our GitHub repository, asking\nquestions on Stack Overflow and\nAetherium Stack Exchange and\ntagging relative technologies,\nmaking issues on different\nGitHub repositories that you're\nworking with jumping into\ndiscord, Reddit, Twitter, and\nany other place that these\ncommunities and technologies are\ncongregating. And the reason I'm\nputting so much emphasis on\nthese community aspects is that\nbecoming a solidity and\nblockchain engineer is so much\nmore than just the solidity\npart. Being comfortable with all\nthe tools in this space,\nincluding the ones to get help\nand to give help are essential\nto being successful here.\nNetworking is massive, and it\nmakes it a ton of fun. As you\ncontinue your journey and you\nget more advanced and you're\nlooking for places to meet other\ndevelopers. Hackathons are one\nof the best places to connect\nwith other engineers, the\nchainlink hackathons eath,\nglobal hackathons, and Dev folio\nhackathons are three great\nhackathon suites to connect. And\nno matter where you are in your\njourney, they're great places to\nflex what you've learned.\nAlright, so those are some of\nthe best practices for this\ncourse. You're standing at the\nedge of the rabbit hole, looking\ndown, peering into the world of\nweb three and smart contracts\nand blockchain. If you're like\nme want to jump in, you want to\nkeep going further. Let's begin\nour journey into the world of\nsmart contracts. And it all\nstarts with the blockchain\nbasics.\nNow, I know you're excited\nto get coding. But before we\njump in, we want to learn some\nof the fundamentals of\nblockchains and smart contracts.\nUnderstanding these ideologies\nand these basics are so\nimportant, because it'll dictate\nhow you architect your\ndecentralized applications,\nlearning the basics of\nblockchain and solidity is\ncritical. But if you already\nknow the basics of a blockchain,\nfeel free to jump into lesson\ntwo.\nNow, since you're here,\nyou've probably heard of Bitcoin\nbefore. Bitcoin was one of the\nfirst protocols to use this\nrevolutionary technology called\nblockchain. The Bitcoin white\npaper was created by the pseudo\nanonymous Satoshi Nakamoto, and\noutlined how Bitcoin can make\npeer to peer transactions. In a\ndecentralized network. This\nnetwork was powered by\ncryptography, decent Tality, and\nallowed people to engage in\ncensorship resistant finance, in\na decentralized manner due to\nits features, which we'll talk\nabout in a little bit. People\ntook to this as a superior\ndigital store of value, a better\nstore of value over something\nlike gold, for example, and\nthat's why you'll also hear\npeople commonly refer to it as a\ndigital gold similar to gold.\nThere's a scarce amount or a set\namount of bitcoin available on\nthe planet, only so much that\nyou can buy and sell. You can\nread more about the original\nvision in the white A paper\nwe've linked to the white paper\nin the GitHub repo associated\nwith this course. Now, this was\nan insane breakthrough in a\nlittle bit, we're going to learn\nexactly how this is all possible\nand how this actually works\nunder the hood. Some people\nthough, saw this technology and\nwanted to take it a little bit\nfarther, and do even more with\nthis blockchain technology. And\na few years later, a man named\nVitalik Buterin, released a\nwhite paper for a new protocol\nnamed Aetherium, which use this\nsame blockchain infrastructure\nwith an additional feature. And\nin 2015, him and a number of\nother co founders released the\nproject Aetherium, where people\ncould not only make\ndecentralized transactions, but\ndecentralized agreements,\ndecentralized organizations, and\nall these other ways to interact\nwith each other without a\ncentralized intermediary or\ncentralized governing force.\nBasically, their idea was to\ntake this thing that made\nBitcoin so great, and add\ndecentralized agreements to it,\nor smart contracts. And in fact,\ntechnically, these smart\ncontracts weren't even really a\nnew idea. Back in 1994, a man\nnamed Nick Zabo, had actually\noriginally come up with the idea\nsmart contracts are a set of\ninstructions executed in a\ndecentralized autonomous way,\nwithout the need for a third\nparty or centralized body to run\nthem. And they come to life on\nthese blockchains, or these\nsmart contract platforms, like\nAetherium. And it's the smart\ncontracts that are going to be\nthe core thing that we're going\nto be working on in this course,\nand that we're going to be\ndeveloping, you can think of\nsmart contracts in the same way\nyou think of traditional\ncontracts or traditional\nagreements. They're just a set\nof instructions between parties,\nexcept instead of written on pen\nand paper or typed up in\nMicrosoft Word, they are written\nin code and embodied on these\ndecentralized blockchain\nplatforms. And that's also where\nthey're executed. Instead of\nbeing executed by the two\nparties, or three parties, or\nhowever many parties that are\ninvolved. This removes this\ncentralized issue that we'll\ntalk about more in a bit. This\nis one of the main\ndifferentiators between the\nEtherium protocol and the\nBitcoin protocol. It's these\nsmart contracts. Now,\ntechnically, bitcoin does have\nsmart contracts, but they're\nintentionally Turing incomplete,\nwhich means they don't have all\nthe functionality that a\nprogramming language would give\nthem. This was an intentional\nmove by Bitcoin developers.\nBitcoin developers viewed\nBitcoin as a store of value\nversus Aetherium, developers\nviewed Aetherium as both a store\nof value and a utility to\nfacilitate these decentralized\nagreements. Now, the smart\ncontracts on blockchains alone\nare absolutely incredible.\nHowever, they do come with a\nhuge issue. If we want these\ndigital agreements to replace\nthe agreements in our everyday\nlives, they probably are going\nto need data from the real world\nblockchains by themselves\nactually can't interact with and\ncan't read or listen to data\nfrom the real world. This is\nwhat's known as the Oracle\nproblem. These blockchains are\ndeterministic systems and\nthey're deterministic on\npurpose. And we'll learn about\nmore about how that works in the\nsessions to come. So everything\nthat happens with them happens\nin their little world. But if\nthey're going to be these\nagreements, they need external\ndata and they need external\ncomputation. And this is where\nOracle's come into play.\nOracle's are any device that\ndelivers data to these\ndecentralized blockchain or runs\nexternal computation. However,\nif we want our applications to\nstay truly decentralized, we\ncan't work with a single Oracle\nor a single data provider or a\nsingle source that's running\nthese external computations. So\nwe need a decentralized Oracle\nnetwork. Similar to our\ndecentralized blockchain\nnetwork, you're on chain logic\nwill be decentralized, but you\nalso need your off chain data\nand computation be\ndecentralized, combining this on\nchain decentralized logic. With\nthis off chain, decentralized\ndata and decentralized\ncomputation gives rise to\nsomething called hybrid smart\ncontracts. And most of the\nbiggest protocols that we\ninteract with today are some\ntype of hybrid smart contract or\ninteract with hybrid smart\ncontracts. To some extent, this\nis where the protocol chaining\ncomes into play. It is a\nmodular, decentralized Oracle\nnetwork that can both bring\nexternal data and external\ncomputation into our smart\ncontracts to make sure they're\ndecentralized end to end, while\ngiving them the feature richness\nthat we need for our agreements.\nchainlink allows for us to get\ndata to upkeeps, get random\nnumbers or really customize our\nsmart contracts in any\nmeaningful way. Now, throughout\nthe course, we're going to use\nthe terminology smart contract.\nHowever, whenever we say smart\ncontract, we're often using it a\nlittle interchangeably with\nhybrid smart contracts, but just\nknow that when we say hybrid\nsmart contract, we're talking\nspecifically about smart\ncontracts that have some type of\noff chain component. Now since\nthe theorems release, a number\nof different block chains or\nsmart contract platforms have\ncome to light such as avalanche\npolygon, Phantom harmony, and\nmore. For the majority of this\ncourse, we're going to be\nassuming that we're going to be\ndeploying to the Ethereum\nnetwork. However, everything\nthat we learned here is going to\nbe applicable to the vast\nmajority of the blockchains out\nthere like polygon, avalanche,\nPhantom harmony, etc, and\nunderstanding everything from a\ntheory and funding mentals will\ngive you the skills that you\nneed to switch chains very\neasily with literally one line\nof code. So don't worry about\nlearning a specific tool or with\na specific chain because most of\nthem work together seamlessly.\nNow, there are a couple of smart\ncontract platforms that don't\nuse solidity. But still learning\nthe fundamentals here will make\nyou much better at those as\nwell. And the Etherium by far\nhas the most value locked and is\nthe most used blockchain and\nsmart contract platform out\nthere. You'll also hear those\ntwo terms used a little bit\ninterchangeably as well.\nSometimes they'll say smart\ncontract platform, sometimes\nthey'll say blockchain, they\nkind of mean the same thing.\nObviously, blockchains could\nmean store of value and smart\ncontract platform, but you get\nthe idea. Similarly, chainlink\nis the most popular and powerful\ndecentralized Oracle network is\nthe one that we're going to be\nfocusing on for this course as\nwell. chainlink is also\nblockchain agnostic. So to work\non Aetherium, avalanche, Polygon\nSolana Terra, or really any\nother blockchain out there. Now,\nthroughout this course, you'll\nhear the term DAP or\ndecentralized Protocol, or smart\ncontract Protocol, or\ndecentralized application. And\nthey all kind of mean the same\nthing. A decentralized\napplication is usually the\ncombination of many smart\ncontracts. And when we get into\nsolidity, you'll see what a\nsingular smart contract really\nlooks like. And like I said,\nlearning all these core\nfundamentals will make you a\nbetter solidity and a better\nsmart contract developer, you'll\nalso hear the term web three a\nlot in this video. And in the\nindustry, web three is the idea\nthat blockchain and smart\ncontracts are the next iteration\nof the web web one being this\npermissionless open source world\nwith static content, web two\nbeing the permissioned web with\ndynamic content, but all the\nagreements and logic runs off of\ncentralized servers where they\ncontrol your information. And\nthen web three comes back to the\npermissionless web. But once\nagain, with dynamic content, and\ninstead of centralized servers,\nrunning your logic,\ndecentralized networks, run the\nlogic creating these censorship\nresistant agreements, that the\nsmart contracts enable is also\ngenerally accompanied by the\nidea that the users own the\nprotocols that they work with,\nand it's an ownership economy.\nYou'll see what I mean later in\nthis course. And we've talked a\nlot about the history and about\nthe high level of these\nprotocols and of the smart\ncontracts and what they can do.\nBut what do these smart\ncontracts really mean? What is\nit when I say trust, minimize\nagreements or unbreakable\npromises? What is the real value\nadd of these smart contracts?\nBefore we look under the hood,\ntake a peek at how this all\nworks. From a technical\nstandpoint. Let's learn what all\nthe value of this is. What is\nthe purpose of us building all\nthese technologies? Have you\ntaken this course? What problem\ndoes this technology solve? In\nmy mind, a technology is really\nonly as good as the problem that\nit solves. If it doesn't solve a\nproblem, then why bother Mark\ncontracts, Blockchain web three\ncryptocurrencies, those are all\njust different words that\nencapsulate the idea of what\nwe're doing in such a unique\nparadigm. I think the easiest\nway to sum up what these smart\ncontracts do is that they create\ntrust minimized agreements. And\nif you might be scratching your\nhead to that. A much easier way\nto think about it is just that\ngive rise to unbreakable\npromises. Yes, you heard that\nright. Unbreakable agreements\nand promises. Additionally, they\ngive rise to speed, efficiency\nand transparency, and a number\nof other things. I made a video\npretty recently about exactly\nthis. So let's dive in and take\na listen to the purpose the\nundeniable value\nof smart contracts\ncryptocurrencies, fundamentally\nre landscape markets and\nagreements as we know them.\nUnfortunately, you've probably\nonly been bombarded with people\nscreaming about empties and\nmoney. Now, some of the memes\nare fun, but let's forget the\nbullet and get down to the\nessence of the space. If you're\nalready in web three. This is\nthe video to send to your\nfriends to explain why you're so\nexcited about this space and\nexplain why we're here. And then\nif you're not into crypto,\nyou've come to the right place.\nAnd yes, there are fun memes and\nmarkets and there's some money\nstuff in there all these things.\nBut outside of all that the\npurpose of blockchains relates\nto the age old elementary school\nunbreakable, promise the pinky\nswear, let's get Froggy. Nearly\neverything you do in life is the\nresult of an agreement or a\ncontract. Your chair was the\nresult of an agreement to buy\nand sell lumber to assemble and\nsell the chair to a real tailor\non Amazon. Then you made an\nagreement to buy the chair for\n$40. The lights in your house\nare powered by electricity,\nwhich is an agreement from you\nand the electric company you\nagree to pay them in return\nthey'll keep the lights on the\nelectricity they generate it's\nagreements between them and\nengineers who built turbines to\ngenerate the electricity with\ninsurance you agree to pay some\namount of money to them every\nmonth, and in return, they will\ndo nothing or I mean, they'll\ncover your medical bills, almost\neverything you do and everything\nyou interact with is the result\nof some form of agreement or\ncontract in some aspect. Now,\nagreements and contracts can\nfeel kind of abstract and boring\nto really grasp on to simplify,\nwe can also refer to them as\npromises. When you get an oil\nchange. They're promising that\nthey will faithfully change your\noil In exchange for money, when\nyou put money in the bank, they\npromise to keep it safe in\nexchange for them to use your\nmoney to give out loans. When\nyou buy a lottery ticket, the\nlottery promises to give you a\nfair chance at winning a ton of\nmoney in exchange for you buying\nthe ticket. Whenever you make\none of these agreements. In a\nway, you're asking them to pinky\nswear to not screw you over and\nto treat you fairly. But this\ndoesn't always happen. Let's\nlook at a real world example of\nsomeone breaking the Pinkie\nswear back in the 80s and 90s,\nMcDonald's ran a promotion for\npeople to win money by\ncollecting McDonald's Monopoly\ngame cards. The idea was simple.\nYou buy McDonald's in return,\nyou get a chance to win $1\nmillion. You can imagine\nMcDonald's literally going Hey,\neverybody, I promise you if you\nbuy our MC food and McNuggets,\nwe'll give you a fair chance of\nwinning this money, we ended up\nbreaking this promise, instead\nof having a fair chance of\nwinning your chance was in fact,\nzero in the mid 90s. Between 13\nand $24 million went into the\npockets of not people playing\nthe game, honestly. But a group\nof corrupt insiders who had\nrigged the game, meaning that\nwhen you played the McDonald's\nMonopoly game, you were buying\ninto a set of lies and promises\nthat were 100% always going to\nbe broken. And the thing is, it\ndoesn't really matter if this\nwas McDonald's fault or not.\nThey were the ones making the\npromises that they ultimately\ncould not keep. Another way you\ncould think about it is that\nthat's $24 million that they\nessentially stole from you and I\nnow if this system was deployed\non a blockchain was something\ncalled a smart contract, it\nwould have been impossible to\ndefraud this $24 million due to\nsmart contracts being immutable,\ndecentralized and transparent.\nBut I'll get back to that in a\nminute. In all the agreements\nand contracts we make, imagine\nmaking a pinky swear with a 10\nyear old and imagining how that\nagreement would hold up. Hey,\nbuddy, Could you could you\nplease keep my money safe? You\ncan play with it if you like,\nbut just please have it when I\ncome back. Immediately. You\nmight get that worrying feeling\nin your chest, something might\ngo wrong. This 10 year old might\nlose your money. You might be\nthinking, how could I trust\nthem? Will they break their\npromise and this feeling of I\ncan't breathe because of\nuntrustworthy situations\nhappens? Once all the time. Can\nI trust this used car\nsalesperson to give me a good\ncar? Can I trust this tag that\nsays machine washable? Or will\nit make my shirt shrink? Will my\ninsurance provider break their\npromise of covering my medical\nbills want to get hit by a bus?\nI'm Patrick promises he'll go on\na hike with me. Well, he\nactually I actually will. But\nthe issue with our current\nagreements and contracts is we\nhave to trust the people. We're\nmaking them to do the right\nthing. However often they're\nactually incentivized to not do\nthe right thing. insurance\ndoesn't want to pay out money.\nSometimes salespeople just want\nto get the shit off the shelves\nand with my girlfriend, I\npromised to go on a hike. But I\nneed hikes. Where else is has\nhappened. Now you might be\nthinking okay, Patrick, this\nseems cool. But like Where has\nthis actually affected me? Well,\nthe McDonald's lottery that we\njust spoke about above during\nthe Great Depression with the\nrun of the banks banks promised\nto keep our money safe and that\nwhen we went back to go get it\nthey would actually have the\nmoney there. And well and behold\nthere were times that they\ndidn't have the money they're\njust last year Robin Hood\npainted this amazing picture. On\nuser application we will give\nyou access to the markets we\npromise we will give you a\nretail investor a fair chance of\ninteracting with the world the\nfinance\nside, but not this asset. This\nasset, this asset or this asset,\nthe 2008 financial crisis\nremember that shady deals behind\nclosed doors combined with lies\nabout financial product brought\nthe world to its economic knees,\nhow are you? hyperinflation in\nZimbabwe hyperinflation in\nBrazil, fair enough. US history\nis a relentless lesson of\ntrustworthy entities being\nnotorious promised breakers and\nwe finally have a way to fix it\nwith smart contracts. Now,\nbefore I jump into smart\ncontracts, a lot of people might\nbe thinking, hey, cool in all,\nhowever, we have systems in\nplace to protect against a lot\nof these things, which is true,\nand which is great. And that is\na very helpful step forward. But\nthese systems often breaks ones\nin 2008 Definitely didn't work.\nThe ones with the Robin Hood\ncrisis definitely didn't work.\nAnd even if these systems apply,\nand you go to court to try to\nwork them out, maybe you're in\ncourt for years before you\nactually see a resolution and by\nthat time, what you needed the\nmoney for is longer. So what is\nthis technology? What is this\ntool that can fix this\nfundamental problem in our\nagreements today, this tool is\nsmart contracts and this tool is\nwhat the blockchain was built\nfor. Now, I'm gonna give you a\nquick overview of what a smart\ncontract is. However, I'm\nleaving some links in the\ndescription for more in depth\nexplanations, but the basics of\nthem is a smart contract is an\nagreement contract or a set of\ninstructions deployed on a\ndecentralized blockchain. And\nonce the contract or set of\ninstructions is deployed, it\ncannot be altered, it\nautomatically executes and\neveryone can see the terms of\nthe agreement. Real basics of it\nis that the code is executed by\ndecentralized collective like a\ngroup of people but a group of\npeople running a certain\nsoftware. This means that no one\nperson or entity can actually\nalter any of these agreements or\nchange the terms of the\narrangement in these traditional\nagreements. Whoever owns the\ncontract, whoever owns the\nexecution of the contract can\nflip a switch and say, We're not\ngoing to do that anymore. In\nsmart contracts and web three in\nblockchain, you no longer can do\nthat. Typically, these smart\ncontracts are on a decentralized\nblockchain, and used in\ncombination with a decentralized\nOracle network to get the real\nworld assets and information.\nAnd if these words sound like\nI'm conjuring up a magic spell,\nwell, again, check the links in\nthe description. If you want to\nlearn more about the technical\nimplications. If you're not a\ntechnical person, then you're\nnot interested in getting into\nthe nitty gritty, you can kind\nof think of it like HTTPS, I bet\nthe vast majority of you don't\neven know what HTTPS stands for.\nAnd yet you use it every single\nday whenever you log on to the\ninternet. So how does this fix\nthe McDonald's Monopoly issue?\nIn its traditional form, the\nlottery was executed behind\nclosed doors, somebody operated\nand owned the code and the\ncontracts and the agreements\nthat ran the lottery, and they\nhad the power to alter it. And\nnobody other than the people\ninternal on the lottery could\naudit this altering happening.\nNow if the code for this lottery\nwas deployed onto a blockchain,\nevery time a hacker attempted to\nalter it, everyone would be\nnotified. Not only that, but you\ncouldn't even alter it, because\nthe terms of a smart contract\ncannot be altered. Once\ndeployed, combine that smart\ncontract with a chain link VRF\nOracle to get a verifiably\nrandom number. And presto, you\nnow have a perfectly\ndecentralized, unalterable\nagreement that is impossible to\nhack commit fraud or manipulate\nwe have just saved the public\nbetween 13,000,020 $4 million\njust by fixing the issue of\ntrust. How does this fix Robin\nHood? Well, the problem with\nRobin Hood is already fixed.\nRight? Again, the problem is\nthat there's a centralized body\nthat can flip a switch at any\ntime and say you can't access\nthese markets anymore. We're\nbreaking our promise of actually\ngiving you access to the\nmarkets. This is already fixed\nwith something called\ndecentralized exchanges. And\nthese exist today, one of these\nexchanges is one called uniswap.\nYou can swap ERC 20 tokens,\nwhich are kind of the equivalent\nof stocks, but some are some\nare, it's a little confusing. I\nwon't get into that here either.\nBut it doesn't have that\ncentralized body that can flip a\nswitch and ruin access to the\nmarkets. And had these investors\nbeen on a decentralized\nexchange, it would have saved\nthem hundreds of millions of\ndollars, and it would have\nprevented fraudulent market\nmanipulation. How does it fix\nrun of the banks with\ntransparency built in an\nautomated solvency checks, you\ncan build a bank like smart\ncontract that has insolvency\nchecks built in that make it\nimpossible to get there and\nsolve it means brokers any\nagreement or any history lesson,\nwhere there was a trust\nassumption that was broken,\nsmart contracts can be applied\nto and should be applied to,\nespecially in a time where big\nmoney runs, owns and controls\neverything, we desperately need\nto move to a world where some\nself interested centralized\nentity can't flip a switch and\nruin people's access to the\nservices that they need. We can\nmove away from a world that is\nbrand based to a world that is\nmath based. Right now, if you\ninteract with a service that you\ndon't like, or that they break\ntheir promise, the only thing\nyou can do is walk down the\nstreet to the next service\nthat's going to make the same\nset of promises. And you have to\nhope and pray that they're\nactually going to keep it we can\nmove from that to a world where\nwe can just look at the map and\nsay, oh, okay, one plus one\nequals two. This is what this\nagreement is going to do for me\nevery single time guaranteed,\nbecause it's a decentralized\nautonomous agent has no\nincentive to be evil, and\neverything is transparent and\nout in the open of a big\ncompany. And if it was better\nfor me for one plus one to equal\nthree, maybe I would go behind\nsome closed doors and flood some\nnumbers and come back and be\nlike, hey, one plus one equals\nthree with smart contracts.\nThat's impossible. Doing the\nright thing is infrastructural\nnow, given the choice between\ntwo agreements, one where you\nhave to trust a single\ncentralized entity that they're\ngoing to do the right thing for\nyou, versus a decentralized\nuntampered double collective,\nwhich one you're gonna choose.\nI'm picking the one that can't\nscrew me over every single time.\nFor every agreement I can apply\nit to now this technology is\nrelatively new, but we have\nalready seen it relandscaping\nentire markets and continue to\ndo so the traditional financial\nworld is already getting its\nlunch eaten by defy or\ndecentralized finance. There's\nalready over $200 billion of\npeople's money in these\nprotocols to help have a more\nfair, more accountable, more\ntransparent financial system.\nThis defy movement is one of the\nmain reasons I got into this\nspace because we desperately\nneed to move away from where we\nare right now. And and people's\nchances for wealth being sucked\nup by some group that's bending\nthe rules in their favor and\nsmart contracts are our ticket\nto that better world. More and\nmore industries are also coming\nover to smart contracts and\nblockchain because of all the\ninnovations and because of all\nthe advantages that it has as we\ngrow and as we get better as we\nget closer to this vision of\nhaving this concept fulfilled,\ntrust minimized agreements.\nThese smart contracts are\nminimizing the trust that we\nneed to give other people in\norder for these agreements to be\nexecuted. If trust minimized\nagreements is too confusing for\nyou just say unbreakable\npromises. Now I gotta be honest\nwith you guys. blockchains and\nsmart contracts and\ncryptocurrencies can actually do\nmore than just trust, minimize\nagreements. They have security\nbenefits, uptime benefits,\nexecution, speed benefits, and a\nwhole lot more. But it's a lot\neasier to just learn about one\nand learn the other ones later,\nright. It's kind of like\nsprinkles on top. So this is why\nwe are here. This is why we're\nbuilding this future and this is\nwhy we are so excited about it.\nEven in just this introduction\npart, we've learned a ton. So\nlet's do a quick summary of what\nwe've learned so far. Bitcoin\nwas the first protocol to take\nthis blockchain technology into\nthe limelight and take these\ncryptocurrencies into the\nmainstream Bitcoin is a sort of\ndigital gold or a store of value\nable to make transactions\nbetween users in a decentralized\nmanner. Aetherium and other\nsmart contract platforms take\nthis blockchain technology one\nstep further, enabling people to\nmake smart contracts and\ndecentralized trust minimized\nagreements, the smart contracts\nand decentralized applications\ncan access and interact with the\nreal world using something\ncalled decentralized Oracle\nnetworks. chain link is a\ndecentralized network that\nallows us to build these hybrid\nsmart contracts, which combines\nour on chain logic with our off\nchain, decentralized data, and\ndecentralized computation,\ngiving rise to our logic being\ncompletely decentralized, and\nour data and external\ncomputation being completely\ndecentralized, giving us all the\nfeatures that traditional\nagreements and traditional\ncontracts have. Now these\ndigital currencies like\nAetherium, and Bitcoin have\nvalue. Even without the smart\ncontract part, having a\ncensorship resistant,\ndecentralized store of value is\nnaturally powerful in its own\nright, we have some links in the\nGitHub repository that will\nteach you how this decentralized\nstore of value flips traditional\nfinance on its head. And it's\nanother one of the great reasons\nfor building smart contracts.\nBut again, the easiest way to\nboil it down is trust minimized\nagreements, or unbreakable\npromises. But let's also go into\nsome of these other features\nthat smart contracts have over\nour traditional environment. The\nfirst feature, of course, is\nthat they are decentralized. And\nthey have no centralized\nintermediary, the different\nindividuals that run one of\nthese blockchains are known as\nnode operators. And it's the\ncombination of all these 1000s\nof node operators running the\nsame software running these\nalgorithms running these smart\ncontracts that make the network\ndecentralized. We'll dive deeper\ninto how that works later. The\nnext feature is transparency and\nflexibility in these\ndecentralized networks. Since\nall these individual node\noperators run the software,\neverybody can see everything\nthat's happening on chain,\nmeaning there's no shady deals,\nthere's no weird things\nhappening. Anything that's going\nto be unfair, people will be\nable to see and just not use,\neverybody has perfect\ninformation and has to play by\nthe same rules. Now\nadditionally, this doesn't mean\nthat there's no privacy, the\nblockchain is pseudo anonymous,\nmeaning that you aren't\nnecessarily tied to an identity\nin real life, they also have the\nfeature of speed and efficiency.\nFor those of you who have ever\ntried to do a bank transfer or\nsend money across seas, you\nknow, it sometimes can take two\nto three weeks, when in fact,\nall these banks are really doing\nis basic math. They're\nsubtracting money from your\nbalance and adding it to some\nother balance. Why does it take\nso long, in the blockchain, all\nof these transactions happen\ninstantly. Another instance for\nthose in the financial world\ntoday know that clearing houses\nand settlement days can take a\nlong time. In the blockchain,\nthere's no need for any of that,\nbecause they happen instantly.\nThis obviously is much quicker,\nbut it also makes for much more\nefficient interactions with each\nother security and immutability.\nAgain, immutable means that it\ncan't be changed. Once a smart\ncontract is deployed, that's it,\nwhatever is in the code is going\nto be in the code forever, they\ncannot be altered or tampered\nwith in any way. This means that\nthe security is much easier.\nWhereas in a centralized world,\nsomebody can hack into the\nserver, jump into the database\nand change some numbers. You\ncan't do that in the blockchain\nworld. And since it's\ndecentralized, in order to hack\nthe blockchain, you'd have to\ntake over half of the nodes as\nopposed to in the centralized\nworld, where you only have to\ntake over one in the regular\nworld. If your computer and your\nbackup computer go down, all of\nyour data is gone. In the\nblockchain world, if your\ncomputer and your backup\ncomputer go down, all your data\nis safe, because it's being run\non all these other decentralized\nnodes. And even if a few 100\nnodes or a few 1000 nodes go\ndown. It doesn't matter because\nas long as one node has a copy\nof the blockchain, you're good\nto go hacking a blockchain is\nnearly impossible, and leaps and\nbounds more difficult than\nhacking a centralized server.\nNot only that, but this is safer\nin the asset sense as well. All\nyou need to access your\ncredentials and your information\nin your assets is your private\nkey. Which is basically your\npassword for all of this. And as\nwe've discussed in the video,\nthe smart contracts remove this\ncounterparty risk, remove this\ncentralized intermediary, remove\nthese trust gateways that we\nhave to do in web two. When we\nengage with users and\nindividuals, they don't always\nhave our best interests at heart\nsmart contracts, remove this\ncounterparty risk, because once\none of these contracts is\ncreated, they can't go in and\nthey can't alter it. And they\ncan't let greed or ego or\nanything else, get the better of\nthem and alter the terms of the\ndeal. And as we said, this gives\nrise to these trust minimized\nagreements or these programmatic\nunbreakable promises. We move\naway from brand based agreements\nto math based agreements, where\nwe can look at the cryptography\nwe can look right at the code\nand see exactly what something\nis going to do and how it's\ngoing to execute, versus having\nto rely on a human being doing\nthe right thing with smart\ncontracts and decentralized\nhybrid smart contracts. Doing\nthe right thing is\ninfrastructural all these pieces\nboil down to us having the\nfreedom to interact the way we\nwant to interact without having\nto be afraid that interacting\nlike that is going to screw us\nover this trust minimized piece,\nthese unbreakable promises, make\ninteractions so much better. In\na purely web two world, we're\nconstantly bombarded with\nmessages of projects and\nprotocols pushing us to move or\nact in the direction that makes\nthem more profitable. Versus in\nthe smart contract space,\nwe can see everything\ntransparently. And we can even\nengage in interact and be\npartially owners of the\nprotocols and the interactions\nthat we decide that we want to\nbe a part\nof. So smart contracts have\nbeen around for a few years now.\nAnd what did they generate for\nwhat industries have come about\ndue to these smart contract\nplatforms being around? Well,\nyou've probably heard of some of\nthese and some of these we've\nalready mentioned, but let's\ngive you a quick refresher, d\nphi d phi stands for\ndecentralized finance. And it\ngives users the ability to\nengage with finance and markets\nwithout having to go through a\ncentralized intermediary. For\nexample, like we said, with\nRobin Hood, you no longer have\nto trust that Robin Hood would\ncontinue to give you access to\nthe markets, you instead would\nbe able to see in the smart\ncontract. Yes, I have access to\nthe markets or in the 2008\nfinancial crisis. You never have\nto trust that these groups and\ninstitutions are giving you the\ncorrect things on the back end.\nYou can see everything\ntransparently right on the\nblockchain, you can engage with\nthings like money markets and\nsophisticated financial products\neasy effectively and securely at\nthe time of recording. defi has\naround $200 billion in assets\nunder management and is quickly\ngrowing. If you're really\nexcited about defy we have a ton\nof defy examples showing you how\nto build and interact with these\nprotocols. In coming lessons.\nDows or decentralized.\nautonomous organizations are\nanother group that we've already\nmentioned. Dows are groups that\nare governed completely\ndecentralized by a set of\ninstructions or smart contracts\non chain. There are some massive\nbenefits here where engagement\nis much easier. The rules are\nblack and white. And you can see\neverything directly on chain\nvoting and governance\ntechnologies completely\ndecentralized in the blockchain\nspace is one of the big ones\npushing how we can evolve\npolitics and how we can evolve\ngovernance to make it more\nefficient, fair and reasonable.\nAnd you better know it, we have\nsome examples of how to build\nDows and how to work with Dows\nincoming lessons. So be sure to\nwatch those NF T's Stanford non\nfungible tokens and can really\nbe kind of described as digital\nart or just a unique asset, they\ncan do so much more, but we'll\nkeep it high level for now.\nProjects like board apes and\ncrypto punks have revolutionized\nthe way that people get paid for\ntheir work, show off their\ncreativity, status, and so much\nmore. And yes, of course, we\nhave lessons showing you how to\ncreate and interact with NF T's\nas well, so many other groups\nand so many other industries are\nbeing created as a result of\nthis insane technology. And\nmaybe after finishing the\njourney with us here, you go out\nand you'd be the one to pioneer\nthe next industry or the next\nbillion dollar idea you've\nlearned so much already. But now\nthat we've learned a lot of this\nhigh level information, let's\nfinally jump in, and let's make\nyour first transaction and let's\nget you set up to interact with\nthis new world. In this next\nsection, we're going to get you\na wallet and we're going to show\nyou exactly what a transaction\nlooks like and feels like. Let's\ndive in. This is the Aetherium\nwebsite aetherium.org We are\ngoing to make a transaction on a\ntest Aetherium blockchain I'll\nexplain what that means in a\nlittle bit. This is going to be\nour first transaction that's\nmade on the blockchain. Now\nagain, this process that we're\ngoing to follow is going to work\nthe exact same with polygon,\navalanche Phantom and all these\nother EVM compatible\nblockchains. I'll explain what\nthat means in a bit too. For\nnow, just follow along and have\nfun in order to make a\ntransaction on any of these\nblockchains. The first thing\nthat we need to do is we need to\nset up a wallet. So I'm gonna go\nahead and go to meta mask\nbecause it's one of the most\npopular wallets and one of the\neasiest to Use, we're going to\ngo ahead and download it. I'm\nusing the brave browser, but it\nworks for Chrome, Firefox or\nreally any other browsers. And\nit's just going to be a little\nextension in the top right hand\nof your browser. This way, we\ncan really easily see it any\ntimes what we have in our\nwallet, will still are all of\nour Aetherium based currencies.\nSo I'm gonna go ahead and\ninstall meta mask for brave,\nadd to brave, add extension. And\nnow we can go ahead and get\nstarted with working with Brave,\nthis is the first step you\nabsolutely need to take when\nstarting your journey and one of\nthe easiest steps to take. So\nwe're gonna go ahead and get\nstarted. And we're going to\ncreate a brand new wallet. So\nwe're gonna go ahead and hit\ncreate wallet. If you already\nhave a wallet, you can actually\nimport it via I have a seed\nphrase, and we'll talk about the\nseed phrase or secret phrase in\na little bit. So let's go ahead\nand create a new wallet. And\nsure, we'll agree to help out\nMetamask now we will create our\npassword make sure that this is\nreally secure. For the purpose\nof this demo, my passwords are\njust gonna be password. But\nplease don't have that be your\npassword. You may also get a\nvideo like this teaching you\nabout your secret recovery\nphrase. This is the same thing\nas your pneumonic. But see your\nrecovery phrase is a lot more\nclear as to what it is. And\nagain, to give us a ton of\ndifferent tips on how to\nactually store it and keep it\nsafe. The main takeaway from\nthis is never shared this\nabsolutely never shared this. So\nwe're going to go ahead and\nclick reveal secret words. I'm\nshowing you guys here because\nthis is just a demo and I don't\nreally care. However, if you\nshow this secret phrase to\nanybody else, they will have\naccess to all the funds in your\napplication. So everything that\nwe're going to do in this\ntutorial, we're going to use\nfake money, we're going to use\nnot real money, so it doesn't\nmatter. Now for the purposes of\ntesting and developing, I always\nrecommend using a completely\nseparate meta mask, a completely\nseparate Wallet. So for going\nthroughout this entire course,\nif you already have a wallet, or\nif you already have a meta mask,\nplease just set up a new one,\ncreate a new profile, create a\nnew meta mask, and this will be\nyour wallet that you use for the\nduration of this course.\nHowever, if you're going to\nactually put money in here, you\nabsolutely need to have this\nwritten down. Because if you\nlose access to this, and all\nyour private keys, which we'll\ntalk about in a little bit, you\nwill lose access to your wallet,\nand you will lose access to all\nyour funds. So they give some\ntips like store this phrase and\na password manager like one\npassword, write this phrase down\non a piece of paper, put it in a\nsecure location, memorize it,\nwhatever you want to do, just\nmake sure you have this backed\nup somewhere, I'm just gonna go\nahead and hit download this for\nnow, it's not best practice to\nsave to your computer, it is\nmuch better to use a password\nmanager or write it down on a\npiece of paper or something. So\nwe're gonna go ahead and hit\nnext. And it's going to ask us\nto verify that we actually have\nit written down. And we're gonna\ngo ahead and hit confirm, and\ngreat and gives us a couple\nother tips. Remember, definitely\ntake these tips very seriously,\nespecially if you're gonna use\nthis for real money. Like I\nsaid, For this demo, we're just\ngoing to use test money. So it's\nnot as big of a deal. But if you\nput real money in, you\nabsolutely need to backup this\nseed phrase or secret phrase or\nwe're going to refer to it as\nour pneumonic phrase. Awesome.\nNow we can see the interface of\nour wallet here full screen. And\ndepending on your browser, you\ncan actually come up and pin it\nto your browser so that you can\njust click it up in the top\nright, and it'll drop down and\nyou can see the same interface\nhere our pneumonic phrase that\nsecret phrase, those that secret\n12 words that they gave us have\ngiven us access to a new\naccount, the address of our\naccount is located right here.\nIn fact, if we click it and copy\nit to our clipboard, and go to a\ntool called a block explorer\ncalled ether scan, we can\nactually paste our address in\nhere and see details about our\naccount. Ether scan, like I\nsaid, is what's known as a block\nExplorer. And it's a way to view\ndifferent addresses transactions\nand other happenings that happen\nwith a blockchain. If we look at\nthis address that we just\ncreated on ether scan for\nEtherium main net, we can see no\ntransactions have happened.\nThere's really no analytics,\nthere's no comments, there's no\nbalance, there's no value,\nbecause it's a brand new wallet,\nand this address that we just\npunched into ether scan\nrepresents our unique address\nour unique wallet only\nidentifiable for us. We'll talk\nabout ether scan a little bit\nmore in a bit because it's a\ntool that we're going to use\nquite often in wallets like meta\nmask, you can actually even\nclick right here and create even\nmore accounts. So let's go ahead\nand create a new account. We'll\ncall this\naccount two.\nAs you can see, this one has a\ndifferent address. So if we\nclick this one, we go back to\nether scan. We paste the address\nin here. We hit Enter. We can\nsee another address again that's\nuniquely identifiable to us,\nright here. It is zero balance,\nno value, no transactions now If\nwe go back to our Metamask, and\nwe click the little button, we\ncan see we have two different\naccounts in here, it's the same.\nIf we hit the extension in the\ntop right, click the button, we\nhave two different accounts. The\n12 word secret recovery phrase\nallows us to create multiple\naccounts, all with the same\nsecret recovery phrase. So that\nsecret recovery phrase will give\nus access to both account one\nand account two and any other\naccounts that we create by\nhitting this Create Account\nbutton, because it gives you\naccess to all the accounts in\nyour meta mask. Now, these\naddresses of both of our\naccounts are the public unique\nidentifiers, but they also have\na private unique identifier only\nidentifiable to us. Similar to\nthe pneumonic, these are private\nidentifiers we never want to\nshare and we never want to give\nout their private This is known\nas your accounts private key. So\nthe mnemonic will give you\naccess over many of these\naccounts, the private key will\ngive you access to just one of\nthese accounts, we can see it by\nhitting these little three dots,\ngoing to account details and\nexport private key, you'll just\nhave to punch in your password\nhere. And you'll be able to see\nyour private key. This is going\nto be your private key for your\naccount, you can think of your\nprivate key as a password for\nyour account that lets you\ncreate transactions. Now the\nreason that I'm showing mine on\nscreen is because I'm not going\nto put any real money in here.\nAnd this is just going to be a\nburner account for this\ntutorial. And I highly recommend\nonce again, you use a burner\naccount, you use accounts that\nyou never put any real money\ninto. And along the way, I'll\nshow you how to make sure that\nyou don't do that. But normally,\nit's not a good idea to show or\nshare your private keys or your\nsecret recovery phrase, if\nsomebody gets a hold of this\nprivate key, they will have\naccess to my account one.\nHowever, they won't have access\nto my account to if they get a\nhold of my 12 word recovery\nphrase or pneumonic they'll have\naccess to both accounts. And\nthis is why when people say keep\nyour private keys safe, your\nkeys, your Bitcoin, your keys,\nyour Aetherium, they're talking\nabout both your mnemonics or\nyour secret recovery phrases.\nAnd your private keys keep those\nprivate, your public addresses\nare totally public. And anybody\ncan view your accounts on\nsomething like ether scan, or\nany other explore. And it's\ntotally okay for people to share\ntheir public addresses. If you\nlose your private key, you lose\naccess to one of your accounts.\nIf you lose your mnemonic, you\ncould potentially lose access to\nall your accounts. Basically,\nwhat I'm trying to say is back\nthese up and keep them in safe\nplaces for this course it's okay\nif you lose one, since we're not\nputting any real money in them.\nBut in the real world, be sure\nto do this. And great. Those are\nsome of the main security\nconsiderations here. Now, if you\nlook up in the top right, right\nnext to that account button that\nwe've been clicking, you also\nsee this thing saying Etherium\nmain net, this is our networks\ntab. And if we click it, we can\nsee a list of all the different\nnetworks that we currently have\naccess to a Etherium main net is\nthe main network of Aetherium.\nAnd this is where real money is\nspent and used for transactions.\nFor this course, we're not going\nto be working with the Etherium\nmain net, we're instead going to\nbe working with something called\na test net. Since we're\nengineers, oftentimes, we're\ngoing to want to test and see\nwhat our code is actually going\nto do and how to interact with\nit. We're going to use a\ncombination of local networks\nand test networks to actually do\nthis to actually test our smart\ncontracts. We're mainly going to\nuse local networks. But we'll\nget to that in a little bit to\nsee some of the test networks\nthat come default with meta\nmask, we hit show slash hide\ntest networks, this will bring\nus into the settings page. And\nwe just hit select this to show\ntest networks in the list. And\nwe just hit on Now if we scroll\nback up, we'll close out of the\nsettings, we hit the network's\ntab again. Now we can see all of\nthese other networks here like\nropsten, Koven, Rinkeby, and\nGarelli. These test networks or\nnetworks that resemble\nAetherium, or polygon, or\nAvalanche or phantom or any of\nthese other blockchains. And we\ncan actually switch our accounts\nto one of these other test\nnetworks. Let's click rink B,\nfor example, we can see that on\nthe Rinkeby test network. We\nalso have zero Aetherium we have\nno money or nothing in here, we\nhave a blank Rinkeby wallet.\nThese test nets work nearly\nidentical to how Aetherium main\nnetworks except for they run\nwith not real money. They run\nwith fake money as a way for us\nto learn and interact and see\nhow these different smart\ncontracts actually work together\nat the time of filming. rink B\nis one of the most popular test\nnetworks along with COVID. So\nwe're going to work a lot with\nRigby In this tutorial, however,\nbe absolutely sure to check our\nGitHub repository to make sure\nthat you're always up to date\nwith the best test network for\nfollowing along with the\ntutorial here since their test\nnetworks people are running them\nout of the goodness of their\nhearts. And sometimes the best\nones actually change so, so be\nsure to follow along with the\nGitHub repository. We might also\nuse COVID From time to time or\nmaybe even Grilli. So we're\ngoing to show you how to use a\ncouple of these different test\nnets. In fact, if we go to the\nGitHub repo associated with this\ncourse, we can see recommended\ntest net is indeed currently\nranking. So that's what we're\ngoing to work with should this\nchange, you should be able to\nfollow along with another test.\nAnd we'll leave notes as to how\nto continue. Now what we can do\nactually is we can go to Rigby\nether scan, we can go to,\nyou can look up Rinku ether\nscan, and it looks like it's the\nfirst thing that shows up\nRinkeby dot ether scan.io, we\ncan punch in this same address,\ncopy and paste it. And we can\nsee some of the details of this\naddress on the Rinkeby ether\nscan. Like I said, right now,\nit's totally blank. This\nnetworks interface later on is\nalso how we're going to be able\nto work with polygon, avalanche,\netc, we'll just have to add\nnetworks. But we'll get to that\nin a bit. And just to reiterate,\ntest nets are free and for\ntesting our smart contracts and\nmain net networks cost money and\nare considered live. Now I also\ndo want to put a caveat here\nthat we do want to keep in mind\nthat these test nets are being\nrun at the goodness of people's\nhearts. So we don't want to\nabuse them, we want to use them\nto learn and then move on. So\ntry not to send a billion\ntransactions on one of these\ntest nets. In fact, what we're\ngoing to do right now is we're\ngoing to send a transaction on\nthe Rinkeby test net. And this\nwill show us exactly what it\nwould look like on a main\nnetwork. In order for us to\nsimulate one of these\ntransactions, we're going to go\nto what's called a faucet. And\nif you go to the GitHub\nrepository associated with this\ncourse, right underneath the\nrecommended test net is going to\nbe a test net faucets, which is\ngoing to show us where the most\nup to date faucet location is\nfor us getting test net\nAetherium. So here we are at\nfaucets dot chain dot link,\nwhich again is the recommended\nfaucet, and what we can do is we\ncan actually put our wallet\naddress in and get some test net\nlink or test net Aetherium. Now\nwhat we are gonna have to do is\nwe are gonna have to connect our\nwallet to the Rinkeby network.\nSo we're going to come down,\nwe're going to switch from COVID\nto Etherium. Rigby, and then\nwe're going to make sure our\nmeta mask is on the Rinkeby test\nnetwork here. Once both of those\nare set up, we're gonna go ahead\nand hit Connect wallet. And\nwe're going to choose meta mask.\nOnce we do that, our meta mask\nis actually going to pop up and\nsay would you like to connect to\nthis website, connecting to a\nwebsite is how we give these\nwebsites in interface to\ninteract with our wallets and\ninteract with our meta masks.\nDon't worry, we're not sending\nany transactions like this,\nwe'll get to that in a bit. So\nwe just we can pick an account\nwe want to connect. Let's choose\nour account one, we'll hit Next.\nAnd then we'll go ahead and\nconnect. Now that we're\nconnected, we can actually see\nour account connected up here.\nAnd that little warning is now\ngone. And our wallet address is\nautomatically placed into here,\nwe're going to make our first\ntest transaction. And for now,\nwe don't need test link. So\nwe're going to leave that off.\nBut later on, we're going to\ncome back and get that test\nlink. For now we're just going\nto need 0.1 test Aetherium.\nSo let's go ahead and complete\nthe security by choosing the\ntraffic lights. And we're going\nto hit Send Request. What this\nis going to do is we're asking\nthis faucet to send us 0.1 test\nAetherium test net faucets are\nways for us to get money into\nour wallets on a test net. And\nthis is why this test and\nAetherium isn't worth any actual\nmoney. Since we can get it for\nfree. These don't exist on Main\nnet, you can't get real\nAetherium or real money for free\non a main network. So we're on\nRinkeby we're getting fake\nRinckey Aetherium. And we're\ngonna go ahead and hit send\nrequest. Once we hit Send\nRequest, this transaction hash\nis going to pop up here, and it\nsays transactions have been\ninitiated waiting for\nconfirmation. This means that\nsome other wallet is actually\ngoing to send us 0.1 test eath.\nAnd this is the transaction that\nit's doing to do that now we\njust have to wait for our\ntransaction to finish verifying\nand finish going through. Now if\nthis doesn't work right away, I\nwould recommend Wait a minute\nand then just try it again. But\nwhat we can do is we can click\nthis transaction hash. If that\ntransaction doesn't show up, we\ncan also just close this. And we\ncan copy our address here. And\nactually we already see 0.1 eath\nin our wallets here. But we can\ngo back over to Rinkeby ether\nscan, paste our address and and\nwe can see that we now have 0.1\nether as a balance. We can also\nsee that we have a transaction\nwith all this information going\ninto our wallet. That's what\nthis green is for. If you click\nthat transaction link, you'd get\nsomething like this, but If you\ndidn't, don't worry, because on\nthe ether scan, if you click the\ntransaction hash in the\ntransaction list, you can also\nsee all the details like that.\nSo now in our meta mask, we have\n0.1 eath. Again, this is fake\nAetherium. And we have a\ntransaction associated with our\nwallet now, which is awesome.\nAgain, though, if we switch\nnetworks, if we switch networks\nback to Etherium main net, you\ncan see that we have nothing on\na theory main net. Or if we go\nto ropsten, we also have\nnothing, we only have this 0.1\neath. On the Rinkeby test\nnetwork, if you want to practice\nworking with another test net,\nand the faucet that we're using,\nhas multiple test nets. Let's go\nahead and try it during this\nsection right now is completely\noptional, you can watch or you\ncan follow along. But for\nexample, I can see in my wallet\nthat we already have COVID\nsupported, so maybe I'll switch\nto COVID. Maybe we'll switch to\nCOVID. In the drop down here,\nwe'll remove test 10 Link,\nbecause we only need test eath.\nWe'll hit I'm not a robot, and\nwe'll send request and the same\nthings will pop up this time,\nthis is going to be for the\nCOVID test net. And once our\ntransaction finishes going\nthrough. Now, same thing on\nCOVID. Here, like what we did\nwith rink B, once our\ntransaction finishes going\nthrough, we'll see 0.1 test eath\non the COVID network, if you\nwant to go ahead and try working\nwith another one of the test\nnets. Like maybe, for example\nCOVID recommend you go ahead and\ngiving it a try. But it's\ncompletely optional. And I would\nalways refer back to the GitHub\nrepo to make sure you're working\nwith the most up to date faucet\nand test net. And if we look\nback at ether scan, we can\nactually see more details on\nwhat actually just took place.\nWhat actually just happened, how\ndid our Metamask get a balance\nof 0.1 eath. All of a sudden?\nWell, if we looked down in the\ntransaction section, we can see\nthat there's a transaction here,\nsome address sent us 0.1 ether.\nAnd if we click the transaction\nhash, we can see more details\nabout what actually went down\nwith this transaction. Now\nunderstanding what's going on in\nthis transaction is essential to\nlearning and being a smart\ncontract developer or just\nengaging with the ecosystem. So\nlet's learn the first bit at the\ntop is this transaction hash.\nThis is a unique identifier for\nthis blockchain or this test net\nthat identifies this exact\ntransaction. This transaction\nhash identifies sending 0.1 eath\nto our address, we can see that\nthe status of this transaction\nwas successful, it didn't break.\nIn any case, we can see the\nblock number that this\ntransaction was included in and\nwe'll get to blocks in a little\nbit, we can see the timestamp\nwhich of course is when this\ntransaction occurred, we can see\nwhich account it was from which\nif we go ahead and open in a new\ntab, we can see that this is the\naccount that this transaction\ncame from. And it's got 3\nmillion ether. Of course, this\nis fake Rinckey ether. So it\ndoesn't really matter, we can\nall see who it was to, which\nagain, is just us. This is our\nwallet address 0x 106 X blah,\nblah, blah, cero x 1066, blah,\nblah, blah, right, the value of\nthis transaction, of course, is\n0.1 ether. Now what's all this\nthat we see as the value so\nobviously, the value is 0.1,\nbecause that's a mode which we\nsent. But we see this\ntransaction fee. In this gas\nprice, we hover over the\ntooltip, we can see if you zoom\nin on your ether scan, you see\namount paid to the miner for\nprocessing the transaction. And\nwe see a gas price which is cost\nper unit of gas specified for\nthe transaction and ether and\ngray. The higher the gas price,\nthe higher the chance of getting\nincluded in the block. Now if we\nscroll down even more, and we\nclick See more, we can also see\na ton of other information here.\nFor now we're just going to\nclick to see less and just focus\non these two. I'll explain all\nof these in a later session.\nLet's talk about just\nthe concept of transaction fees\nand gas for a second. Remember\nhow I said the blockchain is run\nby all these different nodes\nwill all those different nodes\nare running this blockchain\nbecause they actually get paid\nfor all the transactions that\nhappen on these blockchains\nwhenever you make a transaction,\nthere's a node or a miner or or\na validator somebody running the\nblockchain software is gonna get\npaid a tiny bit of Aetherium or\npolygon or whatever blockchain\nthat you're running on, they're\ngonna get paid a tiny bit of\nthat native blockchain currency.\nThis payment is obviously to\nincentivize people to continue\nto run nodes and they calculate\nhow much you pay and how much\nthe node operators get paid\nbased off of how much gas you\nuse. So there's this concept of\ngas. Gas is a unit of\ncomputational measure. The more\ncomputation a transaction uses,\nthe more gas you'd have to pay\nfor. For example, we do hit\nclick More just really quickly.\nWe can see this section say A\ngas limit and gas usage by\ntransaction, there was a limit\nof 60,000 units of gas on this\ntransaction, and 21,000 or\nactually use. So this\ntransaction use 21 units of gas.\nNow for very simple things like\nsending ether, the units of gas\nare usually pretty cheap. But\nmaybe for more complex things\nlike like minting NFT,\ndepositing to some defy\ncontract, etc, maybe those will\ncost more gas because they'll be\nmore computationally expensive.\nAnd this is a little confusing\nright now, don't worry too much\nabout it. But just know that we\nuse 21,000 gas here. And if we\npull out the calculator 21,000\ngas times this gas price right\nhere, times the gas price, we\nget the exact same as we see for\nthe transaction fee. So gas\nprice, times how much gas you\nused, is the transaction fee. So\nwhoever sent us this 0.1 ether,\nalso paid 0.0000525, etc Rinkeby\nether to make this transaction.\nNow, each blockchain has a\ndifferent way of actually\ncalculating how this gas stuff\nworks. So that's basically going\nto be the high level of it. So\nwe're going to focus just here\nfor now there's a total\ntransaction fee. And then\nthere's obviously the gas price.\nAfter we cover how blockchain\nworks, I'll explain what this\nburn stuff is these gas fees and\nall these other stuff. For now,\njust know that anytime you make\na transaction on chain, you have\nto pay a little bit of what I\ncall transaction gas. So for\nexample, if we go to our\nMetamask, we have two accounts\nright here, we have account one\nwas 0.1, Rinckey eath, and\naccount two was zero. Rigby. If\nI were to send 0.05 Rinckey\neath. From this account to my\nother account, how much rinky\neath Do you think I'd have left?\nWell, let's go ahead and try it,\nthis will be the first\ntransaction that you're actually\ncreating that you are going to\nspend the gas for. So if we go\nahead and hit send, we'll hit\ntransfer between my accounts.\ncount two, we'll do 0.05.\nNext, we can see\nsome information here about\nwhat's actually going on\nMetamask has some new advanced\ngas for UI and settings, we're\nalso going to turn the song, so\ngo ahead and click that enable\nenhanced gas UI, turn that on,\nand then go back. And again,\nthis is going to be the\nexperimental tab. But it could\nalso just be in the General\nSettings tab. Depending on when\nyou actually run this, we can\nsee a little notification here.\nAgain, this depends on what\nversion of Metamask we're using.\nAnd we get this little drop down\nthat says Here are some of the\ndifferent type of gas fees that\nyou can actually pay. The reason\nthat gas fees might change, as\nyou can see here is that\ndepending on how busy the\nblockchain is, you have to pay\nmore gas. If a lot of people are\nsending transactions, that means\nthere's not going to be enough\nspace for everyone's transaction\nto get through. That's a bit of\nan oversimplification of what's\nhappening. But don't worry too\nmuch about it for now. Now, if\nwe want to send the 0.05 ether\nto our second account, we can\nsee this gas estimated section,\nwhich is saying it's estimating,\nwe're going to pay 0.00004792\ngas in addition to sending the\n0.5 eath. So at the bottom, we\nhave amount plus gas fee. And\nthis is going to be the total\namount that we're going to be\nspending on this transaction\n0.05 is what we're sending. And\nwe also have this gas piece. So\nwe go ahead and confirm, we now\nsee we have a transaction\npending in our Rigby ether scan.\nAnd if we click on it, we can\neven hit View on block Explorer.\nAnd a Rigby transaction hash\nwill pop up and depending on\nwhen you click it, it might say\nindexing, this means that ether\nscan has received your\ntransaction and is trying to\nplace it. If you don't see\nanything here, it means that\nmaybe the transaction hasn't\ngone through yet. Maybe you need\nto wait a little bit more. Or\nmaybe you need to go back to the\nGitHub repo and pick the\nrecommended testament and\nfaucet. So you might have to\nwait a minute or so for this to\nactually finish indexing. After\na minute or so we can see that\nthis transaction has indeed\npassed. And we can see a lot of\nthe same information that we saw\non our last one, this time with\n0.05 ether. And now if we look\nin our meta mask, we'll see we\ncan see account one has 0.05\nIt's rounding up a little bit,\nwe click on the big button, we\ncan see it actually has\n0.049953, etc. And our other\naccount account two does have\nexactly 0.05. This is because we\nspent a little bit of Aetherium\non gas to send this transaction.\nAnd now with just this little\nbit of information, you know how\nto actually interact with\napplications that use the\nblockchain, how to send\ntransactions and a lot of the\nnon technical details. Now\nhere's something that's\nincredibly exciting with just\nthis little bit of information.\nYou now know how to interact\nwith blockchains and interact\nwith the Etherion protocol. So\nif you don't want to learn how\nto code anything, you can go If\nyou can start interacting with\nAetherium and interact with\nprotocols with just as much\ninformation. However, I know\nmost of you guys are here to\nlearn how to code. So let's look\nunder the hood of Aetherium. And\nwhat is actually going on with\nthese transactions, and what\nthese gas and what these\nblockchains. And what's really\ngoing on, let's learn all the\nfundamentals of a blockchain.\nNow, if you want to just go\nahead and jump into the coding,\ngo ahead and grab a timestamp\nfrom the description. However,\nlearning exactly how the\nblockchain works is going to\nmake you an incredibly powerful\ndeveloper.\nSo let's take a look at that\nfirst. So we're going to\nbe going through this blockchain\ndemo on this site right here.\nNow, the creator of the site has\na fantastic video and a\nfantastic walk through\nblockchain one on one, it is\nright on their site. So if\nyou're looking for another\nexplanation, definitely check\nout his video, it is absolutely\nfantastic. But the first thing\nthat we really need to do in\norder to understand blockchain\nor just on really anything, and\neverything that's going on here\nworking first really need to\nunderstand this Sha 256, hash,\nor hashing just kind of in\ngeneral, let's first understand\nwhat a hash is. A hash is a\nunique fixed length string,\nmeant to identify any piece of\ndata, they are created by\nputting some piece of data into\na hash function. In this\nexample, the hashing algorithm\nused is Sha 256. Now Etherium\nactually uses this, this right\nhere for its hashing algorithm,\nwhich isn't quite Sha 256, but\nas in kind of this SHA family.\nBut it's really just another way\nto hash things. And the specific\nhash algorithm doesn't matter so\nmuch. So this example, you just\nshot up to six, but you can\nimagine it's the same as the\nEtherium. Hash, they're just\ngoing to result in a different\nhash. So what's going to happen\nin this application here is\nwhatever data or whatever\ninformation we put into this\ndata section here, as you can\nsee below this hash changes. So\nwhat's happening is this data is\nrunning through the Sha 256 hash\nalgorithm. And it's outputting,\nthis unique hash. So this hash\nis a unique fixed length string,\nthat's going to identify like a\nblank data piece here, right. So\nif I put in, you know, my name\nlike Patrick Collins, this is\nthe hash that's going to\nrepresent Patrick Collins,\nright. And you can see, even\nwhen I put, you know, tons and\ntons of data in here, the length\nof the string doesn't change,\nright. So it's always gonna be\nthe same, we can put almost any\namount of data in here, there is\nan upper limit on the max size\nof the data. But for all intents\npurposes, we can pretty much put\nany length in here. And you'll\nsee to that every time I type in\nPatrick Collins, this hash is\nalways gonna be this seven e\nfive D, right? I'm gonna delete\nI'm gonna do Patrick Collins,\nagain, you're 75 B is always\nthis, this unique hash is always\ngoing to be unique, right, it's\nalways gonna be this fixed\nlength string here. So now we\ncan take this idea while putting\nthis data in here, we can move\non to this concept of a block.\nSo with this block concept,\nwe're going to take the exact\nsame thing with this hash this\nthis data section, right, but\ninstead of having everything\njust being in this, this\nsingular data area right here,\nwe're going to split this data\nup into block, nuns, and data.\nSo all so what we're going to do\nis we're actually going to hash\nall three of these to get to get\nthis hash, right, we're gonna\nput all three of these, we're\ngonna say all three of these are\ncombined. Together, we're gonna\nput every all three of them into\nthis hashing algorithm to figure\nit out. So if I type a bunch of\nstuff here, we can see that\nblock one with nonce, you know,\nthis nonce, and this data, we're\ngoing to get this hash. And as\nyou can see, actually, the\nscreen turns red, this block\nturned red. Now, what happens\nwhen I hit this mind button?\nWhen I hit this mind button,\nit's actually gonna take some\ntime, it's gonna think for a\nlittle bit. And we can see that\nthe nonce here actually changed,\nright? The nonce is different\nfrom what it was before. And\nthis hash now starts with four\nzeros. Okay, and then the back\nturn green. When we're talking\nabout mining, we're talking\nabout miners solving some type\nof very difficult problem that\ntakes a lot of time to do now in\nthis example, here, the problem\nthat the miners had to solve was\nthey had to find a nonce, or or\na value in this nonce section\nthat when hashed with at block\nnumber one with this data, it\nwould start with four zeros. So\nthe problem here the miners had\nto solve was to start with four\nzeros and the only way for them\nto really do that is kind of\nthis brute force, you know,\ntrying stuff so they tried one\nokay, one didn't work. Okay,\ntwo, nope, two didn't work. 3456\nOkay, five, well, that started\nwith one zero, but it's not\nfour. And they have to keep\ntrying all these numbers until\nthey get to this one where you\nknow, let's hit mine again.\nWhere it has four zeros at the\ntop at the start. Now, this\nspecific problem changes\nblockchain to blockchain right\nyet. Aetherium has a different\nproblem for miners to solve A\nbitcoin is different problems\nfrom yourself, but this concept\nis going to be the same. So they\nhave to take it, one block is\ngoing to be this, this, this\nconcept is going to be all this\ndata, it's going to be the block\nnumber. And it's going to be\nthis nonce, right. And so this\nnonce is the solution is going\nto be the the number that they\nuse to get like the solution to\nthe problem, right? So if I go\nto one here, you know, I do this\nagain,\nhit mine. And the nonces\nchanged, right? And went from\none to 33,128. Because this is\nthe nonce that allowed this hash\nto start with four zeros. And so\nthat's what's happening. When\nblockchain miners are mining\nthey're going through this\nprocess is very computationally\nintensive process of trying to\nfind a nonce that fulfills\nwhatever the problem is. So\nthat's really it, actually. So\nthat's a block. And that's\nreally what's happening when\nminers are mining. They're just\nlooking, there's trial and\nerror, brute force trying to\nfind this nut so so now that we\nknow what a block is, let's go\nto the next step and figure out\nokay, well, what's a block\nchain. So here we have an\nexample of what a blockchain is\ngoing to look like. Right, we\nhave a combination, you know, we\nhave back here in the block\nsection, we have one what one\nblock looks like. Now here, we\nhave multiple different blocks,\nright, each one of these\nrepresents a different block,\nbut we have an additional column\nhere, we have additional\nvariable here. So like before,\nyou know, we have block nonce\nand data, right, we have blocked\nnonce data, we also have this\nthing called previous right, and\nso this is actually gonna be\npointing to the previous hash of\nthe last block. So for example,\nif we go to the last block in\nthis blockchain, it says\nprevious 008. And if we look at\nthe hash of block number four,\nis 00008. And then we look at\nits previous it's four zeros, B\nnine, we have four zeros, B,\nnine, and so on, all the way\nback to our first block, which\nhas previous of just all zeros,\nright. And so the block with the\nprevious of all zeros, is going\nto be known as the Genesis\nblock. So you've probably heard\nthat before the Genesis block,\nit's the first block in the\nblockchain were the previous\nhash points to a hash that\ndoesn't actually exist. Now, as\nyou can imagine, kind of the\nsame as how this block worked,\nhow the block nuts and dated all\ngo through the hashing algorithm\nin the blockchain, the block\nnonce data, and previous hash\nall go through this hashing\nalgorithm to figure out what the\nhashes okay? So if we go to over\nhere, you know, for example, if\nI type in Patrick, obviously,\nthis is now no longer valid,\nright? Because this nuns\ncombined with the block the data\nin the previous hash, aren't\ngoing to solve our problem of\nhaving four zeros at the at the\nstart, right. So I'm gonna go\nand fix that. And that's, that's\nkind of an easy way to see it\nbeing broken. But, but let's\ntake a look, if I break this\nblock, right here, what happens\nif I, if I break the data in\nhere, if I do like Patrick in\nhere, you can see that both of\nthese are now read, both of\nthese are now invalid, right?\nBecause the block hash with the\nnonce hash with the new data,\nwhich is my name, Patrick has\nhashed with the previous block\nis now a brand new hash, right,\nand this block is still pointing\nto this previous hash right\nhere, right is pointing to this\nprevious block. And now it is\nwrong, and it is messed up and\nnow, and now it's nuts with this\nprevious hash is also wrong.\nRight? And this is where when we\ntalk about blockchains, being\nimmutable, this is exactly how\nit's immutable, right? Because I\ngo back and I change anything,\nyou know, if I've just typed a\nright here, the entire\nblockchain is now invalidated.\nBecause none of these are going\nto have nonces that solve this\nequation anymore. So this is why\nblockchains are immutable is\nbecause anytime you change one\nthing, you ruin the rest of the\nblockchain, okay? So however,\nthough, you know, if it was\nhere, originally, we can go\nahead and mine these, mine all\nthese but as you can see, you\nknow, this is going to start\ngetting very computationally\nexpensive, because I have to go\nredo basically the entire\nblockchain. And the farther and\nfarther down the line you get,\nthe harder and harder it becomes\nto, you know, rehash and redo\nall these different block chains\nhere. Now, this makes a lot of\nsense, right? So we have this\nblockchain, it's really hard to\nchange something in the past,\nbut if we do, we can just go\nahead and remind it. Now if I'm\nthe one who controls the\nblockchain, right, if I'm the\none who controls this, you know,\nand I want to change something,\nthe past will, okay, great. All\nI got to do is change the state\nof here. And then you know,\nmine, each one of these, you\nknow, obviously, it's going to\nbe very computationally\nexpensive, but it's something\nthat I can do right if I'm the\none who owns the blockchain.\nNow, here's where the\ndecentralized nature or the\ndistributed nature really makes\nit incredibly powerful. So we're\ngonna go to the distributed tab\nhere, which is also referred to\nas the decentralized tab here,\nand it's going to show us what a\nblockchain looks like in a\ndecentralized manner. So we have\nthis exact same initial setup\nhere we have to Shoot a\nblockchain, we have our first\nblockchain, which is kind of\nexactly as the one from here.\nBut we also have more than once\nwe have peer, a peer beam, and\nPRC and when people are talking\nabout Peer to Peer, peer to peer\ntransactions through the\ntalking, this is kind of that\nconcept that they're talking\nabout, right. So we have a\nnumber of different peers who\nare running this blockchain\ntechnology, they're all weighted\nequally, right, each one of\nthese peers or each one of these\nnodes, each one of these\nentities running a blockchain\nhas the exact same power as\nanybody else, right. So the way\nthat we can tell very easily\nwhich blockchain is correct, or\nwhich ones are correct, or by\nlooking at this end, hash here,\nright, or by looking at where we\nare in the blockchain, because\nagain, remember, because again,\nremember this, this hash that\nthis this in this last block\nhere, is going to encompass all\nof the blocks from before,\nright, because this last hash is\ngoing to have the previous hash\nhere, which includes the\nprevious hash here, which this\nhash includes the previous hash\nhere. And so this last hash is\nencompasses everything in here,\nright? And we can look, we can\nlook at the hash of Piercey,\nwhich is four zeros, and then E\nfour B, we can look at the\nlatest hash appear B, which is\nfour zeros, E for B, and then\npure A, which is four zeros, E\nfor b. So all of these peers,\nall of these nodes, all of these\ndecentralized, you know these\nindependent, all these\nindependent users running this\nblockchain software, they're all\nmatched up, it's very easy for\ntheir nodes to look at each\nother and say, hey, great, we\nare all matched up. Now, what\nlet's say that a decides that,\nyou know, something happened on\nthe blockchain that they didn't\nlike, and they wanted to go back\nand change something, right. So\nlet's say they change here, you\nknow, obviously, the rest of\ntheir blockchain is invalidated.\nAnd they have to spend a lot of\ncomputational power to catch up\nto speed. So let's go ahead and\nhumor it. Let's say that they\ndid, they ended up catching up.\nThey ended up catching up, you\nknow, they ended up mining\neverything. And now they have a\nvalid blockchain. Right? It\nsolves the equation. Awesome.\nHowever, in block number three,\nthere's something new, right?\nThis is here, and it shouldn't\nhave been here, this is some\nthat Peer A put in by\nthemselves. All that happens now\nis we look at all the\nblockchains that are running the\nsoftware, and we're looking at\nall the hashes and hash at block\nnumber five. So pure A has this\nnew hash. Now, there's a 09 BC.\nBut pure B has a different hash\n00, e for B, right? So who's\nright? Is it disappear a with\ntheir new stuff? Or is it pure\nB? Well, that's where the\ndecentralized data comes in.\nBecause then we can look at\nPiercey Piercey, also as E\nforby. So if you're being\nPiercey will say, Hey, you're a,\nyou're wrong, get out, right.\nAnd pure A will stop being able\nto participate in the mining\nrewards because they have\nessentially forked the\nblockchain and started their own\nlittle blockchain right with\ntheir own history, because\nthey're the only ones with this,\nthis piece of data in block\nthree, whereas pure B, and pure\nC have nothing in there. So that\nreally shows why in these\nblockchain worlds in this\ndecentralized world, there\nreally is no centralized entity,\nyou know, pure A, you know,\nmight have been maliciously\nmotivated to change. You know,\nthere's this block number three,\nhowever, democracy rules, right,\nthe majority rules in the\nblockchain, pure vmpfc will say,\nhey, you know, the, that's cute\nand all puree. But you're wrong,\nright? That's not right. Now, it\nmight be a little abstract, that\nyou just look at data and you\nknow, as typing kind of random\nstuff in here and think, okay,\nyeah, that's, that's data,\nright? That makes sense, you\nknow, just kind of random\nstrings in here doesn't really\ndo anything for us. So if we\nactually go over to the token\nsection here, this is where\neverything really starts to make\na lot of sense. So we have the\nexact same setup here with pure\na pure B Piercey. Except and the\ndifference is, instead of having\nkind of this, this data section,\nwe have this TX This transaction\nsection, right? And this\nrepresents all the transactions\nthat are happening in this\nblock, right? So we're sending\n$25, from Darcy to Bingle, or to\nBingley force toward dollars and\n27 cents here. 1922, right. And\nit's the exact same thing. So\nthis, all these transactions are\ngonna get hashed in the exact\nsame way that the data is going\nto get hashed. And, and this is\nwhy it's so powerful, because\nagain, you know, if I want to be\nmalicious, right, if, if I want\nto say, hey, I really wanted to\ngive Jane a lot more money from\nElizabeth, so I'm puree and I go\nback and I change it to 100.\nWell, now, you know not only do\nI does my whole blockchain get\ninvalidated because that was so\nso long ago, but I'm not going\nto match any of these other\nchains. Right? And so my\nblockchain is going to be\nexcluded from the overall\nblockchain. So and let's let's\ngo ahead and fix this. And it's\nthe same thing if down here if I\nbecome malicious, and I want to\nsend you know, I want\nMiss Audrey to have less money.\nMaybe I want to send $1 And they\ngo had in mind it the same thing\nhere, this hash now this two a\none is not going to match the\nrubies rubies hash of BBA. And\nit's not going to match Pierce's\nhash of BBA as well. So the two\nof them are gonna say, hey,\nthis, your blockchain is\ninvalid, it's not matching the\nmajority, you know, you're out,\nright. So that's really how\nthese blockchains work at a low\nlevel. And it all goes back to\nthis, this understanding this\nhash idea, and using it in this\nvery sophisticated manner, to\nkind of cryptographically prove,\nyou know, where, where stuff\nlies. Now, the way the\nblockchain works is, instead of\nrandom stuff, put in the Status\nsection, it's actually going to\nbe solidity code in here to\nfinding ways to interact with\ndifferent blocks and different\nprotocols that are on chain, or,\nas we've said before, different\nsmart contracts. Now, the next\nquestion that you might be\nasking is, okay, well, how do I\nknow how can I be sure that I'm\nthe one? You know, let's say\nthis is, let's say, I'm Darcy\nright? How can I be sure that I\nwas that Darcy was the one to\nactually send us money here. How\ndo we know that Darcy sent $25.\nTo Bingley? Well, this is where\nwe get into private keys and\npublic keys. And that's what\nwe're going to go into. Now.\nLet's just do a quick recap of\nwhat we've learned in this\nsection. So far, right? We've\nlearned that Aetherium actually\nruns on this hit check 256. But\nwe use Sha 256. For this demo,\nit doesn't really matter. We're\njust talking about hashing\nalgorithms. So again, hash is a\nunique fixed length string meant\nto identify any piece of data. A\nhash algorithm or a hash\nfunction is a function or\nalgorithm that computes any type\nof data into a unique hash.\nMining is going to be the\nprocess of finding the solution\nto the blockchain problem. In\nour example, the problem was\nfinding a hash that starts with\nfour zeros. nodes get paid for\nmining different blocks. And the\nproblem is going to be different\nblockchain to blockchain a block\nand a blockchain is basically a\ncombination of a block, nonce\ntransaction and previous hash to\ncreate this unique hash for this\nblock. And again, depending on\nthe blockchain implementation,\nthis might have a couple other\nfields or might have different\nfields. But this is essentially\nwhat's going on blockchains are\ndecentralized and distributed\nbecause many independent users\nare going to run this blockchain\nsoftware. And they will check\nand then we'll compare against\neach other to see which\nblockchains are acting honestly,\nand which ones are acting\nmaliciously, in the blockchain\nworld majority rules. The nonce\nhere is the answer used or the\nnumber used to get this hash.\nNow nonce is kind of an\noverloaded term, it's actually\nused for a number of different\nreasons. In this case, we're\nusing it to solve this problem\nof getting four or five zeros at\nthe stop or the hash. However,\nin Aetherium, it will also be\noften used as the number of\ntransactions from a given\naddress.\nSo now we're going to talk a\nlittle bit about signing these\ntransactions and private keys\nand some other cryptography\npieces, right? Because in this\nblockchain demo here, we can see\nwe have all these these\nfantastic transactions, right?\nAll these things went through,\nbut how do we know that it was\nDarcy? Who was the one to send\n$25? To bangli? Right? How do we\nknow that actually happened. And\nthis is where all those pieces\nthat we just learned about in\nour test net, in our meta mask\naccount are really going to\nstart to, to come to life here a\nlittle bit here. So here we have\nan example of public and private\nkeys, okay, at the top, we have\nthis private key, right that was\nthat was randomly generated. A\nprivate key is you know, as it\nkind of states is a key that you\nreally want to keep secret,\nbecause you're going to be using\nthis as kind of your your secret\npassword for all your\ntransactions where I can really\npick, you know, any, any, any\nprivate key, anything that I\nwant. And with it, this\nalgorithm, or they're going to\nuse an algorithm for Aetherium.\nBitcoin, they both use this\nelliptic curve, digital\nsignature algorithm, it's a\nvariant of just a digital\nsignature algorithm. And it's\ngoing to create this this public\nkey, right, I'm really not going\nto go at all into kind of this\ndigital signature algorithm. But\njust know it does use some of\nthese, some of the hash\nknowledge that we just learned\ncombined with some other pieces\nto kind of get this this public\nhere. So I'm not gonna go too\ndeep into it. But we have this\nprivate key that we create. And\nwe get this public key. Now this\npublic key we want everybody to\nhave access to right this is\nyeah, whole world can see this,\nthis private key, we really want\nit to be private, we don't want\npeople to see this, we're going\nto use this private key as like\na password to quote unquote,\ndigitally sign transactions, and\nthen people can verify them with\nthis public key. So let's, let's\nsee what this actually looks\nlike. Let's pick a random key, a\nmore secure key, right? Because\nthe longer it is, the more\nsecure it's going to be. And if\nwe go to signatures now, right?\nLet's say we have this, this\nmessage that we want, right?\nWe'll say hi world, right? We\nwant this To be the message,\nwhat's gonna happen is this\nprivate key that we've created,\nwe can use to sign this data,\nright? Remember how in the\nblockchain demo, you know, we\nwere kind of we were hashing\nstuff, right? We were using this\nShea 256 hash to get this hash.\nWell, we're doing something\nsimilar. But instead of hashing,\nwe're, we're using this digital\nsignature algorithm to create\nthis message signature. Now,\nwhat's really powerful about how\nthis this algorithm works, is\nthat you can create this message\nsignature with your private key,\nbut somebody else can't derive\nyour private key from the\nmessage signature. And that's\nwhat makes this really, really\npowerful. However, if we go to\nverify using this public key,\nright, and so this is the this\nis that, Oh, 403. This is that\nsame public key, using this,\nusing this public key, anybody\ncan verify, let's go ahead and\nsign again, anybody can verify\nthat the signature is yours,\nright? So you have a public a\nprivate key, just for you. So\nyou can sign things and a public\nkey that anybody can verify\nsomething, right. So anybody can\nverify this, and let's say\nsomebody tries to fake a\ntransaction from you, they say,\nHey, you know, this is this is\nthis is their transaction, all\nthey have to do is verify that\nthis signature against your\npublic key and very easily, this\nwhole thing turns red, because\nit isn't verified, right, that\nthe algorithm says, hey, that's\nwrong. So we can go ahead and\ntake that into transactions in\nthis exact same way. So if I\nwant to send money, you know, if\nI want to send $400, from, you\nknow, my address to another\naddress, using my private key, I\ncan sign that transaction. And\nanybody else in the world can\nthen verify this transaction,\nright. And this is why when\npeople say Hydra keys, you know,\nprotect your keys, this is what\nwe're talking about in our\naccounts here. Right? If we go\nto settings, and again, the only\nreason that I'm showing you\nguys, my pneumonic, and my\nprivate key is because this is\na, this is a dumpster account,\nI'm going to throw this away at\nthe end of this video, or I'm\njust not gonna put any real\nmoney in it. But when we look at\nour Metamask, here, we have this\npneumonic phrase, which allows\nus to easily get these different\nprivate keys, right? So\npneumonic phrase combined with,\nyou know, whatever account\nnumber will get us a private\nkey. So mnemonic phrase combined\nwith one, we're gonna get this\nprivate key. And this is when we\nlook at account details, export\nprivate key.\nThat's where it confirm, this is\ngoing to be the private key that\nwe're going to use to sign our\ntransactions, right, this, if\nanybody else gets access to this\nprivate key, they then can sign\ntransactions for us, and they\ncan send transactions for us.\nAnd that's why we want to keep\nthese private, so that it works\nthe exact same way, right. And\nso this is why it's so important\nto hide your private keys and\nhide your mnemonics now, your\nAetherium address is actually a\npiece is actually a piece of\nyour public key. Now, to get our\naddress in Aetherium, all we\nhave to do is take this public\nkey that we've created with our\nprivate key, hash it using that\nsame Aetherium hashing\nalgorithm, and then take the\nlast 20 bytes. And that's how\nwe'll actually derive to our to\nour address here. Now, knowing\nthe exact methodology of how to\nget the address doesn't really\nmatter, because it could change\nblockchain to blockchain and\ncould even change it too. But\njust know that that is\nessentially how kind of these\naddresses are derived or there's\nsome derivative of the public\nkey, right, because the public\nkey is public. And you know,\nusing the public key and kind of\nany public way is totally fine,\nbut not the private key. So that\nis how we sign our transactions.\nNote though, this isn't how we\nsend the transaction. So so this\nis just going to assign it\ncreate a transaction for us to\nsend, we'll learn later on how\nto send these transactions.\nCool. So that was a lot of\ninformation there too. Let's do\na quick recap, your public key\nis derived by using a digital\nsignature algorithm on your\nprivate key, right, and you want\nto keep your private key private\nat all times, because you're\ngoing to use your private key to\nsign transactions. Signing\ntransactions with your private\nkey, you are the only one who\ncan actually do this because you\ncan't get the private key from a\nmessage signature. However,\nusing your public key, you can\nanybody can very easily verify\nthat a signature that signed by\nyou is in fact signed by you in\nour meta mask. Our private keys\nare located in this account\ndetails section you just hit\nshow private keys and type in\nyour password. And you'll get\nyour your private key here. A\nquick note here is oftentimes\nwhen using your private keys\nsomewhere, they want it in\nhexadecimal form. So if we're\ngoing to use our private key for\nsomething like brownie, which\nwe'll go into later, we need to\nactually append a 0x to the\nfront but We'll get into that\nlater. And the address of your\naccount is derived from this. So\nif you think about your private\nkey creates your public key,\nwhich then can create your\naddress. And there's a little\nbarrier or a big barrier here.\nBecause your private key, you\nwant to keep private and your\npublic key and your address can\nall be public information.\nNow that we know a little\nbit more about what's going on\nunderneath the hood of these\nblockchains, let's go back at\nour transactions and look at\nthis gas thing again, and we'll\nlook to see what's actually\nhappening here, gas in\nparticular can be a little bit\ntricky to wrap your head around.\nSo if you don't get it right\naway, don't worry. As we go\nthrough examples, it'll start to\nmake more sense. So before I was\nsaying, let's just look at this\ntransaction fee bid, which is\nthe costs associated with\nrunning this transaction. If I\nscroll over this on ether scan,\nI can see this thing that says\nblock base fee per gas plus max\nparty fee per gas times the gas\nuse, which might be a little bit\nconfusing here, let's actually\nbreak down what's going on on\nAetherium with ERP 15, five nine\nin place. And again, this is\ngoing to be specific to\nAetherium, as every blockchain\nmight do it a little bit\ndifferently. But if we click to\nsee more, we can see a number of\nuseful values here, we can see\ngas limit is 21,000. And usage\nis 21,000. So this transaction\nused 21,000 gas, and we sent\n21,000 gas along with it.\nSometimes when sending a\ntransaction, depending on when\nit's sent. And depending on what\nthe specific instructions are,\nit might actually use way more\ngas than what you want it to\nuse. So with your transactions,\nyou can actually set a limit,\nhey, I don't want to use more\nthan x amount of gas, I don't\nwant to do more than x\ncomputational units. And in\nfact, we go to our Metamask. And\nwe click Send to transfer\nbetween accounts again, and we\npick you know, 0.01 eath, or\nsomething next can actually hit\nthis little button here, go to\nAdvanced, and we can actually\nedit some specifics of this\ntransaction, one of them is\ngoing to be the gas limit, we\ncan change this gas limit to\nmaybe 2200 2300, or more or even\nless, since sending Aetherium\ntakes exactly 21,000 Gas\nMetamask just defaults to\nsetting into that. Well, we also\nsee these other interesting\nthings, we see a priority fee,\nand a max base fee. Let's reject\nthis transaction. And let's look\nback at ether scan to talk about\nthese. So currently in\nAetherium, according to EE IP\n1559, every transaction on\nAetherium comes with something\ncalled the base fee. This is the\nminimum gas price you need to\nset to include your transaction.\nAnd you'll notice that these are\npriced in something called\ngateway. So what is a gateway?\nIf we come to the site eath\nconverter.com. And again,\nthere's a link to this in the\nGitHub repository, we scroll\ndown we can see way gateway and\nether five put one ether in\nhere, I can see how much one\nether is in terms of way. And in\nterms of way, one ether is equal\nto 1-234-567-8990. So that's\nthat's 1 billion way is going to\nbe one ether. And then\n1-234-567-8910 1112 1314 Did 16\nSeven, eight team and then 18\nzeros is away. These are just\neasier ways of referring to\nreally, really small amounts of\nAetherium. So if we look at our\ngas fees, we see that the base\nfee is 0.00000004 Go away. And\nthis obviously would be an even\nsmaller number if this was in\nunits of weigh. So if we take\nthis number, and we put it into\nour calculator, we can see that\nthis is equal to 40 weigh or\n0.0000 a whole bunch of zeros\nfor ether. The max fee here\nrefers to the maximum gas fee\nthat we're willing to pay for\nthis transaction. And you can\nactually see that our max fee is\na little bit higher than what we\nactually ended up paying. Our\nmaximum was 2.2132 something\nsomething and the gas price we\nactually paid was up here. Now\nyour transaction might of course\nbe a little bit different than\nAdditionally we have a max\npriority fee. This is going to\nbe the max gas fee that we're\nwilling to pay plus the max tip\nthat we're willing to give to\nminers. Now currently in\nAetherium, this base fee ends up\ngetting burnt and we can see on\nether scan exactly how much is\ngetting burnt here. And if we\npull up our calculator again, we\ncan grab this gas fee, multiply\nit by the amount of gas we used,\nand we can see that this is\nindeed how much Aetherium we\nactually ended up burning. We go\nback to Ethereum converter,\npaste it in we can see that\nthese two numbers are indeed\nequal. This means whenever you\nsend a transaction, a little bit\nof Aetherium is removed from\ncirculation forever, or it's\nconsidered burnt. So currently,\nin theory As part of your\nAetherium part of your\ntransaction fee actually gets\nburnt. And then the other part\ngoes directly to miners. So to\nfigure out exactly how much went\nto miners, we could do this\nnumber minus the burnt amount.\nAnd this is how much Etherium\nwas paid to Aetherium miner for\nthis transaction, you'll see\ndown here your transaction type\nto ERP 15, five, nine, this is\nthe eip 15 five nine version of\nthese transactions. Like I said,\nevery blockchain is going to\nhave a different fee burning and\nfee and gas process. And they're\nall going to be a little bit\ndifferent, but the some of it is\nblockchains have limited block\nspace for transactions, the gas\nprice that costs for your\ntransaction to be included in\none of these blocks changes\nbased off how much demand there\nis the base gas fee for\nAetherium will go up and down\ndepending on how many people are\nsending transactions and how\nmany people want to be included\nin a block. If a ton of people\nwant to be included in a block.\nThat means a ton of gas is\nobviously going to get burnt.\nWe've left a link to a video in\nthe GitHub repository with this\nsection from this YouTuber who\ndoes an amazing job breaking\ndown this EIP 15, five, nine and\nmore about how this gas model\nactually works. I highly\nrecommend you pause this video\nand watch that video. To\nunderstand more, the base fee\ngets programmatically\nalgorithmically adjusted to try\nto target for all the blocks to\nbe 50% full. If they're more\nthan 50% full, this base fee\nautomatically goes up. If\nthey're less than 50% full, this\nbase fee goes down. Now this is\na lot of the basics of how this\ntransaction works. And it can be\na little confusing. So let's do\na quick refresher of everything\nin here. There's a unique\ntransaction hash that uniquely\nidentifies this transaction. On\nthis blockchain, we can see the\nstatus, we can see the block\nnumber that it's confirmed on.\nOne other thing we want to look\nat. If we scroll up, we see\nblock number and block\nconfirmations. This is how many\nblocks have been mined. Since\nthis block was included. Like we\nsaw with our blockchain demo,\nthe longer the blockchain gets,\nthe harder it is to tamper with\nand the more secure it is\ntypically, you'll see some\nprocesses say they'll only do\nsomething after 20 Block\nconfirmations, 30 Block\nconfirmations or etc. The reason\nthat they wait for these block\nconfirmations is because they\nwant to make sure that that\ntransaction is actually\nincluded. And we can actually\nsee the block that our\ntransaction was included in and\nall the other transactions with\nit, different details about how\nmuch gas was used, the gas\nlimit, etc. timestamp is when\nthe transaction happened, we can\nsee from and to we can see the\nvalue. And then we can see the\ntransaction fee, which we see\nright here is blocked base fee\nper gas plus the max priority\nfee per gas times the gas used.\nAnd we see all the details of\nthe gas down here gas price is\nthe cost of one unit of gas gas\nlimit is the max amount of units\nof gas that we're willing to pay\nin this transaction, the usage\nis how many actually got us the\nbase fee is going to be the base\nnetwork fee per gas. So 40 way\nper one gas used, the max gas is\nthe max gas price we're willing\nto pay. And Max priority is\ngonna be the max gas price, plus\nthe tip that we give to miners,\nand then we can see how much is\nburnt. And then we see\ntransaction savings which which\nis the difference between how\nmuch was actually used or paid\nfor and then returned. So for\nexample, in this transaction,\nthe gas price we ended up\npicking was a little less than\nour max gas price here. So the\ngas price we ended up using was\na little less than our max\npriority fee here. So we had\nsome savings compared to that,\nwe can also see that this was an\nERP 15 five nine transaction, we\ncan see our nonce here, which\nwas not zero because the\ntransaction that I'm showing is\nour first nones. And then of\ncourse, we can see the input\ndata for transactions that are\njust sending Aetherium, the\ninput data is going to be blank.\nBut you'll see that when we get\nto smart contracts, the input\ndata is not going to be blank.\nAnd it's going to be one of the\nmost important features of these\ntransactions. You'll also notice\nthat there's a state tab. This\nis an advanced tab, and it shows\nthe different states that are\nchanged based off of this\ntransaction. We're going to\nignore this one for now. Now\nthat we know how the blockchain\nitself works under the hood,\nlet's talk about some blockchain\nfundamentals. And we actually\ncovered all these topics in a\nprevious Freako camp video. So\nlet's go to that.\nIf the first time\nyou listen to this, some of\nthese concepts seem a little bit\nhard to grasp. Don't worry about\nit. As we continue and as we\nmove on with this course,\nthey'll start to make more sense\nwhen you see them used in real\nexamples. I definitely would\nrecommend going back and\nrewatching and re listening to\nthe parts that you don't quite\nget an asking questions in the\ndiscussions tab of the GitHub\nrepository. Awesome. So now that\nwe know all the cryptography\npieces and all the little nitty\ngritties of how the blockchain\nactually works, and how our\nsignatures work and how\neverything sticks together.\nLet's talk a little bit about\nhow this works, in actuality,\nand what's really going on. Now\nfor a lot of this, each\ndifferent blockchain has\nslightly different algorithms\nand slightly different metrics\nand criteria for doing a lot of\nthis stuff. So when we're\ntalking about these specific\nimplementations, keep in mind,\nthe exact algorithm might be a\nlittle bit different, but the\nconcepts are all still going to\nbe exactly the same. Hashing and\nhash function is going to be the\nsame. No matter where you look\nat decentralized blockchain,\nit's going to be the same no\nmatter where you look, how it's\nactually implemented, is going\nto be a little bit different.\nNow traditionally, when you run\nan application, you will be\nwebsite or something that\nconnects to some server, you are\ninteracting with a centralized\nentity. And unlike how we saw\nwith the blockchain with\nmultiple different peers, it's\ngoing to be run by a single\ncentralized group. Now, it still\ncould be run on many different\nservers, but all those servers\nare still going to be controlled\nby the same centralized group\nblockchains, as we saw run on a\nnetwork of different independent\nnodes. When we saw a peer, a\npeer, B Piercey. Those were\ndifferent examples of different\nindependent users running the\nblockchain technology on their\nown node. Now, when I use the\nterm node, I'm usually referring\nto a single instance of a\ndecentralized system. So when I\nsay a single node, when I'm\ntalking about a blockchain, I'm\ntalking about one of those pure\nA's pure BS pure C's running\nthat blockchain software, I'm\ntalking about one server running\nthis technology. And again, it's\nthis network. It's this\ncombination of these nodes\ninteracting with each other,\nthat creates this entire\nblockchain. What makes these so\npotent too, is that anybody can\njoin the network. And that's why\nthere's decentralized the\nbarrier to entry is a little bit\nof hardware requirements for\ngetting the correct materials to\nrun the software. And then you\nrunning the software, anybody\ncan join these networks and\nparticipate. And that's what\nmakes it truly decentralized. In\nfact, you can go to GitHub right\nnow, and run your own Aetherium\nnode in a few seconds. Now in\nthe traditional world,\napplications are run by\ncentralized entities. And if\nthat entity goes down, or is\nmaliciously bribed, or decides\nthat they want to shut off, they\njust can't, because they are the\nones that control everything.\nblockchains, by contrast, don't\nhave this problem. If one node\nor one entity that runs several\nnodes goes down, since there are\nso many other independent nodes\nrunning that it doesn't matter,\nthe blockchain and the system\nwill persist so long as there is\nat least one node always\nrunning. And luckily for us,\nmost of the most popular chains\nlike Bitcoin and Aetherium, have\n1000s and 1000s of nodes. And as\nwe showed in our demo, if one\nnode acts maliciously, all the\nother nodes will ignore that\nnode and kick that out or even\npunish it in some systems,\nbecause they can easily check\neverybody else's node and see,\nokay, this one is out of sync\nwith the majority. And yes,\nmajority rules when it comes to\nthe blockchain. Each blockchain\nkeeps a full list of every\ntransaction and interaction\nthat's happened on that\nblockchain and we saw if a node\ntries to act maliciously, then\nall their hashes are going to be\nway out of whack and they're not\ngoing to match everybody else.\nThis gives blockchains this\nincredibly potent immutability\ntrait where nothing can be\nchanged or corrupted. So in\nessence, we can think of a\nblockchain as a decentralized\ndatabase. And with Aetherium, it\nhas an extra additional feature\nwhere it also can do computation\nin a decentralized manner. Now\nlet's talk consensus, proof of\nwork and proof of stake because\nyou've probably heard these\nbefore. And they're really\nimportant to how these\nblockchains actually work. We\nwent through that blockchain\nexample, and we did that mining\nfeature. This is what's known as\nproof of work. Proof of Work and\nproof of steak fall under this\numbrella of consensus and\nconsensus is a really important\ntopic when it comes to\nblockchains. Consensus is\ndefined as the mechanism used to\nreach an agreement on the state\nor a single value on the\nblockchain, especially in a\ndecentralized system. I briefly\nalluded to this consensus\nmechanism in our blockchain\nexample, when I said if one\nchange is something and the\nother two, don't, then majority\nwill rule and kick that one out.\nThis is part of that consensus\nmechanism. Now very roughly a\nconsensus protocol in a\nblockchain or decentralized\nsystem can be broken down into\ntwo pieces, a chain selection\nalgorithm, and a civil\nresistance mechanism, that\nmining piece that we were doing,\nor where the proof of work\nalgorithm is what's known as a\ncivil resistance mechanism. And\nthis is what Aetherium and\nBitcoin currently use. Please\nnote that depending on when\nyou're watching this, if eath\ntwo is out, then it's no longer\nproof of work. Now, proof of\nwork is known as a civil\nresistance mechanism, because it\ndefines a way to figure out who\nis the block author, which node\nis going to be the node who did\nthe work to find that mine and\nbe the author of that block so\nall the other nodes can verify\nthat it's accurate civil\nresistance is a blockchains\nability to defend against users\ncreating a large number of\npseudo anonymous identities to\ngain a disproportionately\nadvantageous influence is over\nset system. And in layman's\nterms, it's basically a way for\na blockchain to defend against\nsomebody making a bunch of fake\nblockchains so that they can get\nmore and more rewards. Now,\nthere are two types of civil\nresistance mechanisms that we're\ngoing to talk about here. Namely\nproof of work and proof of\nstake. Let's talk about proof of\nwork a little bit more in depth\nfirst, in proof of work. This is\ncivil resistant, because a\nsingle node has to go through a\nvery computationally expensive\nprocess called mining, which we\ndemonstrated earlier to figure\nout the answer to the\nblockchains Riddle of finding\nthat correct nonce, or, or\nwhatever the\nblockchain system has in place.\nAnd proof of work. This works\nbecause no matter how many\npseudo anonymous accounts you\nmake, each one still has to\nundergo this very\ncomputationally expensive\nactivity of finding the answer\nto the proof of work problem, or\nthe proof of work riddle, which\nagain, in our demonstration, it\nwas finding a nonce with that\nfirst four zeros. But again,\neach blockchain might change the\nriddle work or change the\nproblem to be a little bit\ndifferent. In fact, some of\nthese blockchains make this\nriddle intentionally hard or\nintentionally easy to change\nwhat's called the block time,\nthe block time is how long it\ntakes between blocks being\npublished. And it's proportional\nto how hard these algorithms\nare. So these problems actually\ncan change. Depending on how\nlong they want the blockchain to\nbe. If a system wants to block\ntime to be very, very long, they\njust make the problem very, very\nhard. If they wanted to be very\nshort, they make the problem a\nlot easier. We'll talk about\ncivil attacks in a little bit\nand how they can affect the\nsystem. But with proof of work,\nit's a verifiable way to figure\nout who the block author is and\nbe civil resistant. Now, you\nneed to combine this with a\nchain selection rule create this\nconsensus. Now, there's some\nconsensus protocols that have\nmore features, but very, very\nroughly, these are the two\npieces that we're going to look\nat. The second piece is going to\nbe a chain selection rule. How\ndo we know which blockchain is\nactually the real blockchain and\nthe true blockchain now on\nBitcoin and Aetherium, they both\nuse a form of consensus called\nNakamoto consensus. And this is\na combination of proof of work\nand longest chain rule, the\ndecentralized network side that\nwhichever blockchain has the\nlongest chain, or the most\nnumber of blocks on it is going\nto be the chain that they use.\nThis makes a lot of sense,\nbecause every additional block\nthat a chain is behind, it's\ngoing to take more and more\ncomputation for it to come up.\nThat's why when we saw in our\ntransaction, we actually saw\nconfirmations. The number of\nconfirmations is the number of\nadditional blocks added on after\nour transaction went through in\na block. So if we see\nconfirmations as to it means\nthat the block that our\ntransaction was in has two\nblocks ahead of it in the\nlongest chain. Now, I do want to\npoint out that a lot of people\nuse proof of work as a consensus\nprotocol. And I do want to say\nthat this is a little bit\ninaccurate, but sometimes people\nuse it interchangeably. Proof of\nWork is a piece of the overall\nconsensus protocol, which in\nBitcoin and Aetherium. One\ncurrent case is Nakamoto\nconsensus, Nakamoto consensus is\na combination of proof of work,\nand this longest chain rule,\nboth equally and very, very\nimportant. Now, proof of work\nalso tells us where these\ntransaction fees and these block\nrewards go to remember how when\nwe made this transaction, we had\nto talk about gas and a\ntransaction fee. So who's\ngetting paid who was getting\nthis transaction, and this\ntransaction fee is going to the\nminers or the validators in a\nproof of work network? They're\ncalled miners and in the proof\nof stake network, they're called\nvalidators there are a little\nbit different. And we'll get\ninto that when we talk about\nproof of stake in this proof of\nwork system. All these nodes are\ncompeting against each other to\nfind the answer to the\nblockchain riddle. Remember, in\nour example, it was to find a\nhash that has four zeros at the\nstart. And again, depending on\nthe blockchain implementation,\nthat riddle is going to be a\nlittle bit different. But all\nthe nodes are trying as many as\npossible to try to get this\nanswer first. Why? Because the\nfirst node to figure out the\nanswer to the blockchain real is\ngonna get that transaction fee,\nthey're gonna get paid from\nthat. Now, when a node gets\npaid, they actually get paid in\ntwo different ways. One is going\nto be with a transaction fee.\nAnd another piece is going to be\nthe block reward. Remember how\nwe talked about alternating the\ngas price or the gray on our\ntransaction? Well, that's the\ntransaction fee that we're going\nto pay to these blockchain nodes\nfor including our transaction,\nthe block reward is given to\nthese nodes from the protocol\nfrom the blockchain itself.\nYou've probably heard of the\nBitcoin halving before the\nhalving is referring to this\nblock reward getting cut in half\nand it's supposed to be cut in\nhalf, roughly every four years.\nThis block reward increases the\ncirculating amount of whatever\ncryptocurrency that is being\nrewarded. For example, on\nAetherium the block reward is\ngiving out Aetherium and a\nBitcoin the block reward is\ngiving out Bitcoin. So these\nnodes are competing against each\nother to be the first one to\nfind this transaction to be the\nfirst one to find the answer to\nthis problem, so that they can\nbe the ones to win both this\nblock reward and your\ntransaction fee. Some block\nchains like Bitcoin, for\nexample, have a set time when\nthey're no longer going to give\nout block rewards and the miners\nor the nodes are only going to\nget paid from trends. Action\nfees. Now this gas fee, again is\npaid by whoever initialize the\ntransaction. When we got our\nfunds from the faucet, there was\nsome server and somebody else\nwas paying the transaction fee\nfor us. However, when we sent\nether from one account to\nanother, our first account\nactually paid some transaction\nfee to send that ether. In proof\nof steak. There's also a gas\nfee, but it's paid out to\nvalidators instead of miners.\nAnd we'll talk about that in a\nlittle bit. Now let's talk about\ntwo types of attacks that can\nhappen in these blockchain\nworlds. Let's talk about the\nfirst one being the Sybil\nattack. The Sybil attack is when\na user creates a whole bunch of\npseudo anonymous accounts to try\nto influence a network. Now,\nobviously, on Bitcoin and\nAetherium, this is really,\nreally difficult because user\nneeds to do all this work in\nproof of work or have a ton of\ncollateral and proof of stake,\nwhich again, we'll talk about in\na bit. The other more prevalent\nattack is what's known as a 51%\nattack. Now, as we saw as part\nof our consensus protocol, these\nblock chains are going to agree\nthat the longest chain is the\none that they're going to go\nwith, so long as it matches up\nwith 51% of the rest of the\nnetwork. This means that if you\nhave the longest chain, and you\nhave more than 51% of the rest\nof the network, you can do\nwhat's called a fork in the\nnetwork, and bring the network\nonto your now longest chain. Now\nSybil attacks, obviously, are\nwhen a single node or a single\nentity tries to affect the\ndecent reality of the network by\npretending to be multiple\ndifferent people, although\nthey're just the same person or\nentity. And like I said, it's\nreally difficult to do in proof\nof work and proof of steak. So\nyou can see now that blockchains\nare very democratic, whichever\nblockchain has the most buy in\nand is the longest is the\nblockchain that the whole system\nis going to corroborate. When\nnodes produce a new block and\nadd to the longest chain, the\nother nodes will follow this\nlongest chain that the rest of\nthe network is agreeing with,\nadd those blocks to their chain\nand follow up. So very small\nreorganizations are actually\npretty common when a blockchain\npicks a block from a different\nlongest chain puts it on and\nthen has to swap it out for\nanother block and continue with\na different blockchain. However,\nif a group of nodes had enough\nnodes or enough power, they\ncould essentially be 51% of the\nnetwork and influence the\nnetwork in whatever direction\nthat they want it. This is\nwhat's known as a 51% attack.\nAnd it's happened on blockchains\nlike Ethereum classic, which is\nnot Aetherium. This is why the\nbigger a blockchain is, the more\ndecentralized and the more\nsecure it becomes.\nSo after you watch this video,\nand you become a blockchain\nengineering expert, I definitely\nrecommend you run a node as\nwell, because you are going to\nincrease the security of the\nnetwork as a whole by running a\nnode. So proof of work is\nfantastic because it allows us\nto very easily protect against\nthe Sybil attacks and keep our\nblockchain is decentralized and\nsecure. However, it has some\ndrawbacks as well. Proof of Work\ncosts a lot of electricity,\nbecause every single node is\nrunning as fast as they can to\nwin this race to get the\nrewards. This leads to obviously\nan environmental impact. Now\nsince proof of work and Nakamoto\nconsensus, a lot of other\nprotocols have taken this idea\nand gone in a different\ndirection with a different civil\nresistance protocol, a lot of\nthem with the intention to be a\nlot more environmentally\nfriendly. And the most popular\none right now is proof of stake.\nThere are some chains that are\nalready using this proof of\nstake protocol, and that are\nlive and thriving. Some of them\nare like avalanche, LaLana,\nPolygon, polka dot and Terra and\nadditionally Aetherium is\ndecided to upgrade to eath. Two,\nwhich will have this proof of\nstake algorithm as well, it will\nalso have some other features,\nwhich we'll talk about in a bit.\nNow as a quick aside, all the\ntools that we're going to learn\nhere are still going to work in\neath. Two, so depending on when\nyou watch this, everything here\nis still valid. So let's talk\nabout proof of stake. Now,\nagain, this is a different civil\nresistance mechanism. Instead of\nsolving this difficult problem,\nproof of stake nodes put up some\ncollateral that they're going to\nbehave honestly, aka, they stake\nin the example of Aetherium. two\nnodes put up some Aetherium as a\nstake that they're going to\nbehave honestly in the network,\nif they misbehave to the\nnetwork, they are going to be\nslashed or remove some of their\nsteak. Obviously, this is a very\ngood civil resistance mechanism.\nBecause if you try to create a\nwhole bunch of anonymous\naccounts, then each one of those\naccounts, you have to put up\nsome stake. And if you\nmisbehave, you're going to run\nthe risk of losing all the money\nthat you put up as collateral.\nIn this system, miners are\nactually called validators\nbecause they're no longer\nbinding anything, they're\nactually just validating other\nnodes. Now, unlike proof of\nwork, which every node is racing\nto be the first one to find the\nblock, and proof of stake nodes\nare actually randomly chosen to\npropose the new block and then\nthe rest of the validators will\nvalidate if that node has\nproposed the block. Honestly, as\nwe saw with our cryptography\nlesson, it's usually very easy\nfor other nodes to verify if a\nproposal or a transaction is\nhonest. Now randomness is a\nreally important topic when\nwe're talking about blockchains.\nBecause keep in mind, these\nblockchains are deterministic\nsystems. They're walled gardens\nfrom the rest of the world. And\nas you know, a deterministic\nsystem by definition can't have\nrandom numbers. So how do we\nchoose the random validators in\nthe system? While it changes\nfrom blockchain to blockchain,\nand actually choosing the node\nwill change blockchain to\nblockchain, but eath two,\nthey're using what's called Rand\ndoubt, at least for the original\nimplementation. This is a\ndecentralized autonomous\norganization that collectively\nchooses the random number and\ncollectively chooses which node\nis going to run. Next, we aren't\ngoing to dive too deep into this\nbecause there's a good chance\nthat this might change in the\nfuture. But we will go into\nrandomness solutions and\nblockchain later on in this\ncourse. Now, proof of stake\nobviously has some pros and cons\nas well, pros are that again, it\nis a great civil resistance\nmechanism. And a great way to\nfigure out who the author of a\nblock should be. The other pros\nare that it's way less\ncomputationally expensive to\nfigure out the new block,\nbecause instead of every single\nnode on the network trying to do\nthis, only one node needs to do\nthis. And then the rest of the\nnodes just need to validate it.\nThe cons are that it's usually\nconsidered a slightly less\ndecentralized network, due to\nthe upfront staking costs it\ncost to participate. Now, this\ngets into a little bit of a\nphilosophical battle on how\ndecentralized is decentralized\nenough. And I think that's up to\nthe community to decide. And as\nwe progress, I think we'll learn\nmore and more about how\ndecentralized is decentralized\nenough. The general consensus\namongst blockchain engineers,\nthough, is that proof of stake\nis very, very decentralized and\nvery secure. This massive\nenvironmental impact improvement\nis one of the two main reasons\nwhy eath is shifting to eath.\nTwo, it reduces the\nenvironmental impact by up to\n99%. Now, these are the main\npieces of proof of work and\nproof of stake. But I did want\nto talk about another concept\nthat's really important in these\necosystems. And that is\nscalability. When we were\ntalking about gas prices, we\nwere saying that the gas prices\ncan get really high if a lot of\npeople want to send a\ntransaction, because a block\nonly has so much black space,\nand the nodes can only add so\nmany notes. So when a lot of\npeople want to use a blockchain,\nthe gas price skyrockets. This\nis not very scalable, because if\nwe want to add more and more\npeople to these blockchains,\nit's going to cost more and more\nto use the blockchains. Because\nmore people are going to want to\nget into these blocks. This\nmeans that there's kind of a\nceiling to how many people can\nuse the system because of the\nfinancial constraints that will\nget imposed as gas prices keep\nrising. Aetherium too is not\nonly attacking the environmental\nimpact of proof of work by\nswitching to proof of steak, but\nthey're also implementing this\nnew methodology called sharding.\nAnd sharding is a solution to\nthe scalability problem, a\nsharded blockchain really just\nmeans that it's going to be a\nblockchain of blockchains\nthere's a main chain that's\ngoing to coordinate everything\namongst several chains that hook\ninto this main chain. This means\nthat there's more chains for\npeople to make transactions on\neffectively increasing the\namount of block space that there\nis sharding can greatly increase\nthe number of transactions on a\nblockchain layer one now there's\nanother term that might be the\nfirst time you heard it, a layer\none, we're going to talk about\nlayer one and layer twos in\nterms of scalability really\nquickly as well. A layer one\nrefers to any base layer\nblockchain implementation\nBitcoins, a layer one Aetherium\nthe layer one avalanches, a\nlayer one, these are the base\nlayer blockchain solutions. A\nlayer two is any application\nthat is added on top of a layer\none added on top of the\nblockchain. Some examples of\nlayer twos are going to be chain\nlink arbitrage, or optimism.\nArbitrage and optimism are very\ninteresting because they are\nlayer twos that also look to\nsolve this scalability issue.\nArbitrage and optimism are\nwhat's known as roll ups and\nthey roll up their transactions\ninto a layer one like Aetherium,\nwe're not going to go too deep\ninto roll ups and how they\nactually work. But all you\nreally need to know is that a\nroll up is kind of like a\nsharded chain, they derive their\nsecurity from the base layer\nfrom the layer one like\nAetherium. And they bulk send\ntheir transactions onto the\nlayer one, they solve some of\nthe scalability issues by being\nanother blockchain that people\ncan make transactions on, still\non kind of this base Aetherium\nlayer. Now they're different\nfrom side chains. Because side\nchains derive their security\nfrom their own protocols, roll\nups, derive their security from\nthe base layers. So arbitrage\nand optimism, for example, is\ngoing to be just about as secure\nas Aetherium. There's some\nfantastic guys in there that go\na little bit deeper into roll\nups and I've left a link in the\ndescription for you. All right,\nso we just talked about a lot of\nstuff. So let's do a quick recap\nbefore moving on. Aetherium and\nBitcoin are currently both proof\nof work blockchains that follow\nNakamoto consensus, however,\nAetherium is moving to Aetherium\ntwo, which will be a proof of\nstake sharded blockchain Sybil\nattacks are prevented due to\nprotocols like proof of work and\nproof of steak 51% attacks grow\nincreasingly harder with the\nsize of blockchain. So you\nshould run a node consensus is\nthe mechanism that allows a\nblockchain to agree upon what\nthe state of the blockchain is\nsharding and roll ups are\nsolutions to scalability issues\non layer ones. Layer One is any\nbased blockchain implementation\nlike Bitcoin or Aetherium. A\nblockchain scalability problem\nis that there's not always\nenough block space for the\namount of transactions that want\nto get in them. This leads to\nvery high gas prices and a\nAgain, gas prices or how much it\ncosts to interact with the\nblockchain.\nSo that's it for the blockchain\nbasics and the blockchain\nexplainers. With just this\ninformation, you now can go off\ninto the world and start working\nwith blockchains and interacting\nwith blockchains. With at least\nsome level of knowledge as to\nwhat's going on, you should be\nincredibly proud of yourself for\njust making it this far.\nDefinitely be sure to give\nyourself a pat on the back and a\nround of applause. Now that\nwe've gotten a lot of the basics\nand the fundamentals of the way,\nlet's start jumping into the\ncoding aspect. This is where\nyou're going to learn how to\nactually build these smart\ncontracts, how to build these\ntrust minimized agreements, in\nthese blockchains. And in the\nsmart contract platforms. This\nnext section, this solidity\nbasics, the solidity\nfundamentals section will give\nyou all the skills to start\nactually coding solidity and\nunderstanding how these smart\ncontracts work underneath the\nhood. So at this point,\nabsolutely, give yourself a high\nfive, maybe say hi, in the\nGitHub discussions, maybe say hi\nin the community, on Twitter, on\nReddit, etc, and be proud of\njust making it this far, the\njourney has really only just\nbegun, but you've already\nlearned so much. Let's begin the\nnext section. And let's\njump into the code.\nNow that we're getting to the\ncoding sections, I need to\nstress to absolutely use the\nGitHub repository associated\nwith this course. If you come to\nthe GitHub repo, and you scroll\ndown, and you click the lesson\nthat we're on right now, we're\non lesson two. Welcome to remix,\nsimple storage. If you click on\nit, it'll give you a ton of\ntimestamps and, and other\nhelpful links associated with\nthis lesson. Additionally, the\nbiggest piece is that all the\ncode will be available right\nunderneath the lesson title.\nThis will have all the code that\nwe're going to be working with,\nas well as some more additional\ninformation on how to work with\nthe code. Please, when asking\nquestions and entering in\ndiscussions, though, please ask\nyour questions and the full\nblockchain solidity course\nrepository. Thank you. And if\nwe're at the top of the\nrepository, and we scroll down,\nwe have the resources for this\ncourse section. Which brings us\nto the GitHub discussions in\nwhich you can ask questions in\nthe GitHub discussion section of\nthis course. Additionally, on\nStack Exchange, Aetherium, or at\nStack Overflow. I'll talk a\nlittle bit about how to format\nquestions and ask questions the\nbest way so that you have the\nhighest chance of getting a good\nanswer in a later lesson, I\nhighly recommend you pause and\nmake accounts for Stack Exchange\nAetherium, Stack Overflow, and\nGitHub right now, if you haven't\nalready, links to them, of\ncourse, can be found in our\nGitHub repository. Typically,\nfor each coding section, I'll\nstart it off by giving a quick\noverview of the code of what\nwe're going to be working with\nand what we're going to be\nbuilding towards, since\neverything that we're doing is\ngoing to be project based. And\nthat's how we're going to learn.\nFor our first one and remix\nthough, we're going to skip over\nthat because there's a lot of\nstuff to get used to. Now, I\nhighly recommend that as I'm\ncoding this. And as I'm doing\nall this in remix, you follow\nalong with me and you code along\nwith me. Remember, you can\nchange my speed if I'm coding\ntoo fast, or if I'm coding too\nslow. To start, we're going to\njump into a tool called remix.\nIf you're unsure how to get\nthere, there's a link to remix\nin our GitHub repository. This\nis where we're gonna be writing\nall of our code. So welcome to\nthe remix IDE, or integrated\ndevelopment environment. This is\nwhere we're going to learn how\nto code and interact with our\nsmart contracts. If you want,\nyou can go ahead and accept help\nout remix. If you've never been\nhere before, it'll give you a\nquick walkthrough of some of the\ntools that remix actually has,\nwe're going to skip over them\nfor now. Because I'm gonna\nexplain everything that's going\nup. Remix is such a powerful\ntool because it has a lot of\nfeatures that allow us to really\nsee and interact with our smart\ncontracts. Eventually, we're\ngoing to move off of remix,\nactually to a local development\nenvironment. However, remix is\nabsolutely fantastic for\nlearning the fundamentals of\nsolidity. And I highly recommend\neverybody start with remix when\nthey're getting started. When\nyou come to the remix IDE,\nthere's a whole lot of different\nthings that are popping out to\nus. There's a lot of different\nplugins as well. Since we're\ngoing to be working with\nsolidity, which is going to be\nthe language that we're using to\ndevelop our smart contracts. We\ncan go ahead and get started by\nclicking the solidity plugin,\nand a couple of other tools will\nshow up on the side. Even if you\ndon't click the solidity plugin,\nyou'll still be able to code\nsolidity smart contracts, the\nleft hand side is where we're\ngoing to start to actually\ninteract with things. The button\non the top most of the left is\nour files or explore\ndirectories, remix comes\nboilerplate with some different\ncontracts, some different\nscripts, some different tests,\nand different dependencies. We\nare going to minimize this a\nlittle bit. So if you want to go\nahead and right click and delete\nsome of these folders other than\nthe contracts folders, feel free\nto do so. Or if you kind of like\nthem there, feel free to leave\nthem as well. We're going to\nleave our contracts folder and\nwe're going to delete the\ndifferent files inside of it\njust so that we can start From a\nblank slate. Most projects come\nwith something known as a\nreadme. Usually it's a\nreadme.md, which usually\nexplains how to actually work\nwith code. But for our purposes,\nwe're going to delete this as\nwell. And you can just follow\nalong with\nme. Now we have a blank\nremix Setup, click on the\ncontracts folder and click the\nlittle page icon to create a new\nfile, a little box will pop up\nand you can start typing text\ninto it. We're going to type in\nsimple storage dot Sol, dot Sol\ntells our compilers that this is\ngoing to be a solidity file, and\nthat we're going to code\nsolidity in this solidity is the\nprimary coding language of smart\ncontracts. There are a few other\nsmart contract languages as\nwell. But solidity by far is the\nmost dominant smart contract\ncoding language out there. And\nnow we have a simple storage dot\nsoul contract on the right that\nwe can actually start coding our\nsolidity with. So let's start\ncoding some solidity. Now if you\nclick on this button right below\nthe files button that looks like\nthe solidity logo, you'll see a\nbunch of stuff pop up in here.\nThese are different parameters\nfor us to actually compile our\nsolidity code so that we can run\nit. So the first thing that\nyou're going to need in any\nsolidity smart contract is going\nto be the version of solidity\nthat you're going to use. And\nthis should always be at the top\nof your solidity code, solidity\nis a constantly changing\nlanguage, and it constantly\nupdating language. Because it's\nrelatively new compared to other\nlanguages, we need to tell our\ncode, hey, this is the version\nthat I want you to use, we can\nadd the solidity version by\ndoing pragma. solidity. And then\nthe version that we want to use,\nif we want to choose a very\nspecific version, we could say\nzero, point 8.7. The most\ncurrent version to date is 0.8.\nPoint 12. But getting used to\ndifferent versions of solidity\nis good practice, and different\nversions of solidity are\nconsidered more stable than\nothers. Zero point 8.7 is one of\nthose versions that is\nconsidered more stable. These\ndouble slashes here are what's\nknown as a comment, there are\nplaces where you can type stuff\nthat won't actually get executed\nin won't get compiled and isn't\nreally considered part of your\ncode. For example, I could write\nHello all. I'm Patrick. And if\nwe were going to run this code,\nthis part of my code would get\ncompletely ignored. So this\ndouble backslash is how we do\nwhat's called comments. And as\nwe're coding, and as we're\nbuilding our projects, be sure\nto use this comments tool to\nyour advantage every time you\nwrite a new function, or you\nlearn something that you didn't\nunderstand, or you learned\nsomething new that you want to\nremember, put it in a comment in\nyour code, you're going to be\nmost effective at taking notes\nin this course, by making them\ncomments in your code and then\nsaving your code so you can\nrefer back to it later. So leave\ncomments in your code, leave\nnotes in your code. And that\nwill be one of the best ways for\nyou to understand what you're\ncoding when you want to refer\nback to it later. Now when it\ncomes to the versions of\nsolidity, there's actually a few\ndifferent ways we can actually\nwrite it, we can say we want to\nuse only zero point 8.7. And\nthis is how we would write that.\nBut maybe we're okay if we use a\nmore new version of solidity\nthan zero point 8.7 to tell our\ncode that we're okay with a more\nnew version, we can put a little\ncaret here. And this is how we\ntell solidity. Hey, any version\nof zero point 8.7 And above is\nokay for this contract. This\nmeans zero point 8.8 would work\nzero point 8.9 0.8 point 10,\netc. But if we wanted to use\njust 0.17, we would type in like\nthat if we want to use solidity\nversions between a specific\nrange, we could do something\nlike this, we can say we want\nour solidity version greater\nthan or equal to zero point 8.7\nBut less than zero point 9.0.\nThis means that any compiler\nbetween zero point 8.7 and zero\npoint 9.0 would work. This means\nzero point 8.8 would work. Zero\npoint 8.9 would work 0.8 point\n10 would work. But zero point\n9.0 would not work because it is\nnot strictly less than 0.9 point\n00 point 9.1 would also not\nwork. To keep things simple for\nus, we're going to use zero\npoint 8.8. And every line of\nsolidity that's completed, every\ncompleted section needs to end\nwith one of these semicolons\nthis is how you tell solidity\nit's the end of the line. Also\nat the top of your code, you're\nalways going to want to put\nwhat's called an spdx license\nidentifier. This is optional,\nbut some compilers will flag\nyour warning that you don't have\none. This is to make licensing\nand sharing code a lot easier.\nWe have a link to more about how\nlicenses work in the section of\nthis lesson in our GitHub\nrepository to do an spdx license\nidentifier, we just say spdx\nlicense identifier, and we're\ngonna choose MIT, the MIT\nlicense is one of the least\nrestrictive licenses out there.\nSo we use the MIT license for\nmost of our code samples once\nyou have a version and once you\nhave Is this much written, we\ncan actually go ahead and write\nto our compiler tab and scroll\ndown and hit Compile, that\nlittle turn thing will go. And\nin a minute, we'll see, this\ncontract is attempted to be\ncompiled. Since we actually\ndon't have a contract, we see no\ncontract compiled yet, but we\nsee the compiler automatically\nswitched to zero point 8.8.\ncompiling our code means taking\nour more human readable code\nlike pragma, solidity and\ntransforming it into computer\ncode, or very specific\ninstructions for the computer to\nuse. We'll go over what a lot of\nthis machine level code or this\ncomputer level code is doing in\na later section. If you're using\na Mac, you can also hit command\nS, and it will run the compiler\nfor you as well. On Windows, it\nmight be Ctrl S, we can actually\nchoose the compiler version that\nwe want to use. However, if we\ntell in our code to specifically\nuse zero, point 8.8, and we hit\nthe compile button, it'll\nautomatically switch to zero\npoint 8.8. However, if we use\nthe carrot thing, we get\nspecifically say, hey, we want\n0.8 point 10, we can hit\ncompile, and it will compile\nwith 0.8 point 10. Because\nagain, remember, the carrot says\nwe want to use at least zero,\npoint eight, all the way up to\nthe latest version of 0.8. Now\nlet's stay on zero point 8.8.\nThe next thing that we're going\nto do in our code is define our\ncontract. And to get a full\nscreen view, you can go ahead\nand hit the compiler button to\nget rid of it there. To start\ndefining our contract, we're\ngonna go ahead and write the\nword contract. This tells\nsolidity that the next pieces of\ncode is going to be a contract\ncontract is a key word in\nsolidity, and it tells our\ncompiler that the next section\nof this code is going to define\na contract. You can think of a\ncontract similar to a class in\nany object oriented programming\nlike Java or JavaScript. Let's\ngo ahead and give our contract a\nname here, we're going to call\nRS simple storage. And then we\nadd this little open and close\ncurly brackets. Everything\ninside this open and close curly\nbrackets is going to be the\ncontents of this contract.\nSimple Storage. Now, if we go\nahead and hit command S or Ctrl\nS, we can see this little green\ncheckmark show up. And if you\ndon't, you can always go back to\nthe compiler tab, scroll down\nand hit Compile and see the\nlittle green checkmark. That\nlittle green checkmark means\nthat our code is compiling\nsuccessfully. And we don't have\nany errors, we could\nhypothetically deploy this\ncontract right now. And it would\nbe a valid contract. So\ncongratulations on writing your\nfirst contract.\nNow solidity has multiple\ndifferent types or primitive\ndata types. And if you go to the\nsolidity documentation, which\nagain, is in our GitHub\nrepository, you can read more\nand learn more about the\ndifferent types that are in\nhere. The four most basic types\nare going to be Boolean,\nyou int, int, and an address\nor bytes, which is a lower level\ntype, which we'll talk about a\nlittle bit later. A boolean\ndefine some type of true false,\na you int is going to be an\nunsigned integer, which means\nit's going to be a whole number\nthat isn't positive or negative.\nIt's just positive, we have an\ninteger, which is going to be a\npositive or negative whole\nnumber. And then we have an\naddress, which is going to be an\naddress, like what we see in our\nmeta mask here. There are some\nother types as well that you'll\nlearn later on. The reason that\nwe have these types is we use\nthem to define what different\nvariables are. Variables are\nbasically holders for different\nvalues. For example, we could\ncreate a variable called has\nfavorite number to represent if\nsomebody has a favorite number.\nAnd we would put this bull\nkeyword before has to renumber\nsay, Okay, we have a variable\ncalled has favorite number, and\nit's of type boolean. So this\nhas favorite number is going to\nrepresent a true or a false to\nset its value, we could say has\nfavorite number equals true. Now\nhas favorite number is going to\nbe true. We could also say has\nfavorite number equals false. So\nthis Boolean has faded number is\nnow going to be false. For uns\nwe could say you went favorite\nnumber equals and then set a\nnumber 123. This means that our\nfavorite number is going to be\n123 You'll enter is special\nbecause we can actually specify\nhow many bits want to allocate\nto this number bits and bytes\nare pretty fundamental pieces of\ninformation for computer\nscience. We're not going to go\nover it here. However, there's a\nfantastic video in the GitHub\nrepository that explains it\nmore. Basically, it's how much\nstorage or memory to allocate to\nthis number. How big can it get,\nif we say a you int eight can\nhave eight bits all the way up\nto you went to 56. If you don't\nspecify how big it is, it\nautomatically defaults to you\ninto 256. Oftentimes, it's\nbetter when writing our code to\nbe very explicit. So usually\nyou'll see me just do you int\n256 to represent a un 256. We\ncould also do an int favorite\nnumber equals 123 or an int 256.\nI'm just Going to go ahead and\nadd this Boolean back here,\nwe're going to change this back\nto UNT to 36. And let's change\nour favorite number to five\nhere, we could also do something\ncalled strings, string, favorite\nnumber in text\nequals five\nstrings represent basically\nwords, and you can represent\nthem by putting them in these\nquotes, it's going to be some\nword or phrase, or really,\nreally just kind of any\ncombination of keystrokes in\nhere, our ends can be positive\nor negative. So we could say,\nnegative five or positive five,\nboth are going to be valid,\nsince we can also do address my\naddress equals and grab our\naddress, right from Metamask.\nAnd paste it in, you'll notice\nthat we end all of these lines\nof code with the semicolon. We\nalso have bytes objects, or a\nbytes 32, again, representing\nhow many bytes we want them to\nbe. And this says that we have\ncalled favorite bytes, and we're\njust gonna set it equal to cat.\nSo strings are actually really\ninteresting, because strings are\nsecretly just bytes objects, but\nonly for text to a cat is\nactually a string, but can\nautomatically get converted into\none of these bytes object bytes,\nobjects typically look like 0x.\nAnd then some random letters and\nnumbers that represent the bytes\nobject, but cat can\nautomatically get converted down\nto bytes. We'll talk about bytes\nmore in coming sessions, you can\nalso do bytes, two bytes, three\nbytes, five bytes 22, you get\nthe picture for our uns and our\ninto the sixth lowest we can go\nis eight bits, because eight\nbits is a byte. And we can go up\nby steps of eight. So we can do\n816 32, etc, all the way to 256.\nFor example, down here, we can't\ndo bytes 64. And if we go ahead\nand try to compile this, we get\na little red thing here. And if\nwe scroll down, we get a\ndeclaration error identifier not\nfound or not unique. Bytes 64\nfavorite bytes equals cats. And\nwe even got a little red warning\nsign here in our remix. This is\nremix telling us there's\nsomething wrong with this line.\nSo we can switch back to bite\n32. Since byte 32 is the maximum\nsize that a bytes can be, you\ncould also do just a bytes\nobject, which means it can have\nany size, but we typically want\nto be explicit. And we're going\nto stick with bytes 32 For now\nwant to learn more about the\ndifferent types and how to use\nthem and all the different\nfeatures with them, be sure to\ncheck out the solidity\ndocumentation. For now for our\nsimple storage, let's say we\nonly want to store numbers. So\nlet's go ahead and delete\neverything except for the\nfavorite number section.\nNow in solidity,\nif I do this, and I remove the\nequals five, this favorite\nnumber actually does get set to\na default value, the default\nvalue for solidity is going to\nbe whatever the null value is,\nwhich in solidity is case zero.\nSo saying you Intuit six\nfavorite number is going to be\nthe same as saying you 256\nfavorite number equals zero\nsince it gets initialized to\nzero. So for now, let's not\ninitialize it to anything. So\nthat favorite number will\nautomatically start off as zero.\nNow, if you get confused, as\nyou're coding along, and you're\nfollowing along with me, be sure\nto write comments in your code\nso you know what's going on. So\nmaybe, for example, a great\ncomment here would be this gets\ninitially alized to zero. And\nthen if that's even confusing,\nyou could say, this means that\nthis section is a comment. Now\nlet's go ahead and create a\nfunction functions or methods\nare self contained modules that\nwill execute some specific set\nof instructions for us, when we\ncall it if you're familiar with\nJava, or Python, or JavaScript\nor anything like that functions\nwork the exact same way\nfunctions get identified by the\nkeyword function, let's create a\nfunction called store that will\nchange the value of favorite\nnumber to some new value. And\nthe number that we're going to\nchange it to is going to be\nvariables that are passed to our\nstore function here. So we're\ngoing to allow our store\nfunction to take a variable of\ntype un 256. And we'll call it\nunderscore favorite\nnumber, we'll make this a public\nfunction, which we'll get to in\na minute. And all we're going to\ndo is we're going to set\nfavorite number equal to\nwhatever variable that we just\npassed. So now we have this\nfunction called store, that it\ntakes some parameter that we're\ngoing to give it and it sets\nthis favorite number variable\nequal to whatever number that we\ngive this function. Now to see\nthis actually in action, let's\ndeploy this to an even thicker\nblockchain than a test net.\nWe're going to actually deploy\nthis to a local network or a\nJavaScript VM. And first before\nwe can even do that, let's just\nmake sure that it's going\ncompiling correctly looks like\nwe have a green checkmark, which\nis good. And we'll come down to\nthis button here, which is our\ndeploy and run Transactions tab.\nOur deploy and run Transactions\ntab has a ton of different\nconfiguration pieces for\nactually deploying this\ncontract. First, we want to make\nsure we are on the JavaScript VM\nLondon piece here, JavaScript VM\nmeans we're going to be\ndeploying to a fake local\nJavaScript VM. The JavaScript VM\nis a fake local blockchain where\nwe can simulate transactions\nreally quickly without having to\nwait for them to go through on a\ntest net, don't worry about the\nLondon versus Berlin piece here\nfor now, injected web three and\nweb three provider we'll talk\nabout in a little bit. We also\nhave this account section here.\nWhen we run on our fake\nJavaScript VM, we're given a\nwhole bunch of fake accounts\nfrom where to deploy from, and\nwe're given 100 eath. For each\none of these fake accounts, you\ncan kind of think of it similar\nto our meta mask account in meta\nmask, except for the difference\nhere is that this is this fake\nJavaScript VM Aetherium that\nwe're given. For our\ntransactions, including\ndeploying contracts, we're\nactually given a gas limit,\nthere's also values we can send,\nand we can choose our contracts.\nRight now we only have one\ncontract, simple storage, so\nthat's going to be the one that\nwe're going to deploy. So on the\nleft hand side, to deploy this\nto our fake JavaScript VM, we're\ngonna go ahead and hit the\nDeploy button. And if we scroll\nall the way down to the bottom,\nnow, we can see a contract was\ndeployed. It says simple storage\nat x, blah, blah, blah, blah,\nblah. And we see this orange\nbutton store with come this\ngrade text you in 256,\nunderscore favorite number on\nour fake local blockchain, we're\nactually given an address every\nsingle smart contract, it has an\naddress, just like how our\nwallets have an address. So if\nwe hit this copy button here,\nand we put it into a comment,\nmake this a little bit bigger,\nwe can see that the address of\nthis contract that we just\ndeployed, is located at this\naddress. Additionally, if you\npull up the slider over here,\nyou'll be able to see this\nlittle green checkmark with all\nthis information about this\ndeployment. And you can hit the\nlittle drop down and see a whole\nlot more information about this.\nSomething you might notice is\nyou'll see some familiar\nkeywords like status,\ntransaction hash, from to gas,\netc. When we deploy a contract,\nit's actually the same as\nsending a transaction. Remember,\nanytime we do anything on the\nblockchain, we modify any value,\nwe are sending a transaction. So\ndeploying a contract is\nmodifying the blockchain to have\nthis contract, it's modifying\nthe state of the blockchain. And\nif we had sent this on a\nRinkeby, or COVID, or main net\nnetwork, we would have had to\nspend the gas to actually deploy\nthis contract. And this is the\nsimulation of how much gas and\nthe transaction hash and from\nand to and all this other stuff\nabout our transaction had, we\nactually deployed it to a real\nnetwork. But since it's\nJavaScript VM, it's all fake\ninformation. Now we have this\nbig orange button store, this\nbig orange button resembles the\nstore function that we just\ncreated. So if we add some\nnumber into this store, like\n123, and we hit the Store\nbutton, we actually call this\nstore button. And we actually\nexecute a transaction on our\nfake Jasika. Blockchain to store\nthe number 1234 favorite number.\nAnd if we scroll all the way up\nto our account, now, you'll see\nthat we have a little bit less\nether in our fake account. This\nis because we spent the gas to\nactually call this contract. And\nif we pull up this bottom bit\nhere, and I call this with five\nI call store, you'll see it\nflashed for a quick second, we\nsent another transaction to\nstore the value five in our\nfavorite number. Now the\nquestion might be having is,\nthat's really cool, Patrick, but\nI can't see what favorite number\nactually is, how do I know that\nthose transactions are actually\ngoing through? Well, right now,\nthe visibility of our favorite\nnumber is set to private, so we\nactually can't see it. And we'll\ntalk about visibility in just a\nsecond. To make it so that we\ncan see it. We'll change our\nfavorite numbers visibility to\npublic. So let's go ahead, we'll\nrecompile we'll go back to the\ndeploy tab. We'll click the\nlittle x here, which is to say\nlet's get rid of this contract.\nAnd it just gets rid of it from\nour window here. It doesn't\nactually get rid of it from the\nblockchain, because again,\nthey're immutable, well, kind of\nimmutable, since again, this is\nkind of a fake simulated chain.\nBut we go ahead and compile, and\nnow we hit Deploy again. And if\nwe scroll down, our new\ncontract, will now have two\nbuttons. One is the orange\nbutton for store. But now we\nhave a New Favorite button. This\nbutton represents this public\nvariable favorite number, and it\nresembles a function saying,\nHey, show me what favorite\nnumber is. So if I were to click\nthis favorite number button,\nwhat do you think will show up?\nWell, do you remember what this\ngets initialized to? Well, let's\nclick it now. We do indeed See\nthat zero shows up, we see that\nthis is a YouTube ID six, and\nthe value stored in it is zero.\nNow, if I were to change that\nnumber to five by calling the\nstore function, and now hitting\nfavorite number, we do indeed\nsee, favorite number gets\nupdated to five functions and\nvariables can have one for\nvisibility specifiers, we have\npublic, private, external, and\ninternal. Public is visible\nexternally and internally,\nmeaning anybody who interacts\nwith this contract or sees this\ncontract can see what's stored\nin this favorite number\nfunction. You'll see here in the\nsolidity documentation, it says\nit creates a getter function for\nthe storage slash state\nvariables. When we add this\nkeyword public to favorite\nnumber, what we're actually\ndoing is we're creating what's\ncalled a getter function for\nfavorite number, we're basically\ncreating a function that says to\nreturn the value of favorite\nnumber, and that's why this blue\nbutton pops up. Because this\nblue button is a function that\nsays, hey, return the value of\nfavorite number private means\nonly this specific contract can\ncall this function. Now for\nstorage, it doesn't mean only\nthis contract can read what's\nstored here. And we'll get into\nthat a little bit later. But by\nthat means, this is the only\ncontract that can call the\nfavorite number function.\nPrivate functions are only\nvisible to the current contract.\nExternal functions are only\nvisible externally, meaning\nsomebody outside this contract\ncan call this function. And then\ninternal means that only this\ncontract and it's children\ncontracts can actually read it,\nbut we'll get into that a little\nbit later, too. So oddly enough,\nvariables are just function\ncalls. Now, the reason that we\ndidn't see favorite numbers show\nup on the left hand side, when\nwe first deployed this without\nthe public keyword. When we\ndon't give a visibility\nspecifier to functions or\nvariables, they automatically\nget deployed as internal. And as\nwe know, internal functions and\nvariables can only be called by\nthis specific contract or\nderived contracts, which again,\nwe'll get into later. So let's\njust keep it public. For now,\nthe reason that we're prefixing,\nour parameter here with an\nunderscore is a way to tell us,\nhey, this variable here is\ndifferent from the favorite\nnumber global, there are some\ndifferent naming conventions\nthat are used for parameters.\nAnd as we get later into the\ncourse, will understand more and\nmore of what good names are\nparameters are, every time we\ncall this store function. And we\nchange the value here, we're\nactually sending a transaction\nbecause remember, every single\ntime we change the state of the\nblockchain, we do it in a\ntransaction. And we can see all\nthe details here. If you go over\nto the transaction details in\nthe logging area of your remix,\nyou can actually scroll down and\nyou can see the transaction cost\nin units of gas, you'll see a\nnumber of something around this.\nAnd you'll notice it's more than\nthat 21,000 number from sending\nAetherium. That's because we're\ndoing something more\ncomputationally expensive. We're\nactually storing a number over\nhere. Now what do you think will\nhappen if we do more inside of\nthe store function as well. So\ninstead of just storing this\nnumber, maybe what else we do is\nwe will store the number here.\nAnd then we'll update our\nfavorite number will say\nfavorite number equals favorite\nnumber plus one. Since we're\ndoing more stuff, now we should\nsee this store function actually\nbecome more expensive. So let's\ngo ahead and recompile we'll do\ndelete this will redeploy. We\nnow have a new contract will\nstore five again. Now if we look\nin the details of this\ntransaction, and we scroll down\nto execution costs, we do indeed\nsee the amount of gas has\ngreatly increased. And that's\nbecause we're doing more things,\nthis store function is now more\ncomputationally expensive. And\nlike I said, each blockchain has\na little different way of how\nthey actually calculate gas. But\nthe easiest way to think about\nit is, the more stuff you do,\nthe more expensive that\ntransaction is going to cost. So\nlet's go ahead and delete this\nline to continue our example.\nNow let's talk about scope for a\nsecond, our favorite number is\nbasically in something called\nthe global scope, meaning\nanything inside of these\nbrackets can access this\nfavorite number variable. But\nwhat if I did something like\nthis? What if I made a un 256\ncalled Test var? And I set it\nequal to five? And then I\ncreated a new function called\nsomething will have it take no\nparameters and be public? Could\nI access the test var and then\nchange it to something like six?\nCan we do that? Well, let's go\nahead and see what happens when\nwe try to compile this. We\nactually run into an error. We\nhad expected primary expression\nright here. Oh, well, that's\nbecause I have the double\nquestion mark. Let's try now. We\nget undeclared identifier. Our\nsomething function doesn't know\nabout this test var when you\ncreate variables, they only can\nbe viewed in the scope of where\nthey are. Now if that's a little\nconfusing, just look for the\ncurly brackets. These two curly\nbrackets encompass this whole\nWe'll section here write, the\nopening one is up here, the\nclosing one is down here. So if\nI create a variable directly\ninside of these curly brackets,\nthat means everything in here\ncan access it. However, test var\nwas created inside of these\ncurly brackets, which means that\nonly stuff inside of these curly\nbrackets can access test var,\nsince our functions something\nisn't inside of store, or\nsomething function won't know\nabout test var. So that's how\nscope works, you want to look to\nsee if your variable that you\ncreated is inside of these curly\nbrackets. And that's how you can\nknow if other functions can work\nwith them. So this is why this\nfails. Now, like what we saw in\nthe documentation, when we add\nthis public variable to favorite\nnumber, we're secretly adding a\nfunction that just returns this\nfavorite number, we can also add\nour own function that also\nreturns the favorite number to\nresemble the function that's\ngetting created in the backend.\nSo we can say function, we call\nit retrieve, and we make it a\npublic view. And we'll say it\nreturns, you went to 56. or\nexplain what that means in just\na second. And we'll say return\nfavorite number. Now, I'm going\nto hit command S, which again,\nI'm going to do that a lot\nthroughout this section. But\njust remember that that's\nequivalent to me going to the\ncompile tab and hitting compile.\nNow if we go to the deploy tab,\ndelete our last one, deploy a\nnew one, we now have a retrieve\nfunction, which is going to\nreturn the exact same thing that\nour favorite number is going to\nreturn. Again, if we update this\nto five, called favorite number\nand then retrieve they both now\nreturn five. Now as you can see\nhere, these two functions are\nblue, but this function is\norange. What's the difference?\nWhy did these have these\ndifferent colors? Well, the key\nlies in this view keyword here,\nthere are actually two keywords\nin solidity that notate a\nfunction that doesn't actually\nhave to spend gas to run. And\nthose keywords are view, and\npure. And let's also get rid of\nthis variable here. A function\nthat is a view function means\nwe're just going to read state\nfrom this contract, we're just\ngoing to read something off of\nthis contract. For example, our\nretrieve function right now is\njust reading what favorite\nnumber is, a view function\ndisallows any modification of\nstate. So you can't update the\nblockchain at all with a view\nfunction. Pure functions also\ndisallow any modification of\nstate. So we couldn't update our\nfavorite number. Not only that,\nbut they also disallow reading\nfrom the blockchain. So we\ncouldn't read favorite number\neither. Instead, what you might\ndo with a pure function is maybe\nsomething like\nfunction, add public here, one\nplus one,\nor return, one plus one, this\nwould be turns you into 36,\nmaybe something like this, maybe\nthere's some math you want to\nuse over and over again, maybe\nthere's some specific algorithm\nthat you want to implement that\ndoesn't actually need to read\nany storage, etc. Now, if we\ncall a view function, or a pure\nfunction by itself, we actually\ndon't need to spend any gas.\nSince we're just reading from\nthe blockchain. Remember, we\nonly spend gas we only make a\ntransaction if we modify the\nblockchain state. So you'll\nnotice in our little console\ndown here, that if I call\nretrieve this call things comes\nup. However, it looks different\nthan when we call the store\nfunction. And we call the store\nfunction, we get this little\ncheckmark, we get a hash, we\ndon't get a little checkmark.\nAnd we don't get a hash with the\ncalls. That's because clicking\nthese blue buttons doesn't make\na transaction. This is saying,\nHey, we're just going to read\noff chain, we're just going to\nread this value. However, if you\nlook in the details of this\ncall, there's this execution\ncost bit here. So what's going\non? Well, we can read this part\nright here, cost only applies\nwhen called by contract. If we\ndo have a function that calls\nretrieve, if there's a function\nthat is updating state that\ncalls a view or a pure function,\nthat's the only time it'll cost\ngas. So for example, if our\nstore function which is not a\nview function, were to call\nretrieve at some point, then\nwe'd have to pay the cost of the\nRetrieve because reading from\nthe blockchain cost this\ncomputation and cost gas calling\nview functions is free, unless\nyou're calling it inside of a\nfunction that costs gas, in\nwhich case it will cost gas. So\nif we leave it here, we delete\nthis recompile redeploy. We had\nfavorite number retrieved, they\nboth still cost nothing. But if\nwe add, restore eight in here,\nwe can see, we can see our\nexecution cost has gone up from\nwhat it was without retrieve,\nwhich we can go ahead, we can\ncompile, I hit command us to\ncompile here, we can deploy.\nLet's go ahead and store again.\nWe'll click on that transaction,\nwe can see that it's much\ncheaper without that retrieve\nfunction in there. And again,\nour favorite number variable as\nlong as it has this public\nvisible solidity, it also is\ncounted as a view function that\nreturns a un 256. The returns\nkeyword means what is this\nfunction going to give us after\nwe call it so we say this\nfunction is going to give us\nthis function is going to return\na un 256. When we call retrieve,\nit's going to return or give us\na utility six. This is the\nresult of calling the function\nthis six is the result of\ncalling arbitrary function.\nNow our contract is\ngood as it is, it allows us to\nstore a single favorite number.\nBut what if we want to store a\nrange of favorite numbers? Or\nmaybe we want to store a whole\nbunch of different people who\nhave different favorite numbers?\nWell, how do we do that there\nare several different ways that\nwe can approach this, one of the\nways we could start approaching\nthis is by creating what's\ncalled a struct of people. Or we\ncreate a new type. In our\nsolidity, we can create a people\nobject that holds both someone's\nname, and their favorite number.\nTo do that, we say struct\npeople, you went to 56, favorite\nnumber, and a string name. Now\nwe've created a new type called\npeople kinda like you intuited\nsix, or Boolean, or string. Now\nwe have a people type that we\ncan use. Now similar to how we\ncreated a un 256 public favorite\nnumber, we can do the exact same\nthing. But with a people, we\ncould say people public, we call\nthis person, and we can create a\nnew people and assign it to this\nvariable person. So we'll say\nequals people public person,\nequals, and we'll add\nparentheses here to signify\nwe're creating a new person. And\nsince we made this a struct, we\nadd little curly brackets here\nto let solidity know that we're\ngoing to be grabbing from these\nstruct variables, we'll say\nfavorite number is going to be\ntwo, and the name is going to be\nPatrick semicolon, and then we\ncan hit Ctrl S, or we can go\nahead and compile. Now if we go\nahead and deploy this we now\nhave a new person, since this,\nagain, is a public variable, it\nhas a getter function called\nperson. And if we click person,\nwe see our new object, the\nfavorite number is two. And then\nthe name is Patrick, you see\nthis zero and this one, because\nthese are showing the index of\nthe different variables. But\nthose of you new to computer\nscience, typically in computer\nscience, let's start with the\nnumber zero. So what are zero\nwith index, we have you in 256,\ncalled favorite number, which is\nsaved at two. And then at index\none, we have a string, which\nstands for the name of Patrick,\nwhenever you have a list of\nvariables inside of an object in\nsolidity, they get automatically\nindexed. So favorite number gets\nindexed to zero, and name gets\nindexed to one. Interestingly\nenough, if you have a whole\nbunch of variables inside your\ncontract, like we have public\nfavorite number, this favorite\nnumber, actually, technically is\ngetting indexed at the zero with\nstorage slot. And if we were to\nmake another one of these, maybe\nyou want to get six public\nbrother's favorite number, this\nwould technically be indexed at\nthe first slot. And then if we\nwere to make one more, maybe\nsister's favorite number, this\nwould be the next add the second\nslot. So favorite number at\nzero, this add one, and this a\ntwo, but we'll learn more about\nthat much later in the course.\nSimilarly, favorite number is\nindex zero name is index at one.\nNow what we have is great, but\nif we want a whole lot of people\nare we gonna have to keep copy\npasting and changing the\npeople's name person to their\nfavorite one, number one, number\nthree, will name them ally.\nPerson three, their favorite\nnumber will be seven. Their name\nwill be Chad or something. This\nobviously isn't great way to\ncreate lists and large number of\npeople's because we have to\nstatically keep typing them in.\nSo a much better way to create a\nlist. And let's actually just go\nahead and delete Patrick to a\nmuch better way to create a list\nis to use a data structure\ncalled an array. An array is a\nway to store a list, or a\nsequence of objects, creating an\narray works the exact same we've\nseen to initialize other\ndifferent types. Typically, we\ndo the type of the object, the\nvisibility of the object, and\nthen the variable name. We do\nthe exact same thing with\narrays. We'll say we want a\npeople array. These little\nbrackets represent that we want\nan array of people. We'll give\nit a visibility of public and\nwe'll call it people you could\ndo the same thing with you and\n256 for example, you could say\nyou went to 56\npublic favorite numbers list\nand just add this little array\nkey here. And now favorite\nnumbers list is going to be an\narray or a list We're going to\ncomment that out for now. Now if\nI were to go ahead and deploy\nthis contract, let's go ahead\ndelete the last one, let's\nredeploy. We now have this blue\npeople button here. Remember,\nsince it's public, and it's a\nvariable, it automatically is\ngiven a view function, it's\ngiven one of these blue buttons.\nAnd instead of just having a\nsingle button where the value\nshows up, it's giving us a form\nto fill out, it wants to take a\nun 256 as an input parameter. So\nif I put zero, I get nothing\nback, if I put one, I get\nnothing back. No matter what you\nput in this box, right? Now\nwe're gonna get nothing back.\nThis is because our people array\nor our people list is currently\nempty. And the value that it\nwants is going to be the index\nof the object that you want. So\nfor example, if at index zero, I\nhad Patrick, it would show\nPatrick for zero, if it didn't x\none I had John, or actually\nbetter yet, to Patrick.\nSeven, John,\netc. This is what it would show.\nBut since it's empty, it's going\nto show nothing. And let's go\nahead and remove the public\nvariable from favorite numbers\nso that we don't get the\nduplicate functions at the\nmoment, we'll just get the\nRetrieve function, we'll show\nyou how to add to this array in\njust a second. This type of\narray is what's known as a\ndynamic array, because the size\nof the array isn't given at the\narray initialization. If we were\nto say, a people array and add a\nthree in these brackets here,\nthat means that this list, or\nthis array of people could only\nbe three people big, if we don't\ngive it a size, it means it can\nbe any size and the size of the\narray can grow and shrink as we\nadd and subtract people, if I\nadd three, it can only have a\nmaximum of three in the array\never, we're going to work with a\ndynamic array, because we're\ngoing to want to add a arbitrary\nnumber of people to this array.\nSo let's go ahead and create a\nfunction that's going to add\npeople who are people array, so\nwe're gonna say function, add\nperson. And we're going to take\nstring, memory, name as input\nparameter, and I'll explain that\nin a minute. And a un 256\nunderscore favorite number,\nwe're going to make this a\npublic function, or we're going\nto do is we're going to call a\npush function that's available\non our people object. So we're\ngonna say people dot push, and\nwe're going to create a new\nperson, a new people object,\nwhich is going to take in the\nfavorite number.\nAnd the name.\nNow, this might be a little bit\ntricky to you. So let's break\nthis down. People here is\ncapitalized. So we know that\nsince capitalize, it's referring\nto this struct people and not\nour variable people, the\nlowercase people here is\nreferring to this lowercase\narray. So we're saying our array\ndot push, or push is the\nequivalent of adding basically,\na new people that grabs favorite\nnumber and name. Another way\nthat we could actually do this\nis we could create a variable of\ntype people and then add it like\nso. So we could say people, new\nperson equals people. And then\nwe put those brackets the same\nway we did before. You say\nfavorite number is going to be\nthis input value, this\nparameter, and we could say name\nis going to be this parameter.\nNow if you hit save, you'll get\nthis error set here, saying data\nlocation must be stored in\nmemory, or called data for\nvariable but no one's given. For\nnow, we're just going to add the\nmemory keyword here, and I'll\nexplain what it does in a little\nbit. And then of course, we need\nto add the new person into our\npeople dot push right here. So\nthis is how we're actually going\nto push people into our people\narray. And I'll get to this\nmemory keyword in a bit. Now if\nwe go back to our deploy tab, we\ndelete our last contract. Let's\ndeploy this new one. Right now,\nif we try to look at the zero\nwith person in our people array,\nwe get nothing but let's go\nahead and add a person, we'll\ncall it, Patrick will be the\nname, and seven will be the\nfavorite number. So we added\nPatrick, we added seven. Now if\nwe look at people's zero, we\nshould see the zeroeth person\nhas a name of Patrick, and a\nfavorite number of seven, boom.\nAnd that's exactly what we do\nsee, we see a favorite number of\nseven, and we see a string name\nPatrick, we tried to add John\nand do his 16. We hit Add\nPerson, we can see our\ntransaction go through. And now\nif we go to people at zero, it's\nstill Patrick with a favorite\nnumber of seven. But if we look\nat the people at index one, it's\ngoing to be John with a favorite\nnumber of 16. And if we look at\ntwo, this, of course, should be\nblank. And we do indeed see\nnothing actually happens here.\nPerfect. Now there's actually a\ncouple of different ways to\ncreate this new person here,\nlike we showed before, we can\nuse this bracket notation, or\nwhat we can do is we can\nactually just add the parameters\nin the order that they show. So\nthe first parameter for people\nis going to be favorite number.\nSo we can just do favorite\nnumber, comma, and the second\none is going to be name, the\nsecond one is going to be name.\nSo if we save this, this, this\nline we just created is the\nexact same as the last line,\nwe're being a little bit less\nexplicit here. So the other way\nis generally a little bit better\nbecause it's more explicit as to\nwhat variables are what or we\ndon't even need to save to this\nvariable here, we could take out\nthis whole line, replace new\nperson with exactly what we just\nsaw, like so now we don't even\nneed the memory keyword. Now,\nyou've probably seen this by\nnow. But if I go ahead and\ncompile, and I see a little,\nlittle red one here, I roll\nover. And it says something\nabout error, expected semicolon,\nbut got bracket, all these\nerrors mean that your code isn't\ncompiling. It's not working as\nexpected. So now I can go over\nhere and do a little semicolon\nrecompile, and I get a green.\nNow if I delete this top line,\nfor example, and I compile it,\nactually get a yellow thing.\nYellow stands for warnings, the\nwarning that I get is warning\nSPX license identifier, not\nprovided, you should add it. So\nlet's go ahead and add that\nback. recompile. And the warning\ngoes away. Warnings Don't stop\nyour code from compiling. So if\nyou get warnings, it's okay. But\nit's usually a good idea to\nlisten to the warnings, because\noften they'll give really\ninsightful information about how\nto improve your smart contracts.\nSo to summarize, if it's red,\nit's broken. If it's yellow, you\nmight want to check it out. But\nit won't stop you from\ncontinuing to code. So one thing\nthat you'll notice here is that\nwe have this memory keyword. And\nyou'll notice if you try to\ndelete it from our function\nhere, you try to compile, you\nactually run into an error data\nlocation must be memory or call\ndata for parameter and function.\nNow there are actually six\nplaces you can store data in\nsolidity you have the stack,\nmemory, storage, call data, code\nand logs. We're not going to go\nover these right now. But we are\ngoing to focus on three of the\nbig ones, or three of the\nimportant ones for this section,\nwhich are called data, memory,\nand storage. So for this\nsection, we're going to talk\nabout call data memory and\nstorage. And this is a little\nbit advanced. So if you don't\ntotally grasp it the first time,\nthat's totally okay. Please\ncontinue. Even if it's not\ncrystal clear what's going on\nhere, call data and memory mean\nthat the variable is only going\nto exist temporarily. So this\nname variable only exists\ntemporarily during the\ntransaction that this Add Person\nfunction is called storage\nvariables exist, even outside of\njust the function executing.\nEven though we didn't specify it\nup above, our favorite number is\nautomatically cast to be a\nstorage variable. Since it's not\nexplicitly defined in one of\nthese functions. Since we don't\nneed this name variable anymore\nafter this function runs, we can\nkeep it as memory, or we could\nkeep it as called data, you can\nhave a parameter as called data\nif you don't end up modifying\nthe name. For example, we\ncouldn't reassign name to equal\ncat here, if we compile we run\ninto an error. Type literal\nstring cat is not implicitly\nconvertible to expect the type\nstring called data. However, if\nwe have this as memory, and we\ncompile and save it, that error\ngoes away call data is temporary\nvariables that can't be\nmodified. Memory is temporary\nvariables that can be modified.\nAnd storage is permanent\nvariables that can be modified.\nNow even though I just said\nthere's actually six places\nwhere we can access and store\ninformation, we cannot say a\nvariable is stack code or logs,\nwe can only say memory storage\nare called data, you will learn\nwhy in a much later section.\nNow, this is a bit of an\noversimplification of this. But\nthat's essentially what's going\non. The next question you might\nhave is, well, why do I need to\nsay memory here, but I don't\nneed to say memory here. Well,\nlet's go ahead and put memory\nhere and hit CTRL S or compile.\nAnd let's see what happens we\nget from solidity data location\ncan only be specified for an\narray, struct or mapping types.\nA memory was given arrays\nstructs and mappings are\nconsidered special types and\nsolidity. solidity automatically\nknows where are you in 256 is\ngoing to be slowly knows that\nfor this function, a un 256 is\ngoing to live just in memory.\nHowever, it's not sure what a\nstring is going to be. Strings\nare actually kind of\ncomplicated. Behind the scenes,\na string is actually an array of\nbytes. And since a string is an\narray, we need to add this\nmemory bit to it because we need\nto tell solidity, the data\nlocation of arrays structs, or\nmappings and a string is\nsecretly an array. So that's why\nwe need to tell it it's in\nmemory. You'll notice we can't\nadd the storage keyword here\nslowly also knows that since\nthis is a function, this name\nvariable isn't actually getting\nstored anywhere. So it says Hey,\nyou can't have that you need to\nhave it beat memory or called\ndata and those are the only two\nthat it accepts So this is what\nwe want our function to look\nlike here. So the summary of\nthis is struct mappings and\narrays need to be given this\nmemory or called Data keyword\nwhen adding them as a parameter\nto different functions. We'll\nlearn more about storage memory\nand call data in later\nsessions. Now, this list\nis great, but what if we know\nsomeone's name, but we don't\nknow their favorite number?\nWell, what we could do is we\ncould look through the whole\narray looking for that person.\nFor example, in our contract, we\ncan say, Okay, I'm looking for\nJohn. Okay, let's start with\nzero. No, okay, that's Patrick.\nOkay, let's go to one. Okay.\nThat's John. Oh, great. His\nfavorite number 16? Well, this\nwas really easy, because we only\nhad two people. But what if we\nhad hundreds of people in this\narray? Well, we'd keep have to\niterating all the way up to the\nindex that that person was in,\nit's obviously really\ninefficient. What's another way\nto store this information so\nthat it's much easier and\nquicker to access? Well, another\ndata structure that we can use\nis something called a mapping,\nyou can think of a mapping as\nsort of like a dictionary, it's\na set of keys, which each key\nreturning a certain value\nassociated with that key. And we\ncreate a mapping variable the\nexact same way we create all of\nour other variables. This is\ngoing to be a type mapping of\nstring\nto you and tivity sex,\nthis is going to be our type of\nvisibility keyword is going to\nbe public. And we'll call it\nname to favorite number. Now we\nhave a dictionary where every\nsingle name is going to map to a\nspecific number. So let's add\nsome capability to our Add\nPerson function. So we are going\nto add our people to our array.\nBut let's also add them to our\nmapping here, what we'll do is\nwe'll say name to favorite\nnumber. App key name is going to\nequal to\nfavorite number. So let's go\nahead, compile this.\nWe'll go to our deploy screen,\nwe'll deploy this click, we have\na new button named a favorite\nnumber. If I type in Patrick,\nnothing shows up. By typing\nPatrick, you'll see I get zero\nresponse. By typing John, I also\nget a zero response. If I type\nin Becca, I also get a with zero\nresponse. When you create a\nmapping, you initialize\neverything to its null value,\nevery single possible string on\nthe planet right now is\ninitialized to having a favorite\nnumber of zero. So if we want to\nchange that, we'll have to go in\nand manually add that. So let's\ngo ahead and add a person to our\nmapping here. So we'll add\nPatrick. And we'll say my\nfavorite number is seven. And\nlooks like that transaction did\ngo through also add, Becca, and\nwe'll say her favorite number is\n13. Let John and we'll say his\nfavorite number is 16. Now, if I\nlook up, Patrick, I'll\nimmediately get back what\nPatrick's favorite number is, I\nget seven back. If we look up,\nJohn, we immediately get back\n16. Back up, we may only get\nback 13. And we also can see\nthem in our array. Because we\nkept in this people that push\nbit zero, we see Patrick's\nthere. At one, we see Becca. And\nat two, we see John, in our\nmapping, we're saying the string\nname is being mapped to the UN\n256 favorite number. And a lot\nof my variables, I like to make\nthem explicitly named like that.\nSo this is name to\nfavorite number. So\nnow we're in a space where let's\nsay that we really like our\nsimple storage contract. Right\nnow we have a favorite number, a\nglobal variable that we can save\na favorite number to with our\nstore function, we have a\nmapping of name to favorite\nnumbers, and we have an array of\na new type that we created\ncalled people, we can add to\nboth the array and to the\nmapping. Using this Add Person\nfunction that we've created,\nwe're able to save multiple\npeople's favorite numbers as\nwell as kind of a global\nfavorite number as well. Let's\nsay we really love this\ncontract, and we're ready to\nsend it to a test net to have\nother people interact with it.\nNow in future sections, you'll\nhear me say that you shouldn't\ndo this until you write tests\nuntil you do some really simple\nauditing. But for now, let's go\nahead and learn how to actually\ndeploy this to a test net or to\na real network. Now remember,\ntest nets are run out of the\ngoodness of people's hearts. So\nif it's a little bit funky, or\nmaybe doesn't work exactly as we\nshow here, that's okay. As long\nas it works with the JavaScript\nVM, you'll be all set but it is\ngood practice to learn how to\ndeploy these to a real test net.\nLet's go ahead and do that. Our\ncontract is here. Simple Storage\ndot soul. It's compiled,\ncompiling is passing we get this\nlittle green checkmark here we\ngo to the deploy section. Let's\ngo ahead and do Get this. And\nnow we're going to change the\nenvironment. So we were working\nwith a JavaScript VM or kind of\nthis fake simulated environment,\nwe want to now move to either\ninjected web three, or web three\nprovider. If you hover over\ninjected web three, there's this\nreally, really small text here.\nBut this basically means we're\ngoing to inject our meta mask or\nour web three wallet into our\nbrowser to use similar to what\nwe did with the faucet, we'll\npick our account we want to use.\nSo I'm gonna go ahead and pick\naccount one. And now we actually\nsee our account in the Account\nsection of remix, injected web\nthree means we're using our meta\nmask or whatever web three\nwallet, web three provider is,\nwhen we a little bit more\nmanually choose an endpoint. And\nwe're not going to go over this\nright now. But as we get later\ninto the course, you'll\nunderstand what this means. So\nwe're picking injected web\nthree, whatever network are\ninjected web three, or in this\ncase, our wallet is connected to\nis going to be the network that\nwe deploy to. So for this\nsection, we're going to be\ndeploying to Rinkeby. But again,\ndepending on whatever the\nrecommended test net and the\nrecommended faucet is, that will\ndictate which test net you\nshould actually deploy to. For\nus, it's going to be Rigby. To\ndeploy to a test that remember,\nwe're going to need gas, so\nwe're going to need some tested\nEtherium. Or if you're deploying\nto a main net main Aetherium,\nwhich you shouldn't be come to\nthe top of the GitHub repo to\nmake sure you have the most\nupdated faucet, the other place\nyou can go is link token\ncontracts page in the chain link\ndocumentation and scroll down\nthe ranking. And you can see\ntest that link available here,\ntest that eath available here.\nSo this is the other location,\nyou can always look to find the\nmost up to date faucets, and\nboth of them point right back\nhere. So now that we're working\nwith injected web three, we can\njust go through the exact same\nsteps to deploy to a test net as\nto deploy to a virtual machine.\nAnd remember, if you run out of\ngas to deploy this, be sure to\ncheck back to the faucets to\nactually deploy this. So we're\ngoing to do the same thing,\nwe're gonna go ahead and hit\nDeploy. But this time Metamask\nis going to pop up and ask us if\nwe want to actually deploy this,\nthis is the exact same as what\nwe saw with the blockchain\nexample, where we sign\ntransactions, we are signing and\nsending this transaction, the\ndata of this transaction is this\nmassive, massive data thing\nhere, which represents the\ncontract that we just created,\nwe can see all the payment\ninformation for this transaction\nfor deploying this contract, we\nsee it's going to cost around\nthis much Aetherium to deploy.\nBut again, we're on the Rinkeby\ntest network. So this is going\nto be fake Aetherium. We're\ngonna go ahead, hit Confirm. And\nif you pop up a little console,\nand remix, you'll see that after\na slight delay, it'll actually\nsay have this green checkmark\nthat it's confirmed that it went\nactually went through, we can go\nahead right click, open a new\ntab, and view this on ether\nscan. And after a slight delay,\nwe'll actually be able to see\nthe transaction details here,\nexactly the same as our\ntransaction details for sending\nAetherium we have a hash, we\nhave a status, we have blocked\nblock confirmations, we have\ntimestamp from which is going to\nbe us two, which is going to be\nthe average of the contract that\nwe just created. We didn't send\nany value with this. So this is\ngoing to be zero ether. And then\nof course, we see the\ntransaction fee, and as well as\nthe gas price. Because again,\ndeploying a contract to the\nblockchain is modifying the\nstate of the blockchain. So we\nhave to pay gas, and we can see\nall the different pieces here.\nAs we can see, gas limit and gas\nusage is much higher than just\nsending Aetherium, since we are\nputting a lot of data on chain\nand adding a lot of computation.\nSo this number is much higher\nthan the 21,000 number of just\nsending Aetherium. Now, if we\ncome back to our remix and\nscroll down, we're able to see\nour simple storage contract at\nthis address. If we hit this\ncopy button, and we go to the\nrink be ether scan, we paste it\nin the search bar, we will get\nthe contract that we just\ndeployed. And we see this first\ntransaction is going to be the\ncontract creation transaction.\nSo this contract that we just\ncreated one transaction, which\nis contract created. So now that\nwe have this contract created,\nwe have all the exact same\nfunctions that we saw when\nworking with the JavaScript\nvirtual machine, or the our fake\nenvironment, or our super fake\nenvironment. Now we can do all\nthe exact same things that we\ndid with the JavaScript VM, but\non a real test network. So\nyou'll see if I hit retrieve\nMetamask doesn't pop up. Because\nagain, this is a blue view\nfunction. If we look people at\nzero, this is also a view\nfunction and nothing pops up,\nnamed a favorite number should\nbe blank. So if I type in\nPatrick now, absolutely nothing\nhappens, right? I get I get zero\nreturned because mappings\ninitialize every single key with\na blank or a null value, which\nfor you 256 is zero. Now, we can\ngo ahead and store a favorite\nnumber store When your favorite\nnumber is going to modify the\nblockchain, so our meta mask\nshould pop up for us to confirm\nthe transaction and sign that\ntransaction to modify the\nblockchain state. So I'm going\nto store my favorite number of\n16, we'll hit store, meta mask\nwill pop up, and we're going to\ngo ahead and actually confirm\nthis didn't confirm is\nequivalent to US signing this\ntransaction and sending it to\nthe blockchain to modify the\nstate. So we're gonna go ahead\nand confirm this, we should be\nable to view this on ether scan.\nAnd again, it might take a\nlittle bit for it to actually\nindex or actually start working.\nSo please be patient with these\ntest nets. And again, this is\nwhy when building your\napplications, you want the test\nnet piece to absolutely try to\nbe your last step, because you\nhave to wait a really long time.\nAnd it puts a burden on these\npeople running these tests into\nrunning it out of the goodness\nof their heart. So please try to\nmake this the last step of your\nactual building process. For us\nlearning right here, it's okay.\nAnd after a slight delay, once\nwe hit refresh, it looks like\nit's indexing on ether scan, the\nether scan website is still\nfiguring out where the\ntransaction is going to remix,\nit looks like on the blockchain,\nthis has actually already gone\nthrough. So now if we hit\nretrieve, we do indeed see, our\nfavorite number is 16. Of\ncourse, these two are still\ngoing to be blank. And it looks\nlike that transaction has gone\nthrough and ether scan has\nindexed. So now let's go ahead\nand add a person will add\nPatrick, and my favorite number\nis going to be 16. We'll go\nahead and add person. Again,\nsince these are orange\ntransactions gonna pop up\nbecause we're modifying the\nblockchain state, we'll go ahead\nand hit Confirm. And we're going\nto be a little bit patient here\nand wait for this transaction to\ngo through. And we should see\nthis update. And this update.\nNow if I hit named a favorite\nnumber of Patrick, I get 16. And\nif I hit people of zero, I get\nfavorite number 16. And the name\nis Patrick. Awesome. So you've\nactually successfully deployed a\ncontract to an actual test net,\nand actually seen on ether scan\nwhat these transactions look\nlike, you should be incredibly\nproud of yourself, be sure to\ngive yourself a high five pat on\nthe back, send a tweet saying\nexactly how excited you are. But\nmake sure to celebrate these\nlittle wins, celebrating these\nlittle wins will give you the\nmotivation to keep going and\nreally excite you for learning\neach new thing. So huge.\nCongratulations. If you got this\nfar, you've deployed your first\ncontract to a test net,\ncongratulations. Now if you want\nto see what it looks like to\ndeploy to a different network,\nall you need to do in your\nMetamask is switch to a\ndifferent test net. See, if we\nswitch to COVID remix\nautomatically updates and says,\nah, injected web three is now\nthe COVID test network. We could\nswitch again maybe to Grilley,\nwe say Ah, the injected web\nthree is now at the Grilley.\nThis is the test net that we'd\nbe deploying to of course, we\nneed actual test net Aetherium\nto do any deploying, so we\nwouldn't be able to here. And if\nwe go ahead and hit Deploy right\nnow Metamask pops up. But we get\nthis little red thing saying\ninsufficient funds. Of course,\nlater on, we'll learn how to add\nnew networks like polygon like\navalanche like phantom into our\nMetamask. So we can deploy from\nany one of them\nas well.\nNow, I mentioned this term\nbefore, but all this code that\nwe wrote, when we hit this\ncompile button, it compiles it\ndown to the EVM or the Ethereum\nvirtual machine. Don't worry too\nmuch about what this means. EVM\nis a standard of how to deploy\nsmart contracts to Aetherium\nlike blockchains. And any\nblockchain that implements a\ntype of EVM. You can deploy\nsolidity code to some examples\nof EVM compatible blockchains\nare going to be avalanche,\nPhantom, and polygon. Since\nthese are EVM compatible, this\nmeans we can write our solidity\ncode, and deploy to these\nblockchains, which again, I'll\nshow you later on how to add\nthese new networks into your\nMetamask. And then how to deploy\nthem. Let's do a quick recap of\nour first smart contract. And\nthen you should actually take a\nbreak, maybe get some ice cream\nor coffee because you absolutely\ndeserve it. Congratulations. The\nfirst thing you always need to\ndo in your smart contracts is\ntell solidity, what version of\nsolidity that you're going to be\nusing. And additionally, you\nwant to add an spdx license\nidentifier, then you have to\ncreate your contract object and\nname your contract. The contract\nin solidity is similar to a\nclass in other programming\nlanguages, and everything inside\nthe squiggly brackets is a part\nof that contract. There are many\ndifferent types in solidity like\nunsigned integer, 256, Boolean\nstring, bytes, 32, etc. If we\nwant to create a new type, we\ncan create what's called a\nstruct in solidity. You can\ncreate arrays or lists in\nsolidity, you can create\ndictionaries, or what's called\nmappings in solidity or hash\ntables, which when you give it a\nkey, it'll spit out the value\nthat that key represents. We can\ncreate functions in solidity\nthat modify the state of the\nblockchain. We can also create\nfunctions in solidity that don't\nmodify the state of the\nblockchain view in pure\nfunctions, don't modify by the\nstate of a blockchain, we also\ncan specify different data\nlocations in our functions,\ncalled data and memory mean that\nthat data is only temporary and\nwill only exist for the duration\nof the function. Storage\nvariables are permanent and stay\nthere forever. function\nparameters can't be stored\nvariables because they're only\ngoing to exist for the duration\nof the function. All the\nsolidity code that we work with,\nwhen we hit Compile, it actually\ncompiles down to this Aetherium\nvirtual machine specifications.\nWe'll learn more about those\nspecifications later. And last,\nbut not least, another huge\ncongratulations on your first\ncontract here.\nAwesome.\nAll right, let's get started on\nour lesson three, remember,\neverything is in the GitHub\nrepository. And we can scroll\ndown, hit Lesson three and see\nall the code here. I'm building\nup this repo as I film. So\nunderneath this lesson three is\ngoing to be a lot more\ninformation than just the code\nhere, all of our code samples\nend with dash f f, c, which\nmeans dash Free Code Camp. So if\nyou see a GitHub repo that ends\nwith dash F, F, C, know that\nthat repository is associated\nwith this course, I'm going to\ndo a quick high level\nwalkthrough of what we're going\nto be building in this lesson.\nSo you don't need to code right\nnow just sit back watch and\nenjoy. In this lesson, we're\nactually going to expand to\nhaving three different\ncontracts. Let's say we want to\nbe able to deploy simple storage\ncontracts from a contract\nitself. Yes, contracts can\nindeed deploy contracts, we are\ngoing to create a contract\ncalled storage factory dot sole,\nthat's going to be able to\ndeploy and interact with other\ncontracts itself. So what we\ncould do is we could go deploy\nthis to a JavaScript VM, we're\ngoing to choose storage factory,\nand we're gonna go ahead and hit\nDeploy. In our contract down\nbelow, we have a number of\ndifferent functions. Our top\nfunction is this function called\ncrate simple storage contract,\nwhich we can click and it'll\nactually create a simple storage\ncontract for us, then we can go\nahead and interact with it at an\nIG zero will save a favorite\nnumber of one. Now, if we hit SF\nget zero,\nwe get one back. And\nwe can see the address of the\nsimple storage contract that we\njust deployed. Additionally,\nwe're going to learn about a\nnumber of solidity features,\nsuch as importing inheritance,\nand so much more. So let's go\nahead and jump in. And remember\nall the code is available here\nfrom the GitHub repository. So\nbe sure to refer back to these\ncontracts if you get lost.\nSo here we are\nback in remix, and we have our\nsimple storage dot soul. If you\nskipped over the last section,\nbe sure to go to the full\nblockchain solidity course, Jas.\nAnd scroll down to lesson two,\nwelcome to remix and grab this\ncode. Go to simple storage\noutsole. And copy paste this\ncode into remix. Because this is\nwhere we're going to be starting\nfrom, we have this simple\nstorage contract, which is\ngreat. It allows us to store a\nfavorite number. And it allows\nus to store favorite numbers\nacross different people in both\nmappings and arrays. But let's\nsay we want to get even more\nadvanced with this, we actually\ncan have a contract actually\ndeploy other contracts for us.\nAnd then go ahead and interact\nwith those contracts from other\ncontracts, contracts interacting\nwith each other is an essential\npart of working with solidity\nand working with smart\ncontracts. The ability for\ncontracts to seamlessly interact\nwith each other is what's known\nas composability. smart\ncontracts are composable,\nbecause they can easily interact\nwith each other. This is\nespecially awesome when it comes\nto things like defy where you\ncan have really complex\nfinancial products interact with\neach other incredibly easily,\nsince all their code is\navailable on chain. So we're\ngoing to learn how to do that.\nSo let's keep our simple storage\ncontract exactly the way it is,\nwe're going to create a new\ncontract called storage factory.\nSo we're going to hit the New\nFile button and type in storage,\nfactory dot salt. And let's\nclose this off for now. So let's\ngo ahead and get this contract\nsetup from what we learned\nbefore. First thing we're going\nto want to do is the spdx\nlicense identifier, which we're\ngoing to do MIT. And then the\nnext thing we're always going to\nneed is our solidity version.\nSo we'll do pragma solidity\nand we could do zero point 8.7.\nBut for this one, let's do zero\npoint 8.0 And then just add the\ncarrot, meaning any version of\n0.8 point something will work.\nAnd then let's add our contract\nname, which is going to be\nstorage factory. Now hit command\nS or ctrl S or go to the compile\ntab and hit compile, and boom,\nwe have our regular setup here.\nNow we want to create a function\nthat can actually deploy our\nsimple storage contract. So\nwe'll create a function called\nfunction. create simple storage\ncontract, we'll have it be\npublic, so anybody can call it\nwill have to deploy a simple\nstorage contract and save it to\na global variable. But before we\ncan do it How can our storage\nfactory contract know what our\nsimple storage contract looks\nlike? In order to deploy it, if\nour storage factory contract is\ngoing to deploy simple storage,\nit's going to need to know code\nof simple storage. One way we\ncan do this is we can actually\ngo to our simple storage dot\nsoul and copy everything\nunderneath pragma, solidity and\ndown and paste it into our\nstorage factory dot soul\nunderneath our pragma, solidity.\nIf we go ahead and compile and\nsave this, it actually works our\nstorage factory, that soul\ncontract actually now has two\ncontracts in it. It has the\nsimple storage contract, and it\nhas the storage factory contract\nin it, you actually go to the\ndeploy tab and scroll down to\ndeploy while you're on the\nstorage factory dot soul, not\nthe simple storage that's all on\nstorage factory, you can see\nthat you can actually choose\nwhich one of these contracts to\ndeploy, a single file of\nsolidity can hold multiple\ndifferent contracts. Now that we\nhave our simple storage, that's\nall in our storage factory, we\ncan actually go ahead and create\nthis function to deploy a simple\nstorage console, we're going to\ncreate a global variable the\nsame way that we would create\nany other global variable, we'll\ndo the type, which is going to\nbe type simple storage contract,\nwe'll give it a visibility of\npublic. And we'll give it a\nvariable name. Type simple\nstorage contract going to be\npublic, the name of the variable\nis going to be simple storage.\nNow in our function, create\nsimple storage contract, we're\ngonna say simple storage equals\nnew, simple storage.\nThis new keyword is how solidity\nknows Ah, okay, we're going to\ndeploy a new simple storage\ncontract. So we go ahead and\ncompile this, we'll go to the\ndeploy tab, make sure we're on\nthe JavaScript VM, we'll scroll\ndown to the contract. And we'll\nchoose storage factory. And\nremember, you need to have\nstorage factory dot soul\nselected. In order for that to\nshow up storage factory, we'll\ngo ahead and hit Deploy. And now\nwe see our storage factory\ncontract has two buttons. One is\ncreate simple storage, and the\nother one is going to be a view\nof our simple storage contract.\nIf we click it right now, it's\ngoing to show us that it's\ncurrently at address zero,\nbecause it gets initialized to\nbeing blank. It's saying there\nis no simple storage contract\ncurrently deployed. Now if we\npull up our console and click\ncreate simple storage, we see we\ncreated a new function call\nstorage factory dot create\nsimple storage contract. And in\ndoing so we called this function\nwhich created and deployed a new\nsimple storage contract, we can\nnow see what address the simple\nstorage contract is out by\nclicking the simple storage\nbutton and we see the address\nassociated with it. So now we\nknow how a contract can actually\ndeploy another contract. But the\nthing is, having this massive\nchunk of code above our storage\nfactory is a little bit\nredundant, especially since we\nhave our other file called\nSimple Storage dot soul. And\nlet's say we have a contract\nthat has got a ton of other\ncontracts in it. Always copy\npasting all these contracts is\ngoing to be a lot of work. So\ninstead, what we can do is use\nwhat's called an import. So\nlet's go ahead and delete our\ncontracts simple storage. And\nnow we're just going to type\nimport dot slash simple storage\ndot soul. This import dot slash\nsimple storage dot Seoul is the\nexact same as our copy pasted\nversion of simple storage.\nThat's all. It takes the path of\nanother file, it takes the path\npackage or GitHub, which we'll\nget to in a minute of another\nfile and says, Okay, we're going\nto paste that contract into the\ntop of this contract here, we\nactually see we go back to\ncompile, we go to deploy, let's\ndelete our old contract, we can\nactually see storage factory dot\nsoul again, we can deploy it,\nclick the drop down. And once\nagain, we can run those\nfunctions exactly the same.\nimporting our contracts like\nthis is much nicer than always\ncopy pasting the code. This way,\nif we want to change something\nin simple storage, we have one\ncanonical place to go ahead and\nchange it instead of having to\nchange it in multiple different\nplaces. Now additionally, you'll\nnotice the pragma, solidity if\nwe have our contracts in two\nseparate files, we actually can\nhave different versions of\nsolidity right now our storage\nfactory has carrot zero point\n8.0 Which means that anything\nwithin the 0.8 range of this\ncontract is okay. But for simple\nstorage that sole, it says\nanything in the zero point 8.8\nAnd above range is okay. So if\nwe were to try to change the\ncompiler version 8.5 And then go\nahead and compile, a remix is\ngoing to automatically bump it\nup to a better version that is\ncompatible with both of them, in\nthis case eight point 13. But if\nwe, for example, changed our\nsolidity version of storage\nfactory to zero point 7.0 And\nthen tried to compile them. We\nactually end up getting an issue\nparser error source file\nrequires a different compiler\nversion. This is because our\nstorage factory is saying hey,\nanything in 0.7 means is okay.\nHowever, our simple storage is\nsaying anything in the zero\npoint 8.8 And above is okay. So\nthose two versions are not\ncompatible. So what we need to\ndo is we need to make sure our\nversions of solidity are indeed\ncompatible. So let's change the\nversion back recompile. And now\nwe're looking good again. Now\nsince we have this create simple\nstorage contract, every single\ntime we call it right now, it'll\njust replace whatever is\ncurrently in our public simple\nstorage variable. Let's go ahead\nand update this so that we can\nactually keep a running list of\nall of our deployed simple\nstorage contracts. So instead of\nhaving this be a single\nvariable, we'll make this a\nsimple storage array or list\npublic simple storage array.\nNow, whenever we create a new\nsimple storage contract, instead\nof saving it like this, what\nwe're going to do is we're going\nto save it as a memory variable\nby saying simple storage, simple\nstorage equals new simple\nstorage. And we're going to add\nthis variable to our simple\nstorage array. So the same way\nwe did it before, we're gonna do\nsimple storage array dot push,\nsimple storage. So I should\nspell storage, right? Let's go\nahead and compile this looks\ngood. We'll deploy the storage\nfactory deploy. Like here, we\nnow have simple storage array\nView button, we'll do create\nsimple storage. Now we can view\nthe simple storage contract\nzero. Right now there's nothing\nat one. But if we create another\nsimple storage contract, we can\nsee the new simple storage\ncontract address at index one.\nAll right, so this is great,\nwe can now keep track of all of\nour simple storage deployments.\nBut how do we actually interact\nwith them, let's say we wanted\nto be able to call the store\nfunction on all of our simple\nstorage dot souls from our\nstorage factory, you can think\nof the storage factory as almost\nlike a manager of all of our\nsimple storages. That's all\nlet's create a new function that\ncan do exactly that. So we'll\ncreate function, and we'll call\nit S F store, which is going to\nstand for storage factory store.\nAnd it's going to take you in\n256, simple storage index, and a\nUNT 256, underscore simple\nstorage\nnumber. There'll be a public\nauction as well. Now in order\nfor you to interact with any\ncontract, you're always going to\nneed two things. And we're going\nto refer to this a lot. You're\nalways going to need the address\nof the contract, and the ABI of\nthe contract. The API stands for\nApplication binary interface,\nthe API will tell our code\nexactly how it can interact with\nthe contract, we'll go deeper\ninto API as we move on. But if\nyou go to your compile tab, you\nhit compile, and things are\nactually compiling. You can\nscroll down, and you can see\ncompilation details. And you can\nsee a whole bunch of information\non your different contracts. You\ncan see the name of your\ncontract, which for our simple\nstorage contract is simple\nstorage, you can see a whole\nbunch of metadata, like the\ncompiler, the language output\nsettings, all this other stuff.\nYou can see the exact bytecode\nand the opcodes, which we'll\ntalk about much later. But you\ncan also see this API, this API\ntells you all the different\ninputs and outputs and\neverything you could do with\nthis contract. For example, in\nour simple storage, if we look\nat the zero with index of our\nAPI, we have a function add\nperson. If we look at one, we\nsee our name to favorite number,\nwe looked at two we can see our\npeople three retrieve for store,\nit tells us all these different\nways we can actually interact\nwith our contract. And the\ndifferent functions that we can\ncall, we know where addresses\nare, because we're storing them\nin this array here, our simple\nstorage array, we can also get\nthe API because we're importing\nsimple storage dot soul when you\ncompile simple storage on soul.\nAs you saw on the compilation\ndetails, whenever you compile\nit, it comes prepackaged with\nthe ABI, we automatically get\nthe ABI just by importing it\nlike this. In the future, we'll\nsee other ways that we can\nactually get API's really\neasily. So to call the store\nfunction on one of our\ncontracts, we're first going to\nneed to get that contract\nobject. So what we can do is we\ncan say simple storage variable\nnamed simple storage. Variable\nName simple storage of type\nsimple storage is going to be\nequal to a simple storage\nobject. And instead of doing new\nsimple storage, like we did last\ntime, we're just going to put\nthe address of this simple\nstorage object in here, which\nagain, we can get from our\narray. And in this function,\nwe're passing the array index.\nSo we can say simple storage\ncontract at address simple\nstorage array. At index simple\nStorage index. This bracket\nnotation here is how you access\ndifferent elements of arrays. So\nif we want the zeroeth element\nof our list here, simple storage\nindex would be zero, and we pass\nit into this bit here, then\nthat'll give us the address of\nour simple storage contract,\nwhich we pass into simple\nstorage here. Since this is an\narray of simple storage\ncontracts, we can just access\nthat simple storage contract\nusing the index. So we would\nsay, simple store, Edge array at\nindex underscore simple storage\nindex. Now we're saving the\ncontract object at index simple\nstorage index to our simple\nstorage variable. Our array here\nis keeping track of the\naddresses for us. And it\nautomatically comes with the ABI\nis here. If this was just an\narray of addresses of the\ncontract objects, instead, we\nwould have to wrap the address\nin a simple storage object like\nthis. But we'll get to that much\nlater. So for now, all we have\nto do is this and we now have a\nsimple storage contract object.\nNow that we have it, we can call\nour store function on the simple\nstorage contract. So we'll call\nsimple storage dot store. And\nwe'll store the simple storage\nnumber to it. So this\nis perfect. And if we were to\ndeploy this right now, though,\nwe wouldn't be able to read the\nstore function. So let's create\nanother function that can read\nfrom the simple storage contract\nfrom the storage factory. So\nwe'll create a function called S\nF get, which stands for storage\nfactory get, it'll take a un 256\nunderscore simple storage index.\nThis will be a public view\nfunction, since we're just going\nto be reading from our simple\nstorage contract. And it's going\nto return a UNT 256. And we'll\nsay simple storage.\nSimple Storage. Equals\nwhen you use this same syntax\nfrom up here to get the contract\nsimple storage array at the\nsimple storage index. And then\nwe're going to do return,\nsimple storage.re retrieve\nto get that number that we just\nstored up here. And I should\nspell retrieved correctly, so we\nget no issues. Perfect. So now\nwe'll compile, we'll deploy JAVA\nscript, we're working on a fake\naccount, we're going to use our\nstorage factory, go ahead and\ndelete all the contracts we have\nso far. Let's go ahead and\ndeploy the drop down rate. Right\nnow if we do SF get at zero,\nwe're going to get nothing.\nSimple Storage address zero is\ngoing to be nothing. Let's\ncreate a simple storage\ncontract. Now it's simple\nstorage list, we get an address\nat zero. If we hit SF get right\nnow it didn't zero, we get zero.\nSo let's store a value on this\ncontract here. So the index of\nthat contract is zero. So we're\ngoing to pass zero as a symbol\nstorage index. And we're going\nto save the number seven. So\nwe'll go ahead and do SF store.\nAnd if we did this, right, this\nis going to store the value\nseven into this contract. So if\nwe do SF get of zero now, it\ndoes indeed return seven. If we\ndo SF get one we're going to get\nnothing's going to happen. And\nwe're actually going to get this\nrevert error here. So let's\ncreate another simple storage\ncontract. Now if we do SF get\none, we get zero, because we're\ngonna get that default value.\nLet's go ahead on the simple\nstorage contract and index one\nwill store the number 16 will\nhit SF store. Now we'll do SF\nget one and we get 16. Feel free\nto pause right now and play\naround with this so that you\nreally understand it. The quick\nrecap is our storage factory\ncontract allows us to create\nsimple storage contracts, it\nthen saves it to our simple\nstorage array, which we can then\ncall different functions on, we\ncan store values from our\nstorage factory contract. And\nthen we can read values from our\nstorage factory contract for any\nof the simple storage contracts\nthat we've created. This is\nincredibly powerful, we can\nadditionally make these two\nfunctions even easier. We can\ncall the Retrieve function\ndirectly on this when we call\nsimple storage array. And then\nwe have these brackets and add\nthe simple storage index. This\nreturns a simple storage object.\nSo what we could do is we could\nactually delete this whole part\nand just do dot retrieve\nright here, and then delete this\nline and say return and just\nhave it be just like this. If\nyou go ahead and save or hit\nCompile, you'll get the green\ncheckmark there. We're calling\nthe Retrieve function on\nwhatever this is. And whatever\nthis is, is a simple storage\nobject. So perfect. We can do\nthe same thing up here by\ndeleting this part and just\ndoing dot store, underscore\nsimple store edge number, we\nsave it. And this will work\nexactly the same. Awesome, we\nnow have a simple storage\ncontract that can store\nvariables in a storage factory\ncontract that can be almost like\na manager of these simple\nstorage contracts and deploy and\ninteract with them themselves.\nThis is\nfantastic. Now, let's say that\nwe really liked the simple\nstorage contract, but it doesn't\ndo everything that we want it to\ndo. Maybe we want it so that\nwhenever we actually store value\ndoesn't store the favorite\nnumber, it stores the favorite\nnumber plus five, for some\nreason you want a contract that\nthat everyone's favorite number\nis five numbers bigger than what\nthey think it is. But you really\nlike everything else that this\ncontract has to offer. Let's\ncreate this new contract. And\nwe'll call it extra storage.\nSo we'll say extra storage dot\nsoul.\nAnd we'll create this new\ncontract, we're going to set it\nup the exact same way we\nnormally would spdx license\nidentifier, gonna be MIT, we'll\ngive it pragma solidity. And\nwe'll just do zero\npoint 8.0 with the carrot. And\nwe'll say contract, extra\nstorage, like so\nif you save or compile, you'll\nget the green checkmark. So what\ncan we do? Well, the first thing\nwe could do is we could copy\npaste all this code back into\nhere, and then modify our extra\nstorage contract as we see fit.\nThis seems a little bit\nredundant. And a lot of work\nthough. So what's another way we\ncan actually get our extra\nstorage contract to be like our\nsimple storage contract? Well,\nthis is where we can do\nsomething called inheritance, we\ncan have our extra storage\ncontract, do what's called a\nchild contract of our simple\nstorage contract. And we can\nhave extra storage, inherit all\nthe functionality of simple\nstorage with two lines of code.\nSo first, in order for our extra\nstorage contract to know about\nsimple storage, we once again\nneed to import it. So we'll say\nimport dot slash, simple storage\ndot soul. And we'll say our\ncontract extra storage is simple\nstorage. And we save or compile.\nNow our extra storage contract\nis going to be the exact same as\nsimple storage. And it's going\nto do what's called inherit all\nthe functionality of simple\nstorage. And we can actually\neven see that, let's go ahead\nand make sure this is compiled.\nAnd we'll go and deploy this.\nAnd now in our deployed\ncontract, we can see we have\nextra storage deployed with all\nthe functions that simple\nstorage has, if you want a\ncontract to inherit all the\nfunctionality of another\ncontract, you can just import it\nand say your contract is that\nother contract. Now, we can add\nadditional functions to our\nextra storage contract. That\nwill include all the\nfunctionality of simple storage.\nNow, let's say that we inherit\nsimple storage to extra storage.\nHowever, one of the functions in\nsimple storage we don't really\nactually like. So if we go back\nto our simple storage contract,\nour store function, all it does\nis take a favorite number, and\nthen assigns the global favorite\nnumber to whatever new number\nthat we give it in our extra\nstorage. We want the store\nfunction to do something\ndifferent. We want it to add\nfive, to any number that we give\nit. How can we achieve this?\nWell, we can do something called\noverriding the functions. And\nthere are two keywords that\nwe're going to use. Those are\nvirtual, and override. Right\nnow, if I were to try to\nimplement a store function for\nextra storage, let's see what\nhappens. We'll say function\nstore, you went to the six\nfavorite number. There'll be a\npublic function. And let's say\ninstead of just storing favorite\nnumber, we'll say favorite\nnumber equals favorite number,\nplus five. If we try to compile\nthis right now, we'll actually\nrun into two different errors.\nFirst one is going to say\noverriding function is missing,\noverride specifier. If the\nparent contract, which in our\ncase is simple storage has that\nsame function, we need to tell\nsolidity that we're going to\noverride this store function and\ninstead we're going to use this\nstore function. But\nadditionally, we get this other\nerror saying trying to override\nnon virtual function. Did you\nforget to add virtual in order\nfor a function to be overridable\nyou need to add the virtual\nkeyword to the store function.\nNow it can be overridable.\nHowever, if we save and compile,\nwe still have this issue\noverriding function is missing\noverride specifier. And then all\nwe need to do is add override to\nrestore function. Now if we save\neverything compiles correctly,\nlet's go ahead and deploy this.\nLet's delete our old contracts.\nJavaScript VM right account.\nGreat we're going to choose\nextra store Reg, let's go ahead\nand deploy. And here's our extra\nstorage contract. Right now if\nwe retrieve, we get zero.\nPreviously, our store function\nwould store the exact number.\nHowever, if I were to store\nfive, it'll store five, plus\nfive. So we should have 10\nstored here. Let's go ahead call\nstore looks like that one\nthrough, and we'll hit retrieved\nnow. And we do indeed see 10 is\nin here. So this is how we do\ninheritance, and we override\nfunctions. And that's it. For\nthis\nsection, you've just learned a\nton of incredibly powerful\nsolidity for having multiple\nfiles. Let's do a quick overview\nof what we learned, we learned\nthat we can actually deploy\ncontracts from other contracts\nusing the new keyword, we\nlearned that we can actually\nimport other contracts into our\ncontracts and into our code\nusing the Import keyword. And\nthe import keyword is the same\nas copying pasting that file to\nthe location of the import line,\nwe learned that we can interact\nwith other contracts. As long as\nwe have the ABI and address. We\ndidn't learn too much about the\nABI. But we'll learn more later,\nwe learned that if we want to\ncreate a child contract and\ninherit the functionality of\nsome other contract, we can do\nsomething called inheritance.\nAnd the way to inherit\nfunctionality is using the is\nkeyword and saying our contract\nis some other contract. However,\nif we want to change from the\nfunctionality of the parent\ncontract, we have to override\nthat function. And additionally,\nwe have to set the function we\nwant to override to virtual now\nwe can have our own store\nfunction, do whatever we want it\nto do. That is the end of this\nlesson. Once again, give\nyourself a huge round of\napplause a pat on the back for\nmaking it this far. And for\nfinishing this section. You're\ngetting more and more advanced\nfacility so quickly, so be sure\nto celebrate the little wins by\ngetting some ice cream, maybe\ngoing for a walk or tweeting\nabout or posting on Reddit.\nCongratulations, you have\ncompleted this section.\nAll right, everybody. Welcome\nback. We are now headed into\nLesson four remix Funmi. And of\ncourse, all the code can be\nfound on the GitHub repository\nassociated with this course.\nWe're going to be working with\ntwo contracts here, one of them\nis fundament outsole. And then\none of them is price converted\noutsole Funmi dot Sol is going\nto be a contract that allows\npeople to actually fund a\ncollective good. So people can\nsend Aetherium send Aetherium,\nor polygon or Avalanche or\nPhantom, or whatever blockchain\nnative token into this contract,\nand some owner of the contract\ncan then withdraw those funds\nand do whatever they want. After\ndeploying this to a test net, we\ncan see the list of functions\nthis contract has, this will\nhave two red buttons, which are\nused to notate to payable\nfunctions in fund in our fund\nfunction. And in our withdrawal\nfunction, withdraw allows users\nto withdraw the funding and fund\nallows users to send money to\nthe contract, what we can do is\nwe can send some value along\nwith our transaction. When we\ncall this fund function, then\nwhat we can do is we can\nactually fund this contract with\na certain amount of eath, or way\nby pasting some value into the\nway value section. And then\nhitting fund, we will now have\nsent money into our deployed\ncontract. And we can see a list\nof the funders and a mapping of\nthose addresses and how much\nthey've actually sent into the\ncontract, we can then withdraw\nthe funds out of the contract.\nWith a special exception with\nonly the person who deployed\nthis contract can actually\nwithdraw the funds back out.\nOnce the funds are withdrawn,\nthe amount of all the funds is\nreset back to zero. Are you\nexcited? Well, you should be.\nAnd if you've finished the\nsection, you've completed most\nof the basics of solidity, and\nyou'll be ready to start making\neven more powerful smart\ncontracts, we'll be using\nchanneling price feeds to\nactually set the value of how\nmuch these people should be able\nto fund in USD as opposed to\njust in terms of ether, we're\ngonna go over a lot of advanced\nsections here. And I'll let you\nknow what parts might be a\nlittle bit harder to digest. So\nyou don't have to spend your\nentire time trying to figure out\nexactly what's going on. Be sure\nto use the GitHub repo to your\nadvantage here and the\ndiscussions tab to stay\nconnected with other people\ntaking this lesson. Alright,\nlet's jump in. So at this point,\nin remix, you'll have a couple\nof contracts here, simple\nstorage, storage, factory extra\nstorage, maybe you refreshed\nremix, and these have gone away.\nAnd in the case, make sure that\nyou just don't have any of those\ntabs open, we're going to create\na new contract called funding.\nSo let's go ahead and start\ncreating our funding contract.\nAgain, we want it to be able to\nget funds from users and\nwithdraw funds and set a minimum\nfunding value in USD. This is\nwhat we're going to get our\ncontract to do. So first, let's\nset it up spdx license I tend to\nfire MIT do pragma solidity do\ncaret zero point 8.8. And we'll\ndo contract bunbee. Awesome. And\nwe'll compile, see if things\nlook good. And they do. Great.\nLet's keep going. So before we\nactually embark on creating all\nof our functions here, let's\njust add the different functions\nthat we're going to implement.\nSo we want a function fund for\npeople to actually send money\nto, we want a function withdraw,\nor the owner of this contract to\nactually withdraw the funds that\ndifferent funders actually give\nus. And that's pretty much it.\nThese are the two main functions\nthat we want this contract to\ndo, we will be implementing more\nfunctions to help facilitate\nthese two functions. But let's\nget started by looking at fund.\nlet's comment out withdrawal for\nnow. And let's just start with\nfun. So we want anybody to be\nable to call this fun function.\nSo we'll make this public. So as\nwe mentioned, we want to be able\nto set a minimum font amount in\nUSD. So there's a lot of things\nto think about here. First thing\nwe probably want to think about\nis how do we send eath to this\ncontract, whenever we create a\ntransaction on the on any of\nthese EVM blockchains, there's\nthis value field that we can set\nvalue represents how much\nAetherium we're going to be\nsending with our transactions.\nFor example, when we transferred\nAetherium. between our different\naccounts, we were actually\npopulating this value parameter\nwith different amounts of\nAetherium. In fact, every single\ntransaction that we send, will\nhave these fields, it'll have a\nnonce or the transaction count\nthe account the gas price, the\ngas limit that we've seen on\nether scan a to aka the address\nthat the transaction is sent to\na value which is going to be\nthis amount that we're talking\nabout. They'll also have data\nwhich is going to be what we\nsend if we make a function call\nor deploy contract, and then\nwe'll have this v r s\ncomponents. We're not really\ngoing to go over these v r and s\nbecause this is that\ncryptographic magic that's\nhappening when a transaction is\nsigned, but just know that\nthat's it Now, for sending\nvalue, we can populate some of\nthese fields, the gas limit, for\nexample, was populated to 21,000\ndata is going to be empty. And\nthen that two is going to be the\naddress of the transaction we\nwant to send to, for a function\ncall, we can also still populate\nthe way that we want to send. So\nwe can call a function and send\na value at the same time in\nremix has a little drop down\nhere for way way Feeny and\nether, we're gonna ignore Feeny\nfor now. But of course, we have\nour way, great and ether. Again,\nwe're one ether is worth this\nmuch way. And this much way, the\nfirst thing we need to do in\norder to make a function payable\nwith Aetherium, or any other\nnative blockchain currency is we\nneed to mark the function as\npayable. It's this payable\nkeyword that makes our font\nfunction red, as opposed to\nhaving it normal orange, just\nlike how our wallet can hold\nfunds, contract addresses can\nhold funds as well, since every\ntime you deploy a contract, they\nget a contract address, it's\nnearly the exact same as a\nwallet address. So both wallets\nand contracts can hold native\nblockchain token like Aetherium.\nAnd you'll see that when we\ndeploy this later on in the\nlesson, that actually will gain\na balance of Aetherium. Now that\nwe have it payable, we can\naccess this value attribute by\nusing one of the global keywords\nin solidity with message dot\nvalue to get how much value\nsomebody is sending. You use\nmessage dot value in your\nfunction. Now let's say we want\nto set our message add value to\na certain value of Aetherium.\nLet's say we wanted it to be\nlet's say we wanted people to\nsend at least one whole ether\nwith all the transactions. Or\nput another way, if they sent\nAetherium, they would need to\nsend at least one Aetherium. How\nwould we implement that? Well,\nwe could do something called\nrequire, we would say we want to\nrequire the message dot value is\ngreater than one e 18. There's a\ncouple of things to unpack here.\nOne, e 18 is equal to one times\n10 raised to the 18th, which is\nalso equal to\n112345 678-910-1234 5678. This\nis the value in way of one\nAetherium this much way is one\neath. So if we wanted the\nmessage dot value to be at least\none eath, or one polygon or\nwhatever ranch etc, we would set\nit like this require message on\nvalue is greater than one. This\nrequire keyword is a checker it\nsays hey, is message dot value\ngreater than one. If not, it's\ngoing to revert, it's going to\ndo what's called revert with an\nerror message. And we can say\ndidn't send enough, we're gonna\ntry deploying this on a\nJavaScript VM, deploy Funmi,\nwe'll hit Deploy, look at Funmi\nwe see this fun button is now\nred. If we call Funmi right now,\nand we look at the console, you\ncan see we actually get an error\nhere, call it again, we get an\nerror, we get an error here, we\nknow that the air is going to be\nthis didn't send enough. So what\nwe need to do is we need to send\nat least one ether with this fun\ntransaction, in order for this\nrequire statement to be\nfulfilled. So back up in the\nvalue section, we can change\nthis value to one. So that's\ngonna be one ether, or this much\nway or this much way. Now we can\nhit fund oh actually needs to be\ngreater than one.\nSo let's send to for example.\nNow we'll scroll down. And now\nwe'll hit fund. And we see that\nthat actually passes the require\nstatement says if our first\nsection is false, then go ahead\nand revert with this error. What\nis reverting? Revert can be a\nlittle bit confusing, so I\nwouldn't let this section hold\nyou back. If it's a little bit\nconfusing. Revert is when it\nundos any actions that happened\nbefore and send the remaining\ngas back. So what does that\nactually look like? Well, let's\nsay for example, we had a un\n256. Public number. And in our\nfund function, we said number\nequals five. If we were to go\nahead and deploy this, let's\ndelete our old contract.\ndeployed this new contract or\nnumber right now is zero. But if\nwe were to call our fund\nfunction number gets set to\nfive. However, if we call a fund\nand this require isn't met, this\ntransaction would revert an\nundue setting number to five. So\nlet's go ahead and look at our\nlogs here. We'll keep value zero\nso that our fun function\nreverts. We'll call fund will\nsee that this transaction failed\nbecause this require end up\nreverting and number is still\nzero. So then the question\nbecomes, did we actually spend\ngas Yes, we spent gas to change\nnumber to five and then any\nremaining gas we would get\nreturned by this require for\nexample, if we had a ton of\ncomputation here, it On a\ncomputation here, we would have\nneed to send a ton of gas with\nour fun function. But all the\nextra gas that we send, after\nthis require gets returned the\noriginal user after it gets\nreverted right here, if reverts\nare a little bit confusing for\nyou here, don't worry too much\nabout it, we'll go over it in\nfuture modules. All you need to\nknow right now is that when you\ndo a require statement, if this\nfirst section isn't met, the\ntransaction will be canceled,\nand any prior work will be\nundone, and it'll send an error\nmessage. Cool. Let's delete this\nnumber for now. And we'll delete\nit from the global scope.\nThere's actually another way to\ndo these reverts, which we'll go\nover\nlater in this contract. So what\nwe've done so far is great.\nHowever, we're checking message\ndot value in terms of Aetherium,\nwe're looking for one whole\nAetherium instead of $50, we\nwant to check that message add\nvalue is greater than some\nnumber like $50. Let's go ahead\nand first set the minimum USD\nvalue we want people to send\nalong with the fund function, we\ncan do that at the top of our\ncontract, we can say you went to\n56 public minimum USD equals 50.\nNow we have some place to check\nfor minimum USD, we're going to\nupdate this minimum USD to make\nit more gas efficient and a\nlittle bit. Now that we've set\nour minimum USD, we want to be\nable to require the message that\nvalue is greater than or let's\nsay greater than or equal to the\nminimum USD. But minimum USD is\nin terms of USD and value is in\nterms of Aetherium. So how do we\nconvert Aetherium to USD, this\nis where Oracle's and chainlink\nare going to come into play. The\nUSD value of Aetherium is\nsomething that we've assigned\noutside of the blockchain to\nAetherium, or any other layer\none currency or any other native\nsmart contract platform\ncurrency. So in order to get\nthis value that is outside the\nblockchain, we have to use a\ndecentralized Oracle network to\nget the price of one ether in\nterms of USD. So before we can\ncontinue on here, let's learn a\nlittle bit more about the\narchitecture of these\ndecentralized Oracle networks\nand the different solutions that\nthey have. So that we can create\nthis Funmi contract in the most\nadvanced way possible, as we've\ntalked about blockchains are\ndeterministic systems, which\nmeans that they themselves can't\nactually interact with real\nworld data and events. They\ndon't know what the value of an\nAetherium is, they don't know\nwhat random numbers are. They\ndon't know if it's sunny\noutside, they don't know the\ntemperature, they don't know\nwho's president, they don't know\nany of this information. These\nblockchains also can't do any\nexternal computation. Maybe you\nhave some amazing artificial\nintelligence model that you want\nto integrate with a smart\ncontract. smart contracts by\nthemselves can't do anything\nwith that. As we've mentioned,\nthis is because blockchains are\ndeterministic by design. This is\nso that all the nodes can reach\nconsensus. If you start adding\nvariable data or random data, or\nvalues that returned from an API\ncall, different nodes could get\ndifferent results, and they\nwould never be able to reach a\nconsensus. This is known as the\nsmart contract connectivity\nproblem, or the Oracle problem.\nAnd this is bad news, because we\nwant our smart contracts to be\nable to replace traditional\nagreements. And traditional\nagreements need data and they\nneed to interact with the real\nworld. So this is where\nchainlink and blockchain,\nOracle's come into place. A\nblockchain Oracle is going to be\nany device that interacts with\nthe often world to provide\nexternal data or computation to\nsmart contracts. However, the\nwhole story doesn't even in\nthere. If we use a centralized\nOracle, we are reintroducing a\npoint of failure. We've done all\nthis work to make our logic\nlayer decentralized. But if we\nget our data through a\ncentralized node or through a\ncentralized API, we decide we\nwant to make the API call\nourselves. We are reintroducing\nthese trust assumptions that\nwe've worked so hard to get rid\nof, we're essentially ruining\nthe entire purpose of building a\nsmart contract. So we don't want\nto get our data or do external\ncomputation through centralized\nnodes. Those are bad news. chain\nlink is the solution here. chain\nlink is a decentralized Oracle\nnetwork for bringing data and\nexternal computation into our\nsmart contracts. As we mentioned\nbefore, this gives rise to these\nhybrid smart contracts, which\ncombined on chain and off chain\nto make incredibly feature rich,\npowerful applications. chain\nlink is a modular, decentralized\nOracle network that can be\ncustomized to deliver any data\nor do any external computation\nthat you like. So for example, a\nlot of people say, Oh, I can\njust make an HTTPS call to some\nAPI, and we'll be good to go.\nThe blockchain nodes can't make\nthese HTTPS calls, because they\nwouldn't be able to reach\nconsensus. If they called the\nnode at different times, or they\ndid something else. All the\nconsensus would be broken. So\ninstead, we need a decentralized\nnetwork of chain link Oracle's\nto do this, and then in the\ntransaction, this network of\nnodes will work Turn the data to\nour smart contracts for us. Now\nchainlink networks can be\ncompletely customized to bring\nany data or any external\ncomputation that you want.\nHowever, doing the customization\ncan be a little bit extra work,\nthere are a ton of chainlink\nfeatures that come out of the\nbox completely decentralized,\nready to plug and play into your\nsmart contract applications.\nWhat are those features, the\nfirst one is going to be\nchanneling data feeds, and\nthat's the one we're actually\ngoing to be using for\napplication here. Channeling\ndata feeds currently at the time\nof recording are powering over\n$50 billion. In the defy world,\nthe way they work is a network\nof chain link nodes gets data\nfrom different exchanges and\ndata providers and brings that\ndata through a network of\ndecentralized chain like notes,\nthe chain link nodes use a\nmedian to figure out what the\nactual price of the asset is,\nand then deliver that in a\nsingle transaction to what's\ncalled a reference contract, a\nprice feed contract or a data\ncontract on chain that other\nsmart contracts can use. And\nthen those smart contracts use\nthat pricing information to\npower their defy application, we\ncan see an example. We can see\nan example at data dot chain dot\nlink. And you can change\nnetworks, you can change price\nfeeds, you can change a whole\nbunch of different information\nto see some of those popular\nprice feeds. Let's look at eath\nUSD for example. On eath USD, we\ncan see this whole network of\nindependent chain link node\noperators that are each getting\ndifferent answers for the price\nof eth USD, they're getting\naggregated by the network and\nthen delivered on chain, we can\nsee how often they're updated.\nThese ones are updated 4.5\ndeviation threshold or a few\nhour heartbeat, whichever one\nhits. First, we can see when the\nlast update was we can see the\nnumber of Oracle responses etc,\nwe can see the contract address\ndirectly on chain, we can even\nlook at the contract on ether\nscan, we can see some of the\nhistory, we can see all the\nresponses of the different\nOracle's. And then at the\nbottom, we can see the different\nusers and sponsors, keeping this\nnetwork up. Similar to\ntransaction gas, whenever a node\noperator delivers data to a\nsmart contract, the chain link\nnode operators are paid a little\nbit of Oracle gas in the chain\nlink token. Right now these\nusers of the protocol are\nsponsoring keeping these feeds\nup and are paying the Oracle gas\nassociated with delivering this\ndata on chain. Here's an\nillustration of what the current\nmodel of these data feeds look\nlike a network of these chain\nlink nodes, each reaches out and\ngets the information about an\nasset and then signs the data\nwith their own private key in a\nsingle transaction, then, one\nnode will deliver all the data\nwith all the different\nsignatures to a reference\ncontract. If that node doesn't\ndeliver the data, another node\nwill send it instead. Reputation\nis incredibly important when\nyour chain link node operator if\nyou miss data updates, if you\nforget to send transactions,\nyou'll probably be quickly\nkicked off these networks and\nhave no chance of making any\nmore money in the future. These\ndata feeds are used by some of\nthe largest protocols in the\nspace, such as synthetics, sushi\nswap compound, and Avi, with\nseveral billion dollars each, we\ncan take a look at an example\nover at Doc's dot chain dot link\nwork with EVM contracts, we're\ngoing to hit EVM chains, scroll\ndown to data feeds. We'll scroll\ndown to the solidity section.\nAnd we can see an example of an\nentire contract that uses and\nreads from one of these trending\nprice feeds. We can even open\nthis up and remix and work with\nit and remix. It looks like this\nexample is reading from a price\nfeed on COVID. The reason we're\nactually going to use a test net\nto see this work is that there's\na set of chain link nodes\nmonitoring the test network.\nJust to show you exactly how\nthis works out. Once we get\ndeeper into the course, we'll\nshow you how to actually run\ntests and work with chain link\nnodes without actually being on\na test net, which will make your\ndevelopment much faster. But I\nhighly recommend walking through\nthis section along with me so\nthat you can see firsthand how\nthis actually works. So let's go\nahead and faucets dot chain dot\nlink slash COVID. We're going to\nswitch to the COVID network,\nwe're going to get some COVID\neath. But remember, look at the\nnetwork flag and use whatever\nnetwork is in the documentation.\nSo to get some COVID, we're\ngoing to come to the faucet,\nwe're going to turn off test\nlink, we'll just stay with eath\nI'm not a robot,\nand then send request. Once our\nCOVID Aetherium has reached our\nwallet, we can go ahead and\nclose we can take a look in our\nwallet and see that we do indeed\nhave 0.1 eath on Kelvin. Now\nlet's go back to our remix,\nwe'll compile this contract, go\nand deploy this on injected web\nthree. And again, the reason\nwe're going to use injected web\nthree instead of JavaScript VM\nis that there's no network of\nchain link nodes watching our\nlittle fake JavaScript VM. There\nare a network of chain link\nnodes watching the test net. So\nwe'll scroll down. We'll switch\ncontract to the price consumer V\nthree, and we'll hit Deploy and\na mass will pop up and after a\nbrief delay, we can see our\nprice feed consumer down here\nand we can hit Get the latest\nprice which shows us the latest\nprice of Aetherium in terms of\nUSD you may be wondering why the\nnumber looks so weird. That\nseems like a really large number\nfor the price of Aetherium in\nterms of USD, and this is\nbecause decimals don't actually\nwork so well in solidity, and\nwe'll get to that in a little\nbit. There's a decimals flag\nassociated with this price feed\naddress, that tells us how many\ndecimals to include with this\nprice. It's also in the\ndocumentation. However, I know\nthat this one has eight\ndecimals. So this is saying the\nvalue of Aetherium right now is\n$3,262. It may of course be\ndifferent when you go ahead and\ntry this. Now there's a number\nof things that happened in this\ncontract that I'll explain in\nour Funmi example. But if you\nwant to take a look now and see\nif you can figure out what's\ngoing on, I recommend you do so.\nPrice feeds are one of the most\npowerful out of the box\ndecentralized features, you can\nuse your smart contract to level\nthem up, especially for\ndecentralized finance. If you're\nlooking for different addresses\nof different price feeds, you\ncan check the contract addresses\nsection of the documentation,\nchoose the network that you\nwant, and then scroll down and\nlook some of the different\naddresses of the different price\nfeeds. For example, this address\nwill give you the price of one\ninch token in terms of\nAetherium. This address will\ngive you the price of the Apple\nstock in terms of USD, and so on\nand so forth. The next\ndecentralized application right\nout of the box is going to be\nchanneling VRF or channeling\nverifiable random dysfunction.\nOnce we do our lottery example a\nlittle bit later, we'll talk\nabout how randomness can be\nmanipulated in blockchain.\nblockchains are deterministic\nsystems, which by definition\nmeans that they can't have\nrandomness. If you can determine\nwhat a random number is, it's\nnot really random anymore, is\nit? So we need to wait to get a\nprovably random number by\nlooking outside of the\nblockchain and Oracle's are\nperfectly positioned to do\nexactly that. chainlink\nverifiable randomness function\nis a way to get provably a\nrandom number into our smart\ncontract to guarantee fairness\nand guarantee randomness of\napplications. Many protocols\nlike pool together x infinity,\nether cards, avocado cheese and\nmore use channeling VRF for\nlotteries, randomizing NF T's\nfor gaming and for more, we're\ngoing to do an example of\nchanneling VRF in a later\nsection. Once we get to the\nlottery section, if you want to\nsee if you can play with the\nrandomness yourself right now, I\nrecommend you go into Doc's\nchain link EVM chains, and\nscroll down to get a random\nnumber. And this will teach you\nhow to get a provably random\nnumber into your applications.\nThe next decentralized out of\nthe box feature of chain link is\nchain like keepers, which is\ndecentralized event driven\nexecution. As we've seen, in\norder to kick off some type of\ntransaction, somebody needs to\nspend the gas and somebody needs\nto sit down and hit the go\nbutton or hit the transact\nbutton or hit the sun. But this\nis obviously a centralized\nvector. If you have a\ndecentralized application that\nneeds to run at specific times,\nor after specific events are\ntriggered. Channeling keepers\nare the solution to this\nchanneling keepers are chain\nlink nodes that listen to a\nregistration contract for\ndifferent events that you\nspecify to fire. Maybe you say\nevery 10 minutes, you want to do\nsomething or once a week do\nsomething or if the price of\nsome acid hits some number, or\nmaybe a liquidity pool is at a\ncertain level, whatever event\nthat you want to code, you\nabsolutely can the chain link\nnodes constantly listen for\nthese triggers to happen and\ncheck the different contracts\nfor these triggers. Once a\ntrigger returns true, the chain\nlink nodes will then perform\nwhatever action that you tell\nthe chain link nodes to do,\nwe're also not going to go over\nthe chain link keepers examples\nright now, because we're going\nto get to them in a later\nmodule. However, if you want to\ntry them out, go to Doc's\ntouching that link slash\nAetherium. Going and go to\nmaking compatible contracts and\nfeel free to read the\ndocumentation. Try it out\nyourself. The last out of the\nbox feature of chain link is the\nmost customizable, but also the\nhardest to get correct end to\nend reliability is the ultimate\npromise of our smart contracts.\nAnd we want and need them to be\nable to do anything, we want to\nbe able to take any input and\nget any output making HTTP GET\nHTTP POST request is an easy way\nto customize our chain link\nnodes to be able to do anything.\nRemember how we talked about\nmaking API calls that blockchain\nnodes themselves can do that?\nWell, chain link nodes can do\nthat chain link nodes can make\ndirect requests to any API that\nyou specify. In order to do\nthis, you both have to choose\nthe chain link node and the URL\nslash data to send the request\nto this is a little bit trickier\nthan chain link VRF keepers or\nprice feeds because you then\nhave to be responsible for\ncreating the chain link network\nthat gets data from many\ndifferent chain link nodes and\nmany different data providers.\nBut let's look at an example in\nremix anyways. For this section,\nfeel free to just watch it since\nwe are working with a test net\nhere. And test nets, as we've\nseen, can take a little bit of\ntime. As long as you're familiar\nwith what this process looks\nlike. That's good enough. You\ndon't actually have to try it if\nyou don't want to. So we'll open\nup and remix will read through.\nIt looks like this example is on\nthe COVID network. So we'll go\nahead and compile API consumer.\nWe're gonna go ahead and deploy\non the injected web three, we're\ngoing to make sure that we're\nback on the COVID test network.\nWe're going to scroll down. And\nwe're going to change the\ncontract to the API consumer.\nAnd we're going to go ahead and\nhit Deploy, we're going to\ndeploy this contract to the\nCOVID. Test net. And now we can\ncall this function called\nRequest volume data to actually\nmake an API call. Now, like I\nmentioned before, whenever we\nrequest data from a chain link\nnode, we have to pay a little\nbit of Oracle gas, or link\ntoken, in order to pay some link\ntoken, we're going to need to\nhave link token in our API\nconsumer contract. This is\nwhat's known as the basic\nrequest and receive model to get\nlink token, we go back to our\nfaucet, and this time, we'll\nselect 10 test link for our\ncontract. Let's go ahead and\nverify that we're human. And\nwe'll hit Send Request. This\ntime, instead of sending us\nAetherium. They're sending us 10\ntest link, which is what's known\nas an ERC 20 token. Or more\naccurately, in ERC 677 We'll get\nto understanding that a little\nbit later, we can see the asset\nin our Metamask. By importing\nthe token, in order to get the\ntoken, we're going to come back\nto the documentation. And we're\ngoing to look up link token\ncontracts like that, we're going\nto go to the network that we\njust got the tokens on, which\nfor us was COVID. We're going to\ncopy this address, we're gonna\ngo to Metamask, hit import\ntokens, paste that address, and\nhit add custom token, and then\nimport tokens. And now we can\nsee in our account one, we both\nhave Aetherium and 10. Link, now\nthat we have our link or Oracle\ngas, we're going to send it to\nour API consumer, we're going to\ncopy the address of the API\nconsumer, open up our meta mask,\nwe're gonna hit send, paste the\naddress of our contract, switch\nthe asset to link. For now we'll\njust send 0.2 link. We'll hit\nnext, next. And we'll hit\nConfirm. And we'll wait for this\ntransaction to go through. I\nchose 0.2 Link, because in this\ncontract, there's a fee\ncharacter, which tells us how\nmuch making an API call for this\nis going to cost. This one is\nactually 0.1 link, I send 0.2.\nJust in case, we want to make\nthat API call twice. Everything\nthat's going on in this function\nwill explain in a little bit\nlater section. But for now, I\njust want to show you what it\nlooks like to do is, once we\nsend the link to our contract,\nwe can first check to see what\nthe volume is volume is zero, we\nwant to get the volume of the\nlast 24 hours of Aetherium\nasset, we're going to be calling\nthis API which has a ton of raw\ndata, including one in specific\ncalled volume over the last 24\nhours, which can be this number\nright here. Say we wanted to get\nthis into our contract from this\nAPI, we're going to make an HTTP\nGET call to this API. And what's\ngoing to happen is we're going\nto make the request in one\ntransaction. And in a second\ntransaction, the chain link node\nis gonna return the value and\nstore it in this volume variable\nin the global scope. So let's go\nahead and hit request volume\ndata Metamask gonna pop up,\nwe're going to go ahead and hit\nConfirm. And you'll notice right\naway volume doesn't update. This\nis again, because we actually\nneed to wait two transactions,\nwe're sending a transaction for\nthe request. And then in a\nsecond transaction, the chain\nlink node is actually going to\nrespond. And after a slight\ndelay, the chain link node has\nindeed responded with the result\nof making that API call back to\nour contract. We'll go over this\nprocess a little bit more in\ndepth in later sections. The\nreason that I wanted to show you\nspecifically the API calls, is\nbecause we're going to show you\na real life example of how to\nuse chain link VRF and chain the\nkeepers in a later lesson.\nNow I know we've already gone\nover a ton. So let's do a quick\nreview. In order to send\nAetherium or whatever native\nblockchain token with a function\nneed to mark it as payable. If\nyou need something in your\ncontract to happen, and you want\nthe whole transaction to fail.\nIf that doesn't happen, you can\nuse a require statement. To get\nthe Aetherium or native\nblockchain token value of a\ntransaction, you can use the\nglobal keyword message dot\nvalue. chain link is a\ntechnology for getting external\ndata and doing external\ncomputation in a decentralized\ncontext for our smart contracts.\nChanneling data feeds or price\nfeeds are ways to read pricing\ninformation or other pieces of\ndata from the real world that's\nalready aggregated and\ndecentralized for us, channeling\nVRF is a way to get provably\nrandom numbers from the real\nworld into our smart contracts.\nChanneling keepers are a way to\ndo decentralized event driven\ncomputation. We can set some\ntrigger say if this trigger hits\ndo something and we get to\ndefine what the trigger is and\nwhat to do something is\nchanneling any API's is the\nultimate customization of\nchanneling nodes and allows us\nto connect to anything on the\nplanet. To make this one\nproduction ready. We have to do\nthe most work because it doesn't\ncome already with a\ndecentralized Oracle network,\nlike chaining the keepers and\nprice feeds. We'll learn more\nabout these channeling services\nas we continue in this course.\nNow in order for us to figure\nout if our message dot value is\nactually greater than the\nminimum USD that we set, we\nactually have to convert our\nmessage dot value from its layer\none slash Aetherium to the USD\nequivalent. So how are we\nactually going to do that? Well,\nfirst, we're gonna need to get\nthe price of Aetherium, or\nPhantom, or Avalanche or\nwhatever layer, one blockchain\nthat we're working with. So\nlet's create a function to get\nthat price to get that\nconversion rate. So we'll do\nfunction, get price, and this is\ngoing to be the function that we\nuse to get the price of the room\nin terms of USD, so we can\nconvert our message dot value to\nUSD. And then we're also going\nto do a function called Get\nconversion rate. These are both\ngoing to be public functions, so\nthat we can go ahead and call\nthem and test them and do\nwhatever we want with them. So\nin order to get the price, we're\ngoing to have to use one of\nthese chain link data feeds to\nget the pricing information. And\nwe can look right here at this\ncontract to see what using one\nof these channeling price feeds\nlooks like. What we're actually\ndoing when we're interacting\nwith this channeling price feed\nis we're actually reading from\none of these contracts, there's\na contract out there called the\naggregator contract that has a\nfunction called latest round\ndata, which returns a whole\nbunch of data. But namely, this\nint price. And this in price is\nwhat we are interested in. Let's\nlook at our get price function\nand figure out how do we\nactually call this since this is\nan instance of us interacting\nwith a contract outside of our\nproject, we're going to need two\nthings. What are those two\nthings,\nwe're going to need the ABI of\nthe contract, and also the\naddress of the contract. So the\naddress of the contract is going\nto be easy, we can get the\naddress of the contract from the\ncontract address this section of\nthe chain link data feeds. Let's\nscroll on down to bank B. And we\ncan find the eath USD address on\nRigby and we'll create this\ncontract so that it works on\nRinkeby. So we're going to grab\nthis address, we're going to\ncopy it. And we're going to move\nback to our to our code here.\nAnd we're going to paste the\naddress here. So great, we have\nthe address. Now we have the\naddress of the other contract\nthat we don't want to interact.\nNow, how do we get the ABI?\nWell, what we did before was\nsimple storage was we imported\nthe entire contract into our\ncode here. That's something that\nwe could do. But that's actually\na lot of code. So what's\nsomething that we could do\ninstead, remember, if we're\nlooking at remix, and we look at\none of the contracts that we\ncompiled before, the ABI is\nreally just kind of this list of\nthe different functions and\ninteractions you can have with a\ncontract. The ABI itself doesn't\nactually need to include any of\nthe logic, it just needs to\ninclude, hey, here are the\ndifferent functions that you can\ncall, for example, in this\ncontract, we can call fund, we\nhave get conversion rate, we\nhave get price, they're not\nimplemented yet, but they will\nbe eventually now there\ntechnically is another way to\ninteract with contracts without\nthe API. But for now, we're just\ngoing to ignore that. So how can\nwe get the API, there's a\nconcept in solidity called an\ninterface. And let's look at an\nexample of an interface. If we\ngo to github.com/smart, contract\nkits, chainlink, we can see a\nnumber of different contracts in\nthe chainlink repository, we can\ngo to contracts, src, V 0.8,\ninterfaces, and we'll go to\naggregator v3 interface, dot\nsoul. And if we look at the\nsolidity in here, we can see a\nwhole bunch of function\ndeclarations, but none of the\nlogic is actually implemented in\nthis. This is what's known as an\ninterface. If we compile this,\nwe'll actually get the ABI of a\ncontract, because it defines all\nthe different ways we can\ninteract with the contract. It\ndoesn't actually say, what these\nfunctions do, which is fine,\nthough, because we don't need to\nknow what the functions actually\ndo, those are going to be stored\nin the contract. So what we can\ndo is we can grab this interface\nfrom the code and paste it into\nour remix. Now hold on, if\nyou're following along, you\ndon't have to copy paste this\nwith me, because I'm going to\nshow you an easier way in just a\nsecond. So for now, feel free to\ngo ahead and just watch. But\nonce we have this interface\naggregator v3 interface, we can\nnow use this to make API calls.\nSo now we could say, aggregator\nv3 interface at this address.\nAnd the combination of these\ntwo, give us that aggregator v3\ncontract with whatever code is\nhere. If at this contract\naddress is aggregator v3\ninterfaces valid, we can do\nsomething like dot version.\nLet's look at this interface. Is\nthere a version function? There\nsure is. So that means we can\ncall the version function on\nthis contract. So let's actually\ngo ahead and copy this into a\ndifferent section. I'm going to\ncreate a new function called Get\nversion just to illustrate this.\nI'm going to be public. It's\ngoing to be a view and it's\ngoing to return the UN 256 and\nWe're gonna split it up into two\nsteps here. We're gonna say\naggregate tour, v3 interface,\nprice feed. So we're creating a\nvariable of type aggregator v3\ninterface equals aggregator v3\ninterface at this address. And\nthen we're going to return price\nfeed that version. Now I'm going\nto go ahead and deploy this\ncontract to Rigby just to show\nyou what this git version is\ngoing to return. But you don't\nhave to follow along here if you\ndon't want because again, we're\nworking with the test net, you\ncan just watch if you'd like for\nthis section, we're going to\ntest a little bit more sparse.\nSince we're going to be mainly\nusing the test net, since we're\ngoing to be working with an\nactual chain link Oracle\nnetwork, once you move over to\nhard hat, and with JavaScript,\nall this testing locally will be\na lot easier and a lot faster,\nyou're more than welcome to go\nahead and fiddle and try and\ntest a lot of this stuff as we\ngo along. But just know that it\nmight take a little bit longer\nto do some of the testing on the\ntest net,\nlet's delete that last funding\ncontract, we're going to deploy\nthis one, we're going to scroll\nup, we're going to switch to\ninjected web three, we're going\nto switch from COVID to rink B.\nAnd the reason we want to make\nsure we're on rink beam is\nbecause this address is specific\nto rink B, the contract that\nwe're looking to interact with\nmight not be at this address on\nevery single chain, we want to\nmake sure we're on the rink B\nchain for this, because of some\nother contract is there on the\ndifferent chain, this version\nfunction obviously won't exist,\nand this function could error.\nSo let's go ahead, we're gonna\nfind me, we're going to deploy\nthis to the rink V chain. Again,\nyou don't have to follow along\nwith me here, you can just\nwatch. And once that contract\nhas been deployed, we now have a\nview function called Get\nversion. And we can see it's\nreturning the variable for\nshowing us that this is the\nfourth version of a price feed.\nSo this is a really easy way for\nus to interact with contracts\nthat exist. Outside of our\nproject, we use one of these\ninterfaces, which can get\ncompiled down to the API, and\nthen combine that ABI with the\naddress to call a function. As\nwe work with these interfaces\nmore and more, they'll start to\nmake more and more sense. So if\nit's a little confusing to you\nright now, don't get\ndiscouraged, the more you work\nwith it, the easier it will\nbecome. Now, though, now that we\nknow how to call these functions\nin here, we can start working\nwith this interface. However, as\nyou know, if we have a whole\nbunch of interfaces, we're gonna\nhave to stick a whole bunch of\ninterfaces at the top of our\ncode, which looks pretty ugly.\nWhat's a better way for us to do\nthis? Well, before we used\nimport, right, we imported from\nsimple storage. That's all for\nthis one, what we could do is we\ncould import from an array gay\nTore v3 interface. That's all,\nwe can go ahead and create a new\ncontract with this aggregator v3\ninterface. Or what we can do is\nwe can import this directly from\nGitHub. If we go back to the\ndocumentation of these chainlink\ndata feeds go to using data\nfeeds, we scroll down, we see at\nthe top, we have this import\nstatement, import at chain link\nslash contracts slash SFC visa\nright interfaces aggregator v3\ninterface, this, this import is\nhas the same path setup as the\nGitHub repository for the chain\nlink code, instead of us\ndirectly adding all the code\nright into our remix, what we\ncan do instead is we can import\ndirectly from GitHub, or what's\ncalled an NPM package. Remix is\nsmart enough to know that at\nchain link slash contracts, is\nreferring to the NPM package at\nchain link slash contracts,\nwe'll talk about NPM, a little\nbit in the future, it's what's\nknown as a package manager, and\ncan keep versions of different\ncontracts for us to directly\nimport into our code bases at\nchain link slash contracts is\ncreated directly from the\nchainlink GitHub repository. So\nremix downloads this code from\nNPM, which is created from this\nGitHub. So now we know that if\nwe import at chain link slash\ncontracts, src, V 0.8 interfaces\naggregator v3 interface dot\nsoul, this is the same as if we\nhad just stuck this whole\ncontract right at the top of our\nfunding contract, which makes\nour code look a lot nicer. And\nnow we have this aggregator v3\ninterface that we can work with.\nOkay, great. So now that we have\na minimalistic interface, which\nwill give us the API, how do we\nactually go ahead and get the\nprice here? Well, documentation\nhas a good example, if you want\nto play with it and try to\nreverse engineer it as well.\nHere's how we're going to do it.\nIn our code. We're going to\ncreate an aggregator v3\ninterface object called price\nfeed an aggregator v3 variable\ncalled price feed, which is\ngoing to equal to aggregator v3\ninterface contract at address\nthis address exactly the same as\nwhat we're doing down here.\nWe're assuming a contract at\nthis address is going to have\nall the functionality of this\naggregator v3 interface, which\nagain, means it has this\ndecimals function, this\ndescription function version,\nget round data. And the\nimportant one latest round data,\nwhich has the latest price at\nthis answer piece, what we can\ndo now is we can call that\nlatest round data function on\nthe price feed. So we'll say\nprice feed dot latest round\ndata. Now if we look at the\ninterface, we see that this\nlatest round data actually\ndoesn't return one variable, it\nreturns a whole bunch of\ndifferent variables. And that's\nwhat we're going to return in\nour contract. So we're going to\nput these parentheses, and we're\ngoing to say, you went at round\nID, we can even look right at\nthe documentation to see what\nelse it returns int price, you\nwent,\nyou went started out, you went\ntimestamp. And then you went ad,\nanswered and round. Now there's\na lot of code here. Since this\nfunction returns so many\ndifferent variables, we have to\nset something up to capture\nthem. However, all we care about\nis price. We don't care about\nround Id started at timestamp or\nanswered in round. So what we\ncan do is just remove them and\njust leave the commas.\nNow we have int price equals\nprice feed that latest round\ndata. The reason that price is\nan int 256. And not a un 256 is\nbecause some prices or some data\nfeeds could be negative here, so\nthat it's an int 256. So it can\nstay flexible. Now that we have\nthe price, this is going to be\nprice of eath in terms of USD.\nAnd we saw an example of this\nbefore, it was around 3000. And\nit returned this number because\nsolidity doesn't work with\ndecimals for a number of\nreasons. But we just need to\nknow that there are eight\ndecimal places associated with\nthis price feed. If you want to\ndouble check how many decimals\nthere are, this contract has a\ndecimal function that you can\ncall as well, that will tell you\nexactly how many decimals are in\nthis price feed. Now as we know,\nmessage dot value is going to\nhave 18 decimal places. Why does\nit have 18 decimal places? Well,\nbecause one ether is equal to\n1-234-567-8910 12345678 Is this\nmassive number in way which has\n18 zeros, which is equivalent to\n1.12345 678-910-1234 5678. So we\nwant these to have the same\ndecimal places, right? Because\nright now this has eight, this\nis 18. They're different units\nright now. So to get them to\nmatch up, all we need to do is\nreturn price times one, ie 10,\nor one raised to the 10th, which\nis equal to 1123456789 10.\nMessage dot value, though, is\ngoing to be a UNT 256. And right\nnow, price is an interval at\nsix. So why did we convert this\nvalue from n into 56. To a human\nto 56? Well, we can do what's\ncalled typecasting, all we need\nto do is add you into 56. And\nwrap this whole thing up between\nthese two parentheses, you can't\ntypecast anything. But there are\nsome values like into 56 and you\ninto 56, that can be easily\nconverted between the two. Now\nof course, since we're not\nmodifying any state with this\nget price function, we can make\nthis view and say it returns\nthat you went to 36. And if we\nsave and compile, we go ahead\nand we get that checkmark. Now\nmath can be a little bit tricky.\nThe first couple times you do it\nin solidity. But the more you do\nit, the easier it becomes. And\nin the future, we can always\nreference a function like this\nto figure out okay, here's the\neasiest way for me to get this\nnumber. Awesome. So now we have\na get price function, which is\ngoing to return a un 256, which\nis going to be the price of\nAetherium. In terms of USD, all\nwe need to do is convert the\nmessage dot value from\nAetherium. To terms of dollars,\nlet's create this get conversion\nrate function. So this one,\nwe're going to take an input\nparameter of un 256 of eath\namount, it's going to be a\npublic view function. And it's\ngoing to return you went to 56,\nwe're going to pass it some eath\namount. And on the other side,\nwe're going to get how much that\neath is worth in terms of USD.\nSo we're going to do a u\nintuity. Six eath price equals\nget price. So first, we're going\nto call our get price function\nthat we just created to get the\nprice of Aetherium. Then we're\ngoing to do u and 256 eath\namount in USD equals eath price\ntimes eath amount, and then\nwe're going to divide it by 118.\nWhen you're doing multiplication\nand division math in solidity,\nyou always want to multiply and\nadd first and then go ahead and\ndivide since eath price and eath\namount both have 18 additional\ndecimal places if we were to\njust let them rock without this,\nthey would have an additional 36\nzeros tax tacked onto the end.\nSo we need to divide by one EA\nteam. Now when we get to the\nhard hat sections of this course\ntesting all this math is going\nto be a lot easier. And if\nyou're really struggling with\nsome of the math bits right now,\nI wouldn't let that slow you\ndown. Because once we get to\nheart, it's going to become a\nlot easier to actually test this\nthan working on a test net. And\nthis eath amount in terms of USD\nis the number that we're looking\nfor. So we can just go ahead and\nreturn eath amount in USD, CSB\nreturns here, and boom, now we\nhave a good conversion rate\nfunction to walk you through the\nmath real quick. Let's say the\neath price is going to be\n$3,000. So it's going to be\n3000. But it's going to have an\nadditional 18 zeros tacked on\nthe end, it matches the message\ndot value way units. And let's\nsay for example, we send one\neath or 112345 678-910-1234 5678\neath into this contract, one\neath should equal $3,000. So to\nget the price, we're going to\nnow do the eath price, which is\n3000 times the eath amount,\nwhich is this one, and then\ndivide by one raised to the\n18th. So method out we'll do\n3123 1-234-567-8910 12345678\ntimes we'd\n1001 2345678 1-234-567-8910\ntimes 112345678 1-234-567-8910.\nAnd now we divide that by\n112345678 1-234-567-8910, which\nequals 2.9. Mmm, II 21, which\nthe calculator kind of messed up\nthem a little bit, but 2.9, not\n2.99, ie 21 means this has 21\ndecimal places. So it'd be\n2.1 234-567-8910 1-234-567-8910\none, or\n1-234-567-8910 12345678 2900 I\n9.99 and a nine. And this is\nactually exactly the reason why\nwe don't do decimal math in\nsolidity, our calculator saw\nthat massive number was having a\nhard time getting it. So it\nended up rounding that number to\n2.999. And nine, when we work\nexclusively with whole numbers\nin solidity, we don't have a\nchance of losing that precision.\nAnd in solidity, this is going\nto return exactly $3,000, which\nis correct one Aetherium at\n$3,000 per Aetherium is going to\nbe $3,000. And like I said,\nsince we're building this\ncontract, assuming we're going\nto be working on this test net,\nwe're not going to test this\nfunction on the test net,\nbecause we're going to have to\nwait for that transaction to go\nthrough. If you want to go ahead\nand deploy this and play around\nwith it yourself, you're more\nthan welcome to Okay, great, now\nwe have a function called Get\nconversion rate that we can use\non our fund function to make\nsure we've sent enough message\ndot value in our fund. So what\nwe can do now is all we need to\ndo is to get conversion rate of\nmessage dot value needs to be\ngreater than the minimum USD. Of\ncourse, right now our minimum\nUSD is just in terms of 50. And\nwe know that conversion rate is\ngoing to return it with 18 zeros\nto represent the decimal places,\nour minimum USD amount needs to\nbe upgraded to 10 to 50 times\none e 18. Or again, one times\n10, raise the 18th, I'm going to\ndeploy this to a test net just\nto demonstrate it. But again,\nyou don't have to if you don't\nwant to wait for this. So I'm\ngonna go ahead and deploy this\nconfirm. And now we have this\nfunny contract. If I don't say\nanything in value, and hit the\nfun button, we're gonna get this\ngas estimation error failed.\nThis is kind of a blanket error,\nbasically saying, Hey, you can\ngo ahead and send this\ntransaction if you want, it's\nhighly likely that it's not\ngoing to work. And the reason\nthat remix knows that it's\nprobably not going to work is\nbecause it can see this require\nand simulate the transaction and\nsay, Hey, you didn't send enough\nmoney with this. However, even\nif we send some money, like 5000\nway, it'll still give us this\nerror. Because that's not\nenough. Let's do the calculation\nright now based on what the\nprice of eath is. So we can\nactually go to data dot chain\nthat link, we look and see\napproximately what the price is.\nSo it looks like the price of\nAetherium right now is about\n$3,000. And this might be\ndifferent for you depending on\nwhen you do that. So if the\nprice of Aetherium is $3,000,\nand our minimum is at least 50.\nWe could do 50 divided by\n3000 0.016 eath should be\napproximately enough. So if we\ngo to our Aetherium converter,\nand we do 0.016, we'll get how\nmuch that is in way, let's do\n0.02 Just to make sure that\nwe're going to be over the\namount. So we'll paste that in.\nWe'll change this to way. And\nnow if I hit the fun button,\ninstead of us getting that error\npopping up, it's going to\nactually go ahead and let us do\nthe fun function and we could\nconfirm it and it wouldn't fail.\nI'm going to reject it for now\njust because I don't really feel\nlike waiting for the transaction\nto go through. But great. We've\nconfirmed that our get\nconversion rate is one working\nas intended, awesome, great\nwork.\nSo what's the next bit of this\nfunding contract that we want to\ndo? Well, when people actually\nsend money to this contract, we\nwant to keep track of all the\npeople who send us money. So\nlet's create some data\nstructures. To keep track. Let's\ncreate an array of addresses\ncalled funders. And we'll keep\nadding all the funders who send\nmoney to us. So we'll say an\naddress array, or an address\nlist. We'll make it public\nfunders. And anytime somebody\nsends us money, and this\nactually does indeed go through,\nwe'll add that funded server\nlist. So we'll say funders dot\npush message dot sender, like\nmessage dot value. Message dot\nsender is an always available\nglobal keyword message dot value\nstands for how much Aetherium or\nhow much native blockchain\ncurrency is sent. Message dot\nsender is the address of whoever\ncalls the font function. So if\nwe're on Rigby message dot\nsender is going to be equal to\nwhatever address is calling that\nfunction. Since our address is\nsending the ether, we're going\nto add our address to this\nfunders list. This way we can\nkeep track of all the wonderful\ndonators who are donating to our\ncontract, then maybe we won't\neven make a mapping of addresses\nto you and 250 sixes of\naddresses to how much money each\none of these people have\nactually sent. So we'll do\naddress to you and 256 public\naddress to amount funded. And\nwhen somebody funds our contract\nwill say address to amount\nfunded of message dot sender\nequals message dot value. Now we\nhave a function where people can\nfund our contract. And we can\nset a value in terms of USD and\nwe keep track of the different\nfunders who actually fund our\ncontract. This is fantastic. Now\nI know we've gone over a lot of\nreally intense math and intense\nstuff here. So so let's do a\nquick refresher of what we've\nlearned so far. Whenever we work\nwith a contract, we always need\nthe API and the address when\ncompiled an interface gives us\nthat minimalistic API to\ninteract with contracts outside\nof our project. When you combine\nthese compiled interfaces with\nan address, we can call the\nfunctions on that interface on\nthat contract. chain link. data\nfeeds are a decentralized way to\nget information about the real\nworld. In this case, we're\ngetting the price of Aetherium\nin terms of USD from a\ndecentralized collective of\nchain link nodes. When working\nwith math and solidity. Decimals\ndon't work. So we need to keep\nthat in mind when doing any type\nof math in solidity. And we need\nto make sure we always have the\ncorrect units, so that our math\nmakes sense. Message dot value,\nand message dot sender, our\nglobally available variables\nwere message dot sender\nrepresents the sender of the\nmessage or transaction. And\nmessage dot value represents the\nnumber of ways sent with the\nmessage. There's a whole bunch\nof different special variables\nand functions that we can access\nat any time. And these are\navailable in the solidity\ndocumentation. Alright, great,\nwe've got a great way that we\ncan actually start funding our\ncontract. But our code looks a\nlittle bit messy, we've got a\ncouple of different functions\nfor getting the price and\nworking with these prices, is\nthere a way to make this math a\nlot easier to use, this is where\nwe're going to introduce the\nconcept of a library. So what is\na library, I definitely\nrecommend checking out solidity\nby example.org, as you're going\nalong with this course, as well,\nthey've got some fantastic\nexamples. One of such example is\ngoing to be about libraries,\nlibraries are similar to\ncontracts. But you can't declare\nany state variables and you\ncan't send ether. We can also\nuse libraries to add more\nfunctionality to different\nvalues. What do I mean by that?\nWell, what we can do actually is\nwe can have get conversion rate\nbe a function of a un 256. So we\ncould do something like Messer\ndot value dot get convert John,\nconversion rate. And we can add\nfunctions as if you went to 36\nwas an object or a struct or a\ncontract that we actually\ncreated. So how do we do this?\nWell, let's create a new\ncontract in our contracts folder\nand create a new file. We're\ngoing to call it price\nconverter, dot salt. And our\nprice converted outsole is going\nto be a library that we're going\nto attach to a un 256. So how do\nyou actually create a library\nand what is a library? Well, a\nlibrary is going to be really,\nreally similar to a smart\ncontract. It's gonna start with\nspdx license identifier. My\nteam, we're gonna give it a\npragma, solidity zero point 8.0.\nAnd instead of typing contract\nfor the name of the contract,\nwe're going to do library for\nthe name of the library. We're\ngoing to call it price\nconverter. Now libraries can't\nhave any state variables and\nthey also can't send ether and\nall the functions in a library\nare going to be in there.\nkernel. So what we can do is we\ncan go back to fund me dot soul,\nwe can grab get price, get\nversion and get conversion rate,\ncopy them all, delete them from\nFunmi dot soul and paste them\ninto our library. And of course,\nsince we're using aggregator v3\ninterface in here, we can also\ncopy the import from Funmi. And\nsince we're not using the\naggregate of three interface and\nour contract anymore, and we're\nusing our price converter, we\ncan paste it into our price\nconverter. Now, if we compile\nprice converted at soul, we see\nthat it actually passes. Now all\nthe functions inside of our\nlibrary need to be internal. And\nwe're gonna make this library\nprice converter different\nfunctions, we can call on you\nactivity six, for example, we're\ngoing to be able to do message\ndot value dot get conversion\nrate, we're going to directly be\nable to get the conversion rate\nof a value of a U and 256 as if\nthat was a function for it the\nwhole time. So first, let's make\nthis internal. Let's make get\nconversion rate internal. And\nwe'll make good version\ninternal. Now that we have this\nlibrary price converter back in\nour Funmi, we can now import\nthis price converter and attach\nit to you in 256. So we'll do\nimport that slash price\nconverter, dot soul.\nAnd in Funmi, we'll do using\nprice converter for UNT 256. Of\ncourse, if we compile our Funmi.\nNow, this line is getting an\nissue because saying hey, get\nconversion rate isn't defined.\nNow in our library, the first\nvariable that gets passed to the\nfunction is going to be the\nobject that it's called on\nitself. So in Funmi dot soul,\nlet's go ahead and comment out\nthis line for now. If we do\nmessage dot value dot get\nconversion rate, this is\nsecretly the same as we did get\nconversion rate or message dot\nvalue in our price converter\nlibrary, the message dot value\nis going to be passed as the\ninput parameter to get\nconversion rate, forget price\nand get version we don't really\ncare about the number. So we're\njust going to leave it blank for\nnow. So instead of require get\nconversion rate of message dot\nvalue, we can now do message dot\nvalue dot get conversion rate.\nAnd compile that you'll see that\nhere we're not passing a\nvariable, even though our get\nconversion rate function says\nhey, I'm expecting a variable.\nAgain, the reason for this is,\nis this message add value is\nconsidered the first parameter\nfor any of these library\nfunctions. And that's how it\nworks. If we wanted another\nvariable in here, like you went\nto 56, something else. Now we\nwould want to pass something\nelse in here 123. And this 123\nwould get assigned to this\nsomething else. But we're going\nto delete that for now. Okay,\ngreat. And in doing that, we've\nminimized our Funmi contract a\nlot by moving a lot of that math\nand price conversion stuff into\nour price converter library dot\nSol. One of the most common\nlibraries that was used for the\nlongest time was this library\ncalled Safe math dot Sol. And\nyou'll probably see it a lot of\ndifferent places, we're gonna go\noff on a quick little tangent\nhere and teach you about safe\nmath. So let's close Funmi close\nprice converter. And let's\ncreate a new file called Safe\nmath tester. That's all. And\nlet's start with some basic\nstuff in here. Safe math was all\nover the place before version\n0.8 of solidity. And now it's\nalmost in no contracts. What\nhappened, why is safe math no\nlonger used as much? Well, let's\ncreate a sample contract. This\nis a section that you don't have\nto follow along if you don't\nwant to code along with me. But\nif you want to you absolutely\nstill can. This is going to be a\ncontract we are going to deploy\non a JavaScript virtual machine,\nwe can use any version of\nsolidity before version 0.8 of\nsolidity. So for example, we use\npragma, carrot, zero, point 6.0.\nAnd we'll create contract safe\nmath tester, dot Sol. Now if I\ncreate a you int eight, I set it\nto public big number. And I set\nthis to 255 Oops safe math\ntester. Let's go ahead and\ncompile safe math tester with\nzero point 6.7 pragma, solidity,\nthe maximum size of a Yewande\neight is going to be 255. This\nis going to be the biggest\nnumber that we can fit in the\nnew int eight. And if I were to\ndeploy this to a JavaScript VM\nor even a test network, safe\nmath tester, let's go ahead to\nplay up. If I hit big number,\nwe're gonna get 255. Well, what\nhappens if I create a function\ncalled ADD? That sets big number\nequal to big number plus one?\nLet's save that. Delete that old\ncontract and deploy. All right\nnow big numbers 255 What happens\nwhen we add one two? big number.\nWhen 255 is the max size a, UNT\neight can be? Well, let's hit\nadd. Now let's check what big\nnumber is. Big number gets reset\nto zero. So what's going on?\nWell, prior to version 0.8, of\nsolidity, unsigned integers and\nintegers ran on this concept of\nbeing unchecked, which means\nthat if you passed the upper\nlimit of a number, it would just\nwrap around and start back from\nthe lowest number it could be.\nSo if I call add a whole bunch\nmore times, and hit big number,\nnow let's say if I were to hit\nthis add button a ton more times\nand get it back to two and a 55.\nIt would then continue to wrap\nover to zero. So one of the most\npopular libraries that was out\nthere was this safe math\nlibrary, which would basically\ncheck to make sure that you\nweren't wrapping around a un 256\nor an intuitive six, basically,\nit was a way to say, hey, you've\nreached the max this number can\nbe and now your transaction is\ngoing to fail. If we switch this\nto 0.8, of solidity, delete the\nold contract, go switch this to\n0.8. We'll go ahead and compile\nit. And now we deploy this to\nJavaScript VM.\nIf I hit big number, we get to\nunder 55. But if we hit Add, it\nactually fails. And we still get\nto under 55. In version 0.8, in\nsolidity, they added this bit,\nwhere it automatically checks to\nmake sure if you're going to do\nwhat's called overflow or\nunderflow on a variable, we can\nactually revert back to the\nunchecked version by using an\nunchecked keyword. So if we wrap\nthis big number equals big\nnumber plus one in this\nunchecked bracket, let's delete\nour old contract will compile\nwill redeploy. We had big\nnumbers to 55. Now we hit add,\nwe hit big number again, it\nreverted back to zero. So that's\na little bit more about safe\nmath, checked and unchecked. So\nin version 0.76, and below this\ncode that you see in front of\nyou, is going to be the exact\nsame as this code in 0.8. And\nabove with this unchecked\nkeyword. Now you might be\nthinking in newer versions of\nsolidity, why would I use this\nunchecked keyword? Well, you'll\nfind out later that this\nunchecked keyword makes your\ncode a little bit more gas\nefficient. So if you're\nabsolutely positive that your\nmath is never going to reach the\ntop or bottom limits of a\nnumber, that it might make sense\nfor you to use the unchecked\nkeyword. Let's head back over to\nour Funmi contract, where we are\nnow using the price converter\nlibrary that we just created.\nAlright, great. So now we've got\na pretty minimalistic contract\nhere for actually doing the\nfunding. And we have all of our\nmath for getting conversion\nrates done in our library price\nconverter, which we're going to\nimport at the top of Funmi.\nCool. So at this point, we've\ngot our fun method. Awesome. And\nso we can allow anybody to go\nahead and fund this contract and\nsend this contract Aetherium, or\nany native blockchain currency\nto this contract. Well, now what\ndo we want to do? Well, once all\nthe funders have gone ahead and\nfunded, we're going to want the\nproject to be able to withdraw\nthe funds out of this contract.\nSo they can actually go ahead\nand use those funds to buy\nthings for this project. So\nlet's go ahead and create a\nwithdrawal function. So we'll\ncreate a function withdraw. And\nwe'll make this public. Since\nwe're going to be withdrawing\nall the funds out of this\ncontract, we probably also want\nto reset our funders array, and\nour address to amount funded.\nSince we'll be withdrawing all\nthe funds, those amounts should\ngo back down to zero. So let's\ngo ahead and loop through the\nfunders array and update our\nmapping object so that each of\nthese funders now has zero,\nbecause in just a second, we're\ngoing to withdraw all the money\nfrom them. So to do this, we're\ngoing to use something called a\nfor loop. So what is a for loop?\nA for loop is a way to loop\nthrough some type of index\nobject or loop through some\nrange of numbers or just do a\ntask a certain amount of times\nrepeating. So for example, let's\nsay we have an array or list.\nAnd on that list, we have 1234.\nIf we wanted to get all of the\nelements in this array, or in\nthis list, okay, 1234. How do we\nget all the elements in this\nlist? Well, we would use a for\nloop to loop through each one of\nthese objects. So at zero with\nindex would be one at the first\nindex would be two, and at the\nsecond index would be three, at\nthe last index would be four. So\nwe would loop through the\nindexes zero through three to\nget all these elements. Or maybe\nanother example is if this was\nA, B, C, D, A is at the zero\nwith index B is at the first\nindex sees the second Indy's at\nthe third and we will loop zero\nthrough three. To get to each\none of these elements, we're\ngonna do that exact same thing.\nBut with the funders array. So\nhow do we actually do that?\nWell, we first start with the\nfor keyword, the for keyword\nsays, Okay, we're about to start\na loop. And inside of these\nparentheses, we define how we\nwant to loop through it. Also\nbackslash star, and star\nbackslash is sort of like\nbrackets for comments. Anything\nin between these two will be a\ncomment. So in a for loop,\nfirst, we give it the starting\nindex, then we give it the\nending index, and then we give\nit the step amount. For example,\nmaybe we want to start with\nzero, we want to go to 10. And\nwe want to go up by one each\ntime. So we would go\n01 234-567-8910. Or maybe we\nstart at zero, we want to end at\n10. And we go up by two each\ntime. So we'd go 02468 10. Or\nmaybe we want to go from zero to\nfive, we want to go from two to\nfive, with a step of one, we'd\ngo 2345, etc. So this is what's\ngoing to go inside of this four\nbit here. So for our starting\nindex, and let me even just put\nthis above so that you can\nreference it. So our starting\nindex is going to be you in to\nVT six variable, and we're going\nto call it funder index. And\nwe're going to start with\nthunder index being equal to\nzero. So we're starting with\nzero here. And we're going to\nend with the length of our\nfunders array, since we want to\nloop through all of the funders.\nSo we're going to say, funder\nindex needs to be less than\nfunders dot length. So our\nending index is going to be\nwhenever funders index is no\nlonger less than funders dot\nlength. And then finally, we're\ngonna say funder index equals\nfunder index, plus one, which\nmeans that every time the code\ninside of this loop finishes,\nwe're going to increase funder\nindex by one. That's how we go\nfrom zero to one to two to three\nto four to five, etc. Another\nway you can type funder index\nequals funder index plus one is\nyou can just do funder index\nplus plus, this plus plus syntax\nmeans funder index equals itself\nplus one. So let's start looping\nthrough our funders array to\naccess the the zero with element\nor the first element, we're\ngoing to say, funders of funder\nindex. So we're saying we want\nto access the zero with element\nof our funders object. And this\nis going to return an address\nfor us to use, we're gonna go\nahead and say address under\nequals funders at the funder\nindex. So now we have this\nfunder address. And we want to\nuse this to reset our mapping.\nSo we're going to say, address\nto amount funded at at the\nfunder key is now equal to zero.\nBecause remember, in fund we\nupdate the amount. Whenever we\nfund the contract, when we\nwithdraw the money from the\ncontract, we're going to reset\nit back to zero. Now let's walk\nthrough this funder index starts\nfrom zero. So we're going to get\nthe zero with funder, we're\ngoing to grab that funder at the\nzero with index and we're going\nto reset the address to male\nfunded of that funder to zero,\nthen this for loop is going to\nupdate by one, it's going to\nmove from zero to one, it's\ngoing to check then if funder\nindex is less than the length,\nlet's say funders has 10 people\nin it. If funders has 10 people\nin it, it'll still be less. So\nnow funder links will be one\naddress funder will equal\nfunders of one now instead of\nzero, and we'll grab that\naddress, and we'll reset that\naddresses about funded to zero,\nthen we'll continue to two to\nthree to four all the way up to\nthe length of our funders array.\nAnd this is how we can loop\nthrough our objects. So saying\nthis middle one is the ending\nindex isn't exactly right, since\nwe're really checking for a\nboolean to see if this is still\ntrue, but hopefully you get the\nidea. So we've reset the\nbalances of the mapping.\nHowever, we still haven't done\ntwo things, we still need to\nreset the array to make the\nfunders a blank array. And then\nwe also need to actually\nwithdraw the funds. Since when\nwe funded this, we sent message\ndot value along with calling\nthis fund function. However, we\ndidn't actually withdraw the\nfunds. So to reset the array, we\ncould loop through it and delete\nobjects from this address array.\nOr we could Just totally refresh\nthis variable. So instead of\nlooping through the array and\ndeleting objects, we're just\ngoing to say funders equals a\nnew address array, we're going\nto completely reset the array by\nsaying this font is variable now\nequals a brand new address array\nwith zero objects in it to\nstart, if we were to put a one\nhere, this would be there'll be\none element to start in the\narray, two would be two, three\nwould be three, etc, we're just\ngoing to start it as a\ncompletely blank new array. So\ngreat, we've gone ahead and\nreset the array. But how do we\nactually now with draw funds\nfrom this contract? How do we\nsend the funds back to whomever\nis calling this now to actually\nsend ether or send native\nblockchain currency, there are\nactually three different ways to\ndo this, we're going to look at\nall three, and say what the\ndifferences between the three of\nthem are, the three different\nways are going to be transfer,\nsend, and call. Let's go ahead\nand start with transfer. Since\ntransfer is the simplest and at\nsurface level makes the most\nsense to us. So if we want to\ntransfer the funds to whomever\nis calling this withdrawal\nfunction, we would do we would\nsay message dot sender, dot\ntransfer. And then we'd get the\nbalance of our contract here by\nsaying address this, this\nkeyword refers to this whole\ncontract dot balance, and we can\nget the native blockchain\ncurrency or the Aetherium\ncurrency balance of this address\nlike this. And we can just do\nthat only thing that we need to\ndo is we need to cast we need to\ntypecast message dot sender from\nan address type to a payable\naddress type. So message dot\nsender is of type address.\nWhereas payable, message that\nsender is of type, payable\naddress, and in solidity in\norder to send the native\nblockchain token like Aetherium,\nyou can only work with payable\naddresses. To do that, we just\nwrap it in this payable type\ncaster. So this is the first way\nthat we actually send Aetherium\nor send tokens from different\ncontracts to each other, we wrap\nthe address that we want to send\nit in, in this payable keyword,\nwe do dot transfer, and then we\nsay exactly how much we want to\ntransfer. But there are some\nissues with transfer. Here we\nare on solidity by example, for\nsending ether, which, again is a\nfantastic resource to refer to,\nif you get lost, the method that\nwe just looked at was this\ntransfer method. Now we saw way\nearlier in the course, that if I\nsent Aetherium, from one address\nto another, it cost about 2100\ngas or 2100. Gas, our transfer\nfunction is capped at 2300 gas.\nAnd if more gas is used, it\nthrows an error. The next one\nthat we're using is going to be\nsent which is also capped at\n2300 gas. And if it fails, it'll\nreturn a Boolean. So with\ntransfer, if this line fails,\nit'll air and revert the\ntransaction with send, it won't\nair, it'll return a boolean of\nwhether or not it was\nsuccessful. So using send will\ndo payable message that sender\nthat send address this balance.\nBut we don't want to finish our\ncall here. If this were to fail,\nthe contract wouldn't revert the\ntransaction, and we just want to\nget our money sent. So we want\nto do Boolean send success\nequals this whole bit here. And\nthen we want to require success.\nAnd if this send fails will\nthrow an error saying sin\nfailed.\nThis way, if this fails, we will\nstill revert by adding our\nrequire statement here. Transfer\nautomatically reverts if the\ntransfer fails, send will only\nrevert the transaction if we add\nthis require statement here. So\ngreat. What's the third way that\nwe can actually send Etherium or\nnative currency wallets with\nthis call command. Now call is\ngoing to be one of the first\nlower level commands that we\nactually use in our solidity\ncode, because this call function\nis actually incredibly powerful.\nAnd we can use it to call\nvirtually any function in all of\nAetherium without even having to\nHave the API we'll learn the\nadvanced ways to use this call\nmuch later. For now, we're just\ngoing to learn how to use it to\nsend Aetherium, or your native\nblockchain currency call is\ngoing to look very similar to\nsend, we're going to do payable,\nmessage dot sender, dot call.\nAnd this is where we will put\nany function information or any\ninformation about the function,\nwe want to call on some other\ncontract, we actually don't want\nto call a function. So we're\ngoing to leave this blank, we\ncan show that we're leaving it\nblank by just putting in these\ntwo quotes here, we instead want\nto use this like a transaction.\nAnd as we saw in our deployment,\nthere's always this message dot\nvalue bid, we're going to use\nthis call function as if it's a\nregular transaction, and we can\nadd stuff like message dot\nvalue. So in here, we're going\nto add these squiggly brackets.\nAnd we're going to say, value\naddress this dot balance, this\ncall function returns actually\ntwo variables. And when a\nfunction returns two variables,\nwe can show that by placing them\ninto parentheses on the left\nhand side, the two variables, it\nreturns are going to be a\nBoolean, that we're going to\ncall call success. And also a\nbytes object called data\nreturned, since call allows us\nto actually call different\nfunctions. If that function\nreturns some data or returns\nvalue, we're going to save that\nin the data returned variable.\nIt also returns call success,\nwhere if the function was\nsuccessfully called this will be\ntrue. If not, this will be\nfalse. And since bytes objects\nare arrays, data returns needs\nto be in memory. Now for our\ncode here, we're actually not\ncalling a function, so we don't\nreally care about data returned.\nSo similar to what we saw with\nthe price contract, we can just\ngo ahead and delete that and\nleave the comma to tell solidity\nYeah, we know this function\nreturns two variables, but we\nonly care about one. And then\nsimilar to the centerpiece\nabove, we're going to do require\ncost access call failed, meaning\nthat we're requiring cost\naccesses true. Otherwise, we'll\nrevert with an error that says\ncall failed. Now of learning the\ndifference between these three\nis a little complicated for you\nright now. Don't let that slow\nyou down. Feel free to come back\nto this after you've learned\nmore about how some of these\nlower level functions work. And\na little bit more about how\ngasworks solidity by example,\ndoes a fantastic job though of\nsaying what the difference is\nbetween all three, our transfer\nhas a maximum of 2300 gas and\nthrows an error if it fails,\nsend has a maximum of 2300 gas\nreturns a Boolean, if it fails,\ncall forwards all gas so doesn't\nhave a capped gas. And similar\nto send returns a Boolean, if it\nis successful, or if it fails,\nAs of recording right now using\ncall is the recommended way to\nactually send and receive\nAetherium or your blockchain\nnative token for now, if this\npart's a little bit confusing\nfor you, for now, just look at\nthis and see ah, that's how we\nsend and transfer Aetherium or\nnative blockchain currency\ntokens. And I'm going to delete\nthis part for the video, but\nI'll keep those comments in the\ncode repository associated with\nthis course. And okay, perfect.\nIf we hit compile a fun meat\noutsole, we do indeed see that\nit's passing compliation.\nHowever, there's a bit of an\nissue here, right now,\nanybody can withdraw from this\ncontract. So anybody can fund,\nwhich is what we want. But we\ndon't want anyone to be able to\nwithdraw. We only want the\nperson who's collecting the\nfunds to be able to actually\nwithdraw the funds. So how do we\nset this up so that the withdraw\nfunction is only called by the\nowner of this contract? Well, to\ndo that, we're going to set up a\ncouple new functions. So when we\ndeploy this contract, we want to\nautomatically set it up so that\nwhomever deploys this contract\nis going to be the owner of this\ncontract. And then we can do\nsome parameters to set it up so\nthat only the owner of this\ncontract can call the withdrawal\nfunction. So how would we do\nthat? Well, maybe we can create\na function called like, call me\nright away. And right after we\ndeploy this contract, we call\nthis call me right away\nfunction, which will set up us\nas the owner. Now that's going\nto take two transactions. And\nthat would be really annoying if\nwe had to do that. So instead,\nsolidity has something called a\nconstructor. And if you're\nfamiliar with other programming\nlanguage, a constructor is\nexactly the same as other\nprogramming languages.\nconstructor is going to be the\nfunction that gets called when,\nimmediately whenever or you\ndeploy a contract. So if I were\nto deploy Funmi, dot Sol, and I\nwere to say, minimum USD equals\nto minimum USD would no longer\nbe 50 times one e to the 18th,\nit would be immediately updated\nto two. Because constructor is a\nfunction that gets immediately\ncalled in the same transaction,\nthat we create this contract,\nthis constructor function is\ngoing to be incredibly helpful\nfor us, because it allows us to\nset up the contract the way we\nwant it to be. So for example,\nif we want the withdrawal\nfunction to only be able to be\ncalled by the owner of this\ncontract, we can have the\nconstructor set up who the owner\nof the contract is. So let's\ncreate a global variable called\naddress, public owner. And then\nin our constructor, we'll say\nthe owner is going to be equal\nto the message dot sender. The\nmessage that sender of the\nconstructor function is going to\nbe whoever is deploying the\ncontract. So owner is now going\nto be whoever deployed this\ncontract. And don't worry, we're\ngoing to demo all this very soon\nand show you everything that's\ngoing on with ether scan\neverything, demoing this all\nright now might take a little\nbit of time, because we're using\na test net. So if you want to\ntest it all right now,\nabsolutely go for it, but just\nknow, it'll take you a little\nbit longer to do so. Now that we\nhave the owner setup, we can\nmodify our withdrawal function\nto make it so that only the\nowner can actually call this\nwithdrawal function. So at the\ntop of the withdrawal function,\nmaybe we want to add a section,\nmaybe we want to say require\nmessage dot sender equals the\nowner, a note about double\nequals versus equals, you can\nthink of this single equals as a\nset parameter. So when I say\nowner, is now set to message dot\nsender, double equals is how you\ncheck to see if these two\nvariables are equivalent. So\nwe're saying is message dot\nsender, the same as owner. So\nthis is checking to see\nequivalence. This is setting\nchecking to see equivalence\nsetting. So we're gonna say\nrequire message dot sender is\nequal to owner, otherwise, we're\ngonna throw an error, saying,\nsender is not owner. Perfect.\nNow we have a quick way to make\nsure the withdrawal function is\nonly called by the owner of this\ncontract. Now, let's say that\nthere's a lot of functions that\nwe have in this contract that\nare going to be required to be\nthe owner, maybe there's a lot\nof functions in this contract\nthat need a whole lot of\ndifferent requires, we don't\nwant to have to copy paste this\nline to every single one of our\nfunctions. So what can we do?\nWell, this is where something\ncalled modifiers come in. So for\nnow, we're gonna go ahead and\ndelete this line. And below,\nwe're going to create something\ncalled a modifier, our modifier\nis going to be a key word that\nwe can add right in the function\ndeclaration. To modify the\nfunction with that\nfunctionality, we're going to\ncreate a modifier and call it\nonly owner. And we're going to\npaste that line that we just\nmade in withdraw. And underneath\nthat, we're going to put a\nlittle underscore, what I can do\nnow is I can take this only\nowner modifier, and stick it in\nthe function declaration of my\nwithdrawal function. So what's\nhappening with this modifier\nwith only owner in this function\ndeclaration,\nwe're saying, hey, for this\nwithdrawal function, before you\nread all this code inside of it,\nlook down at the only owner\nmodifier and do whatever is in\nthere first, and then do\nwhatever's in the underscore,\nthis underscore represents doing\nthe rest of the code. So now,\nwhen we go call the withdraw\nfunction, we actually do this\nrequire statement first, and\nthen call the rest of the code.\nIf this require statement, we're\nbelow the underscore, this would\ntell our function to go ahead\nand do all this code first. And\nthen run the require. Because\nagain, we have this only only\nkeyword, we're saying, Great,\nwe've got a function, it's\nwithdraw its public, oh, only\nodor modifier. Let's look at how\nthat works. Okay, it tells us\nhow to do all the code of the\noriginal function first. So\nlet's go ahead and do that.\nOkay, now we're done. Now, what\ndo we do? Okay, now we'll run\nthe require, we want to go ahead\nand put the require here first.\nSo this is how modifiers work,\nand how we can use them to\nimprove our functionality. All\nright, awesome. We have all the\nbasic functionality of our\ncontract that we need here. Now\nwe're finally actually going to\nrun everything on a test and see\neverything happened live before\nour eyes. Are you ready? Let's\ndo this.\nSo let's go over to the deploy\ntab. And we're going to switch\nof course to injected web three.\nRemember But we're using\ninjected web three, because our\nprice converter dot soul is\nusing chainlink Oracle's that\nactually exist and are actually\nmonitoring the Rinkeby network\nfor us. Now we're going to\nscroll down to, and we're going\nto choose the Funmi contract.\nAnd we're going to go ahead and\ndeploy. Once again, we want to\nmake sure we're on the Rinkeby\ntest net. And we have a little\nbit of rinky eath in our wallet,\nlet's go ahead and deploy,\nconfirm. And we'll wait a little\nbit. And I'll pull up our log\nhere. And we'll wait a little\nbit for our contract to get\ndeployed. Alright, great. It\nlooks like our contract has\nindeed been deployed. If we\nscroll down, we can see all of\nour functionality, minimum USD\nis going to be that $50. But\nwith 18 zeros so that the units\nare the same as Aetherium, the\nowner of our contract was set to\nour address, the instant we\ndeployed this contract, it was\ndeployed by calling our\nconstructor function. So this\naddress 0x 106 x is going to be\nthe same as the address in our\nmeta mask, your address here, of\ncourse, is going to be a little\nbit different than mine, we have\nour funders array, which, of\ncourse is going to be blank, we\nhave our address array, which is\nalso going to be blank. And then\nwe have two functions that we\ncan use to modify the state of\nthe blockchain withdraw is going\nto be orange, because we're not\npaying any Aetherium we're\nactually gaining Aetherium or\nwhatever native blockchain\ncurrency fund is going to be\nread, because fun is a payable\nfunction that we are going to be\nsending Aetherium to or sending\nwhatever native blockchain\ncurrency that you're working\nwith. So let's go ahead and see\nhow this all works. So first,\nlet's go ahead and fund this\ncontract. Again, funding, we got\nto do a little bit of math,\nright now, since the price of\neath is around $3,000. And we're\nlooking for $50. Minimum, we do\n50 divided by 3000. We can do\n3000 divided by 50, we can do 50\ndivided by 3000. So we know that\naround 0.02 Aetherium, should be\nenough for this contract to\nwork. So 0.02 Aetherium is this\nmuch way, we can copy that,\npaste that into here. So when we\nhit fund, it should actually\npass. And we do indeed see meta\nmasks pop up. And we'll go ahead\nand confirm. Once this\ntransaction goes through, we'll\nbe able to see this contract on\nether scan with the funds in it.\nNow if we don't add way here, if\nwe don't add a value, once\nagain, we had fund will say gas\nestimation failed because we're\nnot sending enough here. And in\nfact, we even see execution\nreverted didn't send enough, we\ncan absolutely send this\ntransaction however, it's going\nto fail. Great. So now that our\ntransaction has gone through, if\nwe go on to the rink the ether\nscan, once we wait a little bit\nfor it to finish indexing here\non the Rinkeby ether scan, we\ncan see that transaction\nactually went through for doing\nthe funding, we can actually see\na lot of different details going\non with this transaction as\nwell. And if we scroll down, we\nonce again, you can see all the\ninformation about us calling\nthis fun function, gas limit\ngas, you should the gas fees,\ngas price, and we can see the\ninput data as well, we can see\nthat we called the fund function\ndown here. We'll learn more\nabout the input data later. If\nwe go to the contract that we\ndeployed, we can now see two\ntransactions, we can see our\ncontract created transaction.\nAnd we can also see we called a\nfont method. And if we look at\nthe balance of our contract, and\nnow has 0.02 ether, which makes\nsense, since we just sent it\n0.02. If we put that 0.02 eath\nin terms of way back into the\nvalue section, and we call font\nagain, after this transaction\ngoes through, we should see this\nnumber go from 0.02 to 0.04. Now\nafter we wait a brief delay, we\ndo indeed see the balance has\ngone up to 0.04, which is\nexactly what we'd expect.\nAwesome. So our funding\nmechanism is working correctly.\nAnd if we go down into our\narray, and our mapping\nto do address to array, and we\npaste our address, we should see\nthe phone number show up. And if\nwe go to funders of zero, we see\nour address. And if we go to\nfunders of one, we also see our\naddress and we see that and we\nsee this call going through if\nwe go to funders have to in our\nlog over here, we actually see\nthat we get an error an\noptimization that we could make\nto our contract in the future is\nto check to see if an address is\nalready in the funders array and\nthen not add it if it's already\nthere. Now let's go ahead and\ntry to call this withdrawal\nfunction. But let's try to call\nit with a different address than\nthe address we originally\ndeployed this contract with. So\nto do that, scroll all the way\nto the top of this here. And I'm\ngoing to go to my Metamask. And\nI'm going to switch to a second\naccount and hit connect. Now,\nour remixes should be updated\nwith the new account that's in\nhere, you'll see that if I\nswitch back to account one, it\nswitches back to account one, so\nlong as they're both connected,\nyou can see which accounts are\nconnected to applications by\nclicking this connected button\nand see which ones are\nconnected. If you ever want to\ndisconnect that account, you can\nclick the three little dots and\nit disconnect the account. And\nnow we can see that this account\nis not connected. However, count\ntwo is connected. Let's go back\nto account one and Connect\naccount one so that both of them\nare now connected. But we'll\nswitch to account two, let's\nswitch to account two, because\nagain, account two isn't the\nowner of this contract. We\nscroll down to owner, we can see\nowner's 0x 1066 Something\nsomething and account two is\n0x 043. Something something\nawesome. So what do you think\nwill happen when we hit withdraw\nhere? Well, our modifier only\nowner should kick in. And we\nshould get notified that if we\nsend the transaction, we'll get\nthis error sender is not owner.\nSo let's try it. Ah gas\nestimation failed, we do get\nthis error. Sender is not owner,\nwhich is perfect. This is\nexactly what we want, we could\nabsolutely send this transaction\nif we wanted to. But that would\njust be a waste of gas because\nthis transaction is going to\nfail. However, if we switch back\nto account one, and we hit\nwithdraw, meta mask will pop up,\nenabling us to confirm and\nwithdraw the ether out of this\ncontract address. Now if we look\nat this contract address on\nether scan, after a brief delay,\nwe'll see the balance go from\n0.04 back down to zero. And\nwe'll see our wallet balance go\nup from what it is back to 0.04\nplus what it was. And after a\nbrief delay, you can see our\nbalance is indeed back down to\nzero in our contract. Now, if we\ndo address to amount for our\nwallet address that was doing\nthe funding, it's back down to\nzero. And if we try to check the\naddress of funders at index\nzero, we get called to funders\nthat fund me errored execution\nreverted.\nWe've completed all the basics\nof this section that I wanted to\ngo through. And you should be\nincredibly proud of yourself for\ngetting this far, you've just\ndeployed a really advanced smart\ncontract, we're using a library\nand chainlink contracts to build\nsome of the most powerful\napplications in the planet,\nwe've learned to use a library\nfor any type we want in our\nsmart contracts. We've learned\nmore about multiplication, and\nthen units of measure in\nsolidity and smart contracts.\nWe've learned about mappings\nmore about arrays what the\nconstructor does, we've learned\nhow to send money we've learned\nabout for loops, we've learned\nabout the different ways we can\nactually send money, at least\nfrom a low level. And we've\nlearned about modifiers. This\nsection is one of the tougher\nsections in this course. So if\nyou completed this, you should\nbe incredibly excited. We're\ngoing to go through our code\nnow. And we're going to make a\nnumber of tweaks. Now this\nsection, we are going to do a\nlittle bit more advanced\nsolidity here. So if you get a\nlittle bit lost, don't sweat it\ntoo much. And feel free to try\nsome of this stuff in the future\non your own. We're going to\nmodify this contract to make it\na little bit more professional.\nIt's not going to be end to end\namazing, but it's going to be a\nlittle bit better. And you'll\nsee why in a minute. So the\nfirst thing that we're going to\ndo is we're looking we're going\nto look at some of these\nvariables here. In particular\nowner and minimum USD, owner\ngets set one time in our\ncontract here. And then it never\nchanges. Again, minimum USD gets\nset one time, even outside of\nthe constructor. If we have\nvariables that only get set one\ntime, we can actually use some\ntools in solidity to make them\nmore gas efficient. For now\nlet's compile our Funmi\ncontract, and then deploy it to\na JavaScript virtual machine.\nRemember, we can go ahead and\ndeploy it right now. However,\nfunding and withdrawing and\ndoing in the money stuff isn't\ngoing to work. Because again, we\ndon't have a chain link network\non our JavaScript VM. So those\naren't going to work so well.\nBut for what we're gonna do\nright now, we don't really care\nso much. Here's what we do care\nabout. You do care about how\nmuch gas this costs to actually\nsend. We do care about how much\ngas is costs to create right now\ncreating this contract costs\nabout 859,000 gas and we're\ngoing to Add a couple of tricks.\nRight now to bring this number\ndown, we're going to add some\nstuff back in in the bid, which\nwill bring it back up. But for\nnow, we're going to learn some\ntricks to bring this number\ndown. The two tricks that we're\ngoing to learn are the constant\nkeyword and the immutable\nkeyword, in their solidity.\nThere are two keywords that make\nit so that your variables can't\nbe changed. And those keywords\nare constant and immutable. You\ncan learn more about them in the\nsolidity documentation, if you\nassign a variable once outside\nof a function, and then never\nchange it, so if if it's\nassigned at compile time, you\ncan go ahead and add this\nconstant keyword. We'll learn\nlater about storage. But when\nyou add a constant keyword, this\nminimum USD no longer takes up a\nstorage spot, and is much easier\nto read too. So now we recompile\nthis, and we deploy this new\ncontract. Let's see if we saved\nany gas. We look in the\ntransaction logs, now, we can\ngrab the transaction cost of how\nmuch this cost to deploy, let's\ncompare it to how much it was\nbefore. Well, we saved almost\n19,000 gas, that's almost as\nmuch gas as a cost to send\nAetherium. Typically, constant\nvariables have a different\nnaming convention. Typically,\nyou'll want to do them all caps\nlike Min imaam. Underscore, who\nis the CIO all caps with\nunderscores. So now let's just\nfind minimum use D, and replace\nthat with all caps as well. With\nthis interaction, we know that\nthis variable is a constant\nvariable, and it's much cheaper\nto read from now, if we go ahead\nand compile this and redeploy.\nIn our Funmi contract, even\nthough this is a view function,\nremember, view functions do have\ngas costs when when called by\ncontract as a constant variable,\nwe can see the execution cost of\nthis variable 21,415 gas. So\nlet's put a little note rather\nNathan.\nIf we remove the constant\nvariable, we delete this\ncontract. And we redeploy, like\nFunmi. And we hit minimum ust\nagain, we can now see how much\ngas this was cost. If it wasn't\na constant variable, we can see\nthe gas cost did indeed go up.\nNow on chains that are much\ncheaper, this gas difference\nprobably won't make that much of\na difference. But on more\nexpensive chains like Aetherium,\nthis is going to make a big\ndifference. For example, on\nAetherium, we can actually see\ncurrent gas prices on Aetherium.\nHere, we can see the current gas\nprice of Aetherium is about 141\nway, so we'll go to our\nconverter, way to way we'll copy\nthe way price times this will\nget the gas price of calling our\nminimum USD, which is this\nnumber here, which if we put\nback in our Aetherium\nuniconverter, we can see cost\nthis much gas. And if we times\nthat by the approximate current\nprice of Aetherium, which is\naround $3,000. Calling minimum\nuse D as a constant is going to\ncost $9 on the inside is at a\nnonconstant is going to cost\nalmost an entire dollar more,\nyou can see how all these little\ngas optimization tricks are\ngoing to make your life a lot\nbetter. So let's keep this\nconstant keyword in here. We'll\nlearn more about constant and\nstorage in later sections of\nthis course. Now, as you're just\ngetting started with this\ncourse, and with slip the Do not\nstruggle. And do not worry about\nmaking your contracts as gas\nefficient as possible in the\nbeginning, and especially right\nnow. Just write your contracts\nas best as you can. Once you get\nreally good at gas. And once you\nget much later on in the course,\nand much more advanced with\nsolidity, then you can start\ngoing back and working on gas\noptimizations. But do not let\ngas optimizations hold you back.\nOr if you start stressing over\nit, just let it go. Don't worry\nabout it and just write your\ncode as best you can. So long\nstory short, Do not stress about\ngas optimizations right now. Now\nanother variable we only set one\ntime is going to be our owner\nvariable. Owner equals message\ndot sender. We set this one time\nin the constructor variables\nthat we set one time but outside\nof the same line that they're\ndeclared. And we set them for\nexample, in the constructor, we\ncan mark as a mutable typically\na good convention for marking\nimmutable variables is going to\nbe doing I underscore so that we\nknow that these are immutable\nvariables, they have very\nsimilar gas savings to the\nconstant keyword. Owner, of\ncourse, is a variable that we\ncan't set on the line here\nbecause inside the global scope,\nthere's no function going on.\nHowever, inside functions,\nbecause inside the global scope,\nthere's going to be no message\nthat sender, there's only going\nto be a message dot sender when\nwe're inside of a function. So\ninside here, we might say I\nowner equals message dot sender.\nAnd then of course, we'll scroll\ndown and we'll change this\nrequire only owner now equals i\nowner. Now if we compile that\ndeploy up, we can see how much\ngas we can see how much gas\ncalling I owner is going to be\nby with immutable notice, we get\n21,508, which we'll go ahead and\ncopy for now. And we'll put\nright here, we'll say,\nimmutable. Now, if we remove the\nimmutable keyword, let's close\nthis redeploy. If we scroll down\nto I owner, screw up the logs,\nwe go down to the call, scroll\ndown, we see the execution cost\nwas much more. So we'll do the\nbackslash, a seven here, yes, or\nnon immutable. So you want to\nkeep some of these tricks in\nmind, when it comes to storing\nvariables. The reason that these\ntwo save gas is because instead\nof storing these variables\ninside of a storage slot, we\nactually store them directly\ninto the bytecode of the\ncontract. And like I said, don't\nworry too much about that for\nnow, later on in the course,\nwe'll teach you more about\nstorage and a lot of this low\nlevel stuff that comes to these\ncontracts. But for now, just\nknow that these exist. And\nthey're nice gas savers, if\nyou're only setting your\nvariables once. Alright, great.\nSo we've just made our contract\na little bit more gas efficient,\nlittle gas efficiency\nimprovements are going to be\nconcept I sprinkled throughout\nthis course. And when we get to\nthe more advanced section, I'm\ngoing to break down exactly\nwhat's going on and why all\nthese gas efficiencies exist and\nwhat's going on behind the\nscenes for these gas\nefficiencies to occur. It's a\nlittle bit in the weeds, which\nis why I'm going to gloss over\nit right now.\nSo if it's confusing, don't\nworry, I wouldn't let these gas\nefficiencies be the thing that\nslow you down. Awesome. So we\nhave these two gas\noptimizations? How else can we\nmake this contract a little bit\nmore gas efficient? Well, one of\nthe ways we can make this more\ngas efficient, is by updating\nour requires right now with our\nrequire statement, we actually\nhave to store this sender is not\nan owner as a string array,\nevery single one of these\ncharacters in this errorlog\nneeds to get stored\nindividually, this string may\nnot seem very big, but it's a\nlot bigger than the alternative\nwith what we can do. As of zero,\npoint 8.4 of solidity, you can\nnow actually do custom errors.\nFor our reverts, we declare them\nat the top and then use ifs,\ninstead of require and then just\nadd a revert statements. This\nends up saving a lot of gas,\nsince we just call the error\ncode, as opposed to calling the\nentire string associated with\nthe air. So for example, with\nour require down here, and with\nactually with all of our\nrequires, well we could do is\ninstead of having this require\nwe could create a custom error.\nSo at the top, what we could do\nis we could say error, not\nowner. And you'll notice that\nthis is actually outside of the\ncontract here. Now what we can\ndo is we can take this error not\nowner scroll down into our only\nowner, instead of doing a\nrequire we'll do an if\nstatement, we'll say if message\ndot sender is not owner, then\nwe're going to go ahead and\nrevert with a non owner error.\nThis ends up saving us a lot of\ngas, since we don't have to\nstore and emit this long string\nhere. Now in a lot of code\ntoday, you'll still see require\na lot of places because these\nthese custom errors are pretty\nnew in solidity. So you'll want\nto get used to writing in both\nways. I wouldn't be surprised if\nin the future, the syntax for\nsome of these errors looks like\nthis so that it's more readable.\nBut for now, if you want to do a\nmore gas efficient way than\nrequired, you can use something\nlike this, we could update all\nof our requires here for these\ncustomers. But for now, I'm\ngoing to leave both in just to\nshow you the differences. This\nrevert keyword does the exact\nsame thing that required us\nwithout the conditional\nbeforehand. So you can actually\ngo ahead and revert any\ntransaction or any function call\nin the middle of the function\ncall. Now let's look at one more\nway to improve this contract.\nSometimes people will try to\ninteract with the contract that\ntakes Aetherium or the native\nblockchain token without\nactually going through the\nrequired function calls that\nthat are needed. For example, on\na JavaScript EVM here, I could\nactually try to send this\ncontract money without calling\nthe fund function. However, if I\nwere to do that, what would\nhappen with our fund function\nget triggered? No, it wouldn't\nget triggered, we wouldn't keep\ntrack of that funder, we\nwouldn't have that person's\ninformation updated in this\ncontract. So if later on we want\nto give rewards or something we\nwouldn't know about those\nfunders. And this wouldn't be\ngreat because people would send\nour contract money without us\never knowing and we wouldn't be\nable to give them any credit or\nanything. Additionally, maybe\nthey called the wrong function\nby accident, and they they\nweren't using Metamask. And they\nweren't using a tool to tell\nthem, hey, this transaction is\nlikely going to fail. So what\ncan we do in this case? What\nhappens if someone sends this\ncontract, ether without calling\nthe fun function? Right now, if\nwe were to send this Funmi\ncontract, ie it would just go to\nthe contract Right, and this\ncontract just wouldn't keep\ntrack of those people. But\nthere's actually a way for when\npeople send money to this\ncontract, or people call a\nfunction that doesn't exist for\nus to still trigger some code.\nAnd now there are two special\nfunctions in solidity one is\ncalled receive, and one is\ncalled the fallback. Now in\nsolidity, there are actually a\nnumber of special functions and\ntwo of these special functions\nare the receive special\nfunction. And the fallback\nspecial function, a contract can\nhave at most one receive\nfunction declared using the\nreceived external payable.\nWithout the function keyword.\nThis function cannot have\narguments cannot return anything\nand must have external\nvisibility, and a payable state\nmutability. What does that\nactually mean? And or look like?\nWell, let's create a separate\ncontract to go ahead and play\nwith this. So in here, we're\ngoing to create a new file\ncalled fallback example, dot\nsoul. And in here, we're going\nto add our basic pieces, SPX\nlicense identifier, MIT pragma,\nsolidity zero, point 8.7. And\nwe'll do contract fallback\nexample, like so, feel free to\npause the video to catch up to\nthis point, let's recreate our\nfallback contract, let's create\na variable to go ahead and try\nto test this function, we'll\ncreate a un 256 public result\nvariable. And let's create this\nreceive function. So we'll say\nreceive, it's going to be an\nexternal payable.\nfunction, we don't add the\nfunction keyword for receive,\nsince solidity knows that\nreceive is a special function\nwhenever we send Aetherium or\nmake a transaction to this\ncontract. Now, as long as\nthere's no data associated with\nthat transaction, this receive\nfunction will get triggered.\nWhat we can do in here now is we\ncan say result equals one. So\nlet's go ahead and test this out\non the JavaScript virtual\nmachine, we compile this, so\nwe're gonna go ahead and compile\nthis. And we'll go deploy it on\nthe Java Virtual Machine, we're\ngoing to deploy our fallback\nexample. And we're going to see\nwhat result is initialized to,\nsince we haven't set anything\nfor result, result, of course,\nis initialized zero. But what if\nwe were to send this contract\nsome Aetherium? Well receive\nwould go ahead and be triggered\nhere, we can actually send this\ncontract some material directly\nby working with this low level\ninteractions. But here, don't\nworry about what call data means\nfor now, just know that this\narea down here is a way we can\nsend and work with different\nfunctions. And we can add\nparameters to this transaction,\nby going up here and adjusting\nthe variables up here. If we\nkeep called Data blank, it'll be\nthe same as if we were in\nMetamask. And just hitting send\nin the choosing this contract\naddress. Again, we can't\nactually use Metamask, since\nthis is a virtual machine, and\nnot one of the networks that\nwe're working with. So if I do,\nfor example, I change this value\nto one way, and I keep\neverything blank. And I go ahead\nand hit this transaction button,\nwhich again, is going to be the\nsame as hitting this Send\nbutton, but only sending one\nway. What do you think will\nhappen? Well, let's try it. We\ncan see in the log area that we\ndid indeed send a transaction.\nAnd if you look at the\ndescription here, you can even\nsee it says from so and so to\nfall back example, dot receive,\nit looks like it called our\nreceived function, which should\nhave updated our result to one.\nSo if we hit result, now we can\nindeed see that result has been\nupdated to the value of one.\nWell, let's go ahead and delete\nthis. Let's deploy this contract\nagain. And this time, let's have\nthis value be zero, does receive\nget triggered this time. So\nlet's pull this down. Let's hit\ntransact. Let's leave the call\ndata blank, we'll leave value at\nzero. So this will be the same\nas if we had sent zero Aetherium\nto this contract. Let's hit\ntransact. It looks like that\nwent through, do you think\nresult is going to be one or\nzero? You thought one you were\ncorrect or receive function gets\ntriggered anytime we send a\ntransaction to this contract\nnow, and we don't specify a\nfunction. And we keep the call\ndata blank when working with any\nother contract like Funmi. For\nexample, when we call one of\nthese functions, we're actually\njust populating this call data\nbit with certain data that\npoints to one of these functions\nup here. If we send a\ntransaction and we add data to\nit, we could actually call one\nof these functions. Now let's\ntry this again. Let's delete the\ncontract again we'll redeploy\nopen this up result is currently\nzero receive like I said only is\ntriggered if our call data to it\nis blank. Now this time if I had\nsome call data to this\ntransaction, do you think\nreceive will be triggered this\ntime? If we hit transact and\nremix we actually get a pop up\nsaying fallback function is not\ndefined. This is because\nwhenever data is sent with a\ntransaction solidity says, Oh,\nwell, since you're sending data\nyou're not looking for receive,\nyou're looking for some\nfunction. So let me look for\nthat function for you. Hmm, I\ndon't see any function that\nmatches the 0x 00. So I'm going\nto look for your fallback\nfunction. Remix is smart enough\nto know that we don't have a\nfallback function. The second\nspecial function in solidity is\ncalled the fallback function.\nThis is very similar to the\nreceive function, except for the\nfact that can work even when\ndata is sent along with\ntransaction. So our fallback\nwill look something like this\ncallback,\nexternal payable. result equals\nto Fallback is another one of\nthese functions where we're not\ngoing to put the function\nselector because solidity is\nexpecting this, actually, you're\nalready familiar with one other\nspecial function, we go back to\nour Funmi. Our constructor, for\nexample, is a another type of\nspecial function. There's no\nfunction keyword. solidity knows\nthat this constructor is\nimmediately called when we\ndeploy this contract. So now we\nhave our fallback function.\nLet's go ahead and compile this.\nLet's delete our old contract.\nLet's go ahead and deploy this\nnew contract. Like here, we hit\nresult, we do indeed, see, it's\nset to zero. Now, if I add this\n0x 00, and I send this, and I\nhit transact, this is equivalent\nto calling our contract here\nwithout a valid function. So our\ncontract goes, Huh, I don't\nrecognize what you're trying to\ntell me here, I'm going to refer\nyou to our fallback. And now if\nwe hit result, we see that it's\nbeen updated to two. If we take\nthis away, solidity will go,\nHmm, it looks like you're trying\nto send some Aetherium, or call\nthis contract without specifying\nwhat you want to do. Well, I\nhave a receipt function. So I'm\njust gonna go ahead and forward\nyou to that. So if we call\ntransact, we hit result, we see\nit updates back to one, add some\ndata, hit transact, we see it\nupdates to to no data, updates\nto one slowly by example, that\norg has a wonderful little chart\nthat we can use to figure out\nwhether or not receive is going\nto get triggered, or Fallback is\ngoing to get triggered. If it is\nempty, and there's a receive\nfunction, it'll call the receive\nfunction. If it is data, and\nthere's no receive function,\nit'll just go to the fallback\nfunction. And if there's no\nfallback function, it might just\nit might air out. So this is a\nlot of really fantastic\ninformation here. How can we\napply this to our fund mi\ncontract here, or what we can do\nnow in our Funmi is we can add\nthese fallback and receive\nfunctions, just in case somebody\nactually sends us contract money\ninstead of calling the fund\nfunction correctly. So what we\ncan do is let's add a receive\nfunction. So if somebody\naccidentally sends it money, we\ncan still process the\ntransaction will say receive is\ngoing to be external payable.\nAnd we'll just have the receive\nfunction call fund. And we'll do\nthe same thing with our fallback\nfunction will have fallback\nexternal payable. We'll just\nhave it automatically call fund.\nNow, if somebody accidentally\nsends us money without calling\nour fund function, it'll still\nautomatically route them over to\nthe fund function. This means to\nthat if somebody doesn't send us\nenough funding, it'll, that\ntransaction will still get\nreverted. So let's go ahead now.\nAnd let's switch to rink B to\ntest this on a real test net,\nAmman rink B and my Metamask.\nLet's switch over to injected\nweb three. And we'll scroll down\nwe'll choose our Funmi contract.\nAnd we'll go ahead and deploy\nthis Metamask pops up, I'm gonna\ngo ahead and confirm the\ntransaction. And we see our\nFunmi contract here right now we\ncan see the owner we can see I'm\nthe owner, we can see minimum\nUSD. And we can see of course\nthat it's a blank contract, and\nthere's nothing funded in here.\nIf we the copy the address, and\nthen go to rink the ether scan,\npaste the address in, we can see\nthat there's no ether in here.\nAnd the only transaction\nassociated with this has been\nthe contract creation. We saw\nwhat happened before when we hit\nthe fun function, our contract\nwas updated with a new balance,\nand that funder was added to our\nan array. Let's see what happens\nnow if we just directly send\nthis contract money without\ncalling the fund function here.\nIf we did this right, our\nreceive function should pick it\nup and kick the transaction over\nthe font. So let's copy this\naddress. We'll go to our meta\nmask. We'll hit send, paste the\naddress in here with 0.02 eath.\nAgain, because this should be\nmore than the minimum amount in\nUSD, we'll hit next. I'll go\nahead and confirm this. After a\nslight delay, if we did this\nright, we should see the\ntransaction having called the\nfund function here, now that our\ntransaction has gone through\nAfter a brief delay in waiting\nfor ethers can update, we do\nindeed see that our balance has\nupdated to 0.02, which of\ncourse, this makes sense. And we\nsee in the transactions list\nhere, we see that this actually\nwent through as a, as a transfer\ninstead of us calling the fund\nfunction. Let's go ahead and\nremix and see if our funders was\nupdated.\nIt looks like it was at the zero\nwith position of funders, we\nhave our address. And if we take\nour address and pop it into\naddress to amount funded, we can\nsee exactly how much we had\nfunded. This means that since we\nadded this receive function in\nhere, we automatically had to\ncall our fun function up here.\nSo awesome work, we were able to\nadd a receive function to help\npeople who accidentally call the\nwrong function or accidentally\nsend this contract money,\ninstead of correctly calling the\nfun function. Now, if they had\ndirectly called the fun\nfunction, it would have cost\nthem a little bit less gas, but\nat least this time, they're\ngonna get credit and add it to\nour funders array for having\nsent our funding contract money.\nWe've even learned some advanced\nsections of solidity. And this\nis going to be the last time\nthat we start our projects in\nremix, we're going to be moving\nover to a code editor now, where\nwe can get even more advanced\nwith our solidity on our setups.\nFor the most part, you've gone\nover the vast majority of\nsolidity basics, there are a\nnumber of things that we still\nhaven't learned yet. And the\nreason we haven't gotten into\nthem is because they get more\nadvanced. And understanding the\nreal use doesn't really make too\nmuch sense until a little bit\nlater. Some of the things that\nwe're going to go over are itams\nevents, try catch function\nselectors, abi encoding,\nhashing, and then you will slash\nand then you will slash\nassembly. However, if you've\ngotten this far, you probably\ncan read most solidity code and\nunderstand what's going on,\nwhich is absolutely fantastic.\nSo you should give yourself a\nhuge round of applause for\ngetting this far. And doing\nthis. Let's do a quick summary\nof this more advanced section\nand make sure we understand what\nwe learned in solidity there are\na couple special functions. Some\nof them are receive fallback,\nand Constructor. These functions\ndon't need to have the function\nkeyword. And instead it can just\nbe called like so. Receive and\nfallback are two very special\nfunctions. If data is sent with\na transaction, and no function\nwas specified, the transaction\nwill default to the fallback\nfunction if that fallback\nfunction exists. If data is\nempty, and there's a receive\nfunction, it'll call the receive\nfunction. There are a couple of\nkeywords that can help us save\ngas in the long run. Some of\nthose keywords are going to be\nconstant and immutable. Constant\nand immutable are for variables\nthat can only be declared and\nupdated once. Once we say\nminimum USD is 50 times 118.\nThis minimum USD can never be\nchanged again. And this helps us\nsave gas. Immutable can also\nsave gas similar to constant.\nHowever, immutable variables can\nbe declared one time in the\nconstructor, once an immutable\nvariable is declared, it can't\nbe changed later on. In fact, if\nwe even tried to update an\nimmutable variable or constant\nvariable, and we compiled, a\ncompiler would give us an error\nsaying, Can't write to a mutable\nhere. Or if we tried to change a\nconstant variable. Our compiler\nwould say, Hey, you can't assign\nto a constant variable, sorry.\nIn remix, if we want to send\nether to a contract that's on\nthe JavaScript virtual machine,\nwe can deploy that contract. And\nthen in the contract, we can\njust hit the transact button\nwithout any call data and update\nthe value that we send with the\ntransaction. If call data is\nblank, it will trigger the\nreceive function if it exists.\nBut if there's data that doesn't\nspecify any of the other\nfunctions, it'll trigger the\nfallback function\nAwesome, you've done\nfantastically to get this far.\nAnd for this section before we\nget started actually moving over\nto Hardhead. And moving over to\nJavaScript and understanding why\nwe need to do that. Let's\nunderstand a little bit about\ngetting help and running into\nproblems. So let's say we have\nour Funmi contract here that we\njust worked on. And we run into\nan error. Let's say for example,\nwe forgot the payable keyword,\nright, and we go ahead and\ncompile this compile fund, we\ndid so. And we scroll down. And\nwe see obviously, we have two\nerrors here, right, we're\ngetting some errors, and we\nscroll down. And we see type\nerror message dot value and call\nvalue can only be used and\npayable public functions, make\nthe function payable or using an\ninternal function to avoid this\nerror. And then it goes ahead\nand gives the line that's\nairing. Now this error is pretty\nclear, this error code is pretty\nclear. It's saying Hey, make the\nfunction payable, or using an\ninternal function to avoid this\nerror, right? This should be\npretty easy to to add payable,\nand then recompile and be good\nto go. And this is actually a\ngood example of what to do when\nyou run into errors. When you\nrun into errors. The first thing\nyou want to do is you want to\ntry to figure out exactly what's\ngoing on yourself based off of\nwhat the error says. This one's\npretty straightforward, but some\nof them can be a little bit more\nobscure step one when trying to\nget unblocked trying to tinker\nand figure out errors yourself,\nright? Because maybe you go\nokay, I'll make this payable,\nright? And you go to save. And\nthen it gives a different error\nsaying, hey, you know, payable\ndoesn't go here. You resave you\nrecompile it goes, Hey, we're\nstill missing that payable\nthing. First step is always\ngoing to be trying to tinker and\nfigure it out yourself. For this\ncourse, I want you to limit\ntinkering, slash triaging to 20\nminutes, if you take more than\n20 minutes to tinker and triage,\nthen move on to the next step.\nBut I also want you to take at\nleast 15 minutes yourself or be\n100% Sure, you exhausted all\noptions, you're completely out\nof ideas. So typically try to\ntinker try some stuff for 15\nminutes. And if you're under 15\nminutes, and you're saying, Hey,\nI'm 100% Certain I've tried\neverything that I can think of,\nthen you can move on to the next\nstep. So step one, when you run\ninto errors is always going to\nbe tinker and try to pinpoint\nexactly what's going on. Try to\npinpoint exactly what's going\nwrong. Step two, let's say you\ntinkered and you tried payable\nall over the place, and you\ncouldn't figure out what this\nerror was and how to debug this\nhere. Step two is always going\nto be Google the exact error and\nsee if you can learn from that.\nSo zoom out a little bit, I'll\nroll my mouse over this, grab\nthis, copy it, or quotes around\nit, and do exactly that, in\nGoogle search that exact error\nand take some time going through\nGoogle going through Stack\nOverflow going through Stack\nExchange eath, and look to see\nif somebody has asked this\nquestion already. And it looks\nlike down here looks like\nsomebody has type error missed a\nvalue and call though can only\nbe used on PayPal public\nfunctions. And if we scroll\ndown, we see that somebody ran\ninto exactly this. And they went\nahead and solved it. They go, I\nrealized my mistake, I needed to\nadd the PayPal keyword to my own\nimplementation. And they go\nahead in this question, they've\nadded the payable. And hopefully\nthis would give you the insight\nto say, Ah, okay, great. I do\nneed to come back here and add\npayable. Let's say this\nStackOverflow question didn't\nshow up. Right? This forum\nwasn't here. What do we do next?\nSo step one, tinker. Step two,\nGoogle the exact error, I'm\ngoing to do a step 2.5 That only\nis for this class, go to our\nGitHub, repo discussions, and or\nupdates for this course,\nspecifically, go to this GitHub\nrepo, full blockchain solidity\ncourse, Jas, it'll look a little\nbit different when you all get\nto it. But come to this repo,\nand look in this chronological\nupdate section to see if there's\nan update on that section that\nyou're doing. Obviously, since\nI'm recording right now, there's\nno update. And if you don't get\nanything, feel free to jump into\nthe discussion section. And ask\na question in here, right,\nthere's going to be a community\nof people looking to help each\nother out and looking to make\nthis a lot of fun. And the\nreason I say 2.5 is because in\nthe real world, you're not going\nto have our GitHub repo, when\nworking on stuff outside of this\ncourse, you're not going to have\nthis GitHub repo. So instead, in\nthe real world, I'm still going\nto give you the keys, I'm going\nto give you what it takes to\nstill unblock yourself on\nanything. Okay. So number three\nis going to be asked a question\non a forum, like stack, exchange\neath and Stack Overflow. Stack\nOverflow is a question and\nanswering tech forum like this,\nright? You can ask tech\nquestions, and then you can\nanswer them as well. And as you\ncan see, when you search for\nthese issues, they'll show up so\nStack Overflow is more for\ngeneral Role programming\nquestions and Stack Exchange\nAetherium or Stack Exchange eath\nAetherium Stack Exchange, this\nis for more Aetherium or EVM\nbased question and all the\nsolidity code that we're gonna\nbe working with, whether it's\npolygon, whether it's avalanche,\nwhether it's whatever, those\nquestions are going to be valid\nhere, and you can ask here. So\nwhat you'd want to do is you'd\nwant to sign up or log in, and\nask and format your questions on\nthese forms, you'll want to sign\nup for GitHub, you want to sign\nup for Stack Exchange, you'll\nwant to sign up for Stack\nOverflow, so you can participate\nin these forums. In fact, if you\nhaven't already, let's sign up\nfor GitHub right now. And let me\nwalk you through formatting one\nof these questions, because the\nbetter you format your\nquestions, the better chance you\nhave of actually getting the\nanswer. And remember, when\nasking questions on these\nforums, when asking questions,\nin these discussion communities,\npeople answer these questions\nout of the goodness of their\nheart, right? So if you don't\nget a response, there's a chance\nthat maybe nobody knows, maybe\nit's your question isn't\nformatted very well, and etc. So\nwe're going to learn how to ask\nreally good questions here. And\nif you're new to blockchain, do\nnot skip this section. Okay,\nthis is going to be that piece\nthat's going to give you the\nsuperpower to unblock yourself\nfrom any coding issue you run\ninto. So don't skip this\npowerup. Be sure to follow\nalong. Okay. So if you don't\nhave a GitHub already, you do\nneed an email to get started. So\nI'm going to go ahead and sign\nin, I made a burner account just\nfor this video. So what we're\ngonna do, we're gonna go ahead\nand sign up GitHub, enter your\nemail\nand we hit Create Account,\nthey're going to send us an\nemail. So we're going to come\nback to our email, and we got\nour launch code here, paste it\nin. And so a little bit of\ninformation. We're going to\nchoose the free version. and\nfantastic. We've now created a\nGitHub profile. Now back over in\nthe smart contract kid full\nblockchain solidity course, Jas,\nI'm going to create a new\ndiscussion, a new thread, and I\nwant you all to comment on to\nmake sure you understand how to\nformat and how to ask questions.\nOkay, general thread for\npracticing. Question formatting.\nOops. And so let's go back here.\nSo first, I'm going to format\nthis question poorly, two ways,\nand then we're gonna format it\nreally, really well. So the\nfirst way we're going to format\nit poorly, is by not giving\nenough information. So what\nwe're going to do is I'm gonna\njust copy this issue we're going\nto do is we'll just say like,\nHey, I'm having trouble with\nremix and an error. Can someone\nhelp me? Why is this not a well\nformatted question? If this is\nmy question, there's not nearly\nenough information here, I, as a\nhelper, have no idea what this\nperson's asking. So let's do\nsomething else. What I'm going\nto do is I'm going to copy this\nentire contract all the fun,\nread outsole, paste it in here,\nand go, Hi, I'm having issues\nhere. Can someone help? I'm\ngonna head start discussion here\nwant to hit start discussion, it\nformats this all weird. And once\nagain, there's not really enough\ninformation here. I don't know\nwhat the issue is. But at least\nwith this one, we have some\ncode, we have some way to\nactually debug. So this is a\nlittle bit better. But it's\nstill not that good. Let's go\nahead and edit this. To make\nthis even better. We hit three\ndots, we can hit edit, what we\ncan do is we can use something\ncalled Markdown syntax, and\nhighly recommend learning a\nlittle bit of markdown, it's\nbasically some syntax help make\ndiscussions on GitHub. And also,\nquestions on Stack Overflow and\nStack Exchange a lot easier. So\nwe're going to format this code\nby adding these three backticks\nat the start, and then also at\nthe end of our code. And then\nadditionally, next, the first\nthree backticks, we're going to\ntype so lid did T which tells\nthe format or to to use solidity\nto format this code here. Now if\nwe update discussion, we notice\nwe get some nice highlighting\nhere. So this becomes much, much\neasier to read. Right? This is\nway easier to read now than than\nit was before. However, it's\nstill not specific enough. We've\ngiven a ton of code here, and we\nhaven't given the specific\nanswer. So this is gonna be\nreally hard for somebody to\nanswer. So let's make this more\nspecific. So let's edit this\nquestion again. And let's\nspecify, so we see here, our\nissue is specifically on this\nfunction. We're going to copy\nthis function and we're going to\ndelete everything else in here.\nAnd now we have just this code\ninside of here. Now we're going\nto make this really specific.\nWe're going to say, on this\nfunction, I'm running into an\nerror. And then what we're going\nto do is we're going to come\nback here, we're going to roll\nthe over this. We're going to\ncopy this we could have pull our\ncode if we want but we're going\nto format this error like this.\nAnd then we're gonna say Can\nsomeone tell me What's going on?\nUpdate? Now this is a much, much\neasier question to debug. Right?\nWe have some minimalistic code,\nwe have the error that we're\ngetting. And we have Can someone\ntell me what's going on?\nObviously, the answer to this\nwould be to add payable to this.\nAnd that's what somebody would\nsay, hey, like, you need to add\npayable to this, I want you all\nto practice doing some\nformatting, go ahead and add a\ncomment on this with your own\nformatted question. So that you\nunderstand how to actually do\nthe formatting. And this\nmarkdown format. It's this\nformat here, that's gonna be the\nexact same for asking questions\non Stack Overflow, or Stack\nExchange for this course, go\nahead and practice if you want\nto create more new discussions,\nfeel free to create new\ndiscussions. If you want to use\nStack Overflow or Stack Exchange\neath actually highly recommend\nyou Stack Overflow or Stack\nExchange eath as well, because\nthose are gonna get indexed a\nlot better than GitHub here.\nHowever, feel free to ask\nquestions, obviously, in this\nGitHub as well. Now that I've\ngiven you kind of the basics\nrundown, we're going to watch a\nvideo that I made that goes even\ndeeper into why and how to\nformat all these questions and\nwhat to use. So let's go ahead\nand watch that. Every developer\nhas run into this. Something\nbreaks or maybe you don't know\nsomething, but you don't have\ntime to let these stop you.\nThere are a series of steps that\none should take to maximize\none's chances of solving any\ncoding problem, but you'd be\nsurprised at how few developers\ncurrently use the superpower\neffectively, our first one we'll\nspend the least time on, because\nit's just tinker and experiment.\nWhen you run into an issue. Keep\ntrying different things you\nthink might work, maybe try\ndoing print statements\nthroughout the file, learn some\ndebugging tips, but don't be so\ncocky that you only do this\nfirst step. And this shouldn't\njust be random running around.\nThis should be trying to\npinpoint exactly what's going\nwrong in your code, so that you\ncan either ask an effective\nquestion, or figure it out\nyourself. So pinpoint exactly\nwhat's going wrong, because\nyou'll need it for the next\nsteps. Anyways, next, check the\ndocumentation. Not all tools\nhave good documentation. But\ntaking some time to explore\ndocumentation can be a quick way\nto find your answer, you'll want\nto learn how to search a webpage\nwith Command F or Control F.\nThat way, you can look for\nspecific keywords on a page, or\nhopefully they have a good\nsearch bar that works well.\nSometimes documentation can be\nreally dense. So maybe you'll\nmove to the next step, which is\ndoing a web search. At the end\nof the day, good software\nengineers are secretly just\nprofessional Googlers. And this\nis one of their most powerful\ntools, being able to search the\nweb for somebody else who has\nalready run into the problem\nthat you've just run into, and\nthen solved it. Most search\nengines like Google have tools\nyou can use to get even more\nspecific about what you're\nlooking for. Often for specific\nerrors, the best thing to do is\nactually just copy the exact\nerror and paste it in the search\nbar with quotes or use the\nAsterix in spots, your error\nmight be too specific. Most of\nthe results you'll get will be\nfrom forums and q&a sites, which\nleads us to our next step,\nasking questions in these forums\nand q&a sites. Just make sure\nthat before you ask a question,\nyou've done some ample Googling\naround yourself beforehand. This\nway you don't waste yours and\nanybody else's time. And by\nasking questions that you swear\nyou will promise me that at some\npoint, you will go back and help\nother people learn as well got\nit good. Before even asking your\nquestion though, we should learn\nwhere is going to be the best\nplace to ask. This is why I've\ncategorized for different types\nof forums and QA sites, feel\nfree to pause to read them over.\nAnd here's some specific\nexamples of each one of these\nindex code base forms like Stack\nOverflow, index repositories\nlike GitHub issues, index\ntechnology, specific forums,\nlike our slash eat dev or\nunindexed discussion platforms\nlike chainlink discord, one of\nthe key differentiators in these\ncategories is the index keyword.\nWe typically want to ask\nquestions on forums that web\ncrawlers have gone through and\nstuck them in their database or\nindex them this way. And three\nweeks when we look back at the\ncode that we wrote, we can just\nGoogle what was going on when we\nforget what it does. And this\nwill help out other developers\nwho run into the same problem,\nwhich in turn, they might go\nahead and help you out later.\nIdeally, most of your questions\nshould be asked on one of these\nindex forms for this reason for\ntheir searchability and\ndiscoverability. However, at\nsome questions are a better fit\nfor DMS, Twitter or discord that\naren't index and we made a\nlittle chart here to figure out\nwhere's the best place to post\nyour questions, feel free to\npause the video take a look or\nread our blog and the\ndescriptions with the picture as\nwell to take another look at it.\nAnd of course, before actually\nposting that in one of these\nforums, be sure to read their\nrules as they might state that\nsome kind of questions are\nspecifically for Ben. But\nbasically the breakdown looks\nlike this. Theoretical big\npicture or opinionated questions\ncan go great on general q&a\nforums like Quora or specific\ntechnical forums like specific\nsubreddits or discord forums,\nspecific coding questions can go\non these forums as well, but\nwill often get more eyes on\ncoding forums like Stack\nOverflow or Stack Exchange\ncommunities often the question\nof Oh, should I post this on\nstack URL? flow or maybe a Stack\nExchange community is incredibly\nblurry. And sometimes it doesn't\nreally matter which one you post\non. Now, if you run into a bug\nor an issue with a technology\nyou're really familiar with, and\nyou think it shouldn't be\nbreaking, this is your chance to\npop an issue into their open\nsource code repository and\npotentially improve the tool.\nThey don't have an open source\ncode repository, you throw that\nclosed source piece of shit into\nthe garbage, but just kidding\nclosed source Tech has its place\nin our lives, too. Additionally,\nif you're following a tutorial,\nand they have a Git repo\nassociated with it, like all of\nmy videos that do, that's gonna\nbe the best place to leave your\nissues. So as much as I hate to\nsay it, putting your issues onto\nmy GitHub repositories is going\nto be much more effective for us\nanswering your questions than\nposting it in the YouTube\ncomments. Now finally, Discord,\nelement, email, text message or\nany other these unindexed chats\nare still good places to ask\nquestions, but please try to use\nthem as a last resort. And if\nthey do end up answering one of\nyour questions, maybe go back\nand add that question and answer\nto one of the other forums that\nwe were talking about this way\nit will be indexed next time you\nor somebody else, Google's it\nnow these quicker chat forums\nare places more for the\ncommunity to congregate and have\nquick conversations with each\nother. They're places to theory\ncraft, talk about new things\ncoming out new ideas, events,\nand other things that shouldn't\nbe indexed by web crawlers.\nThey're also great places to\nmeet and network with people\nthat you might be able to bounce\nideas off directly as you get to\nknow each other, which leads\ninto our last section. But\nbefore we do that, Oh, do you\nhear that? Oh, that's the video\ninside another video alarm\nringing. When you ask a question\nin one of these forums, the\nbetter you format your\nquestions, the better chance\nyou'll have of getting an\nanswered. Now there's no bad\nquestions out there. But there\nare poorly formatted questions.\nSo let's teach you how to always\nask questions as format as best\nas possible to give you the\nhighest chance of making sure\nthey get answered. Number one,\nbefore asking your question,\nmake sure you followed all the\nsteps in the parent video. And\nyou've done some research on\nthis already and make sure the\nquestion hasn't already been\nasked. Number two, make a title\nthat summarizes the specifics of\nthe question three introduced\nthe problem before you write any\ncode, add minimalistic,\nreproducible code minimalistic\ncode means it's not just a copy\npaste your entire file. If\nyou're having problems on one\nline, maybe just post that one\nline reproducible code means\nthat others should be able to\nrun to the exact same error that\nyou're running into, or at least\npost the steps for them to do\nit. This doesn't mean that you\nshould put I was following along\nPatrick's video and on our five\nI ran into this problem, just\nwatch his video and you'll get\nthere. As flattering as this is\nit's not reasonable that\neveryone is going to have\nwatched my videos, even though\nthey should you want to give the\ntechnical steps to reach the\nerror that you've reached. For\nthose of you watching my Free\nCode Camp video, you're kind of\nexempt from this, but you can\nonly say, Hey, I was on our Five\non this part of your video\ninside of our discussions tab of\nthe GitHub repo associated with\nthis course. So you can do that.\nBut only in that GitHub repo\nassociated with this course,\nlearning markdown to format your\ncode, especially using these\nthree backticks and labeling of\nthe language. This is a critical\npiece of formatting your code\nand will drastically improve on\nthe number of people who answer\nyour questions. Any errors or\ncode should be formatted with\nthis three backticks syntax. And\nfinally, often people who care\nabout certain technologies,\nmonitor specific tags and\nmonitor specific questions being\nasked about the technologies\nthat they like. And then\nfinally, again, be sure to read\nthe forum's guides before\nposting different forums have\ndifferent rules about what they\nwant and what they don't want.\nSo being familiar will increase\nyour chances of getting an\nanswer. All right. So now back\nto the main video. Now a note\nabout Stack Overflow, in\nparticular, Stack Overflow can\nbe a little aggressive, which is\nwhy sometimes posting on\nspecific community forums might\nbe better for your specific\ntechnology questions. If you\npost on Stack Overflow, and you\nget a ton of down votes on your\nquestions. Don't let that bother\nyou. Just take it as a learning\nopportunity to learn about what\nStack Overflow likes and doesn't\nlike and just keep going but do\nnot let that discourage you.\nOkay, well, now that we know\nwhere things should go, where\nquestions should go and how to\nactually format them. Let's\npractice let's look at some\nsample questions that you might\nhave. And we'll figure out where\nwe want to put them. So the\nfirst one, where does this one\ngo? Feel free to pause and guess\nyourself. So a question like\nthis is going to be great for a\nReddit or a discord? Probably\nmore a discord. Now, this is\ndefinitely something that you\ncan search for. Right? So you\nprobably could search for this,\nfind an answer and go from\nthere. But maybe you want to ask\na buddy or maybe you want to ask\na very specific community like\nour slash eat Dev. Now, of\ncourse, if you see this\nquestion, you obviously want to\nrecommend Patrick Collins his\nYouTube channel. Now how about\nthis question. Notice its\nformatting right? The title is\nnice and big. They have a\ntechnical command that is\nformatted properly. They have\nGit commit which is formatted\nproperly, where would this go\nlike this would definitely do\nvery well on a Stack Overflow or\nan index code based forum to\nvery clearly try had to do\nsomething technical. The problem\nis laid out very clearly. And\nthey've given the command that\nthey're looking to do. Now, how\nabout this one, something like\nthis could go on either\nStackOverflow. But it's probably\nmore likely going to go on a\nGitHub issue for this brownie\npackage. A big difference\nbetween code forums and and Git\nrepos like GitHub is that when\nyou make an issue on a GitHub\nrepository, especially when you\nthink there's a problem, you do\nwant to be as in depth as\npossible. So oftentimes, when\nmaking an issue on these repos,\nthey'll even ask, what version\nare you using? Can you post all\nyour code? Can you post all your\nfiles and just be much, much\nmore explicit? So how about\nsomething like this. So this is\ngoing to be really good for the\nGitHub repo associated with this\ntutorial, it looks like this\nperson is asking about a very\nspecific tutorial. So posting\nthis, there is going to be best.\nNow if your question is on a\ntutorial that doesn't have a\nGitHub repo, well, they probably\nshould. But then maybe this is\nbetter in the comment section.\nNow, again, this is where this\nall becomes a little bit more\nart than science, because maybe\nthe specific error that they're\nrunning into is a generic error\nthat a ton of people run into,\nand maybe it is better on\nStackOverflow. Or maybe there's\nan issue with the package. So\nmaybe it is better on GitHub. Or\nmaybe the solution to this is\nopinionated. And finally, what\nabout this? Yep, this is going\nto be much better for a discord\nor a DM with your buddy. And\naway, it's our last step on\nblocking you from any question\nis going to be join and\nstrengthen the community of your\ntool. Now at the start, it's\ngoing to be hard for you to give\nback since you're not going to\nbe very knowledgeable on these\ntools. But as you get better at\nthese technologies, you'll want\nto try to answer some of these\nnew questions that do come in.\nThe reason is because this will\ngive you a chance to actually\nlearn more about the tools that\nyou like, it'll strengthen the\ncommunity of your favorite\ntools, meaning if you help\nanswer questions on tool, it'll\nactually encourage other people\nto use the tool because there's\na strong following there. And\nlikely, they might actually help\nyou sometime in the future, you\nhelping people will make you\nlook like a good person. And\nthen you'll also feel like a\ngood person. Additionally, in\nmany forums like Reddit,\noftentimes, mods will actually\nlook at how often you post\nversus how often you help others\nand comments on others people\nposts and some mods may actually\nstart blocking your posts for\nabusing the forums and not\ngiving back to the community and\nonly trying to take knowledge\nyou in the community will be\nmore successful if you join in\nand help others and not just try\nto extract things from other\npeople. Additionally, by\nengaging with the community, I\ncan't tell you how many people\nI've met and I've learned and\nbeen able to brainstorm with.\nAnd then the final step is going\nto be iterate through these\nsteps. Maybe you get to the end\nof these and you say, Oh, I'm\nstill blocked, but you'll likely\nbe much, much more\nknowledgeable. So you want to go\nback and try these steps again.\nNow this is where this whole\nprocess is a little bit more art\nthan science. Because some\nquestions might not have been\ndiscovered yet. Only very few\npeople know not enough people\nunderstand the importance of the\nquestions, or maybe people don't\nunderstand your question. And\nthis is why it's important to go\nback and iterate on these steps.\nNow that you have the basic\nbuilding blocks of this\nincredible superpower, I\nencourage all of you to go out\nthere and try this and then let\nme know how it went.\nAlright, awesome. So now that we\nknow more about how to get\nunblocked, we can move on. The\nreason it's so important to\nlearn how to get unblocked is\nbecause blockchain and web three\nis more than just everybody on\ntheir own. It is a very\ncollaborative space. So as you\nget better, and as you learn\nmore a massive way to test how\nmuch you've learned and give\nback to the community is to\ngoing to Stack Overflow and\ngoing to stack exchange them and\ntrying to answer some questions\nyourself. So I highly recommend\nyou all go to Stack Overflow,\nand then you go to the GitHub\nrepo associated with the scores,\nyou try to answer some\ndiscussions, try to answer some\nissues and help other people out\nbecause it's going to help you\nbecome a much better software\nengineer. The other reason I\nwant to do that part is because\nwhen we install some of the\ntools that I'm about to show\nyou, sometimes the installation\nprocess is the hardest piece\nthere. Once you get past the\ninstall process, it generally\nbecomes much, much easier. But\nthis can often be the hardest\npart of the course is just\ninstalling some of these tools\nthat we're going to give you.\nAnd that's what we're going to\nlearn about right now. So we\nhave been working so far with\nremix, remix IDE, or integrated\ndevelopment environment. As\nwe've seen, it's this wonderful\nplace where we can try out code\nwe can try solidity out, we can\ncompile we can deploy, we can\npretty much do everything that\nwe need to do. It's web based.\nIt can do testing, debugging,\ndeploying local JavaScript VM,\nit's very quick and easy to\ncreate and test our smart\ncontracts. However, it does have\nsome limitations. It can really\nonly deal with smart contract,\nit can't really integrate with\nother parts of projects. It has\nlimited support for tests or\ncustom deployments. And you need\nan internet connection to even\nwork with remix and it can be\ntricky to do a lot more advanced\nfunctionality. So it's a\nphenomenal tool and absolutely\nif you're looking to do\nsomething very quickly, I\nabsolutely recommend everybody\njust go to remix to go ahead and\ntry something out how are now\nwe're going to move over to a\nmore professional smart contract\ndeveloper setup. And this is\nwith hard hat. This is known as\na smart contract developer\nframework similar to brownie or\nfoundry or, and likes, there's a\nnumber of these frameworks. And\nthe reason that we're going to\ndo hard hat is because hard hat\nis JavaScript based. It's a\nJavaScript based development\nenvironment. It's got JavaScript\nbased compilation, environment,\ndeploying, testing, debugging.\nNow, for those of you who love\nTypeScript, we will also have\nTypeScript editions of every\nsingle one of our code examples\nfor you. So if you love\nJavaScript, we got you, if you\nlove TypeScript, we also got you\nwe're not always going to walk\nthrough us doing the TypeScript.\nBut we will sometimes, and all\nof the code for the TypeScript\nwill be available in the GitHub\nrepo. Now, before we can\nactually learn hard hat, we have\nto learn another package first.\nSo we're going to learn how to\ndo everything with ethers. Jas,\nwhich is a JavaScript based\nlibrary for working with smart\ncontracts. And it's also what\npowers the next tool that we're\ngoing to be working with, which\nis hard hat under the hood of\nhard hat. There's a lot of\nethers Jas. So it's important\nfor us to learn ethers Jas so\nthat we can understand what hard\nhat is actually doing. Now for\nthe rest of the course, I'm\ngoing to be using a code editor\ncalled Visual Studio code. This\nis one of the most powerful code\neditors on the planet. And if\nyou've already got it set up,\nfeel free to go ahead and skip\nthis part. If you already have a\nprofessional coding setup with\nno GS and VS code, and Git and\neverything, feel free to use the\ntimestamps in the GitHub\nrepository. To skip over this\nsetup section. You'll often hear\npeople refer to this as VS code,\nor Visual Studio code or just\nVisual Studio. However, it's\nimportant to note that Visual\nStudio code this is different\nthan Visual Studio, which you\nmight see look like this. So\nVisual Studio code is what you\nwant, not Visual Studio, Visual\nStudio is a different\napplication, make sure you're on\nVisual Studio code. Now, if you\nchoose so and you're a total\nHarto, you can absolutely work\njust with your terminal, or just\nwith PowerShell, or just with\nwhatever coding environment that\nyou want, like atom or Sublime.\nHowever, for us, we're going to\nbe working with Visual Studio\ncode. And I'm going to be going\nthrough setting up Visual Studio\ncode the way that I like to set\nit up, you can actually set it\nup whatever way that you feel\ncomfortable. And of course, in\nour lesson six here, we have a\nlink to installation and setup.\nAnd I'm going to be adding more\nlinks as we go about here. And\nonce again, all the code that\nwe're going to be working with\nis in this GitHub repository\ndown here where it says code.\nNow we're gonna go through three\ndifferent installation processes\nand pick the one that's most\nappropriate for you. The first\none is going to be for Mac and\nLinux users. The second one is\ngoing to be for Windows users.\nAnd then our third one is going\nto be a last ditch effort. If\nfor whatever reason, you can't\nget Windows or Linux or the Mac\ninstructions to work, we're\ngoing to use a Git pod\ninstallation. Now, I highly,\nhighly recommend that you try to\nget everything working locally\nwithout using Git pod. However,\nif for whatever reason, you\ncan't get those installation\npieces to work, we will have Git\npod instructions for all of the\nrepos that we work with here.\nBut to get started, we'll start\nwith the Mac and Linux\ninstallation instructions.\nThe first thing you're going to\nwant to do is download the Mac\nor if you're working with Linux,\ndownload the Linux installation\nof Visual Studio code. Once you\nhave it installed, it'll look a\nlittle something like this. And\nif it's a fresh installation,\nIt'll even give you some tips\nand tools to actually get\nstarted. If you've never worked\nwith Visual Studio code before,\nI highly recommend going through\nany get started or getting\ninstructions tips that come with\nopening Visual Studio Code.\nAdditionally, we have a Visual\nStudio Code crash course in the\nGitHub repo associated with this\ncourse. Once you have Visual\nStudio code installed, the next\nthing that we're going to want\nto install is going to be node j\ns. And again, we have links to\nall of these in the GitHub repo\nassociated with this course, you\ncan just go ahead and click\ndownload for Mac OS or download\nfor Linux, I recommend using the\nLTS version. lts stands for long\nterm support, which means that\nthey will be supporting this\nversion for a long time. So go\nahead and download Node js. I've\nalready downloaded this, so I'm\nnot gonna go ahead and\nredownload this now one of the\nawesome things about Visual\nStudio code is it has this thing\ncalled terminals, which are\ncommand line prompts that allow\nus to run scripts, basically,\nit's where we're going to be\nrunning all of our code where we\ncan open up the terminal is we\ncan go ahead and hit terminal\nand select new terminal and\nyou'll get something like this.\nNow you might have bash or Z ca\nor some other type of shell type\nthat you have doesn't really\nmatter because on Mac and Linux\nit's going to be Linux based we\ncan now test our no Jess\ninstallation has been done\ncorrectly by running Node dash\ndash version, and you should see\nsomething that looks like this.\nThe exact version of node that\nyou have doesn't really matter\nhere. But ideally you're at\nleast on Node version 14 or\nhigher. And if something like\nthis doesn't show up, remember\nto go ahead and start looking at\nStack Overflow looking on the\nGitHub repo in the discussions\ntab, looking on the updated\nsection, etc. And like I said,\nsometimes installing this can be\nthe hardest part of this entire\ncourse so, so don't get\ndiscouraged. And please use\nStack Overflow Stack Exchange\nEtherium, and the GitHub repo to\nmove past any issues you run\ninto. Now, if you're on Mac or\nLinux, you can actually hit Ctrl\nback tick, to actually toggle\nyour terminal mode, this will\npull the terminal up and down\nfor you getting familiar with\nkeyboard shortcuts will actually\nmake your life a lot easier.\nBecause you'll be able to move\naround Visual Studio code much\nmore effectively, we have a link\nto a list of keyboard shortcuts.\nAdditionally, in the GitHub\nrepository associated with this\nsection, as we move along, I'll\ngive tip on different keyboard\nshortcuts that you can\noptionally use otherwise, you\ncan just go ahead and click as\nwell, you can click the trash\ncan to delete the terminal, go\nback up Terminal new terminal to\npop it back up. Now the next\nthing that we're going to need a\nlittle bit later, we're not\ngoing to need it for this\nsection, but it's good to\ninstall it now is going to be\ngit no jazz is known as a\nJavaScript runtime. And it's a\ntool that we're going to use to\nhelp run JavaScript code in our\nVisual Studio Code slot exactly\nJavaScript. And the difference\nbetween no Jas and JavaScript\ncan be a little bit confusing,\nbut don't let that stop you for\nnow. Next, we're actually going\nto go ahead and install Git, we\nwill have links to the\ninstallation instructions in the\nGitHub repository, installing\ngit on Linux, you're going to\nuse one of these two commands\nand on macOS, if you just type\ngit on the command line, it\nshould go ahead and prompt you\nto install it. So we're back in\nour command line, and we just\ntype git, it should prompt you\nto go ahead and stall it. And if\nyou do get dash dash version,\nyou should get something that\nlooks like this. You can also\nuse a Mac OS get installer by\nclicking this link here and\nrunning through the installation\nprocess. Alright, now that you\nhave no JS yet in Visual Studio\ncode installed, we can continue\non to the next section. Awesome.\nIf you're not planning on using\nWindows or get pod, feel free to\nskip the next two sections.\nI'm running this on Windows 11.\nHowever, it should work on most\neditions of Windows. So the\nfirst thing that we're going to\nwant to install is Visual Studio\nCode, which looks something like\nthis, it should auto detect it.\nAnd we're gonna go ahead and\ndownload this for windows in a\nwalk through all the\ninstallation process. Go ahead\nand create a desktop item, we'll\nadd this just in case we want to\nopen with code. And we'll go\nahead and install. And then\nwe'll go ahead and finish. Once\nyou've installed Visual Studio\ncode, you'll see something that\nlooks a little like this, it'll\ngo ahead and give you this get\nstarted with VS Code section\nwhere you can choose some\nthemes, and you can choose kind\nof the way it looks feel free to\ncustomize it the way that you\nwant. If you want to learn a\nlittle bit more about Visual\nStudio code, I highly recommend\nyou walk through this section to\nlearn more about the shortcuts\nand making your development\nexperience more efficient. When\nyou're done, you can just go\nahead and close the tabs at the\ntop. And it'll look a little\nsomething like this. Once we\nhave Visual Studio code\ninstalled. The next thing that\nwe're going to want to install\nis node j s. And of course, we\nhave a link to installing this\nin the GitHub repository\nassociated with this course,\nwhat we're going to do is we're\ngoing to go ahead and come to\nnode j s.org. To download this\nfor Windows node. JS is a\nJavaScript runtime environment,\nit's not exactly JavaScript. And\nthe distinction can be a little\nbit confusing, but just know\nit's going to help us run our\nJavaScript code for our\ndevelopment environment. Let's\ngo ahead and download the LTS or\nthe long term support edition of\nno GS. We'll go ahead and we'll\nrun through the setup wizard.\nAnd we'll go ahead and make sure\nthat this is clicked just in\ncase we ever want to use some\ndifferent tools with our setup.\nAnd then we'll go ahead and\nclick Install, you'll get a pop\nup asking if you really want to\ninstall this on your device. And\nwe'll go ahead and hit yes. And\nthen we'll hit finish, you might\nget a pop up that looks like\nthis, go ahead and click any\nbutton to go ahead and install\nthe tools, go ahead and press\nany key again. And you'll likely\nget a Windows PowerShell screen\npop up asking you to go ahead\nand install a whole bunch of\ndifferent projects and files. If\nyou chose not to install this,\nthat's totally okay. But in the\nfuture, this will be really\nhelpful since we are going to\nuse a lot of tools that this\npackage installs anyways, this\nmight take some time to install.\nSo go ahead and be patient. And\nif it gets stuck, it might just\nbe waiting for you to go ahead\nand hit enter. So go ahead and\nhit Enter for any prompts. But\nyes, please be patient with\nthis, it can be a little bit\nslow to go ahead and install\neverything. Once you have all\nthat installed, you can come\nback to Visual Studio code. And\nwe're going to go ahead and open\nup a terminal. To do that we hit\nterminal and we hit new terminal\nterminal is going to be our\ncommand line prompt where we're\ngoing to basically run all of\nour scripts to work with our\ncode. And if you run Node dash\ndash version, you should see\nsomething that looks like this\nto know that you've installed\nNode js correctly. Now this\ncommand line is known as Windows\nPowerShell. If you want to work\nwith Windows PowerShell, you\nabsolutely can. In fact, if you\nwant to be a total Harto, and\nwrite all your code through\nWindows PowerShell, you can\nabsolutely do that as well.\nHowever, we're actually not\ngoing to be working with\nPowerShell We're going to be\nusing a tool that makes our\nWindows environments more like\nLinux. The reason that we're\ndoing this is Linux is the\nstandard for most development\nenvironments. And having\neverybody work on a very similar\nsetup will make the rest of this\ncourse a lot easier for everyone\nto interact with each other, no\nmatter what coding environment,\nthey're working on. WsL stands\nfor Windows subsystem for Linux,\nand allows Linux programs to run\nnatively on our Windows\nenvironments. To get this setup,\nwe're gonna go ahead, go to the\nWsL install. And we'll have a\nlink for this as well in our\nGitHub repository. So what we're\ngoing to do, you must be running\na Windows 10, version 2004 or\nhigher, or Windows 11. If you're\nusing an older version of\nWindows, you can absolutely\ncontinue with PowerShell. But\nyou might run into some issues\nwhere all the commands don't\nwork exactly the same. So I\nhighly recommend working on a\nnewer version of Windows. To\ninstall this back in your Visual\nStudio Code, PowerShell, or just\nthe PowerShell app, or running\nWsL dash dash install. Now if\nyou get this error, the\nrequested operation requires\nelevation, it means that we have\nto run our Visual Studio code or\nour PowerShell application as\nadministrator. We close out our\nVisual Studio code. And right\nclick it and say, Run as\nAdministrator, we get a little\npop up saying Do you want to\nallow this app to make changes\nto your device, we'll go ahead\nand click Yes. And then we'll\nreopen the terminal. And then we\ncan run WsL space dash dash\ninstall. And we'll go ahead and\ninstall WsL. This may take a\nlittle bit so please be patient.\nOnce it's completed, you'll see\nsomething that looks like this,\nwe're going to be working with\nUbuntu. And we have a list of\ndifferent commands to change\nyour Linux distribution. If you\nchoose to do so. And you'll see\nthe request set operation is\nsuccessful changes will not be\neffective until the system is\nrebooted. So you'll want to go\nahead and restart your computer.\nThere's also a troubleshooting\nguide in the GitHub repository.\nIf you run into issues after you\nrestart your computer, you'll be\nprompted for a name for your new\nsystem and a password. This can\nbe different from your Windows\nname and password, and then just\nfollow through with all the\nprompts. And then once you're\ndone, you'll be dropped into a\nUbuntu shell, and you can run\nLinux commands. Now you'll have\na Ubuntu instance, on your\nmachine. And you'll be able to\nrun Linux commands in your\nterminal. Now that we have WsL\nset up correctly, we're going to\nhead back over to Visual Studio\ncode. Once we have WsL, we'll\nwant to go ahead and install an\nextension. So in our Visual\nStudio code, we'll go to\nExtensions, and we'll look up\nremote development you can\ninstall the whole thing or just\nremote WsL we're gonna install\nthe whole thing you can follow\nalong to get started with remote\nWsL if you like, or you can just\nfollow along with me right now.\nRight now if I go to the\nterminal and hit new terminal,\nI'm still gonna get PowerShell\nwe actually want this to be our\nLinux shell. So there are a\ncouple ways to open Visual\nStudio code up in our Linux\nenvironment. One way is you're\ngonna hit Ctrl, Shift P and type\nWsL. And then click remote WsL\nnew WsL window, and you'll get a\nnew window that looks like this,\nyou can also click the bottom\nleft and choose New WsL window.\nNow if we go to our terminal and\nhit new terminal, we'll be\ndropped into a bash shell and we\ncan run Linux commands in here.\nAwesome. Another way we can open\nup Visual Studio code with WsL\non is we can go into our your\nboon to application, we can make\na folder by typing MK dir\nfolder, we'll CD or change\ndirectory into folder and type\ncode period. We'll go ahead and\ntrust the authors in here. And\nthis will open up Visual Studio\ncode already connected to the\nfolder that we're in. And we can\ncreate files in this folder like\nhi dot txt, and those will get\ncreated inside the folder in our\nWsL. Now that we're inside our\nWsL environment, you'll notice\nthat node dash dash version\ndoesn't work anymore. That's\nbecause we installed it on our\nregular Windows machine and not\non our WsL or Linux environment.\nThe reason we installed it on a\nWindows environment first is\nthat just in case you wanted to\ngo ahead and use PowerShell or\nuser Windows environment to run\neverything you still can just\nremember if you use the Windows\nenvironment and PowerShell all\nthe commands that we use might\nnot work for you. So we're gonna\ngo ahead and install Node js on\nour Linux environment. Now, all\nthe commands that we're going to\nwrite are going to be in the\nGitHub repo associated with this\ncourse. We're going to do a curl\ncommand to the nvm repository,\nwhich stands for node version\nmanager.\nAnd we're going to pipe the\ninstall script into bash. And\nthis will go ahead and install\nand VM. After running that, go\nahead and trash the terminal,\nand then reopen it. And then we\ncan type MBM dash dash version\nto see if it actually installed\ncorrectly. Once we've installed\nnvm, we can go ahead and install\nno GS using nvm. Just type npm\ninstall, and we'll do 16 point\n14.2 Is that same long term\nsupport version we installed on\nour Windows machine. Once we\nhave it installed, we can type\nin Node dash S version. And now\nwe have no JS installed. Now I\nknow there was a lot here, but\nif you made it this far, this is\nfantastic. You've done a great\njob to push through to this\npoint and get everything set up\nso you can code in the best\nenvironment there is. So if\nyou've made it this far, huge\ncongratulations. Now the next\nthing that we're going to\ninstall is Git. And now we're\nnot going to use Git for this\nlesson. However, we will\ndefinitely be using it in the\nfuture. See if gets installed\ntype git dash dash version,\nsometimes Linux will\nautomatically come with Git\ninstalled and you'll see\nsomething output like this. If\nyou don't have Git, we can just\nlook up the get install. Which\nagain, link to this is in the\ndescription. And you'll actually\nrun the installing on Linux. Now\nagain, now if you want to use\nPowerShell, and you want to do\neverything with Windows, you can\nabsolutely follow the installing\non Windows instructions here\ninstead, when you're working in\nWsL, you'll want to use the\nLinux commands instead of the\nwindows commands even though\nyou're on a Windows because WsL\nmakes it so that you're\nbasically running in a Linux\nenvironment. And now if you've\nmade it this far, you should be\nable to follow along with the\nMac and Linux instructions as if\nyou're running on a Mac and\nLinux even though you're running\non Windows. Just be sure that\nwhenever you're in your VS code,\nyou take a look at the bottom\nleft and make sure you're on WsL\nUbuntu. Like I said before, if\nyou want to run in PowerShell,\nor in a Windows environment,\nyou're more than free to do so.\nBut like I said, if you've made\nit this far, huge\ncongratulations. Awesome work.\nAnd then finally, our last setup\nis going to be using a tool\ncalled Git pod starting from\nLesson five. The lesson that\nwe're on right now, ethers,\njazz, simple storage, all of our\ncode repos are going to come\nwith a button in the repo scroll\ndown, they'll come with this\nopen in get pod button. Now git\npod is a cloud development\nenvironment where you can\nactually run your code on a\nremote server, it's kind of\nsimilar to remix IDE, but it\nallows you to run Visual Studio\ncode in the browser or connected\nto another server. This is good\nbecause then you don't have to\ndo any installation on anything.\nSince all the tools that you can\nwant to use are just going to be\nrunning on this remote server.\nThis has its downsides, though,\nobviously, since you'll only be\nable to code if git pod is up\nand working for you.\nAdditionally, when it comes to\nprivate keys, you absolutely do\nnot want to run any code with a\nprivate key that has real money\nin good pop. Why? Well, once\nagain, since you're running your\nscripts on a remote server,\nthose servers have access to\nyour private keys. But since\nyou've Pinky promise that for\nthis course, you're not going to\nbe using a meta mask or a\nprivate key with actual money in\nit, it should be fine. The other\ndownside is that these often\ncost money to use and get pot\nisn't free. But it's an option\nif you absolutely cannot get any\nof the installation working. So\nif you go ahead and you hit this\nopening get pod button, you'll\nget a welcome to get pods\nshowing up. We're gonna go ahead\nand continue with GitHub. Since\nyou've signed up for GitHub\nhere, you want to go ahead and\nauthorize get pod. And it'll go\nahead and start creating this\nworkspace for you. And you'll\nnotice it looks exactly like\nVisual Studio Code. Since I\nopened the repo up in Git pod,\nit came with all the code, and\nyou can even open this workspace\nup in VS code desktop. So this\nis might be a little bit\nconfusing. But basically, you\ncan run off of Git pod using\nyour local Visual Studio code.\nAnd if you see git pod here,\nthat's how you know that you're\nrunning off of Git pod. If you\nsee this pop up, do you want to\nopen this workspace in VS code\ndesktop, you can hit Open. And\nit'll ask you if you want to\nopen up Visual Studio Code,\nwhich I'm going to go ahead and\nhit yes. And you'll get\nsomething that looks like this\non your Visual Studio Code.\nIt'll tell you that it wants to\ninstall the Git pod extension,\nand then open that Git pod URL.\nSo you can go ahead and install\nit. Reload window and open and\nit's going to go ahead and start\nconnecting to our the Git pod\nworkspace. And this is going to\nbe the same as running git pod\nin the browser here. Or you can\nalso do it manually by hitting\nthe Git pod in the bottom left,\nand then type in open in VS code\nAnd then you should be able to\nrun it in your Visual Studio\ncode. For now, I'm going to\nrecommend that if you're using\nGit pod, just stay in the\nbrowser, just so that you know,\nokay, I am running this on a\nremote server. And just as a\nreminder for you that you're not\nactually locally developing. And\nhopefully, this will be a\ntrigger to not actually put any\nspecial private keys or anything\nlike that. But you can make\nworkspaces, you can make new\nfolders, and you should be able\nto run all the commands on here,\nas if you are running locally\nwith Visual Studio code. To open\nup the terminal, you can hit\nthis little bar at the top left,\ngo to terminal, new terminal, or\nuse CTRL tilde exact same as Mac\nOS and Linux keyboard shortcuts\nto create a new folder, we can\nchange directory, CD, dot.mk,\ndir, new folder, MK dir makes\nmake directory called New\nFolder. And then we're going to\nchange our directory into a new\nfolder, and hit enter. And now\nwe're in that new folder. For\neach section, you can either\nopen up the entire source code\nright into GitHub, or you can\ncreate a new folder for each\nsection yourself and start from\nblank. And then you would just\ntype code period. And you'd be\nin a brand new folder. All\nright, this is fantastic. At\nthis point, you should be set up\nwith Visual Studio Code no Jas\nand get. And I'm going to be\nworking out of a folder called\nHard Hat Free Code Camp at this\npoint, you should have node,\ndash dash version, get dash dash\nversion. And if you're using\nWindows, this should say WsL or\nyour boon to or something like\nthat. And if you have all that,\nthat means we're ready to go.\nNow a quick note something that\nyou'll see me do a lot. And you\ncan do this as well. Oftentimes,\nwhen my terminal gets really,\nreally big, or there's a ton of\ncommands in here gets a little\nbit overwhelming for me. So one\nthing that you can do is you can\ntype clear, and hit Enter to\nclear it. Or what you can do is\nyou can hit Command K, if you're\non a Mac, or Ctrl K, if you're\non a Linux or a Windows, and\nit's one of my favorite keyboard\nshortcuts that I use all the\ntime. Additionally, the trash\ncan and the X here are very\ndifferent. If I go to a couple\nof enters here, and we're down\nhere, if I hit the trashcan, and\nthen pull my terminal back up,\nby doing the toggle, or by doing\nterminal new terminal, you'll\nsee all those lines are still\nhere. But if I hit the trashcan,\nand then pull the terminal back\nup, you'll see it actually\nrefreshes mine a special command\nthat prints stuff out. trashing\nyour terminal is basically\ndeleting whatever's running in\nit, and the x is just hiding it.\nAnd as hitting Ctrl tilde or\ntoggling our terminal or\nwhatever command it is on your\nenvironment, that's equivalent\nto hitting the hide, not the\ntrash. So if we want to remove\nand start a terminal over, we\nhit the trashcan, and then we\npull it back up. Alright, so now\nwe're gonna start working with\nethers. And we're going to start\nlearning to code, our\ntransactions and our contract\ndeployments and everything\nprogrammatically at a relatively\nlow level. And we're gonna learn\nhow to deploy and interact with\nthe contracts using the ethers\nJS package. Now to get started,\nI'm going to recommend you\ncreate a folder where you're\ngoing to put all of your\nprojects in it, I'm going to\ncreate a new directory called H\nH. hyphen, FCC, which stands for\nhard hat Free Code Camp. And\nonce we run that command, we can\ncd into hh FCC. And this is\nwhere we'll create all of our\nprojects for this course moving\nforward, so that we have them\nall in one place. Now to get\nstarted, whenever you create a\nnew project, you always want to\ncreate a new folder. So to\ncreate a new folder, we're going\nto do MK dir, and we're going to\ncall this ethers, simple\nstorage, like that. And now, if\nyou type ls, you'll see that\nthere is one folder named\nethers, simple storage. ls is\nhow you list all the contents of\nyour folder. You might have a\nlot of other folders in here, I\nonly have the one since I\ncreated this new folder for\nthis. Now what you can do, you\ncan type code, ethers simple.\nAnd then if you hit tab, it\nshould autocomplete for you. And\nif you enter, Visual Studio code\nshould open up a new Visual\nStudio code for you. That is\ninside of either simple storage\nif you open up your terminal\nnow, your home directory for\nthis workspace is going to be\nthrough simple storage as this\nis what pops up. If that doesn't\nwork for you, we can also do is\nyou can hit File, Open folder\nand then open the folder that\nyou just created or that you\nwant to open this again we'll\nopen up VS code. And if we open\nup our terminal we see we're\ninside of ether simple storage.\nThis is so powerful because as\nwe create files\nwe'll be able to See those files\nin our Explorer here, this\nbutton here stands for the\nExplorer. If we click it, we can\nsee the different files in here.\nAnd I'm going to go ahead and\nactually delete this file dot\ntxt, because we're not actually\ngoing to use that. Now it's this\npart of the course, where we're\nactually going to start jumping\ninto some JavaScript. Since this\ncourse is in JavaScript course,\nif you're unfamiliar with\nJavaScript, it might be a little\nbit tricky. If you want to come\ninto this with a better\nunderstanding of JavaScript and\nNode js, there is a Free Code\nCamp YouTube video teaching No,\nJas for beginners. And a link to\nthis will be in the GitHub repo\nassociated with this course.\nThere's also a JavaScript Free\nCode Camp video that I'm also\ngoing to put in the description\nfor this course, keep in mind\nthat JavaScript and Node js are\nslightly different. And we are\ngoing to go over some of the\ndifferences as we code along\nhere. But for the most part,\nlearning one means you've\nlearned the majority of the\nother. So if you want to pause\nand go through these videos,\nbefore continuing here, please\nfeel free to do so you don't\nhave to, you can absolutely\ncontinue on with the course as\nis. And if you get confused or\nstuck on some JavaScript piece,\nfeel free to pause, Google it\nand come back. But just to\nreiterate, you can check out the\nJavaScript programming full\ncourse. And also the Node js\nfull course, as those are both\ngoing to help you. Like I was\nsaying before, Node js is a\nJavaScript runtime. So it's not\nexactly JavaScript. But we're\ngoing to write our code in\nJavaScript. And if that's\nconfusing, just don't worry\nabout it right now. And as we go\nthrough this course, I'll show\nyou where the differences are.\nBut basically, you can think of\nno Jas and JavaScript kind of\nbeing the same thing. The big\nthing about Node js is it allows\nus to write JavaScript code in\nthe back end, as opposed to\nrunning JavaScript on the front\nend, JavaScript is made to be a\nbrowser run language, like\nrunning inside of, you know,\nChrome, brave Firefox, etc. No,\nJas allows it to become a a\nscripting language, a back end\nlanguage, which is why the\nsyntax between the front end\nJavaScript and the back end\nJavaScript or the no JS\nJavaScript are going to be a\nlittle bit different.\nAdditionally, as we go along in\nthis code, if you're familiar\nwith TypeScript, all of our code\nis going to come with a\nTypeScript edition. TypeScript\nis what's known as a statically\ntyped version of JavaScript. And\nit'll be it'll be this one.\nIt'll be TypeScript, not\nTypeScript edition. I'll go\nahead and fix that and remove\nthis one to make it clear.\nTypeScript is a type safe\nversion of JavaScript, which is\nthat's confusing, don't worry\ntoo much about that. But we are\ngoing to do all of our\nprogramming in JavaScript. And\nthen if the code is different\nenough, I'll show you how to do\nit in TypeScript as well.\nHowever, for most of them, we're\nnot going to show you the\nTypeScript editions, because\nit's going to be really similar.\nBut you can always refer back to\nthe GitHub repository to see all\nthe code for the TypeScript.\nNow, if you're new to this\nspace, I actually do recommend\nyou go ahead and start with\nJavaScript and learn how to do\nTypeScript later on. TypeScript\nactually catches bugs early on,\nmaking it a lot easier to code\nyour projects in the long run.\nHowever, it does take a lot of\nextra typing. And it can be a\nlittle bit frustrating learning\nhow types work for beginners,\nJavaScript is a little bit more\nloose as a language and lets us\nkind of do whatever we want, but\nit can cause a headache later\non. So if you do run into some\nissues, and you do run into some\nbugs, it might be a good idea to\ntry TypeScript on for size, and\nsee how that fares. Well. Let's\ngo ahead and begin working on\nour local development\nenvironment and getting set up\nto do everything in ethers Jas\nand in JavaScript. Oops. And I\nactually went and renamed this\nfolder to ether symbol storage\ndash, FCC. Reason I added this\ndash FCC is all the GitHub\nrepositories associated with\nthis course, all the GitHub\nrepos that have this dash FCC to\nknow that it is part of this\nhard hat JavaScript course.\nAwesome. Let's jump in. Let's\nstart working with solidity and\nour smart contracts locally in\nVisual Studio code, as you can\nprobably tell by the name of\nthis folder. And of course, if\nyou looked at the code, this\nproject is going to be our\nsimple storage project, but\ndeveloped locally using ethers.\nSo the first thing that we want\nto do is want to get in that\nsmart contract code. So what we\ncan do is make sure we have the\nExplorer selected, we can go\nahead and right click and select\nnew file and do simple storage.\nSo just close this for now. And\nwe can copy paste our simple\nstorage code from our last\nsection into VS code.\nIf you closed remix or you\nforgot where it is, you can just\ngo to the ethers simple storage\nFCC repo, it's simple storage\ndot Sol, and we can just copy\nall the code in here and then\ncome back over select Symbol\nstorage that Saul and paste it\nin. Now an important note about\nVisual Studio code is that when\nyou see this little white.up\nhere, it means that this file\nisn't saved to save your Git\nfile. To save, and it'll go away\nlike that. Or what you can do is\nyou can hit command S or Ctrl S,\ndepending on if you're on a\nWindows, Mac, or Linux. Now\nyou'll see here that this code\nis a little bit hard to read the\nsimple storage dot salt, it\ndoesn't have the syntax\nhighlighting that we saw in\nremix. So we want to go ahead\nand add a Visual Studio Code\nextension to give this syntax\nhighlighting. So what we can do\nis come over to this bar over\nhere looks like this. And if you\ndon't see it on the left hand\nbar, you should click these\nthree dots, and it should be in\nhere. But we'll go ahead and\nclick Extensions. And what we're\ngoing to do is we're going to\nlook up, solidity plus hard hat.\nAnd we're going to install this\nsolidity plus hard hat\nextension. For VS code. Now that\nwe have this installed, if we go\nback over to our simple storage\ndot sole, you'll see that all\nthe highlighting is back in. And\nnow it's much easier to read.\nRight? So this is good. We have\nour code in here we have our\nsyntax highlighting. Now let's\nadd an auto format or or default\nformat or right now our code is\npretty good with the way that\nit's formatted. But what if we,\nwe accidentally do some stuff\nlike this or like this, or maybe\neven like this, we add a ton of\nnew lines, etc, our code can\nstart to look pretty gross. And\neven though the code itself is\nfine, and it'll run the exact\nsame way, with all this extra\nwhitespace, it doesn't look very\ngood, right. And due to that, it\ncan be a little bit hard to\nread. What we want to do, then,\nwe want to open up our settings\nand adjust our vias code so that\nit auto formats whenever we\nsave, so whenever we save, so\nthat whenever it goes from the\nlittle white dot here to no\nwhite dot, this whole thing gets\nautomatically formatted to some\nlooks really nice. Okay. So what\nwe can do is we can open up our\ncommand palette to open up our\ncommand palette, you can hit\nView command palette, and we'll\nget a little pop up that looks\nlike this. Another way to open\nup your command palette is\nyou're gonna hit Command, Shift\nP, or Ctrl, Shift P, depending\non your Mac, or Linux or\nWindows. And what we want to do\nis we want to type in settings,\nand we're going to open Settings\nJSON, we don't want to open the\ndefault settings JSON. We don't\nwant to touch these. But we want\nto open our JSON settings.\nYou'll also notice there are\nuser settings and workspace\nsettings. These are pieces that\nwe can adjust as well. But we're\ngoing to just go right into the\nJSON settings. So So I already\nhave some stuff in here, but\nyours might be blank. Or you\nmight have some stuff in here as\nwell. So what we're going to do\nis if you have stuff in here\nalready, we're going to add a\ncomma, then we're going to do\nquotes, solidity. Close the\nbrackets, we're gonna do a\nlittle colon and something like\nthis. This means that we're\ngoing to apply some settings to\nour Visual Studio Code. Whenever\nwe're working with solidity, one\nof the things we're going to add\nin here is going to be an\neditor, Doc's default, for\nmatter. And you might even get a\npop up that tells you some\ndifferent things that we can use\nfor a default format or our\ndefault format, or is going to\nbe Nanak, foundation, dot hard\nhat, hyphens solidity. This will\nmean that any time we go to\nformat our code, it'll use the\nhard hat solidity plug in, as\nits default format, or the hard\nhat solidity plugin comes with\nsome formatting, and a lot of\nother really useful tools for us\nwriting our code. So now that we\nhave this part in, the next\nthing we're going to do is add\nformat on Save. If we haven't\nalready, we could add it in here\nin our JSON, but I'm going to\nadd it not in the JSON file, I'm\ngoing to add it in the overall\nfile. So if we open that command\npalette back up, and we type in\nsettings, open user settings,\nthis is another really good\nplace where we can look in add\nsettings with the UI. So these\ntwo do essentially the same\nthing. It's just that this one\nhas dials and a little bit more\ncontext versus settings that\nJSON just says Okay, give me the\nraw code for it. This tells us a\nlittle bit more. So you can use\neither one. But we're going to\nlook for format, on save. And\nyou're going to want this\nchecked if you haven't already.\nThis means that every time we\nsave VS code is going to try to\nformat our code for us. So now\nthat we have this checked, we\nhave settings dot JSON added in.\nAnd remember, we want to save\nthis. Remember, if you see this\nwhite dot, that means not saved.\nSo you're gonna want to save it\nand close it out. Let me close\nthis out too. If we come back in\nhere and we add a bunch of\nrandom new spaces or whatever,\nyou want to make it look a\nlittle bit ugly, and then we\nsave it. It should automatically\nreformat to look much nicer,\nright. So if we do something\nlike this, we'd save it\nreformats it to look much nicer\nthis one make them more readable\nfor you, and more readable for\nanybody else who looks at your\ncode. And it's just really nice.\nAnd this line of code for your\nsettings dot JSON is located in\nthe full blockchain study\ncourse.js. So you can also just\ncopy paste it, we are going to\nend up overriding that default\nformat or with another format\nare called prettier pretty soon.\nBut it's great to have a default\nformat or so that if you don't\nfeel like adding the prettier\ncode sometime in the future, you\ncan just rely on your default\nformatter. Awesome. While we're\ndoing formatting, let's also add\na default format or for our\nJavaScript code. And just to\ntest it out, let's go ahead and\ncreate our new file, we'll call\nit deploy dot Jas. And in here,\nwe can do something like\nfunction Hi,\nconsole dot log, hi, and then\njust add and then just make it\nlook kind of gross, maybe\nsomething like this. If you hit\nsave, and it does some auto\nformatting, that's great, you\ncan actually turn that off by\ngoing back to your command\npalette, and saying, Save\nwithout formatting. And that way\nit will be saved and not\nformatted. The way we can add\nsome other formatting here is\nwe're gonna install another\nextension, this one is going to\nbe called prettier. So we can\njust look up prettier and\nextensions here. And you'll want\nto install this prettier code\nformatter. So we're gonna go\nahead and install this. And\ngreat, now it's installed\nprettier is a form is a code\nformat, or that works for many\nlanguages like Python,\nJavaScript, and even solidity.\nAnd pretty soon we're going to\nuse prettier for both JavaScript\nand solidity. But for now, we're\njust going to use prettier for\nJavaScript, we can enable this\nby opening back up our command\npalette, we'll go to\npreferences, open Settings. And\nthe same way we added a solidity\nsection, we're going to add a\nJavaScript section. So we're\ngoing to add a comma here, some\nquotes, brackets, we're going to\ntype in JavaScript, close that\ncolon brackets. And we're going\nto do the same thing at the door\ndot default, or matter. Net\nwe're going to do and then in\nhere, we're going to do e s\nBENP, that prettier, hyphen VS\ncode. And this will make\nprettier the default editor for\nJavaScript. Now, like I said,\npretty soon, we're going to have\nprettier override both of these\nfor solidity and JavaScript. And\nwe're going to give prettier\nsome parameters so that no\nmatter who uses your code, they\nwill always have the exact same\nformatting. But now that we have\nprettier in here as the default\neditor, if we come back to\ndeploy dot j s, and we hit save,\nit should format to look a\nlittle something like this. Now,\nwe go ahead and we do something\nlike this. If we go ahead and do\nsomething like this, it'll\nreformat to look like look like\nthat. And then additionally, if\nyou want to go back to the\ncommand palette, open user\nsettings, not in JSON mode, and\nwe go to default format, or you\ncan actually even select the\ndefault format or for all\nlanguages, if you want to use\nprettier for all formatters.\nFeel free to go ahead. Alright,\ngreat, got our JavaScript\nformat, or in as well, let's\nstart writing some JavaScript\ncode.\nAwesome. So now that we have our\ncode in here, it's time for us\nto learn how to actually deploy\nour contract using JavaScript.\nThis is going to teach us a lot\nabout transactions and what's\ngoing on under the hood, and\neven what's going on under the\nhood in remix, and remix, we\nusually just hit a compile\nbutton, and then hit a Deploy\nbutton. And that's really it. In\nJavaScript, we're actually going\nto create our own functions that\nare going to help us do both of\nthose. And as I mentioned, this\nis the part of the course we're\ngoing to start working with\nJavaScript, and optionally,\nTypeScript if you like. Like I\nsaid, all of these sections come\nwith a TypeScript edition as\nwell. So let's set up our\ndeployed out js script to\nactually deploy our simple\nstorage dot soul. So how can we\nget started here? Well, let's\nfirst learn how to run a script\nusing JavaScript and Node J S.\nSo if you want to do a print\nline, or just print something\nout to your terminal, we can do\nsomething called a console dot\nlog. And if I do console dot\nlog, hi, I hit Save. And I open\nup my terminal. I can now run\nNode deploy.js. And it'll print\nout high node is how we say hey,\nwe want to run this JavaScript\ncode using Node js. Other\nlanguages you might be familiar\nwith, sometimes we'll do Python,\nyou know, deployed up py, or\nJava, C deploy dot Java, you\nknow, etc. But with JavaScript,\nsince the front end and back end\nJavaScript are different. We run\ncode on the back end with node.\nAnd with JavaScript, you can do\na lot of things that you'd see\nin something like solidity with\na little bit looser have a\nstructure. If I wanted to create\nsome variable, I could say let\nvariable equals five, this kind\nof similar into solidity like\nyou and 256, variable equals\nfive. But in JavaScript, we use\nlet or var or const. And then I\ncan print this out, I can do\nconsole dot log variable. And I\nhad saved JavaScript is optional\non whether or not you actually\nwant to have semicolons. Here, I\nthink prettier, defaults to\nputting semicolons. And we'll\nget rid of those in the near\nfuture in your terminal. Once\nyou start typing the name of a\nfile, if you hit tab, it could\nautocomplete the rest of the\nfile name for you node deploy\nhit Tab, it'll autocomplete and\nif we hit enter, now, we get Hi,\nand then we get five. Since this\nprints out Hi, and then it\nprints out five. JavaScript\nautomatically starts with\nwhatever code you have at the\ntop of the file. So it does\nconsole dot log first and\nvariable. And then this one as\nwell. However, a good practice\nis to actually wrap everything\nyou want to do in a main\nfunction, and then run that main\nfunction. But what we could do\nis up at the top here, we'd say\nfunction, mean, add parentheses\nand some brackets, a closing\nbracket at the bottom, and hit\nsave for its auto format. Right\nnow, if we run this, nothing\nwill happen, because we've\nwrapped all of our code in a\nmain function. So if I run it\nnow node deployed to Jess,\nnothing happens, because I need\nsomething to call the main\nfunction. So if I then take\nthis, this main function down\nhere, and I call main, our jobs\nfrom code is actually going to\nsay, ah, the first line of the\nscript is actually this main\nfunction here. So now if I do\nnode deploy dot j, s, it'll run\nhigh and five, which is what we\nwant. Now, this is going to be\nthe setup for most of our\nscripts moving forward,\nincluding the scripts that we\nwrite, when we get to hard hat,\nhowever, there is going to be\none major difference. Instead of\nregular functions, we're\nactually going to use something\ncalled async functions. And\nwe're going to do something\ncalled asynchronous programming\nto do this. Now, if what I say\nnext is really confusing for you\ndon't let it slow you down, feel\nfree to go ahead and watch that\nJavaScript course to learn more\nabout this. But I'll also let\nyou know, hey, this is an async\nfunction. Here's what we need to\nbe aware of when working with\nit,\nokay. But I do want to give you\na quick bit background on\nasynchronous programming. So\nfar, the programming that we've\ndone has been synchronous. And\nsolidity is an example of a\nprogramming language, that\nsynchronous, Synchronous means\nit just goes one line after\nanother. If our code looks like\nthis, this is synchronous write,\nour main function is the first\nthing that actually gets called.\nThen we do console dot log, that\nvariable equals five, and then\nconsole dot log. Again, this is\nsynchronous programming in\nJavaScript, all of our solidity\nis synchronously programmed.\nThere will be some exceptions to\nthis when working with oracles.\nBut for now, everything is\nsynchronous. JavaScript can be\nasynchronous, meaning that we\ncan actually have code running\nat the same time. A good example\nI like to use to understand the\ndifference is with cooking. In\nsynchronous programming, for\ncooking, you might put popcorn\nin microwave, wait for popcorn\nto finish. And then, and then\nmaybe you'll pour drinks for\neveryone. And now this is\nsynchronous programming. Now, it\nmight be a little bit weird for\nyou just to put the popcorn in\nthe microwave, and then just\nstare at it, waiting for it to\nfinish. And then pour the\ndrinks, you typically can pour\nthe drinks while your popcorn is\nin the microwave. And this is\nwhere asynchronous programming\ncomes in. If setting up for this\nmovie night, we're asynchronous,\nwhat you would do is you'd put\npopcorn in the microwave. And\nwhile the popcorn is in the\nmicrowave, or drinks for\neveryone, and then you'd wait\nfor popcorn finish, since\nthere's nothing left for you to\ndo, but it doesn't make sense\nfor you to wait for the popcorn\nto finish to pour your drinks,\nyou can just go ahead and pour\nthe drinks right away and then\nwait for the popcorn to finish.\nSo asynchronous programming is\nway for us to do stuff without\nwaiting around for things to\nfinish. And this is really\nadvantageous in JavaScript by\ndefault allows us to do this\nasynchronous programming,\nhowever, sometimes we do want to\nwait for our popcorn to finish.\nFor example, if instead of just\npouring drinks, maybe the next\nthing instead of pouring drinks\nwas placed salt on popcorn. Of\ncourse, if we want to play salt\non our popcorn, we do have to\nwait for the popcorn to get out\nof the microwave. So even though\nplacing popcorn in the microwave\nhas this wait time we need to be\nable to tell our code I want you\nto actually wait for it or No,\nyou're good. You can go on and\ndo another task. So that's kind\nof the difference here. And I'll\nleave some links in the GitHub\nrepo associated with this course\nto understand this a little bit\nbetter functions that have\nfunctions that come with this\nwaiting period return something\ncalled a problem. This, if put\npopcorn in the microwave was a\nfunction in JavaScript, it would\nbe a promise based function. A\npromise can be either pending,\nfulfilled, or rejected. And this\nis how we know if our popcorn is\ndone. If our popcorn was a\nmethod, putting popcorn in the\nmicrowave, were a function in\nJavaScript, when we're waiting\nfor the popcorn to finish, it's\nin a pending state. When it's\nwhen the popcorn is finished, it\nwould be fulfilled. And if we\naborted halfway through, and we\nstopped waiting, it would be\nrejected. So putting the popcorn\nin the microwave returns a\npromise. With this promise, we\nhave to tell our code, hey, we\nwant you to wait for the popcorn\nto finish or you can go ahead\nand you can just keep doing\nstuff. So let's put this all\ntogether with some JavaScript\nsyntax here. Let's say again,\nwe're going to be setting up\nthis movie night. And we need to\ncook popcorn, pour drinks for\neverybody. And then we need to\nstart a movie. So let's write\nsome pseudocode to pretend what\nthis code would look like if\nthis was actually a function. So\nwe create some function called\nsetup, Movie Night. And in here,\nwe would say okay, what's the\nfirst thing we need to do? Okay,\nwe need to cook popcorn. So\nlet's say we have some cook\npopcorn function. So we'll say,\nokay, cook popcorn, then the\nnext thing we're gonna have to\ndo is we're gonna have to pour\ndrinks, or drink. So we'll call\nsome pour drinks function. Now\nhere's the thing, we only want\nto start the movie once our\npopcorn has been cooked. And\nonce our drinks have been\npoured, so if either one of\nthese returned a promise, so if\neither one of these returns a\npromise, like cook popcorn, for\nexample, we would need to tell\nour code here to actually wait\nfor the popcorn to finish\nbecause cook popcorn is going to\nbe a function where we could say\nlet status equals cook popcorn.\nAnd while the popcorn is being\ncooked, the status is going to\nbe ending. Once the popcorn gets\ncooked, it'll be fulfilled. If\nthe popcorn breaks, the\nmicrowave explodes, the status\nwould be rejected. But we don't\nwant the status to be in a\npending situation. Before we\nmove on, we only want to start\nour movie once these two\nfunctions have completed. And\nlet's say both of these return\nthese promises things. So we\nneed to tell our code, hey, you\nhave to wait. Or you have to\nwait for cook popcorn and for\npoor drinks to finish. So what\nwe can do now without getting\ntoo deep into the weeds on how\nall this works, one of the\neasiest things that we can do\nand you'll see us use this\nsyntax quite often is we'll turn\nthis function into an async\nfunction. When our functions are\nasync, we get access to a\nkeyword called await the await\nkeyword tells any promise based\nfunction to wait for that\npromise to be fulfilled or\nrejected. So we say okay, we\nwant to await for our popcorn to\ncook. And then we want to await\nto pour drinks. And then we can\njust go ahead and start the\nmovie. And we only start the\nmovie here once these two have\nbeen completed. And this is why\nthroughout all of our code,\nyou'll see this await keyword\nused a lot. But it can only be\nused in async functions. So\nbasically, whenever you see this\nawait keyword just now Ah, okay,\nthe function that's being called\nis promise based. And we don't\nwant to move on to the next step\nuntil that function has\ncompleted. So that's a little\nbit more about promises and\nasynchronous programming.\nHopefully, that's clear. If not,\nlike I said, there's some links\nin the description to learn more\nabout asynchronous programming.\nThe reason I wanted to go\nthrough this is because most of\nthe functions that we're going\nto be working with are going to\nbe asynchronous. For example,\nwhen we deploy a contract, what\ndo we have to do? Well, we have\nto wait for it to be deployed.\nIf we don't use synchronous\nprogramming, and we just leave\nour function main like this,\nwhat would happen is we would\nwrite some code like contract\ndot deploy, and we wouldn't wait\nfor it to finish. Obviously, if\nwe don't wait for it to finish,\nand we try to run some code on a\ncontract that hasn't finished\ndeploying it, it's not going to\nwork. So we want to do this, we\nwant to have our main function\nbe an async function, so that we\ncan we can wait for our\ncontracts to deploy, we can wait\nfor things to happen, we can\nwait for our popcorn to finish,\nwe can have the flexibility to\ntell our code to either wait for\nour popcorn to finish or\ncontinue on. So now that we have\nour main function as an async\nfunction, we're going to add\nsome code to our main function\ndown here. And the code that's\nadded here is some syntax for\nworking with asynchronous\nfunctions. And if this part is\nconfusing, I'm just going to say\nfor now, absolute, don't worry\nabout this. If you want to try\nto understand that later. That's\nfine. But for those who are\nfollowing along, we're just\ngoing to add an add\nthen catch air air you can\nfollow along typing this\nyourself or you can just copy\npaste it into your code.\nBasically what this allows us to\ndo is we have our main function,\nthat's an asynchronous function.\nSo when we call the main\nfunction, this is some other\nsyntax for waiting for it to\nbasically finish and then\nprinting any errors it gets. And\nthat's why we do this but Again,\nif this big lump of code, if\nyou're like what is going on\nwith this big clump of code,\nhonestly, for now, just copy\npaste it. So great. We have our\nasynchronous function main, we\nhave some code. And then we have\nthis lump of code, which\nbasically just calls our main\nasynchronous function. Okay,\ngreat. I'm gonna delete all this\nfor now. But you can still find\nthat common in the GitHub repo\nassociated with this course.\nAwesome. Okay, so now that we\nhave our real basic setup, let's\ngo ahead and start coding. And\nif this set apart is confusing,\nand the async await stuff is\nconfusing, don't worry too much\nabout it. It'll make more sense\nas we progress. All of our code\nbasically is going to be inside\nof this async function main,\nwhich is going to be our main\nscript for deploying our simple\nstorage dot soul store deploy\nscript is going to replicate\nexactly what goes on in remix,\nin remix, what was the first\nthing that we always did? Well,\nthe first thing that we would do\nis actually compile all of our\ncode. So we're going to want to\ncompile our code in our\nJavaScript project as well. In\norder for us to compile our\nsimple storage contract, we're\ngoing to use a tool called Silk\nJas, and JavaScript actually has\na way to install projects\ndirectly into our setups and\ninto our folders. If we scroll\ndown this silk Jas is exactly\nwhat we're looking for. Because\nit has a way to compile a\ncontract that imports other\ncontracts via relative paths,\nyou can see a section in this\nreadme and most documentation\nwill have something like this,\nif it's JavaScript compatible.\nFor Node js usage, it says to\nuse the latest stable version of\nthe solidity compiler via Node\njs, you can install it via NPM\nnpm install. So NPM is what's\nknown as a package manager. And\nwe actually installed NPM just\nby installing no Jess, right, if\nwe do no dash dash version, you\nshould also be able to do NPM\ndash dash version. Another tool\nthat it comes with is something\ncalled core pack. And you can\ntype core pack dash dash\nversion, now we can install with\nNPM using npm install silk,\nhowever, I like the yarn package\nmanager a little bit better. So\nwe're actually going to install\nthe yarn package manager instead\nto do all of our package\nmanagement. If you go to the\ninstallation page, the newer way\nto install yarn is just by\nrunning core pack enable. And\nthe older way is to install with\nNPM. If you go ahead and run\ncore pack enable after that\nfinishes, you should be able to\nrun yarn dash dash version.\nAlternatively, you can just run\nNPM i dash g core pack, and then\nyou can run core pack enable.\nThe last option you have is you\ncan run NPM i dash g\nyarn. This will install yarn\nglobally for your system. But\nthis is considered the outdated\nway to install yarn. And ideally\nyou run core pack enable. But in\nany case, after you run those,\nif you run yarn dash dash\nversion, you should get\nsomething that looks like this.\nNow that we have yarn, we can\nactually use yarn to install all\nof our projects, instead of NPM.\nBack in silk Jas where it says\nnpm install soak, we can do the\nyarn equivalents of NPM install\nsock, which is going to be yarn,\nadd sock, this will actually go\nahead and install solc to our\nproject. If we open up our\nfolders, you'll actually see\nthat this added a couple of\ndifferent folders, it first\nadded a package dot JSON package\ndot JSON is a file that tells us\na lot about our project and the\ndependencies that it works with.\nFor example, we've installed the\nsoap package of 0.8 point 13.\nOur yarn dot lock tells us the\nexact version of all the\ndifferent packages of our\nproject. For example, the reason\nthis is so important too, is\nsolc has a ton of dependencies\nas well. So yarn dot lock tells\nus exactly what version of solc\nand all the different\ndependencies of solchen. Any\nother project that we add. This\nis autogenerated file, don't\nedit the file directly. The\nfinal bit is we got this node\nmodules folder. This node\nmodules folder is going to be\nwhere all the installed code\nthat we just downloaded is, for\nexample, if we look at node\nmodules, we can see there's a\nsock folder. And inside this\nsock folder is all the code\nassociated with this soap\npackage that we just installed.\nAnd since we're working with\nzero point 8.7 of slowly, we\nactually want to install that\nspecific version. So we're going\nto do yarn add solc at zero\npoint 8.7 Dash fixed and you'll\nsee in our package dot JSON you\ncan now see zero point 8.7 Dash\nfixed in our dependencies\nsection for sulk. Normally you\ncan just add your salt version\nlike yarn add zero point 8.7 But\nthere was an issue with zero\npoint 8.7 So we had to do zero\npoint 8.7 Dash fixed.\nYou can find the different\nreleases and the different\nversions if you go to sulk Jas\nreleases and then to tags\nAlright, great. Now that we have\nsold, we have the ability to\nactually compile our contracts,\nwe could either compile them in\nour code and have it\nautomatically run whenever we\nhit Deploy, or, or we could\ncompile them separately. If you\nwant to go back after this\nsection is an example in the\nsculpt Jas repository that shows\nyou how to actually compile silk\nright in your code. We are\nactually going to compile them\nseparately using a soap Jas\ncommand. The yarn command is\nboth used to install\ndependencies and it can be used\nto run scripts. If you go to\nsulk Jas and you scroll down, it\nsays in order to use the command\nline, you actually need to\ninstall it globally. If you want\nto install this globally using\nyarn Global Add solc at zero\npoint 8.7 Dash fixed you can\nabsolutely go ahead. However,\nsince we're inside of this\nfolder here, which has the yarn\ndot lock the package json and\nthe node modules yarn will be\nsmart enough to know i You're\nlooking for the soak in this\nfolder. So we can actually go\nahead and compile our contract\nusing yarn and solc Jess if you\nwant to see all the different\ncommands soak Jas allows we can\njust run yarn. So Jas dash dash\nhelp, and you'll see it'll spit\nout a list of all the different\noptions that soft Jas has. You\ncan also run yarn, so Jas dash\ndash version to just make sure\nthat we're on the correct\nversion, which is indeed zero\npoint 8.7. Now to actually\ncompile our simple storage at\nsoul, let's run the compliation\ncommand we will run yarn, so J\nS, dash dash bin since we want\nthe binary dash dash ABI since\nwe also want the ABI dash dash\ninclude path node modules. Since\nwe want to include any contracts\nor files in our node modules, we\naren't using any for this\nproject, but in the future, you\nwill need to include this dash\ndash include path node modules\ndo dash dash base path of\nperiod, this period means that\nthe base path is going to be\nthis folder dash O period, which\nmeans we're going to output the\ncompiled binary and ABI to this\nfolder. And then finally, simple\nstorage dot soul. Since this is\nthe contract that we want to\ncompile, auto completed it from\nsimple storage to simple\nstorage. So by typing simple,\nand then hitting Tab, but let's\ngo ahead and hit enter, you'll\nsee it's running this command to\ncompile this contract. And\nyou'll see two files get output.\nOne called Simple Storage soul\nunderscore simple storage that\nAPI in simple storage Sol\nunderscore simple storage dot\nbin, the ABI is obviously the\nABI of this contract, which will\nneed in the future. And then the\nbin is going to be the binary,\nor the really low level of this\ncode back and remix. If you\ncompile simple storage, that\nsoul, you can actually look at\ncompliation details, like the\nABI which we just got, or the\nbytecode, which if you look at\nthis object 60806 That's the\nsame as the binary here 60806.\nAlright, great. So now we've\ncompiled our contracts here.\nNow, obviously, now if you hit\nup on your keyboard, you can\nactually cycle through your most\nrecent terminal commands. And if\nyou hit up enough, we can see\nthis command that we just ran\ntyping this out or hitting up a\nwhole bunch every single time,\nit's going to be really annoying\nto do anytime we want to\nrecompile. So what we can do is\nwe can add a script section in\nour package dot JSON to shorten\nsome yarn scripts for us. So\nwhat we'll do is back in our\npackage, dot JSON, a lot of\ncomma, and we'll add a section\ncalled scripts, add the colon\nand the brackets. And in here,\nwe'll say anytime we say\ncompile, we will run this long\ncommand. So I'd compile we'll\nput some quotes. And we'll paste\nthat in there. So now instead of\ntyping that whole thing out, as\nlong as we're in the same folder\nthat our package json is in, we\ncan run yarn compile. And this\nwill run that whole script for\nus without us having to type the\nwhole thing out scripts are a\nreally useful way to make it\neasier for us to run long\ncommands. All right, great. Now\nwe have our code compiled, this\nis going to be equivalent to US\nhitting this compile button for\nus to actually go ahead and\ndeploy.\nSo now we have our simple\nstorage. That's all compiled,\nlet's learn how we can actually\ndeploy this thing. Remember, in\nremix, we actually deployed it\nto one of two different places,\nwe deployed it to either a\nJavaScript VM, or with our\ninjected web three, with our\nMetamask. Let's learn first ad,\ndo the JavaScript VM. And then\nwe'll learn how to use the\ninjected web three, or a meta\nmask or some connection to an\nactual test net. So in order to\ndeploy this to a JavaScript\nvirtual invite I'm in or kind of\na fake blockchain, we're gonna\nneed to get a fake blockchain.\nNow in the future, we're going\nto be using the Hardhead runtime\nenvironment as our JavaScript\nvirtual machine or aka our fake\nblockchain. But for this\nsection, I want us to use a tool\ncalled ganache. There's a link\nto this in the GitHub\nrepository. Ganache is similar\nto a virtual machine in remix.\nIt's a fake blockchain that we\ncan run locally to actually\ntest, deploy and run code. It's\nalso a nice way to see things\nthat are going on in a\nblockchain. Let's go ahead and\nspin up the ganache application\nafter you install it, the\nganache application will look a\nlittle something like this. And\nto spin up a fake blockchain\nreally quickly, you can just go\nahead and click Quickstart. This\nwill spin up a fake blockchain\nthat's running locally on your\ncomputer right here, which is\nfantastic. It comes with a whole\nbunch of fake accounts exactly\nlike how remix comes with a ton\nof fake accounts with 100 ether\neach ganache comes with a bunch\nof fake accounts with 100 ether\neach. They also come with the\nprivate keys that we can use in\nour applications to actually\ntake control of these fake\naccounts. Remember, don't use\nthese private keys on a public\nblockchain. They're for\ndevelopment purposes only\nbecause a lot of people know\nthese private keys in our code.\nOne of the first things that\nwe're going to need to do is\nactually connect to our\nblockchain remix does this a\nlittle bit behind the scenes, if\nwe're choosing JavaScript\nvirtual machine remix chooses\nits own fake blockchain that it\nruns. If we choose injected web\nthree, as we know, meta mask\npops up, and it connects to our\nmeta mask, this connection that\nremix does, is actually doing\nsomething really interesting.\nIt's not just connecting to our\nmeta mask by some magical\npowers. It's actually connecting\nto our meta mask, which has a\nconnection to the blockchain\nbehind the scenes. If you open\nup your meta mask, and you go\ndown to you select the networks\nand you select ad networks,\nyou'll get popped up into a UI\nthat looks like this. If we go\nback and hit select networks\nover here, we can actually see\ninformation about these\ndifferent networks. One of the\nmain things that we can see is\nthat all these networks have\nsomething called an RPC URL. RPC\nstands for remote procedure\ncall. And then URL is uniform\nresource locator. This RPC URL\nstands for a connection to a\nblockchain node that somebody is\nrunning this this URL connects\nus to make API calls and to\ninteract with a blockchain node.\nBlockchain nodes run with\nsoftware, and some of them\nexpose an API call. If you look\nat the NGO Aetherium website,\nthere actually are instructions\nfor you to run your own\nblockchain node for a real\nblockchain like Aetherium. Most\nof these have flags like dash\nHTTP dot ADR to expose these RPC\nendpoints. So if you ever want\nto run your own node, your own\nreal blockchain node, instead of\nusing meta masks or any other\nthe providers that we're going\nto go through, you can use go\nAetherium, or whatever\nblockchain you're working with\nsoftware to run your own notes.\nBut it's this RPC URL that\nallows us to connect to Rinkeby,\nif on Rinkeby ropsten, if we're\non ropsten main net if we're on\nMain net, etc. And it's going to\nbe the way that we're going to\nconnect to our ganache\nblockchain that we're running\ninside of this application. So\nif you look at the top of your\nganache here, there's a section\ncalled the RPC server. And this\nis the endpoint of our ganache\nnode right now. So what we can\ndo is we can copy this and go\nback to our VS code, and paste\nit in here to see if we can\nconnect instead of HTTP. With\nthese capitals, we're gonna have\na B lowercase instead of the\nuppercase, because the lowercase\nis more correct, and it looks\nnicer. But now we have the\nendpoint. Hypothetically, with\njust this, we can start making\ncalls and API calls to this\nendpoint, go to this JSON RPC\nspecification. Again, link will\nbe in the GitHub repo, we can\nactually see different calls we\ncan make directly to our node to\nget different information. eath\nget blocked by hash eath get\nblocked by number. And all of\nthese wonderful pieces in here.\nMaking these API calls directly\nis is a little bit annoying to\ndo ourselves. If you want to do\nit yourself, you absolutely can\nusing an API endpoint like Axios\nor fetch. However, we're going\nto use a rapper to interact with\nour node and do things like\ndeploy and interact and other\nsuch things with our blockchain\nnode. This is finally where\nethers comes\ninto play. Ethers js is one of\nthe most popular JavaScript\nbased tooling kits, that allows\nus to interact with different\nblockchains and has all these\nrappers that make all these API\ncalls and do all these things\nwith Aetherium, and polygon and\navalanche and any EVM compatible\nchain. The other incredibly\npopular package that does the\nsame thing is going to be web\nthree.js. And you've probably\nheard about this and you'll\nprobably see it a little bit\nmore throughout this course and\nthroughout your web three\njourney. The reason that we're\nusing ethers is that ethers is\nthe main tool that powers the\nhard hat environment and I\nreally enjoy it myself. And\nremember, if you ever get lost\nwith any of this, you can always\ncome back to their documentation\nto install it. As you can see\nhere, you can just run npm\ninstall ethers, we're just going\nto do yarn, add ethers.\nAnd now you should see in your\npackage json, we now have ethers\nadded in here. Awesome. Now back\nin our code, we're going to\nimport ethers into our\ndeployed.js script so that we\ncan use all the wonderful tools\nthat comes with so we'll say\nconst ethers equals require\nethers. For those of you doing\nthe TypeScript edition of this\ncourse, this will be import\ninstead of require now that we\nhave ethers in here, we can\ncreate our provider object in\nour main function. The reason we\nwe pull ethers outside of the\nmain function is because we do\nwant to pull our package into\nour script. Before we call main,\nwe want to make sure all of this\nis done first. So you'll see\nthis is kind of the the normal\nsetup of our scripts. At the\ntop, we import any dependencies\nor external packages, we'll have\nour main function, and then\nwe'll call our main function at\nthe bottom. const is a keyword\nsimilar to let the const keyword\nmakes it so that ethers can't be\nchanged. So we can't change\nthis. Our ethers variable,\nanytime we use const require is\na function for us to import the\nethers package. Now remix does\nall this behind the scenes. But\nthe way we're going to do it in\nour code here is we're going to\nsay const provider equals new\nethers dot providers dot JSON\nRPC provider. And then we're\ngoing to pass this string as our\nprovider. So we're saying hey,\nwe're going to connect to this\nURL right here. Awesome. So this\nis the way that our script is\ngoing to connect to our\nblockchain, our local\nblockchain. Now let's get an\nactual wallet here. With a\nprivate key and a balance and\neverything, we can see all of\nour wallets and private keys in\nour ganache here. So the way to\nget this set up is we can say\nconst. Wallet equals new ethers\ndot wallet. And this wallet\nfunction takes in a couple of\ninput parameters, like a private\nkey, and a provider, the private\nkey will go to Kenosha and just\nchoose one of these private\nkeys. And we're going to paste\nthis right into our code. And\nthen we're gonna do comma\nprovider and save that. Now\npasting your private key\ndirectly into your code is a\nhuge nono. And we're going to\nlearn how to avoid this in the\nfuture. It's okay right now,\nsince we're just using one of\nthe ganache private keys, and\nyou have no risk of having any\nmoney associated with this\naccount. These two lines alone\ngive us everything that we need\nto interact with smart contract,\nthey give us our connection to\nthe blockchain, and they give us\na wallet with a private key so\nwe can sign different\ntransactions. If you remember\nback to our blockchain basics\nsection. This is the private key\nthat we're using to sign all of\nour transactions to encrypt our\ntransactions. Now that we have a\nprovider and a wallet, let's go\nahead and grab our contract\nobjects from these two files\nhere. In order to deploy our\ncontract, we're gonna need the\nABI and we're going to need the\nbinary compiled code of the\ncontract. So we're going to need\nto read from these two files to\nread from these two files, we're\ngoing to need to use a package\ncalled Fs. So back at the top,\nwe're gonna do const Fs equals\nrequire Fs extra I autosave, all\nthe time, you'll see like, I'll\ndo something and then my white\ndot will go away a lot. It's\nbecause my fingers have a habit\nof pretty much anytime I stop\ntyping I save so so please\nremember to save early and\noften, this Fs extra should come\ndirectly with your node project.\nBut if not, you can always add\nit with yarn, add Fs extra, and\nyou should see it in our package\ndot JSON. Now we can get the ABI\nand the binary, we can say\nconst, abi equals Fs dot read\nfile sync, which means we're\ngoing to synchronously read from\nthis file, we could do it\nasynchronously. But we want to\nwait for this file to get done.\nSo we're gonna say read file\nsync. And depending on your VS\ncode, if you scroll over, you\nmight even get some information\nabout this function popup like\nthis, which can be really\nhelpful, we can see that we need\nthe path for the file we want to\nread. And then any options as\nwell path the file that we want\nto read the at the ABI located\nat dot slash simple storage,\nunderscore soul underscore\nsimple storage dot AVI and then\nwe're going to do a comma of U\nT, F eight is UTF. Eight is the\nencoding that we do for this\nfile here. Don't worry too much\nabout what that means for now.\nSo we need the ABI. And we also\nneed the binary, which is in\nthis second file. Simple Storage\nunderscore soul underscore\nsimple storage dot bin. So we're\ngonna say const binary equals Fs\ndot read file sync. We're gonna\ngive it the path Hear, which is\ngoing to be dot slash, simple\nstorage soul, simple storage dot\nbin, and then the encoding\noption, which again is going to\nbe, and it should look like\nthis. Now that we have the\nbinary, we have the ABI, we can\ncreate something called a\ncontract factory, which is not\nto be confused with the factory\npattern in ethers. A contract\nfactory is just an object that\nyou can use to deploy contracts.\nSo we're gonna say const,\ncontract factory equals new\nethers dot contract, factory.\nAnd we're going to pass it, the\nAPI binary. And the wallet, we\npass the ABI so that our code\nknows how to interact with the\ncontract the binary, obviously,\nbecause this is the main\ncompiled code in our wallet so\nthat we have a private key we\ncan use to sign deploying this\ncontract, then I usually like to\nwrite a little console dot log,\nsaying something like deploying\nthese wait. And we can actually\ndeploy this contract with ethers\nby doing const. Contract equals\nawait, contract factory dot\ndeploy. Now, this is the first\ntime we've seen this await\nkeyword and you can only use the\nawait keyword inside of an async\nfunction. The reason we want\nthis await keyword we're telling\nour code to stop here, wait for\ncontract to deploy. And this\nawait keyword means that this\nwill resolve the promise\ncontract in this contract\nfactory dot deploy with the\nawait here returns a contract\nobject. So now I could do\nsomething like console dot log\ncontract. Let's see what happens\nwhen we run this code node\ndeploy dot j s, we scroll up, we\nsee deploying, please wait. And\nthen we see this massive object\nthat gets printed out. This is\nthe contract object that we just\ndeployed. And in fact, if we go\nover to our ganache, we can see\nthat the address that we're used\nfor our wallet has a little bit\nless balance and has a\ntransaction count of one. If we\nwere working with truffle, we'd\nbe able to see the contracts\nhere we're working with hard\nhat, so you won't be able to see\nthe contracts in here. But if\nyou go to transactions, we can\nindeed see the transaction that\nwe just created. This is similar\nto ether scan. But for our local\nblockchain, we can see the\nsender address, the creation\naddress, the value, gas price,\nall this stuff associated with\nthis contract. You can also see\nthe different blocks. Since\nwe've only made one transaction\nonly one block has been mined.\nAnd this is awesome. We have all\nthis other stuff associated with\nit. Great job. You just deployed\na contract to your own local\nblockchain with ethers. Jas.\nThis is fantastic, Awesome work.\nNow let me show you what happens\nif we don't use the await\nkeyword here. We're not telling\nour code to stop. We're saying\nhey, deploy this contract and\nthen just keep going. So we\nnever actually checked to see if\nthis deploy function finished.\nSo let's see what happens when\nwe run this instead. Instead of\nthat big contract object, we get\nthis promise in its pending\nstate because our code actually\nfinished before our contract\ncould finish deploying. So we\nsee promise pending here\ninstead, this is why the await\nkeyword is so important. We're\nsaying hey, wait for this to\nfinish the await keyword also\nresolves a promise. So it'll\nwait for the promise to exit\nit's pending state. And then\nit'll return whatever the\npending promise returns. So\ncontract factory to deploy\nreturns a promise that returns a\ncontract. In fact, if we go to\nthe ethers documentation, we\nlook up deploy. And here we can\nsee contract factory methods\ncontract factory dot deploy. If\nwe look at the definition of the\nfunction, it says contract\nfactory dot deploy takes a whole\nbunch of arguments and some\noverrides this arrow is saying\nthis is what it returns, it\nreturns a promise that resolves\nto a contract. And that's why we\nneed this await keyword because\ncontract factory to deploy by\nitself just returns a promise.\nBut if we do await contract\nfactory dot deploy, we're saying\nit returns a promise that\nresolves to a contract. And\nwe're waiting for it to finish\ndeploying to resolve to a\ncontract object. So that's gonna\nbe a major difference here.\nAwesome work. So that's gonna be\nwhy this await keyword is so\nimportant. And again, you can\nonly do that in asynchronous\nfunctions. So you need this\nasync keyword at the top of your\nfunction names. Awesome work. So\nwe've deployed a contract to our\nganache. Shane, this is\nfantastic. Let's play with this\na little bit more. So what else\ncan we do? Remember how in remix\nand in Metamask, we could add a\nwhole bunch of stuff. We could\nadd a gas limit, we could add\nsome value when we were doing\nour trends. that we could press\nthe transact button. We know\nthat when we're working with\nMetamask, and we want to send\nsome money between our accounts,\nwe can actually choose our gas\nprice, our priority fee, all\nthis other stuff, we can\nactually do all that in ethers\nas well. So if we wanted to\nawait contract factory to\ndeploy, but with a certain gas\nprice, we can add these\noverrides in this deploy\nfunction here. Another really\nneat trick that your Visual\nStudio code might have is if you\nclick Command or Control,\ndepending on your setup, you can\nactually click into a function\nand see where it's defined and\nsee everything about this\nfunction. So if I command\nclicked, I could see that I'm\nnow in Node modules ethers\nproject contract source of Ts,\nall this stuff. And I can see\nexactly the function definition\nof this deploy function on the\ncontract factory object, which\nshows us the same code as what\nwe saw in the documentation. We\nsee we have a deploy function,\nit takes some arguments, and\nthen it returns this little\nsemicolon means it returns a\npromise that resolves to a\ncontract, which is really nice.\nThese are in here are actually a\nlist of overrides that we can\nspecify with some brackets. So\nwhat we can do is we can put\nsome brackets in our deploy\nfunction here and specify\ncertain things like for example,\nwe can specify the gas price to\nbeing some number. And now if we\nwere to run this, we would\ndeploy this contract with a gas\nprice of this, we could add a\ngas limit, we can add a whole\nbunch of different overrides in\nour deploy function here. Well,\nwhat else can we do? Well, we\ncan wait for a certain number of\nblocks for our contract finish\nwith so we've deployed the\ncontract. But maybe we want to\nwait one block to make sure it\nactually gets attached to the\nchain. So we can say const.\nDeployment received equals\nawait, contract dot deploy\ntransaction dot Wait, and\nspecify the number of\nconfirmations that we want to\nactually wait. So we'll wait one\nblock confirmation to make sure\nthat this happened. And then we\ncan do console dot log, this\ndeployment receipt option. So if\nwe run the code now, we can see\nall this information about our\ntransaction, and we can see\nexactly what our transaction\nlooks like, we can see there's\ntwo is no because we're creating\na contract from is going to be\nthis ganache address that we got\nthe private key for, we see the\ncontract address that we created\ntransaction index, we can see\ngas use gas use log bloom block\nhash transaction, and we can see\nall this information about our\ntransaction, something I want\nyou to take note of is the\ndeployment receipt and the\ndeployment transaction, I want\nyou to separate these two\nbecause it's going to make your\nlife a lot easier. So we're\ngoing to do quick console dot\nlog, here is the deployment\ntransaction. And then we'll do\nconsole dot log contract, dot\ndeploy transaction. And then I'm\ngoing to copy this whole line by\njust typing Command C or Ctrl. C\nright there. And then here is\nthe deployment. Here is the\ntransaction receipt. And then\nthis deployment is receipt is\nthe transaction receipt. So I'm\njust going to rename this to\ntransaction receipt. To make it\na little bit clearer, which ones\nwhich, and we'll run this one\nmore time. You only get a\ntransaction receipt, when you\nwait for a block confirmation.\nOtherwise, you're gonna get the\ncontract object, which has the\ndeploy transaction with it, this\ndistinction will be more\nimportant later on. But I wanted\nyou to know what the difference\nbetween the two transaction\nreceipt is what you get when you\nwait for a block confirmation,\nthe deployment transaction or\nthe transaction response,\ntransaction response is what you\nget just when you create your\ntransaction. So transaction\nreceipts transactional response,\nthey're different receipt is\nwhat you get when you wait for a\ntransaction to finish. And then\nresponse is just what you\ninitially get. Make sense? Okay,\ngreat. We're gonna go ahead and\ndelete those. But those lines\nwill be in the code associated\nwith the GitHub. Now you saw\nwhen we actually printed out\nthose receipts, we got all this\nstuff in here, because deploying\na contract is actually just\nsending a transaction, as we've\nsaid before, so if we want to\nsee what's really going on under\nthe hood, we can actually create\na transaction ourselves and\ncreate a contract ourselves just\nby specifying the transaction\ninformation. So how will we do\nthat? Let's deploy this contract\nagain, but only purely using\ntransaction data. So we'll do a\nconsole dot log.\nLet's deploy with only\ntransaction data. And this is\ngoing to be the way you can\nactually deploy or send\ntransactions purely with\ntransaction data you can send\nany transaction this gives you\nunlimited flux. ability with the\ntransactions you want to send,\nwhat we can do is we can say\nconst, or let TX which is going\nto stand for our transaction\nequals, and we can just add all\nof our transaction information\nin here. So the first thing that\nwe're going to need is our nuts,\nor the number that we only use\nonce we go back to our\ntransaction count, we're on four\ntransactions here. So we'll use\nthe nonce five, because that's\ngoing to be a nonce that we\nhaven't used before. Every time\nyou send a transaction, it comes\nwith one of those nonces. Right,\nso the nonce is a bit of a over\noverused term, we saw it back in\nour blockchain basics that we\nuse the nonce to solve that hard\nproblem. nonces are also used in\nwallets and in signers, to send\ntransactions and they use a\ndifferent nones for every\ntransaction. So nonce, when\nwe're talking about wallets\ntalks about a number associated\nwith a unique transaction.\nnonce, when we're talking about\nblockchain mining is a value\nused to solve that hard problem,\nthey both mean the same thing.\nThey both mean a number only\nused once. But they're different\nin these different contexts. So\nwe're going to use this number\nonly use once this unique number\nfor a transaction to send this,\nso we're going to say nonce is\ngoing to be five, we're going to\npick a gas price of, of this\nright here, we're just going to\nuse the gas price of ganache\nlike that, we're going to pick a\ngas limit of some big number,\nwe'll use 1123456, we'll just\nuse that we're gonna say two is\ngoing to be no, right, exactly\nlike what we saw in our receipts\nand responses down here. Since\nwe're creating a contract value\nis going to be zero. Since we're\ncreating a contract, we don't\nwant to send an ether polygon or\navalanche. And then data is\ngoing to be that massive binary\nobject in our binary bit. So in\nthe binary section, we're gonna\ncopy this massive binary piece,\nand we're going to put some\nquotes in here, we're gonna do\n0x, and paste that in here. So\nthis massive, massive data piece\nis the binary that we're\nsending. Whenever you send a\ntransaction, you have this this\ndata object that you can fill\nthis stuff, we're filling our\ndata object with the binary with\nthe code that tells the theory\nthat tells our blockchain to\ndeploy our smart contract that's\ngoing to look exactly like this.\nAnd then finally, we want to add\nthe chain ID.\nAs we've seen before with\nMetamask, if we go back over to\nour networks, each one of these\nEVM chains has a different chain\nID Etherium. Main net is one\nropsten is three Rinke, B is\nfour COVID is 42, etc. And other\nEVM chains like avalanche like\npolygon, are going to have their\nunique chain IDs as well, or\nganache, we can see the network\nID appear is 1337 in some\npeople, so we can just paste\nthat in here. Some people have\nrun into some issues where the\nchain ID and the network ID are\ndifferent. And the chain ID is\nactually 31337. So if you have a\nproblem with this, try 31337\ninstead, but it should be 1337.\nNow this is a transaction with\nall this information propagated,\nwhich is awesome. However, this\ntransaction isn't signed. So\nnobody's sending this\ntransaction right now this is\njust the transaction details of\nwhat somebody wants to do, we\nactually need to sign this\ntransaction, and then send it to\nour blockchain. Cons sign, TX\nresponse equals await, wallet\ndot sign transaction, and we can\npass that TX object. And then\nwe'll do a console dot log of\nthe sign TX response in\nJavaScript. Same as solidity. If\nyou type two backslashes, before\nsome code, it won't run that\ncode. So I'm gonna go ahead and\ncomment out the three lines\nabove. And the way that I'm\ndoing it is by highlighting the\nsections and hitting Command\nbackslash, or you might hit Ctrl\nbackslash, but this is a\nkeyboard shortcut you can use to\nquickly comment out entire\nsections. And the reason I'm\ndoing this is because I want to\nshow you what happens when we\njust run scientex response\nwallet that signed transaction\nback in nosh, we see that we\nhave four blocks in here. Let me\nask if we do this sign\ntransaction and we get the\nsigned transaction response,\nwill we propagate another block?\nWell, let's find out run no\ndeploy.js, we get this massive\nthing here. But if we go back to\nganache refresh, we actually\ndon't see another transaction\nsent. That's because we're only\nsigning a transaction here,\nwe're not actually sending it.\nSo the signed transaction\nresponse. This big number here\nrepresents a signed transaction\nbut not a cent transaction,\nwhich is different. You can\nactually send one of these\ntransactions by changing this\nline a little bit. So instead of\nscientex response, we'll change\nthis to send TX response equals\nawait wallet dot send\ntransaction TX then once We send\nthe transaction here, we can do\na wait, send transaction\nresponse, that Wait, one, we're\ngonna wait one block\nconfirmation to make sure this\ntransaction actually goes\nthrough. And we can run node.js.\nAnd it looks like it's done. But\nif we actually scroll up, we\nactually got an error here. So\nthere's this huge, massive thing\nhere. And if we scroll up, we'll\neventually see TX reject error,\nthe TX doesn't have the correct\nnuts, which just for some\npractice, let's go ahead, type\nthis into Google and see what we\nget. We actually get a web three\nJas from four years ago, trying\nto call leaf picked, blah, blah,\nblah, blah, blah, blah, blah,\nblah. It looks like this is a\nmeta mask issue that they ran\ninto. And they said, you have to\nreset your account in meta mask,\nwhich we could do. But let's\nmake this a little bit more\nspecific. Let's say ethers. JS\nlooks like we don't get it looks\nlike as of right now, from this\nrecording, we don't get a Stack\nExchange eath or a Stack\nOverflow question for this\ntrolley, because this is pretty\nstraightforward. We don't have\nthe correct nonce for our\ntransaction. But this would be a\ngood time to actually make this\na question on Stack Overflow or\nStack Exchange Aetherium so that\nit shows up first. So we\nactually don't get the correct\nnuts, we're going to want to\nmake this a nonce of four you\ncan see here account has a nonce\nof four TX has a nonce of five.\nSo we actually would want this\nto be four. Now an easier way to\nalways get the correct nonce\nhere is going to be actually\njust calling the transaction\ncount from the wallet. So back\nin the ethers documentation,\nthere's actually some good\nsamples here on how to assigning\na message and then how to\nactually send these messages. So\nwe can do a weight wallet dot\nget transaction count to get the\nnuts. So back in our code, we\ncould do const nuns equals\nawait, oops, copy pasted, await\nwallet dot get transaction\ncount. And then we can just\nplace the nonce right here.\nNow, let's try running this\nagain. And it looks like this\none did indeed go through. We\ncan verify on ganache here. We\ndo indeed see we're currently on\nblock five now and we have one\nextra transaction. Now we could\ngo ahead and just run this\nagain. And we'll never have to\nworry about actually updating\nthis nonce ourselves. Since\nwe're just calling wallet dot\nget transaction count to keep\nupdating it current block is six\nand the our additional\ntransaction has indeed gone\nthrough awesome. I showed you\nhow to actually sign the\ntransaction. But we didn't sign\nthe transaction for our central\ninjection. Well, why not? If you\ncommand click or control click,\nor you go to the documentation\nfor ethers, we can see the code\nfor send transaction. So first,\nit does some check provider\nstuff. There's some stuff to\npopulate the transaction. But we\ncan actually see that before it\nsends the transaction even in\nethers, it signs the transaction\nfirst, and then calls this dot\nprovider dot send transaction.\nSo if you just call send\ntransaction with the transaction\ndetails like we did here, it's\nthe same as signing it first and\nthen sending it with the\nprovider. Okay, great. So we've\nlearned how to send a\ntransaction using pure\nJavaScript and using pure\nethers. One of the main\ntakeaways from this is that\nevery time we change the\nblockchain, every time we change\nstate, every time we use gas,\nwe're sending a transaction that\nlooks pretty much exactly like\nthis, the data is going to be\nthe differentiator, the data for\nus here was data saying to\ncreate a new contract, when we\nmake transactions, like adding\npeople or storing the data that\nwe're going to be passing in our\ntransaction is going to be data\nassociated with calling these\nfunctions. And when we actually\ncall functions in ethers, or in\nHardhead. We're not going to do\nthis kind of raw const, TX, and\nlist out all the stuff like here\nand list out the raw data,\nright? Because that's really,\nreally hard ethers and hard hat\nare going to make this process a\nlot easier. So for now, let's go\nahead, comment out this whole\nsection, which again, if we copy\nthis whole thing, and then hit\nCommand, slash, or control\nslash, or whatever the shortcut\nis on your environment, that'll\nactually comment this out. Let's\ngo ahead and uncomment this\nsection so that we deploy our\ncontract using kind of the ether\nis much easier to read way than\nthis weird TX stuff. Oh, cool.\nSo we've changed our script back\nto deploy our contracts like\nthis. Now that we've actually\ndeployed our contract, we can\nlearn how to interact with our\ncontract through code as well,\nthe same way that we click these\nbuttons in remix, we're going to\ncode it out for ourselves here.\nSo if we look at symbol storage,\nwe have a button for add person\nfor store. And then we have\nthese view functions as well.\nThe easiest one is going to be\nthe Retrieve function, which\ngrabs our favorite number,\nretrieve returns favorite\nnumber. So we can call that in\nethers by doing const. current\nfavorite number equals await.\ncontract.we retrieve. The\ncontract object that we have is\nwhat's returned from our\ncontract factory as long as\nwe've awaited it the contract\nobject is going to come with all\nthe functionality described in\nour API. That's why we had to\npass the API to our contract\nfactory. If we look inside our\nAPI piece here, we can see it\nhas a ton of information on the\ndifferent functions that we can\ncall and the types that it has\nand the return types and\neverything like that. For\nexample, if I look up retrieve,\nI can see down here, we have\nretrieve, we can see that the\nname of this function is going\nto be retrieved. And the outputs\nare going to be a un 256, of\ntype Nuun 256. Now, this is a\nlittle bit difficult to read\nbecause it's not formatted.\nSince we call this dot API, it's\ngoing to be a little bit hard to\nread. But we could change it the\ndot JSON. And then you'll see\nit's highlighted a little bit, I\ncan even do format document with\nprettier. And you'll see it\nactually formats to be a lot\neasier to read now and go back\nto retrieve. And we can see,\nthis block of code here defines\nwhat the Retrieve function can\nand can't do. I'm going to\nchange it back to abi. And it\nlooks like my formatting has\nstayed, which is great. This is\nmuch easier to read than it was\nbefore. As I said, the ABI or\nthe application binary interface\nis incredibly important for\nworking with our contracts. If\nwe give our code just this huge\nbytecode thing, it's gonna be\nreally hard for any processor to\ndecompile this or understand\nwhat exactly what the functions\nare that are going on here.\nThere are decompiler options out\nthere, like ether VM, that IO\nslash decompile. That can\ndecompile some bytecode into the\nsolidity. But it can be really\ntricky to get it exactly right.\nSo it's much easier just to have\nthe ABI to say, hey, this lump\nof code, this lump of numbers\nand garbled nonsense is this.\nWhen we deploy this bytecode to\nthe blockchain, and we call\nfunctions on it, the code will\nautomatically allow those\nfunctions to get called if they\ndo exist. But in order for our\ncode to know that they exist,\nit's much easier just to give it\nthe API. So we can get our\ncurrent favorite number like\nthis. Let's go ahead and console\ndot log, the current favorite\nnumber. Now that we've edited\nthis code, we're going to let me\nzoom out a little bit. Now that\nwe've edited this code, we're\ngoing to connect organ nosh\ninstance, we're going to connect\na wallet with a private key that\nwe got from the top of our\nganache here, we're gonna grab\nthe ABI and the binary of our\ncontracts, and connect them to a\nnew contract factory object,\nwhich is connected to that\nwallet. So that wallet will be\nthe one to actually deploy the\ncontract, we'll deploy the\ncontract with const contract\nequals await contract factory\ndot deploy, we will wait one\nblock for that transaction to\nfinish. And in fact, we're not\ngoing to use transaction\nreceipt. So for now, we're just\ngoing to delete that part. We're\nnot going to do any of this\nhere. So I'm going to delete it\nfor now. However, I'll leave\nthis section commented out in\nthe GitHub repo. And then we're\ngoing to call contract retrieve\nwhich should return our current\nfavorite number. Since this is a\nview function, this contract\ncall won't cost us any gas. If\nwe look at simple storage, that\nsoul we can see retrieve is a\nview function. And remember view\nand pure functions, if called\noutside of a contract function\ncall don't cost any gas, we're\njust reading up the blockchain,\nwe're not changing any variables\non chain, we're not changing the\nstate of the blockchain. So this\nwon't cost any gas. So let's go\nahead and run this. Perfect, we\nget deploying, please wait. And\nthen we get this big number\nresponse. So what's this big\nnumber response here? Big number\nis a library that comes with the\nethers application that helps us\nwork with numbers. If you\nactually scroll down, they even\nhave a section saying why can I\njust use numbers, you'd expect\ncurrent favorite number to just\nbe zero, but it returns this\nweird hex thing that says his\nbig number true this weird, big\nnumber thing. So solidity can't\nuse decimal places, and\nJavaScript has a hard time with\ndecimal places. And this is kind\nof the more specific rationale\nfor why not to use numbers, what\nyou'll see a lot of the time\ninstead of numbers is you'll see\nstrings like zero, you'll see\nJavaScript use strings like\nthis, or big numbers. Now, if I\nwere to try to pass a number\nlike this in JavaScript, this\nnumber would be too big for\nJavaScript to understand. So we\nwant to use big numbers or\nstrings when working with\nethers. Now we can make this\nmore readable by adding.to\nstring at the end and printing\nout the string version of this\nbig number. Now, if I rerun this\ncode, we can see we get zero,\nwhich makes sense again, because\nour favorite number gets\ninitialized to the zero value,\nif not specified, and we haven't\ncalled store yet. So awesome. So\nthat is, that's working\nperfectly. So this is what our\ncurrent favorite number is.\nLet's make this console dot log\na little bit more syntactical.\nWe're going to use something\ncalled string interpolation. So\nwe can interpolate our string\nhere with variables. Typically\nin JavaScript when working with\nstrings, use double quotes.\nHowever, if you want to mix\nvariables with actual strings,\nyou can use backticks instead.\nSo we're going to use some that\nbackticks here, and we're gonna\nsay current favorite number to\ncall in here. And to tell\nJavaScript that this is a\nvariable that we want to read,\nwe put a little dollar sign and\na bracket around it, like this.\nNow, if we run this code again,\nit's saying deploying, please\nwait, and we get current\nfavorite number is zero, because\nJavaScript goes, Okay, this is a\nstring, ah, dollar sign, curly\nbrace looks like this is going\nto be some variable or some\nJavaScript that you want me to\ninterpret and close it off, and\nthen backtick. Cool. So our\ncurrent favorite number is going\nto be zero. Great. So let's\nupdate on the contract the\nnumber by calling the store\nfunction. So we'll say const,\ntransaction response equals\nawait, contract dot store, and\nwe'll add seven. Now since seven\nis a small number, you can just\npass it like seven. But passing\nit like seven in a string also\nworks. Again, this is because if\nwe want to pass some crazy\nmassive number, JavaScript would\nget confused. So it's usually\nbest practice to pass variables\nto contract functions as\nstrings, even though that might\nbe a little bit confusing ethers\nis smart enough to know that\nthis seventh string is actually\nseven the number then we can do\nconst. Transaction received\nequals await transaction\nresponse that Wait, one. So\nwe'll wait one block here. This\nis similar to us doing contract\ndot deploy transaction dot Wait,\nthe syntax here is a little bit\ndifferent than what we saw up\nhere. Because this is using a\ncontract factory. And this is\ncalling a function on a\ncontract. So when we call the\nfunction on the contract, we get\na transaction response. When we\nwait for the transaction\nresponse to finish, we get the\ntransaction receipt. Now I can\ndo const, updated, favorite\nnumber two equals await on track\ndot retrieve. And then console\ndot log updated. favorite number\nis, and we'll do a little string\ninterpolation, updated, favorite\nnumber like that? Now let's go\nahead and run this. So in this\nprocess, what are we doing,\nwe're deploying the contract,\nwe're getting the initial value,\nwe're going to update our\ncontract by calling store which\nis going to cost gas. So this is\na transaction, we're going to\nget the transaction response,\nthen we're gonna get the\ntransaction receipt, we're not\ngoing to do anything with the\ntransaction receipt, I want to\ningrain in you all that these\ntwo are different transaction\nresponse and transaction\nreceipt, and you'll see why in\nthe future. And then we'll get\nthe updated favorite number, and\nthen we're just going to print\nit out. So let's do this. Boom,\nand perfect. Deploying, please\nwait, current favorite number is\nzero, updated favorite number is\nseven. And if we go to our\nganache instance, we go to\ntransactions, we can see, we now\nhave a contract call at the top,\nwe have the sender, the contract\naddress, the gas price, all this\nstuff, and we see our\ntransaction data right here. So\nthis transaction data is what\ngets sent in that data slot of\nour transaction object. Ethers\nis just doing that on the back\nend for us so that we don't have\nto make that big transaction\nobject there. All right,\nawesome. You've successfully\ndeployed a contract to your own\nlocal ganache instance, or your\nown JavaScript virtual machine.\nThis is great.\nNow let's clean this up a little\nbit. Because if we look up here,\nwe have both our connection to\nthe blockchain and our private\nkey stored directly in our code,\nwe were to push this code up to\na GitHub or some other code\nrepository, if you will, will be\nable to see our code. If we look\ninto ploy dot j s of my code,\nah, there's something else in\nhere, we don't actually see the\nprivate key or the RPC URL in\nhere. So what's going on?\nRemember, if you give out your\nprivate key, whoever has your\nprivate key owns your funds. So\neven though this is a fake,\nprivate key that doesn't have\nany real money in it, we still\ndon't want to have to hard code\nour private keys into our code,\njust in case we accidentally\nshare code with somebody. So\nwhat can we do? Well, one of the\nmost popular methods is actually\ncreating something called a dot\nEMV file or an environment\nvariable. And if you're familiar\nwith environment variables, you\ncan actually set them right in\nyour terminal, but we're gonna\nset them in our dot env. So what\nyou want to do is you're gonna\nwant to create a dot env file.\nAnd this is going to be a file\nwhere you store its sensitive\ninformation. And this is going\nto be a file, we're never going\nto share this with anybody. This\ndot env file will stick\nvariables of our choosing into\nthe environment of our code. So\nfor example, if I pull up my\nterminal here, and I do echo\ncat, this is going to reflect\nwhat the cat environment\nvariable is for us. Right now\nthere is no cat environment\nvariable. However, if I do\nexport, cat equals dog, and now\nI do echo dollar sign cat, I get\ndog output. This is what an\nenvironment variable is, it's a\nvariable in our terminal or in\nour scripting environment, since\nI don't want to have to type\nexport, private key equals blah,\nblah, blah, every time, what\nwe're going to do instead is\nwe're going to stick them into\nthis dot env file. So when this\ndot env, we can put private key\nequals. And we can grab this\nprivate key from our script, and\npaste it in like this. And a\nnote, some tools look for the\n0x, at the beginning of the\nprivate key ethers, and hard hat\nis smart enough that either one\nworks, but if you run into some\nissues, just know that sometimes\nyou might have to put your 0x at\nthe front of this. Great. So now\nwe have a private key in an\nenvironment variable. What do we\ndo now? Well, in our deploy.js,\nwe want to grab this environment\nvariable and stick it into our\nscript here, so that our script\ncan then stick it into our\nenvironment. So we're going to\nadd a tool called dot env. To\nmake this easier, so we're gonna\ndo yarn, add dot env. And if we\nlook at the dot env package, can\nread more about it and read\nabout how to add it with NPM.\nAgain, we're just using yarn\nadd. But then we can just call\nthis require dot E and V dot\nconfig. And this will pull in\nall our environment variables.\nSo we can just do require\ndot EMV config, we should see\nthis on our package that JSON,\nwe do. Excellent. Now that we\npulled it in, we actually get\naccess to our private key\nenvironment variable, you can\naccess environment variables in\nJavaScript, are using process\ndot EMV. So instead of putting\nour private key here, we're\ngonna delete that whole thing\nand substitute it with process\ndot EMV, that private key, and\nwe'll save and it'll reformat\nfor us to make sure this is\nactually working, we can just\nhit up after we save up, up up\nup up a bunch and go back to no\ndeploy to Jas. And we see we get\nthe exact same setup. And if we\nscroll back, you can see a\ntransaction has indeed gone\nthrough. If you want to double\ncheck that this is actually\nprinting out your private key,\nwe could do console dot log,\npress study and via private key\nwe run, we see that that is\nindeed the private key coming\nfrom our environment variable\nhere. Awesome. Now our RPC URL\nhere is isn't really something\nthat we need to secure however,\nmaybe we're going to use a\ncertain API key or maybe a\ncertain endpoint that only we\nwant to have access to. And we\ndon't want anybody else to be\nusing our RPC endpoint. So we're\ngoing to add this to our dot env\nfile as well. So in our dot env.\nWhen I copy this here, I'm gonna\nsay RPC URL equals, and I paste\nthat in there, just like that.\nAnd we're gonna delete here. And\nwe're gonna do the exact same\nthing, say process dot e NV dot\nRPC URL. And now we're going to\nrun this again. And I'm going to\ntake out that console dot log.\nAnd we should get the exact same\nresponse because all we did was\nswap out our RPC URL with our\nenvironment variable, which is\ngoing to be exactly what it was\nbefore. So we go ahead and run\nthis, and we get the exact same\nresponse. And if we go to\nganache, we see that we do\nindeed get a transaction here,\nwhich is perfect. Awesome. So\nwe've learned how to add\nenvironment variables to our dot\nenv file. So that so that just\nin case, we want to share our\ncode, or we push our code up to\nGitHub, which we'll do in later\nsections, we don't accidentally\nexpose our private keys or our\nRPC URLs. Now all the code that\nwe have in our project here, if\nwe push it up to GitHub, or\nshare it with somebody else, all\nthis code will get pushed up,\nincluding our dot env file.\nHowever, if you look at my code\nsamples here for this course, we\ndon't see a dot env file in\nhere. So how is that possible?\nWell, what we want to do\nwhenever we have a project is\ncreate a dot Git ignore file.\nAnd in here, we want to put in\nv. And we also want to put in\nNode modules. This means that\nwhen working with Git and\nworking with version control,\nwhich we're going to do a little\nbit later, we won't push our dot\nenv file up to GitHub. And we\nalso won't push up known\nmodules. So if we go back to my\nexample here, we don't see, we\ndon't see a dot env file, but we\ndo see a dot env dot example,\njust to show you what one would\nlook like. So it doesn't really\nmatter that I have them in here.\nNow, if you're really paranoid,\nthere's something else you can\nactually do when running your\nscripts and running your\ncommands. Let's say you didn't\nwant to put your private key\ninto a dot env file because you\nwere nervous that you would\naccidentally push it up or\nsomething. What you can do is\nyou can add your private key in\nyour RPC URL as environment\nvariables right in the command\nline. So before you run Node\ndeploy, that's as well you can\ndo, you can say RPC URL equals,\npaste your RPC around. And then\nyou can say private key. equals\nand then paste your private key\nand then do node deploy.js.\nSetting these right before we\nrun our script is the exact same\nas if we had set them into dot\nenv. Here If we hit run, we see\nthe exact same output, which\nmeans that our RPC URL and our\nprivate key went through\nsuccessfully. This way for key\nmanagement is fine. But our\nrights doing this, it's going to\nbe much better. But it still\nmakes me a little bit nervous in\nour development environments\nwith our fake private keys,\nhaving our code in the dot env\nfile like this is, is okay,\nright? Because we don't really\ncare if this key gets hacked,\nlike nobody's using it. But when\nwe move to a more professional\nsetup, this can be a little bit\nscary. So how can we make this\neven more secure? Well, what we\ncan do is actually we can\nencrypt our private key and\nstore our encrypted key locally.\nThat way, if for some reason\nsomebody does get into our\naccount, our private key isn't\njust sitting around in plain\ntext, it's encrypted. And you'll\nneed to know a password that\nonly you know to get into it. So\nhow do we add that? Well, first,\nwe're going to create a new file\ncalled encrypt key.js. And this\nis some code that we're going to\nuse to actually encrypt a key.\nAnd we'll store that locally\ninstead of our private key in\nplain text. This will make us\neven more secure so that we\ndon't have our private key just\nhanging around in plain text\nhere. So let's go ahead and\nbuild the script to encrypt our\nprivate key. So we're going to\nuse the exact same setup as we\ndid for our deploy script. We're\ngoing to do an async function\nmain.\nAnd then down here, I'm just\ngonna go ahead and copy from\ndeployed J S. We're gonna use\nthis exact same setup, and paste\nit. Okay, great. We're gonna be\nusing ethers J, s, and r dot E\nand V again. So we're going to\nadd these in const ethers equals\nrequire ethers const, FS equals\nrequire Fs extra. And then\nrequire dot env. Config.\nAlright, so right now, in our\ndot env, we do have this private\nkey. And again, if you don't\nwant to have the private key in\ntheir way you can just do is you\ncan do private key equals and\nthen you know, node, whatever\nscript you want to run. So we're\ngoing to set this script up to\nrun our encrypt key one time.\nAnd then we can remove our\nprivate key from anywhere in our\nworkspace so that it's no longer\nin plain text anywhere. So what\nwe want to do is we want to say\nconst wallet, and we're gonna\ncreate a new wallet, but a\nlittle bit differently. We're\ngonna say equals new ethers dot\nwallet, process dot E and V dot\nprivate key. So we do need our\nprivate key to stick in here.\nBut then once we create this\nwallet, we're gonna say const.\nEncrypted JSON key equals await\nethers dot encrypt, this encrypt\nfunction is going to return an\nencrypted JSON key that we can\nstore locally and that we can\nonly decrypt it with the\npassword. And it takes two\nparameters. It takes a private\nkey password and a private key.\nSo in our dot EMV, just for\nright, now we're going to create\na private key password. And I'm\ngoing to say it's password. But\nobviously, this is a terrible\npassword. And you should never\nuse password as your password.\nBut for now, we're just going to\nleave it as password since I'm\nencrypting this big key anyways.\nSo we're going to encrypt it by\npassing the password process\nstudy and v dot private key\npassword. And we're also going\nto pass the private key, it's\ngoing to be ethers, it's going\nto be wallet dot encrypt. We're\nalso going to pass it process\ndot EMV dot private key. Now\nlet's go ahead and run this\nright now. And then we'll\nconsole dot log out this\nencrypted JSON key and see what\nhappens when we run this. So to\nrun this, we're going to do\nnode, encrypt key.js. And hit\nenter. And we'll see what\nhappens when we console log it\nout this JSON object here is\nwhat our key looks like,\nencrypted. So it's got the\naddress this ID version, all\nthis other stuff. And all this\nother stuff is the encrypted\nversion of this key. If somebody\ngets into our account and they\nsee this, they'll have to know\nthe password to decrypt this\nprivate key, they'll need to\nknow the password to decrypt\nthis JSON object back into a\nprivate key. So what we're going\nto do, now that we've encrypted\nit, we're going to save it. So\nwe'll do Fs dot write, file\nsync, we're going to pass it to\ndot slash dot encrypted key dot\nJSON, comma encrypted JSON key.\nSo we're saving it to a new file\ncalled dot encrypted key dot\nJSON. And we're passing it this\nencrypted key that we just made.\nSo if we open up our file\nexplorer, and we run this\ncommand,\nyou'll see we get a new file\ncalled dot encrypted key dot\nJSON. And it's this encrypted\nkey here, which is awesome. So\nnow what we want to do in our\ndot Git ignore is add dot\nencrypted key dot JSON, so that\nwe don't accidentally push this\nup to GitHub. And now we have an\nencrypted key and we can go to\nour private key and delete this\nfrom our dot env file. We can\nalso delete our private key\npassword from our WMV file so\nthat the password isn't just\nhanging around in plain text.\nNow that We have an encrypted\nkey. Back in our deploy script,\nwe can change the way that we\nactually get a wallet. So at the\ntop, we're getting our wallet\njust by passing in the private\nkey like this, we're not going\nto do that, we're going to use\nour encrypted key that we just\ncreated. So we're going to do is\nwe're going to say const\nencrypted JSON equals Fs dot\nread file sync. That slash dot\nencrypted key dot JSON, comma\nUTF eight, this Fs dot read file\nsync is just going to read from\nour encrypted key dot JSON into\nthis encrypted JSON variable\nhere. Next, we're going to\ncreate a wallet from this\nencrypted key. We're gonna say\nlet wallet equals new ethers dot\nwallet, dot from encrypted JSON\nsync. And all these commands\nthat we're working with ethers,\nwe can of course, find them in\nthe documentation from encrypted\nJSON sync takes the encrypted\nJSON and a password and returns\na Wallet Object. So we're going\nto pass it that encrypted JSON\nthat we just read. And then\nwe're going to pass it password\nwhich we're going to do process\ndot EMP dot private key\npassword. And then finally, the\nreason I use let here is because\nnow we have to connect this\nwallet back to our provider. If\nyou look here, we're not\nconnecting our wallet with a\nprovider. When we make our\ntransactions with our contract\nfactory, we need to make sure\nthe wallet knows about the\nprovider here. So we can just\nsay wallet equals await wallet\ndot connect provider. Now, if we\nrun our deploy dot j s with our\nprivate key password as an\nenvironment variable, it should\nstill deploy. So we can do\nprivate key password equals\npassword, which yes, we know is\nterrible. But that's what we're\nusing for now node deploy dot j\ns, we should get the same output\nwe've been seeing this whole\ntime and we do we're able to no\nlonger have our private key in\nour dot env file not in\nplaintext anymore, it's in this\nencrypted key. So that just in\ncase somebody hacks our\ncomputer, they still won't be\nable to send in new transactions\nunless they know the password.\nThis is awesome. One more thing\nto know, if you type history, if\nsomebody got into your computer,\na hacker could actually see\nprivate key password equals\npassword in your bash history.\nIf you run history, dash c, you\nactually will clear your\nhistory. Now if I type history,\nI can just see that the most\nrecent command I wrote was\nhistory, this is really just\nsome of the bare minimum for\nencryption and keeping your key\nsafe. And it might seem\nridiculous that somebody might\nbe able to hack your computer\nand read your encrypted private\nkeys and everything. But as your\nprojects get bigger and bigger,\nit is really important to know\nabout private key security and\nprivate key safety and, and for\nthis course really just giving\nyou the bare minimum here and\nshowing you how to encrypt keys\nand how to be a little bit safer\nhere. Now for the rest of this\ncourse, we are going to be just\nusing this syntax with our\nprivate key in a dot env file.\nThe reason why we're doing like\nthis for the rest of the course\nis it is a little bit easier,\nI'm really hoping Hardhead add\nsome additional features to make\nprivate key encryption much\nsafer and also easier to use in\nthe future. And they probably\nwill. And the other reason that\nwe're okay to do this here is\nbecause you've solemnly sworn\nthat you're not going to use an\naccount that has any real money\nin it for the duration of this\ncourse, you're only going to use\nprivate keys that have tests on\nAetherium or are fake private\nkeys like this one that we got\nfrom ganache. In fact just to\nreally hone this in in the smart\ncontract kit slash full blocked\nin solidity course, Jas GitHub\nrepo in the discussions tab, you\ngo to announcements, I've\ncreated one called the dot end\npledge. Because recently I've\nseen too many people follow a\ntutorial that doesn't tell them\nabout the security risks of\ndoing this. And I've made this\ndot EMV pledge, I would love\neveryone to jump on and read.\nAnd if you agree, at the bottom,\nleave a comment saying I will be\nsafe, I will be safe, make sure\nyou read and you understand\nwhat's going on in here. And I'm\nnot doing this to scare you.\nBecause again, at the end of the\nday, if you use a Metamask that\nonly has tests that funds for\nthe duration of this course, you\nwill never have to be worried\nbecause of your key gets\ncompromised. It's just test it.\nSo who cares? This is if you're\nusing a meta mask or you're\nworking with a meta mask that\nhas real funds. So I'm going to\nread up the pledge because it is\nreally important. You understand\nthis when you're working with\nreal funds. And if you're like,\nHey, I'm not working with real\nfunds, I don't care, great move\npast this, whatever. But when\nyou do work with real funds,\nwhen you do decide, hey, I\nactually want to deploy this to\na real network. Now I need real\nmoney to do that. Come back to\nthis pledge. Scroll the bottom\nsay I will be safe and make sure\nyou read and you understand\nthis. Okay, so the pledge is, I\nsolemnly swear that I will never\nplace a private key or secret\nphrase or pneumonic in a dot env\nfile that is associated with any\nreal funds. Basically, you\nbasically never have your\nprivate key or your pneumonic\nphrase, in plain text, anywhere.\nYou'll all only place private\nkeys in a web file that only\nhave tested e FF link or other\ncryptocurrencies. Because again,\nif your private key has only\ntest net funds, then that's\ngreat. I don't care, we are\naware that if we forget a dot\nGit ignore, and we push our key\nphrase to GitHub, even for a\nsplit second, or even show our\nkey slash phrase on the\ninternet, wherever it may be for\na split second, it should be\nconsidered compromised. And you\nshould remove all funds\nimmediately. So even if you\ndeploy your private key to a\nwebsite, and then immediately\ndelete your website and think,\nOh, nobody probably got to it,\nyou should consider that private\nkey compromised, and you should\nremove all your funds. And\nagain, this is just for real\nfunds. If your private key was\nonly tested, funds gets\ncompromised. Well, who cares? I\ndo that all the time, you've\nbeen seeing me do that all the\ntime, because it only has tested\nfunds in it. If at the end of\nthis course, you want to steal\nall of my tests that funds I\nmean, have a blast, it would be\nannoying to me at worst. If I'm\nunsure if my account has real\nfunds in it, I will assume it\nhas real funds in it. So if you\ndon't know if it has real funds,\nassume it has real funds, and\nyou will not use it for\ndeveloping purposes. And then\nfinally, I am aware that even if\nI hit Add Account on my meta\nmask or other eath wallet, I\nwill get a new private key, but\nit will share the same secret\nphrase slash pneumonic of all\nthe other accounts generated in\nthe meta mask or other eath\nWallet. So if I'm in my meta\nmask here, and I hit Create\naccount, I will get a new\nprivate key with the new\naccount. However, all of these\naccounts that I've created with\nthis Create Account button have\nthe exact same pneumonic phrase\nor secret phrase. If I import an\naccount with a private key, it's\ngoing to have a different\npneumonic phrase. But all of the\nones that I generate inside the\nwallet are all going to have the\nsame phrase. Okay, great.\nHopefully that'll make sense. I\nhave some pledge additions here.\nFor this course, I will only use\nfunds associated with a brand\nnew never before use meta mask\nor other eath wallet. Again,\nthis is not to scare you, if you\njust work with a brand new meta\nmask, you don't have to worry\nabout any of this and just refer\nback to this when you start\nlooking at real money and real\nprivate keys. I'm aware that my\naccount associated with my\nprivate key is the same on test\nnets that it is on Main nets. So\nlike I was showing you, my\nprivate key on Rinkeby is going\nto be the same as my private key\nI'm on a main net, if I must use\na private key associated with\nreal funds in the future, until\nI am 100% sure what I am doing,\nI will always either use one of\nthe encrypted methods that\nPatrick showed you some better\nencryption stuff that I didn't\nshow or use the command line way\nto pass private keys and then\ndelete the command line history\nright after. If I'm never\nactually deploying anything to\nmake that myself or work with a\nprivate key with real funds. I\ndo not need to be concerned.\nTake a look at this. Read this\ninternalize it, it should make\nyou confident. Now again, I'm\nnot saying this to scare you.\nI'm saying this to instill\nconfidence in you that these are\nsome of the things that we want\nto think about. Okay, great. In\nhere, I will be safe.\nBoom, I will be safe. And if you\nwant to copy paste this on\nTwitter, put this in a huge\ntweet thread. Go for it. The\nmore people who know about this,\nthe more people who understand\nthe security risks of their WMV\nfiles and their private keys,\nthe better. So thank you for\nlistening to this. I know I\ndefinitely belabor the point,\nbut it is really important.\nLet's continue with the course.\nAlright, so we're just about\ndone here. However, there's one\nor two more things we want to do\njust to clean this all up right\nnow when we're auto saving\nreason, the VS code plugin for\nus to auto format. However, in\nthe future, if anybody else\ncomes across our repository,\nthey might not have the Vyas\ncode auto format or on. So we\nwant to give users a way to\nformat their code. So it matches\nthe styles that we use. So we\nhave prettier the extension\ninstalled. We can also add\nprettier as a Node js module\nthat can tell other users who\ndon't have a Vyas code exactly\nhow to format both their\nJavaScript and the solidity.\nThere is a prettier plugin\nsolidity located here, there\nwill be a link to it in our\nGitHub repo. And if we scroll\ndown, we can see how to install\nwith npm install dash dash save\nDev, which again, we're just\ngoing to use yarn, so we're\ngoing to do yarn, add prettier,\nand then prettier plugin\nsolidity. So we're installing\nboth prettier, and the solidity\nplugin for prettier. And if we\ncheck our package, JSON, we can\nsee that these two have been\nadded. And what we can do now is\nwe can create a new file called\ndot prettier, R C. And in this\nfile, we can define some little\ncurly braces. And here, we can\ndefine what we want for both our\nsolidity and for a JavaScript,\nso for example, our simple\nstorage has a tab width of\n412344 spaces. Maybe we want to\nchange that. We want tab width\nto be two. So we would save it\nhere and come back to simple\nstorage To save it here, and it\nwould get auto formatted to r\ndot prettier RC. So in our\nsettings here, we have the\ndefault editor for solidity, our\nhard hat, solidity plugin, and\nthe default for meta for\nJavaScript being the prettier\nvs. Code one, when we add\nprettier RC in here, this file\nwill take precedent over the\ndefault configuration, so long\nas we have downloaded the module\nin our node modules, which we\ncan see it right here. And we\nhave this dot prettier rc file.\nI'm going to keep the tab with\nform. So we're going to update\nit to that one thing that we\ncurrently do have that I do not\nlike is these semicolons at the\nend, so we're going to do semi\nboss, and I'm going to save\nthis, come back to deploy it\nsave and you'll see the\nsemicolon automatically goes\naway. I'm also going to add use\ntabs false, since I want to use\nspaces or spacing, and then\nsingle quote, false. This way,\nwe'll always use a double quote,\ninstead of a single quote, in\nJavaScript, you can actually use\nthe single quote or double\nquote, to define strings, but\nwe're going to make it so that\nno matter what quote you use,\nit'll always be double quote.\nAnd then for all your open\nsource repos, and for all your\nprojects that you make, you want\nto make a readme.md readme files\nare generally where people put\ninstructions or information\nabout your project or anything\nlike that. This way, whenever\nanybody comes across your\nproject, they'll know what it's\nabout your readme dot MDs, our\nMarkdown syntax again, remember\nhow when we made that trial\ndiscussion, we use some\ninteresting tips to format our\nsolidity in our code here. Well,\nthat formatting process is the\nexact same for.md files for\nmarkdown. They're both going to\nuse markdown. In fact, if we hit\nCtrl, Shift V, you'll enter\npreview mode for the markdown\nyou'll see pound sign here in my\npreview of the hard hat. This\nethers simple storage FCC is\nhuge. And it looks like a\nheading at the top. So Command\nShift V to view your.md files or\nor MIP Ctrl, Shift V for Windows\nand Linux users.\nThe last thing that we're going\nto do is we're going to deploy\nthis to a test net and interact\nwith this on a test net, we're\ngoing to use the Rinkeby test\nnet. But be sure to use whatever\nrecommended test net the GitHub\nrepository for this coerce\nrecommends. Now looking at our\ncode, you might already have a\ngood idea of how to actually\nmake this slight change. Based\noff of our last section, we know\nthat all we need is an RPC URL\nand a private key and we can\nbegin making transactions on a\nblockchain. So we're probably\ngoing to need a rink B RPC URL,\nand a rinky private key. Where\ncan we find both of those, if\nyou want to do everything on\nyour own, and in full\ndecentralized context, we could\nrun a rink B version of geth, we\ncould run it locally, and then\njust connect to our guest node,\nwe're not going to be showing\nhow to do this here. However,\nthis is 100%, something that you\ncould do. Instead, we're gonna\nuse a third party RPC URL in the\nGitHub repo associated with this\ncourse. Go to Lesson five, we\ncan scroll down to get a link\nfor alchemy. Alchemy has a node\nas a service and allows us to\nconnect to any blockchain that\nthey have support for two\nalternates might be quick node,\nMorales, or infura. These all\nhave node as a service options.\nBut we're going to work with\nAlchemy, because it's the one\nthat I liked the best, we can go\nahead and get started for free\nor login or create a new\naccount, I'm going to go ahead\nand sign up with our hard hat\nFree Code Camp user. And we're\ngoing to select the Ethereum\nblockchain ecosystem. Let's go\nahead and create our first app.\nThis is going to be we'll call\nit Free Code Camp. RT hat. Our\napp name will be ethers, simple\nstorage, FCC, and the network is\nwhere we're going to choose rink\nB. But you can see in here, we\ncan actually choose more than\njust rink B, we can choose\nreally Kovan, rink B, ropsten.\nAnd layer twos like arbitrage\nand optimism, we're going to be\nusing rink B. So let's go ahead\nand create this app. We're going\nto choose the free plan and hit\nContinue. We're going to skip\nadding payments. If you want to\ntweet your referral code, feel\nfree to tweet your referral\ncode. We're going to skip for\nnow. And we're going to keep it\nat capped capacity. Since we\ndon't have a we don't have a key\nin here. And then how did you\nhear about us go ahead and give\nme that shout out at Patrick and\nFree Code Camp and then hit\nLet's go. Now we get to the\nalchemy dashboard, where we can\nsee a ton of information about\nour node and different ways to\nconnect to the nodes and and\nstuff like that. This is going\nto be really similar to to this\nRPC server endpoint of ganache,\nexcept it's going to be a\nconnection, except it's going to\nbe a connection to a real test\nnet or real main net. What we\ncan do now is we can select our\nour app that we just made. And\nwe can hit View key. And we can\nsee here we get an API key Key,\nwe add an HTTP endpoint and we\nalso get a WebSocket. We're only\nconcerned with the HTTP\nendpoint. This is going to be\nour RPC URL that connects to\nrink B. So what we can do now is\nwe can copy this and come over\nto our Visual Studio code. And\nin our dot env, we can\nsubstitute these out for their\nactual tests and values. So for\nRPC URL, we're going to delete\nthis and replace it with our\nRigby RPC row. And now how do we\nget a private key for an actual\ntest set that has actual rank be\non it? Well, here is where we\ncan use our meta masks. So back\nin your browser, go over to your\nmeta mask, select the three\ndots, go to Account Details,\nexport private key. And this is\nwhere you can export your\nprivate key, type in your\npassword and boom, you now have\nyour private key for your\naccount on meta mask. Now\nremember, please, please, please\ndon't continue with a meta mask\nthat has actual money in it. A\nquick way to check is by going\nto your networks tab and seeing\nif on any of the main nets or\nthe networks with actual money\nin it, you see any money, I\ndon't have any money in this. So\nI know I'm good to go. If you\nhave tests that money, that's\nfine, because that's fake money\nanyways. And again, most\nbrowsers have a profile\nmechanism where you can create a\nnew profile for you to use. But\nhere now that I've copied my\nprivate key, we can come back to\nour Visual Studio code, paste\nthe key in here. And now I have\na private key that has actual\nrink be in it. Awesome. And\nremember, if you ever get low,\njust come over to faucets dot\nchain dot link slash Rigby get\nsome tests eath I'm not a robot\nwill send the request. Now that\nwe have our private key in our\nrink being here, we can now try\nto run this on an actual test.\nNet, we look at our code, we see\nwe're grabbing an RPC URL, which\nis going to be from r dot end,\nwe're grabbing a private key\nwhich is going to be from our\ndaughter Yun V, which points to\nour rink D Metamask. And our\nrink B blockchain. So let's just\nadd a console dot log under our\ncontract deployment so that we\nknow what address it's at. So\nwe'll do console dot log, we'll\ndo some string interpolation,\ncontract, address,\ncontract dot address. All right,\ngreat. Now let's go ahead and\nrun this. So we'll do node\ndeploy dot J. S deploying Please\nwait, you'll notice this takes a\nlot longer. Because we're\ndeploying to a test net instead\nof our own fake local\nblockchain, test nets and real\nnetworks often will take a\nlittle bit longer because they\nneed to wait for the blocks to\npropagate the transaction to go\nthrough, etc. But after a brief\ndelay, we will indeed see that\nwe get a contract address here.\nAnd we have a current favorite\nnumber. And it's being a little\nslow again, because we're\nwaiting for our next transaction\nto go through to update the\nnumber and boom, looks like\nwe've successfully updated it.\nNow something that's important\nto know if ever you run command,\nand you want to kill it, you can\ndo Ctrl C, and that will stop\nit. So any command in the\nterminal that you want to just\nabort Ctrl. C is your Get Out of\nJail Free card and that will\nkill it. That'll stop it\nwherever it is. So we'll use\nCtrl C a lot in the future. So\nnow let's grab this contract\naddress and go over to Frank V\nether scan and paste it in, we\ncan see our two transactions\nhere, we can see we have a\ncontract creation. And we can\nalso see we call a store\nfunction. This is awesome. We've\nsuccessfully deployed a contract\nto the wrinkly chain using our\nown code. Congratulations, this\nis massive. Now on ether scan,\nwe actually can verify and\npublish our contract code. What\nis verifying and publishing your\ncode? Well, right now, our code\nlooks like a huge gerbil of\nbytecode. And anybody looking at\nour contract directly on chain\nwill just see this huge jumble\nof bytecode, we can use a\ndecompiler to try to decompile\nthe bytecode into what it looks\nlike in solidity. But this can\noften take a long time and, and\na lot of processing power. So\ninstead, we can just make it\nmuch easier by verifying and\npublishing the code ourself, you\ngo ahead and hit verify and\npublish. We can scroll down and\nwe can add compiler information\nto compile this on ether scan\nand other block explorers. This\nis a single file compiler\nversion is zero point 8.7. And\nit's open source is licensed is\nMIT. Let's go ahead and\ncontinue. And we're going to\ncopy paste our solidity code\ninto this large section. Paste.\nWe don't have any constructor\narguments so we can skip this\nsection. We don't have any\nlibraries or any other\nmiscellaneous settings. So we'll\nselect I'm not a robot and we'll\nhit verify and publish. You\nmight have to wait a few\nminutes, but awesome. Our\ncontract was successfully\ncompiled. Now if we go back to\ncontract source code, we can see\nall the code in here. And if we\ngrab our contract address, place\nit into place into the search\nnow, and we go to contract, we\nget a little green checkmark.\nAnd we can see, anybody can now\nread our source code.\nAdditionally, those buttons that\nwe saw and remix for reading\nfrom our contract, and writing\nto our contract, are in this\nread contract and this write\ncontract. If we read the\ncontract, and we retrieve the\nmost recent number, we do indeed\nsee that we have seven here\nbecause we recently stored\nseven. Awesome, quick note, this\nmight already be verified for\nyou, since ether scan might get\nsmart enough to notice that a\nlot of people are deploying the\nsame bytecode it's already\nverified for you just go ahead\nand walk through these steps\nanyways. Now the code\nverification we just did was\npretty simple and\nstraightforward, because our\ncode was pretty simple and\nstraightforward. Using larger\nand more complex code can make\nthe verification process a\nlittle bit harder. Additionally,\nwe don't always want to have to\nclick buttons on ether scan. To\nverify our code, we want to do\nit programmatically. So in later\nsections, we'll learn how to\nverify all of our code directly\nthrough our code editor, you can\nimagine the process is this easy\nfor deploying to any EVM chain\nin our alchemy, we could easily\ncreate a new app and change our\nnetwork. And you could see how\neasy it would be to just switch\nout this RPC URL and your\nprivate key to work on a\ndifferent chain. This process is\nalso the same for harmony\nPhantom, avalanche, etc. And if\nwe wanted to switch chains, we\nwould just switch the RPC URL\nand switch the private key, and\neverything else would stay\nexactly the same. Now, Alchemy\nalso shows us and can teach us a\nlot about transactions and about\nthings that are going on behind\nthe scenes, including a concept\ncalled the mempool. To help us\nunderstand a little bit more\nabout those transactions that we\njust sent, and how to work with\nAlchemy. To see more about our\ntransactions, we have Albert\nfrom the alchemy team to give us\na little demonstration.\nHello, Albert here from alchemy,\nI'm that guy in tech on Twitter,\nfeel free to follow if you want\nto engage and ask any questions\nabout this section of the video.\nBut super excited to join\nPatrick here to explain a little\nbit of what goes on behind the\nscenes when you are using\nalchemy to submit a transaction.\nAnd we have a ton of tools to\nactually provide a window of\nvisibility into what's going on\nso that you can actually debug\nin case there are usage errors\non your website, or there are\npending transactions that are\nstuck. Whatever it is, we\nprovide that window into the\ndata that you control. Remember\nthat all the transactions that\nyou submit are recorded on the\nblockchain. They're not\ncontrolled by alchemy, they're\nnot controlled by any other\nservice provider. We are just a\nwindow, we're just the plumbing\nthe piping to be useful to you.\nSo let me show you exactly what\nthat means. Right now I have a\nbunch of applications in my\ndashboard. You can see here that\nthere are different projects\nthat I've used over time. This\none is the most recently active,\nand it is the one that I have\ncurrently set up to connect to\nmy meta mask. So actually use a\ncustom RPC provider here. And\nlet me make my face a little\nsmaller. And you can see here,\nI've misspelled Rinkeby. But\nthis right now, my my network is\nactually connected to the\nRinkeby test network via\nalchemy. So this is actually\nthis application. So if I click\ninto here in the dashboard, you\ncan see here, a bunch of really\ninteresting statistics, this is\nthe first thing that you'll\nprobably use. If you're trying\nto understand more about your\napplication, you'll go here and\nyou can see how many compute\nunits per second your\napplication is currently using.\nAnd this is kind of great for\nspecifically alchemy usage,\nunderstanding. But then this is\nalso really useful to see like,\nwhat's the median response time,\nand so 33 milliseconds is pretty\ngood. If that starts to\nincrease, then you might want to\nfigure out, you know, what's\ngoing on here, success rate, it\nhas been kind of low. So that is\na clue for me to click on this\ntab to view recent invalid\nrequests. And that I can\nactually see oh, there's a bunch\nof\nfailed transactions where the\ntransaction has already been\nsent or the nonce is too low, or\nwhatever it is, I can actually\nuse this tab to debug. So that\nsuccess rate is pretty useful.\nThroughput that's been limited.\nSo if you are sending too many\nrequests or your website is\ngetting spammed, you might start\ngetting some requests blocked.\nSo that's what's useful to view\ntheir concurrent requests over\nhere, success rate in the past\n24 hours versus the past one\nhour, the total number of\nrequests in the last 24 hours.\nAnd this is different than\ncompute units, because each\nrequest can have a different\nlevel of computing cost. And\ncomputing cost as measured by\ncompute units. Total requests is\njust the actual number of\nabsolute requests. And then of\ncourse, the number of invalid\nrequest. Cool. So one thing I do\nwant to show you that's\ninteresting is when I do submit\na transaction, and I actually\nhave one right here, I want to\nsend so let's transfer between\nmy accounts, and I'm just gonna\nsend it to tiny amount of\nRinkeby eath. But I'm going to\npurposefully edit my gas fees to\nbe super, super low so that the\nnode will actually not muck send\nthe transaction to be mined, or\nthere are no miners that will\nactually pick it up. So you can\nsee here I've divided the the\npriority fee and the max fee by\na ton. So it's super low. And it\nmight confirm that in the MME\nMax UI, you'll see that the\ntransaction has been pending for\na bit. And we'll go over to this\nmempool tab. This is another\nreally useful visualization. And\nwhat the mempool is, is a kind\nof a holding ground, I like to\nthink of it as the waiting room\nof a restaurant, where if you're\na transaction, and you're\nwaiting to get mined, the\nmempool is kind of like the\nwaiting room where you're\nwaiting to get seated. So there\nare different statuses for your\neach of your transactions, the\nones that you always want to see\nare the mines transactions,\nbecause that says that your\ntransaction is successful. And\nit's now part of the blockchain.\nNow, the mempool, every node has\nits own, you know, holding\nground. So I can actually show\nyou this quick visualization.\nRemember, blockchains are run by\na network of nodes. And each\nnode or each computer that's\nrunning the theorem, software\nmaintains a copy of the\nblockchain. And as a developer,\nyou have to use these nodes to\nmake requests to the blockchain.\nNow you can use alchemy, you can\nuse another RPC provider, you\ncan spin up your own node if you\nwant to. But regardless, you\nneed to use a node to\ncommunicate with the chain. Now\neach node beyond having a copy\nof the entire blockchain state,\nit also has a local memory of\ntransaction. And that's called\nmempool. So if there are pending\ntransactions that are waiting to\nbe mined, you can consider them\nas being in the mempool. Now\nthat's what we're looking at\nright here. If we click on the\napp that I am currently using\nfor my Metamask RPC, then you\ncan see here that there are,\nthis is not the right one, this\none is the right one for\nwrinkling. For all the\ntransactions here, you can see\nsome more drop in placed\nsomewhere mind and there's one\nthat's pending, and this\npending, one actually matches up\nwith the one that is pending,\nhere, it's being sent to 0x, C,\nBB. And if we click on this\ntransaction hash, you get all\nthe information that you need to\ndebug. So you can see here that\nit's from my current address,\n0x, five F, and then it's two\n0x, C, BB. And here's the value\nthat I'm trying to send. Here's\nthe gas fee that I've attached\nto this transaction. And you'll\nnotice that that is super low,\neven for the Rinkeby test\nnetwork. So knowing this, and\nseeing, wow, this transaction\nhas been pending for one minute\nand 46 seconds, it was sent at\nthis time, I should probably fix\nthat. And so over here, you can\nactually use the metamath RPC,\nmeta meta mask API. And speeded\nup. And then I'm just going to\nuse the auto high speed up to\nupdate the gas fees. And then if\nwe go back to our dashboard back\nto our application, you can see\nthat there are some new recent\ninvalid requests. And this is\nbecause we've resubmitted a\ntransaction, and then in their\nrecent requests we have, let's\nrefresh that real quick. You can\nsee that we are sending a raw\ntransaction, this one's already\nknown. And there's another one\nbefore, but it that's resulting\nin a get transaction receipt\nthat is successful. And then if\nwe go back to the mempool, you\ncan see boom, no more pending\ntransactions only dropped and\nreplaced and mined. So this\ntransaction nonce number five is\nnow successful, and you're on\nyour way to developing and\nmaintaining the rest of your\napplication. So yeah, thanks\nhope that was useful. Let me\nknow if you have any questions.\nNow, other than the TypeScript\nportion, which I'll do at the\nend, you've successfully\ncompleted this section. And wow,\nyou've learned a ton. Let's do a\nquick review of everything that\nwe've learned. Well, first,\nwe've learned how to create new\nprojects with Node js, we've\nlearned what the node keyword\ndoes and how we can use the node\nkeyword. To run JavaScript in\nour local development\nenvironment, we learned that we\ncan add different dependencies\nof external packages into our\nlocal package using yarn or NPM.\nAnd we can see those\ndependencies added in package\ndot JSON, we know that they've\nbeen installed because they get\ninstalled into the node modules\nfolder, we can also create a\nscript section where we can\nminimize long commands that we\nneed to run into a single\nkeyword, like compile for\nexample, we can just run yarn\ncompile. To compile all of our\ncode, we learned the basic setup\nof our JavaScript scripts, we\nimport our packages at the top,\nwe have some main executor\nfunction at the bottom. And then\nwe have our main function in the\nmiddle, we use the async keyword\nso that our function can use\nasynchronous programming, and we\nget access to the await keyword,\nwhich basically means Hey, wait\nfor this promise to finish doing\nits thing. We're able to connect\nto any blockchain we want using\nan RPC URL, and then we're able\nto connect our provider to a\nwallet or a private key in\nethers by doing something like\nthis. Speaking of So we've\nlearned about the ethers\npackage, which is a tool that\nmakes our life a lot easier to\ninteract with the blockchain in\nJavaScript, if we decide to,\nwe've also learned we can\nencrypt our private keys so that\neven if our computers get\nhacked, our private keys aren't\nlying around in plaintext. And\nwe've learned how to run scripts\nfrom our encrypted keys. We've\nlearned how to get the ABI or\nthe application binary\ninterface, and the binary of our\ncode to deploy to a blockchain,\nwe've learned how to deploy our\ncontracts to a blockchain\nprogrammatically. And then we've\nlearned how to interact with our\ncontracts programmatically as\nwell. Additionally, we've\nlearned how to add a default\neditor in our settings dot JSON\nof our VS code. But we've also\nlearned how to override those\nsettings by adding prettier\nusing a dot prettier rc file\nthis way, we can auto format our\ncode to make it look a lot nicer\nand much easier to read.\nFinally, we learned how to\ndeploy one of these contracts to\na real test net or a real\nnetwork. And then we finally\nlearned the manual way to verify\nour contract source code. Like I\nsaid, we're going to learn a lot\nof shortcuts. And a lot of ways\nto make this all a little bit\neasier in coming sections. Oh,\nyou have done a phenomenally to\nreach this section, give\nyourself a pat on the back, take\na break, go for a lap, and feel\nreally proud about yourself that\nyou made it this far, we've got\na lot more to go. But you have\ncome a phenomenally long way.\nCongratulations. Or take that\nfive to 10 minute break and come\nback when you're ready.\nNow the one thing left I want to\nshow you all is the TypeScript\naddition to this. However, if\nyou're not interested in the\nTypeScript edition, which you\ndon't have to be, then you're\ndone, there's only a couple of\nchanges we need to make to make\nthis TypeScript compatible.\nFirst, of course, we're going to\nchange our deploy.ts and encrypt\nkey, we're going to change our\ndeploy and our encrypt key from\ndot j s two.ts. And then we're\nalso going to swap these\nrequires out for imports. So\nwe're going to import ethers\nfrom ethers, we're going to\nimport star as Fs from Fs extra.\nAnd then we're going to import\ndot TMP slash config. And then\nwe're just going to copy these,\nand we're gonna come over and\npaste them into here, deleting\nor commenting out the requires,\nokay, great. Now, if we try to\nrun Node deploy.ts, we're going\nto get cannot use input\nstatement outside of a module.\nIn JavaScript, if we'd want to\nuse an import statement outside\nof a module, we'd come in here\nand do some like type module\nlike that. But in TypeScript, we\nactually don't even need that.\nAll we need to do is run this in\nTypeScript note. So to add\nTypeScript, we're going to do\nyarn, add TypeScript. And we're\nalso going to add TS node. TS\nnode is the TypeScript edition\nof node. So now that we've added\nthat we can try a TS node\ndeploy.ts. And we're still going\nto run into an error. And if you\nscroll up, we're gonna get a\ncouple errors here. We're gonna\nsay, could not find a\ndeclaration file for Module Fs\nextra, we need to add the\nTypeScript version of them. So\nwe're gonna do yarn at types\nslash Fs extra. That, and if we\nrun it again, it still shouldn't\nwork. But for a different\nreason. Yes, we're gonna get\nsomething like this type.\nUndefined is not assignable to\ntype bytes. Like the reason we\nget this is because process dot\nEMV private key in TypeScript\ntechnically, is type string, or\nundefined. So we need to tell\nTypescript and and the Wallet\nObjects. And the Encrypt\nfunction is looking for a type\nstring, not string or undefined.\nSo we just need to tell\nTypeScript that this will not be\nundefined. So we can just put a\nbang here. And everywhere that\nwe use process, study and be,\noops, I got to do that on\ndeploy, as well. Bang, looks\ngood. Now that we've added\neverything in here, we run TS\nnode deploy.ts, we're gonna see\nthe exact same output as we saw\nwith just using regular node.\nAnd as long as our private key\npassword is in our dot env file.\nIf we run TS node and crypt\nkey.ts, we're gonna get the\nexact same setup as before. And\nwe're gonna get a new encrypted\nkey dot JSON. And that's all you\nneed to do to make this\nTypeScript compatible. And you\nshould give yourself a huge\nround of applause for getting\nthis far and learning what's\ngoing on underneath hardhat. The\nnext tool that we're going to\nlearn and learning all about\nthese transactions and how to\ninteract with these blockchains\nthis is absolutely massive, so\nhuge. Congratulations.\nAlright, so now that we've\nlearned about ethers js and how\nto do some more raw JavaScript\ncoding, we're now going to move\ninto hardhat. We saw with our\nether symbol storage that\ndeploying a contract can take a\nlot of code. And there's a\nnumber of things we didn't even\ndo in here. Like we didn't save\nwhere this contract was\ndeployed. So we'd have to go\nremember where it was deployed\nevery time. Instead of having it\njust added programmatically. We\ndidn't write any tests here, and\nwe'd have to build our own\ntesting infrastructure. Maybe we\nwant to make this a cross chain\napplication. And we want more\nthan just one private key and\nRPC URL, you can absolutely work\nwith your smart contracts in\nJavaScript purely through ethers\nand small scripts like this. But\nwe want a more robust framework\nfor doing all this. And that's\nwhere hard hat comes into play.\nHardhead is easily one of the\nmost, if not the most popular\nsmart contract development\nframework out there. It's used\nby massive several billion\ndollar protocols like Ave\nuniswap, sushi swap, and more.\nIn fact, I recently did a poll\non Twitter. And even though a\nlot of my content has been more\nbrownie and Pythonic, Hardhead\nwas well and beyond the most\npopular framework, and Hardhead\nhas quickly become one of the\nmost advanced frameworks out\nthere. Hardhead is a development\nenvironment, which allows for\nJavaScript based development,\nkind of like what we saw with\nethers, it gives us even more\ntools to integrate our code with\ncommon things that we want to\ndo. It's incredibly extensible,\nand it has really nice debugging\nfeatures as well. And it's just\nan overall fantastic tool. So\nlet's go ahead and let's jump\nin. If you want to follow along\nwith the code, come over to the\nGitHub repo and scroll down.\nLesson Six heart had simple\nstorage, and all the code is\nlocated here. And a quick note\nfor the future ever, you want to\njust download all the code from\none of these repositories, the\nway you can do that is by doing\na git clone, what you do is you\ncome to the folder that you want\nto put this code in, and you run\ngit clone. And then you grab the\nURL that you want to clone,\npaste it in. Now, you can CD\ninto your new folder here that\nhas everything downloaded\ndirectly from GitHub, but only\ndo that as a backup or to just\ndownload the code yourself. But\nfor now, just follow along with\nme. Right, so let's do this.\nLet's create our next project\nusing hard hat. The project that\nwe're going to be making is\ncalled Hard Hat, simple storage\ndash FCC or Free Code Camp. This\nis going to be us working again\nwith that simple storage\ncontract. But in hard hat, we're\ngoing to show you a ton of the\nfantastic tools that we can use\nto make our coding life way\neasier. So I'm in a brand new VS\ncode, and we're going to create\na new folder for us to run all\nthis. Now what you can do to\ncreate a brand new folder is you\nonce again you can do MK dir,\nhard hat, simple storage of CC.\nNow we can cd into hard hat\nsimple storage of CD, and type\ncode, period. And this will open\nup a new Visual Studio code\ninside of that folder. Now if we\nopen up our terminal, you'll see\nthat we are indeed inside that\nfolder. Now if that doesn't work\nfor you, you can still of course\nto File, Open folder and select\nthe folder you'd like to open.\nAnd you'll be inside of that\nfolder. Now that we have our\nfolder setup for working with\nhard hat, we can begin setting\nup our environment to be\nincredibly professional using\nthe hard hat framework got a\nlink to the hard hat\ndocumentation inside our whole\nblockchain solidity course, yes,\nthe hard hat documentation is\nphenomenal. And I highly\nrecommend everybody have it up\nas they go through the section.\nBecause it's going to give you\npretty much everything that you\nneed to know for working with\nhard hat, you can simply go\nahead over to tutorial and get\nstarted. If you want to pause\nthe video here and read through\nthe tutorial, I recommend doing\nso it'll give you a lot of\ninformation about how to work\nwith hardhat. And more about\nhardhat. However, we're just\ngoing to jump right into setting\nup the environment. We've\nalready installed no Gs on\nLinux, or Mac OS. And those of\nyou who are using Windows, I set\nyou up with WsL. So you can just\nfollow the Linux instructions.\nNow to create a new hard hat\nproject, you can actually just\ngo ahead and run these steps\nright here. Instead of NPM,\nwe're going to be using yarn,\nbut if you want to use NPM, you\ncan absolutely do so the hard\nhat Doc's say run npm init dash\ndash, yes, we're just going to\nrun yarn in it, which is going\nto create a new project for us\nin this folder. So let's give it\na name, which if we want it set\nto this hard hat symbol storage\nFF FCC, we just hit enter, we'll\ngive it a version. And when if\nwe want it 1.0 point oh, we just\nhit enter. We're going to skip\nthe description for now just by\nhitting enter. And we're just\ngoing to hit Enter for this as\nwell. And for this as well enter\nfor this as well and for this as\nwell and over this as well. Just\nto keep those as blanks. And if\nwe look in package json, we now\nsee we have a name Hardhead\nsymbol storage that FCC we have\na version we have a main which\nwe're actually going to delete\nthe main and then we have a\nlicense as well. yarn in it just\nsets up this package json for\nus. Now we're going to do yarn,\nadd dash dash dash\nof our app. So far, we've just\nbeen running yarn add, and then\nwhatever our package name is.\nBut for most of what we're\ndoing, we really want to do yarn\nadd dash dash Dev. The reasons\nfor this is a little bit\nnuanced. But we can see some of\nthe information on this\nStackOverflow question here. The\nmain difference is that\ndependencies are required to run\nyour project. Whereas dev\ndependencies are required only\nto develop. For the most part,\nwe're going to be doing just\ndash dash Dev, when we get to\nthe front end portion of this\ncourse, we'll be installing more\npackages that we don't need just\nfor development. Now in the same\ndirectory where we install hard\nhat, you can run MPX hard hat.\nSo a quick note about MPX is\nthat the yarn equivalent of NPM\nis just yarn. So yarn goes NPM,\nthe yarn equivalent of MPX is\nalso yarn. So pretty much\nanytime you see MPX, do\nsomething, you can just replace\nthat MPX with yarn, and it'll do\nthe exact same thing. If you\nwant to run this with NPM or\nMPX, you can absolutely do that\nas well. So for us, we're going\nto run yarn hardhat. And we'll\nsee we'll get prompted to\nactually start creating a\nhardhat project, run yarn\nhardhat. And we'll get this\nwonderfully cute prompt right\nhere and saying welcome to\nHardhead. What do you want to\ndo, create a basic sample\nproject, create an advanced\nsample project can advance some\nproject uses type script or\ncreate an empty\nhardhat.config.js. For us, we're\njust going to select create a\nbasic sample project. And this\nis going to give us all the\nboilerplate for a really simple\nhardhat project. The hard hat\nproject route is going to be\nthis folder that we're in right\nnow. Do you want to add a Git\ndot Git ignore? Yes, we\nabsolutely do. Because we're\ngoing to be using dot env files.\nDo you want to install this\nsample projects dependencies\nwith yarn at nomic labs hard hat\nat a theory and waffle at Chai?\nWe're going to go ahead and say\nyes, and I'll explain what all\nthese dependencies are in a bit.\nLet's go ahead and say yes for\nnow. And we're going to install\nall these dependencies. Now, if\nwe look in our package, JSON, we\ncan see we've added a number of\ndependencies like nomic labs,\nHardhead ethers, not MacLeods,\nHardhead, waffle, Chai,\nAetherium, waffle, and ethers.\nObviously, we're already\nfamiliar with ethers, but the\nrest of these might be a little\nnew. We'll talk about those\nlater. And great, we now have a\nsample hardhat boilerplate\nproject. Let's walk through what\nwe just installed here. The\nfirst thing we have is a\ncontracts folder, which comes\npre populated with greeted\noutsole is really minimalistic\ncontract here. Next, you'll see\nnode modules, which of course is\nour installed JavaScript\ndependencies. Something I want\nto know because it was really\nconfusing to me when I first\nstarted working with this is\nsome of these node modules start\nwith an add sign, and then a lot\nof them don't. What's the\ndifference between those two,\nthese outside node modules are\nknown as scoped packages, which\neffectively allow NPM packages\nto be namespace or yarn\npackages. This allows\norganizations to make it clear\nwhat packages are official and\nwhich ones are not. For example,\nif a package has a scope at\nAngular, you know, it's\npublished by the Angular core\nteam. So it's the same thing\nwith this anything with AP ens\ndomains we know is by the ens\ndomains team, anything with\nabnormal Labs is going to be by\nthe team that created hard hat.\nSo that's why this at nomic\nlabs, hard hat ethers and at\nnomic labs, hard at Waffle has\nthis at sign, because we know\nit's published by the nomic labs\nteam, then we have a scripts\nsection. This is going to be\nwhere we're adding any and all\nof our scripts that we want to\nwrite like deploying contracts,\ninteracting with contracts, etc.\nAnd then we have a test folder.\nWe haven't started building any\ntests yet. But tests are\nincredibly important for working\nwith smart contracts. And this\nsample test folder gives us a\nminimalistic test for testing\nour smart contracts. We of\ncourse have Git ignore, which of\ncourse comes pre populated with\nsome important things to ignore\nlike Dotty and V. And also node\nmodules because node modules\nmight get too huge push up to\nGitHub. And one of the biggest\nchanges here is it adds this\nhard hat.config.js. This file\neven though it's minimalistic,\nright now, you can think of as\nthe entry point for all the\nscripts that we write, it's the\nconfiguration file that\ndetermines how the rest of our\ncode is going to work and\ninteract with the blockchain.\nThen of course, we have package\ndot JSON, we get started with a\nreadme. Remember how the first\ntime we ran yarn hard hat, we\nwere prompted with this Getting\nStarted piece. Now if we run\nyarn Hardhead, we're actually\ngoing to get output of all the\ndifferent options and commands\nwe can use\nwith running hard hat. Now, if\nyou run into an issue where you\nrun yarn, hard hat, and this\npops up, but you don't see a\nhard hat.config.js in your\nfolder, it likely means that\nthere's a hard hat dot config\ndot j s in a higher level\nfolder, or there's a node\nmodules with hard hat in a\nhigher level folder. So if that\nhappens, maybe CD down a\ndirectory and do a little LS and\nlook to see if you've got a hard\nhat.config.js or node modules in\nearlier folder. And because I've\nactually seen a number of\nengineers have a couple of\ndifferent problems here. My\nfriend CAMI is going to explain\nA couple of different\ntroubleshooting tips you can\ntake to try to avoid these\ncommon errors.\nAs a developer the most annoying\nthing to deal with our\nenvironment set of issues. My\nname is Camila Ramos. I'm a\nDevRel engineer at edge node\nsupporting the Graph Protocol.\nAnd I'm going to show you how to\nsolve two common problems that\nyou might see when working on\nthis project. After installing\nhardhat. And running the command\nand px hard hat in your new\nproject folder, you're going to\nexpect to get back a menu of\noptions like this, but sometimes\nyou're not going to get that\nback. And when you run into this\nerror, there is a solution for\nyou. And it usually just means\nthat you have a config file\nsomewhere that it shouldn't be,\nand deleting it will get rid of\nthat error. What you're going to\ndo in order to find this file\nthat you need to delete is run\nthe command MPX hardhats space,\nhyphen, hyphen verbose. And this\nis going to spit out where this\nfile is if you have one, and\nit's going to tell you exactly\nwhere it is so that you can\ndelete it. After you've deleted\nthis config file, you should be\nable to run MPX hardhat in your\nproject folder and get back that\nmany that we were expecting.\nAnother problem that is pretty\ncommon. And I still run into all\nthe time is forgetting to npm\ninstall, whenever you're working\nwith a repo that other people\nhave been working on on GitHub.\nSo let's say you're pulling down\nsome code that you and some\ncollaborators were working on\ntogether, and then suddenly,\nit's not working for you, you\nprobably just need to npm\ninstall. So in your terminal, go\nahead and navigate to where this\nproject is located and then run\nthe command npm install. If\nthere are any new packages that\nwere installed in the time that\nyou weren't working on the code,\nthose will get installed locally\nfor you so that when you run the\ncode, it will be able to run\nsuccessfully.\nWhat are some of the main things\nwe can do with hardhat in its\nraw state here, these are some\nof the main tasks that we can\nrun with hardhat different tasks\nor just different commands, we\ncan run with hardhat. For\nexample, we can do yarn hardhat\ncounts, which will print out a\nlist of fake accounts we can use\nwith Hardhead. Similar to the\nlist of fake accounts that we\nused with ganache, we can\ncompile our contracts by running\nyarn Hardhead compile. Very\nsimilar to what we did with\nethers Jas and soap Jas, you'll\nsee when we run compile, we get\na cache, which is just going to\nbe a quick way to access\nsolidity files, and we also get\nan artifacts section. This\nartifacts folder contains all\nthe information about our\ncompiled code we look in here\nnow we can, for example, look in\nthe build info and see a ton of\ninformation about our compiled\ncontract. If you're looking\ncontracts, we can see more\ncompiled information. And then\nif we look in the hardhat, slash\nconsole.so, we can see more\ncompiled information. So all of\nour compliation information is\ngoing to be in this artifacts\nfolder. And whenever you want to\nlook to see what's going on on\nthe lower level when you compile\nthis artifacts folder is what\nhas everything. There are a\nnumber of other hard hat tasks\nthat we can run as well. But\nwe'll get to them as we go. So\nnow that we have some of the\nbasics of hard head down, let's\ngo ahead and try doing some of\nthe same things we did with\nethers before but with hard hat.\nSo one of the first things we\nwant to do is we want to write\nand interact with our smart\ncontracts. So let's go ahead and\nrename greeter dot soul to\nsimple storage dot soul, you can\nclick on the file and hit enter\nand should be able to rename it.\nOtherwise, you can go ahead and\nright click, delete it, and then\ncreate a new file and call it\nsimple storage dot soul. We're\ngoing to copy paste all of our\ncode from our previous simple\nstorage that saw into this file,\nwe can make sure that our simple\nstorage is compiling correctly\nby running yarn hardhat compile.\nWhoa, it looks like we ran into\nan issue project cannot be\ncompiled. See reasons below the\nsolidity pragma version of the\nfile. It doesn't match any of\nthe configured compilers in your\nconfig. Hmm, well, what's going\non contracts slash symbol\nstorage that's Sol zero point\n8.8. Ah, okay, let's go ahead\nand fix them. So we can open up\nour hard hat dot config dot j s.\nNow a quick note on opening\nfiles. If you're on Mac and you\nhit Command P, you can actually\nstart typing in the names of\nfiles to get them to them\nquicker. Or if you're on Linux\nor Windows, you can type Ctrl p,\nthis will bring up and\ninterestingly if you type man P\nor ctrl p and then you hit the\ngreater than key. This will drop\nyou into the command palette,\nknow command palette, command\npalette, search for files,\nsearch for commands in our\nHardhead dot config. Jas, I'm\ngonna scroll down to module dot\nexports and change this to zero\npoint 8.8. So that the version\nthat we're going to compile for\nsimple storage, it's gonna be\nthe same version and that hard\nhat is looking for. Let's run\nthat same command by just\nhitting up yarn Hardhead\ncompile, and awesome we see\ncompiled one solidity file\nsuccessfully. We should now see\nthis in artifacts. If we go to\nartifacts and contracts. We now\nsee two contracts in here,\ngreater and simple storage and\nwe can see a ton of the\ninformation about simple storage\nwe can also see some more lower\nlevel in Information and build\ninfo. Alright, so now that we\nhave our simple storage contract\nin here, the next thing we\nprobably want to do is learn how\nto deploy it. This is where\nwe're going to write our deploy\nscript. Now, for this section,\nI'm going to be showing you how\nto write a deploy script. But in\nthe next section, we're going to\ndo it a little bit differently.\nBut this is still going to teach\nyou how to write scripts and\nworked with scripts in heart\napp. So we're going to come to\nour sample script dot j s, and\nwe're gonna go ahead and hit\nenter and renamed it to deploy\ndot j s. And if you want to read\nall the comments in here, you\nabsolutely can, we're just gonna\ngo ahead and delete them all. A\nquick keyboard shortcut is if\nyou hit Command A or Ctrl, a,\nyou'll highlight all the text in\nyour file, and we're going to go\nahead and delete it all. So now\nwe're just going to start from\nscratch here. Now the setup for\nour deploy script in here is\ngoing to look really similar to\nthe setup of our deploy script.\nFrom our previous section, we're\ngoing to do imports at the top,\nwe're going to have our async\nmain function, and then we're\ngoing to call the main function.\nSo let's go ahead and define our\nmain function, we'll call it\nasync. function main, like that,\nand then we'll call our main\nfunction. And if you want to\njust copy paste this from the\nlast section, you absolutely\ncan. So we'll domain that then.\nBoom, just like that. And\nbecause of these semicolons are\ngoing to drive me absolutely\ninsane. We're also going to add\nprettier, and our solidity\nprettier plugins. So we'll do\nyarn, add dash dash Dev,\nprettier and prettier, plug in\nsolidity. Then we can go ahead\nand create our dot prettier, rc\nfile, we're going to add tab\nwith four, use tabs, false, semi\nfalse, and then single quote,\nalso false. Now we're going to\nbe using this prettier rc file\nsetup a lot. So in future\nsections, if you want to just\ncopy paste it, you can\nabsolutely do that as well.\nWe're also going to add a dot\nprettier, ignore, which tells\nprettier not to format some\nfiles, which we want, we don't\nwant prettier to spend a ton of\ntime formatting all of our\nfiles, I'm just going to copy\npaste from the GitHub repo. So\nfeel free to copy paste from the\nGitHub repo as well, you'd find\nall the code for this section,\nlike I said, in the GitHub repo\nassociated with this course.\nNow, unlike in our last section,\nwhere we had to grab our\ncontract code a little bit more\nmanually, with hard hat, it's\nactually a number of different\nways to grab compiled contracts.\nThe first way we're going to do\nit, we're actually going to use\nethers. And now this is where\none of the first confusing\nchanges actually comes in.\nPreviously, we did const ethers\nequals require ethers. And that\nwas how we went ahead and worked\nwith ethers. However, you'll\nnotice in our dev dependencies,\nwe have this dependency called\nHard Hat ethers. Hard Hat ethers\nis a package that actually wraps\nhard hat with its own built in\nethers. This is really\nadvantageous because it allows\nhard hat to keep track of\ndifferent deployments at\ndifferent scripts and all these\nother things for us. So instead\nof importing ethers directly\nfrom ethers, we're actually\ngoing to import ethers directly\nfrom hard hat instead. This\nmight seem a little confusing at\nfirst, but just know if we want\nto work with ethers and heart\nit, it's usually much better to\npull it in from heart and you\ncan still do this and ethers\nwill still work the same. But\nhard hat won't necessarily know\nabout different contract\nfactories in different pieces\nand, and you'll see that in\naction in a second. Now that\nwe're pulling in ethers, we can\nactually immediately grab a\ncontract factory using ethers.\nWe can say const simple storage\nfactory equals await ethers dot\nget contract. Factory simple\nstorage. So in order to get a\nsimple storage, contract\nfactory, we can just do await\nethers dot get contract factory.\nNow if we pulled right from\nethers, the package ethers\ndoesn't know about this\ncontracts folder and ethers\ndoesn't know we've already\ncompiled simple storage dot\nsoul. And it's in our artifacts.\nHard Hat, on the other hand,\ndoes know about the contracts\nfolder and does know that it's\nalready compiled, which is why\nthis simple storage factory\ngrabbing work so well. Once we\nhave our factory here, we can do\nthe same thing that we did in\nour previous section and deploy\nthe contract. So we'll do a\nquick console dot log. Deploy\nflooring, contract done, and\nthen we'll do Kant's simple\nstorage equals await simple\nstore edge factory dot deploy\nAnd boom, with that little bit\nof code, we're already able to\ndeploy our simple storage\ncontract, then to wait to make\nsure it gets deployed, we can do\nawait, simple storage, deployed.\nAnd that's it. Now let's see\nwhat happens when we go ahead\nand run this deploy script. As\nyou know, in our last section,\nwe had to put in a private key,\nand we had to put an RPC URL.\nRight now, we don't have either\none of those defined. So what do\nyou think should the script\nactually work? Or do you think\nit'll break because we, we\ndidn't define what blockchain\nwe're going to deploy you. We\nalso didn't find a private key.\nWell, let's go ahead and try\nthis out. We can run the script\nin our terminal by running yarn,\nhard hat, run, scripts slash\ndeploy dot j, s. And again, I'm\nhitting tab here to do a little\nauto completion and see what\nhappens. Well, we got deploying\ncontract, it says done, but\nthat's really it. So what really\nhappened? Well, let's add one\nmore line in here.\nLet's do console dot log. We'll\ndo some string interpolation\ndeployed, contract to. And then\nwe'll add simple storage. That\naddress. Let's run this now. We\nget deployed contract, and then\nwe get deployed contract to, and\nthen we get a contract address.\nHmm, what's going on here.\nHardhead has this fantastic tool\nbuilt in called The Hard Hat\nNetwork hard hat comes built in\nwith Hard Hat Network, a local\nAetherium network node designed\nfor development, akin to\nganache, that allows you to\ndeploy your contracts and run\nyour tests and debug your code.\nWhenever we run a command in\nhard hat, or a script and hard\nhat or a task and hard hat, we\nby default deploy to this fake\nHard Hat Network. This Hard Hat\nNetwork is very similar to\nganache, except for instead of\nhaving this UI, it runs in the\nbackground for our scripts. In\nfact, if we go to our hard\nhat.config.js, we can scroll\ndown to the bottom to this\nmodule that exports section and\nadd more information about our\ndefault networks. So right now,\nif we don't have anything in\nthis module that export, by\ndefault, it adds this piece\ncalled default network hardhat.\nSo anytime we run a script,\nwithout specifying a network, it\nautomatically uses this fake\nHard Hat Network. And this fake\nHard Hat Network comes\nautomatically with an RPC URL\nand a private key for you. So\nyou don't even have to add one\nin. This is one of the major\nadvantages of working with\nHardhead. It just automatically\ngives you this fake blockchain.\nAnd these fake private keys, if\nyou want to be a little bit more\nexplicit. And I always recommend\nbeing more explicit, we can add\nthe default network in to the\nmodule that are experts. So now\nour default network is\nexplicitly stated as hard hat.\nHowever, in any script, you run,\nyou can choose whatever network\nyou want to work with. So if I\nwant to explicitly say I want to\nrun our deploy script on our\nfake Hard Hat Network, I can do\nyarn, hard hat, run scripts,\ndeploy dot j s, dash dash\nnetwork, hard hat, this is us\ntelling her that, hey, we want\nto run this script on the Hard\nHat Network. Hopefully, you\nmight be able to see where this\nis going. Having this network\nflag makes it incredibly easy to\nswitch across different chains,\ndifferent block chains,\ndifferent private keys, etc. So\nwe have our default network set\nthe hard hat here, we can add\nother networks in here as well.\nThe way we do that is we're\ngoing to add a networks section.\nAnd we're going to define any of\nthe network sections that we\nwant. And remember to put a\ncomment there so that your\nVisual Studio code doesn't get\nmad at you. So recently, we\nworked with Rigby so let's go\nahead and add a Rinkeby network\nin here. So we're gonna say\nanother network is gonna be\nreally cool. So I should just be\nable to change the network flag\nto Rigby now, right? Well, not\nquite. If you try to run that,\nyou're gonna get invalid value\nundefined for hardhat config\nnetworks. Rigby, that URL, it's\nexpecting you to tell it, hey,\nwhat the URL is, since this\nisn't the hard hat network, we\nneed to tell hard hat exactly\nhow we're going to connect to\nrink B. And this is where a lot\nof what we learned before is\ngoing to come in handy, again,\nexactly the same as what we did\nbefore. We're going to create a\nnew Dotty v file, and we're\ngoing to add our Rigby URL in\nthis dot env file. Just\nremember, dot env is an r dot\nget ignore just in case. So in\nour Dotty env, we're going to\nadd that RPC URL from alcmi back\nin here before we just said RPC\nURL. But since we might want to\nwork across multiple networks,\nit's usually good to specify\nexactly what network each URL\nstands for. So we're gonna say\nRynkeby RPC URL equals and then\npaste that URL in here. Now, as\nyou probably have guessed, we\ncan add our URL to our Rinkeby\nnetwork here. for readability, I\nusually like to add them as\nvariables right above the module\nthat experts. So I'll say const\nRynkeby. RPC URL equals process\ndot E and V dot Rynkeby RPC URL.\nAnd once again, we're going to\nbe pulling that Rinckey RPC URL\nfrom our environment variable.\nOf course, in order to pull that\nenvironment variable in, we're\ngoing to need to use that dot\nenv package again. So to add\nthat in, we're going to yarn add\ndash dash dev dot EMV. And at\nthe top of our Hardhead config,\nwe're going to add require dot\nEMV, and then do dot config to\nenable the config. Now this\nmeans we should be able to pull\nour rink the RPC URL from our\ndot env. Now that we have that\nin our Rinkeby network, we can\nadd URL Rinckey RPC URL.\nAwesome. So we have an RPC URL\nfor different network. But what\nelse do we usually need? Well,\nwe usually need a private key to\nwork with an actual network, or\nthat doesn't automatically give\nus a private key for rugby,\nbecause Hardhead can't just give\nus test and the Etherium, we\nneed to have an actual account\nan actual test nets. Hardhead\ndoesn't control those. So we\nhave to actually give it a real\nURL and a real private key. So\nto add private keys, you\nactually add something called\naccounts, you add a list of\naccounts that you want to give\nto hard hat for us, we're only\ngoing to add one, which is going\nto be our private key. And for\nour private key, we're going to\ndo the exact same thing. We're\ngonna say const private key\nequals process dot e NV dot\nprivate key. And since this\nprivate key is going to be a\nreal private key for a real test\nnet, again, we are going to have\nto grab this from our meta mask.\nSo it will go to our meta mask,\nthree dots, account details,\nexport private key, and we'll\nadd our password in here.\nAnd then in our dot env will add\nprivate key equals and then add\nour private key. Now I know I've\nsaid this 100 times, but please,\nplease, please, for learning\nthis, do not use a real key that\nis connected to any real money\njust in case, please use a new\nmeta mask. I've know I've said\nit a bunch. But some people go\nno, I'm going to be okay, I'll\nbe safe. Just to be super, super\nsafe here, please use a brand\nnew meta mask. So now that we\nhave a private key, we're going\nto add it in here account\nprivate key. And now we have an\naccount here. One more thing I\nlike to do is I like to give the\nchain ID of the network, which\nfor Rigby is going to be for\nevery single EVM base network as\na new chain ID and EVM network\nbasically just means solidity\nworks on it. This includes all\ntest nets, there's a good site\ncalled chainless.org, which may\nor may not be going down at some\npoint, it has a list of all\nthese different networks. For\nexample, you can see on here a\ntheory main net has a chain ID\nof one byte and smart chain is\n56, avalanches, 4311 for\nPhantom, opera 250, Polygon,\n137, etc. Each one of these EVM\ncompatible chains has their own\nchain ID, rank V, the chain ID\nis for adding the chain ID is\nhelpful here for later on. And\nwe'll get to that in the future.\nBut for now, just go ahead and\nmake sure to add your chain IDs.\nOkay, now that we have the RPC\nURL, we have the private key, we\ncan go ahead and test deploying\nthis to an actual test net, and\nactually did something incorrect\nhere. And we're gonna get an\nerror here. And I want you to go\nahead and try to figure out and\ndebug this error yourself.\nYou're ready. Alright, let's do\nit. We'll do yarn, hard hat, run\nscripts, deploy dot j s, dash\ndash network Rinkeby. And we get\nthis wonderfully weird error,\nwhich we see we have deployed\ncontract. So we know that in our\ndeploy script, we get to at\nleast this line, but then we're\ngetting an error, I highly\nlikely hear what's going on\nsaying cannot read properties\nhave no reading send\ntransaction, if you want, you\ncan absolutely go to this spot.\nBut it basically it looks like\nit's having a hard time\nunderstanding what the private\nkey or what the account of this\nis. And what do you think I'm\ngoing to recommend we do? Well,\nif it's not clear, after doing a\nlittle bit of triaging and\ndebugging, we're going to copy\nthis air. And we're going to\ncome on over to Google and paste\nthat right in. It looks like we\ndo get a question here from\nstackexchange Etherium. And it\nlooks like it's really similar\nto what we're doing. We scroll\ndown. They're running nearly the\nexact same script that we're\nrunning, they're using MPX\ninstead of yarn. They've got a\npretty minimalistic deploy file.\nLet's scroll down and see what\nthe answers have to say. I've\nseen this error where my private\nkey wasn't properly populated. I\nwould also use an environment\nvariable I'm pretty sure Are\nenvironment variables good. But\nwe have a second one saying in\nyour heart head, I can think\nthat Jas, it should be accounts\ninstead of account, it works for\nme, let's go back to our head\nconfig and see if that's what's\ngoing on. Uh huh, we put account\nin this should be accounts. So\nlet's swap that over to\naccounts. We'll clear our\nterminal. And we'll run this\nagain. Uh huh. And now it's\nreading a little bit longer,\nwhich is good. This means that\nwe're probably deploying this to\nrink B, which is what we want to\nsee. Awesome. And now we can see\ndeployed contract to, and we\nhave a contract address here. So\nwe'll grab this contract. And\nwe'll pop on over to bring the\nether scan, that's numbering the\nether scan. And we'll go ahead\nand we'll paste this in.\nAwesome. And we see our contract\nwas created about 26 seconds\nago. Perfect. Now for this part,\nyou don't have to deploy this to\nrink be with me, if you follow\nalong here. That's good enough.\nSo remember, the flying to test\nthat's can take a long time. So\nfor this one, you don't have to\ndeploy with me. Alright, great.\nSo we've deployed to rink be\nusing hard hat. This is\nfantastic. Now something that we\nnotice, once again is oof, our\ncontract isn't verified? Do we\nhave to go back through and do\nthis verify and publish and all\nthat stuff again? Luckily for\nus, we actually don't need to do\nthat. So what can we do? Well,\nback in our deploy script, we\ncan add some code to\nautomatically verify right after\nwe deploy. So let's go ahead and\ndo that. Right below our main\nfunction, we're gonna create a\nnew function called verify,\nwe're gonna say async function,\nverify. And we're gonna have\nthis function get past some\narguments, we're gonna have to\nget past a contract, address,\nand some arguments or the\ncontract. Since our simple\nstorage doesn't have a\nconstructor, the arguments for\nsimple storage are just gonna be\nblank. But in the future, when\nwe have contracts that do have\nconstructors, the arguments are\ngoing to be populated. And when\nwe get there, you'll see what I\nmean, we need at least the\ncontract address, and we're\ngoing to add some code in here\nto automatically verify our\ncontracts after they've been\ndeployed. This auto verification\nprocess works on block explorers\nlike ether scan, it might not\nwork on block explorers like\neath, pler, or other block\nexplorers. But if you want to\nverify on these other block\nexplorers, I'm sure they have an\nAPI to allow you to do that as\nwell. Now, ether scan in most\nother block explorers have a\nsection on their website called\nAPI documentation, or something\nto do with API's. These are ways\nfor us to programmatically\ninteract with ether scan, and do\nstuff with them. One of the main\nthings that we can do is we can\nactually verify our contracts\nthrough this API. Ether scan\neven has a tutorial in here\ncalled verifying contracts\nprogrammatically. And the link\nto this will be in the GitHub\nrepo, they have an API endpoint\nthat we can make some requests\nto to go ahead and verify our\ncontracts. Now, we could\nabsolutely make the raw API\ncalls and follow the tutorial\nhere. But there's actually an\neasier way than even going\nthrough this tutorial here.\nHardhead is an extensible\nframework, meaning you can add\nsomething called plugins to it.\nThere's even an advanced section\nin the documentation called\nBuilding plugins. If we scroll\ndown to the bottom, we can see\nsome popular plugins that the\nnomic labs team or the Hardhead\nteam has created. And also a\nnumber of community plugins as\nwell. One of the most used\nHardhead plugins is going to be\nthis hard hat ether scan plugin\nthat makes this verification\nprocess much, much easier.\nInstall it, you can just run npm\ninstall bash, just save dev at\nnomic labs harden ether scan,\nand then add it to our hard hat\ndot config. Since we're using\nyarn, we're just going to go\nahead and use yarn. So back in\nour code, we'll do yarn, add\ndash dash Dev, at nomic, labs,\nslash hard hat slash hyphen,\nether scan. Now that we have\nthis plugin, we can go to our\nhard hat dot config, scroll to\nthe top and add this plugin do\nrequire at nomic labs slash hard\nhat, ether scan. Now that we\nhave this plugin, the hard hat\ndocumentation has some more\ninformation about the usage, how\nto actually use this plugin, and\nhow to run different commands\nwith it. In order for us to use\nthis verification, we actually\nneed an API key from ether scan.\nThis is basically a password for\nallowing us to use the ether\nscan API. So we're going to come\nto ether scan. And we're going\nto go ahead and sign in. And\nactually we're going to click to\nsign up and create an account.\nAnd we'll go ahead and create an\naccount. We'll go ahead and\nverify our registration by\nclicking the verification link.\nAnd we'll click the Login. Now\nthat we're logged in. On the\nleft hand side, we can scroll\ndown to API keys. And we can go\nahead and create a new API key.\nWe call this H H hyphen sec,\nwhich stands for hardhat Free\nCode Camp. Great, this new API\nkey will copy this and we'll go\nback to our code and we'll add\nthis somewhere since the API\nkeys basically considered a\npassword. Where do you think we\nshould add this? That's right in\nour dot env. So in our dot env,\nwe're going to add a new entry\ncalled ether scan API key. And\nwe're going to add that API key\nthat we just got. Now that we\nhave our API key, back in our\nHardhead, config, we're going to\ncreate a new section in a module\ndot exports, tell hardhat that\nwe have this ether scan API key,\nor new section is going to be\ncalled ether scan.\nAnd in here, we're gonna say API\nkey is going to be ether scan\nAPI key that we're going to\ndefine up here the same way we\ndefine these other keys. So\nwe'll say const, ether scan API\nkey equals process dot e NV dot\nether scan API key. And if\nsomething like this pops up, you\ncan generally just hit enter,\nand it will autocomplete it for\nyou, which is awesome. Great. So\nnow we have an ether scan API\nkey back in the heart had\ndocumentation, it tells us by\nadding this, we actually get a\nnew task called verify. Let's\ntry that out. So open our\nterminal back up. And we'll do\nyarn, RT hat. Let's see what\npops up. Wow, we did get a new\nverification here. When we run\nyarn hard hat harder, it\nactually looks into our hard\nhat.config.js and checks for any\nplugins. If there are new\nplugins there, it'll add them as\na new task that we can do. You\ncan manually verify your\ncontract by doing yarn or MPX\nHarnett verify dash dash\nnetwork, the deployed contract\naddress and any constructor\narguments yourself. But we want\nto be a little bit more\nprogrammatic than this. So what\nwe're going to do is we're going\nto go back and create this\nverification function, it is\ngood to know how to do it via\ncommand line so that if you want\nto verify something in the\nfuture, manually, you can, let's\nbuild this verify function\nthough. So we're going to take\nthe our contract address and\nsome arguments. And for our\nsake, we're going to do console\ndot log verifying contract that\nthat just so that we know we\nmight have to wait for a little\nbit. And in our code, we can\nactually run any task from hard\nhat using a run package. So up\nat the top, we're actually going\nto import run from hard hat as\nwell run allows us to run any\nhard hat task. So in our code\nhere, we're going to do a wait\nto run. And then we can do there\nit thought. Now part of that\nallows you to add different\nparameters as well in this run.\nAnd it's usually best that you\ngo ahead and add them in here so\nthat we're really specific with\nwhat we're doing. If we do yarn\nhardhat verify dash dash help,\nwe can see what parameters we\ncan actually pass. Well, it\nlooks like we can pass the\nVerify parameter. So we'll do\ncolon, verify. If you go to the\nactual GitHub for the\nverification tasks, you can\nactually see you can do more\nthan just verify, you can do\nverify, get minimum build,\nverify, get constructor\narguments, verify, verify, which\nis what we're going to be\nworking with, and a couple of\nother subtasks as well. The\nsecond parameter that goes\ninside run is going to be a list\nof actual parameters. This\nsecond parameter here is just\nkind of the sub task, if you\nwill, of our verify task. And\nthis is going to be an object\nthat contains the actual\nparameters. And this is where we\npass in an address, which is\ngoing to be our contract\naddress, and then our construct\nor arguments, which is going to\nbe arcs. Now normally just this\nright here should be enough for\nus to go ahead and use this\nverify contract in our main\nfunction, but we're going to add\none additional thing to it.\nBecause in practice, sometimes\nthere's some errors that can\ncome up. One of the errors that\noften comes up when running a\nwait is that the contract has\nalready been verified. And\nyou'll actually likely run into\nthis, because ether scan will\nget smart enough by seeing\nenough bytecode that is exactly\nsimple storage that it will\nstart to just automatically\nverify any bytecode that looks\nlike simple storage. And then\nthis await will throw an error,\nwhich we want to avoid. So what\nwe can do is we can add a try\ncatch onto this await. So\noutside of the way, we're going\nto add a try. And we're going to\nadd these little brackets that\nwrap around our weight. And then\nwe're going to put a catch. This\nis known as a try, catch and\nsolidity also has tried catches.\nBut basically, this e is going\nto be any error that this\nsection throws. So we're going\nto do is we're going to say if\nthis message is already\nverified, then we're just going\nto continue. So we're gonna say\nif e.message.to lowercase, we're\ngoing to make sure it's to\nlowercase that includes already\nthere. If five, then we're just\ngoing to console dot log already\nverified\nlike that. Otherwise, we're just\ngoing to console dot log e. The\nreason we do This is because of\nthis errors, our verification\nfunction will break, and our\nwhole script will end. And we\ndon't want our whole script to\nend, we want our script to keep\ncontinuing if the verification\ndoesn't work, because it's not\nreally a big deal. So I know\nthis might seem like a lot of\ncode, feel free to copy and\npaste it from the GitHub repo to\njust move along. But awesome. So\nwe now have a verify function\nusing the Verify task in\nhardhat. Let's go ahead and use\nthis now in our main function,\nright below our deploy, we'll do\nconsole dot log deployed\ncontract two, and then the\ncontract address. But before we\ncall this main function, let's\nthink for a quick second. What\nhappens when we deploy to our RT\nHat Network? Well, remember, if\nwe deploy to our Hard Hat\nNetwork, will our contract need\nto be verified I need to scan?\nWell, we know there's a we know\nthere's a rink ether scan, we\nknow there's a COVID ether scan,\nwe know there's a main net easy\nscan. But is there a Hardhead\nether scan? No, of course not.\nRight? The hard at runtime\nenvironment is a network local\nto our machine. So it doesn't\nmake sense for us to verify a\nhard hat network deployed\ncontract on ether scan. So we\nactually don't want to call this\nverify function, when we're\nworking with our local network.\nThis is where these chain IDs\nare going to come in quite\nuseful. What we can do is we can\ncheck to see if the network that\nwe're running on is a live\nnetwork or it's a test net, or\nit's a network that actually can\nbe verified, we can actually get\nnetwork configuration\ninformation by importing a\nnetwork like this. And we can do\nsomething like console dot log\nnetwork dot config. Now, if I\nrun yarn, art, hit run scripts\ndeploy.js. On our Hard Hat\nNetwork, since I'm not passing a\nnetwork flag, we get this\nmassive output that looks like\nthis. Our network dot config\ncontains a ton of information\nabout the current network that\nwe're on, you'll see here that\nthe chain ID of the Hardhead\nnetwork is actually 31337 gas\nprice, which gets set to auto\nblock gas limit the current fork\nof Aetherium that we're working\nwith, and all these other pieces\nhere. This chain ID is really\nimportant. Because we can use\nthis chain ID to figure out\nwhich one is a test net, or\nwhich one is a live network. And\nremember, running the script is\ngoing to be the same as doing\ndash dash network, hard hat,\nyou'll see our channel ID is\nstill 31337. Again, that's\nbecause the default network in\nour heart had config, it's hard\nhat, which is the same as saying\nevery single time we run a\nscript, we're secretly running\nit with dash dash network hard\nhat. So now we only want to\nverify on our test net. So what\nwe can do is we can say if\nnetwork dot config, that chain\nID equals equals equals four,\nwhich is going to be rank B, ad.\nAnd a JavaScript equals equals\nequals is nearly the same as\nequals equals, except no type\nconversion is done, which just\nmeans in JavaScript, four equals\nfour, and four equals equals the\nstring of four, but four, but if\nyou were to use four equals\nequals equals four, this is\nfalse. This is true equals\nequals four equals equals would\nbe true, four equals equals to\nthe string of four would also be\ntrue, but four equals equals\nequals to the string of four is\ngoing to be false. So you can\nkind of do whatever you want\nhere equals equals or equals\nequals equals. So we want to say\nif the network dot config dot\nTrinity is four, so if we're on\nRinkeby, then we can go ahead\nand actually verify. But we also\nwant to make sure we only verify\nif our ether scan API key\nexists. So we can also in here\nis site and this double\nampersand means and we can say\nprocess dot e NV dot ether scan\nAPI key. This is some Boolean\ntricks that we're doing here,\nbasically, so our first\nconditional we're saying if\nnetwork dot config chinati\nequals equals equals four, this\nsection can be true or false,\nobviously, right? The chain ID\nthat we're running on can be the\nhardest network, which would\nmean this doesn't equal four, or\nit would be Rinckey, which means\nthis does equal four. But\nthere's no conditional on this\nside. So how does this side\nwork? In JavaScript, if an\nobject exists, and you try to\ncast it as a Boolean, it will be\nconverted to true. If it doesn't\nexist, it will be converted to\nfalse. So in JavaScript,\nbasically, if either scan API\nkey exists, if we have this in\nour data in VI, this will be\ntrue. And if not, this will be\nfalse. So another way to read\nthis line here is saying if\nnetwork dot config that Trinity\nis for AKA, if we're on rink B,\nand our ether scan API key\nexists, then do some stuff. And\nthat's what we're going to do\nhere. So in here, we'd want to\nrun verify, or verify function\nand pass it the contract address\nwhich is going to be Simple\nStorage dot address and the\nconstructor arguments which we\nknow are going to be blank. And\nsince our verify function is an\nasync function, and it deals\nwith promises and stuff, we want\nto add the await keyword here.\nAwesome. So we've added a way to\nactually verify our contract.\nBut we're not quite done. See on\nether scan and all these block\nexplorers the instant we deploy\nthe contract and the instant we\nsend the contract, ether scan\nmight not know about the\ntransaction yet, it might take a\nhot second for ether scan to be\nup to speed with where the\nblockchain is. So it's usually\nbest practice to wait for a few\nblocks to be mined, until you\nactually run your verification\nprocess. We've actually learned\nhow to do this already with the\ndeploy transaction. So before we\nactually verify we run, we want\nto run a weight, simple storage.\nDeploy transaction Wait, six. So\nwe will wait six blocks, and\nthen we'll run our verification\nprocess. Now, if you want to go\nand test this out right now, you\nabsolutely can. I'm going to\nkeep going, though, because\nagain, testing all these on a\ntest net takes a little bit of\nextra time. So I'm going to\nfinish the rest of our main\nfunction, and then I'm going to\nrun everything all together.\nOkay, cool. So we've deployed\nour contract, we've\nautomatically programmatically\nverified our contract. What's\nnext? Well, what did we do last\ntime, we started interacting\nwith the contract. So let's do\nconst. Current Value equals\nawait simple storage dot\nretrieve. To get the current\nvalue, simple storage, that's\nall. We have a retrieve\nfunction, which returns the\nfavorite number, so let's get\nthe current value. And we'll do\nconsole dot log, the current\nvalue is and then some string\ninterpolation, current value.\nAnd then we'll go ahead and\nupdate the current value by\ndoing cons. Transaction response\nequals await simple storage,\nthat store will store the number\nseven, and then we'll await\ntransaction response dot Wait,\nwe'll wait one block for that\ntransaction to go through. And\nwe'll grab the updated value by\nsaying const updated value\nequals await simple storage\ndot retrieve. Then we'll do\nconsole log. The added value is\nupdated value. Awesome. And this\nis going to be our whole script.\nSo if I can zoom out for a\nlittle bit, I know it will be a\nlittle bit small here, we've got\nthis huge main function, which\ndoes what? Well it deploys our\ncontract. If we're on a test\nnet, it then verifies our\ncontract. And then it updates\nthe value to seven. And we have\nour verify function down here.\nAnd we have a section of our\ncode that calls our main\nfunction. Now for run this on\nthe hard hat network. What do\nyou think will happen? Well,\nlet's try yarn, or net run\nscripts. Deploy dot j s.\nAlright, awesome, we get exactly\nwhat we saw before we get\ndeploying contract deployed\ncontract to current value is\nzero, update value seven. And\nthere's nothing in here about\nverification. That's exactly\nwhat we want. Now, moment of\ntruth. Let's try this on\nRinkeby. We'll do yarn, RT hat\nrun scripts, deploy dot j s,\ndash dash network Rinkeby. And\nit's gonna go a lot slower,\nbecause obviously now we're\ndeploying to an actual test net,\nwhere the blocks actually need\nto be mined. And we see we\nhaven't deployed the contract.\nNow that our contract is\ndeployed. We know that we're\ncurrently waiting six block\nconfirmations for us to go ahead\nand verify. And actually I\nshould add console dot log,\nwaiting for block the x's so\nthat we don't get campus weird.\nOh, wait, what are we doing now?\nThat it looks like we ran into\nthis error, no such file or\ndirectory, it looks like our\ncode might not have compiled\ncorrectly here. So here's what\nI'm gonna do. We're gonna go\nahead and delete our artifacts\nto trash. We're gonna delete our\ncache as well. And we're going\nto try rerunning this whenever\nyou run a script with the hard\ndrive command Hardhead will\nautomatically recompile it for\nyou, especially if there's no\nartifacts folder. So we're going\nto rerun this command and\nheartbeat, it's going to compile\nfirst and we can see that it\ndoes exactly that. And then it's\ngoing to go ahead and redeploy.\nHopefully this time, it should\nbe able to find the contract\nthat had just compiled looks\nlike this time after I deleted\nthe artifacts folder, we\nactually did indeed get some\nsuccessful compilation. And we\ncan see here successfully\nsubmitted source code for\ncontract or verification on the\nblock explore waiting for\nverification results,\nsuccessfully verified contracts\nsimple storage on ether scan,\nand even gives us a link that we\ncan go ahead and Command click\nor control click into. And we\ncan see the contract indeed\nbeing verified. This is awesome.\nThis is perfect. We've now got a\nsuccessful deploy dot j s script\nthat can deploy, verify, and\nthen interact with our code.\nThis is fantastic. This hard hat\nthing seems pretty cool. What\nelse can we do with hard hat\nlike I showed you before. Hard\nHat comes with these tasks. And\nthe number of tasks that\nHardhead can come with can be\nextended by us writing plugins,\nwe can actually write our own\ntasks in hardhat. And in our\nHardhead dot config, it can\ndefaulted with this task\naccount, we can see task\naccounts, prints the list of\naccounts, and just prints a list\nof accounts here actually go to\nthe heart had documentation to\nlearn more about creating our\nown tasks, one of the ways that\nyou can define tasks is directly\nin our heart head.config.js. But\ntypically, what people do is\nthey have a new folder called\ntasks where they put all their\ntasks. So for now, I'm gonna go\nahead and delete this section\nhere. And we're going to create\nour own task. You'll notice that\nnow that we've deleted that\nsection, if we run yarn RDAP, we\nno longer see the accounts task\nin here, because we've just\ndeleted that task. So let's\ncreate our own new task. We'll\ncall this block number.js. And\nwe'll use this to get the\ncurrent block number or whatever\nblockchain that we're working\nwith. So let's create this task.\nFirst, we need to import the\ntask function, we can get it by\nsaying const task equals require\narhat slash config. The hard hat\nslash config has the task\nfunction. To define a task, we\ncan now just say task, give it a\nname and a description, the name\nis going to be blocked number.\nAnd then the description is\ngoing to be prints the current\nblock number. Now that we have\nthis task, there's a couple of\nthings we can actually do with\nit, we can add different\nparameters to it by using the\ndot add command, which allow us\nto pass parameters to the task.\nAnd then we could also set\nactions which define what the\ntask should actually do for us,\nwe're just going to do dot set\naction. And define what we want\nthis function to do. So we're\ngoing to make this an async\nfunction, that's going to take\nas an input, the task arguments,\nwhich are going to be blank for\nus, and the HR E, which I'll\ndefine in a second. Now, let me\nexplain the syntax really\nquickly. This might look a\nlittle bit weird, but this is\nwhat's known as a JavaScript\narrow function. In JavaScript,\nyou can actually define\nfunctions without even using the\nfunction keyword. For example,\nif we go back to our deploy\nfunction, we have our async\nfunction verify down here.\nHowever, another way we could\nhave defined this is is without\nusing the function word at all,\nand actually turning this whole\nthing into a variable, we could\nhave said instead, we could say\nconst verify is going to be an\nasync function that takes\ncontract addresses and\narguments. And here's the\nfunction definition. These two\nlines are essentially\nequivalent. There's some slight\ndifferences between between\nusing the function keyword and\nhaving your function be a\nvariable. But for the purposes\nof this course, they're\nbasically the same. Which means\nthough, that this by itself is a\nfunction, just not assigned to a\nvariable. But essentially, the\ntwo of these do are exactly the\nsame. And that's the syntax that\nwe're doing here. You can\nimagine this sort of being like\nconst block task equals async\nfunction, which takes the params\nand then runs that arrow\nfunction. Or you can think of it\nas async. Function, block task\nparameters, and then the\nfunction definition, these are\nall essentially the same. The\nmajor difference is that we're\nnever giving our function a\nname, we never give it this\nblock task variable. This is\nknown as an anonymous function\nin JavaScript, because it\ndoesn't have a name. Now that we\nhave our function in here, we\ncan now call some function to\nget the block number. Well, how\ncan we get the block number when\nwe run tasks, we automatically\npass our anonymous functions,\nthe task arguments, which in\nthis one, we don't have any, but\nwe also pass this HR II object.\nThis HRV is the heart hat\nruntime environment. Back in our\ndeploy script, this is basically\nthe same as this require hard\nhat in here. So this HRV can\naccess a lot of the same, this\nHRV can access a lot of the same\npackages that the hard hat\npackage can. So we can do Hae\ndot ethers, just like how you\ncan import ethers from hard hat.\nAnd in our ethers package,\nthere's actually a number of\nfunctions we can use like dot\nPro, biter dot get block number.\nLet's save this to a variable\nconst blocked number equals, and\nthis is going to be a\nsynchronous, so we're going to\nwant to add a weight here. And\nthen let's do console dot log\nblock number. Or better yet,\nwe'll string interpolate this\nand say current block number\nlike this. Now though, if I try\nto run this task, you'll notice\nit doesn't show up in the heart\nAtlas of tasks, let's do yarn.\nArt app. Hmm, I don't see block\nnumber in here. Well, this is\nbecause we need to add it to our\nconfig dot config will add\nrequire dot slash tasks slash\nblock number.\nAnd in order for us to import\nit, and let's add a module that\nexports I'll explain what this\ndoes a little bit later. But now\nthat we've required it, if I run\nyarn hard hat, and now see\nblocked over is one of the tasks\nthat I can use. Now for a run\nyarn, art hat block number, we\nget current block number is\nzero. And this makes sense\nbecause this is defaulting to\nour Hard Hat Network, which gets\nreset every time we run it. But\nif I run yarn, hard hat block\nnumber A dash dash network\nRinkeby, what do you think I'm\ngonna get? Again, a much larger\nnumber, current block number is\nright here. Because this is the\nactual block number of Rigby\nversus the block number of our\nheart ad network is going to be\nzero because it gets reset every\nsingle time, we run one of these\nscripts now scripts and tasks\nboth can basically do the same\nthing. They both can interact\nwith contracts, they both can\ndeploy smart contracts, they can\nboth pretty much do everything.\nI prefer scripts just as a\ngeneral rule of thumb, because I\ndon't always think adding a\nspecial thing from the command\nline makes sense. So I prefer\nscripts, but you'll see a ton of\ntasks and examples out there as\nwell. I think tasks are really\nnice for specific use cases. But\nfor the most part, we're pretty\nmuch going to use exclusively\nscripts, but it is good to know\nwhat a task looks like and how\nto use it. I think tasks are\nbetter for plugins and scripts\nare better for your own local\ndevelopment environment. But if\nyou want to do everything with\ntasks, you absolutely can. As\nyou're starting to see, this\nconfig piece is pretty powerful.\nAnd we can use it to modify our\nentire code base and our entire\nproject to give our project more\nfunctionality. What else can\nthis do? Well, right now, as you\ncan see, every time we work with\na hard hat network, every time\nwe run a script, we run that\nscript, and then the Hard Hat\nNetwork is deleted, right? We\ncan't interact with our\ncontracts anymore. Well, there's\nactually a way for us to run a\nhard hat network. Similar to how\nwe ran a ganache network with a\nuser interface. What we can do\nin hard hat is run yarn, RT hat\nnode. And what this will do is\nit'll spin up a node on a local\nnetwork, exactly the same as\nganache but in our terminal. So\nyou see here started HTTP and\nWebSocket. JSON RPC server at\nthis address. And just like\nnosh, it comes packed with all\nthese different accounts and\nprivate keys, which is awesome.\nYou'll notice though,\ninterestingly enough that this\nnode that we're running isn't on\nthe Hard Hat Network, well, we\ncan actually create a new\nterminal to try to interact with\nthis just by hitting this little\nplus button and creating a new\nterminal. Again, I'm using bash,\nbut based off of whatever your\noperating system is, you can be\nusing a different shell. And\nhere, let's go ahead and run\nyarn arhat run scripts, deploy\ndot j s, and see what happens.\nWell, our typical setup happens,\nwe deploy a contract, we get a\ncontract address, we update the\nvalue. But if we look at our\nnode, it doesn't look like any\ntransactions went through what\nwe don't see any locking here.\nSo what's going on? Well, our\nHard Hat Network is actually\ndifferent from this locally\nrunning network here. This\nlocally running network we often\nwant to refer to as our local\nhost. So it's slightly different\nthan the Hard Hat Network. It's\nstill using the hard hat runtime\nenvironment, but it's just not\nthis default Hard Hat Network.\nIt's considered its own separate\nnetwork when we're running a\nnode that it's going to live. of\npast the duration of a script.\nSo we can actually interact with\nthis by adding a new network to\nour hardhead.config.js, we'll\ncreate a new network and call it\nlocal host.\nAnd exactly as we did up here,\nwe'll give it a URL accounts and\na chain ID. So for URL, we can\nget that URL right from our\nterminal, I'll put a running\nyarn hard hat node. by copying\nthat and pasting it in here, we\ncan then do a comma, we'll give\nit a chain ID of 31337. Because\neven though it's considered a\ndifferent network, it actually\nhas the same chain ID as hard\nhat. Interestingly enough, I\nknow I just said we were going\nto give it accounts, but we\nactually don't need to give it\naccounts. Because when we run\nwith this localhost hard hat\nwill automatically give us these\n10 fake accounts for us. So you\ncan kind of think of the\naccounts here for this localhost\nas, as hard had already placing\nthem in thanks, hard hat. But\nnow, if we go back to our bash\nhere, let's clear the terminal.\nLet's rerun the script. And\nwe'll do dash dash network local\nhost. Now we should be pointing\nto this node. And when I run\nthis script, we should see some\nlogging output at the end of\nthis node. So let's go ahead and\nhit enter. Well, we see our\nnormal stuff on our deploy\nscript, we flip back to our node\nWow, we see a ton of logging\nhere. Similar to ganache, we can\nsee a whole bunch of different\nlogs on what just happened, we\ncan see a contract was deployed,\nwe can see the address the\ntransaction hash from value,\ngas, and the block number and\neverything. We can also see our\ncontract call calling the store\nfunction to update the value of\nour favorite number. This is\nincredibly powerful for quickly\ntesting and working with things\non a local JavaScript VM or hard\nhat network to be able to see\nhow your contracts will interact\non a real test net. And this is\nmuch quicker than working with a\nreal test net. Now additionally,\nsame as what we said before, any\nprocess that's running in the\nterminal, we can kill it with\nCtrl C. So if you want to stop\nyour node and then restart it,\nyou can hit Ctrl. C, to stop it,\nand then just up and then rerun\nthat same command to re spin up\nyour node Ctrl C stops it. And\nthen you can up to start again.\nAnother way you can stop it, of\ncourse, is if you hit the\ntrashcan, which deletes the\nwhole terminal, we pulled a\nterminal back up, we can run it\nagain. And just remember, if you\nhit the X that actually doesn't\ndelete the terminal, that just\nhides it. So our hard hat node\nright now is still running\nbecause I just hit it. So I pull\nit back up, I can see that it is\nindeed still running. But if I\ntrashed candidate, and then it\npulled the terminal back up, I\ncan see that it is no longer\nrunning. So running scripts is\ngreat. But what if I don't want\nto have to code an entire script\nto do some things? What if I\nwant to just tinker around with\nthe blockchain? Well, hard hat\ncomes packed with this thing\ncalled the console. The console\nis a JavaScript environment. For\nus to run JavaScript commands to\ninteract with any blockchain, we\ncan jump to the console by\nrunning yarn, hardhat, console,\nand then whatever network flag\nif we want to work on rink B,\nmain net polygon, avalanche,\netc. That's just network local\nhost. And now we're dropped into\na shell him in the shell, we can\ndo everything that we do in a\ndeploy script. And we don't even\nhave to run these imports,\nbecause everything with hard hat\nis automatically imported into\nour console. So for example,\nlet's say I wanted to get a\nsimple storage contract factory.\nWell, I could run exactly this\nline here. I could say const,\nsimple storage, factory equals\nawait ethers dot get contract\nfactory, have simple storage.\nAnd now I can go ahead and even\ndeploy this. So I can even just\ncopy this line, paste it. And if\nwe flip back to our node, we'll\nsee that we just deployed a\nnother simple storage. And now\nwe can do things like await\nsimple storage dot retrieve. And\nI get the return value which is\ngoing to be a big number with a\nvalue of zero. I can also make\ntransactions so I can do a\nweight, simple storage. That\nstore let's do 55 If I hit up\ntwice, I can go back to the\nsimple storage dot retrieve.\ncall that function and I can see\nmy big number has a value of 55.\nNow, this is a great way to\nquickly interact with any\nblockchain that we want. Now you\ncan exit the shell by hitting\nCtrl C twice to get out. Or you\ncan also just you can also Trash\nCan your terminal if you get\nconfused. This console works\nwith any network we can even do\nyarn, hard hat console dash dash\nnetwork hard hat. And we'll get\ndropped into a hard hat network.\nNow this is not going to be the\nsame node that's running here,\nthis is going to be one that\nonly runs for the duration of\nthis command. So whenever we\ncancel this command, this hard\nhat network gets cancelled. And\nclose out that too. We can also\ndo yarn, hard hat, console, dash\ndash network Rinkeby Rigby, or\npolygon or test net or main net\nor whatever we want. And we can\ndo things like ethers dot\nprovider that can do things like\nawait ethers dot provider dot\nget block number, see the block\nnumber of Rigby. We can also\ndeploy contracts, we can update\ncontracts, we can do anything\nthat we want, you can do\nanything in these consoles, and\nthey're great ways to quickly\ntest and tinker in interact\nwith contracts. Now, there's a\ncouple other tasks that are\nreally helpful. You'll see\nbefore I went ahead and just\ndeleted artifacts and deleted\nthe cache manually. Well, to do\nthat yourself, you can also just\nrun yarn Hardhead, clean. And\nthat'll delete the artifacts\nfolder and clear out your cache.\nWe already know what compiled\ndoes. But one of the biggest\nthings that Hardhead is\nfantastic for especially is\nrunning tests. Now we haven't\nrun tests yet so far. However,\nrunning tests is absolutely\ncritical to your smart contract\ndevelopment journey. And we're\ngoing to spend a lot of time in\nthe future writing really good\ntests. The reason that writing\ntests are so important is\nbecause we want to make sure our\ncode does exactly what we want\nit to do, especially in the\ndefy, and the decentralized,\nsmart contract world, all of our\ncode is going to be open source\nfor anybody to interact with,\nand potentially exploit. There's\nsites like req dot news, which\ngo through a ton of previous\nhacks and how they actually got\nhacked and what happened in the\nsmart contract to enable these\nhacks to occur. So testing, so\nwriting really strong tests is\nalways going to be our first\nline of defense. And we have\nthis sample test.js, that comes\ndefault with the basic package\nof hardhat. But as you probably\nalready know, we're going to\nrename this and change it. So\nwe're going to rename this to\ntest deploy dot j s. And we're\ngoing to delete everything in\nhere and start from scratch. We\nwant to be able to test all of\nour solidity code locally, so\nthat we know exactly what it's\ndoing. And we can have a\nprogrammatic way to make sure\nthat our code does what we want\nit to do. So let's write a basic\ntest for our simple storage\ncontract. So that we can be sure\nthat it's doing exactly what we\nwant it to be doing. Hard Hat\ntesting works with the Mocha\nframework, which is a JavaScript\nbased framework for running our\ntests, you actually can write\ntests directly in solidity, if\nyou'd like to, there's a bit of\nback and forth on whether\ntesting with pure solidity is\nbetter or testing with a modern\nprogramming language. The\nargument goes that testing with\na modern programming language,\nyou have more flexibility to do\nmore stuff to interact and test\nyour smart contracts. But the\nargument for testing with us\nwith solidity is that we want to\nbe as close to the code as\npossible. At the time of\nrecording, most projects do the\nvast majority of their testing\nin a modern programming language\nlike JavaScript. So that's what\nwe're going to be using here. So\nto get started with our mocha\ntests, we do, we're going to\nwrite a describe function.\nDescribe is a keyword that\nhardheaded mocha will recognize,\nand it takes two parameters, it\ntakes a string, which we're\ngoing to just write simple\nstorage for now. And then also\ntakes a function, we could make\nfunction, test func and then\nwrite some stuff in here, and\nthen pass it to our describe\nhere. But the common convention\nis going to be to do is to make\nit as an anonymous function,\nwhich we can create by typing\nfunction, putting an empty\nparameter here, and then some\nbrackets like that. So our\ndescribe function takes a name,\na string, and a function.\nAnother way that you'll often\nsee functions in describe is\nusing that anonymous function\nsyntax. So you might see just\nthese parentheses, an arrow, and\nthen some brackets, the two of\nthese are going to be basically\nthe same, there are some\ndifferences. And this second one\nis actually best practice, but\njust know that you might see\nthis arrow syntax in other tests\nas well. We have described a\nsample storage and then our\nfunction here, which is going to\nhave all of our tests in it.\nInside each one of our describe\nblocks. We're gonna have\nsomething called a before each,\nand a bunch of It's Our before\neach function is going to tell\nus what to do before each of our\nhits. So we're going to have a\nton of it and then we're going\nto have a before each. All of\nour IDs are going to be where we\nactually write the code for\nrunning our tests. And before\neach is going to be some code\nthat tells us what to do before\neach one of these hits, we can\nalso actually have describes,\ninside of describes, which again\nhave more before each and more\nbefore it's having these nested\ndescribes can be really helpful\nfor separating and modularizing\nour tests. But for this one,\nwe're just going to have a setup\nthat looks like this. And for\nthis demo, we're only going to\nhave one it. So in order to test\nour smart contracts, before we\nactually run our tests, we're\nprobably going to need to deploy\nthe smart contracts first. So\ninside of our before each, we're\ngoing to pass the our before\neach a function, that's going to\ntell our testing framework what\nto do before each test. So we're\ngoing to pass it an async\nfunction like this. And in here,\nwe want to deploy our simple\nstorage contract. So to do that,\nwe're going to need to get the\nethers framework and do exactly\nwhat we did in our deploy\nscript. So in here, we're at the\ntop we're gonna say const.\nEthers, equals require art have\nan import ethers from hard hat.\nThen in our before each\nfunction, we'll say await ethers\ndot get contract factory of\nsimple storage. And we'll assign\nthis to a const. Simple Storage\nfactory. And then we'll run\naway, simple storage factory dot\ndeploy. Cool. And let's also\nassign this to a variable cost\nsimple. Now, since right now,\nour simple storage and simple\nstorage factory are scoped just\nto inside the before each, we\nactually need to stick these\nvariables outside of the before\neach, so all of our events can\ninteract with them. So instead\nof having simple storage,\nfactory, and simple storage, be\nconstant variables, we're going\nto define them outside of them\nfor each with the let keyword.\nAnd we're gonna say let simple\nstorage factory and we're going\nto initialize it to nothing. And\nthen we'll say led simple\nstorage. Now, if you have a\nwhole bunch of let's just\ninitializing another way, you\ncan write them in JavaScript,\njust let simple storage factory\ncomma, simple storage. And that\nworks exactly the same. And then\nwe can get rid of this const\nkeyword. Because it's not a\nconstant since we are assigning\nit. And now we have simple\nstorage, factory and simple\nstorage that we can use inside\nof our init function. Now we\nhave a before each section. So\nbefore each one of our tests,\nwe're going to deploy our simple\nstorage contract. So we have a\nbrand new contract to interact\nwith for each one of our tests.\nNow, inside of the ID, this is\nwhere we're going to say what we\nwant this specific test to do,\nand then describe the code\nthat's going to actually do\nthat. So we're going to say it\nshould start with a favorite\nnumber of zero. So this is\nsaying what this test should do.\nAnd then we're going to add our\nasync function to actually do\nthat. So we'll say async\nfunction. And in here, this is\nwhere we'll actually write the\ncode to make sure that our\ncontract does exactly this.\nWe're say const. Current Value,\nequals await, simple storage.re\nretrieve. And now in this test,\nwe want to say okay, now check\nto see that this current value\nis indeed zero. So how do we do\nthat? Well, we can say const,\nexpected value is going to equal\nzero. And what we can do is we\ncan do either we can use either\nthe assert keyword, or the\nexpect keyword, which we're\ngoing to import both of these\nfrom a package called Chai. We\nactually installed Chai\nautomatically when we downloaded\nthe basic parameters when we\ndownloaded the basic packages\nfor hardhats. So at the top,\nwe're gonna say const. Expect\nand assert\nequals require Chai, I'm a big\nfan of using assert as much as\npossible, because I think the\nsyntax makes a little bit more\nsense. But there will be\nscenarios where we need to use\nexpect instead. Now, assert has\na ton of functions that are\nbuilt in that help us make sure\nthis is what we expect it to be.\nSo I can do assert dot equal\ncurrent value.to string, because\nremember, this is actually going\nto be a big number, comma,\nexpected value. So I'm saying\nI'm asserting this retrieve to\nreturn zero, which is going to\nbe our expected value. Now to\nactually run this, we're going\nto run yarn, art hat test. And\nwe see we get an output that\nlooks like this should start\nwith favorite number of zero,\nand it's indeed passing. You'll\nnotice that if I were to change\nthis to one, and this wasn't\ncorrect, it would break and it\nwould say art Pass or not\npassing assertion error expected\nzero to equal one. It expected\nzero to equal one, which is not\nwhat we want. We want zero to\nequal zero. So let's run this\nagain. Tada should start with\nfavorite number zero, and it's\npassing. Alright, fantastic. So\nthat's how we wrote one of our\ntests, let's write one more test\njust to make sure that things\nare good. So let's say it should\nupdate when we call store,\nbecause when we call the store\nfunction, we want our favorite\nnumber to update. And we'll make\nthis an async function as well.\nAnd let's add our stuff in here.\nSo we'll say const. Expected\nValue equals seven, we're\nexpecting that when we call\nstore it updates to seven. Now\nwe can say const. Transaction\nresponse equals await simple\nstorage dot store. And we can\neven just pass it the expected\nvalue here. And then we'll do a\nweight transaction response that\nweight one. Now let's get the\ncurrent value. So we'll say\nconst. Current Value equals\nweight, simple storage,\nretrieve. And now we're going to\nassert dot equal current\nvalue.to string, comma expected\nvalue. And now we can run all\nthese tests by running yarn\nHardhead test. And you'll see we\nran both of these tests. And now\nif I have 10,000 tests, and I'm\nonly finagling with one test, I\ncan actually just run one test\nby running yarn, art app, test,\ndash dash grep. And I can search\nfor any keywords in any of the\ntext here. So I'm going to grep\nfor the store function. Because\nthe store keyword isn't in this\ntax for this, it, it's only in\nthe text for this it. So if I do\ngrep store, it should only run\nour second test, which does\nindeed, one other way we can run\nonly specific tests is with the\nonly keyword. So we can type it\ndot only like that. And then we\ncan run yarn, art hat test. And\nit should only run, this should\nupdate when we call store. And\nit does indeed, then we'll go\nahead and delete this save, run\nagain, and it should run all\ntoo. Fantastic. Now the other\nway you'll see these tests\nwritten is with instead of\nassert, it'll use the expect\nkeyword. So you'll see something\nlike expect current\nvalue.to string.to dot equal\nexpected value, the two of these\nlines do exactly the same thing.\nAnd it's sort of up to you on\nwhich one you want to use. And\nthat's all we're going to do for\nour testing. Now. This is\nfantastic, great job. Now that\nwe have some tests, we can\nactually start testing to see\nhow much gas each one of our\nfunctions actually costs. One of\nthe most popular extensions for\nhard hat is the hard hat gas\nreporter. This is an extension\nthat gets attached to all of our\ntests, and automatically gives\nus an output that looks like\nthis, that tells us\napproximately how much gas each\none of our functions cost. We\nscroll down in here, we can read\nthe instructions on how to\nactually install this npm\ninstall Hardhead gas reporter\nwhich we're going to use with\nyarn. So we're gonna say yarn,\nadd hard hat, gas reporter, dash\ndash Dev.\nAnd now that that package is\ninstalled, we can go over to our\nconfig and add some parameters\nin here so that we can work with\nthis gas pit. But our neath our\nether scan section, we're going\nto add a new section called gas\nreporter. To have it run,\nwhenever we run our tests we're\ngoing to do enabled is going to\nbe true. And then up at the top,\nwe can add it by adding require\nhardhat gas reporter. Now that\nwe have it in here, we can do\nyarn hardhat test, and after we\nrun our tests, it'll\nautomatically run this gas\nreporter. So we see our tests go\nahead and run. And then we get\nthis output that looks like this\nthat tells us how approximately\nhow much our contracts and\nmethods cost. So our store\nfunction looks like It costs\napproximately this much gas and\nour simple storage costs\napproximately this much gas.\nThis is incredibly helpful for\nfiguring out how to optimize our\ngas as best as possible. Now I\nusually like to take it a step\nfurther though. Having the gas\noutput it like that is nice, but\nwe can make it even better. I\nlike to output it to a file by\ndoing output file. Yes, report\ndot txt and then my dot get\nignore like to add it in here,\nbut doing gas report dot txt\nsentence it's not really\nimportant for the gas report to\nget pushed up to GitHub. Do no\ncolors is true. The reason we\nadd this is because when we\noutput to a file, the colors can\nget messed up basically. And\nthen the biggest addition we\ncould do is we can add a\ncurrency in here. So that we can\nget the cost of each function in\nUSD for a blockchain like\nAetherium. Now in order to get a\ncurrency here, we actually need\nto get an API key from corn\nmarket cap, just like we did\nwith ether scan, you can go to\ncoin market cap, corn market cap\nAPI, get your API key now, and\nwe'll go ahead and sign up.\nChoose a basic plan. We'll agree\nand create my account, we'll get\nan email verification. And we'll\ngo ahead and verify. Now in the\ncoin market cap dashboard, we\ncan copy our key. And yep, you\nguessed it exactly what we're\ngoing to do with this key, we're\ngoing to drop it into our dot\nenv file, or say coin market\ncap, API key equals and then\npaste it in there like that. Now\nthat we have our corn market cap\nAPI key in here, we can go back\nto our header dot config and add\nit in this corn market cap\nparameter. We're gonna do the\nexact same way we did above,\nwe'll do const, coin, market\ncap, API key equals process dot\nEMV, that coin market cap API\nkey, and then we'll take this\nsticking in here. So what this\nis going to do is actually going\nto make an API call to corn\nmarket cap, whenever we run our\ngas reporter. This is why\nsometimes you'll see me comment\nthis out and uncomment it\nbecause I don't always want it\nto make this API calls. But now\nwhat we can do now that it's\nenabled, we have an output file,\nwe can see the currency and we\nhave our API key, all we can do\nis run yarn hardhat test. And\nafter all our tests pass, we're\ngoing to see a gas report.tx T\nthat we can go ahead and read\nfrom which has that gas report.\nAnd now it actually has the USD\nprice of each one of these\ntransactions, it looks like at\ncurrent prices, with Aetherium\nbeing $3,000 per eath, and a gas\nprice of 43 Gwei, the store\nfunction would cost $6. And the\nsimple storage function would\ncost $64. The current the\nHardhead gas reporter actually\ncomes with some different\noptions, though, if you're going\nto be deploying to different\nnetwork, for example, with\nbinance, Polygon, Avalanche or\nhecho. For example, let's say we\nwanted to deploy the polygon,\nlet's see how much deploying the\npolygon would cost well in our\nWMV UHD ad token,\nMatic And now we'd rerun this\ntest. And if we look at our gas\nreport that takes T will now see\nthe gas price of polygon right\nnow is around 37 Gray per gas.\nAnd the cost of Matic is 147\nautomatic and USD. Now we can\nsee the cost of calling the\nsimple storage method is going\nto be $0.00. Now this of course\nis rounded down, but it's going\nto be really, really cheap to\ncall store versus deploying the\ncontract is going to cost three\ncents, I make it a habit to\nselect false for my gas reporter\nwhenever I don't want to\nactually work with the gas here.\nAwesome. Now sometimes when\nwe're working with our code, if\nwe don't have these environment\nvariables specified Hardhead\nmight get a little bit upset\nwith us. So oftentimes, I'll add\nsome code in here. So that these\nvariables are always populated,\nbecause we didn't specify our\nrink prpc URL, ring P RPC URL is\ngoing to be undefined. And that\nmight throw some errors blow. So\noftentimes, what we'll do is\nI'll add an or parameter here,\nthese double pipes mean or, and\nin JavaScript, if we say some\nvariable equals something or\nsomething else, what is really\nhappening is we're gonna say,\nokay, rink, the RPC URL is going\nto be equal to process dot E and\nV dot rink, the RPC URL. But if\nthis rink, the RPC URL doesn't\nexist, it's going to be whatever\nelse is over here. And I might\nwrite something like HTTPS eath\nRinkeby. Example, or something\nlike this, just so that I don't\nmake hard hat mad if I don't use\nrank B. And we can do something\nlike that for all these. So\nyou'll see this syntax,\noftentimes in a lot of code\nsetups. Now the last thing that\nI'm going to show you before\ngoing into the TypeScript\nedition of This is test\ncoverage. And as we progressed\nto this course, I'm going to\nshow you more and more tools\nthat you can use to make sure\nthat our simple storage contract\nis safe and secure. And we take\nall the steps we can to prevent\nany hacks from happening if we\ndeploy in real life. One of\nthose tools is a tool called\nsolidity coverage. And this is\nalso a hardhat plugin that we\ncan use for our code. solidity\ncoverage is a project that goes\nthrough all of our tests and\nsees exactly how many lines of\ncode in our sample store dot Sol\nare actually covered. And this\ncan be a Good tip off. If we\ndon't cover some line of code,\nsolidity coverage will say, Hey,\nyou don't have any tests for\nthis line, maybe you should\nwrite some tests for it. We can\nadd solidity coverage the same\nway we've been adding all of our\npackages. npm install dash, just\nsave Dev, or since we're using\nyarn, yarn, add dash dash Dev,\nsolidity coverage. And we can\nthen add this to our config, the\nsame way we've been adding\neverything to our config, go to\nour config, and we'll write\nrequire solidity coverage. And\nthere's some configuration\npieces we can add down here\nbelow for this, but we're just\ngoing to use the default now we\ncan do is run yarn, RT hat\ncoverage. And this is going to\ngo through our tests and print\nout a file that looks like this,\nwe'll also get a file called\ncoverage dot JSON, which is\nbasically this chart broken down\na little bit more often put my\ncoverage dot JSON in my dot get\nignore. And I know we haven't\nactually seen dot Git ignore, do\nwhat it's supposed to do. But we\nwill soon we can see here that\nabout 50% of the code 50% of our\nstatements in simple storage dot\nsoul are covered. About two\nthirds of our functions are and\n50% of the lines, It'll even\ngive us exactly what lines\naren't tested right now, which\nwe can see exactly 31 and 32 of\nsimple swords, outsole aren't\ncovered, which makes a lot of\nsense, because 31 to 32 is this\nAdd Person function, which we\ndidn't call and we didn't add to\nour tests. If you want to take\nthis time to pause and try to\nmake this solidity coverage be\n100% across the board, by\nwriting some more tests, I\nhighly recommend you do so it'll\nbe a great learning exercise.\nWe'll also add the coverage\nfolder. So covered adjacent and\nthe coverage folder, which\nagain, I'll explain what the dot\nget ignore folder does a little\nbit later. Now the last thing\nthat we didn't talk about and\nhere was what is this nomic labs\nhard hat waffle. We talked about\nDaddy and V heart and ether scan\ntasks gas reports. So today,\nwhat is this? Well, we can\nactually Google search this and\nfind out exactly what this is\nHardhead waffle is actually a\nplugin to work with the waffle\ntesting framework. waffle is one\nof these frameworks that allow\nus to do some really advanced\ntesting, we're going to be\nworking with some syntax that\nlooks really similar to this\nreally soon. And we'll be\nshowing you more and more of\nthis waffle tool\nas we continue. Alright, the\nnext part of this section, I'm\nactually going to go over the\nTypeScript edition of this. But\nfor all intents and purposes,\nyou've successfully created your\nfirst Hardhead project, you've\ndone a ton of amazing things. In\nthis lesson, let's do a quick\nrefresher of what we've learned\nso far, we learned how to spin\nup our own hard hat projects.\nAnd now we can run yarn, hard\nhat and see a list of the tasks\nand different things that we can\ndo with hard hat. We learned\nthat hard hat looks for this\nhard hat.config.js. And this is\nsort of the entry point for any\ntask that we run that starts\nwith hard hat, we learned we can\nadd our contracts to this\ncontracts folder. And then we\ncompile it by running yarn, art\nhalf compile, we learned that\nall the compliation goes into\nthe artifacts and then the cache\nas well. And if we want to clean\nreset, we can either delete\nthese two files or just run\nyarn, hard hat clean. So we\nlearned that we can use scripts\nor tasks to actually deploy,\ninteract and do things with our\nsmart contracts. We also learned\nthat I'm going to be using\nscripts for the rest of this\ncourse. But if you want, you\ncould absolutely use tasks as\nwell. I've asked this question a\nmillion times what's the\ndifference? Nobody really seems\nto know what the main difference\nis. But I think the main\ndifference is that tasks are for\nplugins. And scripts are for\nyour local development Mart,\nthat is mind limiter, we learned\nthat we can import a whole bunch\nof things, including tasks from\nhard hat in our scripts, and we\ncan work with our async\nfunctions to grab our contracts\nand deploy them, we actually\nthen can programmatically verify\nthem using hard hat and using\nhard hat plugins. And then\nadditionally, we can interact\nwith our contracts very similar\nto how we did it with ethers. We\nwrote a wonderful verification\nscript. And we also wrote our\nown task, we wrote our first\ntest for this whole space. And\nwe showed what our tests are\ngoing to look like moving\nforward. And we talked a little\nbit about their importance. And\nI really should stress that\nwriting good tests is going to\nbe the difference between a\nreally professional environment\nand kind of a side project.\nWhenever I audit smart\ncontracts, or whenever I'm given\na project for someone to tell me\nto take a look at. The first\nthing I look at is the readme,\nof course. And the second thing\nI look at is the tests. And if\ntests aren't good, I usually\ntell them, hey, you need to go\nback to the drawing board, and\nyou need to level up your tests.\nSo tests are really really\nimportant, especially for this\nspace, we learned about a couple\nof more environment variables we\ncan use. We learned about a\ncouple of tools to see how good\nour tests are one of them being\ncoverage. We also learn about a\ngas reporter to see how much\nit's going to cost us when we\nactually deploy to a real\nnetwork. We learned a ton about\nthe hard hat config, and how\nthere are multiple networks that\nwe can add add to our hard\nheads, we can make our project\nour EVM code, work with any\nnetwork out there, we started\nworking with dev dependencies\ninstead of regular dependencies.\nNow, READMEs are something that\nI'm not really going to go over\ntoo deeply in here. But READMEs\nare sort of like the welcome\npage of your GitHub repository,\nand really should give you an\nunderstanding of what your code\ndoes. Being a part of the web\nthrough space. And being a part\nof the blockchain ecosystem is\nreally more than just you coding\nyour stuff by yourself. You want\nother people to interact and\nengage with your code and engage\nwith your projects. I haven't\nshowed you how to use GitHub\nyet. But don't worry, we're\ngoing to but if you look at my\nheart had simple storage readme.\nIf you scroll down, usually, you\nreally want to have a Getting\nStarted section where you define\nhow to set up all the code and\nhow to set everything up a\nQuickstart section, and maybe a\nusage section and some testing\nsection, which teaches people\nhow to actually use and interact\nwith your code. Since we're just\nlearning more of the code part\nand not so much the readme part.\nFor now, we're not going to go\nover how to make a fantastic\nreadme. However, I will leave a\nlink in the GitHub repository\nassociated with this course,\nlink to this best readme\ntemplate. It really is a\nfantastic readme template that\nyou can copy to any of your\nprojects to make them look\nreally good and give them a\nreally good setup, so that other\ndevelopers can come to your\nproject, and learn and\nparticipate with what you're\ncoding. But all right, you have\nlearned an absolute ton, you\nshould be incredibly proud of\nyourself, and incredibly excited\nthat you've made it this far.\nNow I'm going to jump into the\nTypeScript section here. So for\nthose of you who are coding\nalong with TypeScript, feel free\nto follow along. For those of\nyou who are not, you just\nfinished the Basic section on\nhard hit, but stick around the\nnext to heart out sections are\ngoing to be the ones that really\nfine grain and hone your skills,\nand give you all the\nfundamentals for working with\nthese frameworks. So be sure to\nfollow along with the next two\nsections, we've got a ton more\nfantastic content for you, we\nare just beginning to get deeper\ninto the smart contract\necosystem. So take that lap, get\nthat coffee, and I'll see you\nsoon. Alright, also now let's do\nthis with TypeScript. So I am\ngoing to go ahead and just start\nthis from our JavaScript\nsection. However, if in the\nfuture, you want to start a new\nHardhead project, you can\nactually start a new project\nwith yarn, hard hat. And then do\ngreat and advanced sample\nproject that uses TypeScript,\nyou'll add a ton of plugins. And\nyou'll wait a while for\neverything to get uploaded. And\nyou wait, and you wait a little\nbit for everything to get\ndownloaded. We're not going to\ndo that though, because I'm\ngoing to show you how to convert\nthis to JavaScript Anyways, if\nin future hearted sections, as\nwe're coding along with\nJavaScript, if you want to code\nalong with TypeScript, you\nabsolutely 100% can. But let's\ngo ahead and show you what the\nmain differences are. Now that\nadvanced TypeScript thing is\ngoing to add a whole bunch of\npackages that you may or may not\nwant, I will talk about some of\nthem in our next lesson. But\nthere are going to be some that\nyou absolutely do need. Those\nare going to be at type chain\nslash ethers, dash v five, at\ntype chain, slash hard hat, at\nTypeScript, at types, slash\nChai, at types, slash node, at\ntypes slash moko, TS node, type\nchain and TypeScript. And I have\na link in the GitHub repo\nassociated with this course,\nI've got this yarn ad that you\ncan just copy paste, if you want\nto just copy paste that into\nyour project to run it. Oops,\nand I should have added those as\ndev dependencies. So we're going\nto actually just make them dev\ndependencies real quick, just by\ndeleting these two lines, and\nadding a comma here. Awesome,\nthat looks much better. And then\nof course, what we're going to\ndo is we're going to convert all\nof our JavaScript to TypeScript.\nSo anywhere where we have J S,\nwe're going to put Ts,\nobviously, if you're coding this\nfrom scratch with TypeScript,\nyou would do the.ts From the get\ngo. This includes our hard hat\ndot config, that's also going to\nbe TypeScript now. And\nadditionally, we're going to add\na TS config dot JSON. This is\ngoing to be our TypeScript\nconfiguration. Typically, for a\nsetup, we're gonna go with\nsomething like this. And you can\ncopy this from the GitHub repo\nassociated with this course.\nIt's basically telling\nTypeScript, what versions of\nTypescript and what files to\ninclude for working with\nTypeScript. Now let's go ahead\nand start with our deploy dot\nTypeScript. For usual, instead\nof using require, we're gonna go\nahead and use import, we're\ngonna do the exact same thing.\nWe're gonna have import ethers\nrun network, from hard hat. And\nthen in our verify function,\nwe're going to add that we're\ngonna add the types for these\narguments. So contract address,\nis going to be a string. And\nargs is going to be an array of\narguments. So we're gonna say\nit's gonna be any array, because\nit could be string, it could be\nnumbers, it could be balloons,\nit could be anything. We're also\ngoing to say for IE, it could be\nany, even though this is\ntechnically an error type, we're\njust going to put any for\nsimplicity. For now. All of our\nTypeScript scripts are included\nin our TS config, or any\nTypeScript files are manually\nadded here, which we have Our\nentire scripts folder here,\nwhich is good. So now we need to\nadd ethers in here. Well, if we\nlook at our hardhead.config.ts,\nwe're using require here still,\nand we need to swap this out for\nimport for Donnie V, you can use\ndot env slash config for it to\ngrab your dot env file. Now that\nwe've imported everything, go\nback to our deploy.ts, we can\nsee that that linting has gone\naway. If you want to be even\nmore explicit, we can go ahead\nand add import at nomic labs\nslash hard hat ethers like so.\nreason we don't need to import\nit here is because these two\npackages also work with Hardhead\nethers, so they automatically\nimport it. But if you want to be\nsuper explicit, you can go ahead\nand add it like so. Now, we're\nalmost good to go. But remember,\nour Harnett dot config is also\nimporting our tasks. So we're\ngoing to need to update our\ntasks or block number to be\nTypeScript fide. So of course,\ninstead of const require, we're\ngoing to import task from our\nthat slash config. And we're\ngoing to be sure to export our\ntask from lock number as the\ndefault. So we're going to do\nexport default task like so. And\nnow we should be good to run our\nscripts. So we can just do yarn,\nart hat, run scripts,\nemployee.ts. We can do network\nhard hat if we choose. And\nawesome. Now, it's when we get\nto the testing, that things get\na little bit different here. So\nlet's go ahead and change this\nrequired to import. Just to make\nit happy there. Let's try to run\nyarn, art head test, we get a\nwhole bunch of errors, and in VS\ncode will actually go ahead and\nget these errors right from the\nlinter. One of the trickiest\nthings that you run into as a\ndeveloper in this space is\ncalling functions on contracts\nwhere those functions don't\nexist, or vice versa. We're not\ncalling functions on contracts\nthat do exist. Right now the\ntyping for our contracts is just\ntype contract, which isn't super\nhelpful, because type contract\ndoesn't necessarily have all the\nfunctions that we want it to\nhave. We want our contracts to\nbe of type contract, but we want\nthem to be of the type of our\ncontract, because if they're the\ntype of our contract, they can\nhave all the functions that we\nwant them to have. So to give\nour contracts the correct typing\nhere, we actually can use this\ntool called type chain, which\ngives our contracts correct\ntyping type chain has a hardened\nplugin, which allows us to use\ntype chain and TypeScript\nnatively together, type chain\nslash hard hat was one of these\nthings that we already\ninstalled. And to add it to our\nhard hat, we got to just go to\nthe hard hat config, and add it\nin import at type chain slash\narhat. Now once we import that\nin to our config, if we run yarn\nhardhat, we now get a new task\nhere called type chain, you read\nthe description, it says\ngenerate type chain typings for\ncompiled contracts, this will\nenable all of our contracts to\nhave their own typing. So we can\nhave a simple storage variable\nof type simple storage contract,\nwhich is much better, because\nwe're always going to know\nexactly what we can do with each\ncontract. To create this, we run\nyarn,\narhat type chain. And this is\ngoing to create a new folder\ncalled type chain slash types.\nWith types for all of our\ncontracts, you can even go into\nour simple storage sub Ts, which\nis going to have all the\ndifferent functions and\neverything to do with our simple\nstorage contract automatically\ncoded into Typescript and\nJavaScript for us, which is\nincredibly helpful. And again,\nno, I haven't shown you what\nthis is yet. But in our dot Git\nignore, we usually want to add\ntype chain and type chain dash\ntypes into our dot Git ignore so\nwe don't push them up to GitHub.\nNow back in our test, we're\ngoing to add the exact types of\nthese different objects here. So\nwe're going to import them from\nthat folder that we just\ncreated. So we'll do import\nsimple storage, comma, simple\nstorage underscore underscore\nfactory from dot dot slash\ntypes, ain slash types, the\nsimple storage factory is going\nto be simple storage factory and\nthen civil storage of course, is\ngoing to be simple storage. So\nnow when do let simple storage\nfactory which is going to be of\ntype, simple storage, underscore\nunderscore factory, and then\nsimple storage, which is going\nto be of type simple storage\ncontract. And if we command\nclicked into simple storage,\nonce again, we can see all the\ncontract functions that we know\nand love, are here. In addition,\nwe have all the functions of the\nactual contract itself. Once we\ndo that, we're pretty much good\nto go we just need to have a\ncouple of new things here. Get\ncontract factory returns a type\nethers dot contract factory. So\nwhat we just need to do is we\nneed to wrap this in a simple\nstorage factory type. So We'll\njust do a little wrap like this.\nAnd we'll say, as simple\nstorage, I'm just going to sort\nof factory. And that's good to\ngo. Now that we've added all\nthis, we can run yarn, Hardhead\ntest. And boom, our test run is\nnormal, but with TypeScript and\nwith this additional typing that\nmakes our lives substantially\nsubstantially better. And that's\ngoing to be all you need to know\nfor TypeScript, reusable, all of\nthe branches have an optional\nTypeScript branch that you can\nuse to reference to work with\nTypeScript.\nWe've learned really just the\nbasics of all the different\nthings we can do with hardhat.\nAnd these next few lessons\nHardhead fun meme and hard hat\nsmart contract lottery are\nreally going to be the basics\nfor all the fundamentals of all\nthe tools that we're going to\nlearn in hardhat. Lesson Eight\nis going to be our introduction\nto full stack and working with\nfront end and building full\nstack applications. Getting all\nthe way through this course will\ngive you all the tools to start\nyour web three journey. But if\nyou're looking to just learn\njust the basics, make sure you\nabsolutely get all the way to\nLesson Nine. And if you get all\nthe way through lesson 18, you\nare going to know all of the\ncutting edge tools for this\nspace. And you're going to have\nthe knowledge to become easily\none of the best developers in\nthe space. So hope you make it\nall the way through to the end.\nNow one of the most important\nparts of this section of this\nlesson is going to be pushing\nour code up to GitHub, and then\nsending a tweet celebrating that\nwe pushed our first smart\ncontract our first web three\nGitHub repository to GitHub. So\nbefore moving on to the next\nlesson, be absolutely sure to\nget to the end of this and push\nthis code up to GitHub. And then\noptionally, if you want to\ncelebrate by sending a tweet,\nbut be absolutely sure to get to\nthe GitHub section, because as\nI've said, many times the web\nthree space is this incredibly\ncollaborative community and\nworking with GitHub or GitLab,\nor any other version control\ntool is going to be essential\nfor your success in the space.\nSo be sure to get to that part.\nAll right. Now, welcome back to\nthe hard hat Fund Me section of\nour course. This is the section\nwhere we're actually going to\nupload our first code repository\nto GitHub if you've never done\nthis before, this is going to be\nthe section where we're going to\nlearn even more about hardhat\nusing a familiar contract base\nwe've already worked with, which\nis the fund me contract. And\nagain, if you're using the\nGitHub repo associated with this\ncourse, you can scroll down to\nthe Hardhead Funmi. And all the\ncode is located in our repo. If\nyou'd like to do a quickstart,\nyou can go ahead and get clone\nit CVU into it, and then run\nyarn, and then just run yarn\nhardhat deploy this, I'm going\nto briefly show you what that\nlooks like. So in your in your\nVS code, you can do git clone,\ngrab the package, cd into it,\nand then type code period. To\nopen it up in a new VS code.\nOnce you're in your folder, you\ncan go ahead and run yarn. To\ninstall all the dependencies for\nworking with this project, you\nplan on working with the test\nnet or working with ether scan\nor coin market cap, feel free to\nfill out your Dotty and V with a\nprivate key RPC URL, corn market\ncap key and ether scan key. And\nthen you can just follow along\nwith the readme to use this repo\nto run yarn, hard hat deploy.\nAnd it'll show you deploying\nsome contracts and some mocks,\netc. So let's get to building\nthis ourselves though. Now we're\ngonna make a new directory for\nthis project, it's gonna be the\nsame setup we've seen before. MK\ndir, hard hat. And me, FCC,\nwe're gonna cd into heart at\nFunmi, FCC, and then type code\nperiod. And if code period\ndoesn't work for you, you can\nabsolutely open this up by\nhitting File, Open Folder, like\nwe showed you before. Now, we're\nin a brand new folder here. And\nwe're gonna go ahead and add\nhard hat here. And we're gonna\nrun yarn, add dash dash Dev,\nhard hat. Now that we have hard\nhat, in our package, JSON, and\nin our node modules, we can go\nahead and run yarn, start app.\nAnd this will say, What do you\nwant to do? I'm going to choose\nthe advanced sample project\nhere, just to show you what's\ngoing on. And we're going to set\nthis up in a way that I think\nworks best. So we'll go ahead\nand do the advanced sample\nproject. Yes, we're going to\nhave that as the root. Yes, we\nwant to add a Git ignore. And\nthere are a lot of sample\nproject dependencies that it\nwants us to add. We're gonna go\nahead and hit yes. But we're\ngoing to end up not using all of\nthese and I'll show you which\nones we're not going to use and\nwhy. But for now, let's go ahead\nand hit yes.\nAll right, awesome. And now we\nhave an advanced project in\nhere. Let me walk you through\nthe additional things that are\nin here. So we have a\ntraditional contract node\nmodules, which is going to be\nthe same scripts is going to be\nthe same test is going to be the\nsame. But this comes with a dot\nE and V dot example already\npacked in for us. It also comes\nwith.es lint files.es lint, RC\ndot j s.es. Lint, ignore es Lint\nis known as a JavaScript linter,\nwhich helps you find and\nautomatically fix problems in\nyour code for the JavaScript\nthat I work with. I'm not a big\nfan of ES lint, so I typically\ndon't use it. So I'm going to go\nahead and delete the two of\nthese. If you want to keep them\nin you absolutely can dot Git\nignore. We're going to finally\nunderstand what this file does\nin this lesson that NPM ignore\nhelps Ignore files if you want\nto push your project up to be an\nNPM package, which we're not\ngoing to do. So if you want to\ndelete this, you can as well\npretty or ignore it and pretty\nDRC. We already know what these\ndo small hint. And so hint\nignore, which we're going to\ntalk about it in a minute, or\nHardhead config, which just\ncomes already with a ropsten\nnetwork, a gas reporter and\nether scan package dot JSON with\nall the additional packages, the\nreadme is a little bit more\nrobust. And then of course, our\nyarn dot lock. So this advanced\nproject looks pretty similar to\nwhat we're going to be working\nwith anyways. Now I do want to\ntalk about this soul hint,\nthough. So what is solvent\nsolvent is known as a solidity\nlinter that we can use to lint\nour code linting is the process\nof running a program that will\nanalyze code for potential\nerrors. It also does a little\nbit of formatting, oftentimes,\nes Lint is a way to lint for\nJavaScript code. So hint is a\nway to lint for solidity code,\nwe use prettier to format our\ncode, and we can use soul hint\nto lint, our code, they are\noften used a little bit\ninterchangeably, even though\nthat's not exactly correct, as\nthey are a little bit different.\nWe can run this linter on our\ncode by running yarn, sole hint,\nand then type the name of the\nfiles that we want to lint. So\nwe do contracts, slash and then\nyou can just do start out so\neverything looks okay, nothing\nwill happen. Well, let's say we\nhave a variable that we don't\nexplicitly say the visibility of\nit is. This isn't the best\npractice because ideally, we\nalways say exactly what the\nvisibility of some variable is.\nThis obviously gets defaulted.\nBut it's usually better to be\nmore explicit. So now if we run\nyarn, so hint, contracts start\nup so it'll give us a warning,\nsaying we should explicitly Mark\nvisibility of state, this linter\nis a good way to check for some\nbest practices for running our\ncode. So we're definitely going\nto keep a small hint around. Now\nthat we've got a repo here,\nlet's add a couple of our common\nsetup pieces here. So in\nprettier.rc, we're going to swap\nthis out with what we've been\nusing so far. Tab of the form us\ntab is false, semi false, single\nquote, also false. We're going\nto update our prettier dot\nignore node modules, package dot\nJSON image artifacts, cache\ncoverage ID v dot star, readme,\nand coverage and anything else\nyou want to add in here. And\nwe're going to scroll up to our\ncontracts folder. And we're\ngoing to swap this greeter dot\nsoul out with our fund me dot\nsoul. Now let's go ahead and add\nour contracts in here. If you're\nfollowing along with the repo,\nyou go to the contracts folder,\nthere's actually another folder\nin here and the contracts look a\nlittle bit different. So if you\nhave those contracts, steal from\nremix, let's actually grab them\nfrom remix because we're going\nto make a couple of changes to\nthem. If you don't have remix up\nanymore, which you probably\nshouldn't, because you should be\ntaking breaks, you can jump back\nover to Lesson four remix Funmi\njump into the repo here and grab\nthe contracts from inside here.\nJust go to the fun v dash Free\nCode Camp tutorial and grab the\ncode from there. So we're gonna\ngrab just fun me and price\nconverter dot soul. So go ahead\nand delete that old file, create\na new one and call it fund me\ndot song. Paste it in there. And\nthen we're going to create the\nprice converter. That's all. Now\nwe have both our Funmi and our\nprice converter contracts in\nhere. Now one of the first\nthings that we want to do one of\nthe first things that we did\nlast time was we ran yarn\ncompile to make sure that our\ncode is actually working the way\nwe want to. And before we\nactually hit Compile, one of the\nthings that we're going to need\nto do is come to our Hardhead\ndot config, we're going to make\nsure we're on the correct\nsolidity version. So we're going\nto do zero point 8.8 here. And\nlet's go ahead and try to\ncompile.\nSo we can run yarn Hardhead\ncompile. And you'll see we\nactually get an error here.\nLibrary at chain link slash\ncontracts imported from\ncontracts slash fund me dot soul\nis not installed, try installing\nit using npm. In remix, we went\nahead and just imported at\nchainlink slash contracts, right\nfrom our NPM and or GitHub. But\nin our local code, we have to\ntell Hardhead specifically,\nwhere to get this from, we want\nto download this specifically\nfrom the NPM package manager at\nchainlink slash contracts, we\ncan download it simply by\nrunning yarn, add dash dash dev\nat chainlink slash contracts.\nNow that we've downloaded it\ninto our file, we'll be able to\nsee it in Node modules here.\nHardhead is now smart enough to\nknow that at chain link slash\ncontracts is going to point to\nthat node module that we have.\nSo we can now run yarn Hardhead\ncompile boom, now we can see\ncompiled three solidity files\nsuccessfully. So now we have our\ncontracts in here and our code\nis compiling successfully. We're\nprobably going Want to deploy\nour code? Now in our last\nsection, I know we use the\nscripts module. And we made our\nown manual deploy script.\nHowever, something that you'd\nnotice, the more that you work\nwith just raw ethers, or even\njust hard hat is that keeping\ntrack of all our deployments can\nget a little bit tricky. If you\njust use a deploy script, it's\nnot saving our deployments to\nany file. Additionally, having\neverything in the deploy script\nfor deploying can make the tests\nand the deploy scripts, maybe\nnot work exactly hand in hand.\nAnd there are a couple of other\nthings that might be a little\nbit tricky to work on, we're\nactually going to work with a\npackage that makes everything I\njust mentioned, and a couple\nother things way easier. And\nthis package that I'm talking\nabout is going to be the hard\nhat deploy package. There's a\nlink to this package in the\nGitHub repository associated\nwith this course. It's a hardhat\nplugin for replicable\ndeployments and easy testing.\nAnd if we scroll down to\ninstallation, we can see we\ninstall it basically the normal\nway. They're using npm. And\nwe're gonna go ahead and use\nyarn. So for us to add it, we'll\ndo yarn, add hardhat dash\ndeploy. And then of course,\nwe're gonna do dash dash Dev.\nOnce done deploying this require\nstatement to our hard\nhat.config.js. Once again,\nbasically the config is our\nentry point. This is where we're\ngonna get started. And we can go\nahead and delete our deploy.js\nscript. Now if we run yarn\nhardhat, you see that we have a\nbunch of new tasks in here, with\none of them being this deploy\ntask, this deploy task is going\nto be the main task that we use\nto deploy our contracts. Instead\nof writing our deploy scripts in\nthe Scripts folder, we're\nactually going to create a new\nfolder, we can create a new\nfolder by just doing MK dir\ndeploy. Or you can always right\nclick and hit New Folder. This\ndeploy folder is going to be\nwhere a lot of hard hat Deploy\nModule looks to deploy code. And\nit's going to be where we are\nwriting our scripts. To write\nour scripts, we usually need to\nadd one more thing in here.\nSince we're going to be using\nethers JS in all of our scripts,\nwe want to add Hardhead deploy\nethers to our package here. Now,\ninstead of just doing yarn, add\ndash dev hard at deploy ethers,\nwe're going to do something a\nlittle bit weird. We're going to\ndo yarn add or npm install dash\ndash Dev, and we're going to\ninstall it like this. So let me\njust copy this. And you can just\ncopy that from the repo. And\nwe'll do yarn, add dash dash\nDev, and paste that in here.\nWhat we're doing is we're taking\nat nomic labs, hard hat ethers,\nwhich we've used before, and\nwe're overriding it with hard\nhat deploy ethers. Remember how\nin our last project, we used\nhard hat ethers. So that hard\nhat could override ethers to use\nhard hat deploy. We use hard hat\ndeploy ethers, so that hard hat\ndeploy can override Hardhead,\nwhich overrides ethers, which is\nkind of funny. When you say like\nthat, this will enable ethers to\nkeep track of and remember all\nthe different deployments that\nwe actually make in our\ncontract. So if we look at our\npackage, JSON, and now we can\nsee our nomic labs dashboard had\nethers. Now the version of it is\ngoing to be MPM. Hardhead deploy\nethers. This is our package dot\nJSON, basically saying the hard\nhat ethers package is now\noverwritten by the hard hat\ndeploy ethers package, which is\nwhat we want. Alright, great. So\nnow that we have that setup, we\ncan start writing our deploy\nscripts, the way that Hart had\nto play works is all the scripts\nthat get added to our deploy\nfolder will get run when we run\nyarn, hard hat deploy. So a good\npractice is usually to number\nthem so that they run in the\norder that you want them to run\nin. So since we only have one\ncontract that we want to deploy\nthe Funmi contract, we're going\nto do 01 Deploy Funmi Jas, and\nin this script, this is going to\nbe where we define how to deploy\nthe fundament contract. Alright,\nso we're in our deploy Funmi\nscripts. Now traditionally, what\ndid we do, we did imports, we\ndid the main function. And then\nwe did calling of main function,\nthat Hardhead deploy is a little\nbit different, we're still going\nto import our libraries and\npackages, but we're not going to\nhave main function. And we're\nalso not going to call the main\nfunction when we run Hardhead\ndeploy Harnett deploy is\nactually going to call a\nfunction that we specify. In\nthis script here. What we're\ngoing to do is we're gonna\ncreate a function, we'll call it\ndeploy funk.\nWe're going to export this\ndeploy function as the default\nfunction for Hardhead deploy to\nlook for, so we could say,\nmodule that exports dot default\nequals deploy funk. To test it\nout, we can go ahead and do\nconsole dot log, hi. And then in\nour terminal, run yarn, hard\nhat, deploy. Oops, get rid of\nthe parentheses here. Sorry. Run\nit again. And we can see it went\nand ran our deploy func here.\nNow if this syntax is easier for\nyou to understand, go ahead and\nuse this syntax and we're going\nto be passing the heart at\nruntime environment as a\nparameter to this function.\nHowever, if we go to the heart\nhat deploy documentation, and we\nscroll down to an example\nscript, the syntax looks a\nlittle bit different. And let me\njust explain what's going on\nhere and how we're going to be\nwriting ours. So instead of kind\nof defining everything like\nthis, and defining the function\nname, similar to what we were\ndoing before, we're actually\ngoing to using a nameless, a\nsynchronous function, we're\ngoing to make it an anonymous\nfunction, similar to what we've\nseen before. So instead, we're\ngoing to say async parameters\nlike this, I'm going to pass our\nparameters our heart at runtime\nenvironment in here. And it's\ngoing to be an arrow function.\nAnd then we're going to wrap\nthis whole thing in module dot\nexports. So we're gonna say,\nmodule, dot exports, equals this\nasync function like this. This\nsyntax here is nearly identical\nto what's up here, we just don't\nhave a name for our async\nfunction. So this is how we're\ngoing to set it up instead. But\nif this syntax is a little bit\nconfusing for you feel free to\nuse this above as the two of\nthese are going to be the same.\nNow the next thing that most of\nthe documentation does is it\npulls out the variables and\nfunctions out of the HRV that\nwe're going to use. HRV is the\nheart hat runtime environment.\nWhenever we run a deploy script,\nheart hat deploy automatically\ncalls this function and just\npasses the hard hat object into\nit similar to in back in hard\nhat simple storage. In our\ndeploy script. We had ethers run\nin network come from hard hat,\ninstead of coming from hard hat.\nWe're coming from HRV, which is\nbasically the same thing as hard\nhat. For our script, we're only\ngoing to use two variables from\na jury when you use const. Get\nnamed accounts. And deployments.\nThis syntax might look a little\nbit weird for you. But it's just\na way to pull these exact\nvariables out of a tree. It's\nkind of the same thing as just\ndoing a tree dot get named\naccounts and HRA dot\ndeployments. But pulling them\nout like this means we don't\nhave to add a tree at the\nbeginning anymore. And then\nadditionally, additionally,\nJavaScript has something called\nsyntactic sugar. So instead of\ndoing this on two lines like\nthis, we can actually do that\nwhole bit on one line. So\ninstead, we just extrapolate\nthose two variables, right in\nthe function declaration. So\nthis line is the exact same\nthing as doing this line. This\nis an asynchronous, nameless\nfunction using the arrow\nnotation, or working with our\ndeploy scripts here. And we're\ndefault, exporting it with\nmodule dot exports. I don't know\nthat was a lot. And another is\nkind of a lot of syntactic sugar\nhere. But if that's really\nconfusing for you, just feel\nfree to use the above. And\nwhenever we refer to get named\naccounts, you can also just do a\nthree dot get named accounts, or\na three dot deployments. So\nhopefully, that's clear that\nthis top part is gonna be the\nsame as this bottom part right\nhere, whichever one you feel\nmore comfortable working with.\nBut alright, now that we've\ngotten all that out of the way,\nlet's continue with the script.\nSo we're using this deployments\nobject, reason this deployments\nobject to get two functions,\nthose two functions are going to\nbe the deploy function, and the\nlog function. So we're gonna say\nconst, deploy log equals\ndeployments. So we're going to\npull these two functions out of\ndeployments. And then we're also\ngoing to do const Deployer.\nEquals await, get named\naccounts. So we are grabbing\nthis new deploy function, this\nnew log function, and we're\ngrabbing this deployer account\nfrom this weird get named\naccounts function. What's this\nget named accounts function,\nthis get named accounts is a way\nfor us to get named accounts.\nWhen working with ethers we saw\nwhen working with ethers, we can\nactually get our accounts based\noff of the number in the Account\nsection of each network. So for\nexample,\nin this list of private keys,\nprivate keys zero private key\none private key two, it might\nget a little confusing to\nremember which ones which so\ninstead of working like that, we\ncan add a section at the bottom\ncalled named accounts where we\ncan name each one of those spots\nin the accounts array. So we'll\ndo named accounts. And we'll say\none of the accounts that will\nname is going to be named\nDeployer. And we're gonna say by\ndefault, the zero with account\nis going to be Deployer. We can\nalso specify which number is\ngoing to be the deployer account\nacross different chains. For\nexample, on Rigby we wanted the\ndeployer account to be the first\nposition, we could do something\nlike this or on hard hat, we\ncould do it like this. We can\ncreate multiple users. Like for\nexample, if we wanted to do a\nuser for some test or something,\nand we'll just say the default\nis one or whatever we wanted in\nhere. So back in our deploy fun\nme We're going to say we're\ngoing to grab that deployer\naccount from our named accounts.\nAnd then finally, we're going to\ngrab our chain ID for reasons\nthat will come clear pretty\nsoon. So we'll do const, chain\nID equals network dot config dot\nchain ID. Now, how do we\nactually deploy this fund me\ncontract? Well, let's think\nabout this for a little bit.\nWhen working with remix, it was\npretty easy, right? We just\ndeployed it to a test net. Ah,\nthat's kind of the issue there,\nisn't it deploying to a rink,\nthe test net is a little bit\nslow. We don't always want to\nhave to deploy to one of these\nslow test nets or even a main\nnet when tinkering and fiddling\nwith our contracts, do we know\nthat's gonna be really bad, we\nreally want to deploy to a test\nnet as a last stop after we've\ndone all our testing locally. Or\nwe can deploy it to a test that\nto see some very specific code\nwork, like for example, with the\nchain link documentation. So\nideally, we deploy this to a\nlocal network first. But can we\njust do that? Well, if we look\nin our price converter, dot\nSeoul, we have this hard coded\naddress in here, this 0x\naddress, if we go to Doc's dot\nchain that link EVM chains,\ncontract addresses for Aetherium\ndata feeds. That address is the\neth USD, specifically for\nRinkeby. What if we work on the\nHard Hat Network? Example?\ndefault network?\nHard Hat. And then like I said\nbefore, if you don't write this\nin part, it is automatically the\ndefault network. But if we're to\npoint to the Hard Hat Network,\nharder network is a blank\nblockchain. And it gets\ndestroyed every time our scripts\nfinish, or even if we're working\nwith a local node, this price\nfeed contract won't exist, one\nof the code there won't be\nupdated with data. So what do we\ndo? How do we test and interact\nwith our code locally? Is there\na way we can do this? Well, one\nof the ways that we can do this\nthat we'll learn a little bit\nlater is actually forking a\nblockchain, where you can keep\nstuff hard coded. But usually,\nit's still better to figure out\nhow to do everything with\nsomething called mocks. There's\na great Stack Overflow question\nthat just says, What is mocking\nand mocking is primarily used\nfor unit testing, which we'll\ntalk about in a little bit. And\nobject under test may have\ndependencies on other complex\nobjects. To isolate the behavior\nof the object, you want to\nreplace other objects by mocks\nthat simulate the behavior of\nthe real objects. In short,\nmocking is creating objects that\nsimulate behavior of real\nobjects. Now, this might seem\nlike a lot of words. But\nbasically, what we want to do is\nwe want to make a fake price\nfeed contract that we can use\nand we can control when working\nlocally. So back here, I'm just\ngoing to leave a note in here\nsaying, When going for local\nhost or Hard Hat Network, we\nwant to use a mock. Okay, great,\nwell, we can use a mock and\nwe'll learn how to make one of\nthose in a little bit. Well,\nwhat happens when we want to\nchange chains, for example, back\nin dots dot chain to link EVM\nchains, contract addresses,\nthere are a ton of different\nblock chains that have price\nfeeds on them. And on each one\nof these blockchains, the eth\nUSD price feed is going to be a\nlittle bit different. For\nexample, we're looking at ETH\nUSD, the address of eth USD for\nAetherium main net is different\nfrom the address of eth USD for\nRigby, which makes sense,\nthey're totally different\ncontracts on different chains,\nthey have very similar\nfunctionality. And they do\nnearly the exact same thing. But\nthey're still different. We're\nalso going to need a way for us\nto modularize or parameterize,\nthis address in here, so that no\nmatter what chain we deploy to,\nwe don't have to change any of\nour code, we can always have our\ncode be exactly the same. And we\ndon't have to come in here and\nlike flip values and flip\nvariables and stuff. So let's\nkeep that all of that in mind as\nwe write the rest of this. Now\nin order to parameterize. This,\nwe actually want to prioritize\nand do a little refactoring of\nour fundamental soul.\nRefactoring basically means\ngoing back and, and changing the\nway your code works. Right now\nwe have this constructor\nfunction, right the constructor\nfunction is the function that\nautomatically gets called\nwhenever we deploy our contract.\nRight now it's not doing a whole\nlot right now it's just updating\nthe owner variable to be whoever\nsent in the contract. But we can\nactually have a do much more\nthan that. Since this\nconstructor is a function just\nlike every other function, we\ncan actually have it take\nparameters, one of the\nparameters that we might like\nfor it to have is going to be\nthe address of a price feed. So\nlet's go ahead and add this and\nfigure out how to refactor all\nthis code. So we're going to add\nconstructor address, price feed\nfor the constructor in here.\nWhen we deploy our contract. Now\nwe're going to pass it the eth\nUSD price feed address depending\non what chain we're on. If we're\non rink B, we'll use this\naddress if one polygon will use\na different one b&b, different\none, Gnosis hecho, avalanche,\netc, you get the picture. So\nwe're going to marginalize this\nlike so. Now that our\nconstructor takes a parameter\nfor the price feed, we can\nactually save an aggregator v3\ninterface object as a global\nvariable in our price converter,\nwe just create a price feed\nvariable of type aggregator v3\ninterface, which again, we're\nimporting from the chainlink\nrepo, which is an interface\nobject which gets compiled down\nto the ABI. If you match an ABI\nwith up with an address, you get\na contract that you can interact\nwith. So we're going to do the\nsame thing here. We're gonna\nsay, aggregate Tor, v3\ninterface, public price feed,\nration and call this price feed\naddress so that these don't have\nthe same name. And in our\nconstructor, we're going to say\nprice feed equals, and we're\ngoing to do the exact same thing\nwe did with our price converter\nequals aggregate tore the three\ninterface\nof price feed address. Like so\nnow, we have this price feed\naddress that's variable and\nmodularized, depending on\nwhatever chain that we're on.\nNow, what we can do is we can\ngrab this price feed address,\nand we can use it for our price\nconverter. So where are we using\nour price converter? Well, just\na quick reminder, we're using\nusing price converter for you at\n256. We're using this as a\nlibrary on top of our unit 256\ntype. So we're calling message\ndot value dot get conversion\nrate. So we look at our price\nconverter, we have this function\nget conversion rate, which takes\nan FML as its initial parameter,\nwhich again, since this is a\nlibrary, it automatically passes\nthe message dot value into this\nget conversion rate function.\nBut we could also pass in this\nprice feed, and therefore we\nwouldn't need to hard code it in\nthe get price anymore. So let's\ngo ahead and figure out how to\ndo that. Well, what we can do is\nwe can do message dot value dot\nget conversion rate, we'll stick\nprice feed in here. And then\nwe'll have to update our get\nconversion rate to do a comma so\nthat it takes a second\nparameter, because remember,\nagain, the initial parameter is\ngoing to be message dot value.\nAnd the second parameter is\ngoing to be what we define here.\nSo we'll do s amount, comma ag\nreg gate Tor v3 interface. And\nwe'll call this price feed. And\nnow, when we call our get price\nfunction, we can pass the price\nfeed to the get price function.\nAnd up here we can have get\nprice. Take, you guessed it an\naggregate or the three interface\ncalled price feed. And now we no\nlonger need to hard code in the\nprice feed. And we can just\ndelete those lines and have it\ncompile like this, which is\nawesome. So quick refresher,\nwe're parameterizing that price\nfeed address and passing it in\nwith a constructor that gets\nsaved as a global variable to an\naggregator v3 interface type, or\npassing it to a get conversion\nrate function, which passes it\nto the get price function, which\nthen just calls latest round\ndata. And we probably could have\nmade this even easier, probably\ncould have just got rid of the\nget price function and stuck\nthis code in the get conversion\nrate. But we'll leave it there\nfor now. Now that we've done\nthat refactoring, let's make\nsure it works. Yarn Hardhead,\ncompile, invalid value undefined\nfor hardhat dot config dot\nnetworks. Let's go to the let's\ngo to the config real quick.\nThat's because the default\nnetwork needs to be outside of\nnetworks. My mistake. Let's try\nthat again. I spelled interface\nwrong and the price converter.\nAnd a quick note, if gives you\nan error like this, oftentimes,\nyou can command click or control\nclick and open that file up\nright in the editor, which saves\nyou some time, we're going to\nhave defined the line and find\nthe file. But yeah, let's spell\nthat correctly. And let's try\nthis again. And awesome. It\nlooks like it's compiling\ncorrectly. And we just have some\nwarnings, it looks like these\nwarnings are just about this git\nversion, which is because we're\nshadowing this, we're creating a\nnew price variable down here,\nyou've no we just created a\nglobal price free variable.\nLet's just go ahead and delete\nthe get version function\naltogether since we're not even\ngoing to really need it. And we\nonly use the Git version to show\nyou how to actually start\nworking with interfaces. And\nthen we'll compile it one more\ntime for good measure. Boom\ncompiled successfully. Awesome.\nSo now we've just refactored our\ncode. So we can pass a price\nfeed address depending on the\nnetwork that we're on. Okay,\ngreat. With all that being said,\nlet's come back to our deploy\nFunmi script, and let's learn\nhow to actually deploy the rest\nof it. In order for us to deploy\na contract we remember from our\nlast sections that we use the\ncontract factories, with heart\nhit Deploy, we can just use this\ndeploy function. And to use the\ndeploy function, we'll say const\nFunmi, which is going to be the\nname of our contract, equals\nawait. And we'll call this\ndeploy function, the name of the\ncontract that we're deploying\nright now, and then a list of\noverrides that we want to add\nhere. So we're gonna say who is\nactually deploying this by\nsaying from, we're gonna say\nit's from the Deployer. We're\ngonna pass any arguments to the\nconstructor In this args piece\nhere, which we just added a\nsingle Argh. So these brackets,\nwe're going to make it a list of\narguments, we're going to put\nthe price feed address in here,\nwhich we'll show you how to do\nin a second, put price feed\naddress. And then we're also\ngoing to do some custom logging\nhere so that we don't have to do\nall that console dot log stuff\nthat we've been doing this whole\ntime. And we need to put\nsomething in here. We need to\nput an address in here. And you\ncan use this backslash star to\nput like a common in between\nyour code.\nWe can't just do const address\nequals, you know the address and\nstick it in here. Well, I mean,\nwe could but we're not really\nprioritizing now. Right? We're\nkind of back to just hard coding\nit here. So what can we do\ninstead? Well, what we can do is\nwe can actually use the chain ID\nto do something like if chain ID\nis x, use address, Y, or if\nchain ID is Z use address A. So\nwe can do something that looks\nlike this. And to enable this\nfunctionality, we actually take\na page out of the Ave GitHub. So\nAve is another protocol that's\non multiple chains and has to\ndeploy their code to multiple\nchains and work with multiple\ndifferent addresses. So what\nthey do is they use a number of\ndifferent useful tricks. But one\nof the main ones is using this\nhelper hardhat config. Now\nthey're using TypeScript with\nJavaScript, but it's gonna be\nthe same thing. With this\nconfig, they have different\nvariables, depending on what\nnetwork that they're actually\non. And depending on the network\nthat they're on, they use\ndifferent variables. So they use\nthis network config almost to do\nexactly what we're trying to do\nhere. So what we want to do is\nwe're going to create a new file\nat the root directory, so just\nclick down here, new file. And\nwe're going to call it helper,\nhard hat config dot j, s. And\nthis is where we're going to\ndefine that network config. And\nthis is where we're going to\nsay, hey, if you're on network,\na, use this address network, be\nthis use this address, etc. So\nwe're going to create an object\ncalled const. Network config.\nequals and we're going to add a\nbunch of stuff in here. So our\nmain network that we're working\nwith right now is rinky. dinky\nhas a chain ID of four. So we'll\nsay chain ID four is going to be\nnamed Rinkeby. And the eth USD\nprice feed address is going to\nbe the price feed address of\nrank B of the eth USD price\nfeed. So we're going to copied\nfrom the documentation or from\nthe GitHub, whatever you want to\ndo, and paste it in here. Now we\nhave a simple methodology of\nkeeping track of different price\nfeeds a different contract\naddresses across different\nchains. Let's say for example,\nwe wanted to deploy to Polygon\nas well. Well, first, what are\nwe going to need? Well, we're\ngoing to need the chain ID of\npolygon. So a quick little\nGoogle Search brings us to the\npolygon documentation. And we\nsee the chain ID is 137. So I'll\ndo 137. What's a little brackets\nhere, we'll say name, polygon.\nThen we'll do a comma eth USD,\nprice feed. And then we'll add\nthe price feed of eth USD on\npolygon. So docstoc, chain link,\npolygon or Matic and then we'll\nlook up eth, USD. And boom, we\nsee it right here. We've grabbed\nthis address, and we paste it\nin. Well, what about the\nHardhead? Network? We'll get to\nthat in just a second, don't you\nworry. And then at the bottom,\nwe need to export this network\nconfig. So our other scripts can\nactually work with it. So we'll\ndo module dot exports equals\nnetwork config. And we're going\nto actually export a couple of\nthings from this file, which is\nwhy we're doing it like this\ninstead of that default way that\nI showed you before. So back in\nour script, now, what can we do?\nWell, first, we want to go ahead\nand import that network config.\nSo we'll say const. Network\nconfig equals require, and then\nwe'll import it, we'll go down\nand directory to help our\nHardhead config and save. And I\njust want to mention this one\nmore time, just so that it\ndoesn't confuse anybody. This\nsyntax here, constant network\nconfig with the little curly\nbraces around it is the same is\nif I went const. Helper config\nequals this thing, which helper\nconfig is now kind of this whole\nfile. And then const network\nconfig equals Hopper config dot\nnetwork config. So again, this\nindex is just kind of an easy\nway to extrapolate or pull out\njust the network config from\nthis file. So that's how that\nworks. And that's why we export\nit at the bottom so that we can\ndo this, please use the GitHub\nrepository to ask questions and\ndiscussions especially about\nsome of this JavaScript stuff.\nAlright, great. So now that we\nhave this network configured\nhere, we can now do this part of\nwhere we say if China d z use a\nif chain ID is x use y. So Since\nour helper config is nicely in\nthis kind of dictionary, key\nvalue pair style, what we can do\nis we can say const. eth USD.\nPrice feed address equals\nnetwork config at the chain ID,\nbecause if Francina D, or it'll\nbe this object, French entity\npolygon, it'll be this object at\nthe eth USD price feed, we're\ngoing to save this to eth USD\nprice feed address. And now no\nmatter what chain we're on,\nwhenever we run hard hat deploy,\nif I run yarn, hard hat deploy\ndash dash network Rinkeby. This\nchain ID is going to be four.\nAnd so it's going to use this\nprice feed address. If I do dash\ntest network polygon, and I\nremember to add both ring P and\npolygon to my networks, like\nhere, the channel is going to be\n137. It's going to use this\nprice feed address. So this is\nawesome. This is exactly what we\nwant. But is it everything that\nwe want? Those of you who have\nbeen questioning while I have\nbeen coding and talking, you\nmight be thinking, Okay, well,\nyou talked about this marking\nthing. You talked about\nlocalhost and hard hat. And how\ndo we test this locally? Like\nthis is how we go to a test net\nand a main net. But what about a\nlocal network? And that is\nexactly what we're going to talk\nabout now. So we've modularized,\nour code and parameterize our\ncode so that we're going to use\nthe address based off of the\nchain that we're on. But what if\nwe use a chain that doesn't even\nhave a price feed address on it?\nWhat do we do there? This is\nwhere we actually create those\nmock contracts. The idea of mock\ncontracts here is if the\ncontract doesn't exist, we\ndeploy a minimal version of it\nfor our local testing, or our\nlocal testing. And deploying\nmocks is technically a deploy\nscript. So what we do actually\nis back in our deploy folder is\nwe're going to create a new\nfile, and we're going to call it\n00 Dash deploy mocks dot j s, we\nstarted with 00. Because this is\nalmost like the pre deploy\nstuff, we only do this,\nsometimes we don't always deploy\nmocks, right, we don't need to\ndeploy mocks to Rinkeby, or\npolygon or or Aetherium main\nnet, because those already have\nthese price feeds, we're\nactually going to deploy our own\nmock price feed contracts. And\nin our deploy Funmi script,\nwe're going to use our own\ncontracts, instead of already\nestablished contracts. If we're\non a network that doesn't have\nany price, few contracts, like\nhard hat or locos, for example.\nSo let's write our deploy mock\nscript. So the setup of this is\ngoing to look nearly identical\nto our deploy Funmi. And again,\nif you want to set it up like\nthis, you absolutely can. But\nI'm actually just going to copy\nthis, this part, paste it in\nhere, because that initial part\nis going to be exactly the same.\nOh, and over here, I just\nrealized that we're calling this\nnetwork thing without being\ndefined, JavaScript will kind of\nbe smart enough to know where\nthis network thing is coming\nfrom. But it can be a little bit\nconfusing. So it's better to be\nreally explicit, and say, const.\nNetwork equals require hard hat,\nthis network thing is coming\nfrom hard hat. And we're going\nto grab this line. And we're\nalso going to use this at the\ntop of our script here. And then\nour top section is going to look\nexactly the same as well, we're\ngoing to grab these three lines,\nand paste them in deploy\ndeployer chain ID, boom, it's\nall going to be the same here,\nbecause we're setting up to\ndeploy some stuff. Now we want\nto deploy a new contract. But if\nwe look at our contracts folder,\nthis is all we have right now.\nSo we're going to need to add\nthis mock this fake contract to\nour contracts folder. Now what\nwe can do is in our contracts\nfolder, we want to separate this\nfile from the rest of our file\nso that we know okay, this isn't\npart of our project, but it is\npart of our testing. So we're\ngoing to right click Create New\nFolder. And we can either call\nit mocks, or test I like to call\nmine test. And inside of this\nfolder, we can go ahead and\nright click create a new file,\nI'm going to create a new file\nand call it mock, v3 aggregate\ntore that soul. And this is\nwhere we're going to define our\nmock price feed aggregator\nourselves. So how can we create\nour own fake price feed\ncontract, so we can test\neverything locally? Well, one\nthing we could do is we go to\nthe chain link GitHub repo, and\ngo through the contracts and\nfind one of these price feed\naddresses, source eight, or\nmaybe we'll go back to source\nwe'll maybe we'll check in V\nsix.\nLooks like we could find some\nstuff and look around and we\nprobably copy paste all this\ncode, but it really seems like\nkind of a huge pain in the butt\nto have to copy all this code.\nNow we absolutely could we copy\npaste the code in here, but\nwe're gonna do something a\nlittle bit more clever. So the\nchainlink repo actually comes\nwith some mocks. If we go to\ncontracts, SRC V 0.6 tests They\nactually have a mock v3\naggregator dot soul in here that\nwe can use as our mock. So we\ncan copy paste everything, but\nwe'd have to revamp a little bit\nof it because it's doing some\ndot dot stuff. It's talking to\nother contracts that are locally\nin this file structure that are\nnot going to be in our file\nstructure. So instead though,\nwhat we can do is we can use\nthis node modules package to our\nadvantage, we can just say\npragma, solidity, carrot zero,\npoint 6.0, we'll use the same\nversion that that package is\ndoing. And then just do import\nat a chain link slash contracts\nslash SRC slash v 0.6. Slash\ntests slash mock, B, three egg,\nReg, gay tore that soul. And\nthen we'll add, and then of\ncourse, we'll add spdx, license\nidentifier, MIT. And boom, this\nis actually all we need. If we\njust import the code like this,\nremember, this is exactly the\nsame as copy pasting this\ncontract into our project, of\ncourse, with this path resolve\nto where it actually is in our\nnode modules. Now, actually, I\ncan run yarn hardhat compile,\nand it will also compile this\ncontract. Except for of course,\nwe have an issue, hey, compiler\nversions don't match. Right?\nWhat's What's up with that now,\nyou're going to get into\nsituations where you will be\nworking with contracts that are\nnot the same version of solidity\nas you why well because\ncontracts keep being deployed\nall the time. And there are a\nton of contracts that are in\nversion 0.4, solidity,\n0.5 0.678, and probably 910, or\n15 billion, or however many\nsolidity versions will come to\nbe. So in our config, in our\nhard hat dot config, when you\nscroll to the bottom, we can\nscroll to where we're defining\nour solidity version. And we can\nactually add multiple solidity\nversions, so that our compiler\ncan compile multiple versions of\nsolidity. To do that, we'll say,\nso Lyd, did T. And we'll turn it\ninto an object here, we'll make\nsure to put this comma here. And\ninside our solidity object,\nwe'll put compilers and we'll\nhave a list of compilers. Our\nfirst one we'll say is version,\nzero, point 8.8. And we'll say\nour second one is going to be\nversion 0.6, point six, and then\nwe'll go ahead and save that.\nAnd it looks like mine wanted to\nformat it like this, which is\nfine. Now, we can go ahead,\nrerun, yarn, Hardhead, compile,\nand boom, compiled five solidity\nfiles successfully. This means\nthat our Mark V aggregator\nshould also have been compiled.\nAnd if we look in artifacts, at\nchain link, do indeed see this\nat chain link slash contract\nslash SRC bid, and a v 0.6. In\ntests, we see this mock\naggregator dot soul, which has\nbeen compiled. Awesome. So now\nthat we have our mock contract\ncompiled, we now have a contract\nthat we can use to deploy a fake\nprice feed to a blockchain. So\nhow do we actually do this?\nWell, it's going to be the exact\nsame way that we deployed the\nFunmi contract. But we're going\nto add a little if statement in\nhere, we don't want to deploy\nthis mock contract to a test net\nor a network that actually has a\nprice feed on it, we could just\ndo something like if chain ID\ndoes not equal, you know, some\nchain ID, then deploy marks,\nright. And then this is kind of\npseudocode. Obviously, this code\nwon't actually work. But\ninstead, what I like is I\nactually like to specify which\nchains are going to be my\ndevelopment chains, which chains\nare going to be the one that I\ncan deploy these mocks to, in my\nhelper, hard hat config, I'll\ndefine these chains. So I'll say\nconst, development chains,\nequals, and then I'll just say\nhard hat, and local host. I'll\nexport these. And back in my\ndeploy mocks, I'll import these\nwith const. Development chains\nequals require dot dot slash\nhelper Hardhead config. And now\nI'll say if development chains\ndot includes chain ID. This\nincludes keyword basically is a\nfunction that checks to see if\nsome variable is inside an\narray, then we're gonna go ahead\nand deploy Max, and which is\nwhat we want to do. So we'll do\nlog, which we're getting from\ndeployments, which is basically\nconsole dot log. And we'll say\nlocal network detected,\ndeploying mocks.\nAnd we'll do a weight ploy, and\nwe'll deploy our new mock v3\naggregator mock v3 aggregator\nwill do a comma. There a little\ncolons here. If we want to get\nreally specific, we can say\ncontract v3 aggregator which\nwe're kind of already saying\nwe'll say from deployer We'll\nsay logging is going to be true.\nAnd then we need to pass some\narguments, we need to pass the\nconstructor parameters for the\nmock v3 aggregator, which are\nwhat? Well, let's go to docs\nchain to link to find out. Or\nyou can also just go to Node\nmodules chainlink, SRC V 06,\ntests, and then all the way down\nto mock V three, aggregated out.\nSo where you could also find the\nconstructor in here, whatever\none you like better, sometimes I\nfind it easier just to read\nGitHub Ctrl plus F or Command\nplus F for constructor. We see\nit takes a decimals and an\ninitial answer. And if we read\nthrough the code, we'll learn\nthat the decimals object is\ngoing to be equivalent to the\ndecimals parameter is going to\nbe equivalent to this decimals\nfunction and the initial answer.\nAnd the initial answer is\nbasically just going to be what\nis the price feed starting at,\nwe actually get to pick the\nprice of the price feed, which\nworks out really well, because\nthat works out great for\ntesting. I usually like to\ndefine the decimals and the\ninitial answers somewhere\noutside of this function so that\nI can access it later. One good\nplace you can add it is once\nagain in our helper Hardhead\nconfig.js. So I might do const\ndecimals equals eight. And then\nconst initial answer. Answer\nequals, and we'll do 2000. So\nsince we have a decimals, we'll\ndo 2000 And then 123456788\ndecimal places, and then we'll\nexport these as well. Export\ndecimals, and export initial\nanswer. We could of course, just\ndo you know, const decimals\nequals eight at the top and then\ninitial answer and then use them\ndown here. But I like to do it\nlike that. So Conce. So now we\nhave to import them in here.\nconst development chains. It's\nalso grabbed decimals. It's also\ngrabbed initial answer, we'll\nsave it. We'll take a look back\nat the constructor looks like\nit's decimals first, initial\nanswers second. So in our\narguments, we'll do decimals\nfirst, initial answers second,\nand tada. And then we will be\nall done that we'll do a quick\nlog box deployed. And then I\nalso like to do kind of like a\nbig line at the end of all of my\ndeploy scripts just to be like,\nhey, that's the end of this\ndeploy script. Anything else\nafter this is going to be a\ndifferent deploy script. All\nright, great. Now our deployed\nmocks script is actually done.\nBut our deploy Funmi script\nisn't quite done. Is there a way\nthat we could run only our\ndeploy mock script? Well, yes,\nthere is. Great, thanks for\nasking. What we can do at the\nbottom of our deploy mock script\nis we can add a module that\nexports dot tags, equals, and\nwe'll say all and marks. Now\nwhat we can do is if we run\nyarn, hard hat deploy, we can\nadd this flag dash dash tags.\nAnd it will only run the deploy\nscripts that have a special tag.\nSo we'll run our mocks tag,\nwhich means it'll only run our\ndeploy mock script. And, and\noops, actually, in our helper\nconfig development chains is\nactually hard hat and localhost.\nAnd I said, we're going to try\nto do with the chain ID, sorry,\nwe're going to do this, we're\ngonna do development chains dot\nincludes network dot name.\nBecause our helper config is\nusing names and not chain IDs,\nso if development chains that\nincludes that network the names,\nthen we're gonna go ahead and\ndeploy the mocks. So let's go\nahead and run this yarn here and\nhit Deploy dash dash tags,\nmocks. And perfect we do indeed\nsee our mocks getting deployed\nhere. This log true means that\nit's going to spit out stuff\nlike this. It'll say contract,\nit's deploying, it'll say the\ntransaction it's doing and it'll\nsay where it was deployed with\nhow much gas and awesome This\nmeans our deployed Mach script\nis working perfectly. So now we\nhave our deploy mocks script\nworking perfectly. So how do we\napply that back to our deploy\nFunmi script? Well, we're gonna\ndo the exact same thing here.\nInstead of making eth USD price\nfeed address constant variable,\nwe're gonna say let at USD price\nyou'd variable so that we can\nactually update it. And we'll\nsay, if development chains dot\nincludes network dot name, what\nwe can do with hard hat deploy\nis we can just get the most\nrecent deployment using a\ncommand called literally get. So\nwe'll say const. eth USD\naggregator equals await\ndeployments dot get. And then\nthe name of the contract that we\ndeployed Mach v3 aggregator, and\nif you wanted to just do get\ninstead of deployments dot get,\nwe absolutely could, just by\ndoing it like this. Those are\nexactly the same. So we'll get\nthe address like this and then\nwe'll say eth USD price feed\naddress equals that eth USD\naggregator contract dot address.\nAnd then if we're not on a\ndevelopment chain, if we didn't\ndeploy a mock, we're just going\nto do exactly what we did\nbefore. With using the network\nconfig. Oh, my goodness. Now,\nnow that we've done all of these\nsteps, let's add a little log\nthing at the bottom here with\njust a bunch of hyphens. Now, we\nshould have a very robust script\nto flip between a local\ndevelopment chain, a test net\nchain, a main net chain, and\nallow us to deploy literally\neverywhere without changing any\nof our solidity. And then we\njust take this, this eth USD\nprice feed address and stick it\ninto logs here. And then at the\nbottom, we can do module dot\nexports, dot tags equals and\nthen we'll just do all and then\nwe'll call this one Funmi. Oh,\nnow moment of truth. If we did\nall this, right, we should just\nbe able to run yarn, hard hat\ndeploy. And it should work on\nour local chain, our hard hat\nchain. And then it should also\nwork on any test net that we\ngive it. So let's give this a\ntry. Yarn, Hardhead deploy.\nLet's see if this works.\nAwesome. And we got this all to\ndeploy locally to our Hard Hat\nNetwork, we can see that we went\nahead and we deployed mocks, we\ndid our little underline here.\nAnd then we deployed Funmi\ndeployed at this address with\nthis much gas. Now, what are the\nother awesome things about hard\nhat deploy? When we run our\nlocal blockchain, our own\nblockchain node, hard hat deploy\nwill automatically run through\nall of our deploy scripts and\nadd them to our node. So now if\nI run yarn, hard hat node, we're\ngoing to spin up a new\nblockchain node, but it's\nalready going to have all of our\ndeployed contracts on it. So\nevery time we spin up a local\nnode, now it's going to come\nautomatically packed with the\ncontracts that we want on it. So\nwe are going to show us doing\nthis on a test net on Rinkeby.\nBut before we actually test it\non Rinkeby, I'm going to add a\nlittle bit of the auto\nverification piece in here as\nwell, because we did that in the\nlast lesson. And we wanted to\nshow how to do it in hard hat\ndeploy as well. So right after\nwe deploy our Funmi, we can do\nsomething similar here, we'll\nsay, if developer chains\nincludes network dot name, we'll\nsay if developer chains doesn't\ninclude network dot name,\nbecause we don't want to verify\non a local network. So we'll say\nif not development chains dot\nincludes network dot name, the\nexclamation mark, aka the bang\nmeans not when we're talking\nabout booleans. So we're saying,\nif the name of the network isn't\na development chain, we want to\ngo ahead and verify and same as\nlast time. And if process dot e\nNV dot ether scan API key,\nthen we're going to go ahead and\nverify. Now before we had our\nverify code, right in our deploy\ncode, we're gonna do something a\nlittle bit different here.\nInstead of having our verify\ncode in our deploy scripts here,\nwe're actually going to create a\nnew folder called utils, which\nstands for utilities. And this\nis where we're going to add\ndifferent scripts that we can\nuse across different\ndeployments. Because let's say\nwe have 50 Deploy scripts, we're\nnot going to make 50 Deploy\nfunctions, we're just going to\nadd them to our utils folder,\nand in our utils folder, or\ncreate a new file called verify\ndot j s, we're going to add that\ncode from our last project in\nhere. So if you want, you can go\nahead copy paste from our last\nproject over to this one, or you\ncan pause the video to type it\nout yourself. Since we're using\nthe run command here, we're\ngonna do const run equals\nrequire RT hat. And then at the\nbottom, we're going to do module\nexports. Exports equals verify.\nNow that we have a verify script\nin our utils folder, back in our\ndeploy Funmi we're going to say\nconst. Verify equals require dot\ndot slash utils. Slash verify.\nAnd since now in our verified\nJas, we have a lot of this\ntrycatch stuff in here, we can\njust do a wait. Verify and a\nverify once again takes a\ncontract address and a list of\narguments. We'll say await\nverify, fund me dot address and\nthen the list of arguments. To\nmake the list of arguments\neasier to put in. You can go\nconst args, equals and then\nwe'll just stick our eth USD\nprice feed in here and then\nreplace this with args and then\ntake this args and pop it on\ndown into the second parameter\nhere. All right, great. Now\nlet's go ahead and deploy this\nto With the Rinkeby test net,\nand what do we need to deploy\nthis to the Rinkeby test net?\nWell, let's jump into our hard\nhat config first. And let's\nclean this up, we don't really\nneed this accounts task, so I'm\njust going to delete it, I don't\nreally need this comment. So I'm\ngoing to delete this too. And\nlet's jump into the network\nsection, we're not going to be\nworking with ropsten. So we're\ngonna go ahead and dump that. We\nare however, going to be working\nwith rink B, the URL is going to\nbe that same Rinkeby RPC URL. So\nwe're going to define that up\nhere, like we did before. And if\nyou want to copy paste from your\nlast project, feel free to do so\nyou can also follow along with\nme or fastforward me the counts\nis going to be the same. I'm\ngoing to go ahead and just copy\npaste the gas reporter with what\nwe had from before. So we're\ngoing to add this constant corn\nmarket cap API key equals\nprocess dot EMV dot corn market\ncap API key. Do the same thing\nwith the ether scan API key\nLicious add everything in here.\nNow. We have our ether scan\nsection in here already, we're\ngonna have our gas reporter be\nfalse, because I don't really\nfeel like using it right now.\nAnd then finally, we're going to\nadd one more thing in here.\nRemember how in our last\nproject, before we actually\nverified we waited some block\nconfirmations. That way ether\nscan could make sure to catch\nup. Well, we can do the exact\nsame thing in here in our hard\nhat dot config, we can add a\nsection for each test net for\nhow many blocks we want to wait,\nI'm going to add block\nconfirmations of six. Now back\non our deploy Funmi. In a new\nsection, I can add wait\nconfirmations of network dot\nconfig. That block on for\nmotions, or one is or one means\nif no block confirmations is\ngiven in our Hardhead dot config\nwill just wait for one block.\nAnd again, the reason we want to\nwait for approximately six block\nconfirmations is we want to give\nether scan a chance to index our\ntransaction. And I added a chain\nID 42 when it should be for my\nmistake. And of course, we're\ngoing to need our dot env file,\nwhere we add all of our stuff\nfrom the last session, the RIP\nERP CRL private key ether scan\nAPI and then coin market cap\nAPI. All right moment of truth.\nLet's try this out. If we run\nyarn Hardhead deploy dash dash\nnetwork Rinkeby. It should not\ndeploy any marks because we have\nthis if statement in our mock\ndeployment. But it should deploy\nour Funmi contract using the\ncorrect price feed address. And\nthen it'll go ahead and verify\nit. Since we're waiting for six\nblock confirmations, we can even\nbe super secure by adding dash\ndash tags and just running the\nfunding tag. But we're just\ngoing to do yarn hearted deploy\nnetwork Rigby. And let's see\nwhat happens. All right, and\nwe're deploying funding. And we\ncan see the transaction that we\nhave for fun me, this is that\nlogging feature, we have log is\ntrue for deploying Funmi. So it\ngives us the transaction once it\nhas a transaction, and it will\ngive us the address once we have\nthe address. So we're going to\nwait six block confirmations for\nthis transaction to finish going\nthrough. Now we see we've\ndeployed this contract address\nwith X amount of gas. And now\nwe're running the verification\nprocess. While the verification\nprocess is running, we can pull\nup Rinkeby ether scan, paste our\naddress in here and see that we\nhave indeed created this\ncontract. And now it looks like\nwe've successfully verified the\ncontract on ether scan. So if we\nhit refresh, we can indeed see\nthat the contract has been\nverified. Awesome. All right. So\nthis is fantastic. Our deploy\nscript is looking great, we're\nable to deploy to a local chain,\nwe're able to deploy to a test\nthat and if we wanted to, we\ncould deploy to any network that\nwe wanted simply by updating our\nhard hat config, and then\nupdating our helper config. This\nis fantastic.\nGreat work so far. Now we're\nabout to jump in and level up\nour tests. But before we do\nthat, we're going to clean up\nour Funmi contract a little bit\nto make it look a little bit\nmore professional. And I'm going\nto talk about some of the syntax\nand some of the reasons why some\nconventions exist. We're not\ngoing to do this full force on\nall the projects moving forward.\nBut they are good to know and\nthey are good to keep in mind\nwhen moving forward and working\nwith our contracts. While we go\nthrough this we're going to\nlearn why some of these\nconventions exist including\nlearning a little bit of low\nlevel solidity. So don't skip\nthis part. When we get to later\nsections. We're going to be a\nlittle bit looser and not be as\nstrict with the code style\nguides but That's basically what\nwe're gonna go over now. And for\nnow, you might see this event\nfunded thing here, please just\nignore that for now, in an\nearlier take, I'd introduced the\nevents much earlier. And now\nwe're actually going to learn\nabout events a little bit later\nin the course. So please ignore\nthat event funded for now. So\nlet's go ahead and tweak a\nlittle bit of our contracts\nhere. Now what I'm talking about\ntweaking this to make it look\nprofessional, a little bit more\nprofessional, I'm talking about\nthe solidity style guide, there\nare some conventions for naming\nand ordering that we can follow\nto make our code look a little\nbit better. Now, like I said,\nthis is going to be a little bit\nmore optional, because it can be\na little bit verbose. And it\ndoesn't really make that big of\na difference. But it can\nincrease readability of your\ncontracts by a lot and make your\ncode look a lot nicer. So if you\nwant, you can go through this\nstyle guide to learn more about\nwhat kind of makes solidity look\nnice, and what makes it not look\nnice. But well, that's some of\nthese style guides in here,\nwe're not going to follow the\nstyle guide exactly to a tee.\nBut we are going to make some\nbest efforts to make our code\nfollow the style guide, we've\ngot a link to the style guide in\nthe GitHub repository for this\nsection, we can read some more\nabout the layout. But the main\nthing we want to look at is this\norder of the layout, we want to\nstart with our imports with our\npragma statement, our imports,\ninterfaces, libraries, and then\ncontracts. And then inside each\ncontract type declarations,\nstate variables, events,\nmodifiers, and functions. So\nlet's go back here and make sure\nthat we're up to speed, we want\nour pragma first. Alright,\nawesome, we did exactly that,\nthen we want our imports. Okay,\nawesome, we have those too.\nSomething that's not in the\nstyle guide is going to be error\ncodes, which we definitely want\nnext. So next is going to be\nerror codes. Now this is where\nwe're going to bump into one of\nour first updates here. As of\nrecent, it's sort of becoming a\nbest practice to add the name of\nyour contract, some underscores,\nand then the name of your error.\nWhenever you're running into an\nerror. This makes it a lot\neasier to understand which\ncontract is throwing the error.\nSo for this, we're going to say\nerror Funmi, two underscores not\nowner, then we're going to\nscroll down to the our revert\nand set it like this. This way,\nwhen if we ever run into this\nerror, we know that the error is\ncoming from the Funmi contract,\nnot from the aggregator v3\ninterface, or the price\nconverter or some other\ncontract. So that's how we want\nto write our error codes here.\nIf we had any interfaces or\nlibraries not imported, we would\nadd them here. But then finally,\nwe add our contracts. In this\nfile, we only have one contract\nhere. It's our Funmi contract.\nAwesome. Now the next thing we\nwant to learn about as far as\nstyle guides go is this thing\ncalled natspec. natspec stands\nfor Etherium natural language\nspecification format. And it's\nbasically a way of documenting\nour code inspired by Doxygen\nuses Doxygen style comments and\ntags to help document our code,\nyou can click the link here in\nthe solidity documentation to\nlearn more about Doxygen. If we\nscroll down in the\ndocumentation, here, we can see\nan example of using natspec.\nWhenever we have a contract or a\nfunction that needs\ndocumentation, we can add some\nsyntax that looks like this to\nit. So for example, if we wanted\nto add this to our code, we\ncould add a comment explaining\nthis funding contract to start a\npiece of natspec, you can do\nthree backslashes, or one\nbackslash, two stars, and then\nanother ending star here.\nEverything we put inside of this\ncomment section basically gets\nturned into a comment. For the\nstart of our contract, we'll do\nthe Add sign title to explain\nbasically, what this contract\nis, it's fun, we contract is\ngoing to be a contract\nfor crowdfunding, we'll add\nanother star. And we can add the\nauthor of it, which is going to\nbe your name, I'm going to put\nPatrick Collins, of course, then\nwe'll add a notice, which is\njust kind of a note to people we\ncan say this contract is is to\ndemo a sample funding contract.\nAnd we can also add apt Dev,\nwhich is a note specifically to\ndevelopers. And we can say this\nimplements price feeds as our\nlibrary. The reason that we want\nto add these tags here is\nactually because we can use the\nnatspec to automatically create\ndocumentation for us if we\ndownload so we can actually run\nsolc dash s user doc dash dash\ndev doc, and the name of our\nfile to automatically generate\ndocumentation. So this is also\nreally helpful for automatically\ncreating documentation for other\ndevelopers who interact with the\nprotocol later on. You can use\nthis natspec For as many or as\nfew functions as you'd like.\nMost of us probably aren't going\nto be making documentation. So\nwe really just want to follow\nthose guidelines if we think\nsome function or some section of\nour code is a little bit tricky\nfor other developers. Now that\nwe're inside of contract, we can\nfollow the order of our\ncontract. We're first going to\nstart with type declarations\nwhich we don't really have any\nexcept for the fact that we're\nusing our price converter for\nthe UN 256 type. Okay, great.\nYou Next, after our type\ndeclarations, we're going to do\nstate variables. And in this\nstate variables section, this is\nwhere we're actually going to\nchange the name of some of our\nstate variables. So we'll do a\nlittle common here state\nvariables. Now in the solidity\nstyle guide, kind of adhere to\nthe naming styles, we use upper\nand lowercase, we use total caps\nwith underscores here. However,\nthese naming variables are going\nto change in the future in this\nsection. And if you're following\nalong with the GitHub repo\nassociated with this course,\nthese are going to be actually a\nlittle bit different than what\nyou see. However, for now, we're\ngoing to leave them as they are,\nbecause the reason why we're\ngoing to change them isn't going\nto be quite clear yet. Don't\nworry. So these names are going\nto change soon, but not yet.\nAlright, after state variables\ncomes events, and modifiers. We\ndon't have any events, but we do\nhave a modifier. So we'll copy\nthis. And actually, we'll delete\nthis comment here. And we'll\npaste our modifier here. Oh, and\nit looks like looks like we're\nnot auto formatting here. So\nwe're going to uncomment\nimmutable actually, so that it\nautomatically auto formats.\nOkay, great. We're out of\nformatting now. And Cool.\nAlright, so now we have our\nmodifiers. Next, we have right\nhere, and then we have all of\nour functions. Great. We\nactually want to group our\nfunctions in this order that I\njust print here. So we want the\nconstructor which we have\nreceived and fall back, we do\nhave fall back and receive. So\nwe're going to actually copy\nthose and delete this comment.\nWe're gonna stick those veterans\nHeath here looks like receive\ngoes first. So we'll put that\nhere. Then external functions,\nthen public, internal, private.\nSo we have public public. And\nthat's it. And then we can\ndelete this part down here.\nOkay. Cool. And if we want, we\ncan do that syntax up here from\nthe net spec for our functions.\nFor example, for fund it, we\ncould even just copy paste, we\nwould remove title, we would\nremove author, and we just say\nadd, notice, this function,\nfunds this contract. And we can\neven leave a little dev thing\nhere to talk about it. Now if we\nhave parameters, you can do apt\npuram. And say like what the\nparameter is. And then if we\nhave returns, we can say\nreturns, or returns and then\nwhat it returns for the\ndocumentation. Since this\ndoesn't have any parameters in\nhere, and doesn't return\nanything, we can just leave it\nlike this. And great, we've just\nrevamped our contract here to\nmake it a little bit more nicely\nformatted. Great job. Now, like\nI said, we actually are going to\nchange the names of our state\nvariables, and we're going to\nadd some functions in here and a\nlittle bit. So if we're\nfollowing with the GitHub repo,\nthe state of the contract right\nnow is going to look a little\nbit different. But it'll make\nsense why change this up in a\nlittle bit.\nAlright, so now that we've\ncleaned this up, we've got to\ndeploy marks, deploy Funmi.\nLet's go ahead and start writing\nsome tests. And after we write\nthese tests, we're actually\ngoing to run that gas estimator\nand using that gas estimator,\nwe're gonna go back, and we're\ngoing to update this contract\none more time to make this even\ncheaper to use and work with.\nAnd remember, that's going to be\none of the advantages of writing\nthese tests is how we can\noptimize our contracts to be\neven faster, more gas efficient,\netc, we want to make sure that\nwe write really good tests, and\nthis is going to be one of our\nfirst jumps into these more\nprofessional test setups. So\nwe're going to jump into our\ntest folder, we're going to\ndelete this sample test.js. In\nour last section, we went over a\nreally minimalistic test, which\nis great. However, when we get\nbigger and bigger projects,\nwe're going to want to start\ntesting more and more different\nthings, we're going to get more\nand more into at least two\ndifferent types of testing. So\nif we cd into our test folder,\nwe're going to make one\ndirectory called staging. And\nthen we're going to make another\ndirectory called unit. And now\nif we look in our test folder,\nwe now have a staging folder,\nand a unit test folder. Now\nwe're going to talk about two\ndifferent types of tests. The\nfirst one is going to be\nsomething called a unit test.\nNow what is a unit test? Unit\ntesting is a software testing\nmethod by which individual units\nof source code are tested.\nBasically, what we want to do is\nin our contracts, we want to\ntest minimal portions of our\ncode to make sure that they work\ncorrectly. Then once our small\npieces of the test work, we want\nto do a staging test or maybe an\nintegration test. This might be\nwhere we run our code on a test\nnet or some actual network. You\ncan think of a staging test,\nit's kind of the last stop\nbefore you deploy to a main net.\nThey're not always 100%\nnecessary, but they can be\nreally, really helpful.\nRemember, we do want to be\nconscientious of how much we use\nour test nets, but we absolutely\nwould 100% want to make sure\nthat everything works locally\nand that we unit test and we run\nall of our code locally. Then we\ncan use staging tests on an\nactual test net to make sure\nthat our code will work with\nactual other contracts. Now unit\ntests can be done with local\nHard Hat Network or a forked\nHard Hat Network, we'll talk\nabout this for tar Hat Network\nvery soon, right, now, let's\nbuild these unit tests, these\nunit tests are going to be\nbasically what we saw in our\nlast section. So let's go in and\nlet's jump in and write some of\nthese unit tests. So let's\ncreate a new test, we'll call it\non me dot test dot j, s. And\nwe'll start making our tests in\nhere. Now, we did test\npreviously in our last section,\nbut our tests here are going to\nlook a little bit differently,\nwe're actually going to use\nhardhat deploy, to automatically\nset up our tests as if both of\nthese deployed functions had\nbeen run. So let's go ahead and\nget this started. So we're still\ngoing to do that same setup that\nwe're gonna do describe, we're\ngonna say fund me. And this is\ngoing to have that async\nfunction like so. And in here,\nwe're going to have a before\neach, and we're going to have\nsome hits and some describes and\neverything. Now since we want to\nunit test this, we're gonna go a\nlittle bit heavier on the test\nhere, and then with our last\nproject, but in the future,\nwe'll go a little bit lighter\nwith some of the tests. So let's\nget started. If we run yarn\nHardhead test right now, we're\ngonna get zero passing. Now, if\nwe run yarn hardhat coverage,\nwe're gonna get something that\nlooks like this, saying, Hey,\nyou're missing a lot of stuff.\nSo let's try to cover some more\nlines with our tests. And one\nway we can do that is actually\nwe can group our tests based off\nof different functions. So let's\nhave our first set of tests be\naround our constructor. To do\nthat inside of our first\ndescribe, we can add another\ndescribe, have this describe the\njust the constructor, this\nlarger scope will be for the\nentire Funmi contract. And\neverything inside this one will\njust be for the constructor. So\nthis will also be an async\nfunction. And these tasks will\nbe just for the constructor. But\nbefore we even work on this\ndescribe, we probably want to\ndeploy our Funmi contract. So\nlet's learn how to do that. So\nwe'll do a before each, which\nwill be an async function. And\nwe're going to deploy our Funmi\ncontract using hard hat deploy.\nSince we use hard hat deploy,\nour Funmi contract will come\neven with our mocks and\neverything. So above the before\neach,\nlet's do let me HDMI. And then\nhere, we're going to deploy\nFunmi, where we're going to\ndeploy our Funmi contract is\nfirst by pulling in our\ndeployments object from Harnett\ndeploy. So we'll do const\ndeployments equals require\nhardhat. And this deployments\nobject has, has a function\ncalled fixture with fixture does\nis it allows us to basically run\nour entire deploy folder with as\nmany tags as we want. You'll\nnotice I added this alt tag in\nboth of our scripts. This means\nthat in this deployment stuff\nfixtures, it's gonna be a wait\ndeployment of fixtures. If I run\naway deployments dot fixture,\nI'll run through our deploy\nscripts on our local network and\ndeploy all of the contracts that\nwe can use them in our scripts\nand in our testing, and we can\ndeploy everything in that deploy\nfolder with just this one line.\nisn't that helpful. Now, once\nall of our contracts have been\ndeployed, we can start getting\nthem will say fund me equals\nawait ethers, and we'll pull an\nether some hard hat as well. dot\nand this is where hard hat\ndeploy is helpful. Again, hard\nto deploy rapt ether is with a\nfunction called Get contract,\nthis get contract function is\ngoing to get the most recent\ndeployment of whatever contract\nwe tell it. So we'll say get\ncontract of fun to me. So this\nwill give us the most recent Lee\ndeployed Funmi contract in just\nthis one line. And now Funmi\nwill be equal to this line here.\nNow we're going to make a bunch\nof transactions on our Funmi. To\ntest it. Of course, we can also\ntell ethers which account we\nwant connected to fund me. So I\ncan say const deployer equals\ngoes away get named accounts,\nexactly like we did in our\ndeploy scripts. And then we just\nneed to import it from our tap\nin our deploy scripts we\nimported get named accounts\ninside of our input parameters\nfor our deploy function.\nRemember getting named accounts\nand deployments was abstracted\nfrom if we look up here, from\nthe hard hat runtime\nenvironment, and like I said,\nthe hard hat runtime environment\nis basically the same thing as\nhard hat. So we can just go\nahead and import it like this,\nactually like this. Because we\nactually need to abstract just\nthe deployer from getting named\naccounts. And now what we can do\nis we can connect our Deployer\nto our Fund Me account. So\nwhenever we call a function with\nfund me, it'll automatically be\nfrom that the player account,\nwhich is great. Another way you\ncan get different accounts\ndirectly from your heart had\nconfig. Is you could take const\naccounts equals await ethers dot\nget signers, ethers dot get\nsigners is going to return\nwhatever is in this account\nsection of your network. If\nyou're on your default network\nhard hat, it's going to give you\na list of 10 fake accounts that\nwe can work with you then of\ncourse, can do something like\nconst. Account one equals\naccounts. More correctly would\nbe account zero equals account\nzero and work like that. We'll\nleave that comment that out,\njust in case you need a\nreference to it in the future.\nOkay, great. So now we have our\nFunmi contract. Let's go ahead\nand write some tests for testing\nthe constructor. And we're\nprobably going to want to use\nthis deployer object down here.\nSo we'll do let deployer above.\nAnd we'll do something a little\nfinicky here. But we'll say\ndeployer equals Wait, get named\naccounts, dot Deployer. And\nwe'll just wrap this up so that\nwe can just grab this deployer\nobject and assign it to declare\nlike so. Now in here, we'll\ncreate our first test, we'll say\nit will say it sets the Agra\nGator addresses correctly. Comma\nwill have this be an async\nfunction. And we'll say const\nresponse equals await fund me\ndot, let's get this price feed\nhere, fund me dot price feed.\nAnd then we'll want to make sure\nthis price feed is going to be\nthe same as our Mk V three\naggregator since we're going to\nbe running these tests locally.\nSo we should get our mark three\nV three aggregator up top. Let's\ndo let mock v3 aggregate store.\nAnd we'll grab this address the\nsame way mockbee Three\naggregator equals await ethers\ndot get contract mockbee Three\naggregator comma, we'll connect\nthis one to the deployer as\nwell. So we'll want to say cert\ndot equals cert dot equal\nresponse comma lock v3\naggregator dot address. And of\ncourse we'll want to say const.\nAssert equals require gy. Import\nthat from DJI. Okay, cool.\nNow, let's go ahead and try this\nout. Yarn hardhat. Test. Oops, I\nspelled response wrong. Let's\ntry that again. Awesome. So this\nmeans that we are indeed\nassigning the price feed address\ncorrectly to the Mach v3\naggregator. Okay, great.\nAwesome. I think for now, that's\nall we really want to do for our\nconstructor. Now these two are\nkind of a nice to have, I showed\nthem more just to kind of demo\nwhat they look like, we're going\nto skip writing tests for them\nfor now. And we're actually\ngoing to go ahead and delete\nthem directly from the contract.\nIf you want to go ahead and\nwrite some tests for them and\nleave them in your examples for\nyour learnings. You absolutely\ncan pause the video and write\nsome tests for it if you choose\nso, but we're going to skip\nthem. Next though, we are going\nto move on to fund and running\nsome tests for fun here. So\nlet's go ahead and write\ndescribe fund. This will be an\nasync function. And in here,\nwe're going to do a number of\ntests. So if we're going to go\nline by line here, what's the\nfirst thing that we should look\nat? Well, we should look at this\nrequire line we should write a\ntest to see if this contract\nactually does fail? If not\nenough, eath is sent. So let's\ngo ahead and we'll say it fails,\nif you don't send enough eath\nhave this be an async function?\nNow, how do we test to see if\nsomething fails? Right now we've\ndone assert equals, but if\nsomething fails, we might run\ninto an issue. So for example,\nif I run await fund me dot fund,\nbut I don't pass any value to\nthis transaction. Let's see what\nhappens. I run yarn Hardhead\ntest. Well, our test is actually\ngoing to break VM exception.\nWhile processing transaction\nreverted with reason string, you\nneed to spend more eath. So our\ntests are going to break which\nis good. We want this to break.\nBut we want to tell our test\nthat this is okay. Right? Want\nto tell that this is okay. So\nthe way we can do this, and this\nis where our waffle testing\ncomes into play. With waffle and\nwith testing, what we can\nactually do is we can use the\nexpect keyword and expect\ntransactions to be reverted and\nfor transactions to fail. So\ninstead of using assert here,\nwe're actually going to run a\nwait expect fund me dot fun 2.2\ndot B, that reverted and we've\nactually even be more specific\nhere by saying to be reverted\nwith and then the exact reverted\nerror, you need to spend more\neath. Now if we run our tests,\noops expect is not defined. So\nwe need to import that from\nChai. Which chai is being\noverwritten by waffle, we see\nthat it does indeed Pass, which\nis perfect. So now we have a way\nto both assert things and expect\nthings to fail. Awesome, even\nwith the specific failure codes.\nPerfect. Let's write some more\ntests here. Well, we probably\nwant it to correctly update this\ndata structure. So we could say,\nit updates the amount funded\ndata structure, it's going to be\nan async function. In here,\nwe're going to need to call fund\nv dot fund. However, we're going\nto need to actually pass some\nvalue with this transaction. And\nfor now, we'll just hard code\nthe value that we're going to\nsend, say const. Send value is\ngoing to be\n112345 678-910-1234 5678, which\nis going to be one eath. Another\nway we can write this though, is\nwe can use the ethers utility to\nmake this a little bit easier to\nread. Because all those zeros\nare kind of confusing, and it's\nhard to tell at first glance\nwhat this actually is. So we're\ngonna actually use ethers dot\nutils dot parse ether, one, this\nparse ethers utility converts\nthis one into that one with 18\nzeros, which makes life a lot\neasier. If you go to the ethers\ndocumentation, there's also a\nparts units function where you\ncan actually convert any unit,\neither ethers or Gwei. Or really\nwhatever you want to do, you\ncould convert any number to any\nother Aetherium you type. So\nthis is the set value that we're\ngoing to use for our fund. And,\nand this is definitely going to\nbe more than our minimum USD of\n50. So after we call this fun\nfunction, we'll say const\nresponse is going to be equal to\na weight, fund me dot address to\nMt funded address to Mt funded\nfor the deployer dot address.\nBecause remember, this is a\nmapping of each address and how\nmuch they've actually funded. So\nif we use the deployer address,\nit should give us the amount\nthat we actually sent. So now we\ncan run assert dot equal\nresponse.to string, right,\nbecause this response is going\nto be the big number version of\nhow much has been funded by that\naccount. And that should be the\nsame as our send value.to\nstring. Since send value, our\none should be the exact same as\nthe amount that we funded, we\ncan run just this one test, or\nrunning yarn, art hat, test,\ndash dash grep. And we'll put\nthis in quotes allow funded for\nthis amount funded line. And it\nlooks like we ran into an issue\nhere, because we don't need to\ndo deployed at address, we can\njust do deploy here. And great,\nit looks like we are indeed\npassing. Now if we even run yarn\nHardhead coverage will now see\nwe've got at least a little bit\nmore coverage here. It's still\nnot going to be great. But we\nhave much better coverage. We\nhave some statements, some\nbranches, and at least some\nfunctions covered. So this is\nawesome. Let's keep going. Are\nwe all done testing our fun\nfunction? Well, probably not.\nWhat else can we do with our fun\nfunction? Well, we're also\nadding funders to a funders\narray. So let's go ahead and\ntest for that. So it adds funder\nto array of funders has been an\nasync function. And we'll say\nawait fund mean that fund value\nis going to be send value. We'll\nsay const response equals await\nfund me dot calling the funders\narray at index zero. So this\nwill be funder equals await fund\nme dot funders zero. And then\nwe'll say assert dot equal\nfunder should be the same as the\nDeployer. So let's go ahead and\nrun this test. We'll hit up a\ncouple times. And we'll change\nthe GREP to under to array so\nthat it looks for this line. And\nperfect. It looks like that one\nis also passing. Great. So the\nmoney's coming through, the\nminimum amount is coming through\nand our data structures are\nbeing updated. Awesome. Now we\ncould be a little bit more\nverbose and do even more testing\nwith this fun function. But I\nthink for the most part, we've\ngot the gist, right. So now\nlet's go ahead and move on to\nthe withdrawal function. So\nwe're going to create a new\ndescribe or withdraw. This is\ngoing to be an async function.\nAnd let's see what the\nwithdrawal function does. Only\nthe owner of the contract is\ngoing to be able to get the\nbalance, get the money back. And\nwe're also going to reset all of\nthe amounts that each one of\nthese users is done. So let's go\nahead and do some withdrawing.\nNow in order for us to test\nwithdraw, we probably first want\nthe contract to actually have\nsome money and so what we can do\nactually is we can add another\nbefore each in the describe to\nautomatically fund the contract\nbefore we run any tests. So we\ncan say before each async\nfunction. We can say await, fund\nme dot fund. Value, send value.\nNow for all of our tests in this\nwithdrawal scope, we're first\ngoing to fund it with eath.\nLet's say it can withdraw,\nwithdraw eath. From a single\nfounder, this would be an async\nfunction. And this is going to\nbe a little bit longer test. So\nI'm going to set it up to be an\narrange, act and assert test. So\narrange act assert is just sort\nof a way to think about writing\ntests, you want to arrange the\ntest, then you want to act. And\nthen you want to run the\nasserts, and you'll see what I\nmean in just a second. So we're\ngoing to arrange this test,\nwe're going to set this test up,\nwe want to actually check that\nwe're correctly withdrawing the\nether from a single founder. So\nfirst, we're going to get the\nstarting balance of the\nfundraising contract and the\nstarting balance of the\nDeployer. So we'll say const.\nStarting under me, balance,\nequals await, fund me dot\nprovider, dot get balance, fund\nme dot address. So we're gonna\nstart with the balance of the\nfund V contract after it's been\nfunded with some eath. And we're\nalso gonna get costs start\nstarting, deploy your balance\ngoes await, fund me dot\nprovider, dot get balance of\ndeployed employer.\nSo we're getting the starting\nbalance of the Funmi, we're\ngetting to the starting balance\nof the employer so that we can\ntest later on how much these\nnumbers have changed based off\nof what happens when we call the\nwithdrawal function. Now that\nwe've done a little bit of\nsetup, we can actually run this\nwithdrawal function, we can do\nthe act here. So we're gonna say\nconst, trans action response\nequals await, fund me dot\nwithdraw. And then we can say\nconst, transaction receipt\nequals await transaction\nresponse. That Wait, one, and\nnow we should be able to check\nto see that the entire fund\nrebalance has been added to the\ndeployer balance. So now we can\nsay const ending fund me balance\nequals a weight on me that\nprovider dot get balance of\nUnreal dot address. Then we can\nsay const ending deployer\nbalance equals await, fund me\ndot provider dot get balance\nof Deployer. And now we can just\ncheck to see if the numbers work\nout here.\nSo we can say assert dot equal\nending fund me balance is going\nto be zero, right, because we\njust withdrew all of the money.\nSo ending funding balance should\nbe zero. And we'll say assert\ndot equal starting fund me\nbalance plus starting deployer\nbalance. So the starting funds\nthe balance plus the starting\nemployer balance should equal\nthe ending employer balance.\nSince we're grabbing whatever\nthe starting deployer balance\nstarted with plus the starting\nfund to be balanced, because we\njust withdrew all of the\nstarting fund, we balance that\nshould equal the ending deployer\nbots. Now a couple of notes\nhere, since starting Funmi\nbalance is calling from the\nblockchain, it's going to be of\ntype a big number, we want to\nuse big number dot add actually,\ninstead of the plus sign here,\njust because it'll it'll make\nworking with our big numbers a\nlittle bit easier. So instead of\nstarting Funmi balance, plus\nwe're gonna be starting from the\nbalance dot add. Like that. And\nthat should be good. One other\nthing about this, though, is\nthat when we called withdraw our\nDeployer did what our Deployer\nspent a little bit of gas. So\nthis actually isn't accurate. We\nactually also need to calculate\nin the gas cost, so we wouldn't\nneed to do dot add gas cost.\nWe'd also have to do.to string\nbecause big numbers are objects\nand so identities a little bit\nweird. So to test to see if\nthey're equal, we'll just make\nthem both strings. Now we don't\nhave gas costs. So let's figure\nout how to get the gas cost from\nthis transaction. So we can add\nit to Are any deployer bounce,\nso we can run this assertion\nhere. So what we can do is we\ncan actually find the gas costs\nfrom our transaction receipt.\nAnd I'm going to show you a\ncouple of phenomenal tricks you\ncan use with VS code. And if\nusing a different editor, then\ndon't worry too much about this.\nWhat we can do in VS code\nactually is create something\ncalled breakpoints. unverified\nbreakpoint file is modified to\nplease restart the bug session,\nor let's put it right here, put\nit right in this line after\ntransaction receipt is created.\nBut before ending Funmi belts,\nwhat this breakpoint does is it\nstops the script at this line,\nand allows us to drop into\nsomething called a debug console\nand see all the variables that\nare happening. At this time, we\nwant to look at the transaction\nreceipt and see if the total gas\ncost is in there. This is also\nincredibly helpful for dropping\ninto tests and dropping into\nscripts and seeing exactly\nwhat's going on that's wrong. So\nwhat we can do is we can move\ndown to this run into bug\nsection. And if it's not there,\nyou can hit additional views.\nAnd we can click this JavaScript\nDebug Terminal, which will\ncreate a new terminal in our\nterminal section. Now, what\nhappens here is if we run yarn,\nhard hat test, it'll run our\ntesting and everything. But when\nit hits this breakpoint, it'll\nstop. Currently, there is no gas\ncost. So we're just going to\ndelete this for now. So that we\ncompile and we work in\neverything. But if we run yarn\nHardhead test, see, it's gonna\nsay debugger has been attached\nto start running our tests. And\nit's going to stop on this line\nhere. And if we look in this\nvariable section on the left\nhand side, we can actually see a\nton of the variables that are in\nhere. And we can read a little\nbit more about what's going on.\nAnd if we go over to our debug\nconsole, we can type in things\nlike transaction receipt, and we\ncan see a ton of information\nabout that transaction receipt\nobject, what we're looking for\nis we're looking to see this\ntransaction receipt, which we\ncould look in the debug console\nor over here, if there's\nanything to do with gas in here.\nAnd it looks like there is\nthere's a gas used big number.\nAnd there's also an effective\ngas price. So the amount of gas\nused times the gas price is\ngoing to give us all the money\nthat we paid for gas here. So\nnow that we've figured out\nthere's a gas used and effective\ngas price variables in this\ntransaction receipt, which we\ncould have also found in the\ndocumentation here. However,\nsometimes it's even quicker just\nto find it out yourself what we\ncan do, we can exit the debugger\nby clicking this little thing\nhere. Go back to terminal will\ntrash can the JavaScript\ndebugger, we'll remove the\nbreakpoint. And we'll grab those\ntwo variables we can pull them\nright out of that transaction\nreceipt object by typing const.\nYes, used comma effective gas\nprice equals transaction\nreceipt. So again, with this\ncurly bracket syntax, we can use\nthis to pull out objects out of\nanother object. And now that we\nhave these two objects, we can\ncreate a const gas cost or total\ngas cost is going to be equal to\nthe gas used times the effective\ngas price. Which again, since\nthese are both big numbers, we\ncan use a big number function\ncalled dot mol to multiply them\ntogether. Now that we have this\ntotal gas cost, we can come down\nand we can say the ending\ndeployer balance plus that gas\ncost to string. Now the two of\nthese should be equivalent. I\nknow there's a lot of math that\nwe're doing in this section and\na lot of new things. So I want\nto just quickly rego over what\nwe just learned. So first off,\nthe font of the contract comes\nwith a provider, we could have\nalso done ethers dot provider\ndot get balance, but we're using\nfun v dot provider because we're\nusing the provider of the Funmi\ncontract. It doesn't really\nmatter what we use here. We just\nwanted to use this get balanced\nfunction of the provider object\nwhich gets us the balance of any\ncontract. We do the same thing\nwith starting deplore balance.\nThe reason that we needed the\nstarting balances is because we\nwanted to compare it to the\nending balances to see if all\nthe money went to the right\nplaces, we then call the\nwithdrawal function. And from\nthe transaction receipt, we\ngrabbed the gas used and the gas\nprice. If you want to debug your\nJavaScript code, you can add a\nbreakpoint like so go to run\ninto bug, open your debug\nJavaScript terminal, which is\ndifferent from your regular bash\nterminals. And when you run\nJavaScript commands in here,\nthey will stop where your\nbreakpoints are. Then you can\nread the different variables and\nsee where different things are.\nUsing that knowledge. We pulled\nout the gas use and effective\ngas price from the transaction\nreceipt and used it to get the\ntotal gas cost of this\ntransaction, we then got the\nending fund, we balanced the\nending deployer balance, and\nused all those variables to make\nsure all the money went to the\nright places. And we, we can\ncheck this by running yarn\nHardhead test dash dash grep\nwithdraw eath in quotes, since\nthere's a space here, and we can\nsee that our test does indeed\npass. Great job. If we didn't\nadd the gas cost here, and we\njust did.to string, we would see\nsomething like this, we would\nsee that the numbers are ever so\nslightly off, because we're not\nanticipating we're not\ncalculating the gas here. So we\nalways want to make sure we're\nusing the gas if we're doing\ncalculations like this. Now\nanother incredibly powerful\ndebugging tool that we're not\nreally going to go over here.\nBut it's important to know about\nbecause it can be really helpful\nis that you can actually use\nconsole dot log in your solidity\nwith hard hat. If you're inside\nof a heart hat project, you just\nimport hard hat slash console\ndot soul. And then right in your\nsolidity, you can do console dot\nlog, and then type pretty much\nwhatever you want. When you\nexecute these functions, similar\nto how we do a console dot log\nin JavaScript, those will\nactually console dot log out to\nyour terminal. Here's an example\nof if you run yarn, hard hat\ntest and you have those console\ndot logs, you'll see stuff like\nthis get printed out. So in\naddition to the Visual Studio\nCode debugger, importing hard\nhat slash console dot Sol, and\nusing console dot logs in your\nsolidity can also be an\neffective debugging strategy.\nFeel free to give this video a\npause, implement this in some of\nour contracts and try it out in\nour tests. So we tested that\nwithdrawing eath when there's a\nsingle funder works perfectly,\nlet's test withdrawing eath if\nthere are multiple funders, so\nwe'll do it, let's say allows us\nto withdraw with multiple\nfunders. Why would this be an\nasync function. And let's do\nthis await Funmi not fun, but\nwith a number of different\naccounts. So we can create a\nwhole bunch of different\naccounts of course, by saying\nconst accounts equals await\nethers dot get signers. And we\ncan loop through these accounts\nand have each one of these\naccounts call the fund function.\nAnd we're going to do this with\na for loop. So we're going to\nsay for let i equals we'll start\nwith the first index of the\naccounts because the zero with\nindex is going to be the\nDeployer. So we'll say let i\nequals one is going to be less\nthan let's say six. And we'll do\ni plus plus. And in here, we'll\nsay const. And me contract Funmi\nconnected contract equals await.\nAnd me dot connect two accounts,\nI, so we need to call this\nconnect function because right\nnow if we scroll up back to the\ntop, our Funmi contract is\nconnected to our Deployer\naccount. And anytime we call a\ntransaction with Funmi, the\ndeployer is the account that is\ncalling that transaction, we\nneed to create new objects to\nconnect to all of these\ndifferent accounts. So we're\ngonna say fund me connected\ncontract, which is now connected\nto one of these different\naccounts dot fund. And this is\nwhere we'll do value, send\nvalue. Or excuse me, we'll do\nawait. Great. So this is going\nto be our our range section. And\nthen same as we did above, we\nneed to grab those starting\nbalances. So we can just copy\nthat, those two lines and paste\nthat down here. Now we're going\nto move into act, I'm going to\ncall that withdrawal function\nagain. So let's say const,\ntransaction action response\nequals await and MI dot\nwithdraw. And we're going to do\nthe exact same thing as we did\nabove, getting the transaction\nreceipt and the gas costs so we\ncan get everything correct. Once\nwe've done the act, we move on\ninto assert. And we're going to\ndo some very similar things to\nwhat we did above, like this,\nfor example, this whole first\npart is going to be exactly the\nsame. We also want to make sure\nthe funders are reset properly.\nSo we'll make sure that this\nfunders array is reset properly.\nSo to do that, we can actually\njust check to see that if\nlooking at the zero with\nposition throws an error so we\ncan run a wait expect fund me\ndot get on me dot funder on me\ndot funders of zero. This should\nrevert so we'll say await expect\nFunmi dot funders dot two dot b\ndot reverted and then we want to\nloop through all these accounts\nand make sure that it makes sure\nor that in our mapping here, all\ntheir amounts are zero. So we'll\nsay, for I equals one is less\nthan six,\ni plus plus, we'll say assert\ndot equal. Wait, fund me dot\naddress to amount funded, of the\naccounts of I got address should\nbe zero. So we're making sure\nthat all of these mappings are\ncorrectly updated to zero. So\nlet's go and test this. So we're\nwithdrawing with multiple\nfounders, we're going to go back\nto our terminal, we're going to\nhit up, we're going to change\nthis GREP or this one. We'll see\nif this passes. And it does\nindeed, so this means that our\nwithdraw function works really\nwell even when there's multiple\nfunders and we can be happy and\ngo to sleep knowing that. Now\nthe other thing we absolutely\nwant 100% want to test is that\nour only owner modifier is\nworking, we want only the owner\nto be able to withdraw the funds\nfrom here. So we'll create a new\nsession, we'll say it only\nallows the owner to withdraw\nonly allows you to withdraw.\nThis will be an async function.\nAnd in here, we'll say const.\nAccounts equals ethers dot get\nsigners again. And we'll say\nconst attacker equals accounts\nof one. So we'll say the first\naccount will be some random\nattacker will connect this\nattacker to a new contract,\nwe'll say const attacker\nconnected contract equals await\non DB dot Connect. Attacker dot\naddress, excuse me a dot connect\nattacker. Since we're not just\nconnecting the address, we're\nconnecting the account which\nattacker is an account object.\nAnd then we'll do a wait expect\nattacker connected contract dot\nwithdraw dot two dot b dot\nreverted, they should not be\nable to withdraw. So let's go\nahead, we can even just copy\nthis whole thing if we want to\nhit up, we'll delete this\nsection here. We'll paste that\nin. And boom. This means that\nwhen some other account tries to\ncall withdraw, automatically\ngets reverted, which is what we\nwant. Now we can be more\nexplicit to make sure that the\ncorrect error code is being\nthrown, not just that it's\nreverted. Right, it can be very\nreverted because they sent ether\ndid it they did something weird,\nwe want to make sure it's\nreverted with our specific error\ncode. So right now we have this\nnot owner error code. But it's\nactually a best practice to put\nthe contract name to underscores\nand then your custom error. This\nmakes it a lot easier in the\nfuture when you have a ton of\ndifferent contracts, and you're\nnot sure where an error is\ncoming from. So we're going to\njust update this really quickly\nto be fund me underscore\nunderscore, not owner, now we\ncan do is now that we have this\ncustom error, we can say\nwithdraw that to be reverted\nwith, then we can add our custom\nerror in here. Now, if we rerun\nour test, with only allows the\nowner to withdraw, oops, we need\nto do a wait here. My mistake,\nwait a Thursday, get signers.\nAnd now let's try this again.\nAnd we are indeed passing\nPerfect.\nOkay, great. We have some basic\nunit tests here. And we're going\nto write some staging tests\npretty soon. But before we\nactually do that, let's go ahead\nand add the gas estimator. And\nwe'll see how much gas these\ncontracts in these functions are\ntaking. It looks like the\nHardhead gas reporter is already\nhere. So let's scroll down.\nWe'll do gas reporter true. And\nwe won't do coin market cap\nhere. And we'll just look purely\nat the GUI. So you can just\ncomment it out like that. Now\nrerun all of our tests. So we'll\nsay yarn, our test. And in doing\nso we're gonna get that that gas\noutput in that gas report dash\ntext here. So looks like all of\nour tests are passing, which is\nperfect. Now we can look into\nour gas report and see what's\ngoing on here. i Well, it looks\nlike the fundraising function is\ntaking a decent chunk of gas,\nthe withdrawal function, take it\nsome guests to we'd see the min,\nthe max and the average. Of\ncourse, we can see how much each\none of these contracts cost to\nactually output. We don't really\ncare about the MOQ aggregator of\ncourse, because we're never\nactually going to use that.\nLet's say we look at the average\ngas for these and we go hmm,\nthis looks like it's actually a\nlot more than what we originally\nexpected. Is there a way for us\nto make this a little bit cheap.\nIf we go back to our funding\ncontract, we look at our\nwithdrawal function. And we\nnoticed something, oh, there is\nactually a way to make this a\nlot cheaper. And it has to do\nwith something called storage\nvariables, or these global\nvariables that we've been\nworking with this whole time.\nLet me let me paint you a little\npicture here, we're gonna look\nat one of the first gas\noptimization techniques you can\ntake to drop these down. And it\nhas to do with an R Funmi.\nContract these state variables\nand how they're actually stored\nand how this contract actually\nkeeps track of all this stuff,\nthis section is going to be a\nlittle bit more advanced. So\nwe'll have a note here saying\nthat this is an advanced\nsection, if you want to skip\nover it, you can, because now\nwe're getting into gas\noptimizations here, this\ninformation still is really good\nto know. So if you want to skip\nit for now, and then come back\nlater, you absolutely can. But\nlet's talk about what happens\nwhen we actually save or store\nthese global variables. Okay,\nthese storage variables. Now,\neverything I'm about to go\nthrough is in the documentation.\nAnd there is a link to this, of\ncourse, in the GitHub repo\nassociated with this course,\nwhenever we have one of these\nglobal variables, or these\nvariables that stay permanently,\nthey're stuck in something\ncalled storage, you can think of\nstorage as a big giant array, or\na giant list of all the\nvariables that we actually\ncreate. So when we say we have\nsome contract called Son of\nstorage, and we have a variable\ncalled favorite number, we're\nbasically saying we want this\nfavorite number variable to\npersist, right, we saw in a lot\nof our examples, we had a\nfavorite number variable that we\ncan always call to see what this\ncontracts favorite number was,\nwell, the way it persists, is it\ngets stored in this place called\nstorage. A storage box is this\ngiant list associated with this\ncontract where every single\nvariable and every single value\nin the storage section is\nslotted into a 32 byte long slot\nin this storage array. So for\nexample, the number 25 in its\nbytes implementation is 000 with\na ton of zeros 19. This is the\nhex version of the yuan 256.\nThis is why we do so much hex\ntranslation, the bytes\nimplementation of a yuan 256.\nAnd each store saw increments\njust like an array starting from\nzero. So for example, our next\nglobal variable or next storage\nvariable just gets slotted at\nthe next slot that's available.\nSo bullions, for example, get\ntransformed from their bull\nversion two, their hex and we\nmodified our some bool variable\nto be true and X edition of the\ntrue Boolean 0x 001. Every time\nyou save an additional global\nvariable, or more correctly, one\nof these storage variables, it\ntakes up an additional storage\nslot. And what about variables\nthat are dynamic in length, or\nthat can change length? What\nabout something that's dynamic?\nWell, for dynamic values, like a\ndynamic array, or a mapping\nelements inside the array or\ninside the mapping are actually\nstored using some type of\nhashing function. And you can\nsee those specific functions in\nthe documentation, the object\nitself does take up a storage\nslot, but it's not going to be\nthe entire array. For example,\nmy array variable here at\nstorage, slot two doesn't have\nthe entire array in storage slot\ntwo, what has actually is just\nthe array length, the length of\nthe array is stored at storage\nslot two. But for example, if we\ndo my array dot push 222, we do\nsome hashing function, which\nagain, you can see in the\ndocumentation what that is, and\nwe'll store the number 222. At\nthat location in storage, the\nhex of 222 is 0x 0000 D, so it\ngets stored in this crazy spot.\nAnd this is good, this is\nintentional, because 32 Bytes\nmay not be nearly big enough to\nstore my array if our array gets\nmassive. And it wouldn't make\nsense for to put the elements\ninside the array at subsequent\nnumbers because again, the size\nof the array can change and\nyou're never going to be sure\nhow many subsequence that you\nneed. So for my array, it does\nhave a storage slot for the\nlength for mappings. It does\nhave a storage spot as well\nsimilar to array, but it's just\nblank. But it's blank\nintentionally so that solidity\nknows, okay, there is a mapping\nhere, and it needs a storage\nslot for attaching functional\nwork correctly. Now\ninterestingly, constant\nvariables and immutable\nvariables do not take up spots\nin storage. The reason for this\nis because constant variables\nare actually part of the\ncontracts byte code itself,\nwhich sounds a little bit weird.\nBut you can imagine what\nsolidity does is anytime it sees\nconstant variables name is it\njust automatically swaps it out\nwith whatever number it actually\nis. So you can kind of think of\nnot in storage is just a pointer\nto 123 and it doesn't take up a\nstorage slot. Well when we have\nvariables inside of a function,\nthose variables only exist for\nthe duration of the function.\nThey don't stay inside the\ncontract. They don't persist\nthey're not permanent. So\nvariables inside these functions\nlike new var and other var do\nnot get added to storage. They\nget added in their own memory\ndata structure. Which gets\ndeleted after the function has\nfinished running. Now you might\nbe asking, Okay, well, why do we\nneed this memory keyword,\nespecially when it comes to\nstrings, we saw before that we\nhad to say String memory. The\nreason we need it for strings is\nbecause strings are technically\nthis dynamically sized array.\nAnd we need to tell solidity,\nhey, we're going to do this on\nthe storage location, or we're\ngoing to do it into the memory\nlocation where we can just wipe\nit. arrays and mappings can take\nup a lot more space. So slowly,\njust wants to make sure Okay,\nwhere are we working with this\nis it storage is a memory, you\nhave to tell me, I need to know\nif I need to allocate space for\nit in our storage data\nstructure. And again, everything\nhere you can read in the\nsolidity documentation. Now, in\nthe GitHub repo associated with\nthis course, if you go to\ncontracts, we've actually got an\nexample contract section called\nFun with storage, where you can\nplay with and look at a lot of\nthis stuff. And we even wrote a\nlittle script called deploy\nstorage fun, where it'll print\nout the storage location of some\nof the different variables, feel\nfree to give it a run, if you\nwant to try a challenge anybody\nto write some functions that\nfind the storage slots of the\nelements of the arrays, and the\nmappings, and then find the data\ninside of those as well. We use\na function here called Get\nstorage app, which allows us to\nget the storage at any one of\nthese slots. And this is to\nreinforce that even if you have\na function as private or\ninternal. Anybody can still read\nit. Anybody can read anything\noff the blockchain. And you can\ntest it exactly what this if you\ngo ahead and get clone that or\ncopy paste the code yourself.\nYou can then run yarn part at\ndeploy dash test tags, storage.\nAnd you'll run the deploy script\nfor that storage.\nAnd you'll see printing out the\nlocation of storage in each\nstorage slot with a fun contract\nthat we made as an example. And\nyou might of course be asking,\nOkay, Patrick, why are you\ntelling me all this? We're just\ntrying to get this gas price\ndown? Why are you telling me all\nabout this storage thing? Well,\nthe reason I'm telling you all\nabout the storage thing. Anytime\nyou read or you write to and\nfrom storage, you spend a ton of\ngas. Remember I said when we\ncompile our code, we compile it\ndown to some crazy weird\nbytecode. Well, let me show you\non remix what this looks like.\nWe go to compliation details, we\ncan go to bytecode. And we see\nthis weird hex object zero,\nblah, blah, blah. But we also\nsee these things called op\ncodes. Now, this bytecode here\nrepresents these op codes. Each\none of these op codes represents\na small piece of everything in\nthis bytecode. And in fact, in\nour heart hat, we can go to\nartifacts, build info, and we\ncan see, we can see these op\ncodes in the build info, we can\ndo a command F or Control F for\nopcodes. We can see op codes for\ndifferent contracts. These op\ncodes represent what the machine\ncode is doing. And they\nrepresent how much computational\nwork it takes to actually run\nour code and do stuff with our\ncode. The way that gas is\nactually calculated is by these\nopcodes. There are a couple of\nlists here. But here's one that\nI'm going to use this EVM\nopcodes. And again, there's a\nlink to this in the GitHub repo\nassociated with this lesson.\nWell, if we scroll down, we can\nsee exactly how much it costs\nfor each one of these op codes.\nSo for example, anytime we add,\nit costs three gas, anytime we\nmultiply, that's five gas,\nsubtracting three gas, we have\nall of these op codes that cost\ndifferent amounts of gas in in\nour functions, here's kind of a\nsample contract. If we're doing\nadding, anytime we add it's\ngoing to cost three gas. Anytime\nwe save to memory, it's going to\ncost gas from some other\nopcodes. These op codes combined\nshow us how much gas we actually\nuse. Now, let's look at a lot of\nthese op codes and how much they\ncost three 510, three, three,\nbalance is 700. So getting the\nbalance is is a ton of gas.\nLet's keep going. Getting the\nsides of an Accounts code is a\nlot of gas copying and accounts\ncode into memory. But oh my\ngoodness, what is this save word\nto storage costs a ton of gas\nthat is 20,000 gas and s load\nload word from storage cost 800\ngas. These are two of the most\nimportant opcodes s load and s\nstore which stands for storage\nload and storage store. Anytime\none of these op codes fires,\nwe're spending 800 or 20,000.\nYou know, there's a big asterisk\nthere because that can change a\nlot. But we're spending a ton of\ngas anytime we work with storage\nas developers. Anytime we work\nwith some stuff in storage, we\nwant to go boy, this is about to\ncost me a lot of gas and the\nbest convention or making sure\nwe know that we're working with\na stored variable and we're\nabout to spend a lot of gas is\nto append an S underscore right\nbefore them which stands for\nstorage right So we're saying\naddress to amount funded is\ngoing to be a storage variable\nwonders is going to be a storage\nvariable. Owner is not going to\nbe a storage variable. It's\nimmutable. The best practice for\nimmutable variables is\nprefixing. It with an I\nunderscore constant values are\nalso not in storage. So for\nconstant values, we want to keep\nthem capslock, like that\naggregator v3 interface public\nprice feed. Yep, you know what\nthat is going to be a storage\nvariable. So we want to append\nan S underscore with it. So\nwe're going to do a little bit\nmore refactor, we've appended\nthese appropriately to update\neverything. So instead of owner,\nit's going to be I underscore\nowner, and as a developer will\nread this, and we'll go ah, this\nis going to be much cheaper than\na regular variable. Okay, that's\ngreat. I'm going to work with\nthis. This I underscore owner\nfor my modifier. Awesome. Is\nowner anywhere else in here?\nOkay, right in the constructor.\nI own underscore owner is\nmessage dot sender. Price feed\nis a storage variable. We should\nas developers, we should see the\ns underscore when reading this\nand go, Okay, we're spending a\nlot of gas to store this.\nPerfect. Okay, great. Let's keep\ngoing. Great. We've updated all\nthe owners. Okay, well, what\nabout address to amount funded?\nIn VS code? If you do Command F,\nor Ctrl, F, and you hit this\nlittle down arrow, you can\nactually find and replace all of\nthese address to amount funded\nwith s underscore address to Mt\nfunded. Hit it like that. And\nsince I updated one, I got a\nbackspace that one no. So now\nthese are all updated. Let's do\nthe same thing with s funders.\nLet's update everywhere. It has\nfunders just to be s funders.\nAnd we probably doubled up here.\nYep.\nLet's undo that. We already\nupdated all the AI owners. So\nnow it's updated all the price\nfeeds. So let's look for price\nfeed, we'll update it with ES\nprice feed. And then we probably\ndoubled up right here. So we'll\nundo that. Okay, great. Now that\nwe've updated everything in\nhere, we can scroll down and we\ncan oops, sorry, doubled up\nthere too. Sorry. We can we can\ngreen through our code and go\nokay, where are we reading and\nwriting to storage way more\noften than we probably need to.\nAnd that's when we get to this\nwithdrawal function, which seems\nrather suspect to reading and\nwriting to storage a lot. So\nlet's take a look at what we're\ndoing here. Okay, so first of\nall, I can see that we're doing\na for loop here. And every time\nwe do a for loop, we're just\nconstantly looping through all\nof this code. Every single time\nwe're doing a little compare\noption here we're saying, okay,\nis our funder index less than s\nfunders dot length? S funders\ndot length, this means the\nlonger our funders array is, the\nmore times we're going to be\nreading from storage, that's\nincredibly expensive. We're also\nrecalling this, oh my goodness,\nwe're reading from storage a lot\nand saving it to this memory\nvariable, and then updating our\nstorage variable with it. Wow.\nSo we're reading from storage a\nton here, and we're reading from\nstorage a ton here, okay, then\nwe have to reset our funders\narray, there's really no way\naround it. And that's pretty\nmuch it for our reading and\nwriting to storage, we could\nprobably create a withdrawal\nfunction, that's a lot cheaper.\nSo let's go ahead and create a\nfunction called cheaper\nwithdraw, function, cheaper\nwithdraw. That's going to take\nwhat we've just learned and make\na cheaper withdraw, that's much\nmore gas efficient. So we'll\nkeep this public payable. and\nhave it be only owner, we're not\ngoing to change anything there.\nBut what can we do for at least\nthis part here, we don't want to\nkeep reading from storage here.\nAnd we don't want to always have\nto keep reading from storage\nhere. We're like doubling up the\namount of storage we're reading\nfrom. So instead, what we can\ndo, we can read this entire\narray into memory one time, and\nthen read from memory instead of\nconstantly reading from storage.\nAnd that's going to make our\nlives a lot cheaper. So we can\ncreate an address array. Memory\nfunders equals s underscore,\nfunders. And now it's going to\nstart making sense why for\narrays and strings in our\nfunctions, it makes us say, hey,\nis this memory is a storage?\nWhat is this? And we're telling\nit, we want it to be memory\nbecause memory is going to be a\nlot cheaper. So now that we're\nsaving it into our funders, oh,\nand a quick note mappings can't\nbe in memory. Sorry. They're\njust too weird and too wacky. So\nflooding just doesn't let you do\nthat right now. But now that\nwe've saved our storage variable\ninto a memory variable, we can\nread and write from this memory\nvariable, much, much cheaper,\nand then update storage when\nwe're all done. So what we're\ngoing to do now is we're gonna\nsay for you into V six, fund or\nindex equals zero, and we're\ngoing to basically rewrite\neverything but just using this\nmemory array. instead. We're\ngonna say funder index is less\nthan funders dot length and\ninstead of s funders dot length,\nand then we're gonna say funder\nindex plus plus. And then in\nhere we're gonna do nearly\nexactly the same thing, except\nwe're gonna say address funder\nequals funders, using our memory\narray and not s funders have\nfunder index. And then we're\ngonna say s address to amount\nfunded. funder equals zero. So\nwe're resetting our funders\nmapping here, we're using our\nmemory variables instead, then\nwe're going to do the same thing\ns underscore funders equals new\naddress array of zero. And then\nwe're gonna do the same thing\nbool success, comma equals S\nowner, dot call value,\naddress this balance, and we're\ngoing to send it nothing and\nthen require success. Like that\nactually, sorry, Iona on a sonar\nnow that we have this function\nthat we think is cheaper, let's\ngo back to our test. And let's\nrun this same multi test here,\nbut with our cheaper function.\nSo I know this can be a little\nbit tricky to copy, paste, but\nlet's copy this entire massive\ntest. Let's come down here,\npaste it, and we'll change the\nname saying cheaper withdraw,\ntesting dot that done. And in\nhere in in this giant it here,\nall we're going to change is\nwe're going to change withdraw\nto cheaper withdraw, and the\nrest of the test is going to be\nexactly the same. So with that,\nlet's see if if we were\nsuccessful in making our\nwithdraw function cheaper with\ncheaper withdraw, we're gonna\npull apart our terminal now. And\nwe do yarn, art hat test, which\nis going to run our gas\nestimator because it's enabled\nright now. And of course, all of\nour functions have been broken\nbecause we renamed everything.\nSo we'll do a quick final\nreplace of funders, to change\nfunders to ask funders. And then\nwe're gonna change price feed to\nask price feed. And then do we\nhave owner anywhere? We don't\nhave owner or anywhere. We need\nto change this one. Address to\namount funded. Let's come in\nhere. Address to amount funded.\nS adderstone. well funded. What\nelse do we need to change price?\nWe price feed funders. Okay, I\nthink we changed everything.\nAlright, so let's try our test\nnow. Yarn Hardhead test. All\nright, great. Everything's\npassing. And we ran our cheaper\nwithdraw testing. So now, if we\ngo to our gas output here, our\ngas report, zoom out just a\nhair, we can see the difference\nbetween cheaper withdraw and\nwithdraw, we see something\nreally interesting. Here we see\nour cheaper withdraw on average\nwas actually more expensive than\nour regular withdraw. And the\nreason for this is because\nactually, if we go to our tests\nare cheaper withdrawal, we only\ntested on the multi withdraw. So\nwe had to reset many, many more\naccounts. But this was also\ntechnically its maximum as well.\nAnd if we compare the maximum of\nthe cheaper withdrawal, the\nmaximum of the withdraw, it\nlooks like the cheaper\nwithdrawal was indeed cheaper.\nAnd if we go to our hard hat dot\nconfig, and we add our API key\nback in, what we could even do\nis in our test, we could copy\nwithdraw eath from a single\nfunder, copy that, paste it in\nand just change withdraw to\ncheaper withdrawal, rerun it\nwith the key and now do yarn\nHardhead test, we can see\nexactly how many dollars we\nwould save if we ran this on the\nMatic blockchain. Now let's go\nback, we'll reopen up our gas\nreport. And we can see, in the\nminimum cheaper withdrawal was\nactually a little bit more\nexpensive. This actually does\nmake sense because if we look at\nfunding, if we only have to\nwithdraw when there was one\nfunder, well this loop only runs\none time. And our cheaper\nwithdraw will do the exact same\nbut it will have this this extra\nthing here of loading them all\nin, we see that the savings The\nmore people our funders in our\ncontracts. So automatic, we can\nsee we pretty much didn't save\nanything. But if I change this\none more time to eath run the\ntest again. Now we can see\npeople withdraw saved a few\ncents. This is how we can start\noptimizing our contracts will be\ncheaper and cheaper. And this\ntwo cents was just in the\naverage. It's not even comparing\nthe max to the max, which was a\nlot more gas than their\naverages. We have just learned\nan absolute ton here. Now, this\nnext part is going to make some\nof you mad because we're going\nto refactor our code one more\ntime if you don't want to\nrefactor it and you want to\nleave all your tests as s\nunderscores you absolutely can\nbut to other users using our\napplication. Dealing with this s\nunderscore is a little Little\nbit gross and actually can make\nour code a little bit more\nconfusing for those who use it.\nAnd additionally, right now all\nof our state variables are\npublic. And actually internal\nvariables and private variables\nare also cheaper gas wise. And\nwe don't need to make every\nsingle one of our variables\npublic, because anybody can read\nthem off the chain anyways. So\none more refactoring that we're\ngoing to do is we're actually\ngoing to set the visibility of\nthese to private or internal,\nbased off of whether or not they\nneed to be private or internal,\nand then we'll create getters at\nthe bottom of our function here.\nSo minimum USD, we can keep this\npublic because we want other\npeople to know what the minimum\nUSD of our contract is, without\nhaving to go right through\nstorage, the owner of our\ncontract isn't important for\nothers to know or other\ncontracts to know. So we can go\nahead and make this private, and\nthen at the bottom at a function\nget owner. That's a public view\nthat returns I owner, turns\naddress as funders, as funders\ncan be private as well. So at\nthe bottom, we're gonna say\nfunction, get funder, and we're\ngoing to pass a un 236 index,\npublic U, turns, address, return\nas funders of index, the address\nto Mt funded can also be\nprivate. So the bottom, we're\ngoing to create function, get\naddress to amount funded. And\nthis is going to take an address\nunder the public view returns,\nyou went to 56. And we're going\nto return amount funded of the\nfunder did this one we did this\none, we did this one. And then\nprice feed, function get price\nfeed. This is going to be public\nview as well, that returns\naggregate tour of the three\ninterface that's going to return\nso I'm just gonna price feed.\nOh, okay. The reason why we did\nthat is because we want to have\nthis s underscore so that we as\ndevelopers can know, okay, this\nis a storage variable, I want to\nbe very careful about how I\ninteract with this. But we don't\nwant people who interact with\nour code to have to deal with\nthis s stuff. And we want to\ngive them an API that makes\nsense, and that it's easy and\nreadable. So we add these getter\nfunctions at the bottom to do\nthat. And also changing the\nvisibility can save us some gas\nin the long run as well, because\nwe're gonna be calling from\nprivate variables or internal\nvariables, which are cheaper gas\nwise, of course, we do need to\nupgrade our test one more time.\nAnd like I said, if you want to\njust leave them with the S\nunderscores, that's absolutely\nfine. So s underscore price feed\nis now going to be replaced with\nget price feed, s underscore\namount to fund it is going to be\nnow replaced with get address to\namount funded. For now going to\nchange SW, underscore funders,\nto get funder. We're going to\nchange Iona, there's nowhere\nelse in their mind, we don't\nneed to change them. And I think\nthat was everything. Let's just\nlook for s underscore, we don't\nsee it, I underscore, we don't\nsee that either. Let's just run\nour tests one more time to make\nsure we refactor that correctly.\nAnd it looks like we did\nawesome. Okay, we have just\nlearned a ton. we've refactored\nour code a ton. And everything\nis starting to look really,\nreally good here. One more gas\noptimization we could make. And\nan optimization for errors as\nwell is we could update all of\nour requires to instead be to\ninstead be reverts. Because\nwithout requires, we're actually\nstoring this massive string,\nthis massive array of text on\nchain, these error codes are\nmuch cheaper. But that's\noptional. If you want to do\nthat. The whole reason we were\ndoing this is we were going\nthrough the style guide in\nupdating things here. So we have\npublic internal private, and the\nbottom is going to be our view\nslash pure functions, which they\nare they're just all these\ngetters that we just added.\nSo now our style in here looks\ngood. We've learned a lot about\ngas, we've learned a lot about\nstorage. This is fantastic.\nLet's do a quick refresher on\neverything we just learned\nbecause we went through a lot\nright there. And like I said,\nthis is one of the harder parts\nof this course. Any variable\nthat is changeable that we want\nto persist across contract\nexecutions and transactions. We\nsave to a giant array called\nstorage this array is\nsequentially indexed starting at\nzero. So the first variable the\nfirst value that we have in our\ncontract gets stored to the zero\nwith index. The next one gets\nstored to one and so on and so\nforth. Dynamic arrays and\nmappings and other dynamically\nsized objects use specific\nhashing function that you can\nfind in the documentation to\ndetermine where the elements of\nthose dynamic Data Structures go\nmemory variables, constant\nvariables and immutable\nvariables don't go in storage.\nAnd one of the main reasons\ntalking about storage is so\nimportant is because the op\ncodes for loading from storage\nand for reading from storage and\nwriting to storage are\nincredibly gas expensive. So in\neverywhere we can we want to\nreduce the amount that we read\nand load from storage. And it's\none of the easiest ways to save\ngas and try to optimize our code\nto be gas efficient. Like I\nsaid, some of this gas stuff can\nbe a little tricky and a little\nbit confusing. So if you don't\nget this right away, it's okay.\nIt is totally fine. If you're a\nlittle bit confused, and you're\nlike, What is he talking about?\nLike I said, this is some of the\nmore advanced stuff it'll come,\nthe more you work with solidity,\nand the more you work with\neverything here. So don't let it\nstress you out. Don't let it\nstop you from continuing. You're\ndoing fantastic being here. So\nfar. We've written some really\ngood unit tests. Let's now write\nsome staging tests. And these\nare the tests that we can use on\nan actual test net. This is a\ntest that we're basically going\nto run after we've deployed some\ncode just to see if everything\nis working approximately the way\nwe want it to. So let's go ahead\nand we'll create a new file\nhere. We'll call it fund me. Dot\nstaging dot test, dot j s. And\nit's going to look really\nsimilar to what we were just\ndoing with our unit tests. And\nwe're going to assume this is on\na test net. So these are tests\nthat we're going to run, right\nbefore we deploy this to a main\nnet, this is the last step in\nyour development journey, we\nwant to just make sure that\neverything is working\napproximately correctly on an\nactual test net. So what we're\ngonna do is we're gonna do the\nsame thing describe, fund me,\nand I'm gonna go a little quick\nthrough these tests here,\nbecause we've basically written\nthis type of test before, so\nwe're gonna say before each,\nit's gonna be an async.\nfunction. We're gonna do the\nsame thing as our unit tests. So\nwe're gonna have a Funmi\nvariable, we're gonna have our\nlet Deployer, we're gonna have\nour constant send value equals\nethers.utils.rs ether of one,\nand in here, we're going to do\nconst. Get named accounts.\nEquals require hardhats, we're\ngoing to say deployer equals\nweight, get named accounts,\nwe're going to wrap this up, dot\nDeployer. We're gonna say fun me\nequals await ethers dot get\ncontract.\nAnd me, comma, we're going to\nconnect it to our Deployer,\nwe're not going to deploy this,\nwe're not going to do any\nfixtures like we did in our unit\ntests, because in our staging\ntests, we're assuming that it's\nalready deployed here. And we\nalso don't need a mock because\non a staging, we're assuming\nthat we're on a test net, now we\ncan actually wrap this whole\nthing to make sure that we're on\na test net by using our helper\nconfig. And looking for our\ndevelopment chains, we can say\nwe only want to run our describe\nbit if we're on a development\nchain. So first, we'll say\nconst. Development chains equals\nrequire, we'll pull that that\nhelper config in. And we'll say,\ndevelopment chains dot includes\nnetwork dot name. And we'll\nbasically will say if developer\nchains that includes network dot\nname, we're going to skip and we\ncan actually skip using this,\nwe're going to use something\ncalled a ternary operator is\nbasically like a one liner if\nstatement. And you can think of\nthis as a special type of F.\nI've got a link to this and the\nGitHub repo associated with this\ncourse. And here's some\nJavaScript documentation,\nshowing it in action. You say,\nOkay, return is member. And if\nit's true, have it be $2.\nOtherwise have a B $10. And\nthat's pretty much it. So\nanother way of thinking about is\nlike, you say, let variable\nequals true, then we could say,\nlet some var equals variable\nquestion. Yes? Or no? Some var\nwill end up being Yes. Because\nvariable is true. If variable\nwas false than some var would be\nno. So it's literally saying, If\nvariable, if variable, then some\nvar equals yes. Else. Some var\nequals no, these lines are\nliterally the exact same thing.\nThis one is just a little bit\nmore succinct. That's really it.\nSo that's what this operator\ndoes. We're gonna say\ndevelopment chains that includes\nnetwork dot name. So if our\nnetwork is a development chain,\nwhich we're going to import\nnetwork as well from hard hat\nand ethers as well. Then we're\ngoing to do describe that\nskipped and this tells our test\nto just skip this whole\ndescribe, and then we're going\nto put this little colon here\nthing and save and boom. So now\nwe're only going to run this if\nwe're not On a development\nchain, and we want to take this\nexact same syntax, we'll go to\nour unit testing here, and we'll\ndo the exact same thing, we'll\npaste it will have this be the\nopposite by putting a little\nknot here, sticking that colon\nin. So now, our unit tests only\nrun on development chains in our\nstaging tests, only run on test\nnets. Perfect. That's what we\nwant, allows people to fund and\nown and withdraw. And this will\nbe an async function, of course,\nand we probably can make this\npretty robust, but we'll just\nsay await, fund me dot fund is\ngoing to be send a value. And\nthen we'll say a weight on me\ndot withdraw. CERT equals\nrequire try. Now we'll do kind\nof a lame final one, we'll say\nconst ending balance equals a\nweight on me dot provider dot\nget balance, fund me dot\naddress. And then we'll say\nassert dot equals ending\nbalance.to string, comma zero as\na string, we're only going to\nrun this on a test net, I'm just\ngoing to give you this one more\nrun to show you it in action.\nFeel free to skip this part\nagain, because we are going to\nbe working with a test net, I'm\ngoing to run yarn, hard hat\ndeploy dash test network\nRinkeby. And it's going to run\nthrough our deploy. And after\nit's all deployed, we're going\nto run our staging tests to make\nsure that everything works even\nwith a price feed on a real test\nnet, and I need to do const\ndevelopment chains equals\nrequire dot dot slash dot dot\nslash helper heart config. Now\nfor run yarn, hard hat test,\nwe'll see just our unit tests\nget run. But if we run yarn hard\nto test dash dash network\nRinkeby, we're not going to run\nnine tests, we're only going to\nrun our singular staging test.\nAnd of course, this is going to\nbe a lot slower, because we're\non a\ntest net. Net will we write\nwritten all these tests, we can\nwrite a couple of scripts. And\nthen we're going to finish this\nout by pushing this up to GitHub\nmaking this our first smart\ncontract GitHub repository, when\nit comes to the blockchain, when\nit comes to smart contracts,\ninteracting with community\ninteracting with open source\nbeing a part of GitHub, or git\nlabs or whatever Git hosting\nservice you're using is\nessential to being successful\nhere. So let's write our\nscripts. And then we'll upload\nthis to GitHub to start building\nour portfolio. So first, we're\ngoing to create a script to\ninteract with our code called\nfund dot j s. And this is going\nto be really similar to our\ntests. And this way, in the\nfuture. If we want to just fund\none of our contracts very\nquickly, we can just run this\nand we can do it, we're gonna do\nthe same thing that we've been\ndoing, we're gonna do an async\nfunction main. And down below,\nI'm just going to copy paste\nthis because we're going to be\ncopy pasting in a lot. We're\ngoing to paste this little\nsyntax here. So let's write a\nscript that allows us to fund\nour contracts. So first, we're\ngoing to need const get named\naccounts just like in our tests,\nequals require arhat we're gonna\nsay const Deployer. Equals await\nyet named accounts, just like\nthat. And then we're gonna say\nconst fund me equals await\nethers dot get contract. From\nfunding comm a Deployer.\nLiterally, almost exactly the\nsame as our tests, then we'll do\na little console dot log funding\ncontract that that and we'll do\nconst transaction response\nequals await funding dot fund.\nAnd for the value, we'll do\nsomething like ethers dot utils,\nthat parse ether of 0.1 or\nsomething, whatever you want to\ndo here, we of course, need to\nimport ethers, which it looks\nlike we already have. We'll do\nawait transaction response dot\nwait for one transaction. And\nthen we'll do console dot log\nfunded, we can run this little\nscript by running yarn, RT head\nnode will run a local node with\nall of our contracts deployed.\nWe'll see if our script looks\nokay by running yarn, hard hat\nrun scripts fund dot j s dash\ndash network localhost. And it\nlooks like it's funding Great.\nLet's now write a withdraw\nscript withdraw that J S. And we\ncan even leave our localhost\nNode running because we're going\nto withdraw the funds that we've\njust funded it with. So we're\ngoing to do the exact same setup\nhere. We can even copy this main\nbit to our withdraw Ah, the top\nwill do async function main will\nsay const deployer equals await,\nget named accounts, which wow, I\nhit enter and my VS code auto\nimported it, that's pretty nice.\nMaybe yours will too, maybe\nwon't if it won't, you just\ngotta write it out or copy paste\nfrom the other one. And then\nwe'll do cars Funmi equals await\nethers dot get contract on me,\ncourse. And this is going to be\nthe exact same. Now we're going\nto do console dot log funding\ndata dot, we'll say const\ntransaction response equals\nawait on v dot withdraw, await\ntransaction response dot wait\none, then console dot log. Got\nit? Back. And we can test this\nout by running yarn, hard hit\nrun scripts, withdraw dash dash\nnetwork localhost, we'll see if\nthis works. And cool and our\nscript is working. Fantastic\ncrushed out two scripts\nincredibly quickly. And now we\nhave a way to easily interact\nwith our code with our contracts\nif we want to via a script.\nThere's actually one more thing\nI want to show you before we\nactually work and we push all\nthis wonderful code up to GitHub\nin our package dot JSON. I've\nshown you a little bit of this\nbefore, but we can add this\nscripts section to make our\nlives a lot easier and condense\nall these long tests into a yarn\nscript for us. So usually, what\nyou'll see in common package dot\nJSON is you'll see a list of\nthese in here for people to look\nand just automatically run, one\nof the most common ones is going\nto be test. And to run test,\nwe're going to do yarn, hard hat\ntest. So now instead of running\nyarn, Hardhead test, someone can\njust come to your package once\nthis is saved and just run yarn\ntest. And this will grab this\ntest from your script section\nand it will run yarn heart at\ntest and Bada bing, bada boom,\nokay, cool. What else do we\nprobably probably want to do in\nhere? Well, we probably want to\nhave a test staging section\nthat'll run yarn Hardhead test\ndash dash, network Rinkeby. I'm\nnot going to run that. But\nthat's probably something we\nwant to have in here, we're\nprobably going to want some\nlinting. So we showed you\nbriefly that linting thing. So\nwe'll have a yarn lint, which\nwill just run yarn, sole hint.\nAnd then we'll just have it so\nhence the contracts folder. And\nanything that starts out soul.\nSo now if I run yarn, lint,\nit'll run soul hint, and all of\nour code here and it'll give us\nsome warnings here, which we can\npretty much all ignore. And\nSolon actually has an auto fix\nand auto fix that we can add, by\ndoing yarn lint fix, we'll say\nyarn. So hint, contracts slash\nstart out. So we'll do dash dash\nfix. So now we run yarn, lint\nfix, it'll auto fix, which\nthere's nothing to auto fix. So\nnothing happens. But it's good\nto have anyways. And then we can\ndo our formatter, we're just\ngoing to format our code format,\nthat which will do yarn,\nprettier, dash dash write to,\nand we'll just do a period to do\neverything. And then we can just\ndo yarn format. And it's gonna\nfix all of our, it's going to\nfix everything for us, which is\ngreat. And then we finally can\nhave coverage. By running yarn\nhardhat coverage, now we can\njust run yarn coverage, will\ngive us this wonderful little\ncoverage report. Awesome. So our\npackages looking fantastic.\nMaybe we'll even come into\npackage json. We'll give this a\nname. We'll call this hard hat.\nAnd me give it an author, which\nis going to be your name. So I'm\njust gonna say Patrick Collins,\nand we'll give it a version in\nhere. of 1.0 Point Oh, oops. And\nlet's do icons instead of\nspaces. Oh, and one more thing.\nWe're not using ES lint. So all\nthis es lint stuff, we can dump\nand we could delete the yarn dot\nlock and reinstall. But yeah,\nwhatever. We don't have a\nreadme, but that's okay. If you\nwant to go back, like I said, go\ncheck out that best readme\ntemplate and go update your\nREADMEs to make them look as\nawesome as this, you can do that\nas well. But other than that,\nwe've got an awesome code repo\nhere. What do we want to do with\nit? Well, we've been playing\naround with GitHub so much,\nwe've been looking at all these\ngood hubs. It's time for us to\njoin GitHub with our own with\nour first repository. Let's go\nahead and let's make this happen\nin the lesson seven full\nblockchain solidity course, yes,\nthere is a link to this GitHub\nQuickstart that we're going to\nfollow to set up our first\nrepository. This is going to be\nthe moment where you are\nstarting to build your portfolio\nbuilding and GitHub is\nborderline crucial for your\ndevelopment journey. It's going\nto be your portal folio, it's\ngoing to be where you say, Hey,\nlook at all the cool products\nthat I'm engaging with, that I'm\nworking with, that I'm\nparticipating in. If you've\nalready made GitHub before, I\nhighly recommend you still push\nthis up to GitHub as proof that\nyou've done it. And then you can\nalso tweet it at me saying, hey,\nlook how far I've gotten. Look\nwhere I've done, look at how\nfantastic I'm learning smart\ncontracts, and be incredibly\nexcited about now, this\nquickstart will walk you through\ncreating a repository, creating\na branch and teaching all this\nstuff, we're going to follow the\ninstructions from the GitHub\ndocumentation about adding\nlocally hosted code to GitHub,\nwe already have a project, and\nwe're just pushing it up. Since\nthe Windows users are using WsL,\nyou can just follow the Mac or\nLinux instructions here, the\nfirst thing that we're going to\ndo is in your GitHub profile, or\nyour GitHub login, we're gonna\nhit this little plus thing, and\nhit new repository, you can call\nthis whatever you want, let's\ncall it hard hat, fund me b code\ncamp, you can put a description\nif you want, learning from\nrecode camp, and Patrick, about\nsmart contracts.\nWe'll make it public because we\nwant other people to see you\nbeing fantastic and learning\nsmart contracts. We'll leave\nthis blank, and we'll hit Create\nrepository. Now, this is our\npublic code repository. This is\nour first one, if you've done\nthese already, this will be your\nfirst smart contract one. It\neven has some instructions in\nhere, too, that teaches us how\nto create a new repository from\nthe command line, you can follow\nthis if you want, or you can\nfollow like so the first thing\nwe're going to do is we're going\nto initialize a git branch. And\nfrom way back when you should\nalready have Git installed.\nRemember, you can check by\nrunning git dash dash version\nlike this. Git is a little\ndifferent from GitHub, Git is\nknown as version control. And it\nallows us to make changes to our\ncode, but keep a history of all\nthe code changes that we've\nmade. GitHub is a place where we\ncan push all of these changes\nand keep track of all of our\ncode. So the first thing that\nwe're going to do is we're going\nto create a new branch. And I'm\nnot going to explain Git and\nworking with Git too, too\ndeeply. But if you want to learn\nabout Git Free Code Camp, of\ncourse, has a video on Git and\nGitHub for beginners. So we're\ngoing to create this new branch\nwith git init dash b main, now\nyour Visual Studio code might\nautomatically start formatting\nsome stuff. And if it does,\nthat's great. And if it doesn't,\ndon't worry about it. But what\nyou'll see here on the left is\nyou'll see some stuff is green,\nand some stuff is gray, open\nback up that dot Git ignore,\nyou'll see that all the gray\nstuff is the stuff that we have\nin this dot Git ignore this is\nintentional, this is what we\nwant. This is just some some\nhighlighting saying, hey, this\ngreen stuff is what you're\nworking with on GitHub. And this\ngray stuff is what you're not\nworking with and GitHub. And\nthat's what we want. You don't\nneed to push artifacts, or cash\nor coverage or node modules,\npeople can install and compile\non their own machines, we\ndefinitely don't want to push up\nour Dotty and V if we're using a\nDotty and V. And we don't really\nneed to push up coverage dot\nJSON, either the rest of this we\ndo. So now what's next, after we\ninitialize our main branch, you\nnow should be able to run git\nstatus in your terminal and see\nthis huge red output of all\nthese things that are untracked,\nand we don't have any commits\nfor, what we can do now is we\ncan stage all of our code with\ngit add period, and then commit\nit with Git commit, we're going\nto run these one at a time\ninstead of together. Before I\nrun git add, I'm going to add\ndeployments to this list too,\nbecause GitHub doesn't really\nneed to know about all the\ndifferent deployments I make,\nespecially when I make a ton of\ndeployments to my local hosts,\nthey don't need to know. So\nwe're going to add that to, then\nwe're going to run git add dot.\nAnd if we do a git status, now,\nwe can see all of our code has\nbeen staged for being committed\nfor being a part of this history\nof our code. And then take a\nquick look at all these files\nand make sure your dot E and V\nfile is not and never in here.\nSo now we're going to run git\ncommit dash m and then this\nmessage for our commit, okay, so\nwe'll run git commit dash m, we\ncan say, initial commit, or\nwhatever you want in this\nmessage here, first commit,\ninitial commit, who cares, and\nit's gonna say, create mode,\nblah, blah, blah, for all of\nthese files. And if we do git\nstatus, now, it's blank on\nbranch main, nothing to commit.\nAnd then you might get something\nlike this. If you've never\nworked with Git before your name\nand email were added\nautomatically. We're a little\nbit confused here. We'll talk\nabout this in just a second. So\nnext, what we can do is we're\nactually going to copy the URL\nof our GitHub repo. So you can\ngrab that just by copying here\nor right at the top, that URL\nright there. And what we're\ngoing to do is we're going to\nadd this as a remote repo. To do\nthat. We'll do git remote add,\nand we'll give this remote repo\na name. For us. We'll say origin\nand then we'll paste that URL\nthere. We're now saying the the\norigin remote repo is good.\nGonna be at this URL, we run git\nremote dash v, we can see that\nthe origin repo for fetching is\nat this branch. And the origin\nrepo for pushing is also at this\nbranch. So when we want to get\nnew code, a fetch code will\nfetch it from here. And if we\nwant to push code up, we want to\ngive code to the GitHub. We'll\nalso get it from here. So now\nwe've set the new remote with\nthat remote URL. Now we're going\nto actually push the changes to\ngithub.com. And the way we do\nthat is with Git push, and we\npick which remote we want to\npush to, and we're going to push\nthe origin. And then which\nbranch we want to push to which\nwe're going to push to Maine,\nit'll probably prompt you for\nyour username and your password,\nand maybe your email and\neverything. Now, if\nauthentication doesn't work for\nyou, for some reason, you can\ncome over to Settings. Or if you\nscroll down to developer\nsettings, Personal Access Tokens\nand create generate new token,\nsome token,\ngive yourself repo access, write\naccess, and hit Generate token.\nAnd try to use this token as\nyour password. Instead, be sure\nto use the GitHub documentation\nand the GitHub discussion\nassociated with this course, if\nyou get lost or if something\ndoesn't work, as shown here. But\nonce it's done, once you add all\nthat information in correctly,\nyou come back to your get up and\nyou will have your first GitHub\nrepo with all the code and\neverything in it like this. And\nonce you complete this step,\nonce you do this, you should\nabsolutely celebrate. If you\nlike, you can shoot a tweet web\nthree community in the\nblockchain community is\nabsolutely this collaborative\nspace. So Twitter crypto is\nwhere a lot of these people\ncongregate to share ideas. So\ndefinitely be sure to celebrate\nand share this and be really,\nreally excited. And shoot a\ntweet out like this. Give your\nfriends a high five, share it on\nTwitter, share it on Discord\nshared on Reddit, be excited for\nhow far you've gotten, we've got\na lot more to go. But by\ncompleting this part, you have\ndone fantastically, and I'm so\nexcited for you to start the\nnext section. Now, we're not\ngoing to go over the TypeScript\naddition to this because there's\nnothing really new here.\nHowever, again, if you want to\nsee TypeScript, feel free to\njump into the GitHub repository\nassociated with this course.\nAlright, awesome. You've just\ncompleted Lesson Seven, the\nheart had fun me. And now it's\ntime to move on to lesson eight,\nwhich is going to be our HTML\nslash JavaScript to fund me, you\ncan find all the code for what\nwe're about to go through, of\ncourse, on my GitHub repo. And\nfor this section, we're now\ngoing to start to see some of\nthe differences between Node js\nbetween that back end\nJavaScript, and JavaScript in\nthe browser or front end\nJavaScript. And if you come to\nthe GitHub repo associated with\nthis lesson, our main version\nwe'll be using what's considered\nbetter front end JavaScript. But\nwe'll also have a no JS\naddition, as well, if some of\nthe front end JavaScript is\nreally confusing, and you'll see\nwhat I mean with some of those\ndifferences very soon. Now,\npeople can programmatically\ninteract with our smart\ncontracts at any time. However,\nmost of our users are not\ncompete developers. So we need\nto create a website, we need to\ncreate a user interface for them\nto interact with our smart\ncontracts and interact with our\nprotocols. And that's what this\nsection is going to teach us,\nit's going to be an introduction\nto building these fullstack.\nbuilding these front ends on top\nof our smart contracts. Now, I\nwanted to show you what this is\nactually going to look like when\nwe finish it. Because here,\nwe're actually going to make our\nfirst front end our first\nwebsite using the blockchain\nusing web three. And it's going\nto be an incredibly minimalistic\nwebsite. As you can see right\nhere, we're not going to have\nany styling, we're just going to\nshow you how to get the\nfunctionality. And additionally,\nwe're going to do a couple of\nthings that aren't really\nrecommended and are definitely\nnot best practices. The reason\nwe're going to do it like this\nis the same reason that in math\nclass, before you learn the\ntricks for derivatives, you\nlearn what a derivative actually\nis. We're teaching it like this\nfirst, so that you can\nunderstand what's going on on\nthe websites when you interact\nwith them. And when you work\nwith them. We saw already with\nFoston, touching the link where\nwe can connect our wallets and\nwe can work with the faucets.\nAll decentralized applications\nhave this website and have this\nsetup where you connect your\nwallet and then you interact by\nclicking buttons, which make\nthese function calls to the\nblockchain. And here's going to\nbe our minimalistic website that\ndoes exactly that. So this\nsection is just going to teach\nyou what's going on under the\nhood. So you can really\nunderstand how to build these\napplications at a professional\nlevel. So for this section, if\nyou don't want to code along\nwith me, you definitely don't\nhave to however, coding along\nwith me will definitely ingrain\neverything in your memory here.\nSo here's what an application is\ngoing to look like. We have our\nwebsite here, which is connected\nto our hard hat, our local\nblockchain, but it's gonna run\nexactly the same as if it was on\na real test net, the first thing\nyou'll notice is in our meta\nmask, we are not connected. And\nwe'll go ahead and hit Connect,\nand meta masks will pop up\nasking us if we want to connect,\nwe'll go ahead and connect to\nit. And now we'll be able to\ninteract with our heart at\nFunmi. You'll notice two buttons\nhere are functions that we're\nfamiliar with, we have our\nwithdrawal function, which is\ngoing to be our withdrawal\nfunction that we just created.\nAnd then of course, we also have\nour fund function here where we\npush or we send Aetherium or\nMatic or whatever, native\nblockchain token to our smart\ncontract. So we can do it\nthrough this user interface. So\nonce we're connected, if we want\nto see the balance, we can\nactually right click, hit\nInspect, come over to our\nconsole. And we'll print out to\nthe JavaScript console, the\ncurrent balance of our smart\ncontract. So nobody has funded\nthis yet, we can come down, we\ncan choose an amount we want to\nfund. So for example, maybe 0.1,\neath, we'll go ahead, we'll hit\nfund, meta masks will pop up,\nwe'll get a little council\nsaying funding with 0.1. And\nit'll give us all the\ntransaction details that we need\nto send 0.1 eath, to our smart\ncontract, we can go ahead and\nhit Confirm. And after it's been\nconfirmed after it's been mined\non our local blockchain, we had\nget balance, we now see that\nit's 0.1. We could call fund\nagain, we could have multiple\nfunders, we could switch between\ndifferent accounts and fund with\ndifferent amounts. And we can\nsee that funding amount\nincrease, then we can call the\nwithdrawal function. As long as\nwe're the owner, we can confirm\nand we can pull out all the\nmoney out of our funding\ncontract. And we'll get balance.\nNow we'll see the balance is\nreset to zero. So this is what\nwe're going to be building. Are\nyou ready? I sure am.\nLet's get into it. This is the\nintroduction to building\nwebsites with web three. All the\ninformation here is available in\nour GitHub repo, so feel free to\nfollow along there. Alright, so\nif you're in your heart head\nFunmi dash Free Code Camp repo,\nwe're still going to want to\nhave this open as well. But\nwe're also going to want to\ncreate a new Visual Studio code\nfor working with our new repo.\nSo let's go ahead and CD down a\ndirectory. We'll type MK dir,\nwe'll call this HTML, Fund Me\nFree Code Camp. We'll cd into\nthat. And we'll open this up by\ntyping code period. You can also\ndo File Open Folder, but we just\nwant to open this up in a new\nVisual Studio Code. New VS code\nwill pop up but before we flip\nover to that, we do want to CD\ndown CD back into hard hat fun\nwe Free Code Camp because we are\nstill going to use everything in\nhere. We're still going to\ndeploy In a smart contract using\nthis folder and using this repo,\nwhen you're building daps, or\nwebsites that are connected to\nthe blockchain, you'll usually\nhave two repositories or repos.\nOne is going to be for the smart\ncontracts, like what we see\nhere. This is our repo that has\nall the code for our smart\ncontracts. And then you'll also\nhave one for the front end slash\nwebsite. And it's going to be\nthe combination of these two\nrepos, which makes up the full\nstack. So when people are\ntalking about full stack,\nthey're talking about the smart\ncontracts, which is going to be\nour back end, plus, plus our\nHTML slash JavaScript slash\nwebsite stuff, which is going to\nbe our front end. So smart\ncontracts are the back end, HTML\nslash JavaScript slash website\nstuff is going to be our front\nend. So we have our back end\nalready. And now we're going to\nbuild our front end, we want to\nkeep this up because we're going\nto need it to test and interact\nwith our front end. Awesome. So\nwe have this new folder now,\nHTML Funmi, Free Code Camp. Now\nthis course is not a how to\nlearn front end course, we are\ngoing to teach you a number of\nfront end concepts. But if you\nwant to learn a full traditional\nfront end course, once again,\nyou can check out Free Code\nCamp, they've got a ton of\nfantastic tutorials, I'm\nteaching you front end, if you\ngo ahead and follow along with\nme, though, you'll definitely\nget a basic understanding of\nfront end as well as front ends\nand how it relates to our smart\ncontracts. Additionally, you\ndon't have to do the front end\nparts or the full stack parts.\nIf you only want to take this\ncourse, to learn back end and to\nlearn JavaScript, and to learn\nsolidity and learn how to do\nthese smart contracts\nprogrammatically, then you can\nabsolutely skip these front end\nparts. However, if you want to\nlearn to build exciting\nwebsites, and you want to have\nother people other than\ndevelopers interact with your\nprotocols, you definitely want\nto watch this part. Now before\nwe actually jump in here and\nstart writing our code. We need\nto understand what exactly is\ngoing on when work with one of\nthese websites that use the\nblockchain. So I actually made a\nvideo about this recently. So\nlet's watch a segment from that\nreally quick, just so that we\ncan get up to speed with with\nexactly what's going on behind\nthe scenes of these websites\nthat interact with the\nblockchain. All right. So here\nwe are, with a website or a\nfront end on top of some smart\ncontracts that we've deployed,\ndoesn't really matter what it is\nright now. This is typically the\ninterface that you'll see boiled\ndown to a really, really\nminimalistic level. Typically,\nyou'll see something like\nconnect function, right, and\nMetamask, or some other wallet\nconnector thing will pop up,\nwe'll hit Next we'll connect\nhere might even say something\nlike connected. And we can also\nexecute functions, we can\ninteract with our smart\ncontracts, we can confirm, etc.\nRight? This is something you\nmight see something like Avi\nright, I'll hit Connect on the\napplication, it'll say, hey, how\nwould you like to connect? I'll\nchoose Metamask. I'm going to\nchange my Metamask to main net,\nbut you get the picture, right?\nThis is a simple example of what\nthat would look like. So what is\nactually going on in the browser\nwhen we connect what is actually\ngoing on? And what do we\nactually need to do, we're going\nto right click, hit Inspect. And\non the right side, we're gonna\nsee our debugger here. Now if we\ngo over to sources, on the top\nof our browser, you'll see a few\nthings. If you look down over\nhere, right, we'll see this URL,\nright, which right now is going\nto be my localhost. And we'll\nalso see meta mask and Phantom\nand a whole bunch of other\nstuff. These other things that\nwe see here are going to be\nwhat's injected from our browser\nextensions. The reason we see\nthis meta mask thing here is\nbecause I've meta mask\ninstalled, right? The reason I\nsee Phantom here is because I\nhave the Phantom app installed.\nMeta masks, of course, being an\nEVM, wallet and Phantom being a\nSolana based wallet. Now what\nhappens when we have these\nextensions installed is they\nautomatically get injected into\na window object in JavaScript,\nand in fact, we scroll down\nto here in the console, again,\nyou can find console, you can\nclick here and click anything up\nthere. And we type in window.\nWe'll see we have this big\nwindow object with all this\nstuff, right? This window object\nrepresents this our window\nbasically right? Now if we\nscroll all the way to the bottom\nand we do window dot Aetherium.\nWe also see an object here. Now\nthis window dot Aetherium object\nonly exists if you have a meta\nmask or meta mask like browser\nor if you want to look at some\nother web three wallet you do\nwindow dot Solana. So Alana\nright and we see this window dot\nSolana. Now let's look at a\nbrowser that doesn't have\nMetamask or phantom installed.\nWhat do you think is going to\nhappen in the window now let's\ngo ahead and right click hit\nInspect. We'll go to the\nconsole. Now let's see what's\ngoing on in here. If we go to\nsources, we first off we don't\nsee that Metamask or that Solana\nsource here. And if we go to\nconsole, we still see window if\nI let me zoom in a little bit.\nWe still see window here. But if\nI do window dot Aetherium If we\nget nothing, or if I do window\ndot Solana, we also get nothing.\nSo in order for our browsers to\nknow that there's a Metamask, or\nthat there's a phantom, those\nextensions automatically add\nthese to our window objects, and\nthat's something that we can\ncheck for in our JavaScript. The\nreason these wallets are so\nimportant is built into them\nunderneath the hood, they have a\nblockchain node connected to\nthem. And in order to interact\nwith the blockchain, we always\nneed a note. And you might have\nseen URLs from alchemy, or in\nFIRA because you need them to\ninteract with the blockchain,\nAlchemy, and infura are examples\nof third party blockchains that\nyou can interact with and\nbasically rent, right. But you\nneed them to create a provider,\nor a node to send your\ntransactions to. So you could do\nit in JavaScript, like something\nlike this is the alchemy\ndocumentation where you take\nthat alchemy URL, you stick it\ninto some object and use that to\nsend your transaction. This is a\nway that you could do it in the\nback end. But on the front end,\nwhat you normally want to use is\nyou just want to use the user's\nMetamask, or their Solana or\ntheir wallet as the main wallet.\nNow, there are a ton of other\ndifferent types of wallets to\nconnect, like ledger, mu,\nCoinbase, wallet, connect, etc.\nAnd there are different ways to\nset those up. But they all do\nthe same thing where they expose\nsome URL, they expose some node\nunder the hood, they give us\nthat URL. They give us that\nprovider. The way metamath Does\nit is with window dot Aetherium.\nBoom, this is now our URL. This\nis now our connection. In fact,\nif you go up to your Metamask,\nhit the little three dots,\nexpand view. hit Add Network,\nand then just hit the X so we\ncan get to networks. You can see\nall of these blockchains that I\nhave in here all have an RPC\nURL, this the HTTP RPC URL\nconnection of the blockchain No,\nthat's running. I happen to have\none running locally right now.\nAll of these also have a node\nRPC URL and you can actually see\nthem right in your meta mask\nright. This is connected to in\nFira, these are all connected to\nin Fira. It's all the exact same\nthing. Meta mask just has a\nreally nice way of taking that\nURL, sticking it in the browser\nfor us in this window dot\nAetherium or window dot Solana\nyou know or whatever. So this is\nthe main thing that we need to\nknow we need. We always need a\nconnection with the blockchain.\nAnd these browser wallets are an\neasy way to do that. Make sense?\nGreat. Let's take this knowledge\nnow. And let's\napply it. So in here, let's make\na quick readme.md. Just so we\ncan talk about what we're going\nto be making here. So in this\nsection, we're gonna be using\nraw HTML slash JavaScript in\nconjunction with our smart\ncontracts to build this website.\nLater on. We will use next Jas\nslash react, which is a more\nmodern stack to build our\nwebsites here. But learning\nunderstanding how to do\neverything with HTML and\nJavaScript first, is going to\nmake our lives a lot easier come\nlater on down the road. But as\nwe know, all websites use HTML\nas kind of their scaffolding for\nwhat they look like. So let's go\nahead and create our HTML for\nour website, we'll call it index\ndot HTML. And this is going to\nbe the basic scaffolding or the\nbasic bones of what our website\nis going to look like. Now, in\nVS code, if you go ahead and\njust type exclamation mark index\ndot HTML, and you click the\nfirst thing that pops up, it'll\nautomatically populate your code\nyour file here with some basic\nHTML setup. If it doesn't do\nthis for you, feel free to copy\npaste the basic setup from the\nGitHub repository associated\nwith this course, we have our\ndoctype. HTML, we have some HTML\ntags telling us that everything\nin between here is going to be\nan HTML, which is great.\nHowever, for simplicity, we\ndon't need most of this. So\nwe're going to make this a\nlittle bit easier. We're going\nto delete this line, this line\nand this line. And we're just\ngoing to change the title to\nfund me app. And then inside of\nour body, we can do something\nlike or Hello. And now we have\nthe bare bones to create a\nwebsite just with this. Now to\nshow this on a website, we can\ndo one of two things. If you are\nusing Visual Studio code, I'm\ngoing to recommend you install\nthe extension live server. And\nit looks like this. And I'll\nhave the extension ID for this\nextension in the GitHub\nrepository associated with this\ncourse, this is going to allow\nus to easily spin up an HTML\nwebsite. So we'll go ahead and\ninstall this. And if you're not\nusing Visual Studio Code, I'll\nshow you a different way in just\na second. Once this is\ninstalled, you should have this\nlittle go live button at the\nbottom. And if you don't, you\ncan always open up your command\npalette, which again, you can\nopen up by hitting View command\npalette, and you can type in\nlive server and just say open\nwith live server but we're going\nto just click this go live\nbutton. And it's going to say\nstarting and it's actually going\nto open up your browser with our\nindex dot HTML. We can actually\nsee our website is being called\nSave on 120 7.0 point 0.1. This\nis known as the loopback, or\nlocal host endpoint, we're on\nport 5501. If you're not\nfamiliar with the ports, don't\nworry about that for now, we\nhave our index dot HTML here.\nAnd if we change this to\nsomething like what's good, we\nhit save. If it doesn't\nautomatically refresh, we'd come\nover here and refresh. And we'd\nsee that being reflected here.\nIf you've never created a\nwebsite before, you've\nessentially just done it,\ncongratulations, you might get\nthis.vs code folder. a.vs code\nfolder allows you to make\nsettings specifically for the\nrepo that you're working with,\nfor your code editor for VS\ncode, but we're going to mostly\nignore it for now. Now, if\nyou're not using Visual Studio\nCode, what you can do is you can\njust run this in the browser. So\none thing you could do is you\ncould right click it, and I'm\nusing a Mac. So I'm going to hit\nReveal in Finder, aka reveal\nwhere it's located. And you can\njust double click it, and boom,\nnow it's running right in your\nbrowser. Instead of pointing to\nyour localhost, it's going to be\npointing directly to your local\nfile path. Now one final version\nthat we could do that I'm going\nto highly recommend you don't\ndo. But it's another option,\nwe're actually going to download\na package for you using no Jas,\nwhich allows us to serve up\nHTTP. And we're gonna install it\nthe exact same way we've\ninstalled our other packages, we\ncan do yarn, add dash dash dev\nHTTP hyphen server. And you may\nstill want to add it anyways.\nBut now, we'll get some node\nmodules for this HTTP server\npackage, we'll get a package\njson, and of course, a yarn dot\nlock as well. And what we can do\nis we can stop this down here,\nstop that live server. And if we\ngo back to our website, refresh,\nit'll now be blank. And we can\nrun yarn HTTP server. And this\nwill do the exact same thing.\nAnd we get, and if we come over,\nand we refresh, we'll see what's\ngood. Now this one is a little\nbit more finicky. And after you\nmake a change, like, Hey, what's\ngood, you might have to close\nit, and then reopen it and then\nrefresh. So I do recommend that\nif you're on Visual Studio code,\nyou definitely just use this\nlittle go live button, because\nit'll reflect your changes a lot\nnicer.\nSo let's go ahead and hit the Go\nLive button. Hey, what's good\npops up. Okay, cool. Our HTML is\nworking perfectly.\nSo the title, of course, is\ngoing to be the Funmi app, which\nwe see up here in the title\nsection. So let's update this\nHTML, so that it has those\nbuttons, and it can actually\nconnect and work with our\nblockchain and work with any\nblockchain. Something else that\nyou can do in HTML is you can\nactually write JavaScript inside\nyour HTML. And the way we can do\nthat is by doing this script\ntag, and then we'll do a closing\nscript tag. And anything inside\nhere inside of our script tags\nis going to be JavaScript. So I\ncould do something like console\ndot log, hi, with a bunch of\nexclamation marks, I'm going to\nsave it. We'll go back to our\nfront end, we're going to right\nclick, we'll hit Inspect, we'll\ngo to the console. And we can\nsee that Hi prints it out, we\nrefresh, we can see the hi\nconsistently printed out hi from\nscript tag, we'll save it, we'll\nmove back, we see hi from script\ntag printed out. I know it's a\nlittle bit small. So let me zoom\nin. Alright, great. So we can\ntype our JavaScript in here,\nit's inside the script tag is\nwhere we're going to write our\nJavaScript to write the\nfunctions that our front end is\ngoing to interact with. Now, as\nwe saw before, in this little\nconsole, we can check for window\ndot Etherium, to see if Metamask\nor is installed. And again, a\nlot of what we're working with\nis actually right in the\nMetamask documentation. If you\ngo to their basic section, they\ntalk a little bit about the\nprovider, which is this window\ndot Aetherium, you can read how\nto actually interact directly\nwith meta mask in the meta mask\ndocumentation as well. Now using\nwindow dot Aetherium is just one\nof the ways we're actually going\nto connect to the blockchain,\nthere's actually multiple ways\nbecause there's multiple\ndifferent kinds of wallets out\nthere. But for now, we're just\ngoing to pretend that window dot\nAetherium and meta mask is the\nonly extension out there. So\nwhat we want to do is we want to\ncheck to see if this wind of\nthat Aetherium exists. This is\nthe first thing that we should\nbe doing. Because if this\ndoesn't exist, this means that\nthey can't connect to the\nblockchain, one of the first\nthings that we're going to want\nto do is we're going to want to\ncheck to see if that exists. So\nwe can do something like if we\ncan say type of window that\nAetherium does not equal,\nundefined. Then we'll do console\ndot log, I see a meta mask. So\nnow if we save, we come back to\nour front end, we do see I see a\nMetamask. I've got a Google\nChrome up without Metamask that\nif we look in the console, and\nwe hit refresh it the same URL\nwhere our live server is\nrunning. We don't see that I see\na meta mask because it doesn't\nsee a meta mask. We can do else.\nconsole dot log, no Metamask\nrefresh, we still see ICD a meta\nmask where we have a meta mask.\nYou don't have to open up a\nbrowser without one but we see\nno meta mask for Chrome because\nit doesn't see a meta mask. Now\nwhat we could do is We can\nautomatically try to connect to\nmeta mask if we see that there\nis a meta mask, right? Remember\nhow before, when we hit that\nconnect button meta mask popped\nup and said, Are you sure you\nwant to connect? So what we can\ndo is, and you can, again, you\ncan find this in the meta mask\ndocs, we can run this eath\nrequest accounts method, which\nis basically going to be how we\nconnect our Metamask. Now, this\nis specified by a new EIP and an\nolder documentations. And in\nolder tutorials, you might see\nAetherium dot enable, which\nessentially does the exact same\nthing. So what we could do here\nis we could say, a cerium, or\nexcuse me, window dot Aetherium\ndot request. And we could put\nmethod F request accounts. And\nwe'll save that. Now if we go\nback to our browser, we'll\nactually see, you'll actually\nsee Metamask, go ahead and pop\nup and say, let's connect so we\ncan choose an account. And we'll\nhit Connect, will automatically\nconnect our meta mask to our\nwebsite. And now if we look at\nour meta mask, we can see this\nlittle connected thing. It's\nsaying that our account one is\nnow connected to our website.\nThis means that the website can\nnow make API calls to our meta\nmask, we still have to be the\nones to approve them. But it can\ngo ahead and connect and try to\nrun transactions, which is\nawesome, which is what we want.\nIf you want to disconnect, we\ncan go ahead and click that\nlittle button and hit disconnect\nthis account. Well that we have\nour code currently is anytime we\nhit refresh, this is going to\npop up which is going to be\nreally annoying. So what we're\ngoing to do instead is we're\ngoing to wrap this up into an\nasynchronous function, the exact\nsame as we've been doing, we'll\ndo we'll create an async\nfunction called Connect. And\nwe'll wrap it up these curly\nbraces here. And then we'll just\nformat this a little bit to make\nit look nicer. And now if we\nsave, we go back to our website,\nand we refresh. And we go ahead\nand disconnect.\nIf we refresh Metamask won't\nkeep asking us Hey, do you want\nto connect Hey, do you want to\nconnect here do you want to\nconnect, because we need to call\nthis connect function where we\ncan do that is we can add a\nlittle button here. So right\nunderneath our script tag, we're\ngoing to add a button tag. So\nthis is the opening button tag.\nAnd then here's the closing\nbutton tag. And inside the\nopening button tag declaration,\nwe'll give it an ID, which will\nbe Connect button. And we'll say\non click equals the Connect\nconnects function. And we'll\ncall this button connect in\nbetween these little button\ntags, we'll call it connect will\nsay when we click it will call\nthe Connect function. So if we\nsave, and we go back to our\nfront end, we can now see we\nhave a little Connect button.\nAnd now if we press Connect,\nMetamask is going to pop up,\nwe'll hit next and connect like\nthat. And boom, now we are\nconnected. And we can even do a\nlittle await here so that we\nwait for this to finish before\nmoving on. And then after we\nconnect, we can say console dot\nlog connected. So let's actually\ngo ahead and test this out,\nwe'll go back to Metamask. we'll\ndisconnect here, try to never be\non Main net if we don't have to\nbe. And let's go ahead run\nconnect, we'll hit Next connect.\nAnd now we see a little console\ndot log come out saying\nconnected. Okay, great. We can\nalso update our website\naccordingly. So that we can let\nusers know that we're connected.\nSo we can grab the connect\nbutton element ID and say that\nwe're connected once we're\nconnected. So after we await to\nbe connected, we can go ahead\nand do document dot get element\nby ID Connect button. And then\nwe'll say dot inner HTML equals\nconnected like that. And then\ninstead of saying no minimize\ndown here, we'll do just the\nopposite. So we'll copy this\nline. And instead of connected,\nwe'll say please install meta\nmask. And we'll save we'll go\nback to our front end, we'll hit\nconnect. And now if we're\nalready connected, it'll just\nautomatically go to connected.\nIf we're not connected, it'll\npop up, we'll get connected. And\nnow we have this button that\nsays connected, which is great.\nSo now we already know that\nwe're connected. So we've\nconnected our Metamask to our\nfront end. Now we want to\nactually go ahead and do some\nfunctions here. And this is\nwhere we want to create some\nmore functions and some more\nbuttons that are going to use\nethers that package that we\nbecome so familiar with. Now, as\nwe code, our script section is\ngoing to get bigger and bigger\nand bigger. So oftentimes, we\nactually want to put our code in\na JavaScript file itself. So\nwe're gonna go ahead, come over\nhere, we're going to create a\nnew file, and we'll call it\nindex dot j s. And instead of\nputting our JavaScript in these\nscript tags, we're going to put\nit in this index and then import\nthis index file into our HTML.\nAnd the way that we're going to\ndo that is we're actually just\ngoing to grab this function.\nWe're going to copy it, delete\neverything for now. We're going\nto paste it into our end ext dot\nj s, and then in our index dot\nHTML, we're just going to tell\nour script tag to use index.js.\nSo we're just going to say the\nsource is going to be equal to\ndot slash index dot j s. And\nthen we're going to say, the\ntype of this is going to be text\nslash JavaScript. Now if we save\nthat, and we save our index dot\nHTML, we come back to our front\nend, we do a little refresh. And\nwe make sure that we go ahead\nand disconnect. And we do\nanother refresh, we can see that\neven with our index.js in a\ndifferent file, because we're\ndoing src equals index.js, and\nwe're importing it into our\nHTML, when we hit Connect, it\nstill calls our Connect\nfunction. That's how we can kind\nof separate our JavaScript into\nits own js file that we're a\nlittle bit more familiar with.\nNow, if you look in the GitHub\nrepo associated with this\ncourse, and you look in the\nindex dot j s, you'll see our\nConnect function, we've added\nsome quality of life stuff,\nwe've added some try catches\njust to make handling errors a\nlittle bit better, you can go\nahead and add those try catches\nin yourself if you'd like. But\nI'm not going to demo them in\nthis video\nhere. Now we want to create our\nfun function. And then later on,\nwe're going to create our\nwithdrawal function. And this is\nwhere front end JavaScript code.\nAnd no Gs are a little bit\ndifferent. In no JS, we've been\nusing this require keyword to\nimport dependencies in front end\nJavaScript, you can't use\nrequire, and it won't exactly\nwork. Now later on, we're going\nto use the Import keyword, which\nis really the better way to do\nthis. And this is where our\nfirst differences going to be\nusing the Import keyword for\nfront end is much better than\nthe require keyword, especially\nsince the require keyword\ndoesn't actually work. And for\nthose you who might struggle\nwith this disconnect in this\nchange. Once again, in the\nGitHub repo associated with\nthis, we do have a Node js\nedition of this, where you can\nuse the require keyword, you\njust have to go through the\nreadme and download some\npackages and run some scripts\nthat basically transform your\ncode that uses require into code\nthat works with imports. But\nwe're going to teach you the way\nto work with your front end code\nhere using imports. Now you'll\nsee when we get to next Jas that\nwe will still download code from\nnode modules and using a yarn\nlock and a package json etc. So\nsummary in future seconds, we\nare still going to do yarn add.\nBut outside of a framework when\nwe're using this raw JavaScript,\nthis raw HTML setup, like what\nwe're working with here, we're\nnot going to be doing yarn, add\nnode modules will add node\nmodules for framework like next\nreact. But for raw JavaScript,\nwe'll be using a different\nsyntax, which I'll show you\nsoon. So let's go ahead and\nstart building our fund function\nhere. To make our fun functions,\nwhat would we normally do? Well,\nwe'd create an async function\ncalled fund. And in this\nfunction, we probably would want\nto take some ether mount as a\nparameter, because we're going\nto want to fund it with some\namount of Aetherium. When we\ncall this function, we might\nwant to run console dot log will\ndo a little string interpolation\nhere. Funding with eth amount,\ndot dot dot, these semicolons\nare going to drive me absolutely\ninsane. So I'm going to add a\nour dot prettier dot our rc file\ninto this, and I'm going to go\nahead and add prettier in here.\nOtherwise, I'm going to lose my\nmind. So we're gonna do yarn add\ndash dash Dev, prettier, just so\nwe can format our JavaScript\nwith prettier come back to\nindex.js. I'm gonna hit command\nS, and it looks like it does\nindeed, auto format with\nprettier now yay, no matter\nsemicolons, we can call this fun\nfunction the same way we call\nconnect. So in in our index dot\nHTML, maybe we'll create a new\nbutton. Button. We'll give it an\nID of fund will say on click\nequals fund. And we'll say fund.\nAnd this will be our button\nhere, we save it, we're looking\nat our front end. Now the fund\nbutton that if we call, we say\nfunding with undefined because\nwe're not passing it an amount\nhere. So back in our index\nconsole dot log funding with and\nwe'll just want to make sure\nthat we can actually call that\nFunmi function. So we'll copy\nthis line again and we'll say\ntype of window dot Aetherium\ndoes not equal undefined. We'll\ngo ahead and try to fund here to\nsend a transaction. What are the\nthings that we absolutely 100%\nAlways need? Well, we need a\nprovider slash connection to the\nblockchain. And we need a signer\nslash wallet, slash someone with\nsome gas to actually send it and\nthen And we're probably going to\nneed the contract that we are\ninteracting with. And to get\nthat contract, we're going to\nneed ABI and address. And with\nthese all together, we can send\nany transaction. So to get our\nprovider, we're going to\nactually go ahead and work with\nethers again. Now, we're going\nto do it a little bit\ndifferently, though, before, the\nway we worked with ethers is we\nsaid const ethers equals require\nethers, right. And this is how\nwe pulled ethers. And now like I\njust said to you, though,\nrequire doesn't work in the\nfront end. And we actually don't\nwant to install ethers with a\nnode modules package. So what we\ncan actually do instead is let's\ngo to the ethers documentation.\nIf you go to the Getting Started\nsection, scroll down, they have\na section about importing using\nNode js, which uses require or\nimports. And then they also have\nsome documentation for working\nwith the web browser. So instead\nof us doing a node module, what\nwe'll do is we'll copy the\nethers library to our own\ndirectories and serve it\nourselves. So what we do is we\ncan come in here, we can copy\nthis massive file, which is\nethers, but in front end\naddition, and come back to our\nfile. And we'll make a new file\nin here.\nCalled ethers. We'll do 5.6\npoint esm.min.js. And we'll\npaste that massive thing in\nhere. Now, since I have prettier\nwhen I save it, it's going to\nauto format. And it's just this\nhuge file, which has everything\nethers, but front end defied if\nyou will. Now what we can do is\nwe can import this into our\nindex.js. So instead of using\nrequire in here, we'll say\nimport ethers from and then\nwe'll just refer to that file\nthat we just got ethers dash 5.6\npoint esm.min.js. Now, we only\nneed to do this weird copy\npasting of the file import thing\nin this HTML JavaScript lesson.\nIn future lessons with Node js,\nwe are going to do yarn, add\nethers, kinda like we've\nnormally seen. The frameworks\nlike React and next Jas that\nwe're going to use are going to\nautomatically convert those yarn\nadded packages to their front\nend to five versions. But for\nthis section, this is how we're\ngoing to actually import the\nethers package. Now the other\nthing we'll have to do is on our\nfront end, we'll have to change\nthis from type text slash\nJavaScript to type module\nchanges. The type module allows\nus to import modules into our\ncode, which we're going to be\nimporting this, and we're going\nto import another module as\nwell. Awesome. And now though,\nif we go back to our front end,\ndo a little refresh with the\nconnect button, we get Connect\nis not defined at HTML\nbutton.on. Click, so instead of\ncalling our Connect button from\nthe front end here, we're going\nto remove these on clicks from\nour index dot HTML, and go into\nour index.js and add those\nconnect buttons in here. So\nwe'll say const. Connect button\nequals document, dot get element\nby ID, Connect button. And then\nwe'll say const. One button\nequals Doc, you meant dot get\nelement by ID. One button, the\nidea of the connect button is\nConnect button. The idea the fun\nbutton is fun button. And then\nwe'll say connect button.on\nClick equals connect. And one\nbutton.on Click equals fond. We\ngo back to our front end, do a\nlittle refresh. We'll hit\nconnect now. And it's actually\nworking, we'll go to our\nMetamask will disconnect,\nrefresh, hit Connect, and boom,\nit's popping up again. This is\njust due to that type being\nmodule, if it was text slash\nJavaScript, that on click button\nadding in here, but since we're\ndoing module, we're going to add\nthose on clicks right in our\nJavaScript. But now that we've\ngot ethers in here, what we can\ndo is we can even do like a\nlittle console dot log, just\npaste ethers in here, or\nactually better yet. We'll add\nit right above the Connect\nbutton. Go back to our front\nend, we'll do a refresh and we\nsee the entire ethers object\nright in our front end which is\nperfect, which is exactly what\nwe want here. And since we've\ngot these two variables here, we\nmight as well update this to\njust say connect button dot\ninnerHTML equals connected and\nhere as well. Connects button\ndot innerHTML equals please\ninstall meta mask because now\nconnect button is going to be\nthe same as running this\ndocument dot get element by ID\nright\nhere. and great. Let's go back\nto continuing our font function.\nSo we'll say const provider\nequals new ethers dot providers\ndot web three provider, window\ndot Aetherium. Web three\nprovider is an object in ethers\nthat allows us to basically wrap\naround stuff like Metamask is\nweb three provider is really\nsimilar to that JSON RPC\nprovider, which we use before,\nwhich is where we put in exactly\nthat endpoint, our alchemy\nendpoint, or when we're working\nwith Metamask. Here, whatever\nendpoint that we have in our\nnetwork section is web three\nprovider takes that HTTP\nendpoint and automatically\nsticks it in ethers for us. So\nthis line of code basically\nlooks at our Metamask and goes,\nAh, okay, I found the HTTP\nendpoint inside there, Metamask.\nThat's going to be what we're\ngoing to use as our provider\nhere. Since our provider is\nconnected to our Metamask. Here,\nwe can get a signer or we can\nget a wallet just by running\nconst signer equals provider,\ndot get signer, this is going to\nreturn whichever wallet is\nconnected from the provider,\nwhich again, our provider is our\nMetamask. So if we're connected\nwith with account one, it's\ngoing to return account one as\nthe signer connected with\naccount two, it'll return\naccount two, etc. Now, I'm going\nto add console dot log signer\nhere, and then flip to the front\nend now and show you what\nhappens when we hit the fund\nbutton. You can see in here we\nhave our JSON RPC signer, the\nsigner is going to be the\naccount that we've connected to\nour front end. Now we have our\nprovider, we have our signer.\nNow, we're going to need our\ncontract by getting the API and\nthe address. So we're gonna need\nto say const. Contract equals\nwhat? How are we going to get\nour contract? Well, this is\nwhere we're going to need to\nknow the ABI and the address of\na working with typically, what\nyou'll see a lot of projects do\nsince once a contract is\ndeployed, the addresses are\ngoing to change is they're going\nto have some type of constants\nfile. So they'll create a new\nfile called constants, dot j s.\nAnd in here, they'll add the\naddresses and any API's and\nanything like that for us to use\nin our fund piece here. Now, as\nwe're developing, and as we're\nbuilding, this, the backend and\nthe front end team are gonna\nhave to interact a little bit,\nor if it's just you doing the\nfull stack, you're gonna have to\ninteract with their back end. So\nthis is why it's so important to\nhave both your front end and\nyour back end code nearby. So if\nwe go back to our Hardhead, fund\nme project that we just made, we\ncan find the ABI in here. Once\nagain, if we go to artifacts, go\nto contracts, we can go to fund\nme dot soul, fund me dot JSON,\nwe can find the ABI right here,\nit's going to be this massive\nthing right here. So you can go\nahead, you can even copy this\nwhole thing in this little non\nsquiggly bracket and this little\nbracket here, we can copy that.\nAnd then we can come back to our\nconstant.js. And we can just\nsave it as variable, we'll say\nExport const, Avi, e equals and\npaste that in there. And then\nback in our index dot j s, we\ncan import it with import\nAPI from constants. Oops. Okay,\ngreat. So we have the API. Well,\nwhat about the address, since\nwe're going to be running this\nlocally, we want to get the\ncontract address of this locally\nrun contract, we can do that a\ncouple of ways. One way is you\ncan just have two windows open\none with your front end code,\none with your back end code, and\nthe one with your back end code,\nyou can run yarn, hard hat node,\nwhich will spin up our\nblockchain node for us, and give\nus the address in here. Or what\nwe can do. And this will\nprobably be a little bit easier\nis in your window with your\nfront end code and create a new\nterminal. And now we'll have two\nterminals running. And then this\nsecond one, we're going to CD\ndown CD dot dot, and then CD,\nhard hat on Me Free Code Camp.\nAnd in here, we're going to run\nyarn, art head node. And this is\ngoing to spin up our local\nblockchain in this second\nterminal in here, where we have\ndeploying fund me deploy that\naddress, blah, blah, blah, right\nhere. And just a reminder, if I\nhit this x, it just hides the\nterminal. I can always pull it\nback up with terminal new\nterminal, and I can always hide\nit, but this is still running\ninside of my terminal. So I'm\ngoing to hide it. And what I can\ndo is I can come back over to\nour constants folder, and at the\ntop, we can do export const\ncontract address. equals, we'll\npull the terminal back up. And\nwe'll go grab, where it says,\npulling fund me deployed at\nright here. We'll copy that\naddress, put some quotes, and\nwe'll paste it in. And now we're\nalso exporting the contract\naddress, then in our index.js\nwill import the contract address\nwith comma, contract address.\nAnd now we have both the ABI and\nthe contract address. So what we\ncan do, we can say const\ncontract equals new ethers dot\ncontract of, we'll pass the\ncontract address, pass the API,\nand we'll pass it the signer.\nNow we have an ethers contract\nobject that's connected to our\nsigner, and we have the contract\naddress, and we have the\ncontract abi, now that we have a\ncontract object, we can go ahead\nand start making transactions\nthe exact same way we've made\ntransactions before we can just\nrun const transaction response\nequals a weight contract dot\nfund. And then we'll pass a\nvalue of ethers dot utils dot\nparse, ether ether mount. So\nthis is going to be how we're\ngoing to go ahead and create our\ntransaction. And if you take\nthis right now, and we go to our\nfront, we give it a little\nrefresh, make sure we're\nconnected and we hit fund, we're\ngonna get this error value must\nbe a string. That's because at\nthe mount right now is being\npassed in as nothing. Now\nnormally, we'll pass parameters\ndirectly to our functions. But\nwhat we're going to do is for\nnow is we're just going to hard\ncode this. So we'll say const.\nAt the mount equals, we'll do\nlike 77, or something we had\nfun. Now, what do you think's\ngonna happen? Well, we get this\nother air, insufficient funds\nfor intrinsic transaction cost,\nor you might get some other\nerror, but you're gonna get a\nweird error here. And that's\nbecause we're not actually\nconnected to our local hard head\nnode right now. Well, if we look\nat our Metamask, we're currently\nnot connected to the right\nblockchain, we're connected to\nrink B, or main net or whatever,\nwe need to get connected to our\nlocal host. If you look in your\nnetworks, you'll actually have a\nlocal host object here already.\nBut let's just be super\nspecific. And we'll add a new\nnetwork here, we're going to add\nsomething called our hard hat,\nlocal host. And we'll hit Add\nNetwork and we'll add Hardhead.\nLocal host in here, the RPC URL,\nwe can find from our node area,\nwhich we scroll to where our\nnode is running, we can copy\nthis URL and paste it into new\nRPC URL, chain ID is going to be\n31337 currency symbol is going\nto be go or ether. Even though\nthis pop up says it might have a\ndifferent currency symbol go,\nwe're just going to put eath in\nhere. And there is no block\nexplorer, right? Because this is\na local blockchain, we're not\ngoing to have a block Explorer.\nSo we'll go ahead and hit Save.\nAnd now we have an account here,\nwhich is great. We're connected\nto our local blockchain. And if\nwe switch our meta mask, we can\nsee we're on the local hard hat.\nAnd we are connected. Awesome.\nLet's refresh. Let's run fund\none more time. And we'll see a\ntransaction does indeed pop up.\nThis is great. But our account\nhere doesn't have any money we\nhave, we're broke, we don't have\nany local Hardhead Aetherium. So\nwe're actually going to need to\nimport one of our accounts from\nhard hat into our meta mask,\nwhich we can do so and you can\nactually do this for any account\nwith a private key so hard that\ngives us these accounts. And\nwe're going to import the\nprivate key of Count zero into\nour meta mask. So we're going to\ncopy the private key, we're\ngoing to come back to our front\nend, click on our meta mask,\nwe're gonna hit this big button,\nwe're gonna hit import account.\nIt's like type private key, and\nwe're gonna paste our private\nkey here. A quick note, if you\nchoose json file, remember how\nback in that ether section, we\nencrypted our key into a JSON\nfile with a password, you can\nactually import accounts with\nthat JSON file with the\npassword. So if you encrypt a\nkey and you want to add it to\nmeta mask, you can go ahead and\nadd it in just like this. But\nfor now, we're going to use\nprivate key, we'll paste the\nprivate key in and we'll hit\nimport. And we can see we now\nhave an account, a new account\nand account three, with a ton of\neath from our local blockchain.\nSo we'll refresh one more time,\nwe'll go ahead and connect,\nwe'll make sure that our account\nthree is connected. And if it's\nnot, we'll go ahead and hit this\nConnect button. So that now our\naccount three is what's\nconnected here. And we'll go\nahead and hit fund. And we now\nsee that we can fund this\ncontract, we can go ahead and\nhit Confirm. And if we look and\nnothing's going to happen on our\nfront end, because we didn't\ntell our front end to do\nanything once we confirm, but if\nwe go to our blockchain, we can\nsee our fun function was called\nwe've just made our first\ntransaction on a blockchain from\nour own front end, this is\nawesome, great work. But it's\nprobably a little confusing to\nthe user. If nothing happens\nhere, they're going to hit the\nfun function. And it's going to\nbe like, Oh, okay, cool. What,\nwhat happens? Now, we probably\nwant to make it a little bit\nmore obvious that something just\nhappened. And one more thing I\nwant to show you, you don't have\nto follow along here, if I hit\nfund, and then I hit reject,\nit's gonna freak out on us and\nbe like, hey, like, you hit\nreject, I don't know what to do\nnow. So we're going to make our\ncode a little bit more robust by\nadding a try catch. So we'll\ntell JavaScript to try running\nthis transaction. And then if it\ncatches an error, just to\nconsole dot log, that error. So\nnow, if I hit fund, and I hit\nreject, it's gonna, it'll still\nbe a little bit mad, but at\nleast we're catching it and it's\nnot going to break and destroy\neverything. Okay, cool. We've\ngot a transaction response here.\nAnd when we hit fund, our front\nend goes great. You've funded me\nI'm I'm super confused. Oh, one\nother point, something that\nyou'll probably run into\nmultiple times. As we're doing\nthis. If you get an error that\nlooks like this eath. JS query\nwhile formatting outputs from\nRPC, nonce to high expected not\nto be too but got form, you will\ndefinitely see this a whole lot.\nHere's what you do to fix this.\nThe reason this happens is\nbecause you've closed your\nhardhat node and then restarted\nit, and your heart had node\ngoes, Okay, well, I'm starting\nfresh, I'm starting from zero.\nBut Metamask isn't smart enough\nto know that, what we want to do\nis we want to come to our\nMetamask, we'll hit this big\nbutton, we'll go down to\nsettings, we'll go to Advanced,\nand we'll go to reset account.\nAnd yes, we're going to reset\nit. This isn't something ideally\nthat you'd like to do with an\nactual account with actual money\non a local network, this is\nfine. Now if you reset the\naccount, and you reset the node,\nwe can go ahead and hit Confirm.\nAnd it doesn't give us that\nerror anymore. So that's kind of\nthe tip there, you want to reset\nthe nuts so that our Metamask\nand our blockchain are in sync\nwith that nonce number.\nSo we have this transaction\nresponse. And we probably want\nour front end to give the user\nsome indication, hey, the\ntransaction went through. So\nwhat we want to do is we want to\nlisten to the blockchain for\nthis to finish. So we can either\nlisten for the TX to be mined.\nOr we can listen for an event.\nWe haven't learned about events\nyet. But we will. So for now,\nsince we haven't learned about\nevents yet, we're just going to\nlisten for the TX to be mined.\nOr to listen for the transaction\nto be mined, we're actually\ngoing to create a new function\ncalled function, listen, or\ntransaction mine in this is\ngoing to take as input a\ntransaction response, and a\nprovider. Now you'll notice this\nisn't an async function. For\nthis section. This is\nintentional, we don't want this\nto be an async function. And\nyou'll see why in a second.\nWe're going to be using\nJavaScript promise JavaScript\nasync functionality to its\nmassive advantage. And this is\nwhy JavaScript actually works so\nwell on the front end is because\nof how it's asynchronous. So\nwe're going to create this\nfunction listen for transaction\nto be mined, we're going to\nawait in our fund function. And\nwe're going to have this return\na promise. Let's go ahead, and\nlet's learn how to build this.\nSo we're gonna say console dot\nlog, string interpolation, we'll\nsay mining. And then in here,\nwe'll say transaction, response\ndot hash. All of our transaction\nresponse objects have a hash,\nwhich just represent that hash.\nAnd we'll do a couple of data\ndot, we'll put in our console\nhere, we're waiting for the\ntransaction to be mined, then\nwhat we're going to do is we're\ngoing to return a new promise.\nAnd the reason we're going to\nreturn a promise is because we\nneed to create a listener for\nthe blockchain. We want to\nlisten for this event to happen.\nBut we want to tell JavaScript,\nhey, wait for this thing to\nfinish looking, wait for this\nthing to finish looking. Now\nhere's where this gets a little\nbit tricky. In our fund\nfunction. After we create the\ntransaction, we basically want\nto tell JavaScript Hey, wait for\nthis TX to finish. So our code\nis going to look as simple as\nawait listen for transaction\nmine. And we're going to pass it\nthe trans action response\nand our provider. So we're\nsaying hey, listen for this\ntransaction finish. And we're\nusing this await keyword,\nbecause again, the await keyword\nsays okay, we're gonna stop\nright here. We're gonna stop\nuntil this function is\ncompletely done. Now in this\nlisten for transaction in mind,\nwe have to define how we're\nactually going to listen for\nthis. So we're going to say\nlisten for this transaction to\nfinish. Ethers actually comes\nwith a way for us to listen for\ntransactions and listen for\nevents, which again, we haven't\nlearned About, but don't worry\nabout that yet. So we can go to\nthe ethers docs. And we can look\nup once. Contract dot once.\nThere's a whole bunch of\nlisteners that we can use to\nlisten for events and listen for\ndifferent things to happen, we\ncan do this thing called\nprovider dot once where we\nlisten for some event. And once\nthat event fires, we call some\nother function that we've\ndefined. Now, we haven't talked\nabout events yet. And again,\ndon't worry about this quite\nyet. One of the events that we\ncan wait for is we can just wait\nfor the transaction receipt to\nfinish, right, because once we\nget a transaction receipt, that\nmeans that the transaction has\nactually finished going through.\nSo we're going to use this\nprovider dot once syntax to wait\nfor the transaction receipt,\nwhich is going to be our event,\nwhich isn't really an event, but\ndon't worry about that yet. And\nthen we're going to call some\nlistener function that we\ndefined, you can also do\nprovider.on, which will trigger\nanytime your event fires\nprovider once just triggers one\ntime, we only care about this\ntransaction going through one\ntime. So we're passing our\nprovider object. So we're gonna\nsay provider dot once our event\nwhich is just going to be\ntransaction response, hash,\nprovided on transaction response\ndot hash. So once we get this\nhash, which will pretty much get\nright away, we're going to call\nour listener function. Now we\ncan create a function listener\nlike this, and then just pass\nlistener in here. But we're\ngoing to do an anonymous\nfunction here, because that's\ntypically what we see as the\nsyntax for these loops. And so\nfar, we're doing provider dot\nonce to do this anonymous\nfunction, we're going to do just\ntwo little parentheses here. And\nthis arrow notation. So this by\nitself represents an anonymous\nfunction. So we're saying, hey,\nthere's some function, it\ndoesn't take any parameters, and\nit doesn't have any code, this\narrow function, this whole thing\nis saying this is an anonymous\nfunction. So we're saying\nprovided at once transaction\nhash happens, here's the\nfunction that you want to\nexecute. It doesn't do anything\nright now. But let's have a do\nsomething. So once this\ntransaction dot response\nfinishes, we're going to take a\ntrans transaction received as an\ninput parameter, or our our\ncallback function, or our\nlistener function. And all we're\ngoing to do is we're gonna say\nconsole dot log, completed with\na little string interpolation,\ntransaction receipt, that\nconfirmations, confirmations,\nand then completed with\ntransaction receipt,\nconfirmations, confirmations. So\nonce this provider dot once sees\nthat there's a transaction hash,\nit's going to give as an input\nrammer to our listener function,\nthe transaction receipt, kind of\nthat same syntax that we've been\nseeing this whole time, once a\ntransaction response finishes,\nwe get the transaction receipt,\nand we can do stuff with it. And\nwe see how many block\nconfirmations it has. For us,\nthis pretty much should always\nbe one. Now if we save this, go\nback to our front end, and we\nhit fund, it's going to work,\nwe're going to give the user\nsome indication that it worked,\nwhich is great. But it's not\nreally going to work the way\nthat we want it to work. We have\nthis console dot log done right\nafter we do the await, listen\nfor transaction mine, and we\ncome back and we hit fund, we\nhit confirm, it actually doesn't\ngo in the order that we want it\nto go, it goes mining this thing\nthat it says Done. And then it\nsays completed with one trip\nconfirmation what what's going\non here, we should write\ncompleted before we write done,\nbecause that's the order that we\nhave this in. But it looks like\nit's words, it's going out of\norder. What what's going on\nhere, what's going to happen is\nwhen we call listen for\ntransaction mine, or listen for\ntransaction, mine function is\ngoing to kick off, but it's\ngoing to kick off provided on\nonce as its own process. So\nawait listen for transaction,\nmine will kick off the listener,\nbut it doesn't wait for this\nlistener to find the transaction\nresponse. So this function will\nactually finish before provider\ndot once finishes. So after it\nkicks off the listener, it'll\nrun to the next line of our\ncode, which is console dot log\nand done. Our front end we'll go\noh, oh, you kicked off a\nlistener earlier. Let me go back\ndown and let me recheck to see\nif it's finished. And if it has\nfinished, I'll go do what it\ntold me to do. And this is where\nwhat's known as the event loop\nkicks in.\nWe don't actually wait for this\nprovider that wants to finish,\nwe add this provided at once\nonto this queue called the event\nloop. And our front end is going\nto periodically check back to it\nto see if it's finished. So we\nwant to adjust our code. So we\nwait for the listener to finish\nlistening, which is where we're\ngoing to get into promises here.\nSo what we want to do is we want\nto adjust this function to now\nreturn a promise. And we're\ngoing to use this syntax a\ncouple of times in the future.\nSo what we're going to do is\nwe're going to say hey, we want\nto wait for the listener To\nfinish listening, we're going to\nwrap this whole thing into a\npromise. And we're going to say\nreturn, new promise. And a\npromise takes a function itself\nas an input parameter. So again,\nwe'll use kind of this anonymous\nfunction notation. And it will\ntake two input parameters\nresolve and reject. So resolve\nsays, hey, if this promise works\ncorrectly, call this resolve\nfunction. And for us, this\npromise is going to be done when\nthe listener finishes listening.\nAnd then we would reject if\nthere was some type of timeout,\nwe're not going to write the\nreject function. But in the\nfuture, if you were to do this\nfor production, you'd add some\ntimeout as the reject parameter.\nBasically, you're saying, hey,\nonce the listener finishes\nlistening, we're going to\nresolve and if it takes too\nlong, we're gonna say ask for\nyou, you took too long, and\ninstead of closing it off, here,\nwe're going to close it off\naround this provider thing. So\nwe're gonna say return new\npromise, resolve, reject. And\nonly once this transaction gets\nfired, are we going to resolve\nthis promise, like so. So what\nis happening here, so we're\ngoing to put the resolve inside\nof this provider at once. So\nwe're saying, once this\ntransaction hash is found, then\nwe're going to call this\nfunction, we're gonna say\nconsole dot log, and then we're\ngoing to resolve so this promise\nonly returns once a resolve or\nreject is called. And we're\ntelling it only resolve only\nfinish this function once.\nTransaction response dot hash is\nfound, because it's going to be\ninside of these little squiggly\nparentheses for provider dot\nonce, the promise right now only\nresolves after it's fired. It's\nevent here. If this was really\nconfusing, just copy paste this\nand move on, we're getting a\nlittle bit deeper into front end\nstuff here. So hopefully, this\nwas clear, if not definitely\njump in to the GitHub\ndiscussions to start asking\nabout this stuff. But now that\nwe've updated this, we can come\nback to our front end, we can\nhit the fund button. And\nhopefully this time, everything\nwill go in order. We'll hit\nconfirm, we see mining\ncompleted, and then we see done.\nAnd the reason for this is\nbecause again, our await keyword\nis now waiting, it says oh,\nyou're returning a promise, I\nneed to await I need to wait for\nit to resolve or reject. And we\nonly resolve the promise once\nour provider finds this\ntransaction hash and this\ntransaction receipt, this is\nthis listen for transaction\nmine. In future sections, all of\nthis is going to be abstracted\naway for us. So life is going to\nbe much easier, but it is\nimportant to understand what's\nactually going on here. Awesome.\nSo now we're giving the front\nend some indication of what's\ngoing on. Our fun function is\ndone well, no, not really. Why\nnot? Well, because right now\nwe're hard coding the eath\namount to 0.1. And on the front\nend, we probably don't want to\nhard code it, we probably want\nto allow users to fund as much\nor as little as they want. So we\nactually need to change this\nfrom just a button to a input\nform. So to do this, we're gonna\ngo back over into our HTML. So\nwe'll go back to index dot HTML.\nAnd we're going to change this\nfun section here, we're going to\nadd some form information. So\nwe're going to keep this button\nas it is, or we're going to add\nlike a little text box to input\nas much eath as they want. So\nI'm going to create a label,\nwe're gonna say it's for, it's\ngoing to be fund and this label\nwe're gonna say, is eath amount,\nand then we're gonna close\nlabel, this is basically just\ngoing to create a label. And if\nwe go back to our front end, we\nnow just have this Etham out\nlabel that isn't labeling\nanything. Now we're going to\ncreate an input, and we're going\nto give it an ID of eath amount.\nAnd we're going to give it a\nplaceholder\nof 0.1. And then we're gonna\nclose the input. So now if we\nflip to our front end, we have\neath amount, labeling this\nlittle text box with a\nplaceholder of 0.1. And we can\nadd stuff in here, you know,\nblah, blah, whatever. And one\nmore thing, if you have some\ntags, but you don't put anything\nin between them, you can\nactually shorten it by just\nputting the little closing thing\nat the back of it like this. So\nif you don't have anything\nbetween your tags, you can just\nclose them like this, these two\nare equivalent, boom, boom,\nboom, boom, those are the same\nthing. Great. When we called\nfund right now we're calling\nfund and we're not passing any\nparameters. Let's update our\nfund to no longer be hardcoding\neath amount in here, and we'll\nhave and we'll have our fund\nfunction populated by whatever\nwe put in this eath amount input\nbox in our fund function,\ninstead of saying const eath\namount equals 0.1. We'll grab it\nfrom this eath amount ID and\nwe'll say document dot get\nelement by ID eath amount, dot\nvalue. So we're going to grab\nwhatever value In this input box\nhere, now, in our index.js, we\nhave console dot log funding\nwith eath amount, if in our\nfront end, we do 1.7. And we hit\nfund, we now see in our console\ndot log, it says funding with\n1.7. And we'll get 1.7. And our\nlittle fun section confirm, it\nwill mine it, it'll complete it,\nand then say, done. Awesome. So\nnow we've added a little text\nbox here. So people can fund as\nmuch or as little as they want.\nPerfect, this whole thing can\nkind of be considered a form.\nThere's also a form tag, but\nwe're going to just use this for\nnow. All right, great. We're\ndoing a lot of funding right,\nand we keep funding our contract\nwith more and more Ethan, we\nkeep adding more and more stuff,\nwe probably want a button to\nkeep track of how much is\nactually in here. So let's just\nadd a really simple balance\nbutton. And let me actually just\nmove this down to the bottom\nhere, much better. So we'll say\nbutton, id equals balance\nbutton. We'll call it get\nbalance. Now we have a get\nbalanced button. And it's not\ngoing to do anything because we\ndon't have a get balanced\nfunction. So let's go back to\nour index.js. And we'll create a\nget bounced function async\nfunction get bounce. And we'll\njust do what we've been doing so\nfar. If type of window dot\nAetherium does not equal,\nundefined, then we're going to\ndo const provider equals new\nethers, ethers, dot providers\ndot web three provider of\nwindow, that Aetherium then will\ndo const balance equals awaits\nprovider dot get balance,\ncontract address, which again,\nwe're importing way up at the\ntop, and then we'll just do\nconsole dot log ethers dot utils\ndot format, ether, bounce this\nformat ether function ethers\nutils, which you can find in the\ndocumentation to make reading\nethers, formatted numbers much\neasier to read. Then same as\nwhat we've been doing before,\nwe're going to go up, we're\ngoing to copy this fun button\nline, paste it will say balance\nbutton equals document dot get\nelement by ID, balance button.\nAnd then we'll say balance\nbutton on click equals get\nbalance, we're gonna come back\nto our front end, we'll do a\nquick refresh, we'll do get\nbalance. And now we can see the\nbalance in the console, we can\nfund with more like 1.8, we'll\nhit fund metamath pops up, we'll\ngo ahead and confirm mining\ncompleted done, we hit get\nbalanced, and now we're at 3.8.\nFantastic. Alright, let's keep\nit going. What do we need to do\nnext, we're gonna go ahead and\neat our withdrawal function\nhere. So let's create that this\nis gonna look really similar to\neverything we've done so far. So\non our index dot HTML, let's\ncreate a new button that we can\ndo by copying this whole line,\npaste it underneath, call this\nwithdraw button, we'll call\nwithdraw. And we'll call this\nwithdraw. And then in our index,\ndo the same thing, we'll copy\nthis, paste it below. So with\ndrop button was document get\nelement by ID, withdraw button,\nwithdraw button.on Click equals\nwithdraw. So let's make a\nwithdrawal function down at the\nbottom. We'll go ahead, say\nasync. Function withdraw,\nwill do the exact same that\nwe've done above. And I can even\njust copy everything from the\nget balance and just remove the\nbalance section. If type of\nwindow dot Aetherium does not\nequal to undefined, then we'll\ngrab the provider here. And same\nas the fund contract, we'll grab\nthe signer and the contract. So\nlet's just grab those two lines.\nPaste them down here called\nsigner equals provider dot get\nsigner. Contract equals new\ncontract, blah, blah, blah.\nOkay, cool. Now we're gonna do\nthe exact same here as we did\nwith the fun function. So we're\ngonna do a little try, catch,\nand then we'll even add the\ncatch here, catch error, console\ndot log error. And inside of our\ntry, we'll do const transaction\nresponse equals await, contracts\ndot withdraw. We don't need to\nput any parameters in here. Oh,\nthen actually, let's do a little\nconsole dot log, withdrawing,\nand then we'll get this\ntransaction response. And then\nwe'll listen for this\ntransaction to get mined as\nwell. By running a Wait, listen\nfor transaction mine transaction\nresponse comma, provider And\nthat's it, since we can reuse\nthe functionality from our\nlisten for transaction mine. So\nnow we'll refresh, we'll make\nsure we're connected, check the\ncurrent balance, which is 3.8.\nNow we'll go ahead and withdraw.\nWe see our little withdrawing\nconsole dot log, we'll hit\nConfirm. And it looks like we've\ncompleted it, if we look in our\nMetamask, our bounced will have\nbeen increased by the amount\nthat was added here. And now if\nwe hit balance, we do indeed see\nzero, we can even double check\nthat this is actually working,\nwe can see our balance is 9.99.\nLet's go ahead and even fund\nthis with 99 eath. Good confirm,\nlooks like it's completed. Our\nmeta mask now shows 99.00. And\nif we go ahead and withdraw,\nconfirm, that withdrawal has\ngone through, we can see our\nbalance is back up to 9999. And\nnow let's just go back and\nchange. Hey, what's good. We'll\nrefresh our front end. And now\nwe can see you've done it, we've\ncreated a minimalistic website\nthat allows us to connect to the\nblockchain and call functions\nfrom a front end. And from a\nwebsite, this is absolutely\nmassive, you should be\nincredibly proud and incredibly\nexcited with yourself. Now, this\nis definitely a minimalistic\nversion. And we're going to work\nwith more powerful and more\nmodern front end frameworks. But\nthis will give you an idea of\nexactly what's going on behind\nthe scenes when we're working\nwith those more advanced front\nends, and we'll style them up.\nSo they look a little bit better\nthan this. But with that being\nsaid, you've just learned the\nbasics of how these front ends\nwork. And now that you know how\nto push things up to get, I\nhighly recommend you start\npushing all of these projects up\nto your GitHub, they will be a\nrecord that you've actually done\nthe work and you've built these\nsmart contracts. And if you're\nlooking to get an internship\ndown the line, if you're looking\nto help other GitHub projects,\nthis will be a record of hey, I\ncan do this, what I can build\nlook at what I know how to do so\ncongratulations on your first\nfull stack or your first front\nend application. Before we move\non, let's do a quick refresher\nof everything we've learned\nhere. So number one, typically,\nyou want the repository or your\ncode base. For your back end for\nyour smart contracts to be a\ndifferent repository than your\nfront end, your front end code\nis going to be a combination of\nHTML and JavaScript. When we\nhave a wallet like meta mask,\nwe're injecting these browser\nbased wallets into the window\nobject of our browsers like\nwindow dot Aetherium. Each\nbrowser will have a different\nextension here, reason we do\nthis, we want to connect to the\nRPC URL that's built into our\nmeta masks. And in this way,\nwe're making the same API calls\nto an RPC URL as we do in hard\nhat as we do in remix as we do\nin ethers, etc, we created our\nfirst promise based function\nwhere we had a listener kickoff,\nand we wrapped it in a promise\nto say, hey, we want to wait for\nour listener to finish since\nthis is a promise based\nfunction, we set a weight listen\nfor transaction mind and we\nwaited for this transaction to\nfinish so that on our front end,\nonce our transaction finished\ngoing through, we can tell the\nuser it's finished going through\nand we can continue doing other\nstuff. Give yourself that round\nof applause and let's move on to\nthe next section.\nAll right, welcome to the next\nsection. We are now on Lesson\nNine, our hardhat smart contract\nlottery, which again, all the\ncode for this section is going\nto be available in the GitHub\nrepo associated with this\ncourse. Alright, so let me show\nyou what we're about to build.\nI'm going to show you the front\nend login, you don't have to do\nthe front end, if you don't\nwant. But the front end does\ngive us a nice way to visualize\nthe lottery that we're building.\nHere, we're building an\napplication that allows users\ncompletely decentralized to\nallow us to engage in a fair, a\nverifiably random lottery. This\nis the application that would\nactually fix the McDonald's\nissue that we talked about much\nearlier. So first, we got this\nKinect Wallet button that we're\ngoing to click to connect to\nmeta mask. And here, we're\nactually going to show you how\nto connect to more than just\nMetamask wallet connect to trust\nwallet, math, wallet, any of\nthese wallets, and we'll show\nyou how to customize even more.\nSo we're going to connect to\nMetamask. Here, we'll choose our\naccount that we imported in from\nHardhead, we choose Next we're\ngonna choose Connect. And\nremember, for our front end bit,\nwe're gonna go to Settings\nAdvanced reset account, if we're\nworking with a brand new hard\nhat blockchain. Now, the front\nend doesn't look super nice, but\nwe have an enter raffle button.\nAnd we have a little bit of UI\ntalking about the current number\nof players and then the most\nprevious winner of a raffle. So\nwe can go ahead and enter the\nraffle and allow anybody to pay\n0.1 eath. To enter our smart\ncontract, we get a little\ntransaction saying transaction\ncomplete, and we get the current\nnumber of players is one, we can\ncontinue to enter the raffle and\nanybody can enter this raffle.\nAnd this, the smart contract\nwill keep track of all the\nplayers in here, we're going to\nrun this on a timer, the lottery\nis going to automatically\ntrigger somebody to win. And to\ndo this, to get a pure\nverifiable random number, we're\ngoing to be using chain link VRF\nto get a pure verifiably random\nnumber. And then we're gonna use\nchain link keepers to trigger\nthe automation to automatically\nhave one of these winners get\npicked every time one of those\ntime intervals is up. Once the\nkeepers kick it off, they will\npick a winner, our decentralized\nlottery will say the most\nprevious winner is so and so.\nAnd they will get all the money\nfrom this lottery making a\nperfectly fair decentralized\nlottery, we're going to call our\ncontract, raffle dot soul but\nyou can call it lottery dot soul\nor really whatever you want. And\nwe're going to make it look\nreally, really nice. So now\nwe're back in our Visual Studio\ncode. This is going to be the\nproject. If you learn this, you\nhave the skills to learn all the\nrest of the smart contract\nconcepts, and you are going to\nbe able to do great things in\nthe space. This is going to be\nyour flagship project, this is\ngoing to be the one that you can\nbe the most excited and the most\nproud about for this tutorial.\nSo let's go ahead and let's\ncreate a new folder. So we're\ngonna do MK dir, hardhat, smart\ncontract lottery, FCC or smart\ncontract, raffle, whatever you\nwant to call it, then we're\ngoing to cd into our hard hat,\nsmart contract lottery Free Code\nCamp. And we're going to type\ncode period, or we're going to\nopen this up in a new folder,\nhowever we choose to do. So now\nthat we're in our new folder,\nwe're going to create our new\nhard hat project. So we're going\nto do yarn, add dash dash dev\nhard hat. And we'll get our node\nmodules are package dot JSON and\nour yarn dot lock. Now we'll do\nyarn hardhat. To get started\nwith a new project, and we're\njust going to select create an\nempty hard hat dot config dot j\ns because we know what a basic\nproject looks like. And we're\ngonna give this project the\ncustomizations that we want to\nsee, we're going to create an\nempty hard hat dot config. And\nnow in here we have a blank\nhardhead.config.js with almost\nnothing in here. So we're\nstarting completely from\nscratch. Now we're going to add\nall of our dependencies in here.\nAnd oftentimes, you'll add these\nsequentially as you build but\nwe're just going to add them all\nin one line, and there are a lot\nof them. So we've left a copy,\npaste the whole section of the\nfull blockchain solidity course,\nJ S, for you to just copy,\npaste, so you can install\neverything in one go. So grab\nthat line, and it's going to\nhave everything that we've been\ntalking about. And we'll just\nhit enter, and we'll install all\nof these.\nAnd as you create more and more\nprojects, you'll get the feel of\nwhat you like for your\ndependencies and what tools that\nyou like to use. Remember, at\nthe end of the day, the tool\nthat's best for you and best for\nthe job is the tool that you\nlike the most. There never\nreally is a one tool fits all,\nthere's almost always going to\nbe trade offs. Alright, now that\nwe have all those dependencies\ninstalled, if we look at our\npackage, JSON will have this\nmassive dev dependencies, we'll\nhave everything in Node modules\nwill have everything in yarn dot\nlock. And of course, as we know,\nin order for any of these to\nactually work, we need to add\nthem into our Hardhead config.\nNow, there's a lot of stuff to\nadd in here as well. So like\nonce again, if you want to come\nto the heart at smart contract,\nlottery, FCC, and go to the\nHardhead config, you can just\ncopy paste everything and place\nit into your project so that you\ndon't have to always type\neverything out yourself. Meclabs\nHardhead waffle anomic labs\nstarted ether scan harder to\ndeploy slitted coverage, or had\ngas reporter heart had contract\nsizer, which we haven't talked\nabout yet. But we will Don't\nworry. And then require dot env\ndot config. And as you all know,\nall these little semicolons are\npopping up and those are going\nto drive me absolutely crazy. So\nonce again, we can create a dot\nprettier, RC. And if you want to\ncopy this as well, from one of\nyour previous projects are free\nto do so. One thing that I added\nin here was a print width of\n100. This just changes how long\na line can be before it goes on\nto a new line. That's the only\ndifference here. Now if we go to\nour config and hit save, they go\naway, thank goodness. Now if we\nlook at our solidity version,\nwe're currently using zero point\n7.3. Let's go ahead and update\nthat to 8.8 or 8.7, or whatever\nyou want to use. Now that we\nhave all the basic setup, we can\nbegin coding our smart\ncontracts. So we first need to\ncreate a new folder called\ncontracts where we're going to\nstore all of our contracts. And\nlet's go ahead and create a new\nfile called lottery dot soul or\nraffle dot soul or whatever you\nwant to call it. I'm going to\ncall mine raffle dot soul. And\nyou might see this indexing\nthing happened from time to\ntime. It's our hard hat,\nsolidity extension, indexing all\nof our node modules. So it knows\nhow to highlight things and\nknows how to work with\neverything in our solidity\nfiles. So that's what happens\nwhen that pops up. Now before we\njump in and create it, let's\nfigure out what we're going to\ndo. So we're going to create our\nraffle contract. And what do we\nwant people able to do? Well, we\nprobably want people be able to\nenter the lottery, you know,\npaying some amount, we're\nprobably going to want to be\nable to pick a random winner.\nBut we want this to be\nverifiably random, we want this\nto be untampered with a bowl.\nAnd we also want winner to be\nselected every X minutes or\nyears or months, aka we want\nthis to be completely automated.\nSo we want to deploy the smart\ncontract and almost have no\nmaintenance almost have nobody\never have to touch it again. And\nit'll just automatically run\nforever. This is the power of\nsmart contracts. As we know,\nsince we're picking a random\nnumber, and we have some event\ndriven execution, we know that\nwe're going to need to use a\nchain link Oracle, since we're\ngoing to need to get the\nrandomness from outside the\nblockchain. And we're going to\nneed to have that automated\nexecution. Because a smart\ncontract can execute itself, we\nneed somebody to automatically\ntrigger these. So to trigger\nselecting a winner, we're gonna\nhave to use the chain link\nkeepers. And that's pretty much\ngoing to be our entire code.\nNow, I usually like to do this\nbefore I start any project. And\nthe reason that I do a little\nbit of brainstorming is because\nwe don't want to just jump in\nand really do anything, we want\nto have a good idea of what\nwe're trying to build so that we\ncan write tests for it, so that\nwe can know if we're going in\nthe right direction, etc. Now\nthat we have a good idea of\nwhere we're going, let's build\nit. So per usual, let's do spdx\nlicense identifier. And my team\nwill do pragma solidity little\ncaret here, zero point 8.7, even\nzoom out, just a hair will trash\nthat and we'll say contract,\nraffle, we can even make sure\nthat we're not going crazy by\ndoing a little yarn Hardhead\ncompile and compiled\nsuccessfully, we want it to be\nable to enter the lottery want\nus to be able to enter it. So\nmaybe we'll create a function\ncalled enter raffle. What else\ndo we want to do, we want to be\nable to pick a random winner. So\nmaybe we'll create a function\ncalled pick a random winner, and\nboom. So let's comment out pick\nrandom winner for now. And let's\njust work on this enter raffle\nthing. In the past, we've\ncreated projects like Funmi,\nwhere people can send ether to\nour contracts or send whatever\nnative blockchain token to our\nsmart contracts using the\nmessage dot value based off of\nsome USD value. For this one,\nwe're just going to have the\nentrance fee instead be USD\nbased, it's just going to be\nthat native asset. So for our\nenter raffle, we don't have to\nset a USD price, we can just set\na minimum eath price. So up at\nthe top, let's pick our minimum\nprice. So we'll do a un 256\nentrance fee. And now some of\nour learnings from our last\nsection should come in here, we\nnow know that this entrance fee\nis going to be a what, it's\ngoing to be a storage variable.\nSo let's prepend it with s\nunderscore let's make a private\nvariable because we always want\nto set our visibility. But let's\nhave the entrance fee be\nconfigurable. Well, let's create\na constructor now. And we'll\nhave this entrance fee be\nsettable in our constructor, so\nour constructor will take a UNT\ntwo to the sixth entrance fee, s\nunderscore entrance fee equals\nentrance fee. Well, if we're\ngonna only set this one time, we\nmight as well make this a\nconstant or an immutable\nvariable. So let's make this an\nimmutable variable so that we\nsave some gas we'll change this\nfrom S to I and now we're saying\nyou interviewed six private\nimmutable I entrance fee equals\nentrance fee. Now we probably\nare going to want other users to\nsee the entrance fee. So down\nbelow, we can create function\nget entrance fee, and this will\nbe a public view function which\nwill returns a UN to the set\nNext, and we'll just say return\nentrance fee. Now we have a\nfunction that users can call to\nget the entrance fee. But we, as\ndevelopers can use this AI\nentrance fee to know this is an\nimmutable variable. This is\npretty cheap gas wise for us to\nread from in our enter raffle,\nwe've done a ton of these\nbefore, all we need to do is we\njust need to require the message\ndot value is greater than that I\nunderscore entrance fee, what\nwe've learned before about those\nerror codes, so we could use\nrequire message dot value, or we\ncould do one of these customers,\nwhich is going to be a lot more\ngas efficient, because instead\nof storing this string, we're\njust going to store an error\ncode in our smart contract. So\nlet's do that. Instead, we'll\nsay if the message dot value is\nless than our eye entrance fee,\nthen we're just going to revert\nthe whole transaction with some\nerror code. And we'll use a best\npractice naming raffle\nunderscore underscore not enough\neath entered. And we'll grab\nthis arrow code. And we'll have\nif the user doesn't send enough\nvalue will revert with not\nenough eath entered now that we\nknow they're calling into raffle\nwith enough value, we're\nprobably going to want to keep\ntrack of all the users who\nactually enter our raffle. That\nway, when we pick a winner, we\nknow who's in the running. So\nlet's create an array of players\nat the top error here. And then\njust to make this look even\nnicer, we'll do a little comment\nhere. And we'll say state\nvariables. And we'll combine\nboth our storage and are not\nstorage variables just in this\nstate variable section. So we'll\ndo address array players. Now\nplayers, of course, is going to\nhave to be in storage, because\nwe're going to modify this a\nlot, we're going to be adding\nand subtracting players all the\ntime. So we're going to do s\nplayers will make this private\nas well. And we're going to make\nthis address payable players\nbecause one of these players\nwins, we're going to need to\nhave to pay them. So we'll make\nthis address payable private as\nplayers. And since we're going\nto make this private, and it's\nprobably good that we know who's\nin the players array, we'll even\ndo function it player. This will\nbe a public view that returns an\naddress of one of these players.\nAnd we'll just return s players\nof index will have this\nfunction, take a un 256 index as\nan input parameter, we know that\nplayers is going to be a storage\nvariable. And we're going to add\nit to our enter raffle Oh, and\nwe definitely want our Inter\nraffle to be public and to be\npayable. Since we're having\npeople send message dot value,\nand we want anyone to be able to\nenter our raffle. So it'll be\npublic, it'll be payable, it'll\nbe perfect. Now that we have our\narray, and someone's entered the\nraffle, we'll do s players dot\npush message dot sender. Now,\nthis doesn't actually work\nbecause message dot sender isn't\na payable address. So we'll need\nto typecast it as a payable\naddress just by wrapping it in\npayable. So now we have a way to\nkeep track of all the players\nthat are entering\na raffle. Now one of the\nconcepts that we haven't gone\nover yet is actually going to be\nevents. And events are really\nimportant to our smart\ncontracts. Whenever we update a\ndynamic object, like an array or\na mapping, we always want to\nomit an event when we get to\nless than 10. And then\nespecially less than 15 with the\nnext Jas and if T marketplace,\nthese events will make a ton of\nsense, especially for front end\ndevelopers. So right now events\nmight be a little bit of a weird\nthing for you as we explain it.\nBut as we continue on, they'll\nstart to make more and more\nsense. So we're going to start\nadding events to our smart\ncontracts. Whenever we update\none of these dynamically sized\ndata structures. And to learn\nmore about events and how to use\nthem. We're gonna watch another\nvideo that explains all about\nevents. You can actually follow\nalong with this video as a side\nproject. But let's learn all\nabout events. Now, if you've\nworked with solidity, you've\nprobably seen these things\ncalled events before or maybe\nyou haven't seen something like\nevents. But you've always\nwondered how chain link or the\ngraph or some of these other off\nchain protocols work under the\nhood. And in this video, we're\ngonna learn about logging and\nevents in solidity, viewing\nthose events on ether scan, and\nthen working with them in hard\nhat. Now it's the Ethereum\nvirtual machine, or EVM. That\nmakes a lot of these block\nchains tick, like Aetherium. And\nthe EVM has this functionality\ncalled a logging functionality.\nWhen things happen on a\nblockchain, the EVM writes these\nthings to a specific data\nstructure called its log, we can\nactually read these logs from\nour blockchain nodes that we\nrun. In fact, if you run a node\nor you connect to a node, you\ncan make a F get logs call to\nget the logs. Now inside these\nlogs is an important piece of\nlogging called events. And this\nis the main piece that we're\ngonna be talking about today.\nevents allow you to print\ninformation to this logging\nstructure in a way that's more\ngas efficient than actually\nsaving it to something like a\nstorage variable. These events\nand logs live in this special\ndata structure that isn't\naccessible to smart contracts.\nThat's why it's cheaper because\nsmart contracts can access them\nso that If the trade off here,\nwe can still print some\ninformation that's important to\nus without having to save it in\na storage variable, which is\ngoing to take up much more gas.\nEach one of these events is tied\nto the smart contract or account\naddress that emitted this event\nin these transactions. listening\nfor these events is incredibly\nhelpful. Let's say for example,\nyou want to do something every\ntime somebody calls a transfer\nfunction. Instead of always\nreading all the variables and\nlooking for something to flip\nand switch, all you have to do\nis say, listen for event. So a\ntransaction happened, an event\nis emitted. And we can listen\nfor these events. This is how a\nlot of off chain infrastructure\nworks. When you're on a website,\nand that website reloads when a\ntransaction completes, it\nactually was listening for that\ntransaction to finish listening\nfor that event to be emitted, so\nthat it could reload or it could\ndo something else. It's\nincredibly important for front\nends. It's also incredibly\nimportant for things like chain\nlink, and the graph in the chain\nlink network. A chain link node\nis actually listening for\nrequest data events for to get a\nrandom number, make an API call,\nor etc. Sometimes there are way\ntoo many events. And you need to\nindex them in a way that makes\nsense that you can query all\nthese events that happen at a\nlater date. The graph listens\nfor these events and stores them\nin the graph so that they're\neasy to query later on. So\nevents are incredibly powerful.\nAnd they have a wide range of\nuses. They're also good for\ntesting and some other stuff,\nbut you get the picture. They're\nreally sick. Now that we know\nwhat events are, let's look at\nwhat they look like how we can\nuse them and how we might use\nthem in our smart contract\ndevelopment suite. Now here's\nwhat an event is going to look\nlike. We have an event here\ncalled stored number. So we have\nbasically a new type of event\ncalled stored number. We're\nsaying, hey, solidity, hey,\nsmart contract, we have this new\nevent thing, we're going to be\nomitting things of typed stored\nnumber in the future. When we\nemit this event, it's going to\nhave these four parameters, it's\ngoing to have a unique 256. For\ncalled old number. Are you\ninterested? Is it called new\nnumber are you intimidated six\ncalled add a number and an\naddress called center. Now for\nthe astute people here, you\nmight have noticed that there\nwas another keyword in here, the\nindex to keyword and this is a\nreally important keyword. When\nwe omit one of these events,\nthere are two kinds of\nparameters, there are the index\nparameters and the non indexed\nparameters, you can have up to\nthree index parameters. And\nthey're also known as topics. So\nif you see a topic, you know\nthat that's going to be an\nindexed parameter. Index\nparameters are parameters that\nare much easier to search for,\nand much easier to query than\nthe non index parameters. In\nfact, we recommend F get logs\nfunction, it even has a\nparameter allows us to search\nfor specific topics. So it's\nmuch more searchable than the\nnon indexed ones. The non\nindexed ones are harder to\nsearch because they get ABI\nencoded, and you have to know\nthe API in order to decode them.\nNow, this is told our smart\ncontract that there is a new\ntype of stored number, a new\nkind of event here, we need to\nactually emit that event in\norder to store that data into\nthe logging data structure of\nthe EVM. To do that, we need to\ndo something that looks like\nthis. This is what it looks like\nwhen we emit an event, it looks\nvery similar to calling a\nfunction. So you call a mitt and\nthen the name of the event. And\nthen you add all the parameters\nin there that you like. Here's\nthe full example of a smart\ncontract that has an event and\nis going to be the example that\nwe walked through in hard hat.\nNow in this smart contract,\nwhenever anybody calls the store\nfunction, we're going to omit\nthis event. Here's an example of\na transaction where we call the\nstore function with a value of\none, let's look into the logs to\nsee what this event actually is\ngoing to look like an event is\ngoing to be broken down like so\nthe address of the contract or\naccount, the event is emitted\nfrom the topics or the index\nparameters of the event data.\nThis is the ABI encoded non\nindex parameters of the event.\nWhat does this mean? This means\nthat we took those parameters\nthat were non indexed, we match\nthem together with their API or\napplication binary interface,\npumped them through an encoding\nalgorithm, and boom, this is\nwhat we got. If you have the\nAPI, they're very easy to\ndecode. If you don't have the\nABI they are very hard to decode\nthese non indexed parameters\ncost less gas to pump into the\nlogs. Now in this particular\ncontract, since we have verified\nthe code, we verified the\ncontract ether scan knows what\nthe ABI is, and we can view this\nin Deke or decoded mode. Hex\nmode is obviously the non\ndecoded mode, or in its raw, hex\nor hexadecimal or encoded mode.\nYou can read more about the\nlayout of these events in the\nsolidity docs. Now, so that's\nthe basic introduction of\nevents. And for those of you who\nwant to watch the rest of that\nvideo, and who wants to actually\npractice using events yourself,\nthere's a link to these videos\nand the code repository\nassociated with that video, if\nyou want to play with it, and if\nyou want to learn more, so feel\nfree Ready to refer back to the\nfull blockchain solidity course,\nJas, if you want to go deeper\ninto events now that we're back,\nand we've learned a little bit\nmore about events, let's add\nsome events to this contract.\nRemember, these events get\nemitted to a data storage\noutside of this smart contract.\nLet's create an event called\nraffle enter a good syntax for\nnaming events, name events, with\nthe function name reversed. So\nfor enter raffle, we're gonna\nsay raffle entered. So up at the\ntop below our state variables,\nbut above our constructor, we'll\ncreate a new section called\nevents. And we'll create our\nfirst event. So we'll do event,\nraffle, Enter. And we'll just\nhave this raffle enter take one\nindex parameter, it'll be an\naddress indexed player. So in\nour Inter raffle, we're going to\nsay omit raffle enter. And we're\njust going to pass it message\ndot sender. I'm going to remove\nthese comments for now. But feel\nfree to leave them in as you\ncode along. Now in this part of\nmy raffle coding or my lottery\ncoding process, I probably would\nstart already writing some tests\nand already writing some deploy\nscripts. The reason that we do\nthis is it's good to test our\nfunctionality as we progress.\nAnd oftentimes, when I'm writing\nsmart contracts, I'm constantly\nflipping back and forth between\nmy deploy scripts, my contracts\nand my tests to make sure\neverything is doing exactly what\nI want it to do for the purpose\nof this course. And just to make\nit easy for you to learn and\nfollow along, we're not going to\ndo that. And we're just going to\nkeep writing our smart contract\nalmost to complete and then move\nto our deploy scripts and tests.\nSo in its minimalistic sense, we\nessentially have a way for\npeople to enter our raffle. Now\nwe need a way to pick the random\nwinner. And this is where we're\ngoing to need chain link VRF and\nchain link keepers. So let's\nagain, watch some sub lessons\nabout learning about chain link\nVRF. And learning about chain\nlink keepers. We've made some\nvideos about these before. So\nwe're just going to play these\nvideos. So you can learn about\nhow taling VRF version two\nworks, and also how chain link\nkeepers works, then we're going\nto come back and we're going to\nadd them into our contracts\nhere. If you're already\nfamiliar, and you already played\nwith them, feel free to skip\nthose sections. And we'll just\nget to building them here.\nHi, my name is Steven fluid. And\ntoday we're going to be taking a\nlook at chain links VRF. version\ntwo, version two has a few\ndifferent mental models that we\nshould be aware of. And I want\nto show you what it feels like\nto be using it. The big\nimportant thing to know about\nVera version two is that instead\nof the Vera one model where\nyou'd be funding your contract\nwith Link, instead, you're going\nto be funding a subscription,\nwhich is basically an account\nthat allows you to fund and\nmaintain balance for multiple\nconsumer contracts. Let's dive\ninto the docs and see what using\nVera fie two looks and feels\nlike. In order to show this off\na little bit. I'm going to dive\nright into the get a random\nnumber guide in the chain link\ndocumentation. And so it's going\nto go through a few the\nrequirements of some of the\ntechnology we're going to use\ntoday. And the first thing it's\ngoing to ask us to do is to make\nsure that we are on the Rinkeby\ntest net. So let's go ahead and\njump over to Rinkeby. Make sure\nmy meta mask is unlocked here.\nAnd now that I'm on Rinkeby,\ngreat, I should be able to use\nthe VIP version to test net. Now\nwe're going to jump over to\nsubscription manager. And the\nsubscription manager is where\nwe're going to manage our\nsubscription account. Basically,\nthis is the place that you put\nthe funds in order to be able to\nuse it across a bunch of\ndifferent chains. So we're going\nto go ahead and connect our\nwallet here in order to use the\nsubscription app. And then we're\ngoing to go ahead and create a\nnew subscription. So we'll just\nuse my address as the\nsubscription address here. I'll\napprove the creation. And as\nsoon as that transaction is\nconfirmed, our subscription\nshould be created. Alright, now\nwe have a subscription.\nBasically, this is the account\nwhere we're going to fund it.\nAnd then we can use that account\nfor all of our random Miss\nrequests. So I'm gonna go ahead\nand just put in 10 link here,\nyou can put in however much you\nwant. The price and link of\nevery random number you request,\nit's going to be based on the\ncurrent gas rates on a given\nchain, as well as the gasoline\nthat you've chosen. On our funds\nhave been added, let's go ahead\nand add a consumer contract. So\nit's asking us for consumer\naddress, we don't actually have\na consumer address yet. So let's\ngo ahead and jump over to the\ndocumentation and create a\ncontract that is going to\nrequest a number. So if you\nscroll down, you're going to see\nthis Vera fee to consumer that\nsoul contract that we can open\nit in remix, let's just jump\nright there. We're gonna notice\na few different things in this\ncontract at the top, we've got\nsome input. So now you've got\nVRF, consumer base version two,\nwe've got an interface for the\nVRF coordinator, and then also a\nreference to the link token\ninterface. So all of those are\nspecified for you on the Rinkeby\nnetwork here in the example\ncode. And then you can refer to\nthe documentation for whatever\nchain you're going to be\ndeploying to. And then you're\ngoing to see a few new options\nhere. So the key hash option is\nthe way that you specify that\ngasoline that was described in\nthe documentation. So depending\non the key hash you choose for\nthe given chain you're on the\ngas limit will be set\ndifferently for your random\nnumber requests. So for example,\non a theory main net, we have a\n200 way key hash 500 Wiki hash\nand 1000 graykey hash. You can\nalso see in our contract Hear\nthat we have a callback estimate\nthat you're in charge of. So\ndepending on how much gas you're\nwilling to spend in the fulfill\nrandom number, you should set\nthis value appropriately. Next\nup is request confirmations. So\nthis was something in verify\nwould be one that you could not\ncontrol. But here now, depending\non the chain you're on,\ndepending on the request and the\ntype nature of the request you\nwant to make, you can actually\nchange this number. And then one\nof the most important and useful\nfeatures that gives you a lot\nmore flexibility and control of\nyour VRF is you can actually\nspecify the number of random\nnumbers you want. And so you\nspecify the number words, and\nthen that will specify how many\nrandom you went to 56 as you get\nback from the network. All right\nhere in the constructor, we're\ngonna see a address for the\ncoordinator and address for the\nlink token. And then you'll see\nthat the subscription ID is\ngoing to be created as we deploy\nthe contract. And so I'm gonna\ngo ahead and get that. So if you\nremember when we created the\nsubscription after we found it,\nand we see this subscription ID,\nand now when I deploy this, I'm\ngoing to use that subscription\nID. And we've got two methods\nthat should look very familiar,\nwe've got fulfill randomness\nmethod that takes in randomness\nis going to be fulfilled by the\nBureau of Oracle, as well as you\ngot request random words, which\nis how we're actually going to\ninitiate the request to the\nOracle. So I think we're\nactually are already ready to go\nahead and deploy this. So let's\njump to the deploy screen here\nand select the right contract,\nwhich in our case, is your FB to\nconsumer. And I'm going to make\nsure that I am on injected web\nthree so that we can actually\ndeploy to the Rinkeby network.\nAnd I'm going to paste in the\nsubscription ID here. And I'm\ngoing to deploy, let's go ahead\nand pay for that transaction.\nAnd as soon as that is confirmed\nby the network will show up\nhere, and we'll be able to copy\nthis address, and then add that\nas a consumer and authorize this\ncontract to use my subscription\naccount. So let's go ahead and\nauthorize this with them another\nMetamask transaction.\nAlright, we can have your\nsubscription, we can see how\nmuch link we funded it with. And\nwe can see our consumer\ncontract. So now by doing this,\nwe've authorized our consumer\ncontract to make requests for\nrandomness. So let's go ahead\nand make a request for\nrandomness here. So we're gonna\ngo back to our contract that we\ndeployed here. And we're just\ngonna use the remix interface\nhere to keep things simple. And\nI'm going to request some\nrandomness. So obviously, this\nis going to use all of the\nconfiguration that I specified\nin my contract, just kind of\nhard coded here. So we're gonna\nget to words of random is here.\nSo we're gonna hit request\nrandomness, confirm the Rigby\ntransaction. And then as soon as\nthat transaction comes back, we\nshould notice that we actually\nhave a request. And then what\nwe'll be doing is we'll be\nwaiting for the Oracle to call\nfulfill random words on our\ncontract. And then we'll be\nstoring all of those random\nwords in this s random words,\nstorage variable. Let's go ahead\nand check to see if our random\nnumbers come back from the\nOracle. So I'll go in here into\nrandom words. And let's request\nthe zeroeth item of the array\nlooks like we've got a random\nnumber there. And because we\nrequested two random numbers, we\nshould also have an item in\nindex one. All right, we we've\ngot our randomness there. And if\nwe go back to the subscription\nmanager app, you're going to see\nthat there's actually an event\nhistory item here, we'll see\nthat we spent about point three,\nthree link to get those two\nrandom numbers, we've just taken\na journey to see what it looks\nlike and feels like to use Veera\nversion two,\nnow that we've learned a little\nbit more about chainlink VRF, I\nhope that you took some time to\ngo to doxa chain link and play\naround with it a little bit so\nthat you understand what's\nreally going on, we're going to\nuse this sample contract in here\nto create our function that's\ngoing to pick our random winner.\nThis is an on chain contract\nthat coordinates with a\nverifiably random chain link\nnode to give us a random number,\nyou could look at the code\ndirectly on chain, or you can\ncome right to the chain link\nGitHub and look at all the code\nfor how this is actually\nhappening provably and randomly.\nAnd we'll have a link to this in\nthe GitHub repo associated with\nthis course. So we're going to\ncreate our function here called\npick a random winner, this\nfunction is going to be called\nby the chain link keepers\nnetwork so that this can\nautomatically run without us\nhaving to interact with it. And\nactually, while we're updating\nthis, I want to add some some\nstars here saying view slash\npure functions. Now our pick\nrandom winner function, we're\nactually not going to make\npublic we're going to make\nexternal, external functions are\na little bit cheaper than public\nfunctions. Because solidity\nknows that our own contract can\ncall this, we're actually going\nto change the name of this\nfunction, as well, very soon,\nbut we'll get to that in a\nlittle bit. So in order for us\nto pick a random winner, we\nactually have to do two things,\nwe first have to request the\nrandom number. And then once we\nget it, do something with it. So\nchainlink VRF is a two\ntransaction process. And this is\nactually intentional. Having\nrandom numbers in two\ntransactions is actually also\nmuch better than having it in\none. If it's just one\ntransaction, then people could\njust brute force tries\nsimulating calling this\ntransaction and we'll learn how\nto simulate calls soon simulate\ncalling these transactions to\nsee what they can manipulate to\nmake sure that they are the\nwinner. We want to make sure\nthat this is absolutely fair.\nNobody can manipulate our smart\ncontract into having them be the\nwinner of the lottery, this\nfunction is actually going to\nrequest it. And then in a second\nfunc the random number is going\nto be returned. And in the\ntransaction that we actually get\nthe random number from the chain\nlink network, that's when we're\ngoing to actually send the money\nto the winner. And if we go to\nthe chain link documentation,\nthe function that the chain link\nnode calls is this function\ncalled fulfill random words,\nthis is going to be the\nrequesting one, which we could\neven change this to request\nrandom winner to make it more\nclear, and then we'll make a\nfunction fulfill random words.\nAnd this is going to be an\ninternal override, which we'll\nexplain in a little bit, now\nfulfill fulfill random words\nbasically means we're fulfilling\nrandom numbers. The word comes\nfrom a computer science\nterminology, but you can\nbasically just think of this as\nfulfill random numbers, because\nwe can get multiple random\nnumbers. Now in order to make\nour raffle contract VRF a bowl,\nwe have to import the chain link\ncode, we can go back to the\ndocumentation, and we're just\ngoing to grab this bottom line\nand we'll grab the top line in a\nsecond. So we're going to do\nimport, I'm going to write it\nout. But if you want to copy\npaste, you can at chain link\nslash contracts slash SRC slash\nV 0.8, slash V RF, consumer\nbase, b two dot Sol. And since\nwe're importing at chainlink,\nslash contracts, we're gonna\nneed to add that in by running\nyarn, add dash dash dev at\nchainlink slash contracts. And\nnow that we have this in here,\nwe should be able to import like\nso. And we're going to need to\nmake our raffle VRF consumer\nbase double, we're gonna need to\ninherit VRF consumer base go\ninto our node modules at chain\nlink src, V 08 VRF, consumer\nbase V two, it comes with this\nfunction fulfill random words.\nAnd you can see it's an internal\nvirtual function, virtual means\nit's expecting to be\noverwritten, the reason that\nit's in the sphere of consumer\nbase V two is so that the VRF\ncoordinator, which we'll use in\na bit knows that it can call\nthis fulfill random words\nfunction. And this is the\nfunction that we're overriding.\nSo back in our raffle dot salt,\nwe're going to inherit it by\ndoing is VRF consumer base V\ntwo. And now if we scroll down\nto fulfill random words, we can\nadd in the input parameters\nfulfilled pill random words,\nwhich are going to be un 256,\nRequest ID and un 256, a memory\narray random words. And if we\nhit Save Our linter will now\nnotice, okay, this is what I'm\nexpecting, I'm expecting us to\noverride the Fill random words,\nwhich takes these parameters.\nNow if we look in our docs in\nour constructor, we need to pass\nthe VRF consumer base V TOS\nconstructor and pass that VRF\ncoordinator. Again, this V RF\ncoordinator is the address of\nthe contract that does the\nrandom number verification. So\nright next to our constructor\nwill add the VRF consumer base V\nto constructor and we need to\npass the VRF coordinator v2\naddress. So in our main\nconstructor, we'll add that as a\nparameter as well. So we'll say\naddress\nVRF core to Nate Torre v two,\nand then we'll pass this as a\nparameter for the VRF consumer\nbasically till now that we have\nthat we shouldn't see that\nlittle underscore anymore. And\nwe should be able to run yarn\naren't had compiled. Awesome.\nAnd we can see compiled two\nfiles successfully and our code\nis working great. Now something\nthat I often do is I actually\nhate running yarn hard hat all\nthe time, because that's too\nmany keys for my little brain to\nwork with. I would prefer to\nwrite as little keys as possible\nhard hat also would like us to\nwrite as little keys as\npossible. So hard hat comes with\na shorthand and autocomplete\nhard hat shorthand is an NPM\npackage that installs a globally\naccessible binary called H H,\nthat runs the project's locally\ninstalled hard hat and supports\nshell auto completion for tasks.\nSo what we can do is we're going\nto start with NPM, like this,\nbut we're gonna install it with\nyarn, we're going to run yarn,\nglobal, add hardhat shorthand.\nAnd what this is going to do, we\ncan see here installed hard hat\nshorthand with binaries H, H,\nand Hardhead completion. Now\ninstead of running yarn,\nHardhead compile, which we can\nstill run, we can just run h h\ncompile, running h h is going to\nbe the same thing as if we had\njust run the Hardhead command\nfor our local directory. So now\nwe need to actually have our\nrequest random winner function\nrequests a random winner. So\nlet's go back to the\ndocumentation. And we'll see how\nto do that. We can look at this\nfunction request random words\nand see exactly how it works. On\nthe Vera of coordinator address.\nWe go ahead and call this\nrequest random words function,\nwe're going to need to call this\nfunction on the coordinator\ncontract to get the coordinator\ncontract. We're going to use the\nVera v2 coordinator interface\nand the Vir of coordinator\naddress. So we're going to want\nto keep track of those. We can\ndo that once again in Arkansas.\nfactor, we have the address\nbeing passed to our Bureau of\nconsumer base. Let's also keep\nit as a state variable for us.\nFirst, let's get the interface\nso we can interact with that\ncontract, we can import that\nfrom chain link as well by doing\nimport at chain link slash\ncontracts, slash SRC slash fees\n0.8, slash inter faces slash VRF\ncord to mentor V to interface\ndot Sol. And now that we import\nthis interface, same as we did\nwith price feeds, we can do VRF,\ncoordinator v2, interface VRF\ncoordinator. And then we can\nsave the sphere of coordinator\nusing the address so we can say\nVRF coordinator equals this\naddress VRF coordinator veto.\nAnd we're just going to wrap\nthat address around the\ninterface so that now we can\nwork with this VRF coordinator\ncontract. Now we're only going\nto set our VRF coordinator one\ntime right in our constructor.\nSo what's the best thing that we\ncan do here, private, immutable,\nyou Gosh, darn. Right, let's do\nprivate, immutable, you have\ncoordinator and we'll change the\nname to I underscore the ref\ncoordinator so that we know that\nyour coordinator is indeed an\nimmutable variable. In order to\nrequest the random word, we need\nto give it a number of\nparameters, I'm gonna go ahead\nand copy this line into our\ncontract just so that we can\ntalk about exactly what's going\non with it. And we don't need\nthe AES Request ID. And instead\nof coordinator we're going to do\nI underscore fear of\ncoordinator. So we're going to\ncall request random words on\nthat VRF coordinator contract,\nand we need to pass it the key\nhash or the gasoline, I prefer\ncalling it the gas lane, we go\nto the chain link, Doc's go to\ncontract addresses. And we\nscroll down we can see different\ngas lanes a different\nconfiguration parameters for\ndifferent networks is key hash\nis going to be the gasoline of\nthe key hash, which tells the\nchain link node the maximum\nprice you're willing to pay for\nyour guests and way if for\nexample, gas prices skyrocket,\nand it's going to cost you a ton\nof money to get that random\nnumber setting a ceiling, we'll\nmake it so that random number\ndoesn't come back. For us to\npick a gas lane, we're probably\ngoing to want to have this gas\nlane or this key hash stored\nsomewhere. So let's go ahead and\nmake that a parameter of our\nconstructor as well. And we'll\nsave that as a state variable.\nSo we'll do comma bytes 32,\ngasoline or key hash or whatever\nyou want to call it. And then\nwe'll make a new state variable.\nAnd we're only going to set this\nonce. So we'll make this a\nprivate, immutable. I underscore\ngasoline, and then we'll say\ngasoline equals gasoline.\nSo now, we can just swap this\nout, or I underscore gasoline.\nOkay, what's next, we need a\nsubscription ID, the\nsubscription ID is going to be\nthe subscription that we need\nfor funding our requests.\nThere's actually a contract on\nchain, which we can use to fund\nany subscription for any of\nthese external data or external\ncomputation bits. And in this\ncontract, there's a list of\nthese subscriptions for people\nto make requests to. So we need\nthe ID of the subscription that\nwe're using to request our\nrandom numbers and pay the link\nOracle gas, the subscription ID\nis probably also going to be\nsomething we're going to pass as\na parameter to our lottery. So\nonce again, let's scroll up to\nour constructor, we'll add a new\nparameter. And our subscription\nID actually doesn't need to be a\nun 256, it can actually be a\nlittle bit smaller with a un 64.\nSo we'll pass a un 64 sub\nscription ID, we'll make a UNT\n64. Since we're only going to\nset this once we'll make this a\nprivate, immutable. I underscore\nsub scription ID down here and\nwe'll say I subscription ID\nequals sub subscription ID.\nAlright, awesome. So now we can\nchange this to our subscription\nID. Okay, what's next? Request\nconfirmations request\nconfirmations is a un 16, which\nsays how many confirmations the\nchain link node should wait\nbefore responding. So if you\nmake a request, and there's only\none block confirmation, maybe\nyou don't actually send it\nbecause you don't you're afraid\nof some type of blockchain\nreorganization or something,\nwe're not going to worry too\nmuch about this. And we're\nactually just going to make this\na constant of three. So we're\nnot even going to have this be\nper amortizable we're gonna have\nthis one be a constant. So we'll\nsay a you int 16 Private\nconstant request, confirmations\nequals three, and we're using\nthe capslock and underscores for\nour constant variables here. And\nnow we'll grab request\nconfirmations and stick it in\nright here. What's next callback\ngas limit callback gas limit is\ngoing to be the limit for how\nmuch gas to use for the callback\nrequest your contracts fulfill\nrandom words, this sets a limit\nfor how much computation are\nfulfilled random words can be\nthis is a good way to protect\nourselves from spending way too\nmuch gas. If, for example, we\naccidentally code our contract\nin a way where fulfill random\nwords is incredibly gas\nexpensive. It'll block the\nrandom number from responding.\nWe are going to make this\nparameter sizable because we\nwant to change it depending on\nhow we code our fulfill random\nword. So in our constructor,\nlet's add one more, we'll add\nyou int 32. Since the size of\nthis is a un 32, callback, gas\nlimit, and we'll save the sub\ntop as a UNT 32, private,\nimmutable, I underscore call\nback. Yes limit. And we'll save\nthis. I call back gas limit\nequals call back Yes, limit. And\nthen we'll take this, and we'll\nstick it here. All right, we got\none more number of words, this\nis going to be how many random\nnumbers that we want to get, we\nonly want one. So we're gonna go\nback up to the top, we're going\nto create a you int 32. And\nwe'll make this also a private\nconstant. Num words equals one,\nbecause we only want one random\nnumber. And then that'll be the\nlast thing we need to add for\nour IVF coordinator dot request\nrandom words. Now this request\nrandom words function returns a\nrequest ID a un 256 Request ID a\nunique ID that defines who's\nrequesting this and all this\nother information. If we want to\nsave it, we can do u and 256.\nRequest ID IVF coordinator\nrequests random words. Now for\nnow, we are going to emit an\nevent with this request ID. And\nwe'll go over why we're going to\ndo that a little bit later,\ncreate a new event at the top.\nAnd we're not going to follow\nthe naming convention here.\nBecause we're going to change\nthe name of our functions a\nlittle bit, we're going to call\nthis requested raffle winner.\nAnd we're going to take a un 256\nindexed Request ID. Down here,\nwe're gonna do omit requested\nraffle winner Request ID. And\nnow we have a function that we\ncan use to request a random\nwinner using chain link VRF. Now\nagain, we're going to set this\nup so that the chain link\nkeepers call this on an\ninterval, but we'll do that in a\nlittle bit. For now, let's\nfigure out what to do once we\nget that\nrandom number. Once we get that\nrandom number, we're going to\nwant to pick a random winner\nfrom our array of players up\nhere. So what do we do? Well,\nlet's go in here. And let's pick\na random winner using something\ncalled the module function. Now\nwe're gonna get an array back of\nrandom words, or random numbers,\nif you will, since we're only\nrequesting one random word, this\nrandom words array is going to\nbe of size one with one random\nword in it. Now this random word\nis a un 256. So this random word\ncould be something like this.\nWell, obviously without the\nhyphens, but it could be\nsomething absolutely massive\nlike that our players array is\nonly going to be so big. So how\ndo we get a random winner from\nthis potentially massive random\nnumber, we can use something\ncalled the modulo function, the\nmodule operation, a mod N\nyields, the remainder are after\nthe division of an operand a by\nthe blah, blah, blah, blah,\nblah. So what does this mean?\nWell, we can use the mod\nfunction to get a random number\nout of our players array. So\nlet's say our players array or\nexcuse me, our s players array\nis of size 10. And a random\nnumber is 200. So how do we pick\na random person out of this\nplayers array, or, let's say our\nrandom number is 202. If we do\n202, which is our random number,\nmod 10, we're gonna basically do\n202 divided by 10. But instead\nof having the decimals, we're\njust going to say, Okay, how\nmany times is 10 evenly divide\ninto 202. And what's the\nremainder, what doesn't divide\nevenly into 202? Well, 20 times\n10 equals 200, with two\nleftover, so two doesn't evenly\ndivide, or multiply into 200. So\nthat means 202 mod 10 is going\nto equal to two. So that's how\nthe module function works. And\nwe can use that so we're always\ngoing to get a number between.\nSo we're always going to get a\nnumber here between zero and\nnine, which works out perfectly\nbecause that which works out\nperfectly, because those are the\nindexes of the 10 people in our\narray. So let's use that here.\nWe'll say a un 256 index of\nwinner is going to be equal to\nrandom words, at index zero,\nbecause we're only getting one\nrandom word module, the S\nunderscore players dot length.\nSo this will give us the index\nof our random winner to get that\naddress of the winner will do\naddress payable, recent winner\nequals s players at this index\nof winner so awesome. So now\nwe'll have the address of the\nperson that got this random\nnumber, the person's that's\ngoing to be our verifiably\nrandom winner. Now, it might be\nkind of cool to brag to people\nthat you're the recent winner.\nSo let's go ahead to the top and\nwe'll create a new state\nvariable for our most recent\nwinner make this state variable\nin a new section called lottery\nvariables. We'll say address\nprivate s underscore recent\nwinner and it'll start out as\nnobody but as we get winners\nupdate it with s recent winner\nequals recent winner and we'll\nprobably want people to know who\nthis is winter is so down below,\nwe can do function get recent\nwinner, it's going to be a\npublic view that's going to\nreturn that address. And then\nwe'll just say return s\nunderscore recent winner, since\nagain, the recent winner is\ngoing to be a storage variable.\nSo now that we have a recent\nwinner, what else are we gonna\ndo? Well, we're probably going\nto want to send them the money\nin this contract. So we're going\nto do exactly what we did before\nwith sending the money, we're\ngoing to do that bull success,\ncomma, blank equals recent\nwinner, call, I'm gonna say\nvalue, it's going to be address\nof this dot balance, we're going\nto send all the money in this\ncontract, and we're going to\npass it no data. And now we\ncould say require, you know,\nsuccess, whatever, we're going\nto be a little bit more gas\nefficient here. And we're just\ngonna say, if not success, then\nwe're going to revert a new\ntransfer failed error. So we're\ngonna go to the top, or say,\nerror name of the contract is\nraffle, underscore, underscore,\ntransfer failed, like that, then\ngo back down, and we can now do\nrevert, raffle transfer failed\nlike that. And now that we've\npicked a winner, right now, we\ndon't have a way to actually\nkeep track of the list of\nprevious winners. So we're just\ngoing to omit an event. So\nthere's always going to be that\neasily query double history of\nevent winners. So we're going to\ncreate a new event in the events\nsection called the event winner\npicked. And this is going to be\nan address indexed winner. And\nwe'll scroll down and we'll do\nMIT winner picked the address of\nthe recent winner. This looks\npretty good.\nThis looks pretty good here. Now\nyou'll notice our request ID as\nthis little underscore here and\nsaying, hey, it's an unused\nfunction parameter, since we\ndon't use this, but we still\nneed fulfill random words to\ntake a request ID and a random\nwords array. But we don't use\nRequest ID, we can just comment\nout just the request ID part\nlike this, this tells our\nfunction, hey, yes, we know that\nyou need a un 256. But we're not\ngoing to use the request ID. So\nwe'll leave it in here. But\nwe'll leave it blank. Now let's\nrun a little compile here. We'll\nuse yarn, hard hat, compile, or\nhh compile, we'll see if we're\ncoding things correctly. And\nindeed, we don't see any errors.\nSo perfect, we can continue. So\nwe've added the chain link VRF,\nwhere we have a way to\nverifiably get a random winner.\nThis is fantastic. Now let's\nupdate this contract so that not\nonly can it pick a verifiable\nwinner, but it can also do this\nall programmatically and\nautomatically trigger picking a\nrandom winner based off of some\ntime interval without us having\nto interact with it. And in a\ndecentralized context. In order\nfor us to automatically trigger\nsmart contracts based off of\nsome parameter be a time\nparameter, maybe the price of\nsome asset is some number, maybe\nthere's a certain amount of\nmoney in the liquidity pool or\nreally whatever trigger that you\nwant, we can use chain link\nkeepers. To do this. Steven\nfluid has done once again, an\namazing introduction to chain\nthe keepers. So we're going to\nfollow along with another sub\nvideo section of Steven\nexplaining chain link keeper\nsauce, he's going to be using\nthe COVID test net, but be sure\nto use whatever test net is in\nthe documentation. When you play\nwith this and you try this.\nMy name is Steven foon. Today, I\nwant to show you how to use the\nchain link keeper network in\norder to automate your contracts\nand give them access to off\nchain computation. Let's go\nahead and dive in. So what we're\ngoing to look at today is we're\ngoing to start on the chain link\ndocumentation webpage. And if\nyou just scroll down a little\nbit, you're going to find using\nchain link keepers. Now there's\nreally two parts to building a\nchain link keeper up kept smart\ncontract. So the first thing is\nyou need to write a smart\ncontract that's compatible by\nimplementing these two methods.\nAnd then second, you want to\nregister that smart contract for\nupkeep with the channeling\nkeeper network. So let's go\nahead and do both of those\nthings. So let's start off just\nby copying and deploying this\nsample code that we've got. With\nthis one click to remix, what\nwe're gonna see here is a very,\nvery simple contract. That is\njust a simple counter. So we can\nsee it's got a counter here. So\nit's got just a simple number.\nAnd then you're able to specify\nwhen you create the contract and\nupdate interval, and then the\ncontract is going to verify Hey,\nhas enough time passed. And if\nit has, let's update the\ncounter. And you're going to\nnotice that chinley compatible\nor timekeeper network compatible\ncontracts use two really\nimportant methods that are part\nof this keeper compatible\ninterface. The first is check\nupkeep, and check upkeep is\nspecial because this is where\nthe off chain computation\nhappens. So this is a method\nthat's not actually run on\nchain. This is run off chain by\na node from the channeling\nkeeper network. And so what's\nreally nice about this is that\nthe gas used here isn't actually\ngas, it's on chains. This is\njust being run by a chain link\nnode. And then what happens is\nif your check upkeep method\nreturns, the upkeep is needed.\nThen it's going to go ahead and\nperform upkeep. On chain, so you\ncan actually generate data off\nchain, and then pass that in.\nThat's called the check data.\nAnd then that becomes the\nperformed data that's passed\ninto perform upkeep. And so the\nPErforM upkeep method is where\nyou're going to want to verify\nthat things are correct. And\nthat things actually should be\nmodified and run on chain, and\nthen actually make the state\nchange. And so let's go ahead\nand compile this contract and\ndeploy it to the COVID network.\nSo let's go ahead and within\nremix, we can do this\ncompilation. And we're going to\ncompile and deploy directly to\nCOVID. So the zookeeper network\nis currently as of the filming\nof this, available on both COVID\nas well as the theory of main\nnet. And let's go ahead and play\nthe counter contract. And let's\nsee what's not updating more\nthan every 30 seconds. And so\nlet's go ahead and deploy. So\nmeta masks can ask for a little\nbit of payment, in order for me\nto deploy this contract to the\nCOVID network. And it looks like\nthat is live. So now what I'm\ngoing to do is I'm going to be\nable to take this keeper\ncontract, and copy its address.\nAnd now we're going to register\nthat contract for upkeep. So\nwe're going to jump over to the\napplication that powers the\nchampion keeper network, there's\na few different ways you can\nuse, you can interact directly\nwith the registry contract. But\nthere's a very, very nice\ninterface that lets you do this.\nSo let's go ahead and register a\nnew upkeep and it's giving me an\nerror that says you need to\nconnect your wallet. So let's go\nahead and do that. So I'm going\nto just connect wallet here, and\nI'm gonna give it access to my\naccount. And then from there, we\nshould actually be able to\nregister. So I'm going to use an\nemail address here. I'll give my\ncontract a simple name. I'll\npaste in that address from the\ndeployed contract, and then I'll\ngive it a gas limit. And then\ncheck data is this special thing\nwhere you can actually register\nmultiple upkeeps On the same\ncontract in passing data to\nspecify how you want checkup\nkeep to be run of, we're just\ngoing to ignore that that is an\noptional one. And then we'll\ngive it a starting balance of\naround 10 link, it's gonna go\nahead and use Metamask again to\nregister that transaction on the\nnetwork. And once it's\nconfirmed, my upkeep should be\nregistered with the network and\nfunded with 10 Link To kick\nthings off. Alright, if we go\nahead and view the upkeep, we\ncan see it's registered. And as\nsoon as the next round of the\nkeeper nodes executes, which\nshould be roughly about every\nblock, we should see that the\ncheck upkeep method is going to\nreturn that hey, upkeep is\nactually needed because the\ntimestamp is more than 30\nseconds ago. And then we should\ngo ahead and perform upkeep. So\nas soon as I take a look at this\nin remix, I can actually make\nthis bigger here, we're going to\nbe able to see from the methods\nof the contract, if we check the\ncounter, it's going to start at\nzero. And as soon as that 30\nseconds has passed, we'll be\nable to hit the counter again,\nwe'll see that the channeling\nkeeper network has performed\nupkeep on my contract. Alright,\nwe just refresh and we see the\nbalance of the upkeep has been\ndecreased by about point 01\nlink. And we should also see\nwithin our contract that our\ncounter has now updated via\nproof that perform upkeep method\ncall. And now our counter is at\none showing us that our contract\nis being approved by the\nchainlink keeper network. And\neverything is working exactly as\nwe expect. So as you can see, it\nis very, very easy to create a\ncontract that is compatible with\nthe keeper network. And it's\nvery easy to register that\nupkeep and start seeing that\nyour contract automation and\noption computation are working\nflawlessly.\nNow that we've learned a little\nbit more about how chainlink\nkeepers work if you want to take\nsome time to go through the\ndocumentation and open up way\ndown below this open and remix\nbutton. So you can actually work\nwith one of these and see these\nin action for yourself on a test\nnet, feel free to do so we're\ngonna be using a setup very\nsimilar to this keepers counter\nsetup in the chain link\ndocumentation. So now let's\nupdate our code so that this\nrequest random numbers\nautomatically happens using\nchain link keepers. And if we\nlook at the example contract can\nactually read more about what's\nreally important for this to\nwork. And we need a check upkeep\nand a perform upkeep function in\nour code. So instead of request\nrandom winner, this is going to\nbe the PErforM upkeep that we're\ngoing to change. But first let's\nmake this check upkeep checkup\nkeep function is basically going\nto be checking to see is it time\nfor us to get a random number to\nupdate the recent winner and to\nsend them all the funds. So\nlet's go ahead and make that\nfunction. I'm going to add some\nnotes here, just so that it's\nclear what's going on. And maybe\nI'll even do natspec To tell\ndevelopers what's going on with\nthis function. So we're going to\ncreate this function check\nupkeep. And if we look at what\nthis needs, it needs to be\nexternal override external\noverride. And if we see this\noverride keyword, this means\nthat okay, there's probably a\nperform upkeep somewhere else.\nAnd if we scroll to the top, and\nwe're going to import this\nkeeper compatible interface, so\nthat we make sure that we\nimplement both check upkeep and\nperform upkeep in our code here.\nIf you want you can just import\nkeeper compatible in here or\njust the keeper compatible\ninterface in our code. We're\ngoing to do import at chain link\nslash contracts slash SRC slash\nV 0.8 point two interfaces slash\nkeeper compatible interface that\nsoul and now we're just gonna\nsay contract raffle is Veera of\nconsumer base V two and keeper\ncompatible interface and this\nkeeper compatible interface\ninheritance just make sure that\nwe add checkup keep and perform\nupkeep, which we're going to add\nin a little bit. And if we look\nback at the docs we can see\ncheckup keep takes a bytes\ncalled Data check data as an\ninput parameter. So we'll do\nbytes called data. Check data as\na parameter. Now this check\nupkeep bytes call data allows us\nto specify really anything that\nwe want when we call this check\nupkeep function. Having this\ncheck data be of type bytes\nmeans that we can even specify\nthis to call other functions,\nthere's a lot of advanced things\nyou can do by just having an\ninput parameter as type of bytes\nfor us though, we're going to\nkeep it a little bit simple. And\nwe're actually not going to use\nthis check data piece. So\nsimilar to how below we're not\nusing Request ID, we can just\ncomment it out. However, we\nstill need to make sure that\nthis parameter is type of bytes\ncalled data. Now anyways, let's\ngo ahead and annotate this check\nupkeep function, we'll say this\nis the function that the chain\nlink keeper nodes call they look\nfor the to return true. Look\nback at the documentation, we\ncan see that this check upkeep\nreturns both and upkeep needed\nand to perform data, which\nagain, we're going to ignore\nthis upkeep needed is going to\nbe true or false. If it's true,\nthat means it's time to get a\nnew random number following\nshould be true in order to\nreturn true. So in order for it\nto be time to request a random\nwinner, what should happen, our\ntime interval should have\npassed, which we haven't defined\nyet. But we will lottery should\nhave at least one player and\nhave some eath. And then our\nsubscription is funded with Link\nsimilar to how with channeling\nVir f your subscription needs to\nbe funded with Link, the same\nthing needs to happen for check\nupkeep and keepers to run your\nsubscription needs to be funded\nwith link. Now we're going to\nadd one more additional piece\nhere, we're going to say for the\nlottery should be in an open\nstate, something that we want to\navoid when we're waiting for a\nrandom number to return. And\nwhen we've requested a random\nwinner. We're technically in\nthis weird limbo state where\nwe're waiting for a random\nnumber to be returned. And we\nreally shouldn't allow any new\nplayers to join. So what we\nactually want to do is create\nsome state variable telling us\nwhether the lottery is open or\nnot. And while we're waiting for\nour random number to get back,\nwe'll be in a closed or a\ncalculating state.\nNow what we could do at the top\nof our contract, we can just say\nBoolean, private, s underscore\nis open. And we can just set\nthis to true if we're open\notherwise false. Well, what if\nwe have a ton of different\nstates? What if we want it to be\nlike pending, open, closed,\ncalculating, etc? What do we\nhave a ton of different states?\nWell, we could make this a U and\n256. Private s underscore state.\nAnd we could just keep track of\nthe state having like zero b\npending a one reopen to be\nclosed, three, be calculating,\netc. But this can be a little\ntricky to keep track of. So a\nbetter way to actually keep\ntrack of all this in our code is\nto use an enum enums, can be\nused to create custom types with\na finite set of constant values.\nSo we can create, for example, a\nstate created locked inactive,\nand it's basically a new type\nfor a smart contract for us,\nwe're going to create a new\ntype. And if we go back to the\nlayout of variables, and our\nsmart contract types should\nactually be first thing in our\ncontract. So we're going to\ncreate an E new called raffle\nstate. And for now, and we're\njust going to have it be open,\nwe're just gonna have to be open\nor calculating. Now when we\ncreate an enum like this, we're\nkind of secretly creating a un\n256, where zero equals open, and\none equals calculating. However,\nthis is much more explicit that\nwe know what each one of these\nnumbers actually means. Now that\nwe've created this new type\ncalled raffle state, we can\ncreate a new lottery state\nvariable of type raffle state.\nSo the exact same way we declare\nany other variable, we'll name\nits type, which is going to be\nraffle state. And this is going\nto be a storage variable. So\nwe'll go ahead and do private s\nunderscore raffle state in our\nconstructor, right when we\nlaunched this contract, we\nshould open up this raffle. So\nwe'll say s, raffle state equals\nand we could use a un 256.\nWrapped in type raffle state\nlike so. Or we can be more\nexplicit and say raffle state\nDOT open. Now we know that the\nraffle state is in an open state\nand we only want checkup keep to\nwork is if the lottery is\nactually open. Additionally, we\nprobably only want people to be\nable to enter if the law\nbattery's open. So let's go\nahead and create another if\nstatement and revert if the\nlottery isn't open. So we can\nsay if s underscore raffle state\ndoes not equal raffle state DOT\nopen, then we're going to revert\nwith a new error, we're going to\ncreate raffle underscore\nunderscore, not open. And of\ncourse, at the top will create\nerror, raffle not open. Now\nadditionally, let's go down when\nwe're requesting a random word.\nLet's update the state to be\ncalculating so other people\ncan't jump in here. So right\nabove our VRF coordinator dot\nrequest, random words will do s\nunderscore raffle state equals\nraffle state DOT calculating so\nthat nobody can enter our\nlottery and nobody can trigger a\nnew update. And then once we\nfulfill after we pick our\nwinner, we'll say s raffle state\nequals raffle state DOT open\nagain. Something else that we\nforgot to do was after we pick a\nwinner from s players, we need\nto reset our players array. So\nlet's add that in here as well\nas players equals new address\npayable. array of size zero. So\nwe'll reset the raffle state.\nAnd we'll reset our players\narray. Alright, great. So now\nthat we've learned about enum,\nlet's add it to our checkup keep\nhere, we're going to check these\nfour things. And if they all\npass checkup keys will be true\nand will trigger the chain the\nkeepers to request a new random\nwinner. So first, we'll say bool\nis open. It's going to be equal\nto raffle state. That open\nequals equals s underscore\nraffle state. So you can think\nof that as this boolean is open\nis going to be true if raffle\nstate is in an open state, and\nit will be false if raffle state\nis in any other state. So great.\nWe haven't is open Boolean that\nwe can check later on. What else\ndo we need? Well, we need to\ncheck to make sure our time\ninterval is past well, we don't\nhave a time interval yet. So\nlet's create a time interval. In\norder to check the time we can\nuse another one a solidity is\nglobally available variables\nwith block dot timestamp block\nthat timestamp returns the\ncurrent timestamp of the\nblockchain to get the current\ntimestamp, we're gonna need\nblock dot timestamp. But to get\nif enough time has passed, we're\ngoing to need to get the current\nblock dot timestamp minus the\nlast block timestamp, which we\ndon't have yet. Let's go ahead\nand create a state variable to\nkeep track of the previous block\ntimestamp. So this is going to\nbe a new state variable that\nwe're going to make. I'm gonna\nsay u and 256. Private s\nunderscore last timestamp.\nAnd right when we deploy this\ncontract, we'll update this with\nthe current timestamp s last\ntimestamp equals block dot\ntimestamp. Alright, awesome. Now\nwe have a last block timestamp.\nBut we're going to need to check\nthat the difference between the\ncurrent timestamp and the last\ntimestamp is greater than some\ninterval. So we also need to\ncreate an interval. And this is\ngoing to be some interval, this\nis going to be some number in\nseconds of how long we want to\nwait between lottery runs. So\nlet's go ahead and add this to\nour constructor as well. And do\na comma here. And we'll do u and\n256. Interval. And we're going\nto create another global\nvariable u and 256 Private s\nunderscore interval. And in our\nconstructor and we'll say s\ninterval equals interval. Now\ninterval isn't going to change\nafter we set it. So instead of\nmaking a storage variable, let's\nmake it an immutable variable to\nsave some gas. Okay, perfect.\nNow that we have all this, I'm\nactually create a boolean to\ncheck to see if enough time has\npassed. So we'll say Boolean\ntime passed equals the current\nblock that timestamp minus s\nunderscore last timestamp. And\nwe should check to see that this\nis actually greater than I\nunderscore interval. So we have\na Boolean check to see if we're\nopen. It'll be true if we're\nopen and we'll have a boolean to\nsee if enough time has passed.\nThis will be true if enough time\nhas passed. What else should we\ncheck? While we should check to\nsee if we have enough players.\nSo we'll do Boolean has players\nequals and we'll check to see if\ns underscore players dot length\nis greater than zero. If s\nplayers dot length is greater\nthan zero as players will be\ntrue, otherwise it'll be false.\nAnd we'll also see if we have a\nbalance so we'll do Boolean has\nbalance equals address. This dot\nbalance is greater than zero.\nThen finally, we're going to\ntake all these booleans and turn\nthem into the return variable\nthat we're looking for. We're\ngonna say Boolean up keep\nneeded. Equals is open and time\npassed. And as players and as\nbalance, like that, so all these\ncombined is gonna be this\nBoolean upkeep needed. And if\nthis returns true, it's time to\nrequest a new random number and\nit's time to end the lottery. If\nthis is false, it's not time\nyet, it's not time to end the\nlottery up. Now again, if we go\nto the chainlink, documentation\nupkeep needed, actually needs to\nreturn that Boolean upkeep\nneeded and some bytes memory\nperform data. So we need to\nupdate we need to update our\nfunction here. And say returns\nfull upkeep needed, comma, bytes\nmemory, perform data star slash.\nAnd since we've initialized\nBoolean up, keep needed up here,\nwe don't need to say what type\nof upkeep needed is down here.\nSince this will automatically\nget returned performed data is\nsomething that we can use. If we\nwant to have checkup, keep do\nsome other stuff. Depending on\nhow this checkup keep went. We\ndon't really need it to do\nanything else. So we can just\nleave it as such. Right. So now\nwe have a check upkeep, we have\na way to check to see if it's\ntime to trigger picking our\nrandom winner of our lottery\nor our raffle. Now that we\nlearned how to actually do this\ntrigger, let's write the\nfunction that gets executed\nafter this returns true. This is\ngoing to be our perform upkeep\nfunction, which we can see an\nexample again in the chainlink\ndocumentation. Now when it's\ntime to pick a random winner,\nactually, what we're going to do\nis just we're just going to call\nthis request random winner\nfunction. So instead of having\nthis extra function, let's just\ntransform our request random\nwinner function into this\nperform upkeep. Since once check\nupkeep returns true, the chain\nlink nodes will automatically\ncall this perform upkeep\nfunction. So in function request\nrandom winner, let's rename this\nto perform upkeep. And we'll\nhave it take the input parameter\nbytes called Data perform data\nbytes, called data, perform\ndata. In our checkup, keep we\nhad to perform data, we would\nautomatically pass it to our\nperformance keep, we're not\ngoing to pass anything to\nperform upkeep, we can leave it\ncommented out like this. Since\nperform upkeep is actually\nidentified in the keeper\ncompatible interface, this is\nnow going to have to override\nthat function. Now we want to do\na little bit of validation\nbefore we continue here. Because\nright now anybody can call our\nperform upkeep function. So we\nwant to make sure that it only\ngets called when checkup keep is\ntrue. An easy way for us to do\nthat is to actually call our own\ncheckup, keep function. Now\nright now, checkup keep it's an\nexternal. So we actually can't\ncall our own checkup keep\nfunction. So let's change it to\npublic so that even our own\nsmart contracts can call this\ncheckup keep function. Now that\nwe've made it public in perform\nupkeep, we can call checkup,\nkeep passing nothing, and then\nreturn the upkeep needed and\nperform data which we don't\nreally care about. So we'll get\nwe'll get that ball up keep\nneeded. And then we don't care\nabout perform data. So we'll\nleave that blank equals check up\nkeep. And we'll pass it a blank\ncalled data. Now, we want to\nmake sure that this is true in\norder to keep going with the\nfunction. So we could write a\nrequire here, but we're going to\ndo if not up keep needed, then\nwe're going to revert with a new\nerror that we create raffle.\nupkeep not needed. And we're\ngoing to pass some variables to\nthis error\nso that whoever was running into\nthis bug can hopefully see why\nthey're getting this error. So\nwe'll pass the balance of this\ncontract just in case there's no\nether in here. We'll add the\nplayers dot length, just in case\nthere's no players. And we'll\nadd a un 256 s underscore raffle\nstate. Make sure that the\nraffles actually open. And then\nof course, we'll need to create\nthis air at the top air, raffle\nupkeep not needed, which is\ngoing to take a un 256 current\nbalance un 256 non players and\nyou went to fit six raffle\nstate. Our code is starting to\nlook really professional. This\nis awesome. Now something that\nwe forgot to do back in the\nfulfill random words because we\nactually forgot to reset\ntimestamp every time a winner is\npicked. We want to reset the\ntimestamp as well so that we can\nwait another interval and let\npeople participate in the\nlottery for that interval. So\nwe'll scroll down into fulfill\nrandom words. And right after we\nreset players will also reset\nthe timestamp. Okay great and I\nthink we're just about done\nhere. Let's add a little bit of\nnatspec to make this look even\nmore professional and and give\npeople who are reading our\ncontract even more information.\nSo let's add title here at title\nand we'll say a sample raffle\ncontract will say an author is\ngoing to be me Patrick Collins\nor you can put your own name\nthere as well at notice. This\ncontract is for creating and\nuntampered orrible decentralized\nsmart contract. And then we'll\ndo add Dev, this implements\nchain link VRF v two, and chain\nlink keepers. Alright, awesome.\nWe've got our type declarations,\nwe've got our state variables,\nwe've got lottery variables,\nwhich are still state variables,\nwe've got our events. Now it's\ntime for our functions.\nAfterwards, we've done a little\nbit of natspec, at least on our\ncheck upkeep. If you want to add\nsome more natspec on things like\nenter, raffle, perform upkeep,\netc, you can absolutely do so.\nAnd then down at the bottom, we\nhave our views slash pure getter\nfunctions. Let's see, do we want\nany other getter functions here?\nWell, we probably want to give\npeople the chance to get a\nraffle state. So we'll do\nfunction, get raffle state, this\nwill be a public, you returns a\nraffle state. We'll say return s\nunderscore raffle state, we\nprobably want to give people the\nchance to get the number of\nwords. And this is going to be a\nlittle bit interesting here\nrunning. So if we do function,\nget num words, public view\nreturns, you went to the six\nreturn num words, you'll see\nsomething interesting happened\nhere. We pull up our compiler\nand run hh compile. Hopefully\neverything works here. Oh, and\neverything doesn't work because\nI didn't import this correctly.\nLet's fix that. Let's try again.\nOh, there's a couple things I\nmissed. Let's fix es players.\nThis is why it's good to compile\nas you code as players dot\nlength. Let's try again. And I\nspelt interval wrong. I\nunderscore inter vol strike to\ncompile again, see how many more\nspelling mistakes I made. And\nthere it is. I underscore in\nerror go to paste that and we do\nget another error here. Invalid\ntype for argument in a function\ncall invalid implicit conversion\nfrom literal string to bytes\ncalled data requested. Since\nwe're passing this empty string\nhere. And checkup keep needs a\ncall data called data actually\ndoesn't work with strings. So we\nneed to make this bytes memory\ninstead. And our compiler is now\nhappy with us. And I spell it\nthe timestamp wrong. That's a\nlowercase s so and you might see\nsome squiggles here on Check\nupkeep, we could make this a\nview function since we're not\nactually modifying any state.\nBut I want to keep it public for\nreasons I'll show you a little\nbit later. But finally we get\nthe the yellow squiggly that I\nwas looking for here. And if we\nrun hh compile, we should see a\nwarning in our compiler as well.\nOkay, so we see all those yellow\nsquigglies here. Unnamed return\nvariable can remain unassigned.\nWe need this bytes memory in\nhere because that's what the\nkeepers are looking for. Morning\nfunction state mutability can be\nrestricted to view for our\nfunction checkup key. You can\nmake a view if you want, but I'm\ngoing to keep it public for\nreasons I'll show you a little\nbit later. And finally, function\nstate mutability can be\nrestricted to pure this is what\nI wanted to show you since num\nwords is actually in the\nbytecode, since it's a constant\nvariable technically isn't\nreading from storage, and\ntherefore this can be a pure\nfunction. Returning num words\ndoesn't actually read in\nstorage, it literally will go\nand read the number one. So\ndoing get num words in solidity\nwith num words being a constant\nvariable, it's going to\nliterally be the exact same as\nsaying get one and we would\nreturn one here, we might also\nwant to get the number of\nplayers. So we'll create a\nfunction get number of players.\nAnd this will be a public view,\nreturns a un 256. Turn s\nunderscore players dot length.\nWe're also probably going to\nwant the latest timestamp. So\nwe'll do function get latest\ntimestamp. public view returns\nyou in 256. And we're just going\nto return s underscore last\ntimestamp. And maybe we'll want\nto do request confirmation. So\nwe'll do function GET request\nconfirmations. Public pure since\nrequest confirmations is also a\nconstant function returns you\nwent to you went to 56 Turn\nrequest confirmations. All\nright, we've got some wonderful\ngetters here. Some views slash\npure functions, we have a way to\nget a random number we have a\nway in a decentralized context.\nAutomatic automatically execute.\npicking a random winner we have\na way for people to enter our\nraffle to enter this lottery.\nAnd we have a bullet proof way\nto solve creating a truly fair\ndecentralized lottery. Oh my\ngoodness. Let's do one more\ncompile for good measure H H\ncompile. And these are just\nwarnings. So we're good to go\nhere. Our code is compiling\nsuccessfully. Like I said\nNormally, this definitely isn't\ngoing to be the way that you're\ngoing to write your smart\ncontracts, it's almost\nimpossible to write a full smart\ncontract without making any\nmistakes. And without flipping\nback and forth between\ndocumentation, I have already\nwritten this contract many times\nmyself, and I still made a whole\nbunch of mistakes. So it is\ntotally reasonable and totally\nrational for anybody and\neverybody to make mistakes going\nthrough this. And to use\nresources and to write tests\nalong the way. Now that we have\nour raffle dot Seoul created,\nit's time to add everything\nelse. So we're going to come\nover here, we're gonna create a\nnew folder, and add our deploy\nfolder per usual.\nAnd we're going to do exactly\nwhat we've already done a couple\nof times, we're going to create\nsome scripts to deploy our\nraffle contract. Now with our\nraffle contract, there's a\ncouple of things in here that we\nwant to make note of first thing\nis that our constructor right\nnow is absolutely massive. There\nare a ton of parameters in here\nthat we need to account for.\nLet's take a look at our\nconstructors and see if there's\nany contracts that we're already\ninteracting with. Okay, VRF,\ncoordinator v2. This is a\ncontract address, entrance fee,\nno gasline, no subscription ID\nno callback, guestimate No, and\ninterval. No. So knowing that\nthis is an address should be a\ntip that Ah, okay, we're\nprobably going to need to deploy\nsome mocks. For this, since\nwe're going to need to interact\nwith a VRF coordinator contract\nthat's outside of our project.\nBut let's go ahead and start\nworking on our raffle deployment\nscript first, and we know we're\ngoing to have to deploy some\nmocks. So we'll just keep that\nin mind. So let's create a new\nfile. Oh, one, deploy raffle.js.\nAnd let's get started deploying\nour raffle contract. Now, this\nis going to look really similar\nto what we've done before. And\nwe're going to do it again here.\nIf you want to use your previous\ndeploy scripts as a reference, I\nabsolutely recommend you do so.\nBut let's get started with\nmodule that exports equals an\nasync function. That's going to\ntake get named accounts and\ndeployments. As input\nparameters, then we're going to\ndo const. Deploy log equals\ndeployments, then we're gonna\nsay const, Deployer, equals\nawait, get named accounts. Let's\ngo to our config and update\nmodule that exports to to have\nthis I'm just going to copy\npaste, so that employer is going\nto be defaulted to account zero\nand player is going to be\ndefaulted to account one, if you\nwant to go ahead and write this\nout, feel free to pause and\nwrite out your name accounts.\nRight now, there's gonna be a\nlot of boilerplate in our heart\nhat.config.js. So feel free to\nhave the GitHub repo for this\nlesson up with you or your\nprevious scripts that you've\nalready written as a reference\nnamed accounts Deployer. And\nwe're also going to have a\nplayer named account so that we\ncan separate different users or\ndifferent players who are\ninteracting with our contracts.\nBut for now, we're gonna grab\nour Deployer. And we're gonna\nget started. Now similar to last\ntime, we would just do const,\nraffle equals await ploy,\nraffle, comma, and then add all\nof our stuff in here, right? So\nthis would be from Deployer.\nargs, we're going to have a ton\nof args. So we're going to come\nback to this. And then log is\ngoing to be true. And then we're\ngoing to have wait\nconfirmations, there's a little\nbit more boilerplate we need to\nwork with here in our Hardhead\nconfig, we don't have a network\nhere. So let's add our network\ninformation. So we can get those\nblock confirmations will be\nspecific in here, as well. And\nwe'll say default network is\ngoing to be hard hat. And then\nwe'll say\nnetworks, and we'll add our\nnetwork information that's going\nto be working with heart hub,\nwhich has a chain ID of 31337\nmiles, we'll put that in here as\nwell. And block confirmations\nwere just set to one lot this\ncolumn here, we're also gonna be\nrunning some staging tests on\nthe Rinkeby network. So we'll\nadd rink B in here with a chain\nID of four, block confirmations\nof six, and we need to add a URL\nand then also some accounts for\nour URL. We've done this 100\ntimes. We'll do const. rinky\ndink could be RPC URL equals\nprocess study and v dot rake,\nthe RPC URL, that's private key,\nblah, blah, blah, we're going to\nadd all these same variables\nfrom our last projects. So I'm\ngoing to ask you to pause here\nand just copy paste all those\nvariables from our last project.\nBoom, like so since running\nrink, prpc, URL, private key\ncorn market cap and ether scan,\nwe're also going to want to make\nsure you folder, excuse me, new\nfile, dot env. And we're going\nto drop all of our information\nin here our rink, prpc, URL,\nprivate key, ether scan API key,\nand then our coin market cap API\nkey as well. Now that we have\nour private key or ring prpc URL\ndown in URL, B RPC URL, and for\naccounts, we're just going to\nadd that single private key. Now\nfor weight confirmations is\ngoing to equal For network\nconfig dot block con formations,\nor one, we're gonna have to\nimport network from Hardhead,\nwhich looks like my VS code\nautomatically did for me. Thanks\nVS code. So this is how we're\ngoing to deploy a raffle.\nObviously, we have a ton of\narguments that we need to\naccount for. So let's get to it.\nLet's look at our raffle\nconstructor to see what we need\nto get. Okay, well, the first\nthing that we need to get via of\ncoordinator v2, we're gonna use\nthe same strategy we used in our\nFunmi project with using mocks,\nif we're on a development chain,\nand using the actual contract\naddress if we're on a test net,\nor a live network, so let's get\nto it. So let's go ahead,\nrecreate that helper, hard hat\nconfig dot j s and create that\nconst. Network. Config, say it\nequals for hard hat, we're going\nto use a mock. So we don't need\nto put that in here for now. But\nfor rink B, let's go ahead, but\na foreign here, so the name is\ngoing to be Rinkeby. And we're\ngoing to need to go to the chain\nlink documentation, the VRF\ncontracts, and we're going to\nneed to grab the RF coordinator\nfor the Rinkeby. Test net, we're\ngoing to grab this address here,\nplop it in here, we'll say V RF\ncore did an eight tour v two,\nbam, right like that. So back in\nour deploy raffle, we're gonna\nhave to pick whether or not to\nuse the V RF coordinator v two\nin the network config or some\nmock that we deployed, which of\ncourse, leads us to us having to\ndeploy a mock, let's create the\nnew file 00. Deploy marks.js. So\nsame thing module that exports\nequals async function where it's\ntaking, get named accounts, and\ndeployments, as its input\nvariables from the heart at\nruntime environment, or do const\ndeploy COMM A log equals\ndeployments. And then const,\nDeployer equals await, get named\naccounts, Excel, and then we're\ngoing to grab the chain ID as\nwell as we're going to only\nwants to deploy this on a\ndevelopment chain. So we'll do\nconst chain ID equals network\ndot config dot chain ID. Now\nwe're going to only want to\ndeploy mocks, if we're on a\ndevelopment chain. So once\nagain, we're going to go to our\nhelper config, we're going to\nadd those development chains in\nhere. We'll say const,\ndevelopment chains equals hard\nhat, and localhost. And then\nwe're gonna want to export both\nof these. So module, dot\nexports, equals network config,\nand development chance. Now in\nour deploy mocks, we're gonna\nwant to grab those are saying\nconst development chains, equals\nrequire dot dot slash helper\nhelper hardhat config. Now we\ncan check to see if development\nchains dot includes the network\ndot name that we're currently\non. If we're in a development\nchain, we're gonna go ahead and\nlog local network, the\nprotected, deploying box. And\nnow we'll have to deploy a mock\nVRF coordinator, where do we get\na mock VRF to coordinator Well,\nlet's go ahead and create one of\nthose.\nWe go to the chainlink. GitHub\nagain, we go to contracts. So C\n0.8, actually have a mocks\nfolder with VF coordinator v2\nMach dot Sol, and we're just\ngoing to use this as our mock.\nSo in our contracts folder,\nwe're gonna create a new file\ncalled test new file called V RF\ncore, in a core, the two mock\ndot Sol, and we're just going to\nimport this mock and have it be\nour mock. So we'll do spdx.\nWe'll do pragma, solidity,\ncarrot zero, point 8.0, or seven\nor whatever we want to do, we'll\ndo import at chainlink slash\ncontracts slash SRC slash v 0.8.\nSlash, mocks, slash VRF. Pour\ndid a tour B to mock that soul.\nAnd we'll just check to see if\nit compiles with Hardhead\ncompile, and it looks like it's\ncompiling as well. Awesome. So\nnow that we have our mock\ncontract, we can actually go\nahead and deploy it. So we'll do\na weight loi, the RF core de ne\nTor V to Mach\ncomma, and then we'll give it\nour parameters in here. We'll\nsay from Deployer. Log is going\nto be true, and then we're going\nto do our arguments. Now, what\nare the arguments of this VRF\ncoordinator, v2 Mk. Well, if we\nopen the VRF coordinator v2\nMock, right in our VS code, or\non GitHub, we can actually see\nWe will roll over to the\nconstructor that it takes two\nthings. It takes a base fee and\na gas price link. What are these\nfirst one? Well, the first one\nis this const base fee. If we go\nback to the documentation, we\ncan see that there's this\npremium section of 0.25 Link\nrink B, this means that for each\nrequest, there's a base fee of\n0.25 link for every request. So\nanytime we want to request a\nrandom number on Rinckey, it's\ngoing to cost us 0.25. Link, or\nyou can think of it as 0.25\nOracle gas to make this request.\nSo back in our deploy mocks, we\ncan say base V equals, we could\nresemble Rinckey here and do 25,\nblah, blah, blah, or we could do\nethers dot utils dot parse eath,\nof 0.25. And I'll even put a\nlittle comment here, say 0.25 is\nthe premium, it costs 0.25 Link\nper request. And remember, the\nreason that this cost 0.25 Link\nper request versus the price\nfeeds didn't cost anything is\nbecause the price feeds. If we\nlook back at a chain that link,\neach one of these price feeds is\nbeing sponsored by a group of\nprotocols who are paying for all\nthese requests already, since\nthere isn't a sponsor for this,\nwe are the only ones requesting\nthe randomness, we get to be the\nones to actually sponsor getting\nthis random number, then the\nsecond thing here is going to be\nthe gas price link. So let's\ncreate another const here to\nconst. gas price link. But what\nthis is, is actually a\ncalculated value is a calculated\nvalue based on the gas price of\nthe chain. Here's an example if\nwe were to request a random\nnumber on Aetherium, and the\neath price skyrocketed up to\nlike to like a billion dollars,\ngas would be incredibly,\nincredibly expensive. Now when\nchain link nodes respond chain\nlink nodes pay the gas fees, who\ngive us randomness, and do\nexternal execution, the chain\nlink nodes are actually the ones\nthat pay the gas when returning\nrandomness or executing an\nupkeep or etc. If we go to our\nraffle dot soul, and scroll down\nto perform upkeep, or fulfill\nrandom words, it's actually the\nchain link nodes that are\ncalling these two functions and\npaying the gas for it, they get\npaid in Oracle gas to offset\nthose costs. But if the price of\neath, or any native blockchain\nskyrocketed the chain that nodes\nitself to pay the gas fee. So\nthe chain link nodes have a\ncalculated price have a\ncalculated variable called the\ngas price per link, which\nfluctuates based off the price\nof the actual chain, so that\nthey never go bankrupt.\nBasically, the price of a\nrequest changes based off the\nprice of gas for that\nblockchain, you can kind of\nthink of this as the link per\ngas, if you will, for now we can\nkind of just set it to whatever\nwe want. And we'll just set it\nto one e nine, which is going to\nbe equivalent to 1123456789. So\nnow that we have the base fee,\nand the gas price link, we'll\ngrab this base fee, we'll have\nthese be the arguments for our\nVR chord, enter V to mock, so\nwe'll say and actually we can\ndelete that will say const, args\nequals base fee, and gas price\nlink, then we can take this args\nvariable and just plop it in\nhere. Now we can do log mocks\ndeployed, then we can do log\nthat a little line like this to\nlet people know that this deploy\nscript is done, then we'll just\ndo a module that exports dot\ntags equals all and mocks. So\nnow that we have a view of\ncoordinator v2 Mock deployed,\nwe'll come back over to our\nraffle and make some code around\nit. Similar to what we just did\nwith our deploy mocks. We can\nsay if development chains that\nincludes network dot name, we'll\ndo some stuff. And we need to\nimport development chains from\nour helper Hardhead config. And\nwe need to import network from\nhard hat. My VS code\nautomatically added them Wow,\nthanks VS code. Let's even just\ndo const args and make this\nvariable down here. Stick it in\nargs. Our first argument is\ngoing to need to be this Vera fi\nto coordinator so let's make a\nvariable we'll say let VRF core\nneed torby to address and if\nwe're on a development chain,\nwe're going to grab that mock\ncontract. So we'll say const\nPRF, Cor de ATAR V to mock\nequals await ethers dot get\ncontract, the RF cord the cord\nto NATO Tor v two MK, and then\nwe can set the RF coordinator v\ntwo address equals VRF core\ndenater V two mach dot\naddress. Cool. We have that\naddress here. Else if we're not\non a local network, the VRF v2\ncoordinator address is simply\ngoing to be derived from our\nnetwork config. So let's import\nthe network config as well from\nour helper Hardhead config and\nwe'll say else VRF coordinator\nv2 address equals network config\nof our chain ID. Let's which\nactually sorry, we do need the\nchain ID cons chain ID equals\nnetwork dot config dot chain ID,\nchain ID of VR coordinator V to\nchain ID. You're a coordinator\nv2. Alright, perfect. We've got\nthe setup to work with our VRF\ncoordinator v2 address. What\nelse do we need from our raffle?\nWell, we need an entrance fee,\nwe probably want to change the\nentrance fee depending on what\nchain we're on, we're on a more\nexpensive chain, we might want\nto make this higher than others.\nSo let's go ahead back to our\nhelper Hardhead config and make\nan entrance fee based off of the\nblockchain, so for NP, maybe we\nwant to make it 0.01 eath. So we\ncould say ethers dot utils,\nparse ether of 0.01. And once\nagain, thank you VS code for\nautomatically dropping that in\nfor me. And we're also going to\nwant an entrance fee for our\nheart app, we can also set a\ndefault in here, but let's just\nbe a little more explicit. So\nwe'll say 31337. The name of\nthis is Art app, we don't need\nto give it a veneer of\ncoordinator v2 address because\nwe're going to deploy a mock.\nBut we do want an entrance fee.\nAnd let's just give it the exact\nsame entrance fee here. So we'll\nsay ethers dot utils dot parse\nether 0.01 E. Alright, great. So\non our deploy here, we can just\nsay const entrance fee equals\nnetwork config. Chain ID of\nentrance fee. Let's start\npopulating our arcs here. So the\nfirst one is going to be your Fe\ntwo coordinator address. Next\none is going to be our entrance\nfee. Got it? Got it. Now we need\nour gas lane. On Rigby and other\nnetworks, there are different\ngas lanes that we can choose\nfrom, let's grab the only gas\nLane from Rinckey, the 30, gray\nkey hash, let's drop this, of\ncourse into our network config\nas gasoline, pop it in here,\nwe're hard hat, our mock\nactually doesn't care what gas\nline we're working on, because\nwe're going to be mocking the\ngasoline anyways. So we can just\nsay gas lane, we can just go\nahead and use the same one or\nreally anything here, it doesn't\nreally matter. Now here we'll\nsay const, gasoline equals\nnetwork config.\nChain ID, gasoline, and we'll\ngrab the gas lane. And we'll\nstick it into our argument\narray, we've got this one, we've\ngot this one, we've got this\none. Now it's time for the\nsubscription ID. Now if you\nhaven't run through docstoc\nchain link for the chain link\nVRF, I highly recommend you do\nso so that you can understand\nwhat this subscription ID is we\nknow that we can actually make a\nsubscription ID using that front\nend using that website VRF dot\nchain dot link, which is great\nand all but what if we're on all\nlocal chains, we can get a\nsubscription ID no problem in\nhere. But it's a little bit\nharder on a local network. Now\nI'm actually going to teach you\nhow to create and fund\nsubscription it is completely\nprogrammatically. So you don't\neven need to use the UI if you\ndon't want to. However, for the\npurpose of this course, we're\nstill going to use the user\ninterface, we're still going to\nuse that website for us to get\nour own subscription IDs. But\nyou could 100% automate the\nprocess of creating a\nsubscription ID and funding a\nsubscription ID. Because when\nyou create and fund subscription\nIDs, you're just calling create\nsubscription and fund\nsubscription on that smart\ncontract. So on our development\nchain, we have our V RF\ncoordinator v2 Mock, and what\nwe're going to do and on our\ndevelopment chain, we're going\nto create that subscription. So\nwe're gonna say const,\ntransaction, response equals\nawait VRF coordinator v2 Mock\ndot create sub scription. And\nthen we'll run const transaction\nreceipt equals weight trends\naction response, dot Wait, wait\none block confirmation. And\ninside this transaction receipt,\nthere's actually an event that's\nemitted with our subscription\nthat we can get this is another\nplace where emitting events is\nincredibly helpful. So in fact,\nif we open back up a Vera v2\ncoordinator mark, and we look\nfor create subscription, we see\nwe emit subscription created\nwith the subscription ID, we can\nactually get this event emitted\nfrom our transaction receipt.\nNow to assign it, let's go ahead\nand create a sub subscription ID\nup here. And then we'll say\nsubscription ID equals\ntransaction receipt that events\nof zero dot args dot sub ID. And\nagain, be sure to watch that\nevents video if you want to\nlearn more about how to work\nwith events in hardware. Now\nthat we have a subscription, we\nneed to fund the subscription on\na real network, you'd need the\nlink token to actually fund the\nsubscription. The current\niteration of the mock allows you\nto fund a subscription without\nthe link token. So what we can\ndo is we can just run a wait\nyour F corps inator Mark, if\ncoordinator B to Mach dot fund\nsubscription, and we'll give it\nthe subscription ID and we'll\nneed to do some fundamental\nthis, we can just create some\nvariable, we'll say const VRF,\nsubscription fund amount equals\nethers dot utils, dot parse\nether, of, we'll say 30 VRF\nsubscription, fundament. We'll\njust paste that down here. We\ncould do this as well for a real\ntest net or live networks. But\njust so that we become familiar\nwith the user interface, we're\nnot going to do a test net\nprogrammatically. And for a test\nnet, we're just going to use\nexactly what we've been doing so\nfar. Or we can put a\nsubscription ID and our helper\nconfig. So we'll say\nsubscription ID, we'll put\nsomething in here right now,\nwe'll just leave it as zero. But\nlater on, when we actually\ncreate a subscription, we'll\nupdate our subscription ID. And\nso we'll say subscription ID\nequals network config. Change ID\nof subscription ID. Perfect. Now\nwe can add this to our arguments\narray. What else do we need\nsubscription ID, we need a\ncallback gas limit or callback,\ngas limit is going to vary\nnetwork to network. So once\nagain, we're gonna go into our\nhelper configure callback gas\nlimit. And for us, we'll set a\npretty high limit of 500,000\ngas. So we'll say call a gas\nlimit of 5.123 500,000. Gas. And\nfor hard hat, we'll do the same\nthing. So we can say const,\ncallback, gas limit equals\nnetwork config, chain ID,\ncallback, gas limit, grab this,\nput it into our argument array.\nWhat else do we need? All we\nneed now is the interval. So we\ncan change this network to\nnetwork as well. Rigby will say,\ninterval will ever just be 30\nseconds for both hard hat and\nfor Rigby. So we'll do the same\nthing here. Say const.\nInterval equals network config.\nChain ID, interval, and we'll\ngrab this, pop it in the end of\nour array. All right, awesome.\nNow we have an argument array\nand drop it right in here and\nperfect. Everything in our\nconstructor for our raffle\ncontract. Great. This is looking\nfantastic. We've got wait\nconfirmations we got logging\narguments Deployer. Okay, well,\nwhat next? Well, let's go ahead\nand add that verification piece.\nSo once again, create a new\nfolder utils, new file\nverify.js. We can either copy\npaste this from our last\nproject, or we can grab this\nfrom the GitHub repo associated\nwith this course, once we have\nour verify script in here, we're\ngoing to import it by saying\nconst. Verify equals require dot\ndot slash helper Hardhead\nconfig. And then we can add that\nsame bit of code down here to\nverify our contract, we'll say\nif we're not on a development\nchain. And we have process\nstudying v dot ether scan API\nkey, then we're going to log\nverifying dot dot and then await\nverify raffle dot address and\nthe arcs. Now we'll just do a\nlog of a whole bunch of hyphens\nsay that this script is done\nmodule dot exports dot tags\nequals say this will be all and\nraffle. All right, so let's test\nthis out. We'll do hardhat\ndeploy, or yarn, hard hat deploy\nand see if this script works\ncorrectly. Looks like we ran\ninto an error network config not\ndefined. So let's spell this\nright. Network config. There we\ngo. And that looks much better.\nLet's try this again. It looks\nlike our deploy scripts are\nworking well. local networks\nprotected, deploying mocks\ndeployed VRF coordinator v2 Mock\nmocks deployed and then we went\nahead and deployed our raffle.\nAwesome, this is massive. Now\nwe're not going to test the\ndeploying this to a test net\nquite yet, because well, we\ndon't have any unit tests yet.\nWe need to write unit tests\nbefore we want to ever test\nrunning this on a test net. So\nwe have our deploy script, we\nhave our contracts, that means\nit's time for us to write some\ntests. We'll come over here\nwe'll create a new folder called\ntest. And for now, we'll just\nmake our unit tests. So unit\ntests, and in here we create a\nnew file called raffle.test.js.\nAnd let's write some unit tests.\nNow for these unit tests, we are\ngoing to be a little bit verbose\nhere, we're going to make our\ncoverage really, really good\nhere. It's not gonna be perfect,\nbut this is going to be pretty\nverbose. So I'm gonna go pretty\nquickly here. So you can feel\nfree to pause, slow me down,\nspeed me up whatever you need to\nlearn this section. It is really\ngood muscle memory to go through\nwriting these tests and\nunderstand what you should be\nthinking about when you're\nwriting these tests. So feel\nfree to speed up the parts You\nalready know and slow down the\nnew parts. Because we are going\nto go over some new information\nhere. writing tests may seem\nlike a tedious process. But I\npromise as you get better at\nwriting these tests, you'll\nrealize that these are the\nthings that you can rely on when\nstuff doesn't work. And when\nyou're not sure how to code,\nsomething, getting this muscle\nmemory down, writing these tests\nis going to make you a fantastic\nengineer. So let's go through\nand we'll write some of these\nverbose tests here to try to\nmake this really good and have\nthis have really good coverage.\nAnd if you want to go back later\non, and see if you can give it\neven more coverage, and even\nbetter tests, please feel free\nto do so. But let's get started.\nLet's write some tests. So we're\ngoing to start out pretty much\nthe same way we've been starting\neverything out, we're going to\ngrab our development chains, so\nthat we only run our unit tests\non a development chain. So we'll\ndo const development chains,\nequals require dot dot slash dot\ndot slash helper, RD, hard hat\nconfig, and then we'll say not\ndevelopment chains, that\nincludes network dot name, and\ndescribe that skip. Otherwise,\nwe'll do describe, so this first\ndescribe is going to be our\nraffle unit tests. And this is\ngoing to be an async. function.\nSo raffle unit tests so that it\ncomes on the next line, it looks\na little bit better. Alright,\ngreat. Now, what are some of the\nmain things that we're going to\nneed to deploy? Well, we're\ngonna need to deploy a raffle,\nwe're probably going to want a\nVRF core to a tour be to mock\ngraded before each, that's going\nto be an async function, where\nwe go ahead and we get these\nwill say const. Employer equals\nawait, get named accounts.\nSo we're gonna need to import\nget named accounts or require\nget name accounts from hard hat,\nthen we're going to want to\ndeploy these using our fixtures.\nSo we can say await deployments.\nAnd then we're going to import\ndeployments as well from hardhat\ndot fixture, and we're going to\ncall all, we're going to deploy\neverything. And again, if we\nlook at our one, our raffle has\nthe alt tag, and our Oh, our\nmocks also have the alt tag,\nokay, perfect. Once we deploy\neverything, we can say raffle\nequals await ethers dot get to\ncontract. And we got to import\nethers from hard hat, like so.\nAnd we'll say it will get the\nraffle contract and we'll\nconnect it to our Deployer. And\nthen we're going to do the same\nthing with VRF coordinator v2\nMock equals await ethers dot get\ncontract, the RF coordinator, B\nto MK connect this to deployer\nas well. Alright, great, our\nfirst set of tests describe,\nthey're going to be the\nconstructor. And this is going\nto be an async function. And\nlet's do this. Let's create an\nIT initial initializes the\nraffle correctly, this is going\nto be an async function. Now I\njust want to make a note,\nbecause ideally, we make our\ntests have just one assert, or\nit just keep that in mind is\nthat ideally, we want to have\njust one assert for it. But\nwe're going to have a bunch\nbecause like I said, we're being\na little bit loose here. So we\nwant to just make sure that our\nraffle is initialized correctly.\nSo we'll say const raffle state,\nand we'll get that raffle state\nbecause we want to make sure\nthat we start in an open raffle\nstate. So we'll say const,\nraffle state equals await raffle\ndot get raffle state. And then\nwe want to say assert dot equal\nope and then we need to import\nassert from Chai. So assert\nequals require Chai assert dot\nequal raffle state.to string\nbecause again, raffle state is\ngoing to be a big number. And\neven though a raffle state is of\ntype raffle state, it'll return\na zero if it's open and a one if\nit's calculating. So this gets\ntransformed just into a un 256.\nWhen we call it like this, a\nraffle state variable here will\nbe a big number. So we want to\njust to string a file. So assert\ndot equal raffle state DOT two\nstring zero. We'll also make\nsure our interval gets set\ncorrectly. So we'll do const\ninterval equals await raffle dot\nget interval. And I don't know\nif we have one of those it's\nactually C inter ball see if we\nhave one of those. We don't have\na good interval let's go ahead\nand add again interval function\nso we'll do function get in\ntrouble. We have public view\nreturns you went to six return I\nunderscore interval will have\ngood interval will say raffle\ndot get interval and will also\nsay assert dot equal interval.to\nstring. It should equal one Ever\nis in our helper config, right?\nBecause we're using the interval\nand helper config. So we say\ninterval.to string should equal.\nSo we'll import that as well.\nNetwork config. And we'll say\nthe interval should equal\nnetwork config. Of let's also\nmake, get our chain ID up here,\nchain ID, say const. Chain ID\nequals network dot config, a\nchain ID, network config of the\nchain ID of interval. Alright,\ncool. So let's test this so far,\nHH test or yarn, hard hat test.\nAnd cool looks like it passed.\nAnd we have our little gas\noutput here. Awesome. Let's go\nto our Hardhead config, just so\nthat it doesn't always print out\nat gas, but there for now. So\nI'm going to copy paste the gas\nreporter section from our last\nproject, like so. And we're\ngoing to have enabled gas be\nfalse for now. So now if we run\na Hardhead test, again, we\nshouldn't have that gas bid\nprinted out, we should just see\nthe tests and perfect, that's\nwhat we see. And our constructor\ntest passes. Yay, what's next,\ngot our constructor. And we\nprobably could have written more\ntests for the rest of these. But\nlet's just move on. Alright,\nenter raffle, that's going to be\nour next describe block. So it\nwill do describe,\nenter, raffle. And this is going\nto be an async function. And\nwe'll say it reverts when you\ndon't pay enough, right, because\none of the first things that we\ncheck is that they're paying\nenough. So we want to make sure\nthat this actually reverts if\nthey don't pay enough. So this\nwill be an async function. Where\nwe're going to do that same\nexpect await thing. So we're\ngoing to import expect from\nChai, which comes from those\nwaffle matchers. And we're gonna\nsay await, expect raffle dot\nenter a raffle. And we're not\ngoing to pass any value here,\nwe're going to expect it to dot\nb dot reverted with. And if we\nlook here, we want it to be\nreverted with this raffle not\nenough eath entered. So we can\nput that in quotes raffle not\nenough eath entered. Now we can\ntry this out. Make sure that it\nactually works. Ah ah test dash\ndash grep. Put this in quotes\nthat you don't pay enough. And\nawesome. We're passing there.\nWhat else do we want to test?\nWell, we want to test that if\nthe raffle isn't open, we also\nrevert but we'll test that in a\nlittle bit. As we kind of test\nthe rest of the functionality.\nWe want to see that it records\nplayers when they enter. So this\nwill be an async function. And\nnow we'll enter the raffle.\nFirst we're going to need that\nraffle entrance fee. Let's go\nahead and save that at the top.\nSo we'll say let raffle VRF\ncoordinator be to mock raffle\nentrance fee and then our before\neach will say raffle entrance\nfee equals a weight ethers dot\nget entrance fee. This should be\nraffle dot get entrance fee. So\nnow we have this raffle entrance\nfee, you can use it to enter the\nraffle we'll say a weight raffle\ndot enter raffle with a value of\nraffle entrance fee. And we can\nmake sure that our Deployer here\nhas been correctly recorded. So\nsince right now we're connected\nto the Deployer. We'll just make\nsure that that deployer actually\nis in our contract. So we'll say\nconst player from contract\nequals await raffle dot get\nplayer of zero, because we\nrecord them in our players array\nand we have our get players\nfunction which pulls them out.\nAnd then we'll say assert dot\nequal player, player from\ncontract should be the Deployer.\nSo now we can grep for this in\nour hard head test. Make sure\nthis works. HH test dash dash\ngrep. Deployer is not defined.\nWe've got it up here. But we\nactually didn't save it\nglobally. So we got to do let\ncommon Deployer. And we'll say\ndeployer equals await get named\naccounts. And we'll wrap it like\nthis to get the deployer\nAwesome. Let's try this again.\nAnd awesome. What else should\nthis do? Well, it's also\nemitting an event. So let's make\nsure it emits an event. So we'll\nsay it emits event on enter.\nThis will be an async function\nas well. And this will be the\nfirst time that we're testing to\nmake sure a function emits an\nevent and the syntax is going to\nlook really similar to what we\ntest for when we check to see if\nan error is fired. So we're\ngonna say await expect raffle\ndot enter raffle with value of\nraffle entrance fee dot two dot\nomit and this.to dot emit we get\nfrom During woful, these chime\nmatches for emitting events we\ncan do a wait expect to emit,\nand then the event that we're\nexpecting to emit. So we're\nsaying to omit the raffle\ncontract to emit a raffle enter\nevent. We can copy this, try to\ntest this in our terminal. So\nwe'll say hard hat. Test dash\ndash grep. Just put this in\nquotes. And that passes as well.\nGreat. Let's now go ahead and\ntest to make sure that we can't\nenter the raffle whenever this\nraffle is not open or it's\ncalculating. So we'll say it\ndoesn't allow entrance, when\nraffle is Cal cumulating. And\nthis will be an async function.\nAnd first we'll enter will say\nawait raffle dot enter raffle\nvalue is raffle entrance fee.\nNow what we want to do we want\nto get this raffle into a closed\nstate. So we want to get it out\nof its open state. Well, how do\nwe move this raffle from raffle\ndot open to raffle dot closed in\nperform upkeep, remove the\nraffle from raffle that open to\nraffle dot calculating but\nperform upkeep can only be\ncalled if check upkeep returns\ntrue. Otherwise, it'll revert\nwith raffle upkeep not needed.\nSo what we need to do is we need\nto make check upkeep return\ntrue. And we will pretend to be\nthe channeling keeper network to\nkeep calling checkup keep\nwaiting for it to be true. And\nonce we make it true, then we'll\npretend to be the channeling\nkeepers and call perform upkeep\nto put this contract in a state\nof calculating. Now how do we\nactually do that? Well, in order\nfor checkup keep to be true, we\nfirst need to see that we are\nindeed open, which we are. The\nnext thing that we need to do\nthough, is we need to do this\ntime passed bit. We need to\nactually wait that 30 seconds\nfor time to pass. Now, that kind\nof sounds awful. Do we have to\nwait 30 seconds for all of our\ntests? What if our interval was\n10 days when we have to wait 10\ndays to run our tests? It sounds\nridiculous. Well, hard hat\nactually comes built in with a\nton of functions for us to\nmanipulate our blockchain to do\nliterally whatever we want it to\ndo. In the hard hat\ndocumentation. There's a section\ncalled Hard Hat Network\nreference inside the Hard Hat\nNetwork section. And in here,\nthere's a ton of information\nabout how the hard hat network\nactually works and different\nconfigs that we can do with it.\nIf we scroll down low enough, we\ncan see the JSON RPC methods\nthat we can use on this\nblockchain, we can do eath\naccounts block number call\nchinetti. We can do all these\nRPC methods that a normal\nblockchain has. Additionally, we\ncan do even more than that, we\ncan use these things called Hard\nHat Network methods. Since this\nis our local Hard Hat Network.\nAnd we're using this for\ntesting, we want to be able to\ntest any scenario. And it's\nthese methods that give us the\nability to do that, you can go\nthrough this and play around and\nsee all the different things you\ncan do. One of them in\nparticular is going to be set\nstorage set where you can set\nstorage at any place, which is\nreally fun. But some of the\nspecial testing debugging\nmethods are going to be EVM\nincrease time, and EVM. Mine\nincreased time allows us to\nautomatically increase the time\nof our blockchain and EVM. Mine\nallows us to mine or create new\nblocks, because if we increase\nthe time, it doesn't do anything\nunless there's a new block\nmined. So what we can do is we\ncan run a wait network, and\nwe'll import network from Hard\nHat Network await network dot\nprovider that send EVM in crease\ntime, comma, we can send a list\nof parameters to send with it,\nwhich for us are just going to\nbe our interval.to number. And\nthen we'll do plus one. Now\nright now, our interval isn't\nstored globally, so we're\nprobably going to want to do\nthat. So let's go ahead and do\ninterval. And then in our before\neach, we'll do interval equals\nawait, raffle dot raffle dot get\ninterval, I'm just going to copy\nthis and we're going to delete\nthis whole line. Wait raffle dot\nget interval. Since now we're\njust going to call it interval\nat a global level, since we're\ngoing to use it a lot. Now we're\ngonna say interval that to\nnumber plus one. So we want to\nincrease the time by whatever\nour interval is to make sure\nthat we can actually get that\ncheckup keep to return true. So\nadditionally, we're going to\nwant to do a weight network dot\nprovider. Dot send EVM mine with\nan empty array just because we\njust want to mine it one extra\nblock. You can also do network\ndot provider that request with\nan await here, these two would\nbe basically the same, but this\none's a little quicker, right?\nSo we've increased the time of\nour blockchain. We've mined a\nblock to move forward. It should\nbe open time has passed. Do we\nhave a player? We do indeed,\nbecause we've entered the\nraffle. We should have a balance\nbecause we've entered the right\nApple, check upkeep should now\nreturn true. So we should be\nable to call perform upkeep and\npretend to be a chain lock\nkeeper. So we're going to\npretend to be a chain the keeper\nand call await raffle dot\nperform upkeep. And we're going\nto pass this some empty call\ndata just by passing a blank\narray like that. And now this\nshould be in a calculating\nstate. So now that it's in a\ncalculating state, we can say\nour enter raffle reverts\ncorrectly if the raffle isn't\nopen. So now we'll say await,\nexpect raffle dot enter, raffle.\nAnd we'll send it value of\nraffle entrance fee. We're\nexpecting this.to dot b dot\nreverted with that raffle\nunderscore underscore not open\nerror. Okay, let's try just this\nin our tests now. So we'll run\nHardhead test dash dash grep.\nPut this in quotes. And perfect\nthat passes as well.\nNow if we run Hardhead test,\nlet's just test everything\ntogether right now. And\neverything is passing. Oh, this\nis wonderful. Awesome. Let's\nkeep it going. And if we run\nHardhead coverage, we'll see our\ncoverage is bumping up, we are\nalready drastically better than\nwhere we were before. Let's keep\ngoing well, let's go ahead and\ntest our check upkeep now. So\nwe'll do describe, check upkeep.\nAnd this will be an async\nfunction,\nwhere we'll say it returns\nfalse. If people have been sent\nan E, E, it's been a sync\nfunction.\nSo we'll have everything in here\nbe true except for the fact that\nnobody's entered yet. So we'll\ndo a weight network dot provider\ndot send EVM increase time,\ncomma interval.to number plus\none\nwill do a weight network dot\nprovider. That send UVM mine. No\nparameters. Now we're going to\ncall check upkeep. Now here's\nthe thing, check. upkeep is a\npublic function.\nSo if we just run await, raffle\ndot check upkeep, and we pass\nnothing in this is going to kick\noff a transaction, because hard\nhad knows Oh, okay, it's a\npublic function, they're clearly\ntrying to send a transaction\nhere. If this was a public view\nfunction, it wouldn't, it would\nreturn that view. But the thing\nis, I don't really want to send\na transaction. But I want to\nsimulate sending this\ntransaction and seeing what this\nupkeep needed would return.\nWell, I can actually get that by\nusing something called call\nstatic, I can simulate calling\nthis transaction and seeing what\nit will respond. So instead of\nraffle dot, check upkeep, I can\ndo raffle dot cost static, that\ncheck upkeep. And this will give\nme the return of upkeep needed\nand the bytes perform data, I\ncan extrapolate just the upkeep\nneeded out of this return or\nwriting const upkeep needed\nequals this, and then I can do\nassert not upkeep needed,\nbecause right now upkeep needed\nto return false. So we'll say\nassert, not false, which is\ntrue. If upkeep needed was true,\nthen this would be false. And\nthis would break. So that's what\nwe want to do. So let's go\nahead, we'll run this, see if it\nworked. Our hat test, dash dash\ngrep. And we're in passing, we\nare in business. Awesome. So\nthis is working perfectly. Well,\nand let's also test that it\nreturns false. If raffle isn't\nopen. This will be an async\nfunction. And we'll do\neverything except and we'll do\neverything in here. But we'll\nmake the raffle in the\ncalculating state. So do a\nweight, raffle dot enter, raffle\nvalue, raffle entrance fee await\nnetwork dot provider that send\nand I'm just going to copy these\ntwo lines here. Because we're\ngoing to go ahead and do those.\nWe're also going to do a weight,\nraffle dot perform upkeep. And\nanother way to send a blank\nbytes object is to do a string\nlike 0x hardhat is smart enough\nto know that this should be\ntransformed into just kind of a\nblank bytes object. So either\none of these should work. Now\nwe're do const, raffle state\nequals await, raffle dot get\nraffle state and we'll Get\nupkeep needed. So we'll say\nconst. upkeep needed, we'll do\nexactly what we did above raffle\ndot call static dot check\nupkeep. Let's say excuse me a\nweight, raffle dot call static.\nNow we can do assert dot equal,\nsay raffle state is going to be,\nor excuse me raffle state.to\nstring, it's going to be\ncalculating, and I started dot\nequal upkeep needed, it's going\nto be false. Let's run a GREP on\nthat. And perfect. That's also\nworking correctly. Great. Now\nI'm going to skip over these\nnext two tests, because we\nhaven't really learned anything\nfrom them. So I'm just going to\ncopy paste them from the GitHub,\nwe're going to return false if\nenough time hasn't passed. And\nwe're going to return true. If\nenough time has passed, we have\nplayers Eve and is open. So\nwe're just asserting true down\nhere. And we're starting not\ntrue up here, you want to pause\nthe video and copy paste these\nand write these out, you\nabsolutely can copy paste them\nfrom the GitHub repo, you\nabsolutely can't like I said,\ngoing through this and making\nyourself write these and making\nyourself understand these tests\nis going to make you a\nsubstantially better coder. And\nlet's just test that it all\nlooks good with hh test. Now, as\nI was recording this, I just\nrealized that for all of our\ndescribe blocks, I've been\nmaking them async functions\ndescribe blocks actually don't\nrealize and can't recognize and\ncan't work with promises. So\nhaving the be async actually\ndoesn't do anything. So in your\ndescribe block, we want to get\nrid of the async word because\nit's actually not helping us at\nall. In fact, it's just an extra\nword, and it looks kind of\ngross. So now all of our\ndescribe blocks, we're gonna get\nrid of that async keyword, and\njust have them be functions. Of\ncourse, all of our it's, though,\nare going to be using\nasynchronous functions, which is\nwhat we want. So we've written\nsome tests for a checkup keep.\nNow let's go ahead to perform\nupkeep.\nLet's create a new describe,\nblock, ascribe or perform\nupkeep. This is going to be a\nregular function. And in here,\nwe're going to start and say it\ncan only run if check upkeep is\ntrue. And this will be an async\nfunction. Because we only want\nto perform keep to work if\ncheckup keep is indeed true. So\nwe'll say await raffle dot\nenter. raffle we'll send it some\nvalue, raffle entrance fee, I'm\nsorry, there should be curly\nbraces instead. And we'll do a\nweight network dot provider that\nsend EVM increase time inter\nvol.to number plus one await\nnetwork dot provider that send\nUVM mine an empty array there to\nthe reason that we're moving\ntime forward and moving our\nblock forward, of course is\ngonna be the same thing as\nabove, we want our check upkeep\nto return true. And then we're\ngonna say const X or transaction\nequals await raffel dot perform\nupkeep. We can either do a blank\narray, or we could do 0x Doesn't\nmatter. And we can assert the X.\nNow if TX doesn't work, or this\nerror is out or something, this\nwill fail. Right. So that's how\nwe know that this actually can\nwork. So let's test this out. We\nwant this only to work if\ncheckup keep is true. And we\nmade checkup keep true by all\nthe stuff that we did above. So\nnow we'll do yarn hardhat test\ndash dash grep with our IT block\nhere. And I spelled perform\nupkeep wrong perform upkeep.\nLet's try spelling things\ncorrectly. And let's run that\ntest again. And great. That's\nworking. I will What else do we\nwant to do? We want it to revert\nwith raffel. upkeep not needed\nif checkup keep is false. So in\nhere we're gonna say it reverts.\nWhen check up keep is false.\nThis will be an async function.\nAnd we're going to do that same\nsyntax await expect raffle dot\nperform upkeep empty bytes\nobject that to.be reverted with.\nAnd what do we want it to be\nreverted with? Or hoping it's\nreverted with this with that, we\ncan run this test here Hardhead\ntest dash dash grep paste that\nin. And we see that is indeed\npassing now something that\nyou'll notice here is that our\nrevert actually goes ahead and\nreverts with all this extra\nstuff as well. Our test is smart\nenough to know that if all we do\nis put the name of the error\nthat is getting reverted with\nthen it's good enough. If we\nwant to be super specific, we\ncan actually go ahead and make\nthis a string interpolation and\nadd all of these in here. So we\ncan add the balance that we\nexpect we can add the players\nthat we expect. And we can add\nthe raffle statement for now\nwe're just going to keep it as\nwe're expecting this but if you\nwant to be super specific you\ncan have your tests expect for\nexactly the specific values that\nyou're looking for. But alright,\nwhat is the last thing we should\nexpect form? Well, we should\ncheck to see that this actually\ngets called the raffle state\ngets changed. And we admit this\nevent. So let's go ahead and add\nthat. We'll say it updates the\nraffle state admits an event and\ncalls the VRF coordinator to be\nan async function as well. Let's\ndo this. So let's go ahead and\nlet's make checkup keep true,\nI'm just going to copy paste\nthese first three lines, since\nit's going to be exactly the\nsame. We're going to enter the\nraffle we're going to increase\nthe time we're going to mind a\nnew block, then we're going to\ncall perform upkeep. So we're\ngoing to say const, TX response\nequals await raffle dot perform\nupkeep with an empty bytes\nobject, and we're going to do\nconst TX receipt equals await TX\nresponse dot wait for one block.\nFrom this receipt, we're gonna\nget the request ID, we're gonna\nsay const Request ID equals, we\ncan get the request ID. From\nthis omitted event. However, we\nshould look at our VRF\ncoordinator mock again, when we\ncall request random words, both\nin the mock and then in the\nactual contract, you'll notice\nthat it also emits an event with\nrandom words requested. And if\nyou look in here, the second\nparameter that it has is indeed\nthe request ID. So in reality,\nUS omitting the request ID is\nredundant, we can just use the\nadmitted Request ID from the VRF\ncoordinator for the purpose of\nthis course and showing you what\nan event looks like. We're going\nto leave it in there. But if you\nwant to go back and refactor\nthis, you would definitely want\nto remove this omit. But for\nthis test, let's do TX receipt\ndot events. And this is going to\nbe the first event instead of\nthe zero with event because\nbefore this event gets emitted,\nthis function is going to emit\nan event. So instead of the zero\nwith event, this is the first\nevent that gets emitted after\nthis one. So tax receipts dot\nevents of one dot args dot\nrequest, ID, and then we're\ngonna say cert request id.to\nnumber is greater than zero. And\nthen we'll also assert that the\nraffle state equals equals one.\nSo we're gonna do const, raffle\nstate equals await, raffle dot\nget raffle state. And this\nshould actually be raffle\nstate.to Number, or to string\nand then you know, do whatever\nwe want to do. And this is a\nvery big it, but we're going to\ncopy the whole thing anyways. HH\ntest, dash dash grep, paste that\nin there, we run it, excuse\nme.to string equals equals one,\ntransformer time and perfect, we\nare passing Great, now it's time\nfor fulfill random words. And\nthis is where we're going to\nlearn a lot of fantastic stuff\nhere. So we're gonna make a new\ndescribe block zoomed out a\nlittle bit here. And this is\ngoing to be our fulfill random\nwords. It's going to be a\nfunction, of course. And in\nhere, we're actually going to\nadd another before each want to\nhave somebody have entered the\nraffle before we run any tests\nin here. So we're going to do a\nbefore each, which will be an\nasync. function. And we're just\ngoing to run await, raffle that\nenter raffle with a value of\nraffle entrance fee. And then\nwe're going to do a wait network\ndot provider dot send EVM\nincrease time of interval, that\nto number plus one, and then a\nwait network dot provider dot\nsend EVM mine. Comma. Before\nwe've tried to do any testing of\nor fulfilled random words, we're\ngonna have somebody enter the\nlottery. And we're going to have\nincreased the time and mined a\nnew block. Okay, cool. So the\nfirst thing we want to do is\nwant to see that fulfill random\nwords can only be called so long\nas there's a request in flight,\nso long as there's a requested\nas long as request random words\nhas been called. So we can\nactually check that by running\nit can only be called after\nperform. This will be an async\nfunction. And in here, we're\ngoing to revert on some requests\nthat don't exist. So we'll do\nawait, expect the RF core didn't\na tour be to mock dot fulfill\nrandom words. And if we look at\nour V RF, coordinator v2 Mark in\nhere has the fulfill random\nwords function, which is what\nthe chain link node actually\ncalls and inside Add this\nfunction in the actual contract\ncalls another contract that does\nthe random number verification.\nSo we're basically checking this\npart right here. If the request\ndoesn't exist, we're going to\nget this non existent request\nhere. And as you can see, it\nneeds a request ID and a\nconsumer address. So we're going\nto guess zero. And the consumer\naddresses, of course, it's gonna\nbe raffled out at address, we're\ngoing to expect this to be\nreverted, with non existent\nrequest. And then we're going to\ndo this exact same thing with a\ndifferent Request ID or request\nID one. And hopefully, we're\nalso going to get non existent\nrequests. Now ideally, no\nrequest here would ever allow\nthis fulfill random words to go\nthrough. Now, it obviously would\nbe really hard for us to test\nevery single possible Request\nID, we're going to see a way in\nthe future to actually test for\na ton of these variables with\nsomething called fuzz testing.\nBut we'll get to that in the\nfuture. And I spelt the scribe\nwrong, let's let's actually\nspelled the scribe correctly, go\nahead and run this hh test dash\ndash grep.\nAnd great it passed. Now I'm\ngoing to make just one more test\nhere, that's gonna be way too\nbig. But right now the test that\nwe're about to write is going to\nbe it's going to be a really big\ntest. And we probably want to\nsplit it up into different\nsections, but actually figured\nthat this was actually the best\nway to show this section. And\nit's going to be exactly what\nwe're going to do. When we get\nto our staging test, we're going\nto write this test literally\nalmost exactly the same. So\nlet's write it, this is\nbasically going to be the test\nthat puts everything together.\nSo we're going to test that this\nindeed, so winner resets the\nlottery, and sends money, which\nis kind of a lot for a single\nit, we probably would want to\nsplit those into their own\npieces. But for this, we're just\ngoing to put them all into one,\nand it's going to be an async\nfunction. Now we are going to\nlearn a couple of new tricks\nhere. So definitely be sure to\nfollow along. Now for this one,\nwe're also going to add in some\nadditional entrances additional\npeople who are entering this\nlottery. So we'll say const,\nadditional, and trance equals\ngreat. We're gonna have some\nmore of those fake accounts from\nethers enter our lottery here.\nSo we're gonna say const.\nStarting account, index equals\nto, since deployer equals zero,\nexcuse me equals one, since the\nplayer is zero, so we're going\nto have new accounts start from\nindex one. And we're going to do\na little for loop or let i\nequals starting count index, i\nis less than the starting count,\nindex, plus additional and trend\nsees there's gonna be entrance.\ni plus plus, we're gonna do a\nlittle loop and connect our\nraffle contract to these new\naccounts. And then we're going\nto have these new accounts,\nenter our raffle contest. Count,\nconnected raffle equals raffle\ndot connect accounts of i and do\nwe have accounts defined\nsomewhere we don't. So let's get\naccounts to find somewhere.\nWe'll say const accounts equals\nawait ethers dot get signers.\nAnd then we're going to do a\nweight account connected raffle\ndot enter. raffle with a value\nof course of raffle entrance\nfee,\nwe're going to connect three\nadditional entrance to our\nraffle. So we're going to have a\ntotal of four people connect\ninto this raffle. Now that we\nhave them in here, we're going\nto keep note of our starting\ntimestamp. So we're gonna do\nconst starting timestamp equals\nawait, raffle dot get last\ntimestamp. And here's where\nwe're going to get a little bit\ntricky. What we want to do is a\ncouple of things we want to we\nwant to perform upkeep, which is\ngoing to mock being chainlink\nkeepers, which will kick off the\nchain link, which will kick off\ncalling fulfill random words.\nAnd we're going to mock doing\nthat as well. Mock being the\nchain link VRF. Once we do that,\nwe can of course just check to\nsee okay, did the recent winner\nget recorded the raffle get\nreset just play as we said as\nthe timestamp is everything\nreset. But we want to do this in\na specific way. If we're doing\nthis on a test net after we call\nfulfill random words, we will\nhave to wait for the fulfill\nrandom words to be called. Now\nsince we're working with a\nhardhat local chain, we don't\nreally need to wait for\nanything, right because we can\njust say okay, boom, snap our\nfingers and adjust our\nblockchain to do whatever we\nwant. But we're going to\nsimulate that we do need to wait\nfor that event to be called. So\nin order for us to simulate\nwaiting for that event, we once\nagain need to set up a listener.\nNow if we set up a listener we\ndon't want this to Just to\nfinish before the listener has\nis done listening, so we need to\nonce again create a new promise.\nAnd this is going to be\nincredibly important, especially\nfor our staging tests. So we're\ngoing to do await, new promise.\nAnd this is going to be exactly\nthe same as we set it up before,\nit's going to be an async\nfunction that's going to take\nresolve and reject as\nparameters. And we're going to\nuse this little arrow syntax\nhere saying, this is an async\nfunction, basically, and we're\ngoing to set up once again, that\nonce syntax, we're gonna say\nraffle that once, what's the\nevent name, winner picked. So\nwe're gonna say, Listen, for\nthis winner picked event, we're\ngonna say raffle dot once winner\npicks happens, do some stuff.\nAnd again, this is just an\nanonymous function. So we're\ngonna say raffle dot once the\nwinner picked event gets\nemitted, do some stuff. So we're\nsetting this up. Now it's in\nthis function, we're going to\nadd all of our certs and\neverything because we want to\nwait for winter to get picked.\nNow before the event gets fired,\nthough, we of course, need to\nactually call perform and call\nfulfill random words. So this is\ngoing to seem like it's a little\nbit backwards. But that's\nbecause we want to set up our\nlisteners so that when we do\nfire, the methods that will fire\nthe event, our listener is\nactivated and is waiting for it.\nSo we're going to put all of our\ncode inside of this promise.\nNow, because we put it outside\nof the promise, we put all the\ncode outside of the promise,\nthis promise will never get\nresolved, because the listener\nwill never fire into vent. So if\ndown here, you know we call\nfulfill random words with\nsomething, you know which the\nspelling is bad. But let's say\nwe call the down here, this\npiece of code will never reach\nthis fulfill random words,\nbecause it's always going to be\nwaiting for this wants to get\nresolved. So we need to add all\nof our code inside the promise.\nBut outside this raffle dot once\nnow we don't want to wait\nforever, right? Maybe there is\nan issue here. And we want to be\nable to reject this, if there's\nan issue. Now what we can do is\nin our heart hat dot config, we\ncan add a timeout. So we can add\nthis mocha section, we can give\nourselves a timeout of 200,000\nmilliseconds, which is going to\nbe 200 seconds max, if this\nevent doesn't get fired in 200\nseconds, this will be considered\na failure and this test will\nfail, which is what we want. And\nI typically like to just wrap\nthis in a try catch because if\nsomething fails, it'll cause you\na whole bunch of headache catch\nE. And if anything fails, we'll\nalso reject, there's an issue\nwith us calling some function,\nwe'll just say, Hey, okay,\nthat's a failure. But you fail,\nthat way, our promise can get\nresolved in a timely manner,\nwe're going to add this code in\na little bit. But let's keep\ngoing. Let's keep going. And\nexcuse me, the trycatch should\nbe in the ones, the ones above\nthe results, excuse me, because\nthis is the listener. So sorry,\nwe want the trycatch to be\ninside the ones if this takes\ntoo long, we want to just go\nahead and throw an error.\nOtherwise, we're going to\nresolve now outside the\nlistener, but inside of the\npromise, we're going to do this\nbit here, where we go const TX\nequals await raffle dot perform\nupkeep, and we'll pass it the\nempty bytes object, we'll get\nconst TX receipt equals await TX\ndot weight of one block.\nAnd then we're going to do a\nweight VRF core didn't a tour be\nto mock dot fulfill random\nwords, CX receipt dot events of\none dot args dot Request ID come\na raffle that address. So then\nthe final thing that we're going\nto do is we're going to get this\nveer off coordinator be to mock\nwe're going to have it call\nfulfill random words, which\ntakes the request ID and the\nconsumer address. So we're going\nto mock it, give it the request\nID which we get from the\ntransaction receipt, and the\nconsumer address here. All\ninside this promise, we're\nsetting up a listener for this\nwinner picked event. And then\nwe're mocking the channeling\nkeepers and then we're mocking\nthe chainlink VRF. And once this\nfunction gets called this\nfunction should emit a winner\npicked event. So this raffle\nthat was set up that was\nlistening for this to get\nemitted will pick up and go Ah\nokay, I found it I found the\nwinner picked event. Now we can\ngo ahead and do some stuff. So\nonce the winner picked event\ngets fired, we'll do a little\nconsole dot log found the event\nlike this and we'll jump into\nour try catch and this trycatch\nis going to be basically us\ndoing all these asserts in here.\nSo first we want to say const\nrecent winner equals await\nraffle dot get recent winner and\nwe're going to be checking just\neverything in this raffle right\nwe're gonna be checking that the\nrecent winners right that that\nthe raffle state's been reset\nthe players have reversed, you\nknow, players has been reset,\netc, etc. So we'll say const\nraffle state equals awaits\nraffle dot get raffle state\nwe'll say const. Ending\ntimestamp equals await, raffle\ndot get last timestamp. And\nlet's start doing some asserts.\nSo first we should assert that\nthis es players array has been\nreset to zero. So if we call get\nnumber of players it should be\nzero. So we can do const num\nplayers equals await raffle dot\nget number of players like so.\nAnd we can do assert dot equal\nnine players.to string is going\nto be zero. What else can we\nassert? Well, we can assert dot\nequal raffle state should be\nback to being open. So raffle\nstate.to string should be zero,\nwe should assert that the ending\ntimestamp is now greater than\nthe starting timestamp. Because\nthe last timestamp should have\nbeen updated. We also want to\nmake sure our recent winner is\ncorrect. But we'll do console\ndot log recent winner. Now we\ncan go to the VRF coordinator\nmock. And we could simulate this\nand try to figure out who the\nrandom winner is to console dot\nlog accounts to. And then just\nto show a bunch of them, we'll\ndo 01 and three a raffle dot\nonce this needs to be an async\nfunction, not just a regular\nfunction. Let's try that one\nmore time, get latest timestamp\nis the correct function. So\nlet's update this with the\ncorrect latest. Let's put latest\nin there. Because I'm spelling\nsomething's wrong. I sure am\nlooks like we're printing out\nrecent winner here when we\nhaven't even initialized it. So\nlet's move it up. And then we'll\ndo console dot log recent\nwinner. So I know this is a\nmassive test here. But let's\ngive it a try and see if\neverything kind of does what we\nthink it should do. And it's\nslowing down here, which is good\nbecause we're doing a lot of\nstuff. And uh huh, we finally\nget this passing thing to come\nout. And we did a ton of console\ndot logging so so there's a lot\nof stuff in here of the signers\nare getting printed out. So\nlet's just make this a little\neasier to read. We'll add dot\naddress to all these, we can see\nwho the winner is. So it looks\nlike the winner is going to be\naccount number one, which is\ngreat. So what we can do now\nthat we know account number one\nis going to be the winner, we\ncan get that winners starting\nbalance way down here before we\ncall fulfill random words. So\nwe'll say const winner, starting\nbalance equals await accounts\none dot get balance, yes, you\ncan just call get balance right\nlike that. And now that we have\nthe winner starting balance back\nin our tests, we can say const\nwinner, ending balance equals\nawait ounce one dot get balance.\nAnd we can make sure that this\nwinner got paid what they need.\nSo now we're going to do a big\nassert with some money stuff,\njust trust me, this is what the\nmath is. So we're going to do\nassert dot equal winner\nbalance.to string,\nexcuse me winter ending\nbalance.to string should equal\nthe winner starting balance dot\nadd the raffle entrance fee that\nmultiplied by the additional and\ntrance that add the raffle\nentrance fee that we paid.to\nstring. So this math is\nbasically saying the winner\nshould end with a balance of all\nof the money that everybody else\nadded to this contract. And\nthat's it. So we can run this\ntest one more time. And Gosh,\ndarn it, it passed. Okay, so\nthere was a lot of code here.\nAnd this might have been one of\nthe hardest pieces of this\nentire course is going to be\nthis part right here. So if you\nstruggled a little bit with\nthis, don't let that bog you\ndown. This is probably one of\nthe more difficult sections of\nthis course, let's do a quick\nrefresher of just this test that\nwe're doing. And then we'll see\nin an action when we do it. In\nour staging test. What we did is\nwe're picking a winner resetting\nthe lottery and we're sending\nmoney. Basically what we're\ndoing is we're testing that this\nfulfill random words thing does\nwhat we want it to do a random\nwinner wins and they get the\nmoney. So how do we actually do\nthat? Well, we first started off\nby having a bunch of random\npeople enter the lottery. Great.\nSounds good. Now what we wanted\nto do was we want to call\nperform upkeep and fulfill\nrandom words, we want to pretend\nthat the random number was\ndrawn. And that's what this code\ndown here does is it calls that\nrandom number but and what we\ncould have done was we could\nhave had all these assert and\nchecked all the variables. After\nwe did this, right. We could\nhave totally done that. However,\non a test net where we don't\nalways know exactly when a\ntransaction is going to finish.\nWe have to wait If we have to\nlisten for an event to be fired,\nbefore, we could call the\ntransactions that would end this\nwhole thing, we needed to set\nsomething up to listen for that\nevent to be fired. And we said,\nhey, only once this event is\nfired only once this transaction\nis called, can we do our testing\nnow for our local network, we\nare mocking the VRF\ncoordinators, we have control,\nwe know exactly when this is\ngoing to run. But on a test net,\nwe don't. So you'll see in our\nstaging tests, we won't have any\nof this here. And we'll have to\nrely on setting up a listener to\nlisten for the channeling VRF\nand the keepers to fire their\nevents. And that's why the\nstaging test is going to be so\nimportant to make sure that\nwe're doing everything correct.\nAnd that's why we set up our\nlocal tests like this, so that\nit mimics what we're going to be\ndoing on our statement test what\nwe're going to be doing on a\nreal network here. And again,\nwe're setting up this listener\nand we're saying, Ah, once we do\nhere, this event, then we're\ngoing to try to actually check\nall of the balances and check\nthat everything is working as\nintended. And if we don't see\nit, we're going to reject. And\nif there's a timeout, if it\ntakes more than 200 seconds,\nwe're going to say okay,\nsomething went wrong, we're\ngoing to cancel it. And\nactually, I'm going to bump this\nup to 300 seconds, because I\nthink 200 seconds is not going\nto be enough. And depending on\nhow quick the rink B test that\nis, you might have to bump this\nup even bigger. So just keep\nthat in mind. But who, okay, we\nhave just built some fantastic\ntests. Let's go ahead, and let's\njust run h h test to see if all\nof our tests are going to pass.\nAnd well, 14 passing, everything\nis passing here we are looking\ngood.\nThis is fantastic. Alright, so\nnow that we have our unit tests,\nlet's go ahead and create a\nstaging test. Our staging test\nis going to look really similar\nto that massive test that we\njust created down here. And the\nreason we set up our unit test\nto do this a weight promise\nthing with the raffle dot once\nwas because this is actually how\nwe're going to need to wait on a\ntest net or main net for a\nwinner to be picked. We cannot\non an actual test net, pretend\nto be the chain link V REF, we\ncan pretend to be the chain link\nkeepers if we want. But we're\nnot going to make sure that the\n10 the keepers is actually\nworking. But we are going to be\ndoing this because we want to\nlisten for that event to be\nfired, we want to listen for the\nchain link VRF to respond with\nthe winner. So let's create a\nstaging test. And this is a test\nthat we're going to run on an\nactual test net here. Okay, so\nwe're going to create a new test\ncalled raffle dot staging dot\ntest dot Jas and this is where\nwe're going to put our staging\ntest. Now we can actually code\nthis pretty quickly because most\nof our staging tests is gonna\nlook real similar to our raffle\ntest here. So for now, let's\njust grab this whole first part,\nand then we'll adjust it as we\nneed. And then we'll close it\noff. Because we're definitely\ngonna need a raffle, we're not\ngoing to need a VRF coordinator\nmock because again, we're not\ngoing to be using a mock. Since\nwe're on an actual test net, we\nwill need the raffle entrance\nfee, we will need Deployer, we\nwill need a Deployer. And we\nmight need the interval. But\nlet's delete it for now we\nprobably won't need the chain\nID. So let's delete that as\nwell. Awesome. Something that we\nwant to keep in mind is that\nwhen it comes to our staging\ntests, we only want our steam\ntest to run when we're on a\ntest. Net, we don't need to run\nour unit tests because our unit\ntests aren't checking that\ncompatibility with a test net,\nwe want our unit tests to only\nrun on a local network. And we\nwant our staging tests to only\nrun on a test network. This is\nwhere again, in our test, we're\ngoing to check to make sure what\ntype of chain we're on. And\noops, it looks like I already\nimported the development changes\nhere. So we're actually in our\nstaging tests, we're going to\ncheck before we run any test\nwhat kind of network we're on.\nSo we're gonna say, if our\ndevelopment chains that includes\nnetwork dot name, we're gonna\nsay if our development chains\nincludes network to name, so if\nthe chain we're on is in the\ndevelopment chains, and again,\nwe're going to use this ternary\noperator where we say, if we're\non a development chain, do\nsomething. And then if we're not\non a development chain, do\nsomething else. If we are on a\ndevelopment chain, what are we\ngoing to do? Well want to skip\nthis and we can actually skip\nthis by putting in this describe\ndot skip. And this will skip\nthis whole section here. And\nthen we can say, if we are the\ndevelopment chain, go ahead and\ndo our thing. So this is some\nreally nice syntax that allows\nus to skip our staging tests if\nwe're on a local network. And\nadditionally, we can grab this\nsyntax, go into our raffle dot\ntest dot j s where we have our\nunit tests and add the bang\noperator, which is the knot and\nhit Save. And now we're saying\nif we're not on a development\nchain, skip it and only run this\nif we aren't in development\nchain. So this says run this\nonly on a test net or main net.\nAnd then this has run this only\non a local network. Great. So we\nhave a deployer which we're\ngoing to need. We are not going\nto need to deploy any fixtures\nbecause we're going to run our\ndeploy script and our contracts\nshould already be deployed. We\nwill need a raffle we won't need\na VRF coordinator mocks we can\ndelete that We will need the\nentrance fee, and we probably\nwon't need the interval. So we\ncan go ahead and delete that\ntoo. Alright, awesome. So we\nhave our describe, we have our\nbefore each, let's make our\ntests. And I'm just going to\nmake one giant test to test kind\nof everything end to end. And\nyou can add more tests later on\nyourself, if you want to our\nstaging test is going to be\nreally similar to this massive\ntest that we made down here. And\nin fact, we're going to use most\nof this code here as our\nboilerplate. So let's create a\ndescribe. And we'll say, and\nwe'll actually just copy this\ndescribe the four random words\nand paste it in here. Because\nagain, we're going to be using a\nlot of the same code in our\nstaging tests here. Great. So\nnow we'll say it works with live\nchain link keepers and chain\nlink VRF, we get a random\nwinner, acing function. So this\nis going to be our test in here.\nSo in this test, we of course,\nwe want to enter the raffle. And\nwe shouldn't have to do anything\nelse except for enter this\nraffle. Because the chain the\nkeepers and the only VRF are\ngoing to be the ones to actually\nkick off this lottery for us,\nwe'll do a quick grabbing of the\nstarting timestamp to have it\nbefore all this kicks off. So\nwe'll say const starting\ntimestamp equals await raffle\ndot get last to me get latest\ntimestamp, get latest timestamp,\nwe're gonna grab this because\nlater on, we're going to test to\nsee if the timestamp has indeed\nmoved forward, we want to enter\nthe lottery, right, we want to\nrun the command we've been\nrunning over here all the time,\nwe want to do you know await\nraffle dot enter raffle, but we\ndon't want to call it yet.\nBecause same as what we did over\nhere, we want to set up our\nlistener first. Now in here, we\nprobably should have set up our\nlistener before we entered the\nraffle. However, we controlled\nthe blockchain. So putting it in\nthat order was is was okay. But\nwe want to set up the listener\nbefore we enter the raffle just\nin case the blockchain moves\nreally fast. And we're going to\nset up the listener the exact\nsame way, we did it over here.\nSo we're gonna say await new\npromise. And it's going to be an\nasync function that takes a\nresolve and a reject. And we're\ngoing to use a little arrow\nnotation here. And in here,\nwe're going to set up the\nlistener, we're gonna say raffle\ndot once, once that winner is\npicked, we're going to do\nanother async function using\nthat Arrow.\nArrow function syntax, we'll say\nconsole dot log winner picked\nthe event fired. And only once\nwe get this winner picked, can\nwe start doing our asserts in\nhere, can we start making sure\nthat there's a winner, there's a\nverifiably random winner, it's\nbeen picked, the money has been\nmoved, etc. This is where we'll\ndo our try catch. And if there's\nany error, we're just going to\nautomatically reject, we're\ngoing to reject the promise. And\nif all goes well, of course,\nwe're going to resolve the\npromise. So our listener has\nbeen set up here. We haven't\nadded our asserts here. But we\nwill, let's just go ahead and\nwrite the rest of the test. And\nthen we'll go back and we'll\nupdate this listener so so our\nlistener has been added. And\ninside here is actually where\nwe're going to enter the raffle.\nSo inside here, await, raffle\ndot enter raffle value is going\nto be raffle entrance fee. And\nreally that's it. Right? So\nwe're setting up the listener,\nsetting up the listener, then\nentering the raffle. And this\ncode won't complete until our\nlistener has finished listening\nbecause again, this whole SEC is\nin a wait. So we're gonna say\nokay, cool setup, the listener,\nwait for this to finish. And\nthen when it gets here, it goes\nout okay, this is the end of the\ncode Are we all done executing\nOh, no resolve or reject hasn't\nbeen called yet. And that's\nbecause we're still waiting for\nthe listener to finish\nlistening. Now, once we get this\nwinner picked event emitted in\nhere, we're going to get that\nrecent winner so we'll say const\nrecent winner equals await\nraffle dot get recent winner\nwill get the raffle state we'll\nsay const. raffle state equals\nawait raffle dot get raffle\nstate, we'll get the winners\nbalance. So we'll say const.\nWinner balance equals await\nrecent winner. And since we're\nonly entering with our Deployer\nwe should check to see the\ndeployers balance at the end and\nwe can't do it right with this\ndeployer object here. So we'll\nhave to do the player account\nequals await ethers dot get\nsigners, no wrap this actually\nactually will just say this is\naccounts here like that. And\nthen we'll just do a count of\nzero because it counts as zero\nis going to be our Deployer. So\nour winner balance is going to\nbe accounts a zero dot get\nbalance. And then we're going to\ndo const ending timestamp equals\na weight raffle dot get latest\nTo timestamp, and we should also\nget the starting balance. So\nwe'll say winner ending balance,\nwe should also get the starting\nbalance right after we enter. So\nwe'll say const. Winner,\nstarting balance equals await\naccounts. Zero dot get balance,\nso that now we can do some\ncomparisons. All right, great.\nLet's do the comparisons now. So\nwe should first expect the\nraffle to be reset. So we can do\nthis a few different ways. Down\nhere. We did number of players.\nWe can also say, await, expect\nraffle dot get player 0.2 dot v\ndot reverted, right because Get\nPlayer zero should get reverted\nbecause there's not even going\nto be an object at zero. So\nthat's another way we can check\nto see if our players array has\nbeen reset. Next, we can do\nassert dot equal recent\nwinner.to string, this should\nequal our account zero dot\naddress. Okay, our Deployer What\nelse can we do? We will assert\ndot equal raffle state to zero.\nWe want this email to go back to\nopen after we're done. And then\nwe finally want to make sure\nthat the money has been\ntransferred correctly. So we'll\ndo assert dot equal, this should\nbe a winner ending balance. That\nto string should be equal to\nwinner starting balance, add\nraffle entrance fee.to string.\nSo if we look down here, they\nenter the raffle we check their\nstarting balance right after\nthey enter. And they basically\nshould just get that raffle\nentrance fee back right because\nthey are the only ones who have\nentered this raffle. And then we\ncan do one more assert, do\nassert that the ending timestamp\nis greater than the starting\ntimestamp. And then we'll of\ncourse, say resolve. So this all\ngoes well, we resolve. If\nthere's an issue with any of\nthese asserts, we're going to\ncatch those errors and we're\ngoing to reject and this is\ngoing to be false. And this\nwhole test is gonna go ah, there\nwas an issue, we now have a\nstaging test that looks really\ngood here. Let's try\nthis out. Let's try our staging\ntest out from start to finish.\nSo now in order for us to test\nthis staging test, from end to\nend, you first going to need to\nget our sub ID for the\nchanneling fear F then we're\ngoing to need to deploy our\ncontract using the sub ID, we're\ngoing to need to register the\ncontract with chain link VRF.\nAnd it's somebody we're going to\nthen need to register it with\nchain link keepers. And then of\ncourse, we're going to run the\nstaging tests. So let's do it.\nSo first thing we're going to\nneed to do is what? Get our sub\nID for chain link VRF. Okay,\ngreat. So we're going to come\nover to VRF dot chain dot link.\nAnd we're going to need to\ncreate a new subscription. If we\ndon't have enough rink B eath.\nLet's we want to head over to\nthe full blockchain solidity\ncourse, here, we're going to\nscroll down. And we're going to\nlook for the recommended test\nand here, which is ranked v. And\nwe're going to use the faucets\nlink to get some Rigby link, run\nFosses dot chain dot link, let's\nswitch over from COVID to a\ncerium. Rigby, we know we're\ngoing to need some link and some\neath. So let's just go ahead and\nget both. Alright, great now\nthat our transaction has gone\nthrough, let's just double check\nour wallet here. And it looks\nlike we do indeed have Ethereum\nhere. And if you don't see the\nlink, you can head over to link\ntoken contracts, Link token\ncontracts in the chain link\ndocumentation. We'll scroll down\nto Rigby, we'll grab this\ncontract address import tokens\nand we'll paste it in here. Add\nCustom tokens, import tokens.\nGreat. Now I can see my eath and\nmy link here, perfect. We have\nsome eath we have some link,\nlet's head over to V REF\nsubscription management. And\nwe're going to create a new\nsubscription. Again, we could\ntotally do this\nprogrammatically, because the\nuser interface here is only\nhelping us facilitate call\ncontracts to the registration\ncontract that's completely\ndecentralized and on chain. So\nlet's go ahead and create\nsubscription will create\nsubscription will confirm the\ntransaction and Metamask on the\nRinkeby network will do a little\nbit of wading in great once it's\ngone through, you can go ahead\nand click the add funds button.\nI'm going to show you what it\nlooks like if you accidentally\nrefresh and jump off though. So\nif you refresh and you go back\nto veer off the chain dot link,\nyou should have a new active\nsubscription. And you'll see\nthis number here. If you click\non it, this is your subscription\nID great. So we can actually\ntake this, come back to our code\ninto our helper Hardhead config.\nAnd we can paste our\nsubscription ID under\nsubscription ID for our Rinkeby\nnetwork here. Awesome. Now that\nwe have a subscription we can\nsee it's not funded with any\nlink. So we don't have any\nOracle gas here. And we don't\nhave any consumers. Right our\nconsumer is going to be a raffle\nor a lottery contract. So let's\nadd some funds first and we\ndon't need to add A whole lot\nbecause we're only going to be\ntesting once. So let's go just\ngo ahead and add to link here,\nthis number might change\ndepending on different costs of\nthe test nets and how much link\ntoken there's available. So if\nyou're actually working on a\nmain net, be sure to head over\nDoc's touching that link EVM\nchains contract addresses, you\ncan read more about the costs\nsome of these different chains,\nso you can figure out exactly\nhow much to put in here. And if\nyou go to the full blockchain\nsolidity course, Jas, we can\nscroll down to Lesson Nine,\nthere's a recommended link\namounts or rinky saving tests\nfor chain link VRF. For now\nwe're going to put two for\nkeepers, we're going to put\neight, but feel free to refer to\nhere so you know how much to put\nin. So let's go ahead and\nconfirm, we're going to approve\nadding funds here, go ahead and\nconfirm. And we're now funding\nour subscription to so we can\npay that Oracle gas to get our\nrandom numbers. Great. And once\nwe're funded, we can close it,\nwe'll do a little refresh. And\nwe can see the balance is now to\nlink when we don't have any\nconsumers perfect. So we've got\nour sub ID, we funded it. Now\nlet's go ahead and deploy our\ncontract. And we already know\nthat we should be all good for\ndeploying our contract, we go to\nour Dotty and V will need to add\nall of those same parameters\nfrom our previous projects,\nwe'll need to shrink the RPC\nURL, we'll need our private key.\nIf we want to verify we'll need\nour ether scan API key. And if\nwe want to do gas output, we'll\nneed our coin market cap API\nkey. So let's make sure we have\nall that. And we'll look at our\ndeploy script. Once again, just\nreal quick look at our helper\nhardcat config just real quick,\nand it looks like we do indeed\nhave everything in here. And we\nshould just be able to deploy it\nin one command.\nSo we should be able to do yarn,\nhard hat or just h h again,\nploy, dash dash network Rinkeby.\nLet's go try this out. All\nright, it looks like we've\ncompiled successfully, we've\ndeployed it successfully. And\nwe've even verified it, we can\ngo and open it up on Rinku ether\nscan. And we can see our code\nhere has been verified. And it's\nlooking beautiful. We can read\nfrom it, which is great. We can\nsee all these commands here now\nthat it's verified. And if we\nlook at the Git raffle state, we\nshould indeed see that it's\nopen, right, and it's going to\nstay open until somebody ends\nthe raffle and updates the\namount of eath that the contract\nactually has. Now that we've\ndeployed a contract using that\nsub ID, we need to register the\ncontract with chain link V REF.\nAnd with chain link keepers. So\nwe need to add this consumer\ndoes tell chinley VRF. Hey, this\nis the contract that you're\nlooking for now. So we're gonna\ngo back to V REF dot chain dot\nlink, and we're going to grab\nthis contract address, and we're\ngoing to add it as a consumer,\nyour subscription is ready, you\ncan now add consumers we're\ngonna add consumer. And again,\nthis website is just here to\nhelp facilitate us interacting\nwith the contract. So we're\ngoing to approve that user,\nwe'll go ahead and confirm and\nthe transaction is going\nthrough. While we wait for this\nto go through, we can go to\nkeepers dot chain dot link, and\ndo the same thing work with the\nuser interface to register a new\nupkeep. So we'll go ahead and\nadd our email Hardhead free code\ncamp@gmail.com. We'll call this\nraffle upkeep. We'll paste our\nupkeep address in here we have\nour admin address, and you can\nignore this bit right here. For\ngas limit, this is going to be\nthe gas limit of the PErforM\nupkeep function. If we did our\ngas estimator, we could just\ncheck to see how much that\nperform upkeep costs. But for\nnow, I'm just going to put\n500,000 That's probably\noverkill, but that's fine. Check\ndata, we're going to keep blank\nbecause again, our checkup keep\ndoesn't take anything. And then\nstarting balance, we're going to\nput as eight. And if you forget\nto put a starting balance here,\nyou can always find it later. So\nlet's go ahead and register,\nwe're gonna get a Metamask pop\nup, we're gonna go ahead and hit\nConfirm. And we can go back to\nour VRF and see that it's indeed\nbeen added and awesome, we now\nhave a consumer on our VRF. So\nnow let's just wait for our\nkeepers to go through upkeep\nregistration requests submitted\nsuccessfully on domain net, you\nmight actually have to wait a\nlittle bit for your request to\ngo through, but I'll test that\nit should automatically go\nthrough. Now if we go back to\nkeepers dot chain dot link, we\nshould now see we now if we\nscroll down to my upkeeps We\nhave a raffle upkeep here and I\nhave to because I accidentally\nuse the same account that I\ntested on, you can ignore the\ntwo you'll have one but this is\nthe one that we just created.\nAnd we can actually see what our\nbalances and then what the\nminimum balance for this\nactually is. So it looks like\neight Link was a little bit too\nlow. So let's go back to Fosses\ndot chain dot link slash rinky.\nNow that we have some more link,\nwe can come back to our raffle\nupkeep. And we go ahead and hit\nadd funds. And we'll add just\nthree. And we'll go ahead and\nconfirm we first need to give\npermission to spend. We approved\nour link transfer now let's\nactually transfer the link to\nthe contract and alright funds\nadded successfully. So now let's\ndo a little refresh. Now we no\nlonger see that message saying\nthat it's underfunded and we\nhave our balance and we can see\nthat it's more than the minimum\nbalance. We have See the history\nthat we just funded this twice.\nOnce this actually kicks off,\nwe'll see activity type will be\nlike perform upkeep or something\ngot our sub ID, we've deployed\nthe contract, we've registered\nwith chain link V REF, we've\nregistered it with chain link\nkeepers. Now all we need to do\nis run the staging tests. Now\nrunning our staging test is\nessentially going to be the same\nas us calling this enter script,\nright, because all we're doing\nin our staging test is entering\nthe lottery. And then we just\nhave a whole bunch of validators\nthat we're running to make sure\nthat things are doing as we\nexpect, since our contract is\nactually verified, what we could\ndo on Rigby ether scan is we can\nactually go to this right\ncontract section of the\ncontract. And we could even\nconnect our wallets to it. And\nonce this turns from red to\ngreen, after a little refresh,\nwe'll now see that it's green,\nit's connected, we can even call\nfunctions on this contract\nourself, so we could enter the\nraffle ourself, we would add,\nyou know, however much eath to\nenter the raffle, and that would\nkick off the keepers in the VRF,\nas well. So we could call it via\nether scan, we could obviously\ncall it via our staging tests\nhere, we could call it via our\nscripts, we could call it via\nthe console, there's a ton of\nways to actually do this. But\nmoment of truth here, we're\ngonna run our staging tests,\nwhich is going to have us enter\nthe lottery, and set up a\nlistener to make sure that\neverything works correctly. And\nadditionally, we'll see on our\nraffle upkeep history, we'll see\na transaction go through, and\nthen we'll see a transaction on\nour chain like VRF as well. Are\nyou ready? I sure am.\nLet's do this. So we'll do h h,\ntest, dash dash network, rink B.\nAnd that should be all we need\nto do. In our state and tests,\nwe probably should have added\nsome console dot logs in here to\ntell us hey, to tell us what\nsteps that we're on with each.\nBut we forgot to. So if you\nfollow along with the repo\nassociated with this, we've\nadded the console dot logs in\nthe test there. But all right,\nif we go to the ether scan for\nthis contract, we go back to the\nrink the ether scan for this, we\npaste in that address, the first\nstep that we're doing in this\ntest, of course, while we're\nsetting up this listener, the\nfirst transaction is going to be\nentering the raffle that's going\nto kick everything off. Right.\nSo if we refresh a little bit on\nether scan, we do indeed see\nwe've entered the raffle. And\nwe've updated the balance of the\nraffle. Okay, awesome. So raffle\nhas been entered. Now then what\nhappens? Well, if the raffle has\nbeen entered, if we go to raffle\ndot soul, if it's open, if\nenough time has passed, if\nthere's players and it has a\nbalance, which we just checked\ndoes, this will get kicked off\nby the keepers. So if we go to\nthe keepers, and we do a little\nrefresh here, after a little\nbit, we do indeed see checkup\nkey passed and we see a perform\nupkeep having gone through\ngreat, what does perform upkeep\nto well perform upkeep calls the\nchainlink VRF. So now if we go\nover to chainlink, VRF, we do a\nrefresh here, go down to\nhistory, we do indeed see one of\nthe transactions has gone\nthrough we can see the\ntransaction hash, the link\nspent, etc. And now if we go\nback to our tests, we do indeed\nsee raffle unit tests for friend\nfulfill random request winner\npick event fired. And this means\nthat we just went through this\nentire process of having a\nperfectly truly decentralized\nraffle work on an actual\nTestament with our integration\ntests working correctly.\nAbsolutely massive, huge\ncongratulations if you've made\nit this far. And if you just\nwalk through the integration\ntest with me now bounce over\ncontract has now been reset to\nzero because our wallet address\njust won the lottery right and\ngot the money back. Now you\nmight be wondering, Hey, I see\nthe Create raffle function. And\nI see enter raffle but I don't\nsee didn't the chain link nodes\njust call perform upkeep and\nfulfill random words, I'll come\nno matter how often I refresh, I\ndon't see those transactions\nhere. Well, those are actually\ngoing to be considered internal\ntransactions fulfill random\nwords, it's actually called\nthrough the VRF coordinator and\nthe VRF coordinator contract\nthen calls for full randomness.\nSo we can go to internal\ntransactions. And one of these\ntransactions is going to be the\ntransaction to the VRF\ncoordinator contract, which\ncalls our contract. Same thing\nwith perform upkeep. Perform\nupkeep, the chain link nodes\nactually call through the\nregistry contract and then the\nregistry contract calls perform\nupkeep. That's what we see here.\nAnd if we go through the\ninternal transactions, we'll see\nhim there. Now let's look at\nthis enter raffle as well. And\nsince we've learned about events\nand logs, we can actually go to\nthe logs section now. And we can\nsee our log or event being\nemitted here we can see the name\nraffle, enter, we can see the\ntopic zero which is going to\nidentify this entire event. And\nthen we also see this number\nhere which is what which is\nindex topic, one address player\nand then there's no data\nassociated with this right\nbecause we only have index\nparameters which again show up\nas topics so this is absolutely\nphenomenal. Wow, absolutely\nmassive and we can rerun a unit\ntest Just by hh test in this\nwill only run our unit tests.\nAnd we can see that these are\nall passing as well, things are\nlooking fantastic here. And we\nhave just successfully created a\nverifiably random, autonomous,\ndecentralized, raffle and or\nlottery deployed on the\nblockchain, you should be so\nexcited right now. Now, I'm not\ngoing to show you how to push\nthis up to GitHub. However, if\nyou want to push this up to get\nup, and again, tweet at me,\ntweet at chainlink tweet at Free\nCode Camp, please feel free to\ndo so because you just did an\namazing job getting this far.\nAnd if you're gonna want to push\nthis up to GitHub, remember,\nwe're going to want to put a dot\nGit ignore. In here, we add a\nton of stuff like that VS code\nartifacts, cash deployments,\nknown modules, etc. Type chain\ntypes, all this stuff, you can\nfind a sample dot Git ignore, of\ncourse, in the GitHub repo\nassociated with this, this is an\nadvanced project, we did a lot\nof really advanced things here.\nAnd this is the section of the\ncourse, where I think at this\npoint, you've got most of the\nfundamentals down. And now we're\ngoing to move into more front\nend. And we're going to move\ninto more industry specific and\nmore advanced topics that are\nreally going to supercharge you\nand make you one of the masters\nof the blockchain in the smart\ncontract realm. So huge\ncongratulations, one more time,\ndefinitely go celebrate,\ndefinitely go for that walk,\ntake a quick break, let\neverything we just learned\nsettling your brain and get\nready for the next one.\nAlright, now we're gonna go over\nthe TypeScript edition of this\nlesson, we're gonna go a little\nbit quickly here, because we're\nnot learning too much new stuff\nfor this TypeScript edition. So\nif you want to just follow\nalong, you can open up the repo\nhere and use the TypeScript\nbranch. One thing to note that\nis a little bit different is\nwhen we do our promise in our\ntests, we're doing a weight\npromise void, because we're not\ngoing to be returning anything\nwith our promise here. But the\nrest is going to be exactly the\nsame. We're going to have a hard\nhat dot config to TypeScript\nthat's going to use imports.\nOnce again, everything else is\npretty much the same. We're\ngoing to export the config like\nwe did last time. In our package\ndot JSON. Of course, we're going\nto have all of our TypeScript\ndependencies as well. And then\nour deploy scripts are going to\nfollow that same functionality\nthat we've used before. So now\nour deploy scripts use a type\ndeploy function on our variables\nthat we export at the bottom.\nAnd we also import the hard hat\nruntime environment type, which\nwhere we pull the deployments\nget named account and networks\nfrom in our tests. Of course,\nwe're still importing the types\nof these contracts from type\nchain slash types, like you see\nhere, like for example, raffle\nis going to be signed to raffle\nVRF coordinator V to mock is\ngoing to be signed to type VRF\ncoordinator V to MK and if we\nwanted to deploy with these\ncontract factories, we could as\nwell. So those are going to be\nthe main differences with\nTypeScript. There's not anything\nreally new there. But again, if\nyou want to follow along with\nTypeScript, and you want to code\neverything in TypeScript, and\nexample is here for you\nAll right, welcome back. I hope\nyour break was absolutely\nfantastic because now we are\ngetting into more advanced full\nstack slash front end\ndevelopment. We've done the back\nend development, we've created\nsmart contracts, we created our\nlottery. In our last section, we\nhave all this wonderful code\nthat allows us to work with our\nown provably decentralized\nlottery. In order for regular\neveryday people to use our\nlottery, we're going to need to\nbuild a front end. Now\npreviously, we learned to build\na front end with raw HTML\nJavaScript, with our Funmi\nproject, we created a front end\nwith just pure HTML and\nJavaScript, just creating\napplications with HTML and\nJavaScript is great. And if\nthat's what you want to do, you\nabsolutely can. But doing it\nwith those vanilla protocols has\nsome limitations. And working\nwith a framework, like what\nwe're going to be working with\nin this section is going to make\nour lives a lot easier, we're\ngoing to be able to develop\nquicker, have more\nfunctionality, and do more in\nless time. As you remember back\nto the project wasn't really a\nfleshed out project, if you\nremember, it was just a bunch of\nbuttons. And that was really it.\nSo working with a framework is\nreally going to enable us to put\nmore features and add more\nstyling to our applications\nreally easy. Once again, the\ncode for this entire section is\nlocated in our lesson and is\nlocated in this GitHub\nrepository associated with the\ncourse. Now I have to put an\nasterisk here, as I've said many\ntimes, the front end sections of\nthis course are not required,\nwe're not going to learn\nanything new about the back end\nin this front end section. So if\nyou don't care about building\nwebsites, all you want to do is\nlearn the smart contract aspect\nof this course, you can skip\nthese sections. But if you do\nwant to learn how to build these\nfront end applications, if you\ndo want to give users and non\ndevelopers the abilities to\ninteract with our smart\ncontracts, then please continue\nto watch. Now I also have to put\nan asterix here, because if you\nhaven't worked with some of\nthese frameworks before, the\nlearning curve can seem a little\nbit steep. And as I've said many\ntimes, this isn't going to be a\nfront end course that would take\nseveral more hours than what we\nwant to do for this video. So if\nyou've never done front end\nbefore, this is one of the\nsections where I do recommend\nyou follow along with one of\nthese optional sub lessons,\nwe're not going to play them\nhere. But if you follow along\nwith one of these sub lessons,\nthat will definitely be\nincredibly helpful. One of the\nvideos that I have for the sub\nlessons is this video right\nhere, how to connect your smart\ncontracts to Metamask. And it\nshows a number of ways\nconnecting your smart contracts\nand building kind of these these\nfront ends. It does start with a\nraw HTML and JavaScript edition.\nSo you can really get some more\npractice in here with HTML and\nJavaScript. And then it moves to\nindex js ethers and a few other\nnext Jas based applications.\nDoing it a few different ways\nwill install a new some more\ninsight on what you should be\nthinking about when you're\napproaching these. So this is\nabsolutely a video to watch if\nyou're new to front end\ndevelopment. Additionally, for\nthis section, like I said, we're\ngoing to be using a framework.\nAnd in particular, we're going\nto be using the next Jas\nframework. Now. Next, Jas is a\nreact based framework. React is\na framework for building front\nend and full stack applications.\nNext, Jas is a framework on top\nof the React framework. So if\nyou already know react, most of\nthis is going to come very\nnaturally to the reason that\nwe're using React in next Jas is\nbecause React is easily as of\nright now one of the most\npopular frameworks and languages\nout there. And it's no surprise\nwhy we've got a little article\nin the GitHub repo titled Why\nyou should use React js for web\ndevelopment, which we'll go into\na little bit more. Some of the\nbiggest applications like\nFacebook and Instagram use React\njs and a number of other Fortune\n500 companies and React js\nespecially in the blockchain\nspace is easily the most popular\nwith protocols like uniswap, and\nAvi also using React Jas. Now\nthe reason we're using this next\nJas on top of React Jas is that\nnext Jas, I think makes working\nwith react much easier. And I\nwant us to work with the easiest\nand most powerful framework out\nthere. Next, Jas is also getting\na ton of steam has some really\nadvanced but in my mind easier\nto use features than just raw\nreact. Now, like I said, if\nyou've never worked with React\nbefore, if you've never worked\nwith next Jas before, and you\nwant to do a little brush up,\ndefinitely watch my video six\nways to connect your depth to a\nwallet. And if you find yourself\nstruggling with with this\nsection, because the front end\nstuff doesn't really make sense.\nWe also have a next Jas crash\ncourse in the GitHub repo\nassociated with this course.\nIt's about an hour long and it\nis absolutely phenomenal. Free\nCode Camp also has some next Jas\ncrash courses. So if you're\nstruggling with the front of it,\ngo take it next Jas course, and\nthen come back to this section\nor skip the front end sections\nall together, do the rest of the\ncourse of just the back end, and\nthen come back and do these\nfront end sections. We're going\nto show you the cutting edge\nways to interact and work with\nyour front end and then also\ndeploy them. And if you follow\nalong correctly, by the end of\nthis, you'll have a website\ndeployed that you can show off\nand you can send a link of it to\nyour friends. And now I know we\nalready showed you what this\nlooks like but I'm going to show\nyou it one more time just so we\ncan walk through and see exactly\nwhat we're doing. So we're going\nto have this decentralized\nlottery where we can go ahead\nwith can connect our wallet if\nnot already connected. And we\ncan switch, we can switch around\nbetween networks. And our app\nwill actually recognize it and\nsay, hey, the only supported\nchains that we're working with\nhere are going to be 31337,\nwhich is localhost, or four,\nwhich is ring feed. And we'll\nlearn how to add this validation\ninto our application so that our\napp only works when we're on a\nchain that we want, then we can\ngo ahead and interact with it.\nNormally, we can click a button\nMetamask will pop up, we can go\nahead and confirm we'll get a\nlittle transaction notification\nsaying that transaction is\ncomplete. And we'll get our\nfront end updated. And then on\nthe back end, we'll be able to\nsee the chain link nodes and the\nChinuch V REF do their work. And\nonce they actually pick a\nwinner, after a refresh, we'll\nbe able to see that the back end\nnode was updated, we do indeed\nhave a previous winner. Awesome.\nNow, not only that, we're going\nto show you how to build this,\nbut also, we're going to show\nyou how to host it on an actual\nsite. So you'll be able to push\nit up to your own blockchain.\nAnd additionally, we're gonna\nhost it in a decentralized\ncontext. So this site that we\nhave here is it's going to be\nhosted on a technology that\nallows us to host websites in\ndecentralized contexts as well\nswore backends. And even our\nfront ends can be hosted in\ndecentralized context. So So I\nhope you're incredibly excited\nfor this because we're going to\nbe showing you the cutting edge\ntools that many of the top\nblockchain projects use. And\nlet's just jump right into it.\nNow, I'm currently in the\nHardhead smart contract lottery\nproject, the project that we\njust did, we did this hard hat\nsmart contract lottery, which is\ngreat. What we're going to do\nnow is we're going to create a\nnew folder, although we are\ngoing to be coming back to this\nfolder from time to time to make\na couple of updates. So if you\nwant to keep it open, you\nabsolutely can. But for me, I'm\ngonna go ahead and CD download\ndirectory to kind of my main\ndirectory for this whole course.\nAnd we're going to create a new\ndirectory called next Jas. smart\ncontract. Lottery, FCC, then\nwe're going to cd into next Jas\nsmart contract lottery FCC, and\ngo ahead and hit code period.\nAnd like I said, if you want to\nkeep that one up and have this\nnew folder up, you absolutely\ncan. But basically, again, we're\njust opening up our VS code in\nthis next Jas smart contract\nlottery folder. Now for this\nfront end stuff, in particular,\nif you want to be absolutely\nsure you're using the same\nversions as I am, what you can\ndo is you can git clone this\nrepo, and then copy the yarn dot\nlock and package dot JSON, and\nthen run yarn, this will make\nsure you're always using the\nexact same packages that I'm\nusing, and you'll never run into\nany weird issues. So if you do\nrun into an issue, one of the\nfirst things to do, especially\nfor these front end parts is to\ngo back, make sure you have the\nexact same yarn dot lock and\npackage that JSON that I do in\nmy examples here, and go from\nthere. Now we're here in our\nfront end project. And we're\ngoing to create a website, we're\ngonna create a front end for\napplication, like I said, we're\ngonna be using next Jas, if you\nwant to follow along with the\nnext Jas documentation here,\nthey do have a great getting\nstarted and walking through\nthis. So for us, we're going to\ndo yarn, create next app, and\nthen put a little period saying\nwe want our next app in this\ndirectory. If you don't put this\nperiod, it'll create it in a new\nfolder, and you'll have double\nfolders. Okay, awesome. So and\nonce we do this, in our little\nfiles explorer section, we now\ncan see all the different files\nthat come boilerplate with this.\nNow, let me just do a quick\nwalkthrough of what's going on\nhere. Again, we also go through\nthis in those two videos that I\nrecommended, but it doesn't hurt\nto go over it twice. So node\nmodules, of course, is going to\nbe the package in the\ninstallations pages is going to\nbe the different pages on our\nsite. Let me let me show you\nwhat I mean by this. To run this\nwhole thing. Actually, we can\njust run yarn, run Dev, and\nwe'll get started server on\nblah, blah, blah, blah, blah,\nyou can command click it or copy\npaste it into your browser. And\nnow you'll see on localhost\n3000, we have our page up here.\nNow what we can do, actually, so\nindex.js is going to be our\ndefault page, which is, you\nknow, considered this slash\nhere. But what we can do is we\ncan create new pages. So I could\ndo new file, you know, dog dot\nJas. And then you know, just\ncopy paste index into dog to\nJas, paste it, delete everything\ninside the div, you don't have\nto follow along here and just go\nHi, save this, go back here. I\ncan now put in dog and get this.\nSo pages is going to be all kind\nof these different routes to\nthese different spots on our\nwebsite. And index is going to\nbe our default, kind of like our\nhomepage. So I'm going to delete\nDardo. And inside these files is\ngoing to be something called\nreact syntax or JSX. They come\nas Jas but they're basically\nreacts in text. Next, Jas is\nbased on React, you'll see these\npages are this weird combination\nof both JavaScript and HTML. We\nsee some import stuff at this at\nthe top, which reminds us of\nJavaScript and again, you'll see\nsome important stuff at the top\nand then down here, you'll See,\nlike div head main h1 P, you'll\nsee all these like HTML tags\nreact index js allow us to do\nthis combination of JavaScript\nand HTML. And it actually makes\nlife a lot easier. Now, you'll\nalso notice we're doing imports\nin here. Remember, I told you\nall this earlier, imports work\nwith our front end require does\nnot. So that's some of the\ndifference between node does not\nequal JavaScript, right? This is\nwhere the differences can start\ngetting a little bit confusing.\nBut the way that I usually like\nto think about it is I just say,\nno JS, excuse me, I'll just say\nback end. I can J S is a little\ndifferent from front end. Yes.\nSo back end, Jas and front end\nJas are a little bit different.\nThat's kind of the way I like to\nthink about it. app.js is going\nto be our entry point for\neverything the way react and\nnext Jas work is everything is\nwhat's called component based in\nall of our files here, you're\ngonna see this export default\nfunction home or something along\nthose lines. What react and next\nJas do is they say, Hey, this\nhuge clump of HTML stuff that\nhas a hodgepodge of JavaScript\ninside of it is considered a\ncomponent. And so all of our\npages get wrapped through this\nunderscore app.js page. So this\nis a page but it's kind of like\nthe main entry point. And they\nget stuck into this component\nsection of our app that Jas so\nyou can think of this on this\ngraph. The GS is kind of the\nwhole application or whole front\nend. And on this homepage, this\ncomponent, we're sticking index\ndot j s right in here, we're\nswapping out component for index\ndot J. S. Now API is what we\nwanted to do if we wanted to do\nlike some HTTP, GET HTTP POST\nrequests, but we're not going to\ndo any of that. So we're going\nto pretty much ignore API for\nnow public is just going to be\nsome public images like a\nfavicon or Versaille, that SVG\nstyles is going to be the CSS\nfor our project. CSS stands for\nCascading Style Sheets. And it's\nbasically a way to style your\nHTML, we're going to change the\nway we do styling and a little\nbit, but that's basically what\nthese both do the ESLint I'm\ndumping this right now we have\nour dot Git ignore which we know\nwhat it does. We have our next\ndot config dot J. S. This is a\nconfiguration file or next. Jas,\nof course, we have our package\njson, we have a readme, and we\nhave our yarn dot lock. So most\nof what we're going to do is\nactually going to be inside this\nPages folder. And we're also\ngoing to create a couple other\nfolders that are going to be our\nmain stuff now, because I'm me,\nand like I said, I love working\nwith prettier, I'm going to\nautomatically dump a prettier\nRC, and a prettier ignore in\nhere, just so that I can format\nmy code a little bit nicer, you\ncan grab your prettier RC from\nour last projects, you can grab\nyour prettier ignore as well. Or\nyou can just pause me right now\ncopy, paste them from the GitHub\nrepo associated with this\nlesson, paste them in, and then\nwe'll do yarn, add dash dash\nDev, prettier, so that we can\nauto format all of our code for\ncome back over to here, we can\nsave and boom, stuff gets auto\nformatted. Now, again, we're\ngoing to be using the multi\nterminal feature. So right now I\nhave one running my front end.\nSo if I come back to the front\nend, I hit refresh. It's still\nrunning. And then I have one to\ndo, you know my scripts and\nstuff. We have yarn run dev\nrunning right now. And if we go\nto our package, JSON, running\nyarn, run dev just runs next\nDev. And actually, let me cancel\nit and just do yarn dev yarn is\nactually smart enough that don't\nneed to do run Dev, but it just\nruns next Dev. And this next\ncommand comes built in once we\ninstalled next, which we did\nwhen we did yarn create next\napp. So next Jas comes with\nthese scripts already built in\nfor us, we want to build our\nfront end to enable people to\ninteract with our lottery in a\nfair way, and connect with the\nsmart contract that's running.\nLet's create some simple front\nend pieces for this. So first\nthing we're gonna do is we're\ngonna go to Pages, and we're\ngoing to go to index.js. All\nthis stuff in here is cute and\nnice. And thank you next, Jas,\nbut we're going to delete it all\nand delete everything except for\nthat headpiece, we're gonna\nleave that up, we're just going\nto change the name. But this way\ndown here, we're going to change\nthe name from Crate next app to\nsmart contract lottery or raffle\nor whatever we want to do.\ndescription will be our smart\ncontract, lottery. And then\nright below the head, we're\ngoing to write hello, blue, and\nsave. And if we look at our\nfront end, we now see that it\nsays smart contract lottery and\nthe top and I'm going to move\nthis all the way over here,\nsmart contract lottery and the\ntop and we see Hello, so smart\ncontract lottery. Hello, the\ndescription here, we're not\ngoing to see this is going to be\nsomething that web scrapers and\nstuff we're going to find.\nNow one of the first things that\nwe're going to need to do is\nwe're going to need to create\nthat connect button. We've done\nthis in the past with raw\nJavaScript, but now we're going\nto do it with next js and react.\nThe one that we made previously\nwas pretty minimalistic. In\nfact, we bring it back up it\nchecked to see if there was\nwindows that Aetherium and then\nwent and requested and connected\nand said okay, cool. You're\nconnected. Now what did didn't\ndo was a lot of things that we\nwould want an application to do.\nWhen we change networks, our\napplication didn't detect that\nwhen we change users or\napplication didn't detect that\nit was really stringent in the\nfunctionality that it actually\nhad for connecting to a wallet.\nSo we're going to make our\nwallet connect button,\nincredibly powerful, so that you\ncan connect with the button, you\ncan switch networks, you can\nswitch accounts, you can pretty\nmuch do anything in our\napplication will know our\napplication will be responsive.\nSo that's gonna be one of the\nfirst things that we're going to\ndo, we're going to create a\nheader and connect button nav\nbar one a little navbar here,\nsaying, hey, you know, you can\nconnect with this button. So\nthat's gonna be the first thing\nthat we're going to do. Now we\ncan build our whole connect\nbutton in this index dot j s and\nstick it in here. But instead,\nwhat we're going to do is we're\ngoing to make it a what's called\na component. So we're going to\ncreate a new folder called\ncomponents. And we're going to\ncreate a new file in here called\nheader.js. And you might also\nsee a lot of people do\nheader.js x.js and.js x do\nliterally the exact same thing,\nyou can do either one, I'm going\nto do dot JSX, just to remind me\nthat this is a React file that\nwe're creating. This is a\ncomponent that we're creating.\nBut yeah, you can do J S JSX. If\nyou want to learn a little bit\nmore about components, we've got\na link to learning about\ncomponents. They're basically\nindependent and reusable bits of\ncode. They serve the same\npurpose as JavaScript functions,\nbut work in isolation and return\nHTML. So basically, we're going\nto create like a little chunk of\nHTML that we're going to export\ninto our index such as like what\nwe've done in the past, this\njust helps modularize and reuse\nthis header component, you know,\nacross our project. Now, we're\nonly going to be using our\nheader in one area. However,\nit's still nice to modularize\nthe project regardless. And to\nget start, this is going to be\nwhat's called a functional base\ncomponent. So we're going to\ncreate basically a function\ncalled home write really pretty\nmuch exactly like what we see in\nJavaScript, except it's going to\nreturn some HTML. So we can do\nlike a little div. And my VS\ncode auto created the closing\ndiv here. And in here, I'm going\nto be like hi from header. This\nis going to be a real\nminimalistic component like this\nis a valid component here. Now\nwe have this function that\nreturns HTML. And to give other\napplications, the ability to use\nthis component will do export\ndefault function home. And then\nin our index.js, we can import\nit with imports. Home actually,\nexcuse me, I'm not going to call\nit home, we're going to call it\nheader, header, excuse me,\nexport default function header,\nand then import header from the\ndown directory components slash\nheader, like so. So now we've\nimported our header in index\nsuch as if we go back to our\nfront end, which is still\nrunning, we don't see it in\nhere, right? Remember,\neverything goes through our app.\nAnd when we're on the slash\npage, that's going to go to our\nindex.js. index js is importing\nour header, but it's not\nreturning our header, right, we\nsee. And here, we see it\nreturns. And this is the HTML\nthat it's returning. And as you\ncan see, there's clearly no\nheader in here. So now that\nwe've imported our header, we\nneed to actually add our header\nin here. So we'll do header, and\nthen adds the closing tag right\nhere. If you don't add any\nstuff, you know, in between two\ntags, you can go ahead and just\ndo this one liner here, with a\nbackslash at the end saying,\nHey, this is an open and closed\ntag here. Now that we've\nimported it, what do you think\nwe'll see on the front end, now\nthat we've added it to our index\njs, you're right, we see hi from\nheader, because we added our\nheader here. And then we see\nHello. So high from header,\nhello, boom. Now, anything that\nwe do, obviously now in our\nheader.js, will see reflected on\nour front end. So we can do hi\nfrom header, blah, blah, blah,\nyou know, just a bunch of\ndribbles, and we'll see it on\nour front end. So this is going\nto be our section where we're\ngoing to make our header or a\nnavbar or all the functionality\nfor the Connect button. Now I'm\ngoing to tell you something, and\nsome of you are going to love\nthis summer, you're going to\nhate this. I'm going to show\nyou. I'm going to show you the\nhard way first, then the easy\nway. Why am I going to show you\nthe hard way first? Well,\nbecause I want you to become\nfamiliar with what's actually\ngoing on behind the scenes and\nwhat's actually going on with\nsome of these components because\nit is really helpful when\nbuilding these front ends to\nunderstand, Okay, here's what's\ngoing on. If you don't\nunderstand what's going on\nbehind the scenes, you're gonna\ngo to try to build more advanced\napplications, and you're gonna\nhave no idea what to do because\nyou've just learned the\nshortcut. I like to think of it\nas like calculus, like we're\ngoing to learn how to calculate\na derivative first, and then\nwe're going to learn the\nshortcut to quickly getting\nderivatives. So don't skip this\npart, because this is going to\nhelp you well and beyond down\nthe line. Okay, we're going to\nlearn this the harder way to set\neverything up in our HTML Funmi.\nWe just use raw ethers to kind\nof do everything and you\nabsolutely can use raw ethers to\ndo everything. However, there\nare some packages especially for\nReact that make life developing\na front end substantially better\nand in our full blockchain\nsolidity course, Jas. We have a\nnumber of other packages that\nyou can use will stack\ndevelopment and other libraries.\nAnd if you watch this six ways\nto connect your depth to a\nwallet, you'll actually\nunderstand some of the\ndifferences. So if you haven't\nwatched that video, go back,\nwatch that video. But there's a\nwhole bunch of libraries that we\ncan use that are going to make\nour lives a lot easier. We've\nlisted some of them here. React\nMorales is the one that we're\ngoing to be using today, they\nhave some additional plugins,\nand they have probably my\nfavorite thing on the planet,\nwhich I'm going to show you how\nto do very soon. But these are\nalso open source, Ross also\ncomes with some optional\nfunctionality to hook into your\nown back end to give your app\neven more features and even more\nfunctionality. And that's the\nother reason that we're doing\nit. So and we're gonna go over\nthat later. And if you want to\nuse pure ethers, you absolutely\nstill can. A lot of these\npackages that we're using do\nrely on ethers, but we're not\ngoing to use just ether. So we\ngo to the React Morales page.\nAnd to get started, we can just\ndo this bit right here. So we're\nliterally going to copy this and\nbring it into our project. And\nif you go to our package that\nJSON, we actually already have\nreact and react DOM. So we can\njust do yarn, add Morales, and\nreact oralis. Now you'll notice\nI'm not doing these as dev\ndependencies, I didn't do yarn,\nadd dash dash dev here. The\nreason is, because for our\nproduction builds, when we\nactually create the website\nhere, you will need Morales and\nyou will need react Morales we\ndon't need prettier to create a\nwebsite prettier is a tool that\nwe're using as developers. So in\nall of our projects, so far,\nwe've been using just dev\ndependencies. That's because\nwe've only been building our\nprojects for developers, our\nGitHub repos, they haven't been\nmade to build a website, they've\nonly been to do things on the\nback end, for our website, we're\nactually going to be building a\nfront end. So we need to put\nthis in the dependencies\nsection, because we need to say,\nHey, these are the ones that we\nneed to bundle up together for\nthe front end, and you can\nignore these ones. And if it's\njust like a tool to make our\nlives better, it's gonna go in\ndev dependencies. So we're\nadding Morales and react\nMorales. And a lot of the syntax\nthat we're going to do for our\nheader is actually going to be\nreally similar to what we've\nbeen seeing so far. So let's do\nthis. And then actually, we're\njust going to change this name\nto manual header, manual header\nupdate imports for manual\nheader, you can go ahead and hit\nyes to man you all header here,\nwe're gonna copy manual header,\nmake sure it's in our index.js\nit we're gonna change header to\nmanual header, and we're gonna\nchange how to manual header\nhere. And the reason we're doing\nthis is because like I said,\nwe're going to create a much\nsimpler header after we create\nthis kind of harder one. And\nwe're going to want to create\nthat connect button, which\nagain, we made in HTML Funmi. By\ncalling eath request accounts,\nwhat we can do actually with\nMorales is we can just do this\nthing called Enable Web three.\nSo at the top, we're going to\nimport, use mirallas.\nFrom react ralis. And if you go\nto the React Morales page here\nor to their GitHub, you'll learn\nhow to set all this up too and\nlearn more about the\ndocumentation. So we're going to\nimport use Morales from react\nMorales, and inside our function\nhere, but outside of our return,\nwe're going to say const, Enable\nWeb three equals use mirallas.\nNow use Morales is what's known\nas a hook as a React hook. And\nit's a way to keep track of\nstate in our application. Now,\nin order to use mirallas, our\nentire application needs to be\nwrapped around what's called a\nMorales provider, which is going\nto be a context provider for us.\nAnd I'll explain what that means\nin a minute. But basically, what\nwe need to do is we need to add\nthis Morales provider to our\napp.js. So in here, we're going\nto import oralis provider from\nreact oralis. And we're going to\nwrap our entire app around this\nMorales provided so we're going\nto do some little parentheses\nhere. New Line, we're going to\npaste morass provider like this,\nit's going to give us the\nclosing tag, copy it, paste it\nlike this and save. And then in\nhere, we're going to write in\nthe sheet allies on Mount equals\nfalse. This initialize on Mount\npiece here is the optionality to\nhook into a server to add some\nmore features to our website. We\ndon't want to hook into a server\nfor this application, we want\neverything just to be open\nsource, and we don't need any of\nthis additional functionality.\nSo we're just going to do\ninitialize on Mount equals\nfalse. Now that the whole thing\nis wrapped in this Morales\nprovider, we go to the front end\nwe should be able to refresh\neverything looks pretty much the\nsame. And we can start using\nthese hooks. Now this use\nMorales is what's known as a\nhook and hooks can be a little\nbit confusing to understand at\nfirst glance, but they're\nincredibly powerful and they are\nthe de facto way for us to build\nreact projects. And if you're\nfamiliar with class components,\nwe're not gonna be using class\ncomponents because hooks are\nmuch better hooks allow function\ncomponents to have access to\nstate and other react feature\ners state being probably one of\nthe biggest ones and the most\npopular ones, we want our\napplication to be different if\nwe're connected to Metamask,\nversus if we're not, right, if\nwe go back, if we go back to our\nexample website here, right, if\nwe're not connected, we want to\nsay, Please connect to a wallet.\nAnd then when we are connected,\nwe want to go ahead and be\nconnected. If I have, let's say,\nI have some variable like, and I\ndon't have this hook here, I\nhave like, let connected equals\nfalse, right, or enable Web\nthree, or is web three enabled,\nlet's say I've led connected\nequals false. And then I have,\nyou know, let's say have some\nbutton that connects us and\nchanges connected to be true,\nchanging connected to be true is\ngreat and all but it won't\nrerender our application, you\nsee, when I disconnect and I\nreconnect here, our application\nactually changes based off of\nwhether or not we're connected.\nAnd this is what we want, we\nwant our front end to rerender.\nWhen we're connected, if I just\nuse a variable like this inside\nof our component, our front end\nisn't going to rerender. Or even\nworse, if I use it outside, our\ncomponent doesn't even know\nanything about this changing. So\nhooks are a way for us to\nactually work with state\nespecially and automatically\nrerender when something changes\nand enable Web three is going to\nbe a function that we get from\nthis use Morales hook to do\nthat. So for a lot of our\ncomponents, instead of just\nsaying like, let web three\nenabled equals true, like we did\nin normal JavaScript, we're\ngoing to be doing a lot of this,\nthese hooks. For the most part,\nwe usually want our website to\nchange based off of if some\nvariable has changed and enabled\nweb three is a function that we\nget from this hook that says,\nOkay, go ahead and connect\nEnable Web three is basically\nthe equivalent of saying try\nawait Aetherium dot request,\nlike this. Now enable Web three,\nthe way we're going to use it\nhere only works on Metamask. But\nwe will show you how to get this\nkind of this cool little module\nup where we can choose between\ndifferent ways to connect our\napp.\nWe have our enabled web three,\nlet's go ahead and create a\nbutton, that's going to do the\nsame as what we did in our HTML\nFunmi in our return, but here,\ninstead of hi friend header,\nwe're going to add a new\ncomponent, or we're going to add\na new tag, we're gonna add the\nbutton tag, and for me it\nautomatically close to, and I'm\njust gonna call it connect, I'm\ngonna go ahead and save. Now we\nsee a little button that says\nconnect. And obviously, it\ndoesn't do anything, we're gonna\ngive this some functionality,\nwe're gonna say on click now\nsince again, this is a JSX\ncomponent. This isn't raw HTML,\nin raw HTML, we can't just kind\nof stick JavaScript wherever we\nwant. But in JSX files, we can\nstick JavaScript kind of\nwherever we want. So inside of\nthis, inside of this block of\nHTML, we can actually stick\nJavaScript in here by adding\nthese little brackets. So adding\nthese little brackets in our\njobs can return. But here, we\ncan add JavaScript. And what we\nwant to do is we want to have\nour On Click Call Enable Web\nthree, we're going to call an\nasync function, we're going to\nuse the arrow syntax here, one\nclick, we're gonna call this\nasync function, which is just\ngoing to be await, Enable Web\nthree, await Enable Web three,\nlet's add the little parentheses\nhere. And essentially, with just\nthis, we've done pretty much\neverything that we had back in\nthis big connect function here.\nNow if we go back to our front\nend, do a little refresh, we can\nsee that right now, we can see\nthat I'm actually connected, I'm\ngonna go ahead and disconnect.\nI'm still connected from some of\nthe last applications I was\ndoing, we can hit Connect, and\nnow we see metamath does indeed\npop up, we'll hit Next connect,\nand boom. And that's all we need\nto do. Now, if we look at our\nMetamask, it says connected.\nGreat. Okay, cool. So now we\nhave a way to actually connect\nhere, let's add some\nfunctionality and make our\napplication smart enough to have\nthe connect button if we're\nconnected. And if we're not\nconnected, not have that button.\nSo what we'll do now is use\nMorales comes with another hook\ncalled is web three, enabled,\nwhich is just a variable part of\nour hook that keeps track of\nwhether or not our Metamask is\nconnected. But we can actually\ndo one better, we can actually\ncheck to see if there's an\naccount because maybe web three\nis connected. But but they\ndidn't connect it to an account.\nSo let's go ahead and we'll\nimport count from us. Morales\nwill check to see if there's an\naccount. So what we'll do is\ninside of our div tags, we'll do\na little JavaScript, we'll do\nthat ternary operator again,\nwe'll put a count here with a\nquestion mark. And we'll do that\nthat same syntax that we've seen\nbefore, we'll say account, if\naccount exists, do this. If\nthere's no account, do this. And\nif there's no account, we want\nto add this Connect button. So\nwe'll go ahead and we'll stick\nthis in here. If there is an\naccount, we'll just show that\naccount, right. So we'll do div\nbackslash div in here, we'll\njust say connected, like that.\nNow if we go back to our front\nend, we see connected. If we do\na little refresh, it'll go away.\nSo we'll we'll re hit Connect,\nand now we're connected, which\nis great. Let's make it even\nsmarter. We'll have it show our\naccount here. So instead of just\nsaying connected, we'll say\nconnected to I'll put some\nJavaScript, we'll put some\nJavaScript inside of our\nJavaScript. But since this is\nthat HTML stuff, we got to use\nthese brackets to say JavaScript\nagain. So we'll put JavaScript\ninside of the JavaScript, we'll\nsay connected to, we can just\nsay account. Now go back to our\nfront end, we see connected to\nblah, blah, blah, blah, blah,\nyou'll notice if you hit\nrefresh, you'll have to\nreconnect, we'll get to that in\na minute, what a lot of people\ndo is they'll do a count dot\nslice, zero, comma six. And then\noutside of the brackets, they'll\ndo dot that dot, another set of\nbrackets account, that slice,\ncount dot length minus four,\nclose that off like that, we\nhave our account, when we hit\nConnect, now it says connected\nto blah, blah, blah, hello. And\nbecause of these hooks, when I\nswitch accounts, and I connect\nwith these new accounts, it even\nautomatically re renders\nswitching accounts. So these\nhooks are really good for re\nrendering our websites whenever\nsome value changes. For example,\nif I said like, let count number\nequals seven, and we had a\nbutton, that updated account\nnumber, our front end wouldn't\nrerender unless we told it\nspecifically to rerender, which\ngets really annoying. So hooks\nkind of help us a lot with doing\nthat. And it allows us to keep\ntrack of states between renders.\nNow, here's something that right\nnow it doesn't do, if I hit\nrefresh, I have to re hit this\nconnect button, even though my\nMetamask says, Hey, we're\nconnected. But if I refresh, I\nhave to re hit this Connect\nbutton. Why is this happening.\nOr when I hit refresh, our\nwebsite doesn't know that we've\nhit enable Web three already,\nright, because we basically go\nback to blank when I refresh,\nand then I have to hit Connect,\nwhich is really obnoxious and\nreally annoying. So we want to\nadd some functionality, so that\nautomatically the instant we\nrender, we go ahead and we check\nto see if we're already\nconnected. And if we're\nconnected to show this. Now to\ndo that, we can use another hook\ncalled use effect. And this is a\ncore react hook. So we'll do\nimport use effect from react\nlike this. This is a core hook\ndirectly from react. And it's\none of the most popular out\nthere along with use state. And\nwe've left some links to\nlearning more about the effect\nhook in the GitHub repo\nassociated with this course, I'm\ngonna give you my summary of\nbasically what this use effect\ndoes, we basically have this\nfunction called use effect,\nwhich takes two parameters, it\ntakes a function as its first\nparameter, and then second, it\noptionally takes a dependency\narray. And what this use effect\nis going to do is it's going to\nkeep checking the values in this\ndependency array. And if\nanything in this dependency rate\nchanges, it's going to call some\nfunction, and then rerender, the\nfront end. So for example, using\nMorales comes with this function\ncalled is web three enabled or\nthis variable called is what\nthree enabled. If we add this to\nour dependency array, what we\ncan do in our use effect is do\nconsole dot log, hi. And then we\ncan do console dot log is web\nthree enabled, what this use\neffect is going to be doing is\nit's going to constantly be\nrunning, this is running all the\ntime. And it's going to be\nlistening to see if is web three\nenabled changes, right? And\nanytime we run Enable Web three\nis web three enabled becomes\ntrue. So so now if we go to the\nfront end, we do a little\nrefresh, we see high false, high\nfalse. Now why do we see this\ntwice is web three enabled only\nchanged once? Well, this is\nbecause of how use effect works,\nit will automatically run on\nload or right or the first time\nit does and then it'll run\nchecking the value. So we're\nbasically seeing this run twice,\nit runs the first time we load\nit, and then it'll check the\nvalue and run again. So we see\ngo twice, even though it's\nreally just once. But if we go\nback here, sorry, let me just do\na quick reload again. We hit\nConnect, we now see Hi is now\ntrue, because it saw is what\nthree enabled change to true\nbecause enabled web three made\nis what enabled return true. And\nit ran this again, right. So\nthat's how that actually works.\nAnd there's a couple of\ndifferent ways to think about\nthis. Actually, we actually\ndon't even need to give this an\narray. And what happens if we\ndon't give this an array? Well,\nlet's refresh. We'll hit\nConnect, and we'll see it's\nstill ran a couple of times. So\nif we don't give it array, no\ndependency array, it'll run any\ntime something re renders. And\nyou need to be careful with\nthis. Because then you can get\ncircular renders, if you have\nsome use effect that changes\nsome value. And you have another\nuse effect that re renders when\nthat value changes while they're\nboth just going to keep changing\nback and back and forth. So no\ndependency array like this. It\nwill run anytime something re\nrenders we'll give it a blank\ndependency array. It'll just run\nonce on load, just run one time.\nSo now like we have a blank\ndependency right in here, we\nreload. Right? We see that it\nruns twice. That's actually\nbecause we're basically re\nrendering once in the\nbackground. So it really is just\nrunning Once but there's\nsomething else going on in the\nbackground. So it looks like\nit's running twice. Now if we\njust add is web three enabled,\ndo a little refresh, it'll do\nthe exact same thing, it'll run\nthe same amount as if this was\nblank. But when we connect,\nit'll add here. If this was a\nblank array, when we refresh,\nwe'll see kick out twice, which\nshould be ones. But like I said,\nthere's something going on in\nthe background. If we hit\nconnect. Now, we don't see\nanything here, because the blank\ndependency array says, Hey, I'm\nonly going to run one time on\nload. Now, if there's our stuff\nin this array, like is web three\nenabled, it's going to run\nanytime something in this array\nchanges, right. So again, we'll\nrefresh will connect, we see it\nran again, after a hit Connect\nwill refresh. Hi, hi connected,\nran one more time. So so that's\nkind of the cheat sheet here. If\nwe give it no dependency array,\nit's going to run any time\nanything in this project re\nrenders, if we give it a blank\ndependency array, it's just\ngoing to run one time, or like\nwe saw, it ran twice. But that's\nbecause there's something else\nwe render in the background. And\nif we give it dependencies in\nthis array, it's going to run\nanytime something in this array\nchanges. And this is really\nhelpful, because oftentimes,\nwe're going to want our front\nends to rerender, this use\neffect will say, oh, cool, some\nvalue changed, I'm going to run\nthis function, and then I'm\ngoing to rerender, your front\nend.\nAnd now we're going to use this\nuse effect thing to make sure\nthat when we refresh, it\nremembers that we're actually\nconnected. So how do we do that\ninside here, we are going to use\nthis is web three enabled thing.\nAnd the first thing that we want\nto just do is we want to say if\nis what three enabled, then\nwe'll just return. Because if\nwe're already connected to web\nthree, then we don't need to do\nanything. Now, if we're not\nconnected to web three, and we\ndon't have an account, we'll\nwant to go ahead and call Enable\nWeb three, right want to\nautomatically enable Web three.\nSo now if I go back, you'll see\nwith just this code, I'm just\nalways automatically calling\nEnable Web three. But this can\nget really annoying. Because if\nI disconnect, right, let's go\ndisconnect everything. Now\nrefresh, it's going to always\ncall Enable Web three, right,\nevery time we refresh, it's\ngoing to automatically call\nenabled through without us even\nhitting the Connect button. So\nthat's no good to we want to\nactually see if we're connected.\nSo the way we do this, like I\nsaid, we want to use our local\nstorage, again, application, or\nthese little, this little thing\nhere go to Application, we want\nour we want our application to\nremember that somebody hit this\nconnect button, and they went\nand connected to us. So what\nwe're going to do is in our\nlittle onClick function down\nhere, we're not just going to\ncall await Enable Web three,\nwe're also going to store a\nlittle remembrance here saying,\nHey, we actually did connect\nrecently. So below this, we're\ngoing to run window, dot local\nstorage, dot set item,\nconnected, comma injected. I'm\nactually going to comment this\nout for now, because my friend\nis just going to keep popping up\nlike that. So what this does is\nwe're saying, okay, in our\nwindow, because again, if you go\nback to the window, you go to\nconsole, a type window, you're\nactually going to see this giant\nwindow thing here, right, which\nwe showed you before, there's\nalways this window object in\nhere. And we're going to do\nwindow dot local storage, which\nrelates to if we go to this\napplication section, this local\nstorage section here, that set\nitem connected to inject it. So\nwe're going to set a new key\nvalue in here, we're doing it\nlike this because in the future,\nmaybe you want to do you know\nconnect it to Wallet connect or\nconnected to Coinbase wallet or\nsomething, right, but we're just\ngonna say injected, meaning\nwe're connected to that meta\nmask. And in some versions of\nnext, Jas next, Jas has a hard\ntime knowing about this window\nvariable. So we can just do if\ntype of window does not equal\nequal, undefined, then we're\ngoing to do this. So we're just\nmaking sure that window doesn't\nequal undefined that there is a\nwindow. So now if I go back to\nthe front end, and I hit\nConnect, and we go ahead, and we\nconnect here, we'll see now in\nour application, local storage,\nwe'll see we've added this\nconnected injected bit here,\nwe're storing in the browser\nthat we are indeed connected to\nthis. Now that we've added this\ninto our browser, we can roll\nback up to our use effect here\nand say, Okay, if they're\nalready connected, great, we'll\nbe done. But before we do\nanything, let's check to see if\nthey have this here. And if they\nalready are connected, let's\njust run that connect bit. So\nwe'll say if type of window does\nnot equal, undefined, right,\nbecause we want to check for\nthat window object. Again, we'll\nsay if window dot local storage\ndot get item connected,\nconnected, so if that connected\nkey exists, then we'll just run\nEnable Web three. So now We have\nsome functionality in here,\nwhich even when we refresh, it\nwill automatically run enable of\nthree for us. So now if I go\nahead and refresh the front end,\nwe don't have to press that\nconnect button anymore, because\nit goes, Oh, I see that locally,\nwe stored this connected key\nwhenever you refresh. Now, it\nchecks for this first it sees it\nand then runs enabled web three.\nNow on the other side, though,\nif we're in here, and now we\ndisconnect, and then we refresh.\nThis will show up, which is\nreally annoying. And every time\nwe refresh, it'll keep showing\nup, which we don't want. We want\nit to be that when we\ndisconnect, we tell it hey,\nwe've we've gone ahead and\ndisconnected here. So back in\nour application, we can add\nanother use effect to check to\nsee if we've disconnected. So\nlet's create another use effect.\nThat's going to costly just look\nfor us being connected, we'll\nsay use effect, do a little\narrow bracket thing here. And\nwe're going to do this anytime.\nAnd oh my goodness, anytime I\nsave, it's going to keep popping\nup. So I'm just going to just\ngoing to comment that out for\nnow. So in here, we want to say\nokay, whatever, there's a\nrerender we want to run if any\naccount has changed. And Morales\nhas some functionality for us to\ndo this as well. So from user\nmorass, we're going to import\nmore Alice, and then down here\nin our use effect. Inside the\nlittle function, we're gonna say\nmirallas.on account, changed\nof account, we're gonna do some\nstuff. So on account changed,\ntakes a function as an input\nparameter. So we'll say console\ndot log, account, change to\naccount. And what we can do is\nwe can check to see if this\naccount is not. And we can say\nif account equals equals no,\nthen if the account is null, we\ncan assume they've disconnected.\nSo we can say window dot local\nstorage, dot remove item,\nconnected, we'll also run a\ndeactivate web three function.\nSo from Ross, deactivate, web\nthree will also run, deactivate\nweb three, which is going to set\nis web three enabled to false.\nSo we're going to disconnect the\nweb three, and then we're going\nto say console dot log.\nNo\ncount found. So let's try this\nout. Now. Let's go back to our\nfront end, we'll do a little\nrefresh here. So right now it\nsays we're connected. Even\nthough in my meta mask, we're\nnot connected, right? And to\nstart from scratch here, you can\ngo ahead and disconnect it. But\nbut my browser says, Hey, we're\nconnected, right? So now we'll\nconnect. And we'll actually be\nconnected right, next connect,\nand it and it just overrode\nconnected, you know, with\ninject, let's, let's make this\ninjected. And then we'll remove\nYep, okay, injected, we'll\nrefresh, like, connect, and now\nit says injected. Okay, cool. So\nnow we're connected here. If in\nhere, if I just switch accounts,\nright, let's go to Account\nthree, I'll connect. If we go\nback to our console real quick,\nwe'll say account change to\nblah, blah, blah, I can change\nback, right, we'll go change\naccount change to blah, blah,\nblah. Now, if we go back to our\napplication, go in here. And we\ndisconnect. Now let's disconnect\nboth of these disconnect. And\ndisconnect. We'll see it's now\nbeen removed from local storage.\nAnd if we go to our console,\nit'll say, no account, change\nthe No, no account found and\nremoved it. Now if I hit\nrefresh, nothing happens here, I\ncan go ahead and connect. Right\nnext connect, I can refresh.\nOops, I need to go back in here\nand re enable this. So sorry,\nlet's add this back in here. But\nnow it can refresh. Let's go\nahead and disconnect here. Let's\nconnect. Let's go back to the\nconsole, we can connect thing\nwill pop up next connect, I can\nrefresh. It stays connected for\nme, I can switch accounts, I can\ngo ahead and here, I can switch\naccounts, I can even disconnect.\nAnd it will automatically update\nfor me, which is what we want.\nSo now we've essentially made a\nway more robust connect button,\nwhere it goes back and forth\nwith when we're connected now.\nNow one more thing that we might\nwant to do, or application is\nwhen we hit Connect, we want to\nmaybe disable this button,\nright? We don't want it to allow\nit to be able to be pressed. So\nI'm gonna hit Cancel, we're just\ngonna add one more bit of\nfunctionality here, we're going\nto add this is web three enable\nloading. And what this does is\nit just checks to see if\nMetamask has popped up. And so\nwhat our button after the on\nclick section, we can add\ndisabled. Equals is web three\nenable loading, so it'll be\ndisabled if we're loading here.\nSo let's go ahead and we'll\ndisconnect disconnect. Now we'll\nhit Connect, and you'll see the\nbutton can be clicked. So that\njust makes it a little bit nice.\nTurn, Next connect Bada bing,\nbada boom, awesome, we have just\nmade a way more robust front end\nthan what we had before this\nconnect button is super slick.\nAnd it allows us to kind of flip\nback and forth. And our\napplication is incredibly\npowerful and knows how to handle\nall these different changes. Now\nthat we've learned how to do it\nthe manual way, let me give you\nthe Chiti way, in our\ncomponents, we're gonna create a\nnew file header dot j s, and\nwhat we're going to do is we're\ngoing to install this web three\nUI kit, it's a front end kit,\nand it has a whole bunch of\nthese components already built\nfor us. So we can build like a\nheader component and a connect\nbutton component just by using\nthis. So to install, install it,\nwe're gonna come back here,\nwe're gonna stop our front end.\nAnd we're just going to run\nyarn, add web three UI kit, like\nthat. And again, we don't want\nthis to be a dev dependency,\nbecause it is going to be a part\nof our website, and then we'll\ndo in our header.js, we'll do\nimport connect button from web\nthree UI kit. And then we'll do\nexport default function header.\nAnd then all we'll do is return\ndo like a div. And then inside\nthis div, we'll do next button.\nWith a little backslash here, we\naren't going to need this for\nthis project. But if we want to\nbe super explicit, we'll say\nMorales off equals false. Just\nagain, to reiterate, hey, we're\nnot trying to connect to a\nserver here just to make that\nsuper explicit. But this connect\nbutton does everything, this\nmanual header thing that we just\ncreated, does. So back in our\nindex.js, we can comment or\ndelete this line will do import\nheader from dot dot slash\ncomponents slash header. And\nthen instead of manual header,\nwe'll just do header. We start\nour app back up with yarn dev\nagain,\nwe go back to the page, we do a\nlittle refresh here, we now see\nwe have this connect Wallet\nbutton. And it's even looks a\nlot nicer. It's got some nice\nstyling to it as well, we can\nhit Connect wallet. And it'll\ngive us this little ngModel\nasking us which wallet we want\nto connect to. So asking us\nwhich wall we want to connect to\nis kind of similar in our manual\nheader to this or set item\nconnected, injected, right or\nwallet connect, it would do\nconnected wallet Connect for\ntrust wallet, it would it would\nset item as connected wallet\nconnect, etc. So it allows us to\nconnect in different ways. And\nwe if we hit Metamask, we go\nahead and connect like so even\nhad some nice styling here where\nit gives us our wallet address\nhere. But it also gives us our\nwallet balance as well. And\nagain, if we go ahead and\ndisconnect, we'll see it\nautomatically disconnect. We\nconnect like so we can reconnect\nlike so boom, boom. If we switch\naccounts, it's smart enough to\nknow that we're switching\naccounts. So I know I showed you\nkind of the hard way. But I\nwanted to show you kind of\nwhat's going on. It's setting\nthis local storage in the\nbackground so that it knows\nwhich where it's actually\nconnected. But for headers\nmoving forward, this is all you\nneed. And your life will be\ndrastically drastically easier.\nAnd let's just add a centralized\nlottery or decentralized raffle\nor whatever you want to our\nheader as well. So it says\ndecentralized lottery, you know\nthe button Hello. Now that we\nhave that, what else do we need?\nWell, well, the main thing that\nthis app needs to do is just\nhave a big button that says\nenter the lottery. And then\nideally, you know, show how many\npeople are in the lottery and\nthen the recent winner as well.\nSo let's go ahead, we'll create\na new component called lottery\nentrance. And we'll grab that\ncomponent similar to like what\nwe did with our header, we'll\ndrop this component right here.\nAnd then our app will pretty\nmuch be done. So let's create\nthis lottery entrance component,\nlottery entrance, that Jas,\nright and again, in the reason\nwe're putting these in\ncomponents, we could 100% Stick\nit all, you know all our code in\nhere to make it more modular so\nthat we in the future, if we\nwant to have more pages or do\nother stuff, I'm going to zoom\nout a little bit just so that we\ncan see all of our code a little\nbit easier. This is our whole\nindex j s. This is our whole\nheader. Let's create a new\nlottery entrance app just for\nthe boilerplate code here we're\ngoing to export default lottery\nentrance, excuse me, export\ndefault function, lottery\nentrance, and this is just going\nto be you know, another\ncomponent where we're going to\nreturn some that JSX HTML stuff,\nright? So we're gonna do div and\ndo like hi from lottery\nentrance, Excel. And now that we\ndo that, we can go back to our\nindex.js. We can do import\nlottery entrance from dot dot\nslash components. Slash lottery\nentrance, will stick it right\nunderneath the header like that.\nAnd if we go back to our\nwebsite, we see high from\nlottery entrance so our lottery\nentrance is going to be right\nunderneath the header would\nHere's what we want. And then\nwe'll delete this line that\nsays, Hello. So lottery\nentrance, what is the what is\nthe first thing that we really\nneed to do in here? Well, we're\ngoing to want to have a function\nto call the lottery to enter the\nlottery. Let's go ahead and do\nthis. Now let's go back to how\nwe did this with HTML fund me\nrecall that old fun function\nlike this, but doing it like\nthis won't rerender. And there's\na whole lot of other\nfunctionality that doing it like\nthis won't give us so we're\ngoing to use Morales to actually\ncall some of these functions,\nbecause mirallas has in React\nmirallas. Again, they have hooks\nfor us to do pretty much\nanything we want to do. And one\nof these hooks is called use web\nthree contract. And what this\ndoes is it gives us a hook that\nwill give us the data returned\nfrom a function called an error\nreturned, a little function that\nwe can use to call any function.\nAnd then we also have these\nreally helpful is fetching in is\nloading. So if we want everyone\nto have our UI or our website,\ndo something while it's fetching\nor while it's loading the\ntransaction, we can use these\ntwo variables to do that. And\nthen all we need to do is we\njust need to pass it the\ncontract information, which\nsimilar to ethers is going to be\nthe ABI contract address, we'll\npass the function name, and then\nany parameters for that\nfunction. So we're going to use\nthis syntax here to make that\ntransaction to the blockchain.\nAnd to call these functions. So\nwhat we're going to do is we're\ngoing to import us web three\ncontract\nfrom react mirallas. And inside\nour function, but before I\nreturn, of course, we're going\nto say const. And then we'll do\nkind of exactly what we see in\nhere. For now, let's just get\nthe function, let's just get\nthis run contract function,\nbecause this is going to be the\nfunction that we can call to\nactually enter the lottery. So\nwe'll say const, run contract\nfunction, and we're actually\ngoing to call this enter raffle.\nAnd we'll say equals, use web\nthree contract, and we need to\npass the ABI, we're gonna need\nto pass the contract address,\nwe're gonna need to give it the\nfunction name, we'll need to\ngive it the params, which\nactually we do know it's going\nto be blank. But then finally,\nwe will need the message value.\nBecause if we remember back into\nraffle doesn't take any\nparameters, all it takes is this\nmessage dot value bit. So that's\nall we're going to need to pass.\nSo how do we get all this stuff,\nand I'm going to leave this in\nhere. But we're going to comment\nit out for now, because this is\nwhat we need to do. But we need\nto get all of this stuff into\nour code here. So how do we\nactually get all that stuff?\nWell, ABI is easy, right? Abi\nisn't going to change at all, no\nmatter what network or on ABI is\nalways going to stay the same.\nNow if you've already deployed\nyour smart contracts, and you\nknow exactly what address it is,\nbecause you've deployed to a\nmain net, or you've deployed to\na test net, all this stuff isn't\nreally going to change. And we\ncan just hard code it all right\ninto here. Or we can do what a\nlot of people do is they'll\ncreate a constants folder. And\nin here, they'll add like an API\ndot JSON, maybe they'll add a\ncontract addresses dot JSON. And\nthen they'll add maybe like an\nindex dot j s or something,\nwe're gonna build our\napplication in a way we can\nactually test locally using our\nown Hard Hat Network, and then\ncompare it to what it looks like\non the actual test net as well.\nSo we're going to make it\nnetwork agnostic. So the front\nend works exactly the same no\nmatter what network that we're\non. And we can go back, download\na directory back into our CD,\nhard hat smart contract lottery\nFree Code Camp, and spin up our\nnode here, right with hh node or\nyarn hard hat node. And we'll\nuse this as the blockchain that\nwe're going to connect to. The\nthing is, if I go back here, and\nI'm building the front end, and\nI go, ah, like this would be\nbetter if we did X, Y, or Z. And\nmaybe I changed the name of some\nfunctions, you know, blah, blah,\nblah, something else, I want\nthat change to be reflected on\nmy front end. And I want to be\nable to code my front end as\nsuch. So since we are the only\ndeveloper right now, we kind of\nhave the ability of where we\nboth know, the back end code and\nthe front end code. So something\nthat I like to do to make my\nlife a little bit easier is I\nlike to create an update front\nend deploy script. So after we\ndeploy stuff, we run a little\nscript that will create this\nconstants folder for us with a\nwhole bunch of stuff, right?\nIt'll give an ABI, it'll give\ncontract addresses and anything\nelse we might need in our front\nend from our back end. So what I\nlike to do is I like to come\nback to my original code and an\nupdate this for a new script. So\nI'll come in here in this deploy\nscript, I'll create a new file,\nand I'll call it oh two or even\nlike 9999, up, date, front, and\ndot Jas. And the reason I do 99,\nobviously, is because we want\nthis to be always the last\nscript in our deploy folder. And\nthen we can just write a little\nscript that's connected. We just\nwrite a little script that's\nconnected to our front end here\nso that whenever we deploy\ncontracts, no matter what chain,\nwe can update that constants\nfolder on our front end. So\nlet's go ahead and create that\nscript right now we'll do module\ndot exports, equals async\nfunction. And we'll add all our\nstuff in here, we don't really\nneed to deploy any contracts,\nbecause we're just updating the\nfront end. So we can just leave\nthe parameters of this one\nblank. And the other thing I\nlike to do, because sometimes I\ndon't care about the front end,\nwhat I'll do is I'll only update\nthe front end if we've specified\na dot env variable. So I'll\ncreate a dot env variable called\nup date, front end. And then\nI'll set this to true. And now\nin our script here, we can say\nif process dot E and V dot\nupdate, front end. And we can\njust say like console dot log,\nupdating front end. And now back\nin here, right, if a mat if I'm\nin the correct directory in\nhere, if our own hard hit\nDeploy,\nyou know, get this little\nupdating front end. And now we\ncan update front end. So let's\ndo it. So I'm actually going to\ncreate one function called\nUpdate contract addresses. And\nthis is going to be our function\nthat we're going to use to\nupdate contract addresses, then\nI'm going to make one called\nUpdate API, where we just update\nthe API's and the front end so\nso we're going to call this\nupdate contract addresses. So\nI'm going to create a new\nfunction async function, update\ncontract addresses. And first,\nwe're going to get that raffle\ncontract since we're going to\nneed to get its address. So\nwe're gonna say const, raffle\nequals await. And we're gonna do\nthe same thing we've been doing\nethers dot get contract, raffle,\nand then my VS code auto\nimported, it doesn't const\nethers equals require Hardhead,\nlike so. So we have raffle in\nhere. And we're gonna want to\npass this raffle address to our\nfront end, since this is going\nto be a variable that we might\nuse a lot of places, we can just\nadd it like const, front end\nlocation, addresses file,\nequals, and we're going to give\nit the relative path to where we\nare now, which is going to be\nyou know, if we see the download\ndirectory to next year's smart\ncontract lottery, FCC, I can\neven just copy this, paste that\nin here. And then it's in the\nconstants folder, and it's going\nto be contract addresses dot\nJSON. And let's get the ABI\nfile, we'll say const. Front and\na bi file is going to equal and\nthis is going to be nearly the\nsame thing. So we can just copy\npaste that. And then we'll do\nslash API dot JSON. And now in\nour update contract addresses\nfunction, we can say const,\ncurrent addresses, equals and we\ncan read again, in our front\nend, we can read from this file.\nSo I'll usually start out with\njust two brackets. So that's\nlike JSON compatible in both of\nthese files. And so to read it,\nwe're gonna say JSON dot parse,\nFS dot read file sync, we're\ngonna have to import, say const.\nFS equals require, I know we've\nused Fs extra in the past, but\nthis one, we're just gonna use\nFs, which is going to be our\nfront and addresses file, we're\ngoing to read it in with UTF\neight encoding. So now this is\ngoing to be our current\naddresses. And we're going to\nupdate the list of current\naddresses with some new\naddresses. Because our contract\naddresses we want this to be\nchain agnostic, we would do\nsomething like for you know, and\nthen the addresses on rink B, we\ncould do 31337, and then the\naddresses on our local host,\nright, we want to be able to\nkeep track of all the different\naddresses across all the\ndifferent chains. So back in our\nfunction here, then we'll say if\nif network, dot config dot chain\nid.to string in contract\naddresses that were config ideas\nin there, then we're just gonna\ngo ahead and add this new\ncontract address in there. But\nbefore we add this new address\nin there, let's just check to\nmake sure it's not are already\nin there. So we're just gonna\nsay if contract addresses of\nnetwork dot config dot chain\nid.to string, this is so long, I\ndon't want to keep writing that\nI'm gonna say const chain ID\nequals network, config that\nchain id.to string, and we're\njust gonna use chain ID. If\nchain ID and contract address\nthen if we don't already have\nthat includes raffle dot\naddress. We're gonna go ahead\nand add this new address and\nthen if the chain ID doesn't\neven exist, we're gonna go ahead\nand do contract addresses\ncurrent addresses, equals or\nassuming current addresses of\nchain ID equals and then we'll\njust create a new array, raffled\nthat out address. So we're\nsaying if the chain ID doesn't\nexist in current addresses,\nwe're just going to add this new\narray in there. And then\nfinally, now that we've updated\nits object, we're gonna write it\nback to this file, we'll say Fs\ndot write, file sync, front and\naddresses file. And then we're\ngonna do JSON dot string of\nfive. So we're going to\nStringify this JSON object, so\nwe're just gonna go ahead and\nwrite it back. And then bottom\nmodule that exports that tags\nequals all and then front end. I\ncool. So we have a function to\nupdate the contract addresses,\nbut we also need the ABI. So\nwe're gonna do date API, and\nwe're gonna create another\nfunction async function, update\nAPI. And in here, we're gonna do\nthe exact same thing on raffle\nequals await ethers that\ncontract,\nraffle FX dot right file, sync,\nfront and abi. It's just going\nto copy paste it front end, AVI\nfile. And then to pass just the\nABI, we can actually get it\ndirectly from this raffle\nobject, we can actually just do\nraffle dot interface that format\nethers dot utils, dot format\ntypes, dot JSON. If you look in\nthe ethers, Docs, ethers has\nthis contract dot interface\nthing which returns an interface\nwhich is different from a\nsolidity interface. But it\nallows us basically just to get\nthe API with this one line of\ncode. So in our back end code\nhere, now if you run h h deploy\nor H H node, we should\nautomatically update our\ncontract addresses in our API\ndot JSON. So let's go and try\nthis. So we'll run h h node. So\nwe'll start a node, right in\nthis terminal over here, we'll\nflip back to the front end. And\nif we open ABI to JSON, we do\nindeed, now see, we have the\nraffle API in this file. And if\nwe go to contract addresses, we\nsee on network 31337, here's our\nfirst address, right. And if we\ndeploy to different chains, this\nwill get populated with\ndifferent network IDs, and then\na list of addresses associated\nwith them. So it helps make our\nfront ends a lot easier to\nmaintain, and bounce around and\nkind of test and work with. Now\nthat we've done all this, we can\nactually close our hardhat smart\ncontract lottery Free Code Camp,\nthe hard hat project for this,\nand we're just going to have all\nof our terminals be in here. So\nwhat we're gonna do is we're\ngonna go down and directory CD\ndot dot, and we're going to cd\ninto Oh, sorry, we're actually\nwe're already in their CDs, hard\nhat, smart contract, lottery\nFree Code Camp. And then in this\none, we're going to run hh node\nor yarn hardhat node. Now we'll\nhave a local blockchain running\nso we can test everything that\nwe're doing in the front end,\nactually, I'm gonna move this up\none. So now in our first area,\nhere, we have our front end code\nrunning, then we have our\nblockchain running. And then in\nthis one, we're just going to\nadd, you know, whatever we want\nto add. Now, we can actually go\nahead and hit this little X\nbutton here to close the panel.\nSo that's just hiding the panel,\nthese are all still out, they\nonly get trashed when you\nactually hit the little\ntrashcan. So we're just going to\nclose the panel. But all those\nterminals are still running, I\npromise back. So where were we?\nOkay, back to our function here.\nSo we just automated the process\nof updating our API's and then\nupdating our contracts as well.\nAnd now we can import these into\nour files. Now we can import\nthem one at a time, it'd be like\nimport API, from dot dot slash\nconstants, slash API, or we\ncould do something a little bit\nclever is we could export these\nin the same file. So if we\ncreate a new file, a new\nindex.js, in here, we can import\nthem and then export them in\nthis one file. We can say const,\ncontract editor says equals\nrequire dot slash contract\neditor dot JSON, and then const\nAPI equals require dot slash API\ndot JSON. And then we'll do\nmodule dot exports equals API\nand contract addresses. So now\nonce we export them like this\nback in our lottery entrance, we\ncan import them just in one\nline. So we'll say import API\ncomma contract addresses from\ndot dot slash constants. So we\ncan just specify the folder\ninstead of each individual\nfiles, because we have this\nindex dot j s here, which\nbasically represents this whole\nfolder. Back in here, what do we\nhave now? Let's uncomment this\nabi. Okay, great. We have the\nABI we're importing it from our\nconstants, folder, contract\naddresses, we have our contract\naddresses. And we're going to\nneed to specify the network ID\nin just a second here. We have\nthe function name here, which is\ngoing to be what enter the\nraffle. There are no params. So\nall we need to do so how do we\nget both the chain ID and then\nAlso the message dot value will\nchange, it is something that we\ncan get really easily with\nMorales, let's comment this\nwhole section out one more time,\njust so I can show you something\nwe can do import. Once again,\nwe're going to get that use\nMorales book from react Morales.\nAnd what we can do is we can say\nconst.\nChain ID equals use ralis. Now,\nthe reason morality knows about\nwhat chain we're on is because\nback in our header component,\nthe header actually passes up\nall the information about the\nMetamask to the Morales\nprovider. And then the Morales\nprovider passes it down to all\nthe components inside those\nMorales provided tags\nconcentrated equals use Morales.\nAnd I'm just gonna do a little\nconsole log chain ID because I\nwant to show you what it looks\nlike. So if we do a little\nrefresh, and we're in the\nconsole here, we can ignore some\nof these warnings here, but we\nsee the chain ID is actually 0x\nFive, well, because I'm on the\nrink B chain or the Grilley\nchain excuse me, if I switch\nback to hard hat localhost,\nwhich you should know how to do\nfrom a SEMA fun we bet if you\ndon't have hard hat localhost\nand your Metamask go back to\nthat HTML font we bit follow\nthat along. Okay, great. Now\nit's going to print this Oh x\nbla bla bla bla bla. So that\nmight be a little bit confusing.\nBut this is the hex version of\nour chain ID. Right. So let's\nswitch to Etherium main net. Now\nwe pronounce Oh x one, right?\nOh, x one is the hex version of\nthe number one. So chain ID\ngives us the hex addition of the\nchain ID. So I don't want the\nhex addition, I want the actual\nnumber. So what I'm going to do\nis I'm going to say Okay, chain\nID, your name is actually going\nto be chain ID hex. And we can\ndo console dot log chain ID hex,\nbut I want the number. So what\nwe can do is parse a built in\nJavaScript parse int, CIN ID hex\nlike that. Now if I go back,\nwe'll do a little refresh here.\nScroll away from the warning, we\ncan see the one here. Now let's\nswitch to hard hat, localhost.\nWe'll scroll down we see 31337.\nSo use Morales chain ID returns\nthe hex we parse it with Parson\nto get the actual number. Okay,\ngreat. So we can stick the chain\nID into here. Now this raffle\naddress is something that we're\nactually going to use a lot, we\nmight as well have it be at the\ntop of our code here, we aren't\ngoing to be changing the raffle\naddress. So we don't need to put\nit in a hook. We are going to\ntechnically be changing the\naddress when we change networks.\nBut our header app takes care of\nre rendering and dealing with\nall that. So we can just make\nthis a constant variable. So we\ncan say const, raffle address\nequals, first let's check the\nchain ID hex and if there's a\nchain ID hex and if there's not\na chain ID hex we're gonna do\nsomething else. Excuse me, we're\ngonna say chain ID hex in\ncontract addresses. And\nactually, there's never gonna be\na chain ID hex. So we'll do\nconst chain ID equals Gen ID hex\nparsed, Parsons, chinati hex,\nand you might be thinking, hey,\nthis, these are both the same\nname. Well, what we're doing up\nhere in use Morales is we're\nsaying hey, pull out the chin ID\nobject, and then rename it to\nchain ID hex and down here,\nwe're saying, Hey, we're going\nto create a new variable called\nChain ID. So we'll say contract\naddresses of chain ID at zero.\nSo in here, we're saying this\nnetwork ID and this address,\notherwise, we'll just say no.\nOkay, we're getting there. Let's\nuncomment this, now we have the\nraffle address, and we can just\nstick it in here. All we do now\nis the message dot value. If we\nremember back to our raffle, we\nactually set that fee\ndynamically. So we have in here\nwe do entrance fee equals\nentrance fee, which is the\nparameter in the constructor. So\nwe want to call this get\nentrance fee function. This is\none of the ways we can send a\ntransaction. And we can also\nsend functions, one of the ways\nthat we're going to do it right\nwhen our lottery entrance loads,\nwe're going to run a function to\nread that entrance fee value. So\nhow do we do that? Well, we can\nuse one of our hooks again,\nright use effect use effect can\nrun right when something\nchanges, we're only going to\nwant to try to get that raffle\nentrance fee if web three is\nenabled. So what we can do is\nback up in here and use Morales\nwill pull in that is web three\nenabled. And we'll have our use\neffect in our function, we'll\njust say if this is web three\nenabled, then we'll try to read.\nSo we can go ahead and use this\nuse web three, contract Wagan.\nLet's go ahead and just copy\npaste this. And we'll use the\nsame setup here. Except instead\nof enter raffle, of course,\nwe're going to be doing get\nentrance fee. So we're going to\nget entrance fee. We need the\nAPI we got it raffle address got\nit. This is going to be the\nfunction name is going to be get\nentrance fee params nothing\nmessage that value, nothing.\nWe're going to be calling this\nget entrance fee function. And\nnow I finally show you how to\nactually call one of these in\nour contracts here. Use web\nthree contract, download our use\neffect, we're actually going to\ncall get entrance fee. Now if we\njust call get entrance fee like\nthis, and we say like, you know,\nconst something equals get\nentrance fee and then console\ndot log something, what do you\nthink's going to happen? And\noops, I need to import, I need\nto import use effect from react.\nThere we go. We look or logs, I\ndon't see console dot log,\nsomething won't get entrance fee\nis going to be an async\nfunction. Once again, we need to\nwait we would need to do a wait\nget into T, right? There's an\nissue we can't call await in our\nuse effect. So what can we do?\nWell, we can actually make an\nasync function, call it update\nUI. And then we can stick this\ninside of the async function\nhere. And we can call update UI\nright outside of it like this.\nSo now we go back to our front\nend, we do a little refresh. And\nif we scroll up, we still see\nnothing. Well, is web three\nenabled actually changes. So the\nfirst time that this runs, is\nweb three enabled probably is\nfalse. But when it turns to\ntrue, we want to we want to run\nthis section in our little\ndependency array. We're going to\nadd this in here, right? And the\nreason that it's false to start\nwith is because of exactly what\nwe showed in that manual header,\nright? What does it do? Well,\nfirst, we check to see after we\ndo a refresh, if window dot\nlocal storage get item is\nconnected, then we call Enable\nWeb three, which will make this\nenabled. So in our lottery\nentrance, is what they're\nenabled starts off as false when\nwe do a refresh. And then the\nbrowser checks the local storage\nsays, oh, web three should be\nenabled, let's enable it and\nturn to true. So now if we hit\nsave, and we do a little refresh\nin our console, we can now see\nthe logged out entrance fee. So\nthen we'll switch this to\nentrance fee from contract. Now,\nwe also probably want to show\nthis entrance fee on our UI, if\nwe do let entrance fee, we'll\nsay equals blank. And we'll take\nthis and we'll update, you know,\nand we'll update this just\nsaying entrance fee equals await\nentrance fee. Cool. Now we have\nthis as kind of a global\nvariable, we can add it in here.\nAnd then let's even do a weight\nentrance fee. But this whole\nthing in parentheses, and then\ndo.to string, and we can even\nconsole dot log entrance fee.\nNow we're adding in a new\nbrowser. But there's still an\nissue here. Let's see if you can\nspot it, we'll do a little\nrefresh.\nWe don't see the entrance fee in\nthe UI here. But we do see it\ngood console dot log out, right.\nAnd again, this is going to be\nin a way here, what is going on\nhere will use effect is going to\nrerender our browser, right? And\nthat's what we want is what\nthree enable goes from false to\ntrue, our browser re renders\nwatch, once we get our entrance\nfee, does our browser rerender?\nNo, it does not because entrance\nfee is just one of these normal\nvariables, right. So we want to\nactually change this from being\njust a normal variable to being\na hook because entrance fee does\nget updated, but it's not\ntriggering a rerender. So we\nactually want to change this to\nbeing what's called a use state\nhook. So you can read some more\non the documentation about the\nusing the state hook, it's kind\nof the same as doing let\nentrance fee, you know, equals\nblah, blah, blah, and setting it\nbelow. But it also will trigger\na rerender for us. And to do it,\nwe actually do const entrance\nfee, comma, set entrance fee\nequals use state zero import use\nstate from react as well. So\nbasically, entrance fee is going\nto be our value, right, so if we\ndo console dot log entrance fee,\nit's going to print out the\nentrance fee entrance fee is\ngoing to be the variable we call\nto get the entrance fee, the\nentrance fee is going to be the\nfunction we call to update or\nset that entrance fee. And\nwhatever that this entrance fee\nvariable is set, we trigger a\nrerender. From the front end, we\nhave the state or the actual\nvariable in the function to\nupdate it. And then in the use\nstate here, we just give it its\nstarting values we're saying\nentrance fee is going to start\nout as zero. So now that we know\nthat, let's go back down here,\nand instead of saying entrance\nfee equals this, we can say\nconst entrance fee from call\nequals away entrance fee.to\nstring and then we can say set\nentrance fee to this entrance\nfee from call. And now when we\nset the use state, we're going\nto trigger a rerender. So\nentrance fee will actually be\npopulated. Now if we go to our\nbrowser, do a little refresh\nhere. We can see that the\nentrance fee has indeed been re\nrendered here and we can\nactually see it here. We see the\nconsole dot log of zero here\neven though we're doing console\ndot log entrance fee because\nthis set entrance to function\nhasn't finished running it\nbasically. So we're just gonna\nget rid of that line will\nrefresh and Bada bing bada boom,\nthis huge number is kind of\ngross. We might even want to\nupdate it so that it looks a\nlittle bit nicer. So once again,\nwe can import ethers, ethers\nfrom ethers. And down below,\nwe'll do a little ethers dot\nutils dot format units. And\nwe'll do entrance fee from call\nand we'll do a comma and type\nin. And if we refresh on the\nfront end, now we can see,\nentrance fee is 0.1. So we can\neven label this we'll say\nentrance fee, blah, blah, blah.\nNow if we do a little refresh on\nthe front end, entrance fee 0.1\nE.\nFinally, we have the entrance\nfee, and now uses finally on our\nfunction to enter the lottery.\nSo let's finally uncomment this\nout. And for message value,\nwe're going to want to use this\nentrance fee. And I'm realizing\nit's actually better to store\nthis in its raw to string\nformat. So we're going to undo\nthis part that we just did.\nWe're going to add it down here.\nSo we're going to ethers, that\nformat units, entrance fee,\ncomma, ether, like that. So that\nlike that, and let's comment\nthis back out real quick. So\nthat at least in the UI, it\nshows up at 0.1. But on the back\nend, we're actually going to\nsave it as its raw, and have way\nvalue. So we're saying that we\nhave this entrance fee and what\nwe can do uncomment, this, we\ncan just grab this entrance fee,\nand plop it in here. So we need\nto make a button that's gonna do\nthat. Now again, we want to make\nour code that all this works,\neven if we're connected to a\nsupported chain, though. So\nbefore we even add this, right,\nif we switch from hard hat to\nlike, Aetherium main net, do a\nlittle refresh. We're getting\nkind of get an error here,\nbecause we're calling get\nentrance fee.to string on an\naddress that doesn't exist,\nright? So it's gonna get really\nconfused and be like, hey, what,\nwhat are you doing here? Let's\nadd a little button here so that\nwe can actually enter the\nraffle. Before we actually do\nthat, let's make sure that we\ncan only call the function so\nlong as there actually is a\nraffle address. So we'll do\nraffle address. And we'll do\nthis ternary operator once\nagain. So that only if this\nraffle address is valid, right?\nAnd it's not, no, we'll add all\nthis code here, right. So we'll\nsay if the raffle address\nexists, we're going to do some\nstuff. And for now, we can\nactually just copy paste this\nline, stick it in here. And then\notherwise, we'll say div.\nExcellence div, close it off.\nWe'll save reformat, great.\nWe'll say no raffle address,\ndetected. Now we'll just do all\nof our code in this section up\nhere. So we have this little div\nhere, which is great. Inside of\nthis div, let's add a button.\nButton button, we'll save it got\na little button here, we'll have\nit say, enter raffle. And we'll\nsay on click, well, we're going\nto do some JavaScript. So let's\ndo some JavaScript, we want to\ncall an async function async\nfunction. So I know the double\nbrackets is going to be\nconfusing, right. But these\nbrackets allow us to do\nJavaScript in our HTML, or JSX,\nor whatever. And these brackets\nrepresent this function, it's\ngoing to an async function. And\nwe're gonna say, await, enter\nraffle. And that's it. So let's\ngo back to the front end. Now we\nhave a little enter raffle\nfunction. If we do refresh,\nlet's just make sure our account\nis reset here. So we're gonna go\ndown to settings, advanced,\nreset accounts, yes. I hit ENTER\nraffle. metamath does indeed pop\nup. And we can go ahead and\nconfirm. Awesome, okay, we can\nnow enter our raffle. We're\ndoing incredibly well with this.\nAs you saw, we just got that pop\nup. And that was pretty much it,\nright? It's not very helpful for\nthe users who are following\nalong with this to look at this\nand go, Okay, did it go through?\nOr we did it fail, like, what,\nwhat just happened? So what we\nwant to do is create what's\ncalled notifications, right? We\nwant a little pop up saying,\nHey, you sent your transaction,\ngreat job, we're going to use a\nlibrary. Again, we're going to\nuse the web through UI Kit,\nwhich comes with some\nnotifications that we can go\nahead and use. So if you come to\nthis little interactive thing,\nwhich is right in their GitHub,\nthere's a whole bunch of stuff\nin here. And you can actually\nclick around and play with\ndifferent buttons and different\nthings. And you can actually go\nahead and even go to docs for\neach one of these. And you can\ngo show code. And you can\nliterally like copy paste code\ninto your project, like whatever\nyou want to do styling and\neverything for us. So back in\nour app dot j s, we're going to\nadd import, no to vacations\nprovider from web three UI kit\nand inside of the Morales\nprovider, but outside of the\ncomponents, we're gonna do\nnotification provider\nnotification provide Add it like\nthis. So it goes Morales\nprovider notification provider\ncomponent. So wrapping our\ncomponent in this notifications\nthing, and that's notification\nprovider not notifications. And\nthis is going to allow us to\nactually make notifications back\nin our lottery entrance. Back in\nour lottery entrance, we're\ngonna scroll up to the top,\nwe're going to import a hook\nthose notifications called us\nknow, to the occasion from web\nthree UI kit. And this use\nnotification gives us this thing\nback called a dispatch. So I'm\ngonna say const, dispatch,\nequals use notification. So use\nnotification returns this\ndispatch, and this dispatch is\nlike a little pop up that will\ngive us so down here, when we\ncall this enter raffle, we're\ngonna give it a little some\nparameters in here, we're gonna\nsay on success, these functions\ncome with onsuccess, they come\nwith onComplete, they come with\nan error, all this stuff. And\nwhen this function is\nsuccessful, we'll do handle\nsuccess, we'll create a new\nhandle success function that\nwill handle the success. And\nthis is Patrick from the future\ncoming back to show one\nadditional point. I know I\nmentioned it, but it is really\ngood to add this on error, colon\nerror console dot log error for\nany run contract functions, even\nthe reads, If any of your run\ncontract functions break, you\nwon't know. So definitely want\nto add this on error error\nconsole dot log error to all of\nyour run contract functions. So\nup here, before the return,\nwe'll create a new const handle\nsuccess. We'll say this is an\nasync function async function\nthat takes the transaction as\ninput parameters. And remember,\nyou can turn functions into\nconstant variables. And we'll\nsay await TX dot Wait, one, so\nwe'll wait for that transaction\nto go through. And then we'll\ncreate another function called\nhandle new notification, dx. And\nyou'll see why I'm doing it like\nthis in a minute. And we'll say\nconst and Linoone notification,\nthis is just going to be a\nsynchronous function because we\ndon't need it to be async. And\nwe're just going to call this\ndispatch, we're going to set up\nthis notification basically. So\nwe'll say notify, or dispatch,\nand then we'll add the\nparameters in here. So it takes\nan object as a parameter, we'll\nsay type info. Message, it's\ngoing to be transaction\ncomplete, the title is going to\nbe TX notification. Jose, Shawn,\nwe're going to say, top are and\nthen icon, we're going to say a\nlittle bell.\nAnd you can find all this stuff\nright in here, type icon\nposition, you can read all about\nthe different parameters you can\nkind of set this up with so\nhandle new notification handle\nsuccess. So we're saying, enter\nraffle once this transaction is\nsuccessful, call this handle\nsuccess function, which is going\nto call handle new notification.\nOkay. And you'll see why we\nsplit this into two instead of\njust having handle success. Also\ndo the dispatch. When we press\nour enter raffle button, we're\ngoing to call enter raffle is\nsuccessful, we're going to call\nhandle success. We're going to\nwait for that transaction to\nfinish Yes, it passes a\nparameter to our handle success\nfunction. And then all we're\ngoing to do is we're going to\ncall handle new notification.\nAnd we're going to dispatch\nwe're going to launch one of\nthese notifications. So back\nhere, let's hit enter raffle.\nmetamath pops up will confirm.\nAnd after it completes, we get\nthis wonderful transaction\nnotification transaction\ncomplete, right. So we've let\nthe user know, great job, you've\nsubmitted a transaction. Great\nwork. So this is great. We're\ngiving our users some helpful\npieces here. Now let's add a\nlittle bit more here so that the\nusers know what else is going on\nwith this lottery. But we need\nto display a little bit more\ndata, right, let's display how\nmany people are in this lottery.\nHow many people are in this\ngame. And we can do that. Of\ncourse, because we have a number\nplayers command. We also\nprobably want to get the recent\nwinner. And we can do that as\nwell. Up here, we're going to\ncopy this get entrance fee,\nwe're going to create another\none called Get num players. And\nthis is going to call go back to\nraffle dot soul. It's going to\ncall get number of players\nactually so let's just call it\ncall it the same thing. Get\nnumber of players and we're\ngoing to call and get number of\nplayers. And to store this\nvalue. Once again up at the top.\nWe're going to copy this line,\npaste it right and we'll do non\nplayers. And then we'll do set\nnum players. And then we'll copy\nthis line again. A recent winner\nso we'll do recent Winner.\nWinner will do Set, recent\nwinner, then we'll copy this\nagain, instead of getting number\nplayers will do get get recent\nwinner. So we'll call it get\nrecent winner get recent winner\nin our use effect, let's do more\nthan just get the entrance fee,\nlet's get everything. So we can\nsay const num players, from call\nequals, we'll do a weight, get\nnumber of players.to string, and\nthen we'll do set set num\nplayers do like that. So we'll\ndo set num players, num players\nfrom call. And then we'll also\ndo const recent winner from call\nthis is going to be await get\nrecent winner. And we might need\nto wrap this to string but I\nthink I don't think we need to.\nSo we'll do set recent winner\npaste that in here. So now we've\nhad a number of players, we've\nadded a recent winner. Let's\ncome back down here. We have an\nentrance fee. Let's go ahead and\ndo number of players. And we'll\nadd number of players or what\ndid we call it? Oh my god, we\ncalled setting employers twice\noops, it's called non players,\nscroll down players gonna be non\nplayers, and then we'll do\nrecent winner.\nAnd then we'll add in the recent\nwinner. Awesome. Okay, entrance\nfees 0.1 eath number of players\nto recent winner is nobody here.\nAnd if we go ahead and we enter\nthe raffle metamath pops up.\nWe'll go ahead and confirm. Once\na transaction goes through,\nwe'll get transaction complete.\nAnd if we do a refresh, we see\nthe number of players has\nupdated. But we had to refresh\nwhich is kind of annoying,\nright, let's enter the raffle\nagain, we'll go confirm\ntransaction complete. But this\ndidn't rerender. Right. So we\nwant to set something up so that\nwe automatically rerender. And\nguess what's going to do that\nthe handle success that we were\ntalking about before. That's\nright, all of this update UI\nstuff, we can actually pull out\nof the use effect. So we're\ngoing to copy it all deleted\nthere. And we're going to have\nit be its own standalone\nfunction like this. And then in\nour handle success, whenever\nthis successful transaction goes\nthrough, we're going to update\nthe UI, right? So handle success\nhandled new notification, and\nwe're going to update the white.\nSo now if we go back here, let's\nenter the lottery. Let's\nconfirm, we see we get the five\nand we get transaction\nNotification. Now we want to\ntest getting a recent winner\nhere. So what we can do,\nactually back in our hard hat\nproject is we want to create a\nnew script. And I actually\nalready created it for you,\nthat's going to mock the\nchanneling VRF. And that's going\nto mock being a keepers. So all\nthis is really doing is pretty\nmuch exactly what our tests were\ndoing. If you want to pause\nright now and look through this\nyourself, pause here and add\nthis mock off chain, which is\nboth keepers and VRF. Or you can\njust go to the GitHub repo here.\nJust go to the GitHub repo for\nLesson Nine. It's already in\nscripts go down to scripts\nMarkov chain, you can just copy\npaste it here. Because I want to\ntest that that recent winner. So\nin my hard hat, smart contract\nlottery, so we'll do yarn,\nhardhats run scripts, slash mock\noff chain dash test network\nlocal host, we're going to mock\nyou know, basically picking a\nwinner from an upkeep with\nRequest ID one, we're on a local\nnetwork. Okay, let's pretend the\nrecent winner was so and so. And\nwhat we can do is we can do a\nlittle refresh here, we can see\nwe have a winner updated. Boom.\nNow we're gonna clean up the UI.\nBut I want to talk about a\ncouple of things. Before we do\nthat, because we're almost done\nwith this section. Something I\nwant to make really clear\nbecause it confused me a little\nbit is that this onsuccess isn't\nchecking that the transaction\nhas a block confirmation, it's\njust checking to see that the\ntransaction was successfully\nsent to Metamask. So onsuccess\nchecks to see a transaction is\nsuccessfully sent the Metamask.\nAnd that's why up in that other\nfunction, we do TX dot wait one\nbecause that's the piece that\nactually waits for the\ntransaction to be confirmed.\nRight now we're using Morales to\nmake once we call that mocking\nscript, I had to refresh the\nbrowser to see the winner here,\nright and number of players\nobviously got reset to zero,\nwhich is great. That's not\nideal. Ideally, we want our UI\nto just automatically update\nwhen some event gets fired. In\nour raffle contract, we get this\nevent emitted. Instead of in our\ncode doing this await success\nhere. What we could do is we\ncould set up a portion to listen\nfor that event being emitted and\nupdate the front end\naccordingly. With that knowledge\nwe can also listen for the\nwinner event being emitted. We\ncould update our front end\ninstead of having to refresh\nit's your cue Yes, and you want\nto see if you can add to this\nright now, I highly recommend\nyou do. So\nwe've pretty much finished all\nthe functionality. And wow,\nyou've learned a ton in this\nlittle bit, right? We've learned\nabout use effects use Morales,\nall these hooks, all this stuff,\nand we've got a front end that\nvery nicely handles interacting\nwith our smart contract. The\nonly thing is, is it looks\nreally ugly. This is kind of\ngross. So let's make this look\nat least a little bit nicer.\nThere's two things to think\nabout when it comes to building\nthese front ends. There's\ncomponent libraries, like web\nthree UI Kit, which we're using,\nwhich gives us kind of like\ncomponents that give us, you\nknow, blocks of code, like this\nconnect button that are already\nformatted for us. And then\nthere's CSS libraries that\nactually will help us format the\nrest of our stuff here. So we're\nusing one of these component\nlibraries. We're also going to\nuse one of these formatting\nlibraries, and the library that\nwe're going to use is tailwind.\nAnd the reason that we're going\nto use tailwind CSS is because\nit's really popular. If you want\nto learn CSS, there's some\nwonderful resources that you can\nuse to learn CSS web three\nschools is one that I've used a\nton. So there's going to be a\nlink to that in the GitHub repo\nassociated with this course so\nthat you can make your websites\nlook pretty when formatting\nstuff but we are actually going\nto work with tailwind because\nit's going to make us doing CSS\nstuff a lot easier. Since we're\nusing tailwind with next Jas.\nThere's actually a wonderful\nlittle guide here for installing\ntailwind with next Jas. And\nwe're gonna go basically go\nahead and follow along with\nthis. This link is available in\nthe GitHub repo associated with\nthis course with this lesson. So\nwe've already created our\nproject we've seeded into our\nproject. Now we're gonna go\nahead and install tailwind npm\ninstall dash D instead, since\nwe're using yarn, we're going to\ndo yarn or pop this open, green\nnew yarn, add dash dash Dev,\npaste those three in tailwind\nCSS, post CSS and then\nautoprefixer and it's the three\nof these that are going to\nbasically make up tailwind with\nnext Jas. Once we have those\nwe're going to basically init\ntailwind and make a config file\nfor tailwind. So we're gonna do\nyarn tailwind CSS and it does p\nyarn tailwind CSS init dash P\nwill run that. This is going to\ngive us this post CSS dot config\ndot j s and this tailwind dot\nconfig dot j s and what we're\ngoing to want to do is literally\njust hit this copy button, and\nwe're going to update our\ntailwind.config.js tailwind Jas\nso that it says okay, all of\nthis stuff, anything in Pages\nanything with.js.ts dot JSX or\nTSX. And anything in these\ncomponents, anything in those\ntwo folders is going to be\nconsidered tailwind double. We\nwant to use tailwind on these\ntwo folders. Then we're going to\nadd the tailwind directives to\nour global CSS files. So if we\ngo back, we're going to styles\nGlobal's we're going to\noverwrite everything in here\nwith ADD tailwind base and add\ntailwind components at tailwind\nutilities. And this makes it so\nthat our global CSS file uses\ntailwind. Now, you'll see like\nunknown rule at tailwind, what\nwe can do is we can go to\ncomponents, what we can do is we\ncan look up this post CSS\nlanguage support extension,\npaste that in here, boom, let's\ngo ahead and install this. And\nnow we get those little\nunderscores to go away, which is\nreally nice. Now, per usual, we\ncan just do NPM, run Dev and\nstart adding tailwind to our\ndivs. Now what tailwind does is\nallows us in our divs to set\neverything as a class name, and\nthen just set some real\nminimalistic text in these class\nnames here. So let's look at our\nsmart contract lottery here.\nWe've just tailwind did it. So\nit already has been updated a\nlittle bit. Let's update our\nheader here. Well, let's see. We\nwant to give our header a border\nfrom the tailwind. We'll do a\nquick search. Look a border we\ncan see all this border stuff\nlike border width border this\nborder that say we want a border\non the bottom, we can see we can\nget a border on the bottom with\nsomething like this. Let's do\nborder on the bottom with a\nwidth of two pixels. We just do\nborder b two. So I'm going to\ncopy border B to do border b\ntwo, I'm going to save it and\nwhat we need to do for our CSS\nand everything to take effect.\nGo ahead and kill the front end.\nAnd then we'll rerun it with\nyarn Dev. Go back to our front\nend now. Give it a little\nrefresh and Okay, cool. Now we\nhave a little border here. So\nwe're starting to add some stuff\nand it's just not a whole lot\nyet. Oh, and then we can also\nadd tailwind to me go to\nExtensions. We can also look up\ntailwind. There's a tailwind\nextension here. So I'm just\ngoing to add a whole bunch of\nstuff in here. We're gonna do\nflex, flex row.\nWe're gonna make our\ndecentralized lottery and h one\nwhich stands for like header\none. Do class name equals, we'll\ndo the y dash force. We'll give\nit padding the top of form the X\npadding on the x axis of four.\nWe'll make it bold font and\nwe'll make the text three XL\nsize. So we'll make everything\nbigger. Cool. Then we'll do one\nmore, we'll wrap our Connect\nbutton in a div. So we'll say\ndiv class name equals, and we'll\ngive it a an automatic left\nmargin. We'll do py too. So some\ny padding, some x padding. See\nwhat we have done. Okay. Now if\nwe zoom out a little bit, we can\nsee, if we close this too, we\ncan see now our Connect button\nis on the side here. And they're\nkind of separated like that. And\nI think that looks nice. So\nwe're going to keep that now\nwe're going to go back to our\nlottery entrance, we're going to\nchange this up just a hair,\nwe'll say div class name equals\nP. Five, we'll make our button\nlook really nice. We'll say\nclass name equals background\nblue 500. When we hover over, it\nwill say, background blue 700.\nSo now if I just say that, and\nwhen we hover over it, it looks\na little different, that's\nreally nice. We'll say text is\nwhite, we'll say the font is\nbold, we'll give it some white\npadding, I'll give it some x\npadding, we'll have the bunbee\nrounded, and we'll give it a\nmargin left auto, now looks a\nlot better, right? That's a lot\nprettier. We're just going to be\ndoing some basic CSS here just\nto make it look a little bit\nnicer, right, but just that by\nitself already made this lottery\nbutton look a lot cooler. Now\nsome functionality that we\ndidn't add here. So we need to\nadd a disabled, kind of like\nwhat we did before. And in our\nenter a raffle it comes with,\nlike I said, is loading and it\nis fetching. None of our\ntransaction is loading or\nfetching, we'll just make this\ndisabled. So we'll say is\nloading or is fetching this will\nbe disabled. Right? Now, if we\ngo back to the front, we hit\nenter raffle, go ahead and hit\nconfirm, we can add a CSS for\nit. But when a transaction is\nloading, they will not be able\nto click that button anymore,\nwhich that's something else\npretty that we want to do\nspeaking of is loading and is\nfetching. When it's loading or\nfetching, we probably want it to\nhave that like little spinny\nthing right when we hit it right\nnow. And mash is pops up. And we\ncan confirm but it would be cool\nif it had like a little spinny\nthing here, right. So you can\nusually just Google like how to\nadd spinny thing or stuff like\nthat, and you'll get something.\nBut you can again, you can just\ncopy paste this from my code,\nI'm going to show you what I\nended up doing for this section.\nAnd we're gonna say is, if is\nloading or is fetching. And\nwe're going to use that ternary\noperator all the time, then in\nhere, we're going to do a little\ndiv. And otherwise, we're going\nto do a different div for\nloading or for fetching, we're\ngoing to add like a little\nspinny thing in here. So we're\ngoing to add class name equals.\nIf we're loading, we're going to\nadd this little spinny thing,\nwhich I'll show you what it\nlooks like in a second. And if\nwe're not loading, we're just\ngonna do enter, raffle like\nthat. So we'll come back to the\nfront end, see answer raffle,\nwe'll click the button. Now we\nget this cute little spinny\nthing, confirm transaction goes\nthrough. So anything goes away.\nNice. Well, let's put these on\ndifferent lines. So we'll just\ndo\nso those will be on different\nlines. Now boom, entrance fee,\nnumber players recent winner,\nonce a lottery now will confirm\ntransaction complete number of\nplayers has gone up and we have\ndone it. Now this looks a lot\nnicer. It's clearly not perfect,\nbut it's much easier to read\nthan kind of that lump that we\nhad before. And the reason I\nwanted to show you this was\nreally just kind of giving you\nyour footholds for making these\nlook a little bit nicer. This\ndefinitely isn't a CSS course.\nOh, wow. Okay, this is\nphenomenal. We have an app that\nwe really like. And we're like,\nyou know what, we want to deploy\nthis bad, Larry, let's talk\nabout how we can deploy this,\nthis section is going to be\noptional, okay, because I'm\ngoing to deploy something to\nrank B and deploying to test\nsets can take a long time. So\nwe're going to deploy our\ncontracts to rink B. And then\nwe're going to deploy our\nwebsite to a hosting provider.\nSo first, let's talk about\nhosting providers for a quick\nsecond, if we want to host our\nbeautiful website that we just\ncreated, there are ways to\ndeploy it using things like for\ncell or Google Cloud, or AWS.\nNettle. Phi is another really\npopular one there, all these\ndifferent places that we can\ndeploy our application. Now, the\nthing about these though, is\nthat these are all centralized\ndeployment places, having a\ncentralized deployment\napplication can still be\nincredibly important, right? If\nwe look at ether scan for a\nsecond ether scan is a\ncentralized application right at\nthe end of the day, but it's\nstill one that we've been using\na lot. However, if we want to\nhave a front end that's\ndecentralized. Well, that's a\nlittle bit harder. The more\nimportant thing for us is that\nour back end, our smart\ncontracts are decentralized,\nright? That's the most important\nthing because that will give\nusers the ability to interact\nwith our logic in a\ndecentralized way. But maybe we\nalso want our front ends\ndecentralized. Now at some point\nwe will still use a centralized\nservice Like VSL to deploy an\napplication, and I'll show you\nwhy when we get there, there's\nsome features that right now,\nthey're really just hard to do\nwithout like a really solid\ncentralized back end. What's\nimportant to keep in mind is\nthat our back end, the logic of\nour contract is on a\ndecentralized blockchain. So\neven if we host the front end on\na centralized hosting provider,\nusing some type of centralized\ndatabase to make the front end\neasier to work with, the logic\nof the application is\ndecentralized. And that's the\nmost important piece. So I'm\ngoing to give you some tools\nlater on, and how to introduce\nmore of these feature richness.\nIf you choose to do so doing so\nwill add a centralized component\non your front end. And it's\nsomething to keep in mind,\ndepending on how you want your\narchitecture. So when doing that\njust be absolutely sure that the\nsmart contracts on the back end\nare deployed are decentralized\non one of these blockchains.\nNow, we'll learn about some of\nthose centralized ways to do\nthat in a later section. For\nnow, let's learn how to deploy\nthis front end in a more\ndecentralized way.\nAnd the tool that we're going to\nuse is a tool called IPFS. Now,\nlet me explain a little bit\nabout how IPFS works. It's this\ndistributed decentralized data\nstructure. That's not exactly a\nblockchain. But it's similar to\na blockchain. There's no mining,\nthough. But there is pinning\ndata, you can add data to this.\nSo let me explain how this\nactually works. And you can read\nhow this works on the site,\nthere's going to be a link to\nthis and the GitHub repo\nassociated with this course. But\nwe give you my basic take on it.\nSo we have our code, or our\nfile, or whatever it is, right,\nwe have some piece of data. Now\nas we know, when you really have\nanything, you can hash that\nthing, you can hash that data,\nright, so you can get a unique\noutput. So and that's actually\nthe first thing that IPFS does.\nIt hashes our data to get a\nunique hash, that only points to\nthat data. Yes, a massive code\nfile a ton of text. Yes, you can\nencode all of that into a single\nhash function, your IPFS node\ndoes this hashing for you. And\nevery single IPFS node on the\nplanet has the exact same\nhashing function, kind of like a\nblockchain, right, they all kind\nof run this same spec, the same\nspecification. So we can hash\nour data on our IPFS node and\nget this unique output. What we\ncan do then is we can pin that\ndata or pin that code, or pin\nthat file or pin that whatever,\nto our node, we have some data,\nwe get a unique hash of it, all\nit does is host this data and\nhave these hashes. That's it,\nour node is connected to a\nnetwork of other IPFS nodes. So\nthere's a massive network of\npeople running IPFS nodes,\nthey're incredibly lightweight,\nway lighter weight than any\nother blockchain node. And they\nall talk to each other. So if I\nasked the network, hey, I want\nto get this hash. All these\nnodes would talk to each other.\nAnd eventually they'd reach up\nat our node saying, Oh, I found\na node that has that hash.\nHere's the file associated with\nit. Now, you might be thinking,\nOkay, well, that's kind of\ncentralized, because we have the\ndata on one node here, right?\nWell, you're right, well, here's\nthe thing, what other nodes can\ndo is they can say, oh, that\ndata looks really cool, I want\nto have that persist, what they\ncan do is they can pin your\nhash, they can pin your data,\nand they'll get a copy of your\ndata on their node. And you can\nkeep doing this. And so you\neasily allow an entire network\nto easily replicate any code or\nany data in a decentralized\nsense. And they're incredibly\neasy to spin up. And they're\nincredibly easy to work with\nsomething about IPFS, that makes\nit drastically different than a\nblockchain is the can't do smart\ncontract, there's no execution,\nit can really only store it's\njust decentralized storage that\nIPFS can do. Now, the issue here\nis that in order for our data to\nreally be decentralized, another\nnode does need to pin our data,\nright? Because if we're the only\nIPFS node that's got this hash,\nit's kind of centralized on our\nnode, if our node goes down,\nthat data is gone, and the\nnetwork won't be able to access\nthat data anymore. So we'll talk\nabout strategies in the future\nabout having other people pin\nyour data. But for now, this is\na way we can host data, we can\nsend code and have it be in a\ndecentralized context. So unlike\na blockchain, where every single\nnode in a blockchain is going to\nhave a copy of the entire\nblockchain IPFS nodes get to\noptionally choose which data\nthey want to pin, and they can't\ndo any execution. So you could\nhave an IPFS node, half a\nmegabyte, and you could have an\nIPFS node, that several\nterabytes, it's up to the node\noperators, how much data and\nwhat data they want to pin. Now\nthat we know about IPFS.\nLet's actually deploy our\nwonderful application to IPFS so\nthat anybody can use it and\nanybody can connect to it. So\nlong as our node is up. Are you\nready? Okay, get excited here.\nWe're first going to do this\nkind of the Manuel Wait, because\nI'm going to show you how to\ninstall IPFS. And work with\nIPFS. Hit get started, there's a\nnumber of ways to install and\nwork with IPFS, you can get it\nwith a desktop application, get\na command line. And then we can\nalso add IPFS to our browser\nusing something like brave or I\nthink Firefox to some this IPFS\nrouter is automatically built\nit. But if using something like\nChrome, you might have to add a\nlittle companion, because what\nwe want to do is we can actually\nuse those little hashes as URLs\nfor websites, right, and so we\nwant to be able to put that URL\nin our browser and connect to\nthat node or that piece of code.\nSo what we're gonna do is we're\ngonna have you install the IPFS\ndesktop, so you're gonna hit\nthat. And when you do that, you\nshould be able to open up IPFS.\nNow, if you install it, you\nmight get this little guy, this\nlittle box here in your upper\nsection. Otherwise, you might be\nable to open it up with with\nIPFS desktop and see it as a\nregular desktop app. Well, once\nyou install it, you might see\nIPFS is running, you can restart\nstop, you can do all this stuff,\nwe're gonna go to the file\nsection, and we're gonna get a\nlittle pop up that looks like\nthis. Now, I've got a ton of\nstuff in here, because I've been\nusing IPFS for some time in\nhere, right now, you might have\nno data. So let's just go ahead\nand import some file. And maybe\nfor now we'll just import, you\nknow, our next dot config dot j\ns, right? It doesn't matter,\njust import something. And now\nin here, we have this next dot\nconfig dot j s or whatever file\nyou import it. So what we can do\nwith this is we can actually\ncopy the CID. And we can view\nthis in our browser. So if we do\nIPFS dot dot slash slash, and we\npaste it in, we hit enter, we\ncan give our browser access to\nactually rendering IPFS URLs. If\nusing brave, you can just do use\na brave local IPFS node or let's\ngo ahead and download this IPFS\ncompanion. So we'll get IPFS\ncompanion, there's a Firefox\ninstall for Chrome brave, blah,\nblah, blah. So I'm gonna go to\nthe Chrome store to get it for\nbrave, we're just going to hit\nAdd to brave add extension. But\nonce you download it, you'll get\nsomething that looks like this.\nEven on a little browser\ncompanion, we can see like\nimport, we can see stuff about\nour node, if we click our node,\nwe will see a very similar\nsetup. But now that we have the\ncompanion in our browser, we can\ncopy that Cid that hash. Now\nbrave, we can just do use brave\nlocal IPFS node, and will\nautomatically get dropped into\nthe file. Now, if IPFS companion\ndoesn't work for you, and you\ncan't see the URL inside of\nsomething like Google Chrome or\nsome other browser, what you can\ndo is you can use something\ncalled the IPFS gateway. Now\nusing a gateway, you're not\nactually directly requesting the\ndata through IPFS requesting the\ndata through another server,\nwhich is requesting it through\nIPFS. But if you are having some\ntrouble accessing these files,\nyou can use the gateway. So what\nyou'll do is we'll do HTTPS,\nslash IPFS, slash and then paste\nthe hash code there. And you'll\nbe able to see your file. Now if\nyou do it like this, you won't\neven need IPFS companion at all.\nSo we're going to deploy our\nwebsite to IPFS. So that anybody\nelse who wants to pin this can,\nand we will now have the ability\nto have an incorruptible, in\nunputdownable website, which is\njust awesome. We're going to\nlearn how to do this the wrong\nway first, and then we're going\nto use a tool that's going to\nmake it a lot easier for us.\nOkay, so first, let's go to our\nwebsite here. And, and if you\nwant to deploy to rink B, go\nahead and feel free. Just\nremember to make sure that your\ncontract addresses file updates\naccordingly. Okay. Now, next,\nJas has the ability to create\nstatic websites. And that's\ngoing to be an important term to\nknow we're going to make a\nstatic website. At the moment,\nwe don't want our website to be\ntangled with any server stuff.\nAnd the reason we we don't want\nit to be tangled with any server\nstuff is because if our website\nruns with server stuff, and we\ndeploy it to IPFS, will IPFS\ndoesn't have the ability to run\nany code, it just hosts code. If\nour front end has any server\nstuff, it won't work. Now, in\nits current state IPFS can't\ncome to our project and know\nwhat to do, right, it doesn't\nknow how to do yarn dev can't do\nyarn Dev. So we need to put all\nof our code into its static\nequivalents. So to do that,\nwe're gonna do yarn build. And\nif again, if we look at our\npackage dot JSON, it comes with\nthis build, which just runs next\nbuild. And running this build\ncommand is going to build our\ncode, what's called like a\nproduction build, creating an\noptimized production build here.\nAnd we'll get something that\nlooks like this. And we can see\nthis point down here. Static,\nautomatically rendered as static\nHTML uses no initial props.\nThere's some server based\napplications that next Jas comes\nwith that if we use them. Our\nstatic build won't work. And\nactually, you'll see when we run\nyarn, next export, it'll fail if\nyou have any that non static\nstuff. So let's Go ahead and try\nyarn next export. And let's see\nif it fails, it didn't fail, we\nnow have a new folder called\nout. And this is our folder,\nthat's just pure static code and\nthat we can use on IPFS. In a\nlater section, I'll show you\nwhat it looks like when you\ndon't use some of those static\nthings. Both Morales and next\nJas have the optionality to not\nhave static code. So we'll just\nwant to keep that in mind. So\nnow that we have this out\nfolder, we can go back to IPFS.\nAnd we can import a folder,\nwe're going to import that whole\nfolder in here. So hit that hit\nthat import button and go to the\nfolder. Where that is mine is in\nnext year smart contract lottery\nout. So now we're going to\nupload this to our IPFS node.\nOnce it's done, we'll get this\nlittle checkmark. And we can go\nthrough IPFS files and see our\noutput here. What we can do,\nlet's go ahead and pin this to\nour node, we'll pin it to our\nlocal node here. And now once\nit's up, we can copy the CID and\ngo back to brave or chrome or\nwhatever. You type in IPFS colon\nslash slash, paste that in\nthere. And we immediately get\ndropped into our smart contract\nlottery in a browser. And we see\nhi from lottery, no raffle\naddress detected, because right\nnow the way I set mine up Was it\nonly works with, you know, our\nlocal hard hats, let's connect\nour Metamask we'll hit the\nconnect button, connect, and\nvoila, we are right back where\nwe were. But with our data\nstored in IPFS, we can enter\nraffle as long as our node is\nrunning a confirm. And we see\nexactly what we get in our local\nbrowsers. So this is phenomenal.\nNow that I've shown you how to\ndo this, this is the manual way\nof adding our code to IPFS. Let\nme show you the easier way of\nadding your code to IPFS we're\ngonna go to this site called\nfleek HQ. Go to fleek.co. And to\nget to it, I'm going to turn my\nmy IPFS companion note off\nbecause of some of the oddities\nwith working with brave but now\nwe're here@flickr.co fleek.co\nmakes it easy to to deploy\nwebsites and apps to the new\nopen web permissionless,\ntrustless, censorship resistant,\netc. I like to think about it as\nkind of like an auto deployment\nfor our websites. And\nadditionally, it does some\nthings to help out with that\nproblem. I was talking about how\nwe want to get other nodes to\npin our data. So it helps us out\nwith that. So let me show you\nwhat it does. So let's go ahead,\nwe'll sign up. And why don't you\nknow, you can sign in with\nGitHub. So if you have your\nGitHub, definitely want to sign\nin with GitHub here. Because\nwe're going to use GitHub to\nactually help us automatically\ndeploy. So we'll authorize fleet\nto work with our GitHub. You've\nauthorized your GitHub, let's go\nahead and add a new site or add\nnew site. Now we can use fleet\nto just automatically deploy\nwebsites, once we push them to\nour GitHub. So we can come to\nour GitHub once again. And click\nthe little plus button, we'll do\na new repository. We'll call\nthis next Jas smart contract,\nlottery Free Code Camp. We'll\nmake it public create the\nrepository. Let's push all this\ncode to GitHub. We did it once\nbefore, let's do it again. We'll\ndo git add, we'll do a little\ndot, then we'll do git commit\nminus m, say like initial commit\nor whatever. We'll do git\nremote, add origin, and then\nwe'll grab that URL, paste it\nright here. And then we'll just\ndo git push origin, main. Now we\ngo back to our application we\nsee it in here we can do is back\nin our fleek. We can connect\nwith GitHub, we're going to say\nonly select repositories, we're\nonly going to do this next js\napplication, this next JS get\nwe're going to install an\nAuthorize. Authorize Great. So\nnow we're going to pick a repo\nwe've picked a repo, we're going\nto choose this application. And\nwe're going to use IPFS as our\nhosting service. And now we're\ngoing to add our information in\nhere. So we're going to use the\nmain branch. Here's the repo.\nThere's gonna be our framework\nis gonna be next Jas. So we're\ndo fleek next. Jas, we're using\nyarn. So we're gonna do yarn\ninstall, and yarn, run build,\nand then yarn run export. If you\nwant you could also just do\nyarn, yarn build and yarn run\nexport, those are gonna be the\nsame thing. Publish directory is\ngoing to be out and then we just\nhit Deploy site, yarn, next\nexport as the last command, not\nyarn, run, export. The accident\ndid the wrong one, you go over\ndeploys. Click on this, go to\ndeploy settings and then Edit\nSettings and then just change it\nto yarn. Next, export save. Then\nwe'll go back to deploys and\ntrigger deploy, if you did the\nwrong one that was just a\nlearning opportunity for you to\nlearn where the settings are\nafter you deploy. And what this\nis going to do is we're going to\ndo to deploy, it's going to run\nthose three commands yarn build,\nyarn export, it's going to run\neverything. And then it's going\nto deploy a site for us both on\nIPFS. And it's going to give a\nregular URL that we can use for\nnormies, if you will. And while\nthis deploys, you'll actually\nsee down here we have this thing\ncalled file coin di D in deal\nproposal, Cid IPFS. Like I said,\nwe need other people to host our\nnode. File coin is actually a\nblockchain that helps you pin\nyour data and uses decentralized\nstorage to do so. And fleek\nhelps you create those deals and\nhelps you pin your data with\nthis filecoin Blockchain\nfilecoin is one definitely to\ntake a look at. And then after a\nwhile, you might have to wait a\nlittle bit. And once it's done,\nget a little deployed website,\nwe go back to hosting, we click\non our thing we can see we have\nlike a little website here. And\nif we click it, we get a normal\nURL for connecting and\ninteracting with our website,\nyou might even see this little\nIPFS thing which will connect to\nyour IPFS node. And\nadditionally, we scroll down in\nhere we can see current IPFS\nhash, so we can just stick that\nin, um, and Bada bing, we have\nan IP Fs deployed application.\nNow what's cool is let's say I\nmake some changes, you know,\nI'll go to lottery entrance. And\nI'll do, I'll scroll on the\nbottom to recent winner, I'll\nmake a new div. What a close the\ndiv off, we'll save git add dot\nGit commit minus m, add a dot\ngit push origin mean.\nIn our GitHub, we'll do a little\nrefresh, add a.as, the most\nrecently added one, go back over\nto fleek. Go back to hosting\nclick on the section that we\njust made go to deploys, and\nyou'll see there's a new deploy\ngoing through. So it\nautomatically deploys your new\nsite, it'll automatically create\na new IPFS hash for your new\ndata. However, it'll still be on\nthis holy bird, you know, or\nwhatever your URL is here. And\nthis is kind of just a router\nfor IPSs. So that people without\nIPFS connected can also connect\nto this still. And now that my\napplication is done, pushing\nautomatically, with fleek, we\ncan see what's up being post in\nmy application here. Now, like I\nsaid, filecoin isn't going to be\na technology, we're gonna go too\ndeep into introduce ourselves.\nBut like I was just saying IPFS\ndoes have this limitation. It\ndoesn't have data persistence,\nyou have to have people pin your\ndata, in order for it to stay\ndistributed, and stay\ndecentralized. File coin is a\nblockchain dedicated to keeping\nthis data, both decentralized\nand persistent. And to give us a\nbetter understanding of\nfilecoin. We actually have Ali\nhere to give us an overview.\nTake it away, Ali. Hello, I'm\nAli, and I'm a developer\nadvocate here at the filecoin\nFoundation, which works closely\nwith protocol labs and IPFS.\nJust a quick note, protocol Labs\nis our r&d arm. So it works on\ncreating tooling and technology\nfor a truly open and democratic\ninternet and web. And it's\nbuilding out some of the\nfoundational tooling like IPFS,\nand filecoin, which are two\nseparate projects to enable\nthat. And hopefully, today,\nbecause you're here to build, I\nwant to impart on you the\nknowledge and tools you need to\nget started with both of those\nprojects. So as anyone that's\nkind of played around in this\necosystem, or tech, in general\nwould know, data is an\nabsolutely essential part of our\ndaily lives. And not\nsurprisingly, it's also a super\nfast growing field in web three,\nand one, that's fundamental one,\nand it's one of the fundamental\nnecessities of the decentralized\nweb stack as well. So the\ncurrent model of centralization\nthat's grown up, and basically\nout of a lack of an identity\nlayer on the internet, is one\nwhere only a few big companies\noffer storage, and only a few\nentities hold our data for\nauthorization purposes. And this\nis an obvious problem, both in\nterms of being an attack vector\nfor data mining, so without\ndata, getting leaked through\ninsecure service to third\nparties, and also creating a\ndata resilience problem. So\nwhole services go down every\ntime one of these companies\nservers does and we've\ndefinitely seen that. So it\nreally leads to the question,\nwhy aren't we designing the web\nfor the autonomy and resilience\nwe need in the first place? And\nhow do we store data in a way\nthat aligns with both the\noriginal vision of the internet\nas an open place for knowledge\nsharing and collaboration, and,\nand, and in a way that agrees\nwith the web three mission as\nwell. So these are the core\nproblems we're solving with IPFS\nand file coin. Firstly, IPFS is\na distributed system for storing\nand accessing files, folders,\nwebsites, applications and data.\nAnd it's designed to be able to\nwork even when the networks\nbetween planets, so it's a\ndistributed by design, it has no\ncentral authority servers, and\nit's designed to be offline\nfirst for resilience. And it's\nnot just a fancy name for\nanother peer to peer network\neither. Because the nice thing\nabout the IPFS protocol is the\nstandard it uses for addressing\ncontent on the network. IPFS is\nunique because rather than using\ntraditional methods we might be\nwith familiar with from the web,\nlike those are location parts\nthat point to a particular HTTP\naddress where your content may\nor may not be available and\nstored. IPFS uses content\naddressing so content addressing\nmeans that each piece of data,\neach meme or even full file\nsystem has its own unique\ncryptographically verifiable\nfingerprint, you might call it.\nSo if you change even one pixel\nof your main image, for example,\nthen the content ID or Cid\nassociated with it also changes.\nSo importantly, this hash\nfunction is also upgradeable. So\nlet's say quantum computing\nbreaks out current secure hash\nalgorithms, we can upgrade the\nstandard we use. And it means\nyou will always get the same\ncontent returned by an IPFS. Cid\nas what you expect. So this is\nfundamentally important, because\nwhen you don't have to care\nwhere the data comes from, you\nopen up the web to massively\ndistributed storage systems.\nHello, decentralization. So now\nwe have a really important and\nvaluable protocol that enables\ndistribution at scale. And it\nprovides verifiability of data\nto serve and retrieve content on\nthe web. And not just for web\nthree, either, but also for all\nweb, or tech use cases. The\nproblem is, and it's one that\nthe early internet also faced,\nwho's going to ensure the\npersistence and permanence of\nall this data on the network. So\nunless you're running your own\nnodes 24/7, or your content is\nreally popular or other nodes\ndecide to altruistically store\nyour data. Because I think it's\nimportant, then this data can\nbecome unreliable because\nthey're no longer actively\nhosted on any nodes on the\nnetwork's. So to avoid this, you\ncould also turn to a pinning\nservice that you pay to keep a\ncopy of your content around.\nUnfortunately, the problem with\nthis though, is that we're\nheading back towards\ncentralization of data. And\nwe're creating new data silos\nwith this solution and losing\nthe trust lessness and\nresilience we're looking for.\nAnd these one a bad solution\nprior to file coin, and it's why\nthey sprung up initially, but we\nwant a better solution. So this\nis where file coin comes in. So\nfar coins architecture, then\ndesigned to leverage a crypto\neconomic incentive model\ntogether with cryptographic\nproofs in order to ensure data\nis stored persistently, highly\nreliably and verifiably. It uses\nthese cryptographic proofs to\nalso enable smart contract based\npermanence. And that means that\nit's designed to be as permanent\nas you, the data owner want it\nto be. It's your data, so it's\nyour choice. It's also designed\nto enable internet scale\ncapacity. It's currently the\nlargest distributed storage\nnetwork in the world with over\n18 million terabytes of capacity\navailable, which is apparently\nabout 135 copies of the European\nUnion's nuclear program, CERN's\ndata which, which is kind of a\nfun fact. It's also file coins\nalso designed to be and stay\nhyper competitive on pricing due\nto its market economics. And\nthis comes down to storage\ndeals. So to make this network\nfeasible, filecoin uses storage\ndeals. And these include two\nmain consensus mechanisms that\nensure both rewards for good\nactors in the system, and\npenalties for bad actors. So\nwhen you make a deal with one or\nmore storage providers to store\nyour important data, the\nprovider generates a proof of\nreplication. So this proves that\nthe storage provider is storing\na unique copy of your original\ndata over time to make sure that\nthis data is persisted. These\nstorage providers must prove\nthat they still have random\nsubsets of this client data and\nthey create proof of space\ntimes. And these proof this\nproof of space time is something\nthat is stored on the\nblockchain. So anyone at any\ntime can also check that this is\ntrue. And it also makes up the\nmechanism by which miners are\nrewarded or penalized because\nyou have to stake Phil on the\nnetwork in order to become a\nstorage provider. So when a\nstorage deal comes to an end, or\nuser can you can opt to let it\nexpire or renew the deal. If you\nopt for renewal, then the\nproviders again bid to host this\ncontent. So this creates an\nefficient market for pricing a\ncontinual efficient market for\npricing as well. It can even go\nnegative. So the storage\nprovider can even pay you to\nstore your data if it's an\nimportant data set due to some\nof the block rewards that are\nbeing offered by the filecoin\nFoundation as well. So these\nmechanisms are what built in not\njust data permanence, but data\ntimeframes, sovereignty, too so\nit's your data, it's your\nchoice. You can decide you want\nto store your data for five\nminutes or 500 years. It's also\nyour choice over how much\nresilience you want to have that\ndata so or how many copies of\nthat data you want to have and\nwith what store to providers. So\nthis allows you to comply with\nregulations like GDPR. And\nthere's a growing number of\ntools in the ecosystem like\nmurmurations bit screen that are\nallowing for you to do this\nfiltering. But it also gives you\nsome guarantees that your data,\nyou know, if one storage\nprovided goes down, you know,\nsurely not 10 of them are going\nto go down. So that's a\nguarantee for your resilience\nthere as well.\nAnd this is why IPFS and\nfilecoin are great complements\nof each other. So IPF s gives\nyou that benefit of content\naddressing file coin gives you\npersistent guarantees that even\nif your computer or your\nfavorite IPFS pinning service\nwhere to go away, the content\npersists. Just as a quick final\nnote on these concepts as well,\nIPFS and file coin is separate\nprojects, as I mentioned. So\nIPFS is a protocol much like\nHTTP, whereas file coin is a\nblockchain. So IPFS is also\nstorage layer agnostic, you can\ncombine it with the storage\nlayer of your choice. And while\nfile coin was specifically\ndesigned to complement it, and\nwe think is a great choice, you\ncan also store your IPFS data in\nthe cloud or an other storage\nsolutions as well. So hopefully,\nyou've got a good baseline for\nwhy you'd want to use IPFS, and\nfilecoin. And for those\nengineers out there that like a\nchallenge, and are interested in\nworking on the base protocols\nand code of IPFS, and file coin,\nwhich isn't always easy for the\naverage user, I'd encourage you\nto go and take a look at the\nproject docs and get hubs and\nsome of the associated grants\navailable for extensions to\nthese open source projects. And\nthis is a great site here if you\nwant to get more information\ninto the nitty gritty and really\ndig into the code behind IPFS\nand filecoin. And extend some of\nthat. For those of you that just\nwant to build out of the box\nthough. And this is definitely a\ncamp that I often fall into. I\nwant to talk about some of the\ndev tooling and storage helpers\nthat make it easy for you to get\nstarted. So firstly, Flake Flake\nis one of my favorite IPFS dev\ntools. And projects Flake is a\nCI CD tool that you can use to\ndeploy your apps for free as\nsimply as easy as you would with\nsome of the web tools you might\nweb to tools you might be\nfamiliar with like Netlify\noversell. The big difference,\nthough, is fleek uses IPFS to\nhost your site or app. And it\neven offers an AES domain\nrouting on their platform. So if\nyou're deploying a front end\napp, I would encourage you to\nuse fleek to make it more\ndistributed instead of some of\nthe traditional web two tools.\nIt's just as easy, I promise. So\nanother one of my favorite tools\nis NFT storage, storing your NFT\nmetadata immutably and\npersistently, as you already\nprobably know, is integral to\nkeeping the main value\nproposition of NF Ts, then on\nfungibility. So if you're not\nstoring this data on chain,\nwhich obviously can become\npretty financially unviable for\nlarge files, then this is\nexactly where NF T storage comes\nin. So it was specifically\ncreated as a public good to\narchive and persist NF T data.\nSo it's free. And it takes care\nof the complexity around firstly\ncreating an IPFS Cid for this\nmetadata, and then making\nautomatic deals with filecoin\nstorage providers. So it does\nthis with at least eight storage\nproviders. So eight times\nredundancy and it does it with a\nmultigenerational timeframe. So\nit automatically renews those\ndeals. Because it's a public\ngood, it's all free as well. And\nit's also super easy to use,\nbecause you just need because\nit's a JavaScript service. So\nyou just need to say import that\nas an NPM package or JavaScript\nlibrary and then call the API\nand NFT dot storage takes care\nof the rest. For data that isn't\nNF T metadata as well, we built\nweb three dot storage, web three\nstorage is designed to give you\nthose same web two benefits. So\nsimilar to NF T dot storage,\nmake it super easy for you to\nuse. And it's got JavaScript and\ngo client libraries.\nWhile giving you you know the\npower of IPFS and filecoin of\ndecentralized storage and IPFS\ncontent addressing so it's got\none terabyte after terabyte, one\nterabyte of free storage with\nthat. So try that out if you're\nnot just like trying to store\nand obtain metadata. The next\ntool is a bit more advanced.\nIt's called textil Palghat gate,\nand it's for you know, more\nadvanced developers or those\nlooking for more flexibility to\ninteract with IPFS live peer to\npeer and filecoin. It's a Docker\ncontainer wrapped around\nfilecoin and IPFS nodes. And it\ngives you a lot of options to\nconfigure it's a minor\nselections and extend\nfunctionality. It also offers\nsome bridges to several layer\nones which might be of interest\nto developers out there. Another\none here and I'll preface this\nby saying you need an invite to\nthis is ESRI tech. So it's for\npeople looking to store really\nmeaningful public data. It's\ncurrently in alpha mode and like\nI said, it requires an invite\nbecause it's been built as a\npublic goods specifically to\nstore important information. If\nyou are I do have Use case\naround this slide, please feel\nfree to reach out to us on this\nproject. Other final tool I'll\nmention is orbit dB. So many\npeople coming to the web three\nspace from web two are often\nlooking for the same sort of\nrelational databases that we're\nso used to in traditional\ncomputing except in a\ndecentralized or distributed\nformat. And this isn't an easy\nproblem. So Oba to me is\ncurrently in active development.\nAnd because this isn't an easy\nproblem to solve, this isn't an\nideal solution for those of you\nlooking for an out of the box\nexperience. But if you are\nlooking for something like that,\ntry out orbit dB. And there's\nalso several other tools in the\necosystem leveraging IPFS and\nfilecoin, including ceramic,\nwhich is similar to textil power\ngate, except it uses\ndecentralized identities.\nLighthouse is file drive, and\nthere's even Morales has an IPFS\nAPI, so check those out as well.\nSo storage is really a\nfundamental component on one\ntechnology system. So and\nthere's so many use cases you\ncould dive into here. And so\nhopefully, I've provided you\nwith some of the knowledge and\ntools you need to get started\nwith IPFS and file Goyt. Coin\nand really make powerful\ndistributed applications. And\nthere's just one more tool\nthat's also in active\ndevelopment now. So if you look\nclosely at this diagram, you'll\nnotice probably unfamiliar logo\nright at the end of the logic\nlayer. And that's the logo for\nthe filecoin virtual machine. So\nFBM will be launching at the end\nof this year. And we're super\nexcited about it. And it's going\nto allow smart contracts,\ncontract use combined with like\ncolocation of storage data,\nloads, so computing capabilities\nwith storage capabilities, and\nwill also be EVM compatible. So\nas I said, we're super excited\nfor the kinds of use cases that\nwe're going to see come out of\nthis project as well. And you\ncan follow along here on the\nwebsite here as well. So\nhopefully, I've given you all\nthe tools you need to get\nstarted with IPFS. And file\ncoin. If you do need more\nresources or want to get\ninvolved, we have proto School,\nwhich is interactive tutorials\non decentralized web protocols.\nThere's also NFT, school dot\nDev, or join a hackathon, check\nout our hackathons.filecoin.io\npage for all the latest\nhackathons we're involved in.\nAnd if you do really want to dig\ndeep and build tooling in IPFS,\nand file coin or build a cool\nproject, check out our grants\noptions as well for that, in the\nmeantime, all please learn long\nbuild and prosper.\nSo we've learned a ton in this\nsection. And that is it. So\nlet's do a summary of all the\namazing things that we've\nlearned. And then we'll go into\nthe TypeScript edition of this\nbecause the TypeScript edition\nis definitely a little bit\ndifferent. So let's talk.\nAlright, so first, we learned\nmore about next Jas. And we\nlearned we can have an\napplication using next Jas. And\nit's a framework that's gonna\nallow us to build really\npowerful front ends and full\nstack applications really\neasily. We learned about the\nlayout of our next JS project,\nwe add components in a\ncomponents folder, which are\nbasically minimalistic blocks of\nJavaScript and HTML that we can\nuse to modularize and create our\nwebsite out of these components.\nConstants is a folder that we\ncan put constant variables, Node\nmodules is node modules. And out\nfolders. What happens when we\nexport all of our code to a\nstatic example, pages are going\nto be basically the routes or\nthe different pages of our\nwebsite, everything goes through\napp.js. Public is just some\npublic stuff styles is for any\nCSS or styling of our\napplication. And then we have\nour basic files here. In our\npages section, we have our app,\nwhich is surrounded by both this\nnotification provider and our\nMorales provider, all of our\ncomponents run through this app\non all of our pages run through\nthis app. So this is kind of\nconsidered the entry point for\nour entire application. Having\nthis Morales provider wrapped\naround our notifications in\ncomponent means that we don't\nhave to pass parameters between\nour components. And our lottery\nwill just know what chain ID\nthat we're on, because our\nheader is going to pass it up to\nMorales provider and the Morales\nprovider is going to pass it\nback down to our lottery\nentrance. And we saw with our\nmanual header, the way that that\nconnect button works behind the\nscenes. So it's doing some local\nstorage, where we're storing\nwhether or not we're actually\nconnected, we learned about use\neffect, and you state and these\ndifferent hooks in our front\nends were one of the main\nreasons we want hooks is we want\nwe want our websites to\nrerender. When stuff changes, we\nwant our components to be able\nto talk about the state of the\nblockchain with each other. And\nthey're incredibly powerful for\nbuilding our React applications.\nUse effect is one of the most\npopular ones where if we don't\nhave a dependency array, our\nfunction inside of our use\neffect will run anytime\nsomething re renders a blank\ndependency array means it'll\njust run once on load. And if\nthere are dependencies in the\narray, it'll run any time any of\nthe variables in those change.\nWe also learned about the use\nstate hook, which is really\nsimilar to saying like, let\nvariable equals x. But it also\ncomes with the RE rendering\nability. And it comes with some\nother nice abilities that we\ndidn't really discuss here, we\nlearned how to call different\ncontract functions with\nmirallas. Not only sending\ntransactions, but also calling\ndata. Morales is smart enough to\nknow that when it sees get\nentrance fee that this is going\nto be a view function. And this\nis going to be a transaction, it\ncan tell the difference between\nthe two. So this one's going to\npopulate Metamask to pop up. And\nthis one just going to return\nkind of normally like a view\nfunction, what we can actually\nuse the same syntax between\nsending transactions and then\ncalling view functions on our\ncontract, we added a button,\ncalling one of these Morales\npieces and then had an onsuccess\nsection where when our\ntransaction completed, we update\nthe UI and we add a little pop\nup for notifications, we learned\nhow to deploy our code directly\nto IPFS. And use that IPFS hash\nto interact and see our code, we\nalso learned about fleek and how\nfleek automatically deploys to\nIPFS. Whenever we do a git push\nto our GitHub repository, and it\nmakes continuously updating our\nwebsites much easier. It also\ngives us a regular canonical URL\nas well. And then finally, we\nlearned about IPFS and\ndecentralized database storage.\nNow you might be asking, Okay,\nwell, why don't we just store\nall the data for this website on\nAetherium, or polygon or\navalanche, etc? And the answer\nto that is that can get\nincredibly expensive storing\ndata, storing a ton of data on\nthe blockchain costs a ton of\ngas, whereas this is a much\ncheaper alternative. Aetherium\navalanche and the smart contract\nplatforms aren't really meant to\nbe data storage layers, they're\nmeant to be logic layers, right?\nDecentralized logic,\ndecentralized smart contracts,\noftentimes, yes, we're gonna\nhave to store data in them. But\nwhen it's a ton of data, there\nare better solutions. And there\nare different solutions out\nthere for storing our data, like\nIPFS and filecoin, you should be\nincredibly proud of yourself, if\nyou've made it this far, because\nyou've just made a really solid\napp, a really solid front end\napplication. And you've learned\nhow to really easily add\nfunctionality for interacting\nwith your smart contracts. So\ngive yourself a pat on the back,\nmaybe even tweet this out, share\nthis really cool application\nwith your friends and family.\nTake a break. And I'll see you\nin the next lesson.\nAll right, welcome to one of the\nfastest lessons that we're going\nto have here. And in this\nlesson, we're going to talk\nabout the hardhat starter kit.\nReally quickly, I'm going to\nwalk you through it and show you\nhow to use it. Now we've learned\na lot about projects, we've\nlearned a lot about different\nrepos, learnt the basics of\nsmart contracts. And we've\nlearned a lot about front end as\nwell and building front ends for\napplications. So this smart\ncontract kit repo comes packed\nwith a ton of starter kits that\nyou can use to start deploying\nyour projects right away. And as\nyou can see, that hard hat\nstarter kit is easily one of the\nmost popular ones with the most\nstars the most forks out there.\nThe smart contract kit repo\nactually comes with a ton of\nframeworks, like if you want to\nwork with SWANA, if you want to\nwork with Python and Brownie, if\nyou want to work with foundry,\ntruffle, really any other\nframework out there, you can get\nstarted, clone one of these\nrepos, work with one of these\nrepos and build your project and\nget started right away, we're\ngoing to show you how to use the\nhard hat starter kit. So you can\njust grab the repo and go and\nalready have some boilerplate\ncode and a boilerplate really\ngood looking repo to start your\nprojects with, we come to the\nsmart contract kit, hard hat\nstarter kit repo here. And if\nyou're working with GitHub, you\ncan just go ahead and use this\ntemplate and it will\nautomatically generate you a new\nGitHub repo with the hardest\nstarter kit. So let's go ahead,\nwe'll click use this template,\nwe come up with our own name\nhere, we'll call it make it\npublic create repository from\nTemplate. it'll generate our\nrepository. And now we\nautomatically have it in our own\nrepo here. And we can get\nstarted working with it. And we\ncan get started working with it.\nIf you don't want to click the\nuse that template button, we can\nalso just copy the URL. And in\nour code editor, we can just do\ngit clone and paste that in\nthere. So for now, I am going to\nget clone, but I'm going to get\nclone with this repo that we\njust created. Come back in with\nthe git clone, hard hat play FCC\nor hard hat starter kit. We're\ngoing to cd into our head play\nFCC, and then open that up in a\nnew code editor. And awesome.\nNow you'll see in this repo, it\ncomes packed with a ton of\ncontracts, deployments, scripts,\ntasks, test, everything, you\nname it to really get started in\na professional environment. We\nlook in the contract section, we\ncan see we have a couple of\nsample contracts. We have a\ncontract for making an API call\nto a chain link node, working\nwith keepers working with price\nfeeds, and then working with\nchain link Vir Fe two. We've got\nsome test contracts and we\nadditionally have this fuzzing\nfolder, which we'll talk talk\nabout in a much later section of\nthis course, we have deployed\nscripts where we start with\ndeploying mocks, then we deploy\neach one of those contracts, we\nhave a sample script to read the\nprice from one of these\ncontracts. And we have a whole\nbunch of sample tasks. Now at\nthe time of recording, instead\nof scripts, this repo uses\ntasks. But again, they're a\nlittle bit interchangeable. And\nof course, we have some unit\ntests and some staging tests as\nwell, that you can go through\nand take a look at, once we're\nin this repo, we can run some\nfamiliar commands here, we'll do\nyarn, of course, to install our\nall of our packages. And then\neverything that we're going to\ndo, if you get lost, you can\nalways come back to this repo.\nAnd you can follow along with\ngetting started and the\nQuickstart. So we just did the\ngit clone. Now we're doing the\nyarn, and then we're gonna go\nahead and run yarn hard hat\ntest. This hard hat starter kit\nrepo is very consistently up to\ndate, we did the last push being\njust a few days ago, and will\nconstantly have some best\npractices for building our smart\ncontracts and having a really\nprofessional coding environment.\nAnd it's got this really cute\nlogo. Once we've installed all\nthe dependencies, we can run\nyarn, art hath test, we can run\nall of the tests in the test\nfolder, which also will show us\nhow to interact and how to use\nall these different contracts in\nhere. And they each have some\nconsole dot log, so you can see\nmore about what's actually going\non when these tests actually\nrun. If we look in the Hardhead\nconfig.js, it's got some really\nfamiliar code in here, we have\nall our imports at the top, we\ngrab a whole bunch of\nenvironment variables, we've got\nthe ether scan plugin, we've got\nthe gas reporter, the contract\nsizer, which is a plugin that\ntells you how big your contracts\nare. So named accounts,\ndifferent solidity versions, and\nthen mocha timeout as well. We\ncan of course, do yarn hard hat\nnode, which will run through our\ndeploy scripts, and then spin up\na new note for us, which has\nmock chainlink tokens, mock\nOracle's mock aggregators, and\nmock up VRF for us to go ahead\nand interact with once that's\nup, we can then of course, to\nhard hat, console, dash dash\nnetwork localhost, and begin\ninteracting with contracts on\nlocalhost. So we can kind of\nfollow along with price feed,\nfor example, and do const price\nconsumer B three equals await\nethers dot get contract, price,\nconsumer V three.\nAnd then we can do await price\nconsumer B three dot get latest\nprice. Let's wrap that in a to\nstring. And we can see a mock\nlatest price from a contract\nthat uses channeling price\nfeeds. And we can interact with\nany of our contracts and work\nwith any of the mocks as well in\nhere. If we want to deploy this\nto an actual test net like\nRinckey, or main net will just\npop in our dot env file, we'll\nclose our node terminal, and we\ncan run yarn hardhat or just hh\ndeploy. And then we'll add\nwhatever tags we want to do\nhere. So let's just deploy our\nprice feed contract. If we go to\nthe price feed deploy, we scroll\ndown, we'll get the tags. Okay,\ngreat, we'll use the feed tag,\ndash tags feeds dash to or feed\ndash dash network brings beam.\nAnd while we're waiting for this\nto deploy, we can go back to the\nactual repo. And just make sure\nto follow along with the\ndocumentation here and the\nQuickstart in all the usage and\neverything so that you make sure\nthat you're working with the\nmost up to date version. There's\neven documentation on running a\nlocal network using a test net\nor live network working with\nAetherium. Rigby adding your\nprivate keys and dotting envies\nall this stuff that you already\nknow, forking, which we'll learn\na little bit later, auto funding\nyour contracts for working with\nchain link API running tests,\nyou can additionally run your\ntests in parallel by adding the\ndash dash parallel flag to our\ntests. We can interact with our\ndeployed contracts with those\ndifferent tasks that we've\ncreated linting code formatting,\nestimated gas code coverage\nfuzzing, we'll talk about later.\nAnd then contributions. PRs\nissues are always welcome here.\nAnd once it's outputted, and\neven verified, if you have\nverification turned on, you'll\nget a little task that we can\nrun to just go ahead and read\nthe price feed or interact with\nthe contract. So we can copy\nthat task out. Yarn hardhat.\nRead price feed since it's a\ntask here, contract the contract\ndata which we just deployed\nnetwork Rigby. And we'll get\nreading data price feed from\nconsumer contract on network,\nRigby price is here, which of\ncourse, we're saying the price\nof Aetherium is $3,033, because\nit has eight decimal places. So\nif you're ever looking to start\na new project, and you want some\nboilerplate code, this hard hat\nStarter Kit is a great place to\nget started. And of course, you\ncan open it and get pod if you\nwant to just test it out and try\nit and get pot in a Cloud Shell.\nSo that's it for this lesson.\nWasn't that fast. This was the\nfastest lesson ever. So if you\nwant to do a little extra\nlearnings here, I would fork\nthis I would clone this I would\nuse this template, try to play\naround with the repo a little\nbit yourself and see what you\nrecognize, see what you don't\nrecognize and keep that prepped\nin your mind for later so\nQuestions in the course. And\nthen for everyone here who is\nTypeScript, there is, of course,\na TypeScript version of this as\nwell that you can get cloned.\nAnd it has a nice blue logo here\nto show that it's a little bit\ndifferent. So, that being said,\nuse the repo, have fun. Let's\nget to lesson 12.\nAlright, now we're moving on to\nthe hard hat ERC. 20s are the\nsection where we're going to\nlearn how to create our own ERC\n20 or EIP 20 Or B E P 20 or AEP\n20 any of these tokens on the\nblockchain before we can\nunderstand what an ERC 20 is, or\neven what one of these tokens\nare, we first need to understand\nwhat is an ERC. And then also\nwhat is an EIP in Aetherium, and\navalanche and finance and\npolygon. All these blockchains\nhave what's called improvement\nproposals. And for Aetherium,\nthey're called Aetherium\nimprovement proposals, or E IPs.\nAnd what people would do is they\ncome up with these ideas to\nimprove Aetherium or improve\nthese layer ones like polygon,\nMatic avalanche, etc. And on\nsome GitHub or some open source\nrepository, they'll add these\nnew EIP is they'll add these new\nimprovement ideas to make these\nprotocols better. Now, these\nimprovements can really be\nanything, they can be anything\nfrom a core blockchain update to\nsome standard, that is going to\nbe a best practice for the\nentire community to adopt. Once\nan EIP gets enough insight, they\nalso create an E RC, which\nstands for Aetherium request for\ncomments. So EIP a theory and\nimprovement proposals ERC a\ntheory and request for comments.\nAnd again, these can be like BP,\nPep, you know, etc. For all\nthese different blockchains.\nBoth the improvement proposals\nand the Request for Comments,\nall have these different tags,\nnow they're numbered\nchronologically, so something\nlike an ERC 20 is going to be\nthe 20th ERC slash EIP, the ERC\nis and the EFPs share that same\nnumber. And there are websites\nlike EIP is that aetherium.org\nThat keep track of all of these\nnew Aetherium improvement\nproposals, and you can actually\nsee them real time go through\nthe process of being adopted by\nthe community. Now, one of these\ne IPs or ERC is, is going to be\nthe ERC 20 or the token standard\nfor smart contracts. This is an\nimprovement proposal that talks\nabout how to actually create\ntokens and create these smart\ncontract tokens. I made a video\nabout this recently. So in the\nGitHub repo associated with this\ncourse, we're going to have a\nsub lesson, and we're going to\nwatch a quick video that\nexplains more about these\ndifferent tokens. Now first,\nlet's define even what are ERC\n20s So ERC 20s are tokens that\nare deployed on a chain using\nwhat's called the ERC 20 token\nstandard, you can read more\nabout it in the year 20 token\nstandard here link in the\ndescription as well. But\nbasically, it's a smart contract\nthat actually represents a\ntoken. So it's token or the\nsmart contract. It's both it's\nreally cool tether chainlink\nunique token and dye are all\nexamples of ERC 20s Technically,\nchain link is in the ERC. 677 as\nthere are upgrades to the ERC 20\nthat some tokens take that are\nstill backwards compatible with\nERC. 20s And so basically, you\ncan think of them as ERC 20s\nwith a little additional\nfunctionality. Now why would I\neven care to want to make an ERC\n20 Well, you can do a lot of\nreally cool stuff with it. You\ncan make governance token, you\ncan secure an underlying\nnetwork, you can create some\ntype of synthetic acid, or\nreally anything else. In any\ncase, how do we build one of\nthese ERC? 20s How do we build\none of these tokens? Well, all\nwe have to do is build a smart\ncontract that follows the token\nstandard, all we have to do is\nbuild a smart contract that has\nthese functions that has a name\nfunction, symbol function,\ndecimals function, etc. All\nthese functions we need to be\nable to transfer it, we need to\nbe able to get the balance of it\netc. And again, if you want to\ncheck out some of the\nimprovements that are still ERC\n20 compatible, like the ERC 677\nor the ERC 777. Definitely go\ncheck those out and build one of\nthose instead. All right,\nawesome. Now that we know what\none of these ERC 20s is, we can\ngo ahead and create our own per\nusual in the GitHub repo\nassociated with this course. We\nhave all the code available\nhere. If you want to just get\nclone. This is going to be again\nanother one of our quicker\nlessons here. So we're in our\nterminal. We're in our VS code\nhere. We're going to make a new\ndirectory. I'm going to call it\nhard hat ERC 20 FCC will cd into\nhard hat, your C 20 sec. And\nwe're going to create a new hard\nhat project the exact same way\nwe've been doing it yarn add\ndash dash dev or tab. Let's\nactually open it in its own VS\ncode will do code.or file open\nthis folder. And okay, we're in\nour project now. Let's create a\nnew hard hat project. We'll do\nyarn, art hats.\nWe'll do create an empty hard\nhat dot config dot j s here and\ngreat. We've now got an empty\nhard hat dot config dot j s. If\nyou want to copy paste your hard\nhat dot config from a previous\nprojects you want to copy paste\nyour heart Have dot config or\nyour dot EMV file, because you\nknow we're going to need those\nfeel free to do so now, I'm just\ngoing to update this to 8.7.\nI'll add the rest of my stuff\nlater. So as we've heard this\nEIP 20, or this ERC 20. All it\nneeds is to have these functions\nin its token standard so that we\ncan transfer tokens, we can do\nall the stuff in the ERC 20\ncontract itself, it really is\njust keeping track of how much\nof each token people have. So\nthe smart contract, kind of in a\nweird way it keeps track of\nitself. To get started, we're\ngoing to do this kind of the\nmanual way. First, we're going\nto create our own manual token\nhere, or a really minimalistic\none anyways, so let's create a\nnew folder. contracts will\ncreate a new file called manual\ntoken dot soul. Yes, I'm going\nto show you kind of the hard way\nto make it and then I'll show\nyou a much easier way to make\nit. So to get started here are\nusual we can do pragma, solidity\nto carrot zero, point 8.7. And\nthen we'll even do spdx, license\nidentifier, MIT do contract,\nmanual token, and boom, let's\nget started. The main reason\nthis token smart contract works\nis that there's some balances\nmapping. So we have a mapping of\naddresses to you in 256. And\nit's usually public called\nbalance of and all this does is\nthis mapping is obviously the\nkey is going to be every single\naddress on the planet, and then\nhow much they have. And\nbasically, when we transfer\ntokens, transfer tokens, we're\nbasically just subtract from\naddress, amount, and add to to\naddress. So a really\nminimalistic way to implement\nthis would be to create this\ntransfer function first. So\nwe'll create this function, I'm\ngoing to call it underscore\ntransfer, we can do an address\nfrom address to you into fifth\nsixth mount. And now we'd\nprobably put some requirements,\nwe probably omit some events,\nand let's make this public as\nwell. And really, at the end of\nthe day, is we're gonna say\nbalance of from minus equals\nvalue, which is the same as\nsaying bounce of from equals\nbounce from minus value, or\nexcuse me, amount, and then\nwe're gonna say balance of two,\nexcuse me, plus equals, which is\nthe same as saying, you know,\nbalance of two plus. And\ntechnically, that's really all\nwe need, right, we probably want\nto do some asserts ins here,\nsome requires to make sure all\nof our numbers make sense. But\nreally, at the end of the day,\nthis is all that this function\nis doing. Transfer works when\nthe caller is sending money\ndirectly into another address.\nBut what happens if we want to\nallow some smart contract to\nwork with our token, or we want\nto allow somebody else to work\nwith our token, you know, maybe\nto deposit it into a protocol,\nor do some more functionality\nwith it, there will be some\napproved function that will\napprove that contract to do\nthat. And then we'll have a\nfunction transfer from and this\nfunction will, you know, it'll\njust implement taking funds from\nuser and this will be public as\nwell. And then at the top will\nbe some type of allowances\nmapping that will tell who's\nallowed which address to take\nhow much token, which sounds a\nlittle confusing, but let me\njust add the mapping. So it'll\nbe a mapping of addresses to a\nmapping of addresses to an\namount to a unit tivity sex and\nthis will be public allowance,\nwe're gonna say address, Patrick\nis going to allow address of\nPatrick's brother to use 25\ntokens. And that's how this\nallowance works. And in our\ntransfer from transfer from will\ncheck this allowance mapping and\nsave Hmm. Did Patrick give you\nauthorization to borrow those\ntokens? Oh, yes, you did. Okay,\nwe'll let you transfer from. And\nI'm just, I'm just going to copy\npaste an implementation of it,\nyou can check out the GitHub\nrepo as well. And it would look\nsomething like this is we check\nthe allowed amounts, update the\nallowance, and then transfer the\ntokens. So those are some of the\nmain functions. So we need an\napproved function, obviously, to\nupdate the allowances here. And\nusually, you'll have like a un\n256 initial supply. And this\nwill be like how many tokens\nthere are starting with how many\ntokens there are total,\nsometimes you'll add a mint\nfunction to add more functions.\nBut you can basically start to\nsee this contract ramping up.\nOne thing we could do is we\ncould go ahead go through this\nspec and just line by line, you\nknow, build our token ourself.\nAnd after we do that, it might\nlook something like this. So I'm\njust copy pasted the code from\nthe GitHub repo. If you go to\ncontracts, manual token, I just\ncopy paste this code in here.\nThis is what a contract a token\ncontract might look like. Okay.\nSo we have all these functions,\nwe have all these arrays. We\nhave all this stuff. And you can\nsee in the constructor, we're\ntaking initial supply, and then\na token name and a token symbol.\nThe name, you know, might be\nsomething like dy token. And\nthen the symbol might be\nsomething like dy, just so that\nit's easily recognizable just by\nits name and its token.\ncoding it all from scratch, like\nthat is definitely something\nthat we can do. But as\nengineers, we know that that's\nprobably really annoying. And we\ndon't actually want to do that.\nSo what can we do instead? Well,\nwe can use an open source\nlibrary, like open Zeppelin, to\nactually get some boilerplate\ncode work with open Zeppelin is\nalmost considered kind of the\nstandard library of solidity.\nThey have a list of open source\ncontracts that anybody can use\nand import into their contracts\nthat have a ton of boilerplate,\nso that you don't have to\nmanually write everything out,\nwe can see all their code in\ntheir GitHub repository, open\nZeppelin slash open Zeppelin\ncontracts, and we're going to be\nusing them a lot moving forward.\nSo for example, you can see kind\nof on the left side of their\ndocumentation, they have this\ntokens section, and they have an\nERC 20, which is one of those\ntokens standards. If you scroll\non here, they even have some\nminimalistic examples of how to\ncreate your own ERC 20 token.\nAnd that's what we're going to\nbe using to build our token.\nBecause you see how much smaller\nthis is how much less code this\nis to maintain. Let's go ahead\nand let's use open Zeppelin for\nus to create our token. So let's\ncreate a new file. We'll call\nour token dot soul. I'm going to\ncreate our own token here. So\nlet's do spdx. License\nidentifier, MIT, we'll do\npragma, solidity carrot zero,\npoint 8.7, we'll do contract our\ntoken. Now, what we're going to\ndo, we're going to import\nopenzeppelin contracts into our\nhard hat project. And we're\ngoing to do it the same way we\ndid with chain link and any\nother packages in the future. So\nwe'll do yarn, add dash dash\nDev, at open Zeppelin slash\ncontracts. And this is going to\nadd the open Zeppelin slash\ncontracts NPM package to our\nproject. And one of the code\npieces that they have is this\nERC 20 contract that we can use\nand we can have our token\ninherit all the functions. So\nwe'll go ahead and import it\nwith import at openzeppelin.\nSlash contracts slash tokens\nslash ERC 20 slash ERC 20\nditzel. And just by importing it\nlike this, all we have to do is\nhave our token inherited now. So\nwe'll say contract. Our token is\nERC 20. Boom. And just like that\nour token is almost done. Now\nyou might get this little wiggle\nthis little red line here saying\nour token should be marked\nabstract. And that's because if\nwe look into the ERC 20 dot soul\nof openzeppelin We'll see that\nit has a constructor. So in\norder for us to inherit your C\n20 token, we have to use the ERC\n20 constructor and we just need\nto give our token a name and a\nsymbol. But we can say in our\nconstructor, we can leave it\nblank. And then right next to\nour constructor, we'll add the\nERC 20 constructor and our name\nwill be our token. And then our\nsymbol will just be OT and then\nthis ERC. 20 token also comes\nwith something called a mint\nfunctionality, which is\nessentially a function that\nallows us to create tokens,\nright because right now we\nactually get initialized with\nzero tokens, right. So nobody's\nactually allowed to have any\ntokens. So we want to mint the\ninitial amount of tokens and\nthen who owns all those tokens\nto start with. So usually what\nyou'll see is you'll see a mint\nfunction like this, it'll be\npassed in message that sender,\nso whoever deploys this contract\nwill own all the tokens to\nstart. And then we'll give it\nlike an in their soul supply.\nAnd then we could do like, you\nwent to 56 initial supply equals\nlike seven, or whatever. But\ninstead, a common practice is\njust to add it to the\nconstructor. So you and 256\ninitial supply like that, as we\nknow about solidity decimals\ndon't work so great. So if I say\nmy initial supply is 50, that 50\nis going to be like 50 way, and\nthere's all these ERC 20s come\nwith a decimals and decimals\nfunction, which tells us how\nmany decimals we should expect\nwith our ERC 20. The default is\n18. And we can override this\nfunction if we want a different\namount of decimals. And if we\nknow the default is 18. And we\nwant to deploy 50, we might want\nto do our initial supply of 50 e\n18. Or you can also say like 50\ntimes 10, raise the 18th or\nwhatever you want there. And in\nour code when we deploy this\nnow, this is actually where\nwe're going to finish the\nproject. Because everything else\nthat we would do here, we've\nalready done, all we need to do\nis make a deploy script and\nwrite some tests. That's really\nit. Because right now you have\nall the skills that you need to\nwrite a deploy script and then\noptionally write some tests for\nthis project. So I highly\nencourage you to pause the video\nhere and try to write your own\ndeploy script. And even if you\nwant to write your own tests,\nyou can always refer back To the\nGitHub repo associated with this\nlesson, as we do have a deploy\nscript in here, we also have a\nTypeScript edition in here as\nwell that we're additionally not\ngoing to go over. And of course,\nif you get totally lost, there's\na ton of instructions in here to\nhelp you learn more and help you\nwork with this specific\nrepository.\nSo let's do a quick review of\nwhat we just learned. So ERC 20\ntokens, or EIP 20 tokens or or b\np or p p, or any of these dash\n20. Improvement proposals are\nwhat's known as the token\nstandard. And the token\nstandard, these tokens on chain\nactually just tokens that are\nsmart contracts. Now, these\ntokens are obviously different\nthan the layer one tokens like\nAetherium, or polygon or\nAvalanche or arbitration, those\nare not going to be smart\ncontracts, those are going to be\nblockchain native tokens, and\nyou'll hear me refer to it as\nblockchain native tokens a lot.\nversus these tokens, these ERC\n20, these smart contract tokens,\nwhich are just smart contracts.\nAnd they're just kind of a\ncombination of these functions\nthat represent how many tokens\neach address has, we can create\nour own token with all the\nspecifications added. Or we can\njust use openzeppelin to import\na token in now another popular\nrepo like open Zeppelin is going\nto be this one from Rory capital\ncalled soulmate. And they're\nboth aimed to be standard\nlibraries for solidity. And one\nof the important things to keep\nin mind is that these tokens\nhave this allowance mapping. And\nyou can allow other addresses to\nhave access to your tokens and\nmove your tokens around. This is\nimportant, especially when we\nget to later on when working\nwith defy when we want to give\nsome smart contract access to\nour tokens so that they can\ninput it into their defy\nprotocol. It's also a little bit\ntricky. And you want to make\nsure you're not allowing\nmalicious contracts to interact\nwith your tokens. And we'll also\nsee that when we start to\ninteract with these tokens more\nbefore any contract can interact\nwith our tokens, we need to\napprove them to interact with\nour tokens. And that's it. Now\nyou're a token wizard, and you\ncan deploy your own tokens. Take\na break, get that coffee, and\nI'll see you in the next one.\nAll right, welcome to the next\nsession, we are going to be\nlearning about defy in this\nsession and going to be\nprogrammatic, and going to be\nprogrammatically interacting\nwith the defy protocol. I am\nincredibly excited for you for\nthis session, because defi is\none of the best use cases for\nsmart contracts. And one of the\nuse cases that I am specifically\nmost excited for now, as I've\nmentioned, the past defy stands\nfor decentralized finance, we've\nleft some links in the GitHub\nrepository for you to learn more\nabout Defy. One of the main\nreasons we're so excited about\ndefy is because we move away\nfrom this area of traditional\nagreement. And that's what smart\ncontracts are all about. They're\nabout removing this centralized\nentity, from our financial\nworld, and especially from these\nfinancial institutions that have\na conflict of interest. They're\nin business to make money not to\nkeep our money safe not to make\nus money. And we want to work\nwith a system where everything\nis transparent, especially when\nit comes to our financial\nservices. So we want to move to\nthis world of smart contracts,\nespecially when it comes to our\nmoney. And in my mind, defi is\ngoing to be the industry that\naffects the masses, the quickest\nbecause of how much fair how\nmuch better decentralized\nfinance is than centralized\nfinance. And at the moment, the\nrates and the yields and the\ninterest that you gain in defy\nis much better than centralized\nfinance, because remember, will\ngo away from these centralized\nprotocols, saying, hey, trust\nus, we'll give you access to the\nmarkets or hate trust us put\nyour money in us will keep your\nmoney safe to this cryptographic\nmath base guarantees instead of\nhaving to trust these companies\nand these entities, which is\nwhat we want. And additionally,\nthe more our Oracle networks get\nbetter, and the more Oracle's\nnetworks work with these smart\ncontract platforms like\nAetherium, like polygon, like\narbitrage them, the more data\nand the more complex financial\nproducts that we can do. Now,\none of the other reasons I'm so\ncrazy excited about defy is if\nyou look at this little chart\nright here, it shows the\ndifferent markets by size. Now\nthis this image is a little bit\noutdated, but it still shows you\nthe relative sizes of all these\ndifferent industries defy right\nnow is a $200 billion market,\nthere's about $200 billion\nlocked in the defy industry. And\nI'll show you that in a minute.\nCryptocurrency actually, at the\ntime of recording isn't 360\nbillion. It's actually like 1.8\ntrillion. So it's a lot more\nthan this. But still, it's a\nmassive subset of all these\nother areas like gold is a $10\ntrillion market. The stock\nmarket is almost $100 trillion\nglobal real estate, almost $300\ntrillion derivatives as\nquadrillion dollars. So the FBI\nis a super tiny, tiny, tiny,\ntiny subset right now and in my\nmind, all of these areas can be\nre landscaped with Defy. So\nwe're ramping up, we're getting\nthere. So it's gonna be up to us\nto make some of these protocols\nand make it Much easier for\npeople to get into the space\nwhere their finances are going\nto be more fair, more\naccountable and more\ntransparent. And with better\nyield rates, we can actually see\na pretty good summary of what's\ngoing on in defy this site\ncalled defy llama. It shows\ntotal value locked in all these\ndifferent decentralized\nprotocols. And we can see a lot\nof these are across multiple\nchains, right. And a lot of\nthese are EVM compatible chains,\nAetherium, Biden, smart chain,\navalanche, Fanta, drawn polygon,\nall these are EVM, compatible\nblockchains, where we can see\nexactly how much money\nindependent users have put into\nthese protocols. The time of\nrecording Ave is the number one\nprotocol for total value locked.\nSo there's $22 billion locked in\nAve, which is the protocol that\nwe're going to be going over\ntoday.\nSo what is Ave So are they is a\nborrowing and lending protocol,\nit allows us to borrow and lend\ncryptocurrencies. So we can\nactually put down a token as\ncollateral, it's kind of similar\nto like putting money in a bank,\nand earn yields on other people\nborrowing that collateral from\nus almost exactly what a bank\ndoes, except for the fact it's\nwhat's called noncustodial. To\nthe Ave team never touches our\nmoney. Nobody ever touches the\nmoney. It's all just a smart\ncontract. It's all just this\nprogrammatic code. So we can be\nrest assured, no one's going to\nrun off with our money, no one's\ngoing to do anything bad. And we\nalso gain these higher yields.\nborrowing and lending is a\ncritical piece for creating\nreally any interesting financial\napplications. If you want to\nshort sell something, if you\nwant to leverage up on some\nasset if you want to. If you\nwant to do more complex\nfinancial products, you need\nborrowing and lending. Now a lot\nof the typical FinTech or\nfinancial technology or finance\nterms do apply here. And this\ncourse isn't going to be a deep\ndive into exactly how these\nfinancial products work. And\nit's also not going to be a\ncourse on finance. If you want\nto learn more about finance,\nwe'll leave a number of links in\nour GitHub repo associated with\nthis course. So you can learn\nmore about finance and become\nwhat I like to call a defy\nquant, quantitative defy\nengineer. And I am so excited\nfor more defi quants to get into\nthis space. Alright, so here we\nare in the Ave application. It's\nat testament dot Ave dot\nmarkets, we are in the testament\nof Avi now, everything that\nwe're going to do here is going\nto work on Main net as well, but\nwe're going to use it on their\ntest net. Now this is actually\nobvious older UI, and they have\na new website that looks even\nbetter than this. But we're\ngoing to be going through a lot\nof the basic functionality\ndepositing taking out a loan,\npotentially even shorting an\nasset, if we want, I don't\nrecommend going to the site\nbecause it might not work and\nCOVID the way you'd expect it\nto. So for this, just sit back,\nrelax and watch. In order for us\nto actually short sell or margin\ntrade. The first thing that\nwe're going to need to do is\nactually deposit some\ncollateral, we need to deposit\nsome collateral in order to\nborrow this way. If we never\nrepay back the loan that we took\nout or the the amount that we\nborrowed, Ave, we'll just go\nahead and take the collateral\nthat we put in here, we'll do\nwhat's called a liquidation\ncall. And that's why this is\nactually a little bit safer than\nshort selling in traditional\nmarkets. Because if your\ncollateral is less than how much\nyou have borrowed, you'll just\nimmediately get liquidated, but\nyou still lose a bunch of money\nso like don't get liquidated. So\nwhat we want to do now is we're\ngonna scroll to Aetherium, we're\ngoing to connect our wallet\nhere, we're going to move to\nCOVID test network browser here.\nAnd we're gonna go to this\ndeposit piece. So it already\nshows our balance here we have\npoint two COVID eath. Let's\ndeposit 0.1.\nWe're gonna hit deposit Metamask\ncan pop up, confirm. But once\nthis goes through, this means\nthat we've have it deposited and\nwe go to our dashboard, we can\nsee we have some eath here,\npoint one eath got some API,\nthis is kind of like that\npercentage return that we're\ngonna get back for, for\ndepositing into Ave. And yes, we\ncan use it as collateral here,\nwe have this, this marked as yes\nhere. So that's exactly what\nwe're going to do. And it says\nnothing borrowed. Yep, we can go\nahead and hit this borrow now\nbutton. And we're gonna get\nbrought to the borrower screen,\nand we're going to choose which\nasset we want to borrow. Now,\nwhenever we borrow one of these,\nthere are these API's, right?\nThis is the percentage that over\nthe course of a year that we're\ngonna have to pay, in order to\nactually borrow this asset. The\nstable one means it'll always be\nfor or variable means it\nactually changes depending on\nkind of how much liquidity the\nprotocol has, you can kind of\npick which one you want to do\nstable is you're always gonna be\na 4% variable is going to be a\nlittle bit riskier, but you\nmight get a lower fee. So we're\nactually going to borrow some\ndye right, because dye is a\nstable coin. It's worth $1. In a\nway, you could call this taking\nout on margin because we're\ntaking out dye to borrow and\nanother way we could say we're\nshorting dye which is kind of\nfunny to think about, but you\nget to choose how much you want\nto borrow here and you'll see\nthis this thing called Health\nfactor I'm going to zoom in a\nlittle bit this thing called\nHealth factor here as we as we\nscroll this thing. So this\nhealth factor is how close to\nbeing liquidated you are\nremember how I said you can get\nliquidated this health factor\nrepresents how close we are to\ngetting liquidated. This means\nmeans how close we are to always\nsaying, You know what fu we're\ntaking your funds. If it goes\nbelow one at any time, somebody\ncan liquidate you and take a lot\nof that deposit that we put in,\nthere's some math behind\nactually what the health factor\nactually is, you can head over\nto the Ave documentation, which\nI will leave a link in the\ndescription to kind of read more\nabout the health factor. So\nwe're going to borrow 29 die\nwe're buying, we're borrowing\nbasically 30 bucks. Gonna hit\ncontinue, I'm gonna do a\nvariable, zoom back out,\ncontinue, we're gonna borrow\nmetamath pops up, confirm\ntransaction that's pending. And\nwe're gonna go to the dashboard.\nAnd now we can see kind of our\nnew balance here, right, we can\nsee the point one eath,\ndeposited and 29 die. And we can\nsee our health factor up here,\nyou can even click this little\nbutton, saying, hey, it\nrepresents how close you are to\nbeing liquidated, we can see the\nvalue here, our eath is worth\nlike $200, or die is worth 30\nbucks. So we're good. We're\npretty healthy here. In order\nfor Avi to understand and under\nto price the underlying\ncollateral, so it knows how much\nit can lend out. Obviously\nanother one of these protocols\nthat uses changing price feeds\nto price, the underlying\ncollateral, many of these\nbillion dollar defy protocols\nuse chain link on the back end\nto do all their pricing\nmechanisms. And that's\nessentially it, we could then\nrepay our debts, we could borrow\nmore assets, we could swap\nassets around. And the interest\nreturn, we get onto pausing our\nassets is amazing. So now that\nwe learned a little bit about\nhow to use their UI, which is\nhosted on IPFS, by the way,\nlet's go ahead and let's learn\nhow to do all this and do even\nmore programmatically so we can\nbecome defy quanta engineers.\nNow, like I said, we're going to\nbe working with the Ave v two\nprotocol, if you want to try out\nthe v3, you absolutely can, if\nyou can go there and play with\nit right now, it still has more\nmoney locked in it, which is\ngreat. But the v3 protocol is\nobviously the latest addition.\nSo we're gonna be flipping back\nand forth between the\ndocumentation and our code base.\nSo I recommend that you have the\ndocumentation up as well. And\nper usual, all of the code that\nwe're going to be working with\nis in this hard hat defi Free\nCode Camp repository. So let's\njump in. I'm in by VS code, I'm\nin my folder with this course,\nwe're going to make a new\nfolder, we're going to call it\nhard hat, defy FCC, we're going\nto cd into it. And then we're\ngoing to open it up with code\nperiod. Or you can also do per\nusual, File Open and then open\nthat folder. Now we're in a new\nproject, we're going to do yarn,\nadd dash dash Dev, aren't hat.\nAnd we're going to add hard hat\nand start up our minimalistic\nhard hat project. Once again,\nfor starting up your\nminimalistic hard hat projects,\nI usually just copy paste from\nanother folder, or I just used\nthat hard hat starter kit that\nwe saw in the smart contract\ncode repo. But whatever works\nbest for you to get your project\nstarted, you can use now that\nwe've got this, we can run yarn\nhardhat. And we'll just create\nan empty hardhat.config.js. Now\nto save us some boilerplate\ntime, I am going to copy paste\nmy hard hat.config.js from a\npast project into this one, just\nto make it so we don't have to\ngo through that boilerplate\nsetup again. And I'm also going\nto copy paste this line from our\nheart at smart contract lottery.\nAgain, if you want to use your\npackage JSON or your yarn dot\nlock to install dependencies,\nyou absolutely can. But I'm just\ngoing to paste that in here and\nrun it. And then I'm going to\ncopy paste over my prettier\nfiles, so that all my JavaScript\ncan be formatted the way I want\nit to be. Okay, great. Now we\nhave a minimalistic project spun\nup, let's go ahead and get\nstarted learning how to interact\nwith the AVI protocol here. So\nlet's make a quick readme and\ntalk about what we want to be\nable to do. So first, we're\ngoing to want to be able to\nlearn how to programmatically\ndeposit collateral. And if we\nstopped right there, that might\nbe enough, we'd be able to\nprogrammatically deposit\ncollateral, and in doing so we\nearn yield, we'd earn that\npercentage return just on our\ndeposited collateral. So\naccomplishing this by itself is\nalready a feat. But let's say we\nwant to go one step further, we\nwant to get into these more\ninteresting financial products.\nSo after we deposit some\ncollateral, we're going to learn\nhow to programmatically borrow\nand other asset, the deposited\ncollateral is going to be eath,\nslash wrapped eath, which we'll\ntalk about in a little bit,\nwe're going to borrow another\nasset, which for this demo is\ngoing to be dye. And the reason\nthat we're using dye is because\ndye is what's known as a stable\ncoin. So dye is actually a token\non the blockchain created by\nthis maker Dow where the price\nof the dye token is always\npegged to $1. So we're putting\ndown eath as collateral and\nwe're borrowing cryptocurrency,\nUS dollars, sort of, we're\nborrowing this token, which\nrepresents a US dollar and then\nwe'll just repay that I will\nrepay almost everything back and\nyou'll see why we don't repay\neverything back in a minute. One\nother protocol that I want to\ntalk about quickly is the\nuniswap protocol. And the\nuniswap protocol has become this\nhaven for trading. It's a\ndecentralized application that\nallows us to trade assets and\ntokens with each other on\nsomething called an automated\nmarket maker. It ends basically\na decentralized Stock Exchange,\nbut with tokens and again,\ntokens aren't exactly stocks,\nthey're very different. So when\nlooking to get some of these\nassets It's like wrapped\nAetherium or dye or link token.\nOn a main net, oftentimes,\nyou're going to use one of these\ndecentralized exchanges. And\nobviously, these decentralized\nexchanges are much fairer,\nbecause everything that happens\non them is transparent, much\nfairer than centralized finance,\neverything that happens on them\nis transparent. You can see\neverything that's going on on\nchain, which is absolutely\nphenomenal. So let's go ahead\nand get started here. And let's\njust create our scripts folder.\nBecause in this project, we're\nactually not going to create any\ncontracts ourselves, we're just\ngoing to learn how to interact\nwith these protocols. If you do\nwant to learn how to build some\nof these protocols, at the end\nof this session, we will give\nyou a ton of links. And we'll\nhave a special guest explain a\nfew different ways to learn how\nto build more of these\ndecentralized protocols.\nAlthough we've already built one\nwith our decentralized lottery,\nwhich is fantastic. Let's create\nsome scripts here. And for all\nof these things, deposit\ncollateral, borrow and repay.\nWe'll just put this all in a new\nscript called Ave borrow dot\nJas. So we're gonna do\neverything in here. And since\nthis is a script, it's going to\nhave the same setup, as we've\nseen before, right, so we're\ngonna have this main thing\naround an async function. Main,\nand then we'll have our imports,\nof course at the top. Now\nsomething that's important to\nnote, go to avi, we go to the\nprotocol, we kind of read\nthrough the docs, and eventually\nwe would find out the protocol\ntreats everything as an ERC 20\ntoken. And but we know that\nAetherium or the native\nblockchain token that you're\nusing, isn't an ERC 20 token.\nAnd the reason that treats\neverything like an ERC 20 token\nis that it's just much easier,\nright? If everything's using\nthis ERC 20 token standard, it's\nmuch easier to send in and\ninteract with stuff.\nOn a lot of these protocols,\nwhen we go to deposit Aetherium,\nor polygon, or arbitrary marks\ncetera, what actually happens is\nthey send your Aetherium through\nlike what's called a web\ngateway, and swaps it for weath,\nwhich stands for rapt ether. And\nit's basically Aetherium. But in\nan ERC 20 token contract, so\nwhat we want to do is going to\ndo that same thing, we're gonna\nskip kind of using this web\ngateway. And we'll just get the\nWeb Token ourselves, and we'll\nuse that as collateral. So in\nour script tag, I'm going to\nmake another file called Get\nweath.js. And in here, we're\nactually going to go ahead, and\nwe're going to build a script\nthat will deposit our token for\nweb token. Okay, so let's create\nthe script. And there's a link\nto the web token on ether scan,\nand on Main net in the GitHub\nrepo. And the way it works, is\nyou actually deposit Aetherium.\nAnd in return, it'll give you\nthe web token on Rigby right\nnow, by deposit 0.05. Go ahead\nand write I'm connected to ether\nscan, I'll go ahead and write\nthis transaction, I'm gonna\ndrink pee. So I don't really\ncare if it's if it's the actual\ncontract or not, because it's\nnot real money. But I'm going to\ndeposit 0.05 eath. And after our\ntransaction goes through, we\ncopy the contract address, we\nadd this token to our Metamask\nthe same way we added link will\nimport tokens, paste the address\nin here, add custom token,\nimport tokens will now see we\nhave some wet token in here, I\ndeposited 0.1 before so 0.1 plus\n0.05, which is why it shows 0.15\nBecause I did it twice, well,\nwhile I wasn't recording. So um,\nbut this is how you can get this\nwet token into your contract.\nAnd then anytime you want, you\ncan call this withdrawal\nfunction. And you can withdraw\nyour Aetherium out of this and\ndo what's called Burn your wet\ntoken. So when you swap back\nfrom weath to Aetherium, you hit\nthis withdraw and boom, you\nbasically swap them back because\nthis contract itself right now\nis holding your Aetherium token.\nPretty cool, right? So in our\nget wet function, we're not\ngoing to add this main thing\nhere, we're going to create get\nWest here just as kind of a\nmodule and we're going to import\nit into our Ave borrow. So we're\nnot going to do this this main\nthing that you see here.\nInstead, we're going to create\nan async function called Get\nWes. And then below, we're going\nto export it. So we'll do module\ndot exports equals get weath.\nAnd we're going to export it so\nour Avi borrow can use this get\nWest script that we're creating\nright now, let's add let's go\nahead and do this. Well, in\norder to interact with a\ncontract, we're going to need an\naccount. So we can do const\ndeployer equals await get named\naccounts, per usual. We'll do\nconst get name accounts equals\nrequire hardhat. My VS code\nautomatically imported that\nthank you VS code now. And now\nwe want to call the deposit\nfunction on the west contract.\nHow do we call this deposit\nfunction on the west contract?\nWell, how do you call any\ncontract? Well, what do you\nneed? You need the ABI and then\nyou need the contract address.\nDrill this in. You're always\ngoing to be the API and the\ncontract address to interact\nwith the contract. We know that\nif we give we know that if we\ngive our project the whole\ncontract, it'll get the API but\nwe also know If we just do the\ninterface, that's just as good,\nit won't give us all the\nfunctionality, but it will tell\nit will give us the API, it will\ntell our ethers, what functions\nit can use. So we're going to\ncreate a new folder, create our\ncontracts folder. And in here,\nwe're going to create a new\nfolder inside of that called\ninterfaces. And this is where\nwe're going to create our web\ninterface. Now a web interface\nis going to be really similar to\nan ERC 20 interface. So if you\nwant to go ahead and try to add\nit yourself, feel free to do so.\nOr what you can just do is you\ncan come to the GitHub repo\nassociated with this lesson,\ncome to iOS and just copy paste,\nright, you'll see the functions\nin here are exactly the same as\nan ERC 20, allowance approved\nbalance of decimals named blah,\nblah, with these additional\ndeposit and withdrawal\nfunctions. So I'm going to copy\nall this, move back over to my\nhard hat project, we'll create a\nnew file, we'll call I left dot\nsoul. And just to note,\noftentimes, a good best practice\nis to have interfaces, start\nwith eyes so that you know what\nto interface and then we'll\npaste it in here. Now in order\nfor this to compile, we'll need\nto use 0.4 point 19 version of\nsolidity. So what we can do is\nwe can come over to our, our\nhead.config.js. We have solidity\ncompilers, version 0.07, or\nwhatever versions that you have\nin here, we can add or just\nreplace. So I'm going to put a\ncomma here, version 0.4 point\n19. Save. And now in order to\nmake sure we can get that API,\ndo yarn, hardhats compile, or hh\ncompiled, and great, we compile\nthis interface. So now we have\nthe ABI to interact with. Now\nthat we have the ABI, a little\ncheck mark here, let's go ahead\nand get the contract address.\nBut for reasons that we're going\nto learn about very soon, we're\nactually going to work just with\nmain net set of getting the\nRinkeby test and address, I'm\ngoing to look up with main net,\nwe're going to find the web\ntoken on Main net. So I'm going\nto copy the address of main net.\nAnd again, you can just grab\nthis address from the GitHub\nrepo associated with this lesson\nas well. And for now, we're\ngonna say check a little check\nmark here, and paste the address\nthere. So now we're have the ABI\ncompiled from an interface, and\nwe have the contract address for\nmain net. But let's go ahead and\ncreate this contract now. So we\ncan say const, iOS equals await\nethers dot and then we'll need\nto import ethers from Hardhead\nas well. Ethers dot get contract\nat this is another one of these\nfunctions on ethers, it allows\nus to get a contract at a\nspecific address, we'll say get\ncontract app, we use the iOS ABI\nfor now, we'll just hard code\nthis address in here. And then\nwe'll connect it to the\nDeployer. So we're saying let's\nget this web contract with the\nABI of iOS at this address\nconnected to Deployer. So we\ncould go ahead and run await AI\nwith dot deposit. And we'll set\nvalue which will be some\namounts. Let's go ahead and at\nthe top, we'll say const amount\nequals let's do ethers dot utils\ndot parse, ether, and then we'll\ndo 0.0 0.02. So we'll deposit\n0.02 will say const TX equals\nthat will do await TX dot wait\none wait for one block to go\nthrough. And then we'll just get\nthe balance will say const. With\nbalance equals await I with that\nbalance of employer. So we're\ngoing to call the balance of\nfunction on our iWeb ERC 20\ntoken. And then we'll just do\nconsole dot log got West\nbalance.to string.\nSo we're using the main net\naddress in here. And we're gonna\nsay okay, we're going to deposit\nsome amount, we're going to\nwait. And then we're gonna go\nahead and get the balance right,\nso we're just depositing our\nAetherium so that we can get\nthat ERC 20 version of\nAetherium, that West token here.\nNow, you might be thinking,\nOkay, why are you putting the\nmain address in here? Let's\nPatrick, slow down. Let's go\nahead and let's create a mock\nWeb Token contract address.\nLet's deploy the mocks first,\nand then we'll go ahead and use\nthat same setup that we've been\ndoing this whole time, why you\nwhy you directly hard coding\nthis in here. Well, I've been\nalluding to this for some time.\nBut there's another way that we\ncan run tests in our smart\ncontracts. And this is with\nsomething called main net\nforking, we can actually do\nsomething where we fork the main\nnet, and run a local hard hat\nnode. That's pretending to be a\nmain net node. And all we have\nto do is update our hard head\nconfig to do so. So let's talk\nabout forking for a minute. So\non the left here, we have a\nblockchain an example of\nblockchain it's going to be\nsomething similar to a test net\nor main net like Rinkeby, eath,\nmain net polygon etc. This is\ngoing to be a blockchain that we\ndeploy to. Now there are a whole\nbunch of blocks in here, right?\nWe have this huge chain that we\ncan work with. And all this\ninformation on the blockchain is\npublic information, like this\nblock is going to have\ntransaction transaction\ntransaction, each one of these\nblocks is going to have a whole\nbunch of transactions. And all\nthis information is on this\npublic blockchain. In addition\nto all these transactions, it's\ngoing to have things like price\nfeed contracts, it's going to\nhave things like Ave contract,\nthe Web token, contract, etc.\nAll this contract information is\npublic. So hypothetically, if\nit's already there, we should be\nbasically able to copy this to\nour local environment and do\nsome simulations ourselves. And\nthat's exactly what forking\ndoes. A fork blockchain\nliterally takes a copy of an\nexisting blockchain like on the\nleft here and brings it on our\nlocal computer. We actually have\ncontrol over our blockchain\nthat's running locally, because\nit's gonna run on a local\ncomputer, similar to hard hat.\nNow, everything we do on this\nlocal forked blockchain is not\ngoing to affect main them,\nbecause it's a simulated\nblockchain. It's just running in\nour local environment. So we can\nactually interact with this\nforking this kind of local\nblockchain that resembles that\nmimics the actual blockchain.\nAnd here's what forking doesn't\ndo, it doesn't download the\nentire blockchain into our local\nsetup. Anytime we reference an\naddress. Anytime we reference,\nhey, there's something at a\nspecific address, we make an API\ncall to our Aetherium node,\nwhich again, we're using alchemy\nand say, hey, oh, what's at this\naddress, and it'll return just\nthat specific contract for us.\nThis way, we don't have to\ndownload the whole blockchain.\nAnd it's a lot quicker. And we\ncan also do this forking to run\nour tests to run our scripts to\ndo everything. And now you might\nbe thinking, wow, Patrick, this\nsounds awesome. Well, why don't\nwe just do this for everything?\nWell, there's some trade offs.\nThe pros are that it's quick,\nit's easy, and a test will\nresemble what's on Main net. Now\nthe cons are that we need an\nAPI, and we can't do everything\nlocally. Some contracts, some\ncontracts are complex to work\nwith, and mocks might just be\nbetter. But using a forked\nnetwork might be a good way to\nrun your tests, it might be a\ngood alternate to just using\nmocks. So it really depends on\nwhat's right for you and right\nfor your project. But it is a\nfantastic tool, especially for\nsomething like Avi, where we\nwant to quickly test some\nthings. Now the hard forking\nalso will give us a bunch of\nfake accounts. So we'll still\nget a bunch of fake accounts on\nMain net that will be given a\ntheorem. So we'll get fake main\nnet accounts for this forking.\nSo for the rest of this, we're\ngoing to be using this forking\nto run our scripts and run our\ntests. If you want to go back\nafter this and try this all out\non COVID. We've got a whole\nbunch of different addresses for\nthe COVID network so that you\ncan run these scripts directly\non COVID. And you can see the\ntransactions yourself. Just note\nthat when using COVID, you'll\nwant to make sure that you're\nusing the same addresses, as are\nin the AVI docs for the COVID\nnetwork, because they do change\nsometimes. Great, let's go\nahead, we'll go to our RT head\ndot config dot j s. And now\nwe'll go to our networks, which\nright now, I don't have\nanything, I only have ranking.\nAnd we'll add hard hat in here,\nwe'll add a little comma down\nhere. And we'll say, you know,\nthe chain ID of course is going\nto be 31337. We'll add this\nforking keyword. And in here,\nwe'll say the URL for a Forking\nis going to be our main net RPC\nURL. And this is another reason\nwhy we're using alchemy. Alchemy\nis fantastic at these forked\nblockchains, and has really good\npieces here. So what we can do\nis we can come back to our\nalchemy dashboard, we'll create\na new app. This one will be for\nAetherium main net, and we'll\nsay forking chain. We'll say for\nforking, we'll go ahead and\ncreate this on a theory and main\nnet. Now that we have this\nforking chain, we can do the\nsame thing. We'll grab our API\nkey, we'll come back to our\nproject, create this new file,\nwe'll create our dot env. And\nwe'll do main net RPC URL equals\nand paste that in there. In our\nHardhead config, we are now\ngoing to be forking from mainnet\nRPC URL whenever we work with\nthe heart at blockchain. So now\nthat we have this in here, let's\ngo ahead and try to run this get\nwet function. Because since\nwe're forking the blockchain, we\nshould be able to go ahead and\nsimulate this. So backing off a\nborrow, we'll go ahead we'll do\nconst, get weath\nequals require and then we'll\npull this script that dot dot\nscripts slash get weath. And\nthen, in our main function,\nwe'll just run await yet. So to\nrun our script here, we'll do\nyarn hard hat, run scripts\navevamo.js. And our default\nnetwork is hard hat. So we could\neither do dash dash network hard\nhat or just run it. And\nremember, since in our config,\nwe're saying, hey, when we run\nthe hard hat chain, use this\nforking, we're going to be\nforking, so let's go ahead Run\nthis ran to air main. Net RPC\nURL is undefined. Well, that\nmakes sense. Let's go ahead and\nadd this consummated RPC rel\nequals process study and v dot\nmade it RPC URL. Let's try this\nagain. And we now see we got,\nyou know, this much weath,\nwhich, again, that much wealth\nis gonna be\n1-234-567-8910 1234567 0.02\nwealth, which is exactly what we\nwant. So now we have a way to\ninteract with main net locally,\nwhich sounds kind of crazy. But\nhe's incredibly powerful for\nexactly what we're doing right\nhere. So we have a way to fork\nmain that eath and run our\nscripts and kind of test to see\nand simulate what it would be\nlike to actually run these\ntransactions. So we're gonna do\nlike that, our get with function\nlooks good. And obviously, we\nwould still modularize this, we\nput this in our helper Hardhead\nconfig, but we're going to skip\ndoing that for now. So let's go\nhead back to the AVI borrow. And\nlet's go ahead and flesh the\nrest of this out. Now, let's go\nahead and set up the rest of the\nboilerplate here. So we'll do\nconst Deployer, because we need\nan account, obviously equals\nawait, get named accounts. And\nthen we'll do const get named\naccounts equals require. Now we\nwant to start interacting with\nthe ABI protocol, well, what do\nwe need, we're gonna need the\nABI and the address, nothing\nchanges, we're gonna need these\ntwo. So what we can do is we can\ngo to the Ave docs. And again,\nwe're going to be on V two. And\nwe can go ahead and find the\ncontract address in here. Now\nthe way it works is they\nactually have a contract, which\nwill point us to the correct\ncontract. The contract that\nwe're going to be doing all the\nlending with is this lending\npool. And there's actually a\ncontract to get that contract\naddress. And to get the lending\npool address, we have to go to\nthe lending pool address\nprovider. It's this contract\nthat will tell us what the\naddress of the lending pullets.\nAnd we can actually see the\ndeployed contract section, we\ncan see the address of this\ncontract. And we can see the\naddress of all the main ones and\nthe COVID. Once again, if you\nwant to play with this on COVID.\nBut we can see lending pool\naddress provider is going to be\nlocated right here, we can copy\nthis address. And we'll just\ntake notes of this.\nAnd that lending pool, we're\ngoing to get from the lending\npelagics provider. So let's\nactually create a function that\nwill get us the lending pool\naddress from the lending pool\naddress provider. So down here,\nwe'll create async function, get\nlending pool. Now in order to\ninteract with this lending pool\naddress provider. Same thing,\nwe're going to need its address\nand its API, we have its\naddress. So let's go ahead and\nget its API, you can go ahead to\nthe GitHub repo associated with\nthis lesson. And just copy paste\nit from the interfaces section.\nYou could also look directly on\nthe blockchain to see what this\ncontract looks I can create your\nown interface. Or we can go\nahead and use the interface\nright in the documentation. So\nwe have islanding Palach.\nProvider, I'm just going to copy\nthis from the ABI docs. But\nagain, you've got a number of\noptions. And so in our contracts\nin our interfaces, let's let's\nstick iwth in interfaces here.\nLet's create a new file. And\nwe'll call it I lending pool\naddress provider, dot soul. And\nwe'll paste it in here, we just\nsee we're using 0.6 point 12. So\nbe sure to in our Hardhead\nconfig to make sure we have that\nwe don't so we're just create a\nnew one 0.6 point 12 And then\nwe'll compile yarn Hardhead\ncompile and compiles so awesome.\nWe now have the ABI here, we'll\nget this contract by saying\nconst lending pool address\nprovider equals await ethers dot\nget contract at will say I\nlending pool address oops\naddress as I lending pool\naddresses excuse me, I'm going\nto update the name I Lenny pull\naddresses provider islanding\npool addresses provider, we're\ngoing to pass in that contract\naddress that we got from the\nOvid docs here. Paste that in.\nAnd then we're going to connect\nit to our Deployer. So we're\ngoing to have our get lending\npool, get past that account\nvariable and then we'll just use\nthe account here to connect it\nand the account that we're going\nto pass is of course going to be\nour Deployer. In our lending\npool address provider. There's a\nfunction called Get lending pool\nwhich returns the address of the\nlining pool and this is going to\nbe the function that we're going\nto call so we're gonna say const\nlending pool address equals a\nweight lending pool address says\nprobes address any pool address\nsays provider dot get lending\npool and that's it we'll have\nthe lending pool address and\nthen we'll have this contract\ngive us the lending pool\ncontract by doing const lending\npool equals await ethers dot get\ncontract Add. And we need to do\nthe same thing, the interface,\nthe interface, the address, and\nthen the account. So back in the\ndocs, we can grab the I lending\npool by copying this like this.\nWe'll go back to our contracts\ninterfaces, new file, I lending\npool, that's all. And we'll\npaste it in. Now with this one,\nif we scroll to the top, we\nnoticed that we're importing\nfrom some local places that we\nactually don't have in our\ncontracts area, we can once\nagain go ahead and add the AVI\nprotocol v2 from NPM. And just\nuse this as our imports. So\nwe'll do yarn, add dash dash dev\napt have a slash proto call\nhyphen V two. And now that we\nhave the Add Ave protocol in our\nnode modules, we can update\nthese imports to point to our\nnode modules instead of our\nlocal files. So I'm just gonna\ngo ahead and tell you that the\nislanding pledge provider is\nthat Ave slash protocol hyphen V\nto slash contracts slash\ninterfaces. And then data types\ndot soul is gonna be at of a\nprotocol hyphen v2 slash\ncontracts slash, proto call\nslash libraries, slash types,\ndata types, that's all again to\nmake sure this is right, yarn,\nHardhead compile or hh, compile.\nAnd Cool. Looks like I did that\nright? Lending pool equals await\nethers dot get contract at,\nwe're going to be using lending\npool, I lend the pool here,\nwe're going to use this lending\npool address got from the\naddresses provider. And then the\naccount, which is going to be\nour Deployer. And now we can do\nreturn lending pool. And if we\nwant, and now that we have this\nfunction get lending pool backup\nin our main function, we can say\nconst lending pool equals a\nweight, get lending pool and\nthen pass the Deployer. And then\nwe can even do a little console\ndot log,\nlending pool address and then do\nlending pool dot address. And\nsince we're making it forking,\nwe can kind of just keep running\nthis right. So we'll do yarn\nhardhat run scripts. Ave Baroda\nJas, there are multiple\nartifacts for contract II\nlending pool addresses provider.\nAnd this is because in our node\nmodules, import all this stuff\nfrom contracts and in here, and\nthere's already in islanding,\npool addresses provider in those\nadd ons slash contracts. So\nactually, we don't even need\nthis, I lending pool added\nservice provider, we can go\nahead and delete it. Our time\nright now is getting confused.\nIt's saying Oh, are you\nreferring to the one that you\ndownloaded from NPM or the one\nthat you made, which which one\ndo you want to use. So we'll\njust make it easier for hardhat.\nAnd we'll say okay, well, we'll\ndelete the one that we created,\nwe'll use the one that we've\ndownloaded here. And now we\nshould be good to run this\nagain. Because now there's only\none for to pick from, which is\nthe one we downloaded from NPM.\nAnd perfect, we get our get\nweath printout here, and then we\nget lending pool address is\nhere. And this is going to be\nthe actual lending pool address\non ether Aetherium main net. So\nif we go back to ether scan,\ncopy that address and paste it\nand ether scan, we can see it's\neven labeled Ave v two, and we\ncan see a ton of transactions\ngoing through all the time. And\nether scan is having a hard time\nkeeping up with all the\ntransactions. So we've got the\nlending pool address, we've got\nsome web token, what do we need\nto do? Now we want a deposit of\nwhat do we need in order to\ndeposit the token? Well, if we\nlook at the deposit function in\nthe avec GitHub, we can scroll\nin here and we see it eventually\nwe'll call this safe transfer\nfrom which is basically going to\nbe this transfer from function,\nsince we're calling transfer\nfrom it's going to be this\ncontract, that's actually going\nto pull the money out of our\nwallet. So in order to give the\nAve contract, the ability to\npull the money out of our\nwallet, we need to do what we're\ngoing to need to approve the\ncontract. So first, before we\ncan even deposit we're gonna\nneed to approve it to get our\nweb token, we're gonna have to\nget the Web Token first. So\nlet's get the Web Token address\nwe'll say const Web Token\naddress, equals and this is\nwhere we marginalize it and get\nit from our hard head helper\nconfig. But for now, we can just\nhard code it, the Web Token\ncontract address is going to be\nthe exact same thing as what's\nin get web and then want to\napprove. So let's write an\napproved function because we're\ngoing to use this a couple\ntimes. So we'll make an async\nfunction and approve ERC 20\nAnd we'll take a contract\naddress a spender address, which\nis going to be the contract that\nwe're going to give the approval\nto to spend our token and amount\nto spend so exactly how much we\nwant to prove it. And then an\naccount to do all this on. So in\nhere we'll say const ERC 20\ntoken equals await ethers dot\nget contract at. And we could\nsay I WEF but maybe we just want\nlike a simple ERC 20 token\ninterface. And we're going to\ngrab that by cheating a little\nbit coin to our hard head defy\nFCC. We're going to go to\ninterfaces and grab this\ninterface from here. So we're\ngoing to copy this, paste it in\nhere New File IO ERC 20 dot som\npaste and now we have an ABI for\nERC. 20s So we'll do get\ncontract that ERC 20 Actually\nlet's change this name to ERC.\n20 address so we're going to get\nthe contract with the ABI of IRC\nERC 20 at contract address ERC\n20 address and then we'll\nconnect it to our account here.\nSo and once we have the ERC 20\nWe can do const TX, we're going\nto do that approve transaction\nwe'll do a weight ERC 20 token\ndot approve spender address, and\nthen amount amount to spend.\nWe'll do we'll do a wait TX dot\nwait for one block. And we'll do\na little console dot log saying\napproved. Now if you don't run\nthis function before you try to\ndeposit you'll just get an error\nsaying hey, token is not\napproved, which is a pretty\ncommon error. So if you ever see\nthat just know, I forgot to\napprove my token. So backup in\nour main script, we'll go ahead\nand run this function. We'll say\nawait approve ERC 20 with the\nWeb Token address lending pool\ndot address because we want to\ngive the len pool the approval\nto pull our web token from our\naccount. And then we'll give it\nsome amount to actually will\nimport a mount from get weath as\nwell. Mount we gotta go back to\nget with an export it so we can\nactually import it. So get with\nexporting that amount that 0.02.\nSo we'll prove the amount and\nthen we'll connect we'll have\nour Deployer do it obviously\nbecause we're doing everything\nwith the Deployer. So we'll\napprove the ERC 20. And then\nonce we approve, we can go ahead\nand deposit it. So we'll say\nconsole dot log, depositing\nthat. And then we'll run await\nlending pool dot deposit. If we\nlook at the deposit function, we\ncan see all the parameters that\nthe deposit function takes. We\ncan also see it in the Ave v2\ndocumentation and we just look\nforward the posit. And we can\nsee it takes the address of the\nasset that we're going to\ndeposit how much of that asset\nwe're going to deposit address\non behalf of we're going to do\nit on behalf of ourself and then\na referral code, which right now\nis just always going to be zero\nbecause the referral code has\nbeen discontinued. So we're\ngoing to deposit the wet token\naddress, we're going to deposit\nour web token, we're going to\nposit 0.02 of that web token.\nAnd then we're going to use a\ndeployer ash and then referral\ncode is going to be zero. And\nthen we'll do a little console\ndot log the positive. So let's\ntry this script. Let's see if it\nworks. I'm just going to hit up\nto go ahead and rerun this\nscript to rerun this command I\njust ran into doing a little\ncompiling that ERC 20. That song\nwas compiled one solidity file,\ngot a bunch of wrapped Aetherium\nlending pool address. We\napproved it, we deposit we were\ndepositing it and then we\ndeposited it. So if we're\nlooking at our little readme\nhere, we get a little checkmark.\nWe've done step one, we've\ndeposited our collateral.\nAwesome. So now we have some\ncollateral to use to borrow\nother assets. Great. So now\nwe've deposited let's go ahead\nand learn how to borrow now\nthrough a couple of new lines,\nand we'll say borrowed time. So\nin order for us to borrow, we\nprobably want to know how much\nwe can borrow. And we want to\nknow more about our account,\nright? We want to know how much\nwe have borrowed, how much we\nhave in collateral and how much\nwe can borrow. So there's a\nfunction that Avi comes with\ncalled Get User account data,\nwhich will return the user's\naccount data across all\nreserves, how much collateral we\nhave down the total value it in\nits eath price, we have the\navailable borrows and eath\ncurrent liquidation threshold,\nloan to value etc. Now these are\nreally important metrics. If we\nhave one, eath and collateral\nthat doesn't mean we can borrow\none eath of assets. Each one of\nthese tokens have some different\nvalues like loan to value. For\nexample, if you have one eath\nyou can only borrow zero point\n75 for the dye token, this is to\nreduce risk of the collateral\nand reduce risk of people not\nhaving enough collateral down as\nprices fluctuate. There's a\nliquidation threshold of 80% if\nyou have one eath as collateral\nand point 81 eath borrowed,\nyou'll get what's called\nliquidated. So what is\nliquidation? When you put down\ncollateral and you borrow, if\nthe amount that you have\nborrowed past this liquidation\nthreshold is passed that 80% Or,\nor depending on different\nassets, it's different people\ncan do what's called liquidate\nyou. This is when they pay back\nsome of your loan that you took\nout. And they also get to buy\nsome of your collateral at a\ncheaper price. This keeps the\nAve platform solvent, and it\nmakes it so that there's never\nmore borrows than there are\ncollateral in order to borrow\nassets, we still need that\ncollateral down. So basically,\nif you borrowed more money than\nyou've put up, other users can\ncan take the money that you've\nput up in return for them paying\nfor your loans. So we obviously\ndon't want this to happen. And\nthe audit protocol\nprogrammatically doesn't want to\nhave not enough money to do\nthis. So they incentivize users\nto liquidate, in case of these\nfailures is the protocols come\nwith this thing called a health\nfactor, which if this health\nfactor is below one, you go\nahead and you get liquidated,\nthe actual function to liquidate\nsomebody is called liquidation\ncall. So you can actually build\na bot and you can liquidate\nusers who go insolvent and you\ncan make a fee, you can make a\nreward for actually doing this.\nThese protocols need to stay\nsolvent, they need to have\nenough money to lend out. And\nthey programmatically enforced\nthis, which is why it's so\ngreat. You can learn more about\nliquidations in the liquidation\ndocumentation. So this get us\naccount data will tell us how\nmuch we have collateral, how\nmuch we have in debt, and how\nmuch we have available to borrow\nbased on how much collateral we\nhave. We can see the current\nliquidation threshold we can see\nthe loan to value and then we\ncan see our health factor, which\nis obviously really important.\nIf our health factor ever falls\nbelow one, we get liquidated. So\nwe never want this hell factor\nto fall below one when we're\nborrowing assets. So let's\ncreate a function that can grab\nthat first. So let's create a\nnew function called async.\nFunction get it borrow user\ndata, and we'll pass in the\nlending pool contract, we'll\npass in the lending pool\ncontract and the account that we\nwant to get the data for. So we\ncan say const. And actually, we\ncan pull out just the values\nthat we want, we could pull out\nthe total collateral eath total\ndebt eath and the available to\nborrow. Let's just pull out the\ntotal collateral eath the total\ndebt if and the available,\nborrows. So this equals await,\nlending pool dot get user\naccount data of account. And now\nwe'll even just kind of logged\nus out we'll say console dot log\nyou have total collateral eath\nworth of eath the positive\nconsole. Log you have total debt\neath worth of eath borrowed and\nthen console dot log you can\nborrow\navailable borrows eath worth of\neath. And then we'll just return\navailable to borrow will turn\navailable borrows eath. And\nwe'll return or total debt, we\ndon't really need to return\ntotal collateral we could if we\nwant we really just want to\nprint it out here. So now back\nin our function, we can do in\nour main function, we can run\nlet, I'm going to do that\nbecause we're going to be\ncalling this a few times\navailable borrows eath. And\ntotal debt eath\nequals await, get borrow user\ndata of lending pool and\nDeployer. And if we run this,\nwe'll see how much we can\nactually borrow yarn hard hat or\njust h h run scripts on a\nborrowed.js and work on our\nforked blockchain here. And\nremember, it is going to be a\nlittle bit slower. And this is\nkind of one of the disadvantages\ntoo because it does have to make\nAPI calls whenever we want to\ninteract with these chains. And\nthen we got total collateral\neath is not defined. And that's\nbecause I spelt total wrong. So\nlet's spell total correctly. And\nwe'll run this again. But okay,\ngreat. So you have this month's\nworth of eath deposited, you\nhave zero worth of eath borrowed\nbecause we haven't borrowed\nanything, and you can borrow\nthis much worth of eath.\nRemember, the amount that we can\nborrow is always going to be\nless than the total amount that\nwe have as deposited. That's why\nwe see this lower number here.\nSo cool. So that's how much we\ncan borrow. Let's use that to go\nand borrow some time. So we have\nthis total amount we can borrow\nan eighth and we're gonna get to\nborrow time. I promise we're\ngonna get to borrow time, but we\nneed to figure out What's the\nconversion rate of diets? We're\ngonna get how much we can borrow\nin eath. But we want to borrow\ndye. So how much of dye can we\nborrow based off of the value of\neath? And to do that, we're\ngonna have to get the dye price.\nAnd how are we going to do that?\nWell, you guessed it, we're\ngoing to use chain link price\nfeeds. If you look in the AVI\ndocumentation, you can find\nprice Oracle, which is a\ncontract that you could actually\nuse right directly from Avi. But\nthe first thing it does is check\nfrom a chain link aggregator,\nwhich we already know how to do.\nSo we're gonna go ahead and just\ncall directly from the chain\nlink aggregator. So let's create\na new function function, we'll\ncall it get dye price is first\nwe're going to need to get that\ninterface, same thing. So you\ncan either go right to Hardhead\ndefy and just grab the interface\nright from here, we could swap\nthis out with just an import\nfrom chainlink NPM, as well. But\nI'm just going to go ahead and\ncopy paste a new file, this is\ngoing to be the Ag reg gate, Tor\nv3 interface. Dot saw that we've\nworked with so many times. Now\nthat we have this interface,\nthis will compile, we're\nobviously looking for latest\nround data, which will give us\nthis answer here, which is going\nto be the price. So let's go\nahead and grab that. So we'll\nsay const di eath price feed\nequals await ethers dot get\ncontract at and we'll use the\nair, Greg a Tor v3 interface\nwill get the dye eath price feed\nright from the chain link Docs.\nSo we go to docs dot chain dot\nlink UVM chains will go to\ncontract addresses on Aetherium.\nOr look for di eath on Main net.\nAnd we see di eath is right\nhere. So we'll grab this and\nagain, we're just hard coding it\nin the GitHub repo associated\nwith it. With this, we put it in\na little config file, but we can\njust go ahead and hard coded in.\nAnd for this one, we don't need\nto connect this to the deployer\naccount. Since we're not going\nto be sending any transactions,\nwe're just going to be reading\nfrom this contract, right. So\nreading don't need a signer\nsending me to signer. Now we can\nsay const price equals a weight\ndye eath price feed dot latest\nround data. Now latest round\ndata, as we know is going to\nreturn us this huge thing. And\nwe only want the answer at the\nfirst index. So another way we\ncould do this, we could just\nwrap this whole thing up. And\nthen once this returns, we're\ngonna say okay, just grab that\nfirst index here, which will be\nthat price. And then we could do\na little console dot log, the dy\neath. Price is in price dot two,\nlike that, and then return\nprice. So we can go ahead and\nrun this as well test this out,\njust by hitting up and then\nenter. Depositing we deposited\nthis is how much we can deposit.\nNothing Oh, and I forgot to call\nit oh, excuse me, let's go up.\nThis, let's say const dye price\nequals await get dye price. And\ntada. The dye youth price is\nthis big number, which of course\nwe know is going to be $3,289\nwhich is which of course is\ngonna be 3289 di per eath. Now\nthat we have the dye price, we\ncan figure out how much dye we\nwant to borrow. So great, we\nhave the price. Now let's figure\nout the amount that we can\nborrow in dye, we have the\namount we can borrow eath, we\nneed to convert it to die. So\nwe'll say const amount die to\nborrow equals available, be the\navailable borrows in eath.to\nstring. And then in JavaScript,\nwe can do this.to string but\nstill do math. So times 0.95\ntimes and then we'll do the\nreciprocal of that die. So one\ndivided by die price.to number.\nSo this will give us the amount\nof die that we can borrow. And\nthen we'll want to get this in\nway. So if we print this out\nright now, console dot log, you\ncan borrow.\nRun this now, you can borrow\namount die to borrow. Not in way\nunits, which we need in way\nunits, but you can borrow 48\nDie, which based off the price\nlooks about right. So to get the\ncorrect units, we'll say const\namount, di to borrow way. That's\ngoing to equal ethers dot utils\ndot parse ether, MT di to\nborrow.to string. This is just\npurely the amount of dye to\nborrow right so we get 48.79\ndie. But again, we want that in\nway the die token has 18 decimal\nplaces similar to Aetherium. So\nwe need that amount in way and\nthen we can go ahead and start\nactually borrowing now. So we'll\ncreate a new function called\nborrow die async function,\nborrow die will take the die\naddress. Take the lending pool,\ntake the amount die to borrow\nand weigh in Then of course,\nwe'll take the account. And all\nwe'll do is we'll do const.\nBorrow TX is going to be a\nweight, lending pool dot borrow,\ndie address, amount die to\nborrow. And again, we can go\nright to the documentation, if\nwe want, it takes the address of\nthe asset, the amount, we want\nto borrow the interest rate\nmode, which is going to be\nvariable or stable, the referral\ncode and then address on behalf\nof, we're going to say one for\nthe interest rate mode, where\none is going to be stable. And\nthen we're going to do zero or\nthis referral code because\nthat's debunked now, and then\nwe'll do a count, then we'll do\na wait, borrow TX dot Wait, wait\none transaction, and then we'll\ndo console dot log you've\nborrowed. Well, and that's it.\nSo we now have this borrowed I\nfunction. So back up in our main\nfunction, right, now, we can\nfinally do the borrow time. So\nwe'll do a wait, borrow die. And\nwe'll pass those parameters in\nhere. So we're going to do\nconst, die token address, equals\nand we're just going to hard\ncode this from main net. So we\ncan look up die token address,\nmain net, we'll grab this\naddress here, this looks like\nthis is indeed the DI token, we\ncheck right on the object get\nup, we could check right on the\nABI of actual code, since we're\njust testing, we're just gonna\ngo ahead and grab from ether\nscan here. So for borrow dye,\nwe're gonna need the dye token\naddress, we're gonna need the\nlending pool contract the amount\nof dye to borrow in way, and\nthen our Deployer. And then\nwe'll await borrow dye. And then\nwe will run this get bar user\ndata again, just print out the\ninformation about where we are\nafter we do that. So when we can\nrun this, again, we should see\nthe amount that we have\nborrowed, updated, our first\ncall to that function is gonna\nsay, Hey, you have this much eat\nthe positive Do you have nothing\nborrowed, you can borrow this\nmuch eath, we get the price, we\nget how much we borrowed, we\nborrow. And now it says you have\nthis much where the eath\ndeposited and you have this much\nworth of eath borrowed and you\ncan borrow this much eat. So we\nactually now have bought a bunch\nof this dye actually borrowed.\nAnd the reason we're doing times\nzero point 95, we don't want to\nhit that cap of the maximum\namount that we can borrow. So\nwe're saying hey, let's get 95%\nof the amount that we actually\ncan borrow. So we're not going\nto borrow everything, we're just\ngonna borrow 95%. And you can\nsee that the amount of eath we\nhave deposited is actually\nhigher. This is because we're\nactually gaining interest just\nby having this eath deposited.\nAnd now that we have some dye\nborrowed, we borrowed 48 dye,\nwhich is equivalent to this much\nAetherium. And then we still\nhave a little bit more we can\nborrow because we only borrowed\n95%, which is great.\nAwesome, we've taken out a\nborrow programmatically, let's\nrepay at least some of it here.\nSo we're gonna have to create a\nnew function that's going to use\nthe repay function in the\ncontract. So we're gonna do\nasync function repay, and this\nis going to take the amount that\nwe want to repay the dye address\nthat we're going to repay the\nlending pool and then the\naccount now to repay once again,\nwe're going to have to approve\nsending our dye back to Ave So\nin here, the first thing we need\nto do is we actually need to\ncall wait prove ERC 20 with the\ndye address, lending pool dot\naddress, mount and then\naccounts, right because approve\nERC 20. That's the input\nparameters it takes, and we need\nto approve sending the dye back\nto the contract. So we borrowed\nit, and we're gonna send it\nback. Now we're actually going\nto send it back. So let's say\nconst, repay TX equals await,\nlending, cool that repay the\naddress, amount, one account.\nAnd then we'll say await repay\nTX dot Wait, that will do\nconsole dot log repaid up in our\nmain function, we're going to do\na weight repay, and we're going\nto give it the amount dye to\nborrow in way. We're gonna give\nit the dye token address, give\nit lending pool, and then we'll\ngive it deployer get you borrow\nuser data one more time just so\nwe can print out the final\namounts. Now, you'll notice\nsomething though, we're going to\ngive back all of the dye that we\nborrowed. However, we're still\ngoing to have a dye balance,\nyou'll see that when I run this\nthat we're still have a little\nbit of Aetherium borrowed,\nbasically, we'll still have a\ndye balance because we'll still\nhave a little bit of die borrow\nand try to figure out why before\nI answer it actually. So we have\nthis tiny, tiny tiny amount of\neath borrowed here and we have a\nmuch larger amount of eath\ndeposited so Why do we still\nhave this tiny, tiny amount of\neath borrowed? Well, the reason\nis because as we borrow dye, we\nactually accrued interest. So we\nstill owe dye back. Now what we\ncan do is we can do something\nlike uniswap, to actually swap\nour Aetherium, for dye to repay\nthe rest of our debt here. And\nthat's how we could actually\nfinish repaying all the debt is\nto get a little bit more dye to\npay off that interest that we\nhad accrued. And if you want,\nyou can go back and you can do\nthe exact same thing we did here\nto grab the uniswap code, place\nit in here to programmatically\nrepay your debt as well. But at\nthis point, you have just gone\nthrough the entire lifecycle\nhere. And that is absolutely\nmassive, huge congratulations.\nYou've just deposited borrowed\nand repaid tokens from the AVI\nprotocol. Now I'm going to go\nbriefly show you what some of\nthese transactions are going to\nlook like on an actual test net,\non an ether scan, you'll see\nthat when we deposit our\ncollateral, we actually get back\nwhat's called an A token, or an\ninterest bearing token, these\ntokens keep track of how much\ncollateral or in our case how\nmuch web token we have deposited\nin the AVI protocol. And when we\nwant to withdraw our wealth\nback, we burn these eight\ntokens, we remove these eight\ntokens, you can see that our\nfirst transaction is going to be\ndeposit and I wanted to show you\nwhat it looks like when you\nactually deposit one of these\ntokens, this transaction\nassociated with this lending\npool, that deposit right here,\nif you look at tokens transfer\ndown here, you can see we\nactually we deposited, you can\nsee that we actually sent rapt\nether to the ARB a contract. Now\nyou'll also see this a weath\nstuff here. So what is this a\nwith stuff. So to keep track of\nhow much you've actually\ndeposited into Ave, Ave will\ngive you your own a wealth token\nor a token to keep track. And\nthis is this interest bearing\ntoken, you actually can see up\nhere a little bit of interest\nalready for actually depositing\nthese tokens into the protocol.\nAnd it's this token, that will\nkeep going up, the more people\nborrow and the more people use\nthe protocol. So you can\nactually grab this token\naddress, interest bearing token\nthis a token, I can import it\ninto my meta mask. And I can see\nthat I have 0.1, which\nrepresents my initial deposit\n00517 dot that dot A with and if\nyou keep this up long enough,\nthis number will slowly go up as\nyou get more and more. Because\nthe interest keep out and you\ncan see just went went up right\nthere, the interest will keep\nchanging and keep going up.\nObviously, we have so little\ndeposited that the interest\nisn't gonna go up very quickly,\nbut it will go up, the more\npeople use the protocol. And\nsince I'm using a test net, the\nactual usage of the protocol\nisn't very high, but you get the\npicture.\nAwesome, you've done phenomenal\nto get this far. Let's do a\nquick recap of everything that\nwe've learned. And then we'll\nhead on to the next section. So\nfirst, we learned about the web\ntoken or the wrapped Aetherium\ntoken, it's a way to tokenize\nour Aetherium or layer one\nblockchain native token. Then we\nlearned a little bit about the\nAVI protocol, and how it's this\ndefy primitive for borrowing and\nlending assets. And we can\nactually gain interest by\ndepositing our tokens and our\nassets into Ave we learned a\nlittle bit of also about\nuniswap, which is another\nincredibly important defy\nprotocol, which allows us to\nswap tokens between each other\nin the decentralized context,\nthen we learned that we can\nactually deposit some of our\ntokens into the AVI protocol,\nwhich is a decentralized\nborrowing and lending platform\nand similar to a bank will\nactually gain interest on our\ndeposited tokens. But first, we\nhave to approve them. Because\nanytime you want a contract to\ninteract with your tokens, you\nneed to approve the contract to\ndo so. And then we go ahead and\ndeposit once we deposited we got\nthe dye price. And then we\nlearned that we can actually\nborrow dye we can borrow an\nasset based off of how much\ncollateral we put down. And then\nwe learned how to repay it back.\nWe learned about forking a\nblockchain as opposed to using\nour own main blockchain. Another\nthing to know if you are using\nan RPC URL like something from\nalchemy so awesome you've\nlearned a ton about defy now\ndefi is an absolutely massive\npowerhouse when it comes to the\nblockchain. And it is one of the\nmost important things\nblockchains can do. If you want\nto learn more about defy and\nread more on Defy. I've got some\nmore links in the GitHub here so\nthat you can learn more about\ndefy and one of them in\nparticular that I want to show\nyou is this one called speed run\nEtherium. Not only does it give\nyou a ton of defy examples, but\nit gives you a whole bunch of\nother examples as well. And this\nwill be a good test of\neverything that you've learned\nafter you pass this course. Or\neven right now if you want to or\nwhenever you want and to talk\nabout it a little bit more, we\nactually have Austin Griffiths\nhere to talk a little bit more\nabout speed run Aetherium\nhimself, I'll pass it over to\nAustin.\nHey, what's up, I'm Austin\nGriffith, I want to show you\nspeed run Aetherium. speed run\nAetherium is a great way to get\nstarted in Aetherium. If you are\na developer, it's targeted at\nweb two developers becoming web\nthree developers speed run a\ntheory. m.com is the website. It\ntakes you through both getting\nstarted and kind of getting\ngetting an idea for the language\nand the syntax. But that's just\nthe start. Just understanding\nthe language is just the start,\nyou feel like you're you can do\nanything. And you're on the top\nof the world when you finally\nget the syntax of solidity\ntogether, and you can jam\nthrough a smart contract. But\nreally getting context with the\nspace and figuring out what\nworks and what doesn't, that's a\nwhole nother battle. And that's\nwhere speed run aetherium.com\ncomes in. So let's speed run the\nspeed run. First, you will get\nscaffold e down speedrun\nAetherium kind of revolves\naround scaffold eath and uses\nscaffold eath as a base, you'll\nwant to tinker around with some\nideas within solidity. And let\nme show you what I mean by that.\nSo with scaffold eath, you have\na front end and you have your\nsmart contract. So scaffold eath\ncomes with hard hat out of the\nbox. And you will use the\ncombination of hard hat and\nreact to build a DAP where\nyou'll deploy both the smart\ncontract and the front end. And\nthis, this ability to edit your\nsmart contract and have your\nfront end auto adapt to it is\nkind of the key to scaffold\nease. I just added some extra\nextra exclamation points. But\nwe'll see that show up over\nhere. Once this contract\ndeploys, there we go, there's\nthat. So just real quick, again,\nif I create like a un 256 public\ncounter, and we set that equal\nto five, and then I build a\nfunction called increment,\nthat's public that does counter\npublic, there we go, that does\ncounter plus, plus, you can\nimagine what's going to happen\nhere. So you, you edit a little\nbit of solidity, you deploy your\ncontract, and then your front\nend auto adjust to that. And it\ngives you the ability as a\ndeveloper to call those\nfunctions tinker with your smart\ncontract to play around, you can\neven have a console log in\nthere, where it you know, sets\nsays the count now is there we\ngo something like this. And\nlet's go ahead and deploy that.\nNotice I'm doing these quick\niterations, I'm making small\nchanges in solidity, and I'm\nseeing those changes show up in\nthe front end. And I'm tinkering\nwith those in the front end and\ntesting my assumptions. Here, if\nwe go look at our hard hat node,\nwhen I make this increment call,\nwe should see that nice console\nlog there, you know, this\naddress, set the count to eight,\nright? Very, very cool. So this\nis scaffold eath. This is what\nspeed run Aetherium is built on\ntop of, you'll get in here,\nyou'll edit your smart contract,\nthen you'll edit your front end,\nyou'll point your front end at\nsome particular network, you'll\ndeploy your smart contract,\nyou'll deploy your app, it just\ngives you the ability to have a\nfront end along with your smart\ncontract. And you'll have that\nas you're building your smart,\nsmart contract. So to have this\nfront end, to tinker with your\nsmart contract is going to help\nyou kind of figure out how you\nwant to write your solidity,\nlike, is this going to be a\nmapping? Is this going to be an\narray? How am I going to track\nthis struct, you can kind of do\nthis in an iterative process by\njust throwing it in here into\nyour smart contract and\ntinkering with it on the front\nend and trying it out and seeing\nwhat you need to build. So\nthat's scaffold eath. And that's\nthe base that you'll need to get\nstarted with speed run Ethereum.\nOnce you've you're able to have\nthis all installed, you'll\nyou'll have your kind of react\nfront end here with yarn start,\nyou'll have yarn chain, which\nwill run your your hard hat\nnode, then you'll do yarn\ndeploy. Once you have that setup\nlocally, you're ready to go with\nspeed run Aetherium. And you can\nalso do this right here and\nchallenge zero. So challenge\nzero, gotta go zero index,\nright, we got to be nerdy\nchallenge zero sets you up with\njust getting the environment\nsetup, you'll you'll quest on\nbuilding a simple NFT example.\nIt's going to come with an NFT\nsmart contract. And it's going\nto come with an NFT front end a\nlittle kind of like minting\nview, it'll come with all of\nthis stuff to do that. And it'll\nwalk you through basically\nchallenge the row is going to\nhold your hand, it's going to\ntake you through every step\nyou'll have to get get you have\nto have a certain version of\nnode E, L some some correct\nrange of node and yarn\ninstalled. Watch out yarn has an\nexecutable on Linux, make sure\nyou have the yarn, the package\nmanager. But after you have get\nyour node and yarn, you'll run\nthrough cloning down each\nchallenge. You'll do an install,\nyou'll fire up the chain and\nyou'll fire up your front end.\nAnd you'll have a working app\nthat lets you interface with\nyour NFT smart contract. You'll\ngo through here and you'll learn\nabout wallets. Then you'll start\nminting NF Ts and you'll send\nthose NF T's are Round. And\nthat's challenge zero, it's just\ngetting you started. Here even\nin challenge zero, you'll deploy\nthis NFT to Rinkeby. And you'll\nalso deploy an app and allow\nyour friends to go to your app\nand mint in FTS on Rinkeby. So\nthat's the first challenge, it\nlooks like we even like dive\ninto open see and play around\nwith some of those mechanics.\nThe second challenge challenge\nnumber one challenge one of\nspeed runner theory is like\nwhere it all really starts. This\nreally shows off the superpower\nof Aetherium. It sets it up. So\nyou need to build an app where a\nbunch of people that don't\nnecessarily trust each other,\ncan coordinate and stake into a\nsmart contract. And this is\nlike, this is the superpower of\nAetherium. The ability for you,\nthe developer to write a few\nsimple rules to allow jerks to\ncoordinate financially, and not\ngreet each other and steal each\nother's money, right? You're\nwe're building these financial\nsystems, there's, you know, game\ntheory and economics and so many\nother things going on here. But\nyou as the developer, you're\nwriting simple rules, and you're\nbuilding a system that allows\npeople to coordinate. So\nchallenge one, we'll take you\nthrough how to get set up with\nyour steak or docile, smart\ncontract, you'll install\neverything exactly the same way,\nyou'll fire everything up. And\nthen it's just going to walk you\nthrough the kinds of things that\nyou will need in your smart\ncontract. But you'll have to\nwrite the solidity yourself. So\nthis is this is not going to be\na handheld tutorial, hell thing,\nyou're going to have to write\nthe smart contract yourself. And\nthere's some guidelines and some\nrails that kind of help you out,\nbut it's not going to do it for\nyou. Okay, so that's, that's\nQuest One is or that's\nchallenge. One is building a\ndecentralized staking app. Then\nchallenge two is building a\ntoken vendor this so in\nchallenge one, you'll learn\nthings like how to send money\ninto a contract, how to have a\ncontract, keep track of\nmappings. In challenge two,\nyou're going to learn contract\nto contract interaction, you're\ngoing to learn about ERC 20s,\nyou're going to learn about\nspecifically the approved\npattern, which is kind of a\njerk, it's, it's hard, it's a\nhard thing to deal with is the\napproved pattern, you need to go\nto your token contract and\napprove the vendor to take some\nmoney, then in a second\ntransaction, you need to go to\nthe vendor and have the vendor\ngrab the money from the token\ncontract and do something else.\nSo that's that's challenge two\nis learning about tokens and\nvendors, and is starting to\nreally like get you kind of\nexposed to the idea of this like\nmassive multiplayer game that is\nAetherium. And also kind of like\nhow to build these vending\nmachines that anybody can get\nto, then you'll build a Dex. Now\nonce you've once you're done\nwith 01. And two, you're really\nkind of you have a license to\nlearn at this point, you're\nyou're ready to really like go\ndo some damage and build some\ncool things, maybe go build a\ncouple other things, but come\nback and come come hit challenge\nthree, challenge three is going\nto be a little bit more open\nended, there's going to be a\ncohort of other people that are\nalso building this. And you have\nto get through the first three\nchallenges to even get to\nchallenge three to even get to\nthis chat room. But there's a\nchat room where other developers\nthat are also building their own\ndecks are all there together,\nand you can kind of learn with\nthem and chat with them. But\nyou're going to build an\nexchange. And you're going to\nbuild an exchange that works in\na smart contract in a\ndecentralized way with no\ncentralized breaking points. And\nwhat that's going to mean is\nyou're going to have to have\nreserves of both eath and tokens\nand you're gonna have to have a\npricing function and LP tokens\nand all sorts of other things\nthat you'll have to learn about\nas you get to it. Then challenge\nfive is a multi SIG wallet. Such\na fundamental important thing\nabout how to store your eath\nsafely is going to be in a multi\nSIG wallet and how you can have\nmultiple identities even even\nlike the the base of like what a\nDow is, is sort of like starting\nwith a multi SIG wallet. And\nyou'll need to build one of\nthose you'll need to understand\ncall data call data is super\nweird and complex. And\neverything's a transaction even\nwhen you're just poking a\ncontract. It's a transaction,\nand you have to craft that call\ndata correctly to say, I would\nlike to call this specific\nfunction on this specific\ncontract. So that's multisig\nwallets and then it kind of ends\nup we've got more challenges in\nthe pipeline, but it kind of\nends on build an SVG NFT so much\nfun to build an NF t that crafts\nthe actual drawing in the smart\ncontract and renders it. So\nthat's the speed run, go speed\nrun Aetherium checkout scaffold,\neat start building, build\nsomething awesome on Aetherium.\nhearts, hearts, hearts, go get\nthem.\nAustin Griffith is one of the\nOGS when it comes to helping\nengineers get caught up and up\nto speed in the blockchain world\nso massive thank you to Austin\nfor all he's done so far.\nAll right now we're gonna get\ninto NF T's. Let's do this. Now,\nI've already made a number of\nvideos on what NF T's are and\nhow to start working with NF\nT's. So we're going to watch a\nportion of the previous Python\nedition of this course where I\nexplain and a piece from a high\nlevel and then of course, we're\ngonna get into the ultimate NFT\ntutorial. So let's learn about\nNF T's look, NF T's are hot\nright now. Nf T's also known as\nERC 720 ones are a token\nstandard that was created on the\nEthereum platform. Nf T stands\nfor non fungible token is a\ntoken standard similar to the\nERC 20. Again, ERC 20 is like\nlink of a maker, all those\ngoodies that are found on the\nEtherium chain. An NF T or a non\nfungible token is a token that\nis non fungible, this means that\nthey are starkly unique from\neach other. And one token isn't\ninterchangeable with any other\ntoken of its class. A good way\nto think about it is $1 is\ninterchangeable with any other\ndollar $1 is going to have the\nsame value of another dollar.\nThose are fungible tokens that's\nlike ERC 20s one link is always\ngoing to be equivalent to one\nother link, by contrast is going\nto be NF T's those of you nerds\nout there, we know like a\nPokemon would be a good example\nof an NFT you're one Pokemon is\ngoing to have different stats,\ndifferent moves, sets, and isn't\ninterchangeable with any other\nPokemon, or maybe a more\nrelatable one. It's like a\ntrading card, or unique piece of\nart or the like. So that's what\nthese NF T's are there non\nfungible, non interchangeable\ntokens that for the moment are\nbest represented or thought\nabout as digital pieces of art\nthat are incorruptible and have\na permanent history of whose own\nthem who's deployed them, etc.\nNow, like I said, NF T's are\njust a token standard. So you\ncan actually make them do much\nmore than just be art. You can\ngive them stats, you can make\nthem battle, you can do really\nunique things with them, you can\ndo pretty much whatever you want\nwith them. But right now, the\neasiest way to think about it,\nand the most popular way to\nthink about it is by calling\nthem ah, ah, ah it's odd, or\nsome type of collectible or just\nanything that's unique. Now,\nthey've been getting a ton of\nbuzz recently, because we've\nbeen seeing more and more of\nthese being sold at insane\nprices, like we saw x infinity\nsell nine plots of their land\nnine plots of their unique land\nfor $1.5 million. We also saw\nthe original creator of the Nyan\nCat, you know, this cat\nsold for like 300 eath. So\napparently people really value\nthese things. So like I said,\nthey're just tokens that are\ndeployed on a smart contract\nplatform, and you can view them\non different NFT platforms like\nopen sea or wearable. And these\nare the NFT marketplaces that\nlet people buy and sell them.\nYou obviously can do that\nwithout these marketplaces,\nbecause it's a decentralized but\nthey're helping give a good user\ninterface. Now, like many of you\nout there, my initial thought to\nNF T's was okay, this sounds\npretty dumb. But I think that\nthat was dumb. I think art does\nhave a lot of value. And I think\nthat artists are not always paid\nfairly for what they do. And\nthis is actually a huge issue\nright now in the modern day\nworld where an artist can make\nsome type of art people just\ncopy paste it, you know,\neverywhere and, and they never\nget attribution for what they\nmake. So having a really easy\ndecentralized royalty mechanism,\nor some type of mechanism where\nthese artists can get accurately\ncomped for what they're doing, I\nthink, is really important. I\nlove music. I love movies, those\nare pieces of art that I digest.\nAnd I really like and I think\nit's fair for them to get comped\nappropriately because they are\nproviding value to my life. I\nthink NF T's are a great way to\nsolve this issue as kind of\nhaving these decentralized audit\ntrails and, and royalty trails\nthat we can set up and, and see\nreally transparently without\nhaving to go through some\ncentralized service. So that's\nthe basic gist of it. Let's talk\nsome more about the standards\nERC 721 standard are the NFT\nstandard. This is the basis of\nit all there is another standard\nthat's semi fungible tokens, the\n1155 We're not going to talk\nabout that here. But you can\ncheck it out the main\ndifferences between a 721 and\nthe ERC 20 and ERC. 20 is they\nhave a really simple mapping\nbetween an address and how much\nthat address holds. 720 ones\nhave unique token IDs, each\ntoken ID has a unique owner. And\nin addition, they have what's\ncalled a token URI, which we'll\ntalk about in a minute. Each\ntoken is unique. Each token ID\nrepresents a unique asset. So\nsince these assets are unique,\nand we want to be able to\nvisualize them and show what\nthey actually look like we need\nto define those attributes of\nthe object. If it's a piece of\nart, we needed a way to define\nwhat that art looks like. If\nit's some type of character in a\ngame, we need to wait define\nthat character stats in the NFT.\nThis is where metadata and token\nURI has come in. So if you know\nanything about Aetherium, you\nknow that sometimes gas prices\ngetting pretty high, especially\nwhen it comes to storing a lot\nof space, it can get really,\nreally expensive. So one of your\nfirst questions might be Well,\nare they storing these images?\nAnd these are pieces on chain?\nAnd the answer is sometimes back\nwhen they were coming up with NF\nT's and artists were deploying\nstuff, the eath devs and the\nartists were like yeah, art,\nlet's do that art. I'm just\ngonna deploy This one megabyte\nimage onto the Etherium chain.\nAnd Oh god, it's so much gas\nexpensive, delete button.\nOtherwise, it's not, it's not\ngood. And they realized that if\nthey put all this art on chain,\nit's going to be incredibly\nexpensive. So to get around\nthis, what they did is they put\nin the standard, what's called\nthe token URI. This is a\nuniversally unique indicator of\nwhat that asset or what that\ntoken looks like and what the\nattributes of the token are, you\ncan use something like a\ncentralized API, or IPFS. To\nactually get that token URI.\nTypical token URI has to return\nsomething in this format like\nthis, where it has the name, the\nimage, location, the\ndescription, and then any\nattributes below, there is often\nthis talk of on chain metadata\nversus off chain metadata.\nBecause it is so much easier and\ncheaper to store all your\nmetadata off chain, a lot of\npeople will use something like\nIPFS that is decentralized, but\ndoes take a little bit of\ncentrality to keep persisting,\nbut they can also use their own\ncentralized API. However,\nobviously, if that goes down,\nthen you lose your image, you\nlose everything associated with\nyour NFT. Because of this most\nNFT marketplaces actually can't\nand won't read off on chain\nattributes or on chain metadata,\nbecause they're so used to\nlooking for the token URI.\nObviously, if you do off chain\nmetadata, you can't do anything\nreally cool or really\ninteresting or have any gains\nwith your NF T's. For example,\nif you wanted to create an on\nchain Pokemon game, all your\nattributes would need to be on\nchain in order for your Pokemon\nto interact with each other.\nBecause if it was off chain,\nthen that becomes a lot harder\nto cryptographically prove. So\nif you're new with NF T's and\nyou're like wait, this is kind\nof a lot of information, I'll\nmake it easy for you. If you're\nlooking to render an image, I'm\nan NFT, add your image to IPFS,\nadd a metadata file pointing to\nthat image file on IPFS. And\nthen grab that token URI and put\nit and set it as your NFT. The\nchain link DND article does a\ngreat job of walking you through\nthis and showing you how to do\nthis. So be sure to read that if\nyou're looking to learn how to\ndo that we're not going to cover\nthat in this video, but we will\nbe deploying our first NFT with\nsome on chain attributes. Again,\nhaving your attributes on chain\nis really going to allow you to\nbuild really creative NF T's\nthat build games or have\ninteresting properties and and\nreally makes the authenticity of\nyour NFT guaranteed because\nthose attributes are always\ngoing to be on chain.\nAlright, so now that we know the\nbasics of approximately what an\nNF t is, and similar to the ERC\n20 You can see the E IP 721 or\nthe ERC 721 non fungible token\nstandard on the Aetherium, ie\nIPs. And once again, if you\nscroll down, you can see all the\ndifferent events and the\ndifferent functions that come\nwith creating this token. And\nnow everything that we're going\nto do is going to be available\nat this GitHub repo. This hard\nhat NFT FCC, we're going to\nactually go through all the code\ndown to deploying and creating\nour own customized NFT. And I've\nlabeled this the ultimate NFT\nrepo as part of this course,\nbecause we're going to go\nthrough a lot here, we're gonna\ngo through a basic NFT, a real\nminimalistic NFT and then an\nIPFS hosted NFT. That is\ndynamic. And it uses randomness\nto generate unique NF T's so\nthat we can have provably rare\nand appease or provably rare\ncards or provably rare tokens or\nstats or whatever you want. And\nthen we're going to do what's\ncalled an SVG NFT. These are\nentities that are 100 percent hosted on\nchain, so you don't need an off\nchain. So you don't need IPFS,\nyou don't need an off chain\ndatabase. And this one's also\ngoing to be dynamic, where it's\ngoing to use price feeds in\norder to fluctuate what the\nimage of the entity actually\nlooks like based off the price\nof some asset. And here are the\nimages that we're going to be\nusing. And we obviously have\nthese three adorable doggies\nhere. If you want to follow\nalong with the Quickstart, you\nabsolutely can. And I'm going to\ndo a quick overview of just\nrunning the code to show you\nwhat it's going to look like at\nthe end. Basically, what we're\ngoing to do is we're going to\nhave our code, we're going to\nrun hardhat deploy dash dash\nnetwork, rink B, dash dash tags\nmain. And this is going to\ndeploy all of our contracts and\neverything. And then finally, if\nwe go to test nets dot open c.io\nAnd we grab the address of one\nof these NF T's we should be\nable to put it in here see our\nactual NFT as a collection with\nan item. Or Additionally, we can\njust go right to the contract.\nWe can read the contract, we can\nget the token URI, and then we\ncan copy this token here, I\npaste it into our browser or any\nIPFS is into our browser, and\nthen grab the image attribute\nand see what this actually looks\nlike on chain. So with all that\nbeing said, let's learn how to\nbuild this ultimate NFT repo and\nbuild all of these different\ncustomizable NF T's let's jump\nin. So once again, we're in our\nterminal I'm going to create a\nnew directory. We're gonna call\nit hard hat and a T for FCC.\nWe're gonna cd into that. And if\nT FCC and we're going to open\nthat up with code.or, you can\nhit File, Open Folder At this\npoint, you'll have gotten pretty\nfamiliar with the setup of our\ncode bases here, feel free to\ncopy over or do whatever you\nwant to do for our setup, we'll\ndo yarn, add dash dash dev hard\nhat. And then while that's\nloading, I'm going to copy over\nmy prettier files. Because I\nwant to use prettier, I'm going\nto copy over my hard\nhat.config.js. And I'm also\ngoing to grab my package that\nJason copied over here, I'm\ngoing to delete this old package\ndot JSON. And I'm just going to\nhit Enter on this and rename the\none I just copied over from\npackage copy to package json.\nAnd the reason I'm doing this is\nso that I can just go ahead and\nrun yarn and install all this\nstuff for me. Or we can just\ncome back over here and just\ngrab this lesson nine hard hat,\nsmart contract lottery, all that\nstuff, again, just run that\nmassive piece as well. Or you\ncan copy over your package json,\nand then just run yarn that will\ndo the same thing. Now we don't\nhave to keep doing this\nboilerplate over and over and\nover again. And then while\nthat's loading, I'm also going\nto grab my Dotty and v file that\nwe've been using on a past\ncouple of projects, the\nreadme.md. And we'll just do\nwhat we're gonna be doing here.\nSo we're going to make three\ndifferent contracts. One is\ngoing to be a basic NFT, using\nthat ERC 721 standard, then\nwe're gonna do a random IPFS\nhosted NF t. And then finally,\nwe're going to do a dynamic S V\nG NFT. So our random NF T is\ngoing to be random at creation\ntime, this is going to give some\ntrue scarcity and some true\nrandomness to our NF T. And it's\ngonna be hosted on IPFS. Our\ndynamic SVG NFT is going to be\nhosted 100 percent on chain, and the\nimage of it's going to change\nbased off of some parameters.\nThat's what makes it a dynamic\nSVG NFT.\nLet's go ahead and we'll create\na new folder, we'll create our\ncontracts folder, and we will\ncreate our first NF t this is\ngoing to be our basic NFT. And\nI'm going to go a little bit\nquick here, because most of what\nwe're going to be doing is\nactually things that we're\nalready familiar with. So we'll\ndo basic NF T dot soul in a new\nfile. And let's go ahead and\nlet's do it. Let's go ahead and\nwe'll do spdx license\nidentifier, it's gonna be MIT.\nWe'll do pragma, solidity,\ncarrot zero, point 8.7 pragma,\nsolidity, and then we'll do\ncontract, basic NF t. Let me\njust basic, get a t.so, like\nthat. And we'll say contract\nbasic NF t. And then we'll just\nrun hard at compile or yarn\nhard, hit compile, and it looks\nlike we're doing well here so\nfar. Okay, perfect. Based off of\nthat NFT token standard, we go\nback that EIP, we're going to\nneed a whole bunch of different\nfunctions here, we're going to\nneed transfer events, we're\ngoing to need owner events\nbounce up, we're going to all\nthese different functions. And\nwe could 100 percent implement these\nand transfer them exactly like\nthe ERC 20 did, or once again,\nso we can use, you guessed it,\nwe're gonna be using open\nZeppelin contracts for this as\nwell. So we come back over to\nopen Zeppelin, we go over to\ncontracts. And we're gonna go\nahead and add this with yarn,\nadd dash dash Dev. So yarn, add\ndash dash dev at opens up on\ncontracts, like so. And while\nthat's going through, we can\nlook at the ERC 721 of this and\nwe can see what creating a\nminimalist ERC 721 looks like.\nNow there's a number of\nextensions that come with its\nERC. 721 In this example that\nthey give us. They're using ERC\n721 Uri storage, which we'll\ntalk about in a little bit. So\nwe've added it in here. And now\nwe can actually import that ERC\n21 from opens up when in our\ncontract. So we'll do import at\nopen Zeppelin slash contracts\nslash token slash your C 721\nslash ERC. 721 does so they use\na different one in the demo, but\ndon't worry about that. And same\nas the ERC. 20 we're gonna say\nour basic NFT is ERC 721. So\nwe're doing this inheritance,\nyou find the constructor, we can\nsee this has a constructor,\nwhere it takes a name and a\nsymbol. So we're gonna want to\nuse this constructor and our\ncontract. So we're gonna say,\nconstruct door.\nAnd our constructor is just\ngoing to be blank. But we'll do\nthe ERC 721 constructor and\nwe'll call this a doggie. And\nthe symbol will be dog just like\nthat. Our basic NFT we're just\ngoing to have it be this doggy\nhere, right so it's going to be\nan NF T of just a purely this\ndog here. The name is going to\nbe doggy and the symbol is going\nto be dog. Now in order to\ncreate new dogs. What we're\ngoing to do is openzeppelin code\ncomes with something called a\nmint function exactly the same\nas the ERC 20 So we're going to\ncreate a function called mint\nNFT this will be a public file\nfunction that's going to return\nyou activity six. And we'll use\nthe safe mint function of this\nERC 20 or underscore safe mint\nmessage dot sender will mint the\ntoken to whoever calls this mint\nfunction. And then we need to\nalso give this a token ID, if\nwe're looking back at the code\nfor the ERC 721. And again, you\ncan see this on GitHub as well,\nwe're gonna look at this safe\nmint function, it takes an\naddress to who is going to own\nthe NFT. And then a token ID,\nwhat is the ID of the token\nbased off of this address. So if\nyou have a collection of tokens\non the same smart contract, each\none of them needs their own\nunique token ID. So what we're\ngonna do is we're gonna create a\nun 256, private variable called\nS underscore token counter, and\nit's gonna get initialized in\nour constructor to zero, but\nwe'll just be explicit and say\nes token counter equals zero.\nAnd then in here, we'll just\nhave the token ID of this new NF\nt be that token counter. And\nthen of course, we'll say s\ntoken counter equals s token\ncounter plus one. So every time\nwe meant a new NFT, we up the\ntoken counter, and then we'll\njust return, we'll just return\nthe new tab counter. Right. And\nthen obviously, at the bottom,\nwe could do like function, get\ntoken counter, this would be a\npublic view returns you in 256.\nAnd I'm gonna go a little quick\nhere, because you've seen this\nbefore, return s underscore\ntoken counter, right, since it's\na private variable up here, the\npublic function down here to get\nthat token counter. So this\ntechnically, is it. This is\ntechnically an NF T. But what\ndoes this look like? Well, right\nnow, this NF T isn't going to\nlook like anything at all, in\nthis EIP token standard. It has\nthis thing called a token URI.\nAnd this is the important\nfunction that tells us exactly\nwhat this token is going to look\nlike. Like what we said in the\nmini lesson here. This token URI\nreturns some type of URL or\nuniversal resource identifier\nthat returns some JSON that\nlooks like this. And in this\nJSON, we're going to have this\nimage part. And this image is\ngoing to be a URL that's going\nto point to what this image\nactually looks like. Now this\nURL can be hosted on chain, it\ncan be hosted on IPFS, it can be\nhosted really wherever. But\nideally, we're not going to use\na centralized server to host it.\nIf this is hosted on a Google\nCloud or a centralized server or\nwhatever, and our centralized\nserver goes down. Well guess\nwhat this MC is gonna look like,\nit's not gonna look like\nanything. So we want to use some\ntype of decentralized storage,\nto get a URL, or URI to store\nwhat this looks like. To make\nthis section a little bit easier\nfor you, I've actually already\ngone ahead and hosted an image\nto IPFS. For you, it's going to\nbe at IPFS dot dot slash slash,\nit's going to look like this,\nthis is going to be the image\nthat we're going to use for our\ndog here. If you create just\nthis image, though, as the token\nURI, that's not going to work,\nwe need a URI that returns this,\nwith the image inside of it. Now\nfor this first section, have\nalready gone ahead and done that\nfor you as well. And that's\ngoing to be located here. This\nis what our token URI function\nneeds to return. So it's going\nto have the name, the\ndescription, the image URI,\nwhich then points to the dog,\nand then some attributes, etc,\netc. Now, you'll notice that the\nimage here is pointing to HTTPS,\ndot dot slash slash ipfs.io. The\nreason I did this was again,\njust in case you didn't have the\nIPFS gateway, but this would be\na lot better if this was in its\nIPFS form. Because if the\ncentralized server ipfs.io, goes\never goes down, this NFT will\nshow what it'll show nothing. So\nit would be much better. If it\nwas instead of ipfs.io. It was\nIPFS, colon slash slash, like\nthat, instead of ipfs.io. But\nfor now, this is what we're\ngoing to be using. And you can\njust go to the GitHub for this,\njust to grab this for this\nsection. Right? Just go to\ncontracts, basic NFT, you can\njust grab this, this, this top\npart, just copy it like that. So\nwe're going to paste that the\ntoken URI up, up, up at the top,\nlike so. Oh, it should be\nreturns, return. There we go.\nOkay, cool. So we're just going\nto copy paste that in here like\nthis. Like I said, even though\nthe token URI here is pointing\ndirectly to IPFS, which is good.\nIf you actually go to this file,\nthe file is actually pointing to\nhttp.ipfs.io. Again, for your NF\nT's don't do that for this NFT.\nI just did that just in case,\nbut for your NF T's don't do\nthat. And we're going to make\nthis a public constant variable.\nWhy? Well, because this token\nyou write is never going to\nchange. We're going to make this\nNFT so that everybody who meets\none will have this exact same\nadorable little puck here. And\nthe way we do That now is we\nneed to identify the actual\ntoken URI function. So I'm going\nto do it above get token\ncounter, we're going to say\nfunction, token URI. And these\nalways take a UNT 256 token ID,\nwe're going to make this a\npublic view, override returns\nstring memory. And this needs to\nreturn the token URI. Now, this\nis going to be the most basic\nway to create this, right. And\nif we wanted to make this\nfunction a little nicer, we'd\ncomment out token ID as well,\nsince we're actually not using\ntoken ID. But we're overriding\nin our in the ERC 721 that we're\nimporting. This has a token ID\nfunction or a token URI\nfunction. And we're overriding\nthis, right, we're not using\nthis at all, we're saying, Hey,\nwe're just going to use our own\nhere. And that's all we need for\nthis to work. And now if you\nwere to deploy this to rink B,\nif you were to jump over to open\nC test net, and you would deploy\nthis, this dog, this adorable\nlittle pop would be what shows\nup for all the minutes. So let's\ngo ahead, and let's create a\nlittle deploy function for this.\nSo we'll do a new folder, deploy\na new file, we'll call this a\none deploy basic NF T dot j s.\nAnd this is going to look real\nsimilar to everything that we've\ndone before. So I'm going to\nmove a little bit quicker here.\nconst network equals require\nhard hats, const development\nchains, equals require dot dot\nslash helper, hard hats config.\nAnd I don't think I added that.\nSo I'm going to copy paste my\nhelper Hardhead config from our\nlast project. And if you get\nconfused, you can always just\ncome to the GitHub here, and\njust go to the helper Hardhead\nconfig and grab it from here, we\nhave that const development\nchains, or say const verify\nequals require dot dot slash\nutils. Slash verify. We're also\ngoing to grab our utils, I'm\ngoing to copy paste so utils\nfolder from alas project, once\nagain, you can copy paste from\nyour last project, or you can\njust go straight to the repo,\ngrab the verified dot j s, we're\ngoing to go over these two\nfunctions a little bit later,\nbut at least grab the verified\nfor now. And then we're gonna\nstart the function. So we'll do\nmodule that exports equals async\nfunction. We're gonna get get\nnamed accounts, and deployments.\nAnd we're gonna say const.\nDeploy, log equals deployments\nagainst deployer equals await,\nget named accounts. So we'll do\na little log here just to get\nstarted to do our basic NFT\ndoesn't take any constructor\nparameters. So we'll say const\nargs equals a little blank here.\nThen we'll do const basic NFT\nequals await, deploy basic NF T,\nexactly what we've seen before a\nnumber of times at this point,\nwe'll say from Deployer. args is\ngoing to be args. And then log,\nit's going to be true. And then\nwe'll also do weight\nconfirmations. It's going to be\nnetwork dot config dot block,\nconfirmations, or one. Then if\nwe want to verify this, we're\ngoing to once again do if it's\nnot development chains, dot\nincludes network dot name, and\nprocess that EMV dot ether scan\nAPI key will say log verifying\ndot the dot await, verify basic\nNF T dot address arguments which\nare going to be blank, grab this\nlittle log here, stick it right\nunderneath. And then actually in\nour basic NF T. This should be\nargs not arguments. Now we have\na deploy script. Now we have a\nbasic NFT here in test data\ndeploy script, or any hh deploy\nor yarn Hardhead deploy. And\noops, let's go back to the basic\nkind of tea or mint and have tea\nneeds to return a UNT 256. Try\nagain. Get token counter also\nneeds to return a UNT forget you\ninto anywhere else. Nope. Okay,\nlooking good. And looks like\nwe're compiling well compiled,\ndeploying Well, now if you want\nto deploy this to rink B, you\ncan. I recommend holding off\nthough, because we're going to\ndo that at the end. Now that\nwe've written a deploy script.\nWe've written the contract, you\nalready know what's coming next.\nYes, neat. What's next is the\ntests now because we're not\nactually learning too much more\nhere. I'm not going to walk you\nthrough writing this test. I'm\ngoing to challenge you now. How\nto pause the video and write the\ntest out yourself and see how\nfar in this test you can\nactually get. Remember, to test\nit, you're going to want to run\nyarn, hard hat test,\nright, let's see if you can\nactually write the test\nyourself, then come back to the\nvideo, see if your tests were\njust as good or not as good as\nwhat we did here. And of course,\nyou can always go to the GitHub\nrepo test sections. And if you\nget lost, you can look at the\nbasic nft.test.js To follow\nalong. All right, welcome back.\nHopefully, you wrote some\nawesome tests, taking the time\nto actually do some of those\nexercises is really going to\nmake you a much better engineer.\nFollowing along with me, it's\nawesome. But tinkering yourself\nand trying to do everything\nyourself is really what's gonna\nmake this stick. So I hope you\ndid pause the video. And hope\nyou did go ahead and try to\nwrite the test for this\nyourself, you've technically\njust created a really\nminimalistic NFT.\nGreat job. Let's kick things up\na notch. Let's move now to a\nrandom IPFS hosted NFT where\nwe're going to do everything\npretty much programmatically. So\nlet's jump in. In our contracts,\nwe're going to create a new file\nrandom IPFS, NFT, dot soul. Same\nthing. spdx license identifier,\ngonna be MIT pragma, solidity\ncarrot zero, point 8.7, or\nwhatever version you want to\nuse, will do contract random\nIPFS NF? T, like so. So what is\nthis one going to do? So instead\nof just minting any NFT, when we\nmeant an NF t, we will trigger a\nchainlink VRF call to get us a\nrandom number. Using that\nnumber, we will get get a random\nNF t that we're going to decide\non. And the random n of t that\nwe're going to use, it's going\nto be either a pug a Shiva in\nyou, or a St. Bernard. So\nwhenever anybody mints NF T,\nthey're gonna get one of these\nrandom three dogs. And we're\ngoing to make this so that each\none of these dogs have a\ndifferent rarity, we're going to\nmake these dogs rare by\ndifferent amounts, say we want\nthe pug to be super rare, the\nShiva to be sort of rare, and\nthen the St. Bernard to be\npretty common. So probably it's\ngonna be super rare Shiva in us\nis gonna be sort of rare, St.\nBernard is going to be pretty\ncommon, right? Or the most\ncommon, if you will. So let's go\nahead and start building this,\nwe're probably gonna have to\nmake a function called like\nrequest NF t, because we're\ngoing to know that we're gonna\nneed to kick off a channeling\nVRF request, we're probably\ngonna have to make a function\nfulfill random words, that's\ngoing to take a un 256 Request\nID and a un 256. Array, memory\nrandom words, as we've seen\nbefore, we've done fulfill\nrandom words in the past. And\nlet's let's even go one step\nfurther, we'll make it so that\nusers have to pay to mint an NF\nt. So this is going to be they\nhave to pay a certain amount of\neath to get the NFT and then the\nowner of the contract and\nwithdraw the eath. So we're\nbasically paying the artists\nhere, we're paying the artists\nto create these NF T's. And then\nthey can be the ones actually\nactually withdraw the payment\nfor all these NF T's. And we're\nalso going to need, of course, a\nfunction, token URI, which takes\na un 256. And this is once\nagain, same as our basic NFT\ngonna be what this token\nactually looks like. So let's go\nahead and get started creating\nthis. Now, because these red\nlines are going to draw me\ncrazy. We're going to add some\nvisibility here, we'll make this\nrequest NFT public fulfill\nrandom words, we actually know\nfrom the past is going to be\ninternal token URI is going to\nbe public. Let's build this\nrequest NFT. And again, to\nrequest a random number, go back\nto EVM. Chains, we go to using\nrandomness, we can follow along\nwith the Dr. chain link again,\nto figure out how to get this\nrandom number. So since we know\nwe're going to be working with\nchain link, we want to add at\nchain link slash contracts. So\nback in in our code base, we'll\nadd that in yarn add dash dash\ndev at chain link slash\ncontracts, like so which was\nperfect. And we can go ahead,\nand we're going to import that\nVRF consumer base V two and the\nVRF coordinator interface into\nour code because we know we're\ngoing to use both of these. If\nyou want to just copy paste from\nthe docs, you absolutely can go\nto pause here. And since we're\ngoing to be using this view of\nconsumer base, we want to\ninherit it. We're going to say\nrandom IPFS and f t is V RF\nconsumer base V two and this\nlittle, little wiggly line will\nshow up here saying This seems\nto be override. So I'm just\ngonna go ahead and add override\nhere. And this little wiggly\nline is gonna stay there for a\nlittle bit until we implement\nthe rest of the functions. So\nlet's go ahead and implement the\nrest of those functions. Request\nNFT, of course, is going to be\npublic here. And in order for us\nto request an NF T, we're going\nto need to call the coordinator\ndot request random words where\nwe pass all this stuff in.\nRight, so let's go ahead and get\nall this stuff for our V REF\ncoordinator in our constructor,\nso let's create a new\nconstructor. struct door. And\nwe're going to use the VRF\nconsumer base, the two\nconstructor to use to create our\nconstructor, the VRF consumer\nbase V two needs an address in\nhere for the VRF consumer base.\nSo we'll go ahead and we'll do\naddress VRF. Or did Nate Torre b\ntwo. And then we'll pass this to\nthe VRF consumer base\nconstructor here, just by adding\nthat that red squiggly line has\ngone away from me perfect. And\nwe want to save that address to\na global variable. So we can\ncall request random words on it.\nSo we're gonna go ahead up here,\nwe're going to say I underscore\nvar F chord. To me, Tor, we're\ngoing to make this immutable VRF\ncoordinator. And we're going to\ndo it by saying VRF v2\ninterface, it's gonna be\nprivate, immutable, you have\ncoordinator and then in our\nconstructor here, we're gonna\nsay IVF coordinator equals VRF,\ncoordinator v2 interface wrapped\naround this like so. So we know\nwe're going to need this, we\nknow we're actually gonna need a\nton of these. So let's just add\nall these variables in here,\nwe're gonna need the\ncoordinator, we're gonna need a\nUNT 64 private, immutable, I\nunderscore subscription ID,\nwe're gonna need a bytes 32,\nprivate, immutable,\nI underscore gas lane, we're\ngonna need a you int 32 private,\nmutable, I underscore callback\ngas limit, we're gonna need a\nUNT 16 Private constants,\nrequest confirmations, we're\ngonna say it's gonna be three,\nand then a un 32. Private\nconstant equals num words, which\nis going to be one, and we'll\nget this red squiggly line\nsaying it's mad at our our\nconstructor here. So let's go\nahead and add all of our\nimmutable variables in our\nconstructor. So we'll get the\nVRF coordinator v2 from our\nconstructor will get the UNT 64\nsubscription ID, we'll get the\nbytes 32 Gas lane, aka the key\nhash, we'll get the un 256.\nWe'll do a UNT 32 callback gas\nlimit, then we'll go ahead and\ndo I subscription ID equals\nsubscription ID will do I gas\nLane equals gas lane will do I\ncall back gas limit equals call\nback.\nYes limit.\nOkay, a lot of variables set up.\nBut those are the variables that\nwe're going to need for the\nchainlink VRF. Now we have all\nthese variables down in our\nrequest. And if t we can request\na random number to get for our\nrandom n of t, we're going to\nsay and our returns a yuan\ntivity six Request ID. So in\nhere, we'll say request, Id this\nrequest ID that we just\ninitialized I underscore VRF.\nCore didn't a Tor dot request.\nrandom words. And this should\nlook pretty familiar to what we\ndid in our lottery. I underscore\ngas Lane comma, I underscore\nsubscription ID, comma, request,\ncon for nations. I underscore\ncallback gas limit. And then of\ncourse num words and we can just\nliterally copy paste this from\nthe documentation or from our\nlast project, whatever you want\nto do. So we are requesting this\nrandom NFT here. Now here's the\nthing, though, we want whoever\ncalled this request function it\nto be there and have tea, right.\nAnd if we saw in our basic NFT,\nwhen we minted the NFT, we call\nthis safe mint which needed the\nowner and the token counter.\nWhen we request a random number\nfour are NFT. It's going to\nhappen in two transactions,\nright? We're going to request\nand then later on we're going to\nfulfill and it's going to be the\nchain link node that's calling\nfulfill random words. So if it\nIn the fulfill function, we just\ndo this safe meant message that\nsender, the owner of this NFT is\nactually going to be the chain\nlink node that fulfilled our\nrandom words. So we don't want\nthat, what we want to do is we\nwant to create a mapping between\nrequest IDs. And whoever called\nthis so that when we call\nfulfill random words, which\nreturns with that exact same\nrequest, ID, we can say, Ah,\nokay, your request ID X, you\nbelong to the person who called\nthis request and of team, we're\ngoing to create a mapping\nbetween people who call this and\ntheir request IDs so that when\nwe fulfill random words, we can\nproperly assign the dogs to\nthem. So up at the top, right\nunderneath here, I'm going to\ncall them VRF helpers, we're\ngoing to create a mapping of un\n256. To an address, we'll make\nthis public which we should make\nit private, but we'll just make\nit public s underscore Request\nID to sender. And then when we\ncall this request, and F T, will\nset the request ID to sender of\nRequest ID equals to message dot\nsender. Now, when the chain link\nnode responds with fulfill\nrandom words, what we can do is\nwe can say address dog owner or\nthe NFT dog owner is going to be\nequal to s Request ID to sender\nof Request ID. This way, it's\nnot going to be the chain link\nnodes that are going to own the\ndog, but it's gonna be whoever\nactually called requests. NFT.\nOkay, cool. So we have a way to\nrequest a random number for our\nrandom NF t. Now, let's go ahead\nand mint this random dog, this\nrandom NF T for this for this\nuser. So we have the user now\nusing this mapping, what else do\nwe need? Well, we're gonna need\nthe token counter here. Let's go\nahead and we'll create a token\ncounter variable. So we'll\nscroll up and make a new\nsection. And we'll say, un 256.\nAnd then again, we'll just make\na lot of these public just to\nmake it easier, but you might\nwant to make this private and\nuse that same syntax we were\ndoing before do s underscore\nsince this is a stored variable,\ntoken counter. And we'll grab\nthis token counter. And we'll\nsay you went to 56. New token ID\nequals as token counter, now\nthat we have the dog owner, and\nthe token ID, we can go ahead\nand mint this MFT. So we'll do\nsafe mint.\nOwner, new token, ID and then\nsafe man is going to be squiggly\nbecause our code is gonna say,\nwhat is this? What is the safe\nmint function? Where did you get\nthis from? Well, we're gonna\nneed to get it from open\nZeppelin again. So we're going\nto go ahead and do import at\nopen Zeppelin slash contracts\nslash token slash ERC. 721 slash\nERC. 720 one.so We'll say a\nrandom IPFS empty is Vera of\nconsumer base, and also ERC 721\nIn our constructor, right after\nour V RF consumer base, we're\ngoing to put the ERC 721. And\nsame thing, we need to give it a\nname and a symbol. So we'll call\nthis random IPFS NF T. Comma,\nwe'll just do Rin for random\nIPFS NF team. Now safe mint\nactually works and then it's\ngonna be mad at me for this. So\nI'm gonna do override just let\nit stop getting mad at me.\npublic view override turns\nstring memory. Just that\nsquiggly line goes way. Okay,\ncool. So great. So now we can\nsafe mint to the dog owner this\nnew token ID Are we done with\nthis? Absolutely not. Why not?\nWell, we don't know what this\ntoken looks like. And what we\nset above is we want to actually\nmake these dogs different\nrarities. So how do we actually\ncreate these dogs with different\nrarities, all we could do is we\ncreate a chance array an array\nto show the different chances of\nthese different dogs here. So\ndown below, we're going to\ncreate a function and it's going\nto be a public pure function\ncalled get chance array. And\nthis is going to return you went\nto 46 of size three in memory.\nAnd this chance array is going\nto represent the different\nchances of the different dogs.\nSo we're gonna say return\n10 3100 Or we're gonna say Max\nchance value.\nAnd up at the top under empty\nvariables. We're gonna say you\nwent to 56 internal constant,\nMax chance value equals 100. So\nby making this array, we're\nsaying index Zero has a 10 percent\nchance of happening. We're\nsaying index one has a 20 percent\nchance of happening because it's\ngoing to be 30 minus 10. And\nthen we're saying index two is\ngoing to have a 60 percent chance of\nhappening, because it's going to\nbe 10 plus 30. minus this 100.\nThis array that identified the\npercentages of the different\ndogs. We're saying the pug is\ngoing to have a 10 percent chance,\nShiva in you a 20 percent chance and\nthe St. Bernard a 70 percent chance,\nwe're going to use it to give\nthis token ID that we just\nminted its dog breed. So we're\ngonna create a new function\ncalled Get breed from modded\nRNG. And the reason we're\ncalling a get breed from modded\nRNG is exactly the same way. In\nour lottery. We got a random\nnumber, we're gonna say you went\nto 56 modded RNG equals random\nwords of zero mod Max chance\nvalue, we're going to mod any\nnumber we get by 100. Doing it\nlike this, we're always going to\nget a number between zero and\n99. If random words zero mod Max\nChin's value is going to be\nseven. That means we're gonna\nget a pug. If we get 88. That\nmeans we're gonna get a St.\nBernard, if we get a 45. We're\ngonna get a what? That's right,\na St. Bernard, if we got a 12\nWe're getting a Shiva in you. If\nthe mod ID number that we get by\nmodeling this random word is\nbetween zero and 10. It's going\nto be pug between 10 and 30.\nshiba inu between 30 and 100 St.\nBernard and that's how we get\nthese randomness values. So now\nthat we have this modded RNG, we\nhave this mod ID number that's\ngoing to be between zero and 99.\nOkay, this function called Get\nbreed from modded RNG. And this\nis going to take the UN 256 mod\nID RNG will make this a public\npure function, and it's going to\nreturn the breed of the dog. Now\nthe breed of the dog is going to\nbe an email similar to raffle\nstate that we did before. We're\ngoing to do this right at the\ntop since this is going to be\nwhat a type declaration or say\nenum. Read, we're going to say\nthe zero with number is going to\nthe pug. The ones number is\ngoing to be the Shiva in you.\nAnd then the second one is going\nto be the St. Bernard. So we\nhave the pug which is zero to\n10. Shiva in you 10 to 30 St\nBernard 30 to 100. So get breed\nfrom modded RNG public pure\nreturns breed. So we're gonna\nloop through this we're gonna\nsay you intuitive six cumulative\nsum equals zero, we'll say you\nwent to 56. size three memory\nchance array equals yet chance\narray. So we're getting that\nchance array. So we're going to\ncreate a little for loop we're\ngonna say for you went to 56 i\nIt's gonna start with zero is\ngoing to be less than the chance\narray dot length. i plus plus\nran through that for loop here.\nAnd we're going to say if modded\nRNG is greater than or equal to\nthis cumulative sum and modded\nRNG is less than the cumulative\nsum plus chance array plus\nwherever we are on the chance\narray, then return breed of AI.\nAnd then outside of this, we're\ngonna say cume cumulative sum\nplus equals chance array of I,\nlet's say moderate orangey\nequals 25. And if it's 25, it\nshould be a Shiva in you,\nbecause that's between 10 and\n30. So we're saying if mod RNG,\nwhich is 25 is greater than or\nequal to cumulative sum, which\nright now is zero, and it's less\nthan n, the Moto G is less than\nthe cumulative sum plus the\nchance array of I which is going\nto be 10 Return breed of I\ncumulative sum is currently zero\nplus chance of I which is 10 is\ngoing to be 10. And this is not\ntrue because Morarji is 25. So\nsince this is not true, we're\ngoing to move to the second step\nwhich is just cumulative sum,\nplus equals chance right? So\ncumulative sum will now be equal\nto 10. And then we reached the\nend of the for loop. So we'll\nrestart i is now one, so let's\ntry this again mod RNG is\ngreater than or equal to\ncumulative sum Okay, that is\ntrue cumulative sum is 10. Mod\nRNG is 25. And mod RNG is less\nthan cumulative sum plus chance\nre of AI, which is 30. So we're\nsaying 25 is less than 10 plus\n30, which is 40. Return breed of\nAI, this is true. So breed of AI\nwould be true and AI at the\nmoment is one. And if we scroll\nup, that's indeed the Shiva in\nyou. So that's how this function\nis going to work, it's going to\nget us the breed from that\nmodeling bit. And then if for\nsome reason, some really wacky\nstuff happens here, we want to\njust go ahead and add a revert,\nright, because we should be\nreturning a breed. But if we\ndon't return a breed, we should\njust revert. So we're going to\ncreate a new error at the top,\nrandom IPFS NFT underscore\nunderscore range out of bounds.\nThe down below, we're just going\nto say if for some reason you\ndon't return anything, just do a\nrevert random IPFS NFT range out\nof bounds. And now we have this\nfunction. Okay, so now we can\nget the brief from a modded RNG.\nSo pack in our fulfill random\nwords function. Let's go ahead,\nand we'll say, we'll uncomment\nthis will say breed, dog breed,\nequals get breed for modded RNG\npass the modded RNG here, and\nlet's move this safe mint down\nbelow us getting the dog breeder\nso we can mint and add the dog\nbreed at the same time. So we're\ngonna go ahead and safe mint\nhere.\nNow we can do a few things to\nset this dog breed here, we\ncreate a mapping between the dog\nbreed and the token URI, and\nthen have that reflected in this\ntoken URI function. Or what we\ncould do is we could just call a\nfunction called Set token URI\nand the openzeppelin ERC 721 You\nhave to set this token your eye\nfunction yourself. However,\nthere is an extension in the\nopen Zeppelin code called ERC.\n721 Uri storage and this version\nof the ERC. 721 comes with a\nfunction called Set token URI\nwhere we can just call set token\nURI. And this will automatically\nupdate that tokens token URI to\nwhatever you set it as. So we're\ngoing to use this extension this\nset token URI in our contract.\nAnd the way that we do this is\ninstead of doing token ERC 721\nYear C 721 that soul will do\ntoken ERC 721 slash extensions\nslash your C 721 Your arise\nstorage. That's all. And we'll\nsay random IPFS is ERC 721 your\nrice storage. Now what's cool is\nthat our constructor will still\njust use ERC. 721 Because ERC\n721 Uri storage is extending ERC\n721. And then this contract just\ncomes with some additional\nfunctions like set token URI. So\nright after safe meant, we're\nactually going to call set token\nURI with this new item ID. And\nthen we're going to give it that\nbreeds token URI, we're gonna\ngive it a string here that\nrelates to whatever breed that\nwe just got based off the dog\nbreed here. Now, to do this,\nwhat we could do is right at the\ntop and our NFT variables, we\ncould create a string array,\ninternal, Alt S dog token, your\neyes, we're gonna make this\nconstant where it would just be\nthis array of all these strings\nthat we created. But maybe in\nour code, we want to make this a\nlittle bit more variable. And we\nwant to parameterize this. And\nthat's exactly what we're going\nto do. So we're going to create\nthis string array, internal s\nunderscore dog token, your eyes,\nwhich is just going to be a list\nof these URLs are these URLs\nthat point to stuff like this,\nwe're going to do that in our\ncode so that when we upload any\nimage that we want to IPFS we\ncan then upload this s dog token\nyou arise accordingly. In our\nconstructor, we're actually\ngoing to take in another\nparameter called a a string of\nsize three, memory dog token you\nour eyes, we're going to pass as\na constructor parameter, these\ndifferent dog token you arise.\nSo we're going to pass it this\nlist of dog token arise. Of\ncourse zero is going to be the\ntoken URI of the pug. One is\ngoing to be the Shiva in you and\ntwo, of course is going to be\nthe St. Bernard. So we're going\nto pass it this list of dog\ntoken your eyes, and then down\nin set token your eye from that,\nthat list that we created. We're\ngoing to set the token URI of\nthis token based off of that\narray of the UN 256 version of\nthat breed are casting this dog\nbreed back into you and 256 to\nget its index. With that we now\nhave a way to actually,\nprogrammatically get a provably\nrandom NFT with different\nrandomness for different one of\nthese NF T's. Now, let's go back\nup to our little, our little\ncomments we made here, limited\nNFT, we trigger a chain link or\na VRF. To call random number, we\ngot the rarities down, we got\nthe minting down. Awesome. Okay,\nwe don't have this part, though.\nUsers have to pay to Minton NF T\nand the owner of the contract\ncan withdraw the eath. Okay,\nthis is stuff we've already done\nbefore, this should be pretty\nfamiliar here. So back in our\nrequest NF t function, we'll\nmake this a public payable. And\nall we'll need to do is we'll\njust say if message dot value is\nless than some mint fee, and\nactually let's go back to our\nconstructor, we'll create a mint\nfee, you int 256 Mint fee.\nAnd then we'll do you in 256\ninternal I underscore mint fee,\nwe'll make this immutable. And\nthen we'll just say I'm\nintervene equals mint fee. If\nmessage of value is less than\nmint fee, you already know we're\ngoing to do a revert, need more\neath sent, we'll create a new\nair called need more eath sent\nand actually we'll do air random\nIPFS and ft underscore\nunderscore need more II sent\nlike that, copy this, paste it\nhere and boom. So now just by\nadding this line, this is now a\npayable function. And people\nhave to pay some mint fee to\nmint their randomized NF t. Now\nwe're also going to want a way\nfor owner to withdraw. So we'll\nscroll down a little bit. We'll\nscroll down to here, CREATE\nFUNCTION withdraw, this will be\npublic. And we only want the\nowner to do this. So we could\ncreate our modifier, you know, a\nmodifier again only owner, or\nwhat we could do is use\nopenzeppelin. Again,\nopenzeppelin also comes with\nsome access code, or one of\nthem's this ownable code, and in\nhere, it already has the only\nowner modifier for us, we're\njust gonna go ahead and import\nthat as well. We'll do import at\nopenzeppelin slash contracts\nslash access slash ownable dot\nsom, and we'll say contract\nrandom IPFS. And if t is this,\nthis come ownable. And then\nwe'll make our withdrawal\nfunction only owner. And so\nwhoever deployed this contract\nis going to be set to being the\nowner, which is what we want.\nAnd when here, same as what\nwe've done, we'll do u and 256.\namount equals address this dot\nbalance. And then we'll do bull\nsuccess comma equals payable,\nmessage dot sender, but call\nvalue is going to be a mount and\nthen we're going to call\nnothing. And then we're going to\nsay if not success. And we're\ngoing to revert with transfer\nfailed, then on top, we're going\nto do error transfer failed. I'm\njust going to copy this a little\nquicker, like so and then come\nback down to transfer failed\npaste it here. So we're gonna\nrevert random IPFS. And if T\ntransfer failed, perfect, so now\nwe have a withdrawal function\nand a way for people to pay for\nart here. Now we don't need this\ntoken URI anymore, because when\nwe call set token URI, this is\ngoing to set the token URI for\nus because in the back ERC 721\nUri storage already has that\nfunction laid out. So our\ncontract will already have the\ntoken URI function and we don't\nhave to explicitly set it\nourselves. But we do have to\nexplicitly set some other ones.\nWe are going to need function\nget meant fee will be a public\nview turns you went to 36 turn I\nmeant fee will need function get\ndog token your eyes, you went to\n36 index, this will be a public\nview which will returns the\nstring memory return s\nunderscore dog token your eyes\nindex will need function get\ntoken counter. This will be a\npublic view turns you into 56\nReturn s underscore token\ncounter. Alright, so we just\nwrote a ton of code here. And of\ncourse as we taught you before,\nwe also are going to need some\nevents. So when we request an NF\nT, we're going to emit an event.\nSo we'll omit NF T requested and\nthen we'll pass it the request.\nID in the message dot sender. So\nup at the top will say event NF\nT requested. So pet, take a un\n256 index Request ID, and then\nan address requester. And then\nwe're also going to make an\nevent for NF T minted for when\nit's finally minted. And it's\ngoing to take a breed, dog\nbreed, and an address, mentor.\nSo write down when we fulfill,\nwe're going to emit NFT. minted.\nAnd it's going to take that dog\nbreed and then the dog owner.\nOkay, we've just written a lot\nof code here. So let's go ahead\nand see if we can compile this\nwith H H compile, or yarn\nHardhead, compile. And Wow,\nlooks like we went ahead and\ncompiled it. This is great. So\nall of our code now looks good.\nNow might be a good time to take\na quick breather, we've just\nwritten a lot of code. And it\nmight be good to just go over\nall the stuff that we just went\nthrough. A lot of this is\nfamiliar, but it's still really\ngood to redo some of this stuff\nand really get that muscle\nmemory and for these credit, an\nNFT contract that when you mint,\none of these NF T's, you're\ngonna get a pug a Shiva in you\nor St. Bernard, based off of\nsome rarity, where the pug is\nreally rare. Ship it in you is\nsort of rare in the St. Bernard\nis pretty common. The way we do\nit is we have this request NF t\nfunction, which people have to\npay to call and it makes a\nrequest to a chain link node to\nget a random number. Once our\ncontract gets that random number\nuses a chance array to figure\nout which one of the NF T's\nwe're going to actually use for\nthis for that minting. And we're\ngoing to set the token URI\naccordingly. And we're going to\nstore the image data for this on\nIPFS, which we haven't done yet.\nSo our deploy function for this\nis going to be really the\ninteresting part of this\ncontract. But because we just\nwent over so much, if you want\nto take a quick break quick\nbreather, and then come back, I\nencourage you to do so we just\nlearned a lot. And we wrote a\nlot of solidity code. So go take\na quick breather, and I'll see\nyou in a\nminute. So let's go ahead and\nget on in here, create a new\ndeploy, go to ploy, random\nipfs.js. And now this is going\nto look really similar once\nagain, to the lottery contract\nthat we've already done. And we\ncan copy some boilerplate from\nour code over here, we're gonna\nneed all this, we'll just copy\nthat, close it off with a little\ncurly and boom, we've already\ngot a boilerplate. Now, since\nwe're working with chainlink,\nhere, we are going to be working\nwith mocks again. So we're gonna\ncome back new file 00, deploy\nmocks dot j s. And if you want,\nyou can just copy paste from the\nearlier section that we did with\nthe with the raffle slash\nlottery. Since we're going to be\ndoing the exact same thing here,\nI'm gonna go ahead and pause and\nyou can copy paste from your\nprevious projects. Or if you\nwant, once again, you can just\ncome to the GitHub repo\nassociated with this course,\ncome over to the deploy. And go\nahead and grab the deploy mocks\nright from here. If you grab\nfrom the GitHub repo, we also\nare going to be working with a\nmock v3 aggregator, but I'm not\ngoing to add that part in quite\nyet, because we don't need it\nquite yet. So go ahead and pause\nthe video right now. Copy and\npaste the VRF coordinator mock\nor pause the video and try to\nwrite the mock code yourself.\nOkay, great. So once you've done\nthat, we're of course gonna need\nto concentrate ID network dot\nconfig dot chain ID, because\nwe're gonna need to decide if\nwe're actually on a development\nchain. So same as what we did\nbefore then we're gonna say if\ndevelopment chains that includes\nnetwork dot name, then we're\ngonna say const VRF coordinator,\nB to mock goes await ethers dot\nget contract VRF. Core. The name\nfor the to mock similar to the\nraffle we're gonna say let VRF\ncoordinate Tor v two address,\nsame, the VRF coordinator v two\naddress equals VRF. coordinator\nv two mach mock that address and\nthen we're going to want to\ncreate a subscription exactly\nthe same as what we did with our\nlottery. So we're gonna say\nconst, TX equals weight VRF\ncoordinate tore V to mock dot\ncreate subscription. And then\nwe'll do const TX receipt equals\nweight, TX dot weight one. And\nwe're gonna get the sub ID from\nthis exactly the same way we did\nit in the lottery section. So\nwe'll say that we need that sub\nID by saying sub subscription ID\nwill say subscription ID equals\nTX receipt, dot events, zero.\nThat args got somebody. So\nthat's what we do if we're on a\ndevelopment chain, else said the\nVRF coordinate tore V to address\nequals network config of the\nchain ID dot VRF coordinate or B\nto that then the subscription ID\nequals network config. Chain ID\ndot subscription ID. Perfect.\nAnd then we'll just double check\nour helper hard hat config. So\nthat Rigby has both the VRF\ncoordinator v2. And we're also\ngoing to need a subscription ID.\nSo right now, I have our\nsubscription ID from our past\nproject from our lottery\nproject. But we can go ahead to\nV or F dot chain link, we can go\nto V RF, that chain link can\nmake sure we're on rink B here.\nLet's see our other\nsubscriptions. And it looks like\nwe have one here. So I'm going\nto copy this and paste it in for\nRigby. Now again, we can go over\nto DockStar, chain link EVM\nchains, contract addresses for\nusing reminisce to see more\nparameters in here, especially\nfor Rigby and make sure these\nare all correct. We have our\nsubscription here, we'll add a\nnew consumer very soon once we\ndeploy this contract if we're\nactually going to use RankBrain.\nSo we'll do a little log here\nwith a bunch of hyphens. We'll\nnow get args equals, we'll make\nour arguments here. And what do\nwe need, we need the coordinator\nsubscription, gasoline callback,\naddress, dog, your dog token,\nyour eyes and admin fee. So\nwe're going to need VRF\ncoordinator for the to address\nsubscription ID. And we'll need\nthe network config. Chain ID dot\ngas lane. We need the network\nconfig chain ID dot meant fee,\nthen we'll leave that work\nconfig chain ID dot callback gas\nlimit\nthe right order? Yes it is. And\nthen we need the dog token your\neyes and the mint fee with the\ndone here.\nNow what do we not have, we\ndon't have this array of token\nyour eyes. Now we can do this\none of a couple of ways. If you\ngo to the GitHub repo associated\nwith this, go to deploy, we\nactually did the randomness for\noh three in the get here,\nthere's one section where we\njust automatically say, okay,\ngreat token, you rise is just\ngoing to be these three. And\nthen if we can actually even\ncopy paste these CDs on IPFS,\nthese are the better ones that\nactually do have the IPFS as the\nimage. And we can see them like\nthat. So we could just use the\nstuff that I've already\ndeployed. And if you want to do\nthat, you absolutely 100 percent Can,\nor what we could do is we get to\nactually learn to upload\nprogrammatically our own images\nto IPFS. That sounds a lot\ncooler. So let's go ahead and do\nthat. Now what I want you to do,\nif you want to use your own\nimages for this, feel free to do\nso. But if you want to just\nfollow along with us, then we're\ngoing to go to the Hardhead NFT\nFCC repo. And we're going to\ngrab these random NF T's from\nhim. So all you can do is you\ncan come to here. And we can go\nahead, we can right click Save\nImage, Jas, we'll save it to our\ndownloads, let's actually create\na new folder, we'll call it\nimages. And the images will\ncreate a new folder called\nrandom, then we can pull it just\nright into here, make the name\nrandom NFT. And this is just\ngoing to be plugged up png. So\nwe can do that for all of our\nimages. Now in our images tag,\nwe have the pug ship in you and\nSt Bernard. So we have these\nlocally. But we want to upload\nthese to IPFS. We want to upload\nthem in a way that anybody can\nactually pin them and work with\nthem. So before we do all this\nstuff, where we get the\narguments to deploy this\ncontract, we're going to need to\nget the IPFS hashes of our\nimages. And there's a couple of\nways we can do this. We do with\nour own IPFS node, which I've\nalready shown you how to do that\nmanually, we can also do that\nprogrammatically. Now, I'm not\ngoing to show you how to do this\nhere. However, if you go through\nthe IPFS documentation, you\nactually can learn how to do\nthrough the command line and\neven through some scripts.\nHowever, if we're the only node\nthat's running this, again, it's\nkind of centralized. So ideally,\nwe'd want these images and these\ntoken your eyes and this and\nthis token metadata on our own\nIPFS node and some other nodes.\nSo the second way that we can\nlook at this is using something\nlike Hinata Hinata is a service\nthat basically you just pay to\nhelp pin NF T for you. And this\nis going to be the one that\nwe're going to be looking at\nhere. Now the issue with binotto\nof course, is that we're just\npaying once single centralized\nentity to go ahead and pin our\ndata, we're kind of trusting\nthat they're actually going to\npin it and that they're not\ngoing to go down. The final way\nthat we could look into actually\ngetting our data is was this\nthing called NF T dot storage.\nAnd if T dot storage uses the\nfile coin network on the back\nend to pin our data now filecoin\nis a blockchain dedicated to\npinning IPFS data and storing\ndecentralized data. For us, the\nprocess is a little bit more\ncomplicated. But NFT dot storage\nmakes it really, really easy.\nNow, we're not going to go over\nusing NFT dot storage in this\nvideo. However, if you want to\nlook into NF T dot storage, for\nputting your data in the GitHub\nrepo associated with this\ncourse, we do have a script that\nuploads your code to NFT to\nstorage called in the utils\nfolder, upload to NFT. Storage.\nAnd if you want to go and try it\nout, I recommend that you do so\nworking with NF T dot storage\nwill be one of the most\npersistent ways to keep our data\nup. But it's still good to\nupload your own data to your own\nIPFS node, which we've learned\nhow to do manually and at least\nget one other person also\npinning your data. And then\nideally, an entire decentralized\nnetwork, pinning your data,\nwhich is what NFS storage helps\nyou do. But for now, for us,\nwe're just going to work with\npinata to keep it nice and\nsimple for this video. And then\nuploading uploading our metadata\nand our token, your eyes up to\nIPFS will give us this list of\ntoken your eyes for our three\ndogs. So up at the top here,\nwe're going to do a little if\nwe're gonna say if process dot e\nNV dot upload to pinata equals\ntrue, yes, we're going to use\nthe string true like that. Then\nwe're going to upload to pinata.\nAbove here we're going to say\nlet's token your eyes. And we're\ngonna say token your eyes equals\nawait,\nhandle token your eyes. And\nwe're going to create a function\ncalled handle token your eyes,\nwhich is going to upload our\ncode to pinata down outside of\nthis, we're going to create a\nnew function called async.\nfunction. And we'll token your\neyes. And this is going to\nreturn an array of token your\neyes for us to upload to our\nsmart contract, we're gonna say\ntoken, your eyes equals this and\nthen way at the bottom, we're\ngonna say return token your\nrise, right, so we're going to\nbe returning this array here.\nNow we need to do two things, we\nneed to both store the image in\nIPFS. And then we need to store\nthe metadata in IPFS. So first,\nwe're going to create a store\nimages function. And this is\nwhere we're going to actually\nget to go to our utils. And\nwe're going to create a new\nfolder in here, we're going to\ncreate a file called New File,\nUpload to pinata dot j s, we're\ngoing to add all of our code for\nactually uploading to pinata in\nhere. Because again, pinata is\nthis service that we're going to\nbe using to just pin data for us\nand work with pinata, we can go\nahead, try for free. And we can\ncreate our own application.\nAnd we're good to go. See the\nsetup here looks really similar\nto an IPFS node, because that's\nessentially what pinata is. It's\njust an IPFS node, run by\nsomebody else. And we can say,\nHey, can you please pin this\ndata for us. So a manual way we\ncould do this is we could just\nhit Upload Cid just like an IPFS\nnode and put the hash of some\nIPFS file, and pinata would pin\nit for us, we could also upload\na file or a folder just like an\nIPFS node. But for us, we're\njust going to leave this blank\nbecause we're going to want to\ndo this programmatically,\nbecause we're engineers. So what\nwe can do is we come over to our\nprofile, we'll open up API keys\nand documentation. And the\ndocumentation pretty much has\neverything that we need to get\nstarted. If you scroll down to\nthe pinata Node js SDK, this is\nbasically what we're going to be\nworking with, they've already\ncreated an SDK for us that we\ncan work with, we're gonna go\nahead and install this pinata\nSDK. So they're using NPM,\ninstall dash to save, we're just\ngonna go ahead and use yarn, add\ndash dash dev at pinata dash\nSDK, and they have all these\ndifferent endpoints, we can call\nto actually pin data, we're\ngoing to be doing pin file to\nIPFS, because we're going to\nupload our files and also pin\nJSON to IPFS. Since JSON is\ngoing to be the metadata, and\nfile is going to be the actual\nimage. And if you click on it,\nit'll even give you kind of the\noutput of the SDK here. So back\nin our code, now that we've\ndownloaded this, we can go ahead\nand start creating this. So\nwe'll say const pinata SDK\nequals require at pinata slash\nSDK, and then we'll create a\nfunction async function called\nstore images, it'll take an\nimages file path. So we're going\nto use this function will pass\nit our images, random n of t\nfile paths, and we're going to\nhave it store everything in that\nfolder to help us work with\npaths. We're also going to\nInstall this path package. So\nwe're gonna do yarn, add dash\ndash dev path, like, so, we're\njust going to work with Fs as\nwell not Fs extra. So now that\nthat's up, we're gonna say\nconst. Path equals require path.\nAnd in here, we're gonna say\nconst, full images, path, equals\npath dot resolve, images file\npath. So if we give that like\ndot slash images, slash random,\nyou know, NF T or whatever, this\nwill just give us give you the\nfull output of the path. So\nwe're getting the full images\npath, and then we'll say, we'll\nget those files by doing const\nfiles equals Fs. So we'll do\nwe'll grab s will say const Fs\nequals require Fs just to read\nthese files in here, that read\nDirSync. We're just going to\nread the entire directory and\nget our files back to read\nDirSync full images path. And to\nactually test that this is\nworking, what we're going to do\nis we're going to do module dot\nexports, equals store images.\nAnd then back in our deploy\nscript here, we can just go\nahead and\ncomment out args. And we can do\nimport const, store images\nequals require dot dot slash\nutils, slash upload to pinata.\nAnd in this script, we could\njust do a little, we just call\nthis we could say await, or\nimages, and then we'll pass pass\nour images location, maybe way\nat the top, even outside of the\nfunction, we'll say const images\nlocation equals dot slash images\nslash random and ft. So we'll do\na weight store images like that.\nAnd we should be able to run\nHardhead deploy. Then if we add\nsome tags to this deploy thing,\nmodule, dot exports, dot tags\nequals, we'll say all random\nIPFS. And then main, we do\nHardhead deployed dash dash\ntags, random IPFS will also do\nmocks believe, and I need to\ncreate a test folder in here New\nFolder test. And we need to add\nthat VF coordinator v2 Mock in\nhere. So again, I'm just copy\npasting the VRF coordinator v2\nMock from our raffle project.\nFeel free to pause, copy, paste\nit over, or again, everything's\navailable on the GitHub. So\nwe'll try one more time. Tags,\nrandom IPFS, and mocks and boom,\nokay, mocks deployed and perfect\npug dot png ship any png St.\nBernard PNG. Great. So we're\ngetting the files correctly\nhere. Now let's create a little\narray for responses from the\npinata server. So we'll say\nresponses equals this. And we'll\nsay for each file index in files\nfor each one of these files in\nhere, we're gonna say const\nreadable stream for file equals\nFs dot create read stream of the\nfull images path slash files of\nfile index. What does this line\ndoing? Well, we're creating a\nread stream. Since this is an\nimage file, it doesn't work\nexactly the same as just like\npush this data, right? We have\nto create a stream where we\nstream all the data inside of\nthese images. Because these\nimages, even though they're just\nlike a cute little image here,\nthey're really this kind of this\nbig file with all this bytes and\nall this data in here, and then\nwe're going to send it by doing\ntry, we'll say const response\nequals await. And this is where\nwe're going to do pinata stuff.\nIf we go back to the pinata\ndocks, there's some stuff about\nkeys in here. What we can do, if\nyou go to your profile, go to\nAPI keys, we can create a new\nkey, we'll say this is an admin\nkey, why not? We'll give it all\nthe pinning access here. Maybe\nwe'll give it this, maybe we'll\njust give it everything,\nwhatever you want to do. And\nthen we'll call this hard hat,\nFree Code Camp key, create key.\nNow we're going to want to grab\nthese and drop these into a dot\nenv. So the API key, go ahead\nand copy, come back over here.\nOpen up our dot env. And we're\ngonna call it our pinata. And\ndata API key equals that key.\nWe're going to grab the API\nsecret and say pinata API secret\nequals that key. We don't need\nthis massive token here for what\nwe're going to do. But if you\nwant it, you can absolutely have\nit. And then outside of our\nstore images, we're going to say\nconst pinata API key equals\nprice says, do you need that\npinata API key? And then can't\npinata. API secret equals\nprocess dot E and V dot pinata\nAPI secret. And then we'll say\nconst. pinata equals pin auta s.\nDK of pinata\nAPI key comma, pinata API.\nSecret in order to work with\npinata, we need to pass it an\nAPI key and API secret so that\npinata knows it's us who's\nworking with them. So once we\ninitialize this pinata thing, we\ncan now run pinata dot and then\ndo some pinata stuff, right, we\nwant to work with this pin file\nto IPFS, which takes this\nreadable stream, which is why we\ncreated that readable string, so\npinata that pin file to IPFS. Of\nreadable stream or file. And\nthen we're going to push this\nresponse on to our responses\narray. So we'll say responses\ndot push response. And then\nwe're going to catch error, just\nin case there's some weird error\nhere. And we'll just say console\ndot log error, and then we're\ngoing to return responses and\nfiles. So we're going to return\nall the responses from pushing\nall these files up, and then the\nfiles as well. Now, at this\ncurrent point, we can go ahead\nand actually test this out\nourselves. So we have this in\nhere. If we go back to our\ndeploy, at the top, we have this\nif process dot E and V dot\nupload to Niada equals true, do\nthis stuff here, uploading to\nIPFS. And the final thing we\nneed to do in here, of course,\nis going to be require dot env\ndot config, so that we can pull\nin our dot env file. Down here,\nwe're just doing a weight store\nimages. So if we run this as is,\nit should go ahead and store\nimages. So let's run that same\ncommand, or that deploy random\nIPFS and the MOX to run this\nstore images command. And if we\ncome back to our pinata, after\nwe run it, we'll be able to see\nthe code uploaded here. If we\nrun now, the script loaded IPFS\nit'll give us a little bit of a\ndelay, because it needs to\nupload these big picture files\nto IPFS. or more correctly.\npinata, I'm gonna say uploading\nto nada. And we could even say,\nconsole dot log, working on file\nindex, done Excel. And okay,\ngreat. It looks like it finished\nrunning. So if we come back to\nour project here, and we do a\nlittle refresh, we see our three\nfiles have been uploaded, and we\nsee they each come with their\nown CID. Now, if you want, you\ncan go ahead and copy the CID.\nAnd if you have your IPFS node,\nwhat you can do, what we can do\nis actually we can hit import\nfrom IPFS. Paste it in here. And\nwe can say exactly what this is,\nwhich is IPFS dot dot slash last\nas the St. Bernard called St.\nBernard. Important. And now\nwe'll have it pinned on our\nIPFS. I've got mine saved in a\nlittle puppies file. Now that\nwe've got them uploaded, and\npinata do actually recommend you\npin your own on your own node as\nwell. So cool. So we've got a\nway to get those images up onto\nIPFS. Awesome\nonto. Now that we've done that,\nwe're also going to need to\nstore the token URI metadata. So\nlet's go ahead and we'll delete\nthat for now. What we can do\nback in here, is back up at the\ntop again, we can say const meta\ndata, template equals and we'll\ncreate a metadata template. This\nis going to have all the basics\nof what we need for our metadata\nfor our token URI. So in here,\nwe'll have a name, set, it's\nblank, we'll have a description,\nwhich will also set as blank\nwill have the image which this\nis going to be replaced with the\nimage URI that IPFS URI we just\ncreated. And if you want to give\nyour NFT like any types of\nstats, you can do some you can\ncreate this Attributes section\nlike so. And if you give it like\ntraits type, cuteness, comma,\nvalue 100. And this is how if\nyou wanted to create like\ndifferent cards or have\ndifferent attack, defense, HP\nspeed in different different\nstats for your NF T's, you would\nadd them in this Attributes\nsection. Typically, you'd want\nthese attributes also stored on\nchain so your contracts can\nobviously programmatically\ninteract with these attributes.\nBut so now we have this metadata\ndata template. This is what\nwe're going to fill out for each\none of our dogs. Yes, we're\ngoing to create a new function\nin here called async, store\ntoken URI metadata. And we'll\npass in the meta data to the\nasync function. And we'll pass\nin the metadata that we get from\nour script over here. So we have\nthis little template here. And\nwe're going to populate this\ntemplate based off of what we\nget from storing data in IPFS.\nSo now we're going to write the\nrest of this handle token your\neyes bit. And so we're going to\nwant to do in our data and V,\nwe're going to say, upload to\npinata equals true, so that we\ncan do everything and handle\ntoken your eyes. So upload to\npinata, it's true, we'll scroll\ndown, we'll start creating this.\nSo the first thing we got to do,\nobviously, we're gonna want to\nget those responses and those\nfiles, right, because it's in\nthe responses, pin file to IPFS\nis going to return the hash of\nthe file, right, and we need\nthat hash, to add to our\nmetadata. So we're going to do\nis down here, we're gonna say\nconst, responses, which is going\nto be image upload, responses,\ncomma files, equals await, store\nimages, and then images,\nlocation. And so this response\nis, is going to be a list of\nthese responses from pinata. And\nthese responses are going to\nhave the hash of each one of\nthese uploaded files. So now\nwe're going to loop through that\nlist and upload each of the\nmetadata does. So we're going to\nsay for each image upload\nresponse index, in image upload\nresponses.\nFor each one of these, we're\ngoing to create the metadata,\nwe're going to create metadata\nand then upload the metadata. So\nwe're gonna say let token URI,\nmetadata equals dot dot, dot\nmeta data template. So this is\nsome fun JavaScript, syntactic\nsugar, which kind of means like,\nunpack. So basically, we're\nsaying token URI metadata is\ngoing to be equal to this stuff.\nWe're sticking all this stuff\ninto this token, your metadata\nvariable, now we're gonna say\ntoken, your metadata. dot name\nis going to be equal to files\nof, of the index, dot replace,\ndot png, dot png with nothing.\nSo files is going to be each one\nof those files, right? It's\ngoing to be dot png can be St\nBernard dot PNG, and it's going\nto be Shiva dot png. And\nbasically, all we're doing is\nwe're saying, okay, cool, the\nname inside of our token,\nmetadata is just going to be\npug. So we're just going to drop\nthe extension, basically. So\nthat's how we're gonna get the\nname token, your AI metadata dot\ndescription, is going to be\nequal to and adore a bowl. And\nthen we're just going to get the\nname, token URI metadata dot\nname. So it's going to be an\nadorable pug pup and adorable\nSt. Bernard pop or an adorable\nship and you pup token URI\nmetadata dot image, which is\nprobably the most important one\nhere, this is going to be, it's\ngoing to be that IPFS extension\nwith the IPFS hash that we get\nfrom the response. So we can get\nthat by doing image, upload\nresponses of the image upload\nresponse index dot i IPFS. Hash,\nso we can go to the pinata docs.\nAnd we can see pin file to IPFS\nreturns in IPFS hash, the pin\nsize and the timestamp, all we\ncare about is the IPFS hash. And\nwe're going to use that to give\nthe our metadata image here. And\nthen finally, I'll do a little\nconsole dot log uploading. And\nthen we'll say, token, your eye\nmetadata dot name, dot dot dot.\nAnd now we'll have to store the\nfile or store store the JSON to\npinata slash IPFS. And this is\nwhere in our upload to pinata\nbit here, we're going to add\nthis function here. So we have\nstore token URI metadata. And\nall we're gonna do in here, so\nwe're gonna say try const\nresponse equals await, and nada,\nthat pin JSON to IPFS of the\nmetadata, right. And again, we\nhave, we want pin JSON to IPFS,\nwhich is going to be really\nsimilar. So we need to pass the\nbody, which is going to be the\nJSON. And we have some optional\nstuff here, but it's gonna give\nus the same return the IPFS hash\npin, size and timestamp. And\nthen if this works, well, we're\njust going to do return\nresponse. Otherwise, we'll do\ncatch error. And then we'll just\ndo console dot log error, and\nthen we'll just do return null\nand then we'll exports or token\nURI metadata. And then back in\nour deploy, we'll go ahead and\nimport this store token URI\nmetadata. And we'll scroll down.\nAnd they'll do const, metadata,\nupload response equals await,\nstore token URI metadata where\nwe pass the token, Uri,\nmetadata. And now finally, and\nnow with all of these metadata\nis being uploaded are finally\ngoing to have the token you\narise that we need. So we'll\nsay, token, your eyes dot push,\nIPFS, slash slash, and then the\nmetadata response here, metadata\nupload response dot IPFS. Hash.\nSo we finally will have this\narray of IPFS hashes that points\nto the metadata, and each one of\nthese metadata are pointing to\nthe image. And then we'll do a\nlittle console dot log token.\nYou arise, uploaded, they are\nand then we'll do another little\nconsole dot log token your eyes.\nOh, all right. So let's go ahead\nand run this. And let's see if\nit works. In our pinata, we\nshould see both the images and\nthen also the metadata. If\nprocess dot E and V dot upload\nto pinata equals true, looks\nlike it is true. And we should\nrun this and handle token, your\neyes will both upload our images\nwith store images here and then\nupload our metadata. We'll only\nsee it in here once because\nagain, it's gonna have the exact\nsame Cid right, it's gonna have\nthe same hash, so we won't get\nduplicates of the same file in\npinata, or in our IPFS. So let's\nopen this up. Let's run this one\nmore time, or had deployed dash\ndash tags, random IPFS and\nmocks. Okay, it looks like we\nalmost worked uploading to\nbanana working on zero working\non one working on two metadata\ntemplate is not defined. Ha,\nbecause I spelt meta data\ntemplate, meta data template,\nlet's spell things correctly.\nNow let's try this again, it\nworking on zero is it working on\ntwo image upload response is not\ndefined. I should spell\ncorrectly. There we go. Let's,\nlet's do our caps correctly.\nLet's try this one more time.\nOkay, 012, uploading pug\nuploading Shiva in you uploading\nSt. Bernard token your eyes\nupload it and they're here. Now\nif we grab this, and stick it\ninto our browser, or your IPFS\nnode, boom, we have them in\nhere. And what we can do is we\ncan grab this hash, we can jump\ninto our IPFS desktop, go to\nfiles, we import from IPFS paste\nit in here. And you know give it\nthe name etc, that we have it on\nour own IPFS node as well.\nAwesome. Now if we go over to\npinata give this a little\nrefresh, we can see we have\neverything in here. So if I copy\none of these, and I go to IPFS\ndot dot slash paste that in, we\ncan see the metadata in here.\nAnd everything looks good. So\nthis is absolutely massive that\nwe've just done this because now\nwe can store data both on our\nown IPFS node and at least one\nother nodes so that if our\ncomputer goes down or our server\ngoes down, and there's at least\nsomebody else who's done it.\nNow we finally have this list of\ntoken your eyes, we can finally\ngo back to our arguments. And\nnow we can do like this. And we\ncan upload all of those token\nyour eyes to our smart contract.\nAnd then we're going to need a\nmint fee as well for this. So if\nwe go to our upper heart at\nconfig will create like a little\nmint fee in here, say mint fee\nis going to be whatever we want\n12345678123456789 What we'll do\nis 0.01 eath. So we'll even drop\nthis down one, we'll do it for\nwe'll do it for the Hard Hat\nNetwork. And then we'll also do\nit for Rinckey as well. We have\nthe arguments here. Now we can\nfinally deploy our contract. So\nwe'll do const random IPFS. And\nif t equals await, deploy, if\nthe contract is random IPFS NF T\nfrom Deployer. args is args. Log\nis true. And then wait\nconfirmations is going to be\nnetwork dot config dot block for\nconfirm terminations, or one,\nand great they might do another\nlittle line here. We'll do the\nverification bit. I'm actually\njust going to copy that from our\ndeploy. Our basic I'm just going\nto copy this it's going to be\ncode is going to be exactly the\nsame, except for we're going to\nverify random IPFS instead of\nand then actually we use args\ninstead of arguments, then that\nis it. So we'll give this a\nquick deploy test, HH deploy or\nyarn Hardhead deploy. And it\nlooks like we almost worked we\nalmost got Everything's done.\nNetwork config is not defined,\nbecause we didn't import it. So\nlet's go ahead and import\nnetwork config from our helper\nHardhead. Config. So import\nnetwork config. We'll try this\none more time chain ID is not\ndefined, it's going to be chain\nID, that chain Id try one more\ntime. And awesome, it's at least\nworking for our heart Hat\nNetwork. And then we can copy\nthis array, and just paste it in\nhere. Boom. And now we have this\ntoken your eyes. And now back in\nour dot env. Now we can set this\nto false. Since we have all\nthose token neurons already, we\njust run hard hit Deploy, we'll\njust use the token heroes that\nwe already have uploaded. Yes,\nwe have done it. Now I know\nyou're excited to see this on\nsomething like open See, you're\nexcited to see this right away.\nBut let's save deploying all\nthese to rink B for our last\nthing, because again, deploying\nto test nets is really slow. So\nlet's just wait until our last\nbit and then we'll go ahead, and\nwe'll deploy this to rank B. But\nbefore we write tests, something\nthat I noticed when I was\nwriting my test is that we\nforgot to update the token\ncounter. So in here, before we\ndo, our safe, men will do s\ntoken counter plus equals s\ntoken counter, which is going to\nbe esto. Encounter equals es\ntoken counter plus one. And\nthat's a perfect example of why\nwriting tests is so important.\nBefore you write any tests,\nyou're definitely going to need\nto fund that subscription, which\nwe didn't do in here. So we need\nto do a wait VRF coordinate Tor\nV to mock dot fund, sub\nscription. subscription ID,\ncomma will do fund amount, and\nthen just up at the top,\nactually, we can even pull this\nout too. Since that's not gonna\nchange at all. We can do let\ntoken year I was like that looks\nlike const fund amount equals\ncool. Or you could do you know,\nyou could also do ethers dot\nparse. But as you know, before\nwe can even deploy to rink beam,\nwhat should we do? Well, you got\nit right, we should absolutely\n100 percent write some tests. So we're\ncreate a new file called random\nIPFS NF t dot test dot j s. And\nwe can write some tests here.\nNow, once again, there isn't\nanything new that you're going\nto learn in this test here, it's\ngoing to be very similar to the\nlottery tests that we've written\nbefore. So here's what I'm going\nto say, I'm going to highly\nrecommend once again, that you\ntry to write at least two or\nthree of your own tests, but\ndefinitely write a test fulfill\nrandom words. But I'm going to\nencourage you to pause the video\nnow, please pause the video and\ntry to write some tests yourself\nstruggling with some of these\ntests. And writing some of these\ntests is going to be what really\ngives you those coding muscles,\nif you will, that's going to\ngive you the skills to keep\nwriting these tests and be\nreally fast and really\nefficient. When you're building\nthese smart contracts. These\ntests are the tests that protect\nyou from writing bad immutable\ncode. So please pause the video,\nI'm going to copy paste from the\nGitHub repo. But please take\nthis time to write some of your\nown tests here.\nAlright, great. Did you write\nsome tests? Hope you did. If you\ndidn't write some tests, pause\nthis video and go write some\ntests. I promise you doing these\ntests, writing exercises on your\nown will help you dramatically\nat this point, what have we\ndone, we've done some some\namazing stuff, we've deployed a\nbasic NFT with pretty much\nnothing to it, then we've\ndeployed a provably random NFT\nwith random stats with random\ntraits with different rarities,\nfor each NF T's depending on\nwhen it was minted, or who\nminted it. We've stored the data\nfor this on IPFS. And we've\nlearned how to programmatically\nupload our files to pinata,\nwhich is another pinning service\nfor us. We learned a little bit\nabout NFT debt storage, which is\nanother way to pin data to IPFS.\nAnd then of course, we learned\nthat if we wanted to, we could\nprogrammatically pin data to\nIPFS on our own node. But since\na lot of us aren't gonna be\nrunning our own computers 24/7.\nWe went ahead and said, Okay,\nwell, we'll stick with pinata\nfor our default here. Now that\nwe've done all that, boom, got\nanother little checkmark here.\nNow I got something to say we\ndon't need to host our data on\nIPFS can actually host our data,\nour metadata directly on chain\nif we want to. However, there\nare some pros and cons to IT\npros of hosting on IPFS, or\nthat's going to be cheap. And\nthe cons are that someone needs\nto pin our data, right? There's\nat least one person always needs\nto have her data pinned, right?\nIt's decentralized, but you at\nleast need somebody to pin your\ndata, right? And using something\nlike file coin is a way to\nincentivize people to pin that\ndata. But if you're not using\nFile coin, it's not necessarily\nguaranteed the pros of doing our\nSVG on chain NFT the data A is\non chain. And you never have to\nworry about somebody actually\npinning the data. The cons are\nthat this is much more\nexpensive. These little images,\nright here are actually\nsurprisingly large and storing\nthem on chain can actually get\npretty expensive. So we're going\nto use some different images, so\nmuch smaller images, much\ncheaper images to work with\nhere. And if you want to see\nanother version of this, I have\nanother video, how to make NFT\nart with on chain metadata, it\ngoes through pretty much what\nwe're about to go through here\nas well if you want a second\nreference, and there's a link to\nthis in the GitHub repo\nassociated with this course. So\ninstead of these PNGs that we're\nusing, we're going to use\nsomething called SVG s. Now, an\nSVG stands for Scalable Vector\nGraphics. And these are much\nmuch more minimalistic files\nthat we can go ahead and upload\nto to the blockchain. So that's\nwhy we're going to use them\nbecause since there's so much\nmore minimalistic, they're a lot\ncheaper to upload. Because\nremember, the more data that you\nupload to the blockchain, the\nmore expensive it is. Now in\nthis video, I make randomize SVG\ndata on chain. And here's kind\nof an example of what one looks\nlike. It's just a whole bunch of\nrandom lines. Not super\nthrilling, but random and kind\nof cool. And it's 100 percent. On\nchain, these SVG is actually\nwork right in HTML. So if you\nwant to use these for your\nwebsites, you can as well now\nthere's a link to this tutorial\nin the GitHub repo associated\nwith this course, where we can\ngo ahead and try it yourself.\nAnd we can actually play with\nmaking an SVG, right, so they\nhave all these different\ncommands in this web through\nschools.com/graphics/svg intro\ndot ASP, you can see some of the\ndifferent commands, right, you\ncan make a rectangle you can\nmake a circle path is a big one\nwhere you can say exactly what\nthe path or the line you want to\ndraw is going to look like.\nThere's a whole bunch of stuff\nyou can make in this SVG. And\nthe cool thing is, no matter how\nbig you make an SVG, the quality\nis always going to be exactly\nthe same, because SVG just\nexplains exactly how to draw it\nno matter how big or how little,\nthe image is going to be. So if\nyou want to learn more about SVG\nis you want to play with SVG is\nyou know, you can come in here\nand try it yourself. So with\nthat being said, that's what\nwe're going to store on chain.\nSo that's how we're going to\nstore this SVG stuff on chain.\nBut we're gonna go one step\nfurther, we're gonna make this\ndynamic, we're gonna make this\nactually change based off of\nsome data on chain. If you go to\nthe GitHub repo associated with\nthis lesson, and you go to the\nimages, and you go to dynamic\nNFT, you'll see two images, see\nhappy dot SVG, which looks like\nthis. And you'll see frown dot\nSVG, which looks like this. So\nwe're going to make this NFT\ndynamic in the sense that we're\ngoing to say, if the price of\neath is above some number, then\nwe're going to have it be a\nhappy face. And then if it's\nbelow that, we're going to make\nit a frowny face. So our NFT is\ngoing to change based off of\nsome real world parameters. And\nthis is obviously really\npowerful and really cool,\nbecause we can have an NFT that\nchanges based off stats, we can\nhave an NF t that changes based\noff of really whatever, and\nwe're going to store all the\ndata 100 percent on chain, it's going\nto be a little bit more\nexpensive. So that's what we're\ngoing to be building here.\nLet's go ahead, let's jump into\nit. And let's do the final\ncontract for our ultimate NFT\nsection. So we're going to\ncreate a new contract in here,\nnew contract, and this is going\nto be our dynamic, SVG and F T\ndot soul. And it's going to look\nreal similar to what we've been\ndoing. slash slash dynamic. SVG\nand ft dot saw, slash lat spdx,\nlicense identifier, and my team\npragma. solidity, Eric zero,\npoint 8.7. Contract, dynamic\nSVG, NF t. Now let's talk about\nwhat the architecture of this is\ngoing to look like. It's gonna\nlook like pretty normal NF T,\nwith a couple of caveats. We're\ngonna give it a min function to\nmint, these NF T's are also\ngoing to store our SVG\ninformation somewhere. And then\nwe're going to need to have some\nlogic to say show x image or\nshow y image, right. And as we\nknow, that's really just going\nto be switching the token URI to\nsay show X or show y. So let's\ngo into how we'd actually do\nthis. So first, we know this is\ngoing to be in ERC. 721. So we\ncan go ahead and import that\nfrom open Zeppelin. So we're\ngoing to say import at open\nZeppelin slash contracts, slash\ntoken slash ERC. 721 slash ERC.\n721 That's all. Now we're not\ngoing to call that set token URI\nfunction that we call before so\nwe can just use the raw ERC 721\ninstead of an extension. So\nwe'll say our contract is ERC\n721 and Now that we're making it\nan ERC 721. We can say construct\ndorm like this, then we'll call\nthe constructor of the ERC. 721,\nwhich we're going to call this\ndynamic SVG, and f t DSN,\ndynamic SVG and s, t and f t,\nlike so then we're also going to\nneed a mint function. So let's\njust create that right now say\nfunction, mint and f t or\nrequest NFT. And we'll be a\nlittle bit looser here, we'll\nsay the user doesn't need to pay\nany money for this. So this will\njust be a public function. And\nwe're just going to mint them\nand NFT. Same thing, we're just\ngoing to call Safe mint message\ndot sender. And of course, we\nneed that token count term. So\nlet's go ahead and in our top\nwill do you in 256, private s\nunderscore token counter, we'll\ndo token counter here. And then\nafter we meant we'll do tag\ncounter plus, there's gonna be\nequals token counter plus one.\nAnd then that's pretty much it,\nwe have a way to meant we've\ndone some of the basics here.\nWe'll even we'll be explicit\nwill say s token counter equals\nzero to initialize it. But now\nwhat is this token going to look\nlike? We want these to look like\nSVGs. And we want it to be based\noff the price of some asset in\nour constructor, all right,\ncreate a string memory. We'll\ncall it low SVG and a string\nmemory, high SVG. And in our\ncode will save this low SVG in\nthis highest V G. So these will\nbe the images, these will be\nlike the frowny face and the\nsmiley face that will just\nimport as input parameters here.\nSo as we know, we can make these\nimmutable since these are\nprobably not going to change. We\ncan say String, private, I\nunderscore low image URI. And in\nstring private, I underscore\nhigh image URI. But if we just\npass the SVG data, right, the\nSVG data is going to look like\nwhat in this GitHub, I can go to\ndisplay the source blob here and\nI can see exactly what this code\nlooks like this code here is\ndefinitely not an image URI.\nWhat we need is the image URI to\nlook something like this, right?\nNow, the way that we're going to\npass it in is like with this SVG\ncode, right? Because we want to\njust pass it the SVG code, and\nthen have the contract handle\neverything else.\nSo how do we actually do this?\nWell, what we can do is we can\ncreate a function called SVG to\nimage URI. And on chain, we can\nconvert these SVGs from SVGs. To\nimage arise. So instead of\nhaving IPFS, as their start,\nwe're gonna use something called\nbase 64 encoding, you can\nactually encode any SVG to a\nbase 64 image URL. That's right.\nIt'll look something like this\nbase. 64 is group a binary to\ntext encoding schemes that\nrepresents binary data. Or in\nour case, our SVG data. Base. 64\nis particularly prevalent in the\nworld wide web, or one of its\nuses is the ability to embed\nimage files or other binary\nassets inside textual assets,\nsuch as HTML, and CSS, what we\ncan do, can actually convert all\nthis SVG stuff to a URL or an\nimage URI would be great, right?\nThat's exactly what we want, we\nwant to be able to convert this\nto a URL or an image URI. Now,\nif you take one of these images,\nor these SVG images, like the\nhappy to have SVG, what we can\nactually do in this happy dot\nSVG is we can actually copy the\nimage address, which is going to\nbe the URL of this address. And\nif we paste it back in, we'll\nsee justice file here. And in\nthis site, we can actually do\ndata type, remote URL, paste it\nin here. And we can say encode\nSVG to base 64. And down here,\nwe'll get this weird job role of\nnumbers and letters and stuff.\nThis base 64 encoding represents\nthe SVG that we just got and\nwhat we can do in our browser,\nwe can type data, colon, image,\nslash SVG, plus XML, semicolon,\nbase, 64, comma, and then paste\nthat massive thing in here and\nEnter. And wouldn't you know it,\nwe get exactly that image back\nup. So that huge, massive thing\nhere is the base 64 encoding of\nthis image. So with this basic C\nfour encoded image, we can use\nthis on chain as the image you\narrive for our images. And then\nfor our metadata. We'll just\nbake that directly into our\ntoken URI. You'll see what I\nmean in a second. So we have a\nway where we can actually\ndirectly put our SVG code right\ninto our smart contracts. Let's\nfigure out how to do that. So we\nhave function, SVG to image URI,\nso we know we're going to want\nto probably do that same base 64\nencoding on chain. We're gonna\n100 percent do this off chain if you\nwant to save some gas but it's\nkind of fun for To show how to\ndo this all on chain, so we'll\nmake this a public pure\nfunction. And we'll have it\nreturns a string memory. So\nwe're going to give this\nfunction an SVG, which we're\ngoing to pass in from our\nconstructor. And we're going to\nreturn a string, which is going\nto be that base 64 encoded URL\nthat we just saw, while up at\nour top will do string, private\nconstant, base S feed, base 64,\nencoded SVG prefix equals that\nright there. And we'll use this\nto generate our SVG now, well,\nwe can do. And then we're going\nto do string memory SVG, we're\ngoing to encode this SVG in\nbasically for ourself by adding\nthe base 64 encoding on chain.\nNow, we don't really want to\nhave to rewrite that ourselves.\nSo luckily for us, somebody has\nalready done this. And we can\nsee the GitHub repo associated\nwith this, this was created by\none of the LoopRing devs really\nawesome project, if you want to\ncheck that out as well. And\nwe're going to borrow this code\nfor our SVG on chain. So what we\ncan do is we can add this in\nhere, add their GitHub code,\nwhere they have basically\neverything that we need in here\nto encode and decode basics\nbefore, we can do yarn, add dash\ndash Dev, base 64 Dash soul,\nthis is going to add their code\nas a dependency. And once we've\nadded it, we can go ahead and\nimport it with import, base 64,\ndash soul slash, base 64 dot\nSol. And this contract comes\nwith an encoder. So then we can\njust do string memory, SVG base,\n64, encoded, equals base 64 dot\nENCODE. And here's where it gets\na little bit weird.\nWe'll do bytes string, abi dot\nENCODE, act, SVG, and then we'll\nreturn string API dot encode\npacked, base 64, encoded SVG\nprefix, comma SVG base 64\nencoded, and just this function,\nthis SVG to image URI will take\nin any SVG and spit us back out\na URL or URI that looks exactly\nlike this. Now, I kind of sped\nthrough some stuff in here.\nThere's a whole bunch of new\nstuff like ABI dot encode packed\nthat we did twice, what is this\nABI dot encode packed doing?\nWell, let's learn about that. So\nfrom a really, really high\nlevel, this is basically how you\nconcatenate strings. Right, this\nis how you combine strings\ntogether. And we're going to\njump over remix to actually\nexplore this ABI dot encode pact\nand this ABI encoding stuff a\nlittle bit more. Now the section\nthat we're about to go through\nis definitely advanced. And\nwe're going to be going over\nsome really low level stuff, and\nhow solidity works behind the\nscenes, how the binary works,\nand this thing called opcodes.\nAnd all this crazy, low level,\ntricky, difficult things to\nunderstand. If you want to move\npast this section, there are\ntimestamps in the GitHub repo.\nTo help you move past this.\nHowever, I do encourage you to\nat least try to absorb most of\nthis material, if you don't\nunderstand it the first time.\nThat's 100 percent. Okay, this is more\nadvanced. Anyways, for most of\nyour basic projects, you won't\nreally need this information.\nIt's only later on once you get\nmore advanced that knowing all\nthis is really going to make you\na phenomenal solidity developer.\nAnd when you approach this\nsection, when you approach this\nsub lesson on EVM, opcodes, and\ncoding and calling, just know\nthat if you don't 100 percent\nunderstand it the first time\nthat is okay, if you want to\nwatch this section a couple of\ntimes fantastic. So if you want\nto jump over to remix and follow\nalong, let's do it. Now in our\ncontract section, let's go ahead\nand create a new file, we're\ngoing to call it encoding dot\nsoul. And remember, all the code\nthat we're going to be going\nwith in here is going to be in\nthis sub Lesson folder of the\nHardhead NFT. FCC. And all the\ncode we're going to be working\nwith is going to be in this\nencoding dot soul. And then in a\nlittle bit, we're going to work\non this call anything that soul\nso we're in this encoding dot\nsoul. And let's just make our\nbasic code here. So we'll say\nspdx, license identifier, MIT\npragma, solidity, carrot, zero,\npoint 8.7, like that, do\ncontract encoding, boom,\ncompile, or Command S or ctrl S\ngreat things are looking good.\nNow remember, the whole purpose\nfor this is to first understand\nwhat's going on here, and more\nabout this API dot encode packed\nstuff. So let's first just write\na function that should owes us\nwrapping API dot encode packed\nwith some strings and wrapping\nit around a string is going to\nreturn a string. So we could do\nfunction, bind strings, or\nconcatenate strings. This will\nbe a public pure since we're not\ngoing to be reading any storage,\nwe'll say returns string memory.\nAnd we'll say return string, API\ndot encode packed. I'm I'm\ncomma, space in here, I miss\nyou, like so. We need another\nparenthesis here. Okay, great.\nNow let's go ahead and deploy\nthis, we'll start a JavaScript\nVM will deploy encoding\ncoding.so. We'll come down here,\nwe'll click Combine strings, and\nwe get that whole string output.\nHi, Mom, miss you. So what we're\ndoing here is we're encoding hi\nmom misuse together into its\nbytes form, because API dot\nencode packed returns a bytes\nobject, and we are typecasting\nit by wrapping it in this string\nthing to be a string. And\nsolidity says, okay, yeah, bytes\nto string, that's fine, that\ntotally works. And this API dot\nencode packed are these globally\navailable methods and units. And\nactually, in solidity, there's a\nwhole bunch of these, there's\nthis solidity cheat sheet, and\nthere's gonna be a link to this\nin the GitHub repo as well, that\nhas a whole bunch of operators\nand it has a whole bunch of\nthese global variables and\nmethods. You can see if we look\nin here, we look for ABI dot\nencode pact, we see ABI dot\nencode pact right here, we\nscroll down, we'll see some more\nthat we're familiar with as\nwell. Like, for example, message\ndot sender, sender of the\nmessage, message dot value.\nThere's a whole bunch of other\nglobally available methods and\nvariables that we can use when\nwe're coding our stuff. Now, I\nwill say though, in 0.8, point,\nwell, plus, you can actually do\nstring dot concat, you know,\nstring a, comma string B, if you\nwant to, instead of doing this\nAPI to encode packed, but I\nstill wanted to show you the API\ndot encode pack, because it's a\ngreat segue into all this ABI\nstuff that we're about to go\nover. But let's focus on this\nencode packed thing. So what is\nactually going on here? Well,\nbefore we dive deeper into this\nencode pact, let's understand a\nlittle bit more about what\nhappens when we send a\ntransaction. So when we compile\nour code, and again, all these\npictures are going to be in the\nGitHub repo. Remember back to\nethers.js, we had those two\nfiles, we got a dot ABI file,\nand a dot bin or dot binary.\nBack in our ether symbol\nstorage, when we ran yarn,\ncompile. The two main files that\nwe got, were this symbol storage\nthat abi, which was this, you\nknow, this ABI thing that we've\nbecome familiar with. And then\nthe simple storage dot bin,\nwhich is the binary, which has a\nwhole bunch of just numbers and\nletters and stuff we didn't\nunderstand. And you can see that\nin remix to, like if we were to\ncompile this, you get a\ncompilation details, you get a\nwhole bunch of stuff in here,\nright? You can see the ABI in\nhere, which this is kind of like\na different way of viewing that\nAPI, we also get this bytecode\nbit and it's this object that\nhas the same stuff that has like\nthose random numbers and\nletters. But this is actually\nthe binary this is actually\nwhat's getting put on the\nblockchain. It's this binary,\nit's this low level stuff. Now,\nwhen we actually send these\ncontracts to the blockchain,\nwe're sending like I said, we're\nsending this binary thing.\nThat's exactly what we're\nsending to the blockchain. And\nremember how, again, back in our\nethers project, we saw what is a\ntransaction, right, a\ntransaction has a nonce, it has\na gas price guess limit to value\ndata, we kind of skipped over\nthe VRS a little bit, because\nthat's kind of that mathy\ncomponent of the transaction\nsignature. But again, back in\nour ethos project, we did this\nas well, right in our deploy\nscript, ended up sending a\ntransaction ourselves, using\njust ethers. We passed a nonce,\na gas price, gas limit to value\ndata was this massive thing to\ndeclare a contract, and then\nalso the chain ID. We didn't\nwork with the VAR s, because\nethers does that for us. But\nthere's also this VAR s\ncomponent that we don't bother\nto look at. When we send a\ntransaction that actually\ncreates a contract, the two is\ngoing to be empty. We're not\ngoing to send this contract\ndeployment to any address. But\nthe data of this is going to\nhave the contract initialization\ncode and contract bytecode.\nRight. So when we compile it, we\nget all this code, like how do\nyou initialize the contract, and\nthen what the contract actually\nlooks like. So if you look at\nany of the contracts that you\ndeployed, for example, I'm going\nto look at our raffle that we\ndeployed. If you go to the\ntransactions of your contract,\nwe can see create raffle, right,\nlet's go to that transaction. If\nwe go down and click to see more\nin the ether scan, we can see\nthis input data thing. And once\nagain, it's got all this random\ngarbled numbers and letters.\nThis is that binary data of the\ncontract initialization code and\nthe contract byte code right\nwhat we send in our trend In\nthis action is this data thing,\nwe send this this weird bunch of\ngarbled nonsense. Now we're\ngoing to head back to remix. And\nI'm just going to leave this as\ncomments in here in the encoding\ndot soul and the GitHub repo.\nThere's a ton of comments in\nhere explaining exactly what I'm\nexplaining. So if you want to\nfollow along there, you can as\nwell. But now in order for the\nblockchain to understand, okay,\nwhat do these numbers and\nletters even mean? You need a\nspecial reader cerium or the\nblockchain needs to be able to\nread all this stuff, it needs to\nbe able to map all these random\nnumbers and letters to what they\nactually do. How does Aetherium\nor polygon or avalanche know\nthat all this nonsense is\nbasically telling it to make a\ncontract, you kind of think of\nit as saying, like, take off\nyour coat. The only reason that\nwe as human beings understand\nwhat take off your coat means is\nthat we understand English,\nWe're all reading English, for\nsolidity. And for blockchains.\nInstead of English, I read these\nnumbers and letters kind of like\nwords, just instead of take off\nyour coat, it's like deploy\ncontract, and the contract does\nnext XYZ and all this random\nstuff. So this bytecode\nrepresents the low level\ncomputer instructions to make\nour contract happen. And all\nthese numbers and letters\nrepresent kind of an alphabet,\njust like how take off your coat\nis an alphabet. And when you\ncombine them like this, it makes\nsomething that to us makes\nsense, you can kind of think of\nthe alphabet for these as what's\ncalled opcodes. If you go to\ncreate a new tab, if you go to\nEVM dot codes, we'll get to this\nplace where it just has a list\nof all these instructions. On\nthe left side, you can see this\nthing called opcode. And then\nyou can see name, so this opcode\nsection is saying, Hey, if you\nsee a 00 in this bytecode, that\n00 represents this opcode stop,\nwhich does what which halts\nexecution, if you see a 01\nyou're gonna do some addition\nstuff, a 02 is multiply, there\nare all these op codes that are\nkind of like the alphabet, or\nthe language of this binary\nstuff, right, and they go all\nthe way down to f f self\ndestruct, these op codes also\nhave, and that's what this is\nreading. Right? So if we look at\nour transaction here, and your\nyours might be a little bit\ndifferent. Oh six, one says,\nOkay, the first thing we want\nyou to do is the O six, one\nopcode. And if we go to EVM,\nopcodes, we look for six one,\nit's saying push to place to buy\nitem on the stack. That's\nexactly how it's reading this\nany language that can compile\ndown to this opcode stuff down\nto this specific set of\nAetherium opcodes, or EVM.\nopcodes, is what's known as the\nEVM, the Etherium virtual\nmachine. So being able to read\nthese op codes is sometimes\nabstractly called the EVM, the\nEtherium virtual machine, the\nEVM basically represents all the\ninstructions, a computer must be\nable to read for it to interact\nwith Aetherium, or Aetherium,\nlike applications. And this is\nwhy so many blockchains all work\nwith solidity because solidity\ncompiles down to this bytecode\nhere, and polygon, avalanche\narbitrage Aetherium, they all\ncompiled down to the exact same\ntype of binary, and they all\nhave the exact same readers. Now\nwhy are we telling you all this\nstuff, you might be saying, hey,\nPatrick, this is cool and all\nbut it looks like ABI dot encode\npacked, all that does is\nconcatenate strings, abi encode\npack can do actually way more.\nAnd if we look at these global\nvariables, API dot encode packed\nis like what the third one down\nthe list because it's a non\nstandard way to encode stuff to\nthis binary stuff that we just\ntalked about, we can actually\nencode pretty much anything we\nwant to being in this binary\nformat, basically. And let's\ntake a look at at encoding\nsomething. So let's create a\nfunction called encode number.\nAnd this will be a public pure\nfunction, since we're not going\nto read any state, and we'll say\nreturns a bytes memory. We're\ngoing to have this function\nreturn a bytes object, we're\ngoing to have it returned the\nwhat this number is going to\nlook like but in binary, so\nwe'll say bytes, memory number\nequals ABI dot encode one, and\nthen return number. So we're\ngoing to encode number down to\nit's a bi or it's binary format.\nSo I know a lot of times when we\nsay oh, what's the ABI what's\nthe ABI right? Previously, we\nsay, Oh, the ABI is, is this\nthing, right? It's, it's all\nthese inputs and outputs. This\nis kind of the human readable\nversion of the ABI. But again,\nthe ABI is the application\nbinary interface we want to\nencode or numbers down to it's\nbasically it's binary, this ABI\ndot ENCODE is going to be a\nlittle different than like the\nABI that you see when you're\nlooking at compilation details.\nThis is technically like the ABI\ntechnically is how to interact\nwith this contract. However,\nit's not the actual binary\nversion of it. So we're saying,\nokay, encode this number one\ndown to its binary version, so\nthat our contracts can interact\nwith it in a way that they\nunderstand. So we're just saying\nokay, Watch that number one,\nlet's make you machine readable.\nAnd if we go, we compile this\nand we deploy this right, let's\ndelete that that old contract,\nwe deploy this, we now have\ncombined strings and encode\nnumber, we click it, we get this\nbig hex thing. This is how the\ncomputer is going to understand\nthe number one. Now we can\nencode pretty much anything\nactually, we could encode a\nstring. So we'll say,\nfunction, encode string, we'll\nmake this a public key here as\nwell. It'll return a bytes\nmemory, because we want to give\nit that binary stuff or that\nbites stuff. And we'll say bytes\nmemory, some string equals ABI\ndot encode some string, and then\nreturn some string. Now let's\ncompile that delete our old\ncontract, deploy that code\nstring, we get this big, big,\nbig object here. And this is the\nbinary. Now you'll notice\nsomething here, there's a ton of\nzeros, and those zeros take up\nspace, right, that's a lot of\nspace for the computer to take\nup, even though they're not\nreally doing anything. They're\njust kind of taking up space. So\nsolidity also comes with this\nABI dot encode tact, which\nperforms packed encoding of the\ngiven arguments. And you can\nread more about it in the\nsolidity docs, if you want. And\nthis is called the non standard\npacked mode. And it does the\nsame encoding with some\nstipulations type shorter than\n32 bytes are concatenated\ndirectly without padding, or\nsign extension, dynamic types\nare encoded in place. And\nwithout the length array\nelements are padded, but still\nencoded in place, you can kind\nof think of ENCODE packed as\nsort of like a compressor,\nright? It's the ENCODE function.\nBut it compresses stuff, if we\nwanted to encode some string but\nwant to save space. And we\ndidn't need the perfect low\nlevel binary of it. We could do\nfunction and code string packed,\nmake this a public pure, and\nhave it return a bytes memory.\nWe could say, bytes memory, some\nstring equals ABI dot encode\npacked once again, some string.\nSo we're doing a code pack\ninstead of a code. And we'll\nreturn some string here, we'll\ncompile this and we'll see the\ndifference, right compile, we'll\ndelete our old one, we'll deploy\nthis. Now we have ENCODE string,\nwhich again, that's what encoded\nstring is gonna give us and we\nhave encoded string packed,\nwhich returns us this much, much\nsmaller bytes object. So you see\nthe size difference, if we're\ntrying to save gas, in code,\nstring packed is going to be a\nway for us to save a lot more\ngas. Now, abi dot encode pact is\nactually really similar to\nsomething that we've done\nbefore, which is typecasting, if\nwe didn't function and code\nstring, bytes, public pure\nreturns, bytes, memory, bytes,\nmemories, some string equals\nbytes, some string, turn some\nstring, these two are going to\nlook nearly identical, right? So\nif we compile, we'll delete our\nold contract, deploy this code\nstring bytes, which gives us\nthis and encode string pack\nusing the ABI to encode pack,\nthey give us the exact same\noutput, whereas encode strings\nto give us this big piece. So\nthe two of these get the same\nresult. But behind the scenes,\nthey're doing something a little\nbit different. And I'm not going\nto go over exactly what that is.\nBut I've left a link inside of\nthe code here, if you want to\nlearn more, which is exactly\nwhat we're doing in our NFT.\nRight, we're doing ABR dot\nencode packed, we're combining\ntwo strings. By putting them\ntogether, we're encoding them to\ntheir bytes implementation to\ntheir packed bytes\nimplementation, and then we're\njust typecasting them back from\nbytes to string. And that's how\nwe concatenate them. Now, at\nthis point, you\nmight be thinking, okay, cool.\nGreat, Patrick. I'm all set. I\nunderstand this. I'm happy to go\nback to my project. And if you\nwant to do that, absolutely go\nfor it and skip over this\nsection, but some other viewers\nmight be going okay, Patrick,\nthis is seems pretty cool. But\nI'm sure this encode pacts in\nthis encode function aren't just\nhere to concatenate strings,\nthey probably have some other\nfunction, what do they actually\ndo? Well, if that's what you're\nasking, I'm glad you asked. And\nI'm glad you're curious, because\nwe're going to find out. Now not\nonly can you encode stuff, like\nstrings and numbers, and really\nanything, but you can decode\nstuff. So I can say, function,\ndecode string, public, your\nreturns string memory, string\nmemory, some string equals ABI\ndot decode. This is going to\ntake a couple parameters. So if\nyou look in the docs here, abi\ndot decode, it takes as a first\nargument, the encoded data, and\nthen it takes a tuple. You can\nkind of think of it as a list\nbut not quite a list, a set of\ntypes to decode this into and it\nreturns the number of parameters\nthat you gave it. So we might\nwant to say this string memory\nsome string Adding, let's give\nit as input this encode string\nfunction, the result of this\nencode string function, right,\nwhich again, is going to be this\nbig thing. So this is kind of\nequivalent to sticking this\nmassive thing in here, but we're\njust not going to stick the\nmassive thing in there, because\nit's really big. So we're gonna\nsay, Let's decode the result of\nENCODE string, and let's decode\nit into a string. Because we\nneed to tell solidity, hey,\nwe're going to decode this, but\nit doesn't know what to decode\nit into. It's like, okay, cool.\nI can decode this, but like,\nwhat, what do you want me to do\nwith it, and we say, Oh, this is\na string, so decode it into a\nstring. And then we can do\nreturn some string. Now, once\nagain, we deploy that old\nCotters, we delete the last\ncontract, we deploy this new\none. So in code string, and code\nstring, whereas in code, string,\nand code string returns this\nmassive thing, as a human being,\nwe're like, God, I can't read\nthat computers can read that.\nBut we can't really read that.\nSo we say, okay, let's decode\nthat back into its string form,\nwe hit decode string, and we get\nback some string. And now we can\nactually multi encode and multi\nand decode, right, we can encode\nas much stuff as we want. So I\ncan say function, multi ENCODE,\npublic pure, returns bytes\nmemory, we're going to encode a\ncouple of things, we'll say\nbytes, memory, some string\nequals ABI dot encode some\nstring, comma, it's bigger. So\nwe're going to encode two\nstrings here, we're gonna encode\nsome string, and it's bigger. So\nwe have two strings, we're going\nto encode and we'll return some\nstring, even though it's you\nknow, bytes. And then we can\nactually multi decode. So we'll\nsay function, multi decode, this\nwill be a public pure returns,\nwe'll say it returns two\nstrings, string memory, and\nstring memory. And instead of\ndoing string memory, some string\nequals API decode, we'll say,\nstring memory, some string,\ncomma string memory, some other\nstring. So we're gonna get to\nreturns equals Avi dot decode.\nLet's decode this multi encode\nresult, which is the doubly\nencoded strings into a string\nand another string. And then\nwe'll return both of these are\nsome string, there we go. Now\nwe'll return some string, and\nthen some other string,\nI need a semicolon here. So now\nwhen we deploy this, let's close\nthis out, deploy this new one,\nright, we now have this multi in\ncode, which gives us this even\nbigger bites object, right?\nBecause this is two strings\nencoded. And now if we hit multi\ndecode, take a second, what do\nyou think it's going to put out\noutput? Let's go ahead and hit\nit. Now it's gonna give us two\nstrings, right, it's gonna give\nyou these two strings, some\nstring, it's bigger. So we can\ntell solidity to encode a bunch\nof stuff. And then we can even\ndecode it by telling it, okay,\nthis big object here, it's two\nstrings combined, and then we\ndecode it. Now you can even\nmulti encode with that encode\npack thing, right? We could do\nfunction, multi encode packed,\npublic pure returns, bytes\nmemory, and then bytes memory,\nsome string equals ABI dot\nencode packed some string,\ncomma, it's bigger than return\nsome string, we could do this,\nright, but this is going to give\nus the packed version of these\ntwo strings. So the decoding\nactually isn't going to work on\nthis because this is packed\nencoding. So if we tried to do,\nI'm gonna say this doesn't work.\nTry to do function, multi\ndecode, packed, public pure\nreturns, string memory, string\nmemory, some string equals Avi\ndot decode multi encode packed\nin a string and have exactly\nwhat we did above to, if we do\nreturn some string, what do you\nthink's gonna happen? Let's,\nlet's try to delete the old\ncontract, deploy a new one.\nWe'll do multi decode, packed,\nmulti encode multi decode,\npacked, and we actually just get\nan error. solidity basically\ngoes, Yeah, this looks like it's\npacked. I don't know how to\ndecode that. But instead, what\nwe can do is we can do function\nmore to string cast packed like\nthis a public pure returns\nstring memory, string, memory,\nsome string equals string, multi\nand code packed, return some\nstring. This one will work right\nbecause again, this pact\nencoding is kind of similar to\njust type casting. So we'll\ncompile will redeploy multi\nstring cast pact, we get some\nTrying, it's bigger, right? And\nwe don't have a space here. But\nwe should have put a space in\nthere. Now that we've learned\nmore about this in ABI dot\nencode and decoding, and we know\nthat okay, this is what the\ncomputer, this is, what\nAetherium. This is what the EVM,\nor any EVM compatible chain is\nlooking for. It's looking for\nthis bytecode. It's looking for\nthis, this binary stuff. And we\njust learned a little bit more\nabout how to encode different\nvariables into the binary into\nthat data bit. Well,\nwhat do we do now? Now since we\nknow that our transactions are\njust going to be compiled down\nto this binary stuff, what we\ncan do then is we can actually\npopulate this data value of our\ntransactions ourselves with the\nbinary that code is going to\nuse. So here's our transaction\nfor a contract deployment, the\ndata field of the contract\ndeployment is going to be all\nthat binary code of the contract\nfor a function call, the data\npiece is going to be what to\nsend to the address what data\nwhat function to call on the to\naddress. Let's look at another\none of our transactions on ether\nscan right on one of our\ncontracts, you don't have to I'm\ngoing to look at enter raffle\nfrom a previous section. And if\nwe select down, we look at input\ndata. It says function enter\nraffle method ID. But if we look\nat the original, this is what's\ngetting sent in the data field.\nIt's this binary, it's this hex\nit's this weird, low level bytes\nthing. This is how the Ethereum\nblockchain or the or whatever\nEVM chain you're working with\nknows which function to call, it\ntranslates this into a function.\nAnd we can do the exact same\nthing and call these functions\nourselves. So what we can\nactually do with this crazy\nnewfound data and coding stuff,\nwhat we can actually do is send\nthe data field of a transaction\nourself, in a transaction call\nback in this ether throwback\nwhere this data thing was the\ncontract creation code. Well,\ninstead, we could populate this\ndata thing with our function\ncall code, the exact function\nthat we want to call in the\nbinary in hex addition. Now you\nmight be thinking, Oh, well, why\nwould I do that, I can always\njust use the interface, the ABI,\nall that stuff, well, maybe you\ndon't have that maybe all you\nhave is the function name, maybe\nall you have is the parameters\nyou want to send. Or maybe you\nwant to make your code, be able\nto send arbitrary functions, or\nmake arbitrary calls or do\nrandom really advanced stuff,\nright, that's where sending our\nfunction calls directly by\npopulating this data field is\ngoing to be incredibly\nimportant. So remember, I said,\nyou're always going to need the\nABI, and the contract address,\nsend a function. Now, when I\nsaid, you always need the API.\nOriginally, we were kind of\ntalking about this thing, this\nbig, this big thing, which is\ncool, which is the API. But this\nis like the human readable API,\nyou can also do it with the non\nhuman readable API. And\nadditionally, you don't need all\nthis stuff, you can really use\njust the name of a function, and\nthen the input types to send a\nfunction call. So the question\nis, then, okay, how do we send?\nHow do we send transactions that\ncall functions with just the\ndata field populated? And then\nthe next question is, how do we\npopulate the data field? What do\nwe populate the data field with\nto make one of these function\ncalls? And then how do we send\nthese transactions slowly,\nactually has some more low level\nkeywords, namely, static call\nand call we actually we've used\ncall in the past before, does\nthis code look at all familiar\nto you? Well, it should, because\nthis is, we use a similar setup\nin our fulfill random words for\nour lottery, right, we sent\nmoney doing this recent winner\ndot call, right? Recently, it\nwas the address of the recent\nwinner, and we did not call. And\nthen we have this weird stuff in\nthis brackets here, and then\nnothing in the parentheses. So\nwe did actually, essentially, we\nuse this call keyword\npreviously, but we didn't really\ntell you what it did. So call is\nhow we can call functions to\nchange the state of the\nblockchain. Static call is\nbasically how at a low level, we\ncall our view, or pure\nfunctions, write static calls\ngonna be like, okay, don't\nchange the state of the\nblockchain with this one, just\ngive us the return value. So\nthis is kind of similar to like\na view or a pure function at low\nlevel, there's also a Send word\nbut like, basically forget about\nit. We're just gonna be working\nwith call, instead of call. And,\nyou know, later on, we'll\nlearn about another one called\ndelegate call. But don't worry\nabout that for now. Recent\nwinter duck call like this, in\nthese little squiggly brackets,\nwe said, Okay, we updated the\nvalue directly of our\ntransaction in solidity. So\nwhich again, if we have these\ntransaction fields, and we just\ndirectly updated value in these\nlittle brackets, right, we can\nalso directly update gas limited\ngas price in these little\nbrackets if we wanted to as\nwell. And in here, these\nparentheses is where we're going\nto stick our data. Since all we\nwanted to do with our\nwithdrawal. function previously\nwas send money. We said, Okay,\nsend money change the value that\nwe're going to send. But don't\npass any data, keep that data\nbit empty, which is why, again,\nremember how we hit this button\nbefore, right and we had called\ndata be empty, that's\nessentially running this command\nwith called data be empty with\nthis section be empty, and then\njust updating the value that we\nset with the transaction. And so\nit's this section that we can\nuse to populate data to actually\ncall specific functions. We're\ngoing to put a whole bunch more\ncomments here. So when our\nsquiggly brackets, we're able to\npass specific fields of a\ntransaction like value. And in\nour parentheses, we're able to\npass data in order to call a\nspecific function. But in here,\nthere's no function to call\nsince we were just sending them\nif we want to call a function or\nsend any data, we can do this in\nthe parentheses. And I think I\nspelt that wrong. Now, we've\nlearned a ton here. So let's do\na quick refresher of what we\njust learned. And then we're\ngoing to actually learn how we\ncan call any function just by\nusing this syntax here. Well, we\nlearned from really high level,\nif we want to combine strings,\nwe can do ABI dot encode packed\nand then typecast that to a\nstring. And in newer versions of\nsolidity you can do, you can do\nstring dot concat, you know, Hi,\nMom, come on, miss you. In newer\nversions of solidity. This works\nas well, but not in older\nversions of solidity. Then we\nlearned a lot about some low\nlevel stuff we learned, okay,\nwhen we compile our contracts,\nwe get an ABI file, and this\nweird binary thing that numbers\nand letters stuff that gets when\nwe deploy a contract that gets\nsent in the data field of our\ncontract creation transaction.\nSo for contract creations, the\ndata is populated with that\nbinary code for function calls\nis going to define which\nfunctions to call in with what\nparameters and this is what\nwe're gonna go over next. Now,\nwe learned that we can actually\nencode stuff into this binary\ninto this low level code. And\nany program any process that can\nread this low level stuff and\nexecute accordingly, read this\nEVM stuff, read the specific\nbinary that Aetherium has\nspecified, or the EVM has\nspecified is considered EVM.\ncompatible. We can encode\nnumbers, we can encode strings,\nwe can encode pretty much\nanything we want to encode. To\nsave space, we do encode packed,\nwe can decode stuff that we've\nencoded, but we can't decode\nstuff that we encode packed, we\ncan multi encode stuff, and then\nmulti decode stuff. And then\nfinally, we can use this call\nfunction and add data in here to\nmake any call that we want to\nany smart contract. And this is\nwhat we're going to learn next.\nAlright, so now's a great time\nto take a break, because we just\nlearned some really difficult\nconcepts. And like I said, if\nyou don't get it the first\ntime, that is okay. Alright,\nwelcome back. Now that we've\nlearned about this encoding\nstuff, let's learn how we can\npopulate this parenthesis this\ndata field, so we can call any\nfunction and we can do\nessentially, what the blockchain\nis going to do at the low level,\nwe can work with just that\nbinary, we can work with just\nthat bytes, we can work with\nthat hex to interact with our\nsmart contracts. So let's create\na new file. And we're gonna call\nit call anything, that's all\nstart off with spdx, license\nidentifier, MIT. And let's talk\nabout this. Now in order to call\nnow in order to call a function\nusing only the data field of the\ncall, we need to encode the\nfunction name, and the\nparameters that we want to add,\nright, because when we call a\nfunction, we call the function\nname. And we call the\nparameters. So we need to encode\nthese down to the binary level\nso that the EVM, or these\nAetherium based smart contracts\nand solidity stuff can\nunderstand what's actually going\non. In order to do this, we're\ngoing to need to work with two\nconcepts to encode the function\nname so that the EVM or solidity\ncan understand it, we actually\nhave to grab something called\nthe function selector. Now the\nfunction selector is going to be\nthe first four bytes of the\nfunction signature. And the\nfunction signature is just going\nto be a string, which defines\nthe function name of parameter.\nNow, what does this actually\nmean? Well, if we have a\ntransfer function, this right\nhere is known as the function\nsignature. So the function name\nis going to be transfer. And\nit's going to take an address\nand a un 256 as its inputs, if\nwe encode this transfer\nfunction, and then we take the\nfirst four bytes of it, we get\nthis, which refers to the\nfunction selector. So that's how\nsolidity knows. So in the\nbytecode, in the binary code,\nthis function selector is how\nslitting knows Oh, they're\ntalking about the transfer\nfunction they want me to call\nthe transfer function. And this\nis one of the first things that\nwe need to use call to call any\nfunction that we want, we need\nto get the function selector and\nwe can get it a number of\ndifferent ways but one of the\nways is by encoding the function\nsignature and grabbing the first\nfour bytes. So we'll create this\ncontract we'll do pragma\nsolidity zero point 8.7 Say\ncontract, call anything. And\nwe'll give this to stored\nvariables, give the to stored\nvariables and address public s,\nunderscore some amount, or some\naddress, and then you in 256,\npublic s underscore mount. And\nthen we'll create a function\ncalled transfer function\ntransfer. Now normally in here,\nwe would actually do like\ntransfer for like an ERC 20\ntransfer, but we're just going\nto do address some address, and\nthen you add 256 amount, amount\nhere, we'll make this a public\nfunction. And then all we'll do\nis we'll set S, some address\nequals some address, and then s\namount equals amount. So here's\ngonna be the function that we're\ngoing to work with. And the\nfunction selector for that\nfunction is this, the function\nsignature is this. So it takes\nan address some address amount,\nthat gets boiled down to the\nfunction selector, and the\nfunction signature. And of\ncourse, in our bytecode, there's\ngoing to be some code saying,\nOkay, here's what this function\ndoes, blah, blah, blah. So we\ncan actually even write a\nfunction to get that function\nselector. So we can say,\nfunction, get selector and I'm\ngonna say get selector one,\nbecause I'm gonna show you a few\nways to get the function\nselector, we'll make this a\npublic pure. And we'll have this\nreturn a bytes for selector, we\ncould say select or equals bytes\nfor, and then we hash with a\ncheck to 56 of the bytes of that\nsignature, which is transfer.\nAnd it takes an address and a\nUNT 56. Right? If we compile\nthis, and then we run it, let's\nget rid of our old contract,\ndeploy, make sure we're on call\nanything, if you have the other\none up. In here, now we have a\ncouple of things, we hit Get\nselector one, we get this Oh X,\na 905, blah, blah, blah, right.\nAnd that's the same as the\nexample I just gave. So this\nright here tells solidity tells\nour smart contract, okay, when\nwe make a call to this contract,\nif you see this in the function\ndata, this is referring to our\ntransfer function with an\naddress and a un 256 as input\nparameter. So we see address you\ninto 56. Our function knows to\nexecute this data here. Great.\nAnd then of course, sml, and S\naddress are zeros. Now, while\nwe're here, we can also see,\nokay, what happens if we call\nthe transfer function, right? It\ntakes an address and an amount,\nso let's just give it its own\naddress or an address. And we'll\ndo 777 for an amount. If we hit\ntransfer, we have the log up,\nright, we'll get a little\ncheckmark here saying success.\nNow, if we hit S amount, we'll\nget 777. And then the address\nwill be the same, right? So\nthat's us directly calling\ntransfer. When we directly call\ntransfer, we're basically\nsaying, hey, grab this function\nselector, and then do some other\nstuff, which we'll we'll tell\nyou the other stuff in a minute.\nNow we have the function\nselector. Okay, great. What else\ndo we need, we also now need the\nparameters we want to add. So\nwe're going to need to encode\nthose parameters with our\nfunction selector. So what we're\ngonna do is we're gonna say\nfunction, get data to call\ntransfer. And in here, we're\njust going to have this get data\nto call transfer, we're going to\nhave it take these input\nparameters, and we're going to\nencode these to work with our\nfunction selector, we're gonna\nsay address, some address. And\nif it is x, amount, public pure\nreturns, bytes memory.\nAnd then we can return and use\none of those ABI and codings\nfrom the cheat sheet. Now, so\nfar, we've just been doing API\nand code for a lot of our\nencoding. So it since we have\nthe function selector, we can\nactually do ABI dot encode with\nselector. This ABI encodes the\ngiven arguments starting from\nthe second and prepends, the\ngiven four byte selector. When\nwe do in Cobra selector, we're\njust sticking our selector onto\nthe data that we're going to\ngive it. So we're going to do\nreturn API dot encode with\nselect door. And we're going to\npass it the result of get\nselector one, and then we're\ngoing to give it some address,\nand amount. So what this is\ngoing to do, it's gonna give us\nall the data that we need to put\nin that data field of our\ntransaction, to send to this\ncontract to let this contract\nknow, hey, go use the transfer\nfunction, pass in some address,\nand then an amount. And then if\nwe compile this, we run it,\nlet's delete our old contract,\nwe'll deploy up, we now got a\nnew function called Get Data to\ncall and transfer, we'll just\npass you know, we'll just pass\nthis contract address and then\nwe'll also do 777 again. And so\nthis thing right here is what\nwe're going to put into the data\nfield of our transaction in\norder for us to call transfer\nfrom anywhere. So this is the\nbytes This is the binary encoded\ndata of Hey, call the transfer\nfunction with this address that\nwe specified. with, you know,\n777 Mt. So what we can do once\nwe have all this, we can\nactually call our transfer\nfunction without even having to\ndirectly call it. So what we can\ndo is we can say function, call\ntransfer function directly, or I\nguess with binary might be a\nbetter title, but you get the\ngist, we'll say address some\naddress, you in 256 amount,\nwe'll make this a public\nfunction. And we'll have a\nreturns a bytes four and a bool.\nYou'll see why in a minute. And\nwe'll do that same call thing\nthat we did to send our raffle\nmoney. So what we'll do is,\nbefore we did recent winner dot\ncall, right, we're going to do\nsome address. And then for us,\nwe're going to address this dot\ncall. And then we're saying this\ncontracts address which we could\nput any address here address dot\ncall, and we're going to call\nthe encoded data that points us\nto the transfer function with\nsome parameters. So we're going\nto do address this.com. And we\ncould just do get data to call\ntransfer\naddress amounts, right, we could\ndo it like this. Or we could do\nit kind of the wrong way. We\ncould do ABI dot and code with\nselect dorm, get selector one,\ncomma, some address, comma\namount. And actually, there's no\nsemicolon there, sorry. So those\nare going to be the same. And\nthis dot call thing, right, it's\ngoing to return exactly what we\nsaw before, it's going to return\na bool success. So whether or\nnot the transaction was\nsuccessful, and then bytes,\nmemory, returned data, which is\ngoing to be you know, whatever\nthe call returns. So right, and\nthis is where we put like\nrequire success, right. But for\nus, we're just going to return\nbytes, four bytes for a return\ndatum, and then success. So\nwe're just going to return the\nfirst four bytes of whatever\ndata we get returned. And then\nwe're going to return whether\nthis was successful or not. So\nthis function is going to have\nus directly call the transfer\nfunction by passing these\nparameters without us having to\ndo like contract dot transfer,\nor, or transfer whatever, right.\nAnd you can do this across\nmultiple contracts across\ndifferent contracts, just by\nchanging the address that you\ncall on. So let's go ahead and\ncompile this. We'll run this now\nwe'll delete our old contract,\nwe'll deploy call anything. Now\nif we if we were. So right now\nsml, and estimators are both\nzero. Now, if we do call\ntransfer function directly, and\nwe'll pass in this one's\naddress, and then we'll do 777.\nNow, if we pull up the logs, we\nhit this, we're gonna get this\ntransaction response here. But\nif we scroll down, we'll ever\nsee the decoded output, which is\na bytes for of just a bunch of\nzeros, right? Because our\ntransfer doesn't actually return\nanything. So it's just gonna be\na whole bunch of zeros, and then\nour Boolean true, which means it\nwas successful. So since it was\nsuccessful, these two should\nhave changed based off of that.\nSo let's go ahead and try them\nout. And we do indeed see that\nthey're changed. So we have just\ndirectly called this transfer\nfunction without having to call\nthe transfer function itself, we\ncan also do encode with\nsignature instead of selector.\nSo if we go to our cheat sheet,\nthere's also this encode with\nsignature down here, which takes\nthe string memory signature, and\nit's equivalent to doing ABI dot\nencode with selector bytes for\nCAC bytes, you know, signature,\nit's, it's equivalent to doing\nexactly what we did up here. But\nit does this step for us. So we\ncould copy this whole thing,\npaste it down here, right, and\nwe could do, instead of encoded\nwith selector, we can do encode\nwith SIG netshare, the function\nsignature, and then we'll copy\nour function signature from up\nhere, paste that in here.\nCompile, we ran into a\ncompilation error, up, these are\nthe same call transfer function\ndirectly SIG, called that\ncompile, leader, old contract,\ndeploy. Now these two are both\nzeros again. Now if we copy the\ncontract address, we do call\ncontract call transfer function\ndirectly SIG. We paste that in\nhere, we do 777, we call it, let\nme check these we can see that\nthat does the exact same thing.\nSo this is API dot encode with\nsignature. This is abi dot\nencode selector. Encode with\nsignature just turns us into the\nselector for us. That's all up\nhere, we just, we encoded this\nselector ourselves. Now, there\nare a whole bunch of different\nways to get the selectors. And\nwe're not going to code these\nout ourselves. I'm just gonna\nsay a bunch of different ways to\nget selector. And who knows why\nwhy you might want to use one of\nthese other reasons, right?\nThere's there's a ton of reasons\nwhy you might want to get the\nselector a different way. And\nhere's some now in this video,\nwe're not going to explain or go\nover all these different all\nthese different function\nselector getting methods. But if\nyou go through them in the\nGitHub repo associated with this\ncourse, they all have a ton of\ncomments to explain what they're\ndoing. Well, we are going to\nshow you though, it's actually\nhow to contracts can interact\nwith each other without actually\nhaving all the code for each\ncontract. So we're going to make\na second contract that has all\nthis binary this byte\ninformation to call the transfer\nfunction on a different\ncontract. And we're gonna show\nyou how that can work. This is\njust another contract that I've\nmade called call function\nwithout contract. Actually, down\nhere, we're going to call the\ntransfer function, just by using\nthe address and the function\nselector signature and stuff,\nwe're going to update these\nstorage variables in our call\nanything contract from another\ncontract just by doing this\nbinary calling, if you will,\nright, so let's compile, it's\ngoing to deploy, we can actually\nleave this up right, we can\nleave this up is let's deploy\nour call function without\ncontract, we'll pass it as an\ninput parameter, the call\nanything contract address, we'll\ndeploy it. Now in here, I can\ncall the transfer function\ndirectly by you know, maybe I'll\nswitch it to this, this contract\naddress this new contract\naddress, and we'll give it a new\nnumber of 123. Right, and we'll\nclick call transfer function.\nAnd then when we go back up\nhere, we see that this has\nindeed been updated. Now doing\nthis call stuff is considered\nlow level. And it's a best\npractice to try to avoid it when\nyou can. So if you can import an\ninterface, it's much better to\ndo it like that. Because you're\ngoing to have the compiler on\nyour side, you're going to be\nable to check to see if your\ntypes are matching and all this\nother stuff. So usually doing\nthese low level calls some\nsecurity auditor checkers might\nsay, hey, like this books been\nout a little bit, you doing this\nlow level stuff.\nBut with that being said, You\nhave just learned a ton about\nlower level solidity. This is\nsome really advanced stuff. And\nlike I said, if this was hard,\nif you're kind of confused here,\ndon't worry, you can always come\nback to this section and try it\nagain, when you're a little bit\nmore advanced, if you want to\ntry to understand it all now.\nAwesome. Absolutely, we've left\nsome links in the GitHub repo\nassociated with this lesson that\nI definitely recommend you check\nout one of the ones you should\ndefinitely check out, it's going\nto be this deconstructing\nsolidity by openzeppelin, it\nreally breaks down exactly\nwhat's going on behind the\nscenes of a contract. If you\nwant to learn more about\nopcodes, about low level stuff,\ndefinitely give this a read, it\nis a phenomenal read,\nessentially, it breaks down a\nlittle bit more than what we\nwent over here. A couple other\nvideos as well. And I've left a\nwhole bunch of links in here\ntoo. With that being said, here\nwe are back in our NFT. And now\nwe know all about this ABI dot\nencoding stuff, right and what\nit does, and we know that ABI\ndot encode packed, the way we're\nusing here is just a way to\nconcatenate strings. And we're\nnot using ABI dot encode for\nreally any of its crazy\nsuperpowers, but we might in the\nlater section of this course. In\nother case, so we do use this\nbase 64 dot encode thing that\nwe've imported, right, we\nimported this base 64 dot encode\nso that we can encode our SVG\nthat we pass it in to its base\n64 encoding. I'm going to copy\npaste an example here, you don't\nhave to do this. But like, for\nexample, we'll pass it in like\nSVG width equals blah, blah,\nblah, all this SVG stuff, kind\nof similar to what I was showing\nyou before, we pass that in as\nan input parameter here, and\noutput it, we're gonna get the\nbase 64 encoding of it, we're\ngonna get this massive kind of\nstring here. We will test this\nlater to make sure that this\nworks. Normally, if I added a\nfunction in like this right now,\nI probably would test it right\naway. For now we can just leave\nit in here. That's going to be\ngreat for getting this image\nhere. But we don't want just an\nimage, right? We were going to\nneed that metadata. We need this\nto be a JSON object, not just an\nimage URL like this, we need\nstick this image, this base 64\nencoded image into this image\nfield of our JSON. So how do we\nactually do this? Well, what we\ncan do is we know that our ERC\n721 code comes with a token URI,\nand it's that token URI that\npoints to this, which tells us\nwhat our code is going to look\nlike. So what we can do is we\ncan actually base 64 encode our\nJSON as well, to turn into a\nJSON token URI. So we basically\nfour encoded this image to get\nthis, we're going to stick this\nURL into our JSON. And then\nwe're going to base 64 encode\nour JSON, and that's going to be\nthe URI that our token uses. So\nwe have our function, token URI,\nright. And this takes a un 256\ntoken ID, we'll say it's going\nto be a public view, public view\noverride, and it returns a\nstring memory. So we're going to\noverride the token URI function\nof the ERC 721 to whatever we\nwant it to be. And here we're\ngoing to encode some JSON text\nthat we give our contract into a\nbase 64 based JSON token URI\njust to get started we'll do a\nrequire underscore exists. Token\nID, and then I'm just gonna say\nyour I query for non existent\ntoken. And yeah, this price\nshould be an if not exists,\nRevert with an error. However,\nwe're just going to go like\nthis. And this exists function\ncomes in my ear C 721. So we're\ngoing to do same thing here. So\nwe're gonna say require this\ntoken, a D exists. And again, we\ncan 100 percent. And probably should\nmake this an IF EXISTS token,\nID, you know, now what we want\nto do is we want to figure out\nhow to make this token URI\nreturn a base 64 encoded version\nof this JSON. So first, we know\nhow to how to concatenate a\nstring, right, so that's gonna\nbe the first thing that we're\ngoing to do. So we'll do API dot\nand code packed. And we're going\nto encode ourselves the JSON on\nchain, we're going to use single\nquotes here, because inside of\nthis API and code packed, we're\ngoing to use double quotes in\nhere is where we're going to add\nour JSON. So we'll give a name,\nright, so the first piece of\nmetadata needs to be a name. So\nwe'll give it a name. And we'll\nput a comma here. And we'll say\nthe name of this NF T is going\nto be the name we get from, we\nhave a name function, which\nreturns the name. So we're gonna\nsay the name is going to be the\nname. And we're gonna just\nconcatenate all this stuff, name\nright there. We're gonna\ncontinue on with the JSON. So we\nput a little quote here, and a\nlittle quote here. So we\nencapsulate this name in quotes,\nright? Because remember, we're,\nwe're concatenating, this big\nstring that we're making here,\nwe'll do a comma, we'll say,\ndescription, we'll do another\nquote. And this time, we're just\ngoing to put the description\nourselves, and we'll say, and\nNFT, that changes, based on the\nchain link feed, we'll put an\nend quote here and a comma, and\nwe'll put a comma outside the\nquote, down here, we'll say,\nattributes.\nWe'll just say, trait type, it's\ngoing to be coolness. Comma,\nvalue, me 100. Boom, to a comma\nto image. We'll put a comma out\nhere. And this is where we're\ngoing to put our image URI,\nimage URI, which we're going to\nhave to get from somewhere. So\nfor now, I'm just gonna say,\nstring.\nMemory image URI equals i,\nright, which clearly isn't an\nimage arrived. But just to make\nthis format and stuff, we'll\nwe'll put this there. This is\nwhere we're going to put that\nimage URI that we get from SVG\nto image URI. And then that's\nit. I mean, close off our JSON,\nthough. So doing ABI dot encode\npack is going to concatenate\nthis all together. So this is\nbasically going to be a string\nthat looks like this. Great. But\nhow do we turn this into a base\n64 encoded token you arrive so\nthat other people can read it is\nwe're going to typecast this\nwhole thing to bytes. And then\nnow that this whole thing is in\nbytes, we can do exactly what we\ndid with the SVG above is now we\ncan base 64 encoded. So we'll do\nbase 64, dot ENCODE. And then\nwe'll just put another pair of\nparentheses around this save and\nauto formatted. And this here is\ngoing to give us this second\nline, right, it's going to give\nus all of this bit, but it's not\ngoing to give us this first bit,\nright. So we just need to append\nto this first bit now. And we\nshould be good to go. For basics\nbefore data image SVG plus XML\nbasics, the form, this is the\nprefix for images for SVG\nimages, right? We use that above\nbecause that's the prefix for\nSVG images. The prefix for base\n64. Jason is going to be it's\ngoing to be data application\nJSON base 64. So we're going to\ndo it like this instead. Now the\nERC 721 has something called a\nbase URI that we're going to\noverride and that we're going to\nuse. So we're gonna say function\nunderscore base URI. This will\nbe internal pure. And we're\ngoing to override the one that\nERC 721 has. And this is going\nto returns a string memory. And\nwe're just going to return this\nbit right here. And now we can\nuse this base URI. to append,\nright, we're going to append\nthis first part to our base 64\nencoded JSON. So in order to\nappend them, once again, we'll\ndo ABI dot ENCODE, packed. And\nthen we'll put this down here.\nAnd we'll say, we're going to,\nwe're going to concatenate base\nURI to this massive thing that\nwe just created. And then we\nsave and we ought to format the\nnow this is obviously a bytes\nobject, and we want it to be a\nstring. So then all we got to do\nis typecast it as a string, but\nanother prints see down here,\nand then we can actually just\nreturn this, but basically what\nwe're doing is we're creating a\nJSON string, we encode it in\nbytes, that way we can encode it\nin base 64. Once we have encoded\nin base 64, which is going to\nlook like this second string,\nit's gonna look like here out,\nwe then just append this initial\npart. But for JSON objects, it's\ndata application JSON. We we\nappend that we do API dot encode\npacked, and then cast it to\nstring and then boom, we now\nhave a token URI. That'll look\nsomething like this. And then\nall we have to do is update our\nimage URI with what we get from\nour function appear, and then\nwe'll be good to go. So let's\nfinish this out. Let's do this.\nSo in our constructor, we're\npassing a low SVG and a high\nSVG. And what are these low SVG\nis in these high SVG as well,\nbasically saying, when the price\nof this asset is too low, show a\nfrown. And when the price of the\nasset is high, show a smiley\nface. So we're gonna give it\nthis frown, SVG, and this happy\nSVG as input parameters, low CG\nand high SVG, we probably want\nto save those. But we don't\nnecessarily want to save them in\nlike their SVG format. So we\njust want to store the image\nURI, right, we will just want to\nstore this string up here\ninstead of the actual SVG. So\nright in our constructor, we can\ndo I underscore low image URI\nequals, and we have this SVG to\nimage your eye function, where\nwe can pass the low SVG. And\nthen we can do the same thing\nfor the high image URI. So now,\nSVG image URI is going to return\nsomething that looks like this.\nAnd we're going to store just\nthis string this image URI on\nchain. Now that we have the two\nof those, we can use that down\nbelow. In our token, Uri\nfunction, when somebody calls\ntoken, your I have token ID\nzero, we're going to stick into\nour JSON, either the low image\nor I or the high image arrive.\nAnd we're actually going to base\nthat off of the channeling price\nfeed. So how do we do that?\nWell,\nwe've already worked with\nchanneling price feeds before so\nlet's go ahead and add it. So\nyarn add dash dash dev at chain\nlink slash contracts. Once\nthat's done at the top, we can\ndo import at chain link slash\ncontracts, slash SRC slash V\n0.8, slash interfaces, slash ag\nreg gate, Tor V three interface,\nthat soul like so. And then down\nhere, let's comment this out.\nFor now, we're going to want to\ncall a price feed to figure out\nwhat the price is and then show\nthe high image or the low image\nbased off that. So in order to\nget a price feed in our\nconstructor, let's just add\nanother price feed address,\nstreet address. And then we'll\nmake another variable. We'll do\naggregate Tor v3 interface.\nInternal, immutable, I\nunderscore price feed. And we'll\nsay in our constructor, I price\nfeed equals aggregate Tor v3\ninterface at price feed,\naddress. And then what we can do\ndown here, the old bunch of\ncommas in here into 256 Price\ncomma, comma comma equals i\nprice feed that latest round\ndata. And what we can do is we\ncan say if price is greater than\nor equal to some value, then\nshow one image dry otherwise,\nshow another one. So we can say\nString memory, image URI equals\ns underscore low image URI. And\nthen if the price is higher than\nsome value, well greater than\nthe image URI we're going to use\nis going to be there's gonna be\nAI is going to equal the high\nimage URI. And then we have\nimage right down here. So all we\ngot to do is figure out the\nprice. So we can make, and in\nour mind, we'll let the mentors\nchoose the value that they want\nto use. So we can say, into 256,\nI value and we'll assign each\nNFT, their own high value. So\nwe'll need to create like a\nlittle mapping up top, we'll\nsay, mapping, you went to 56.\nTwo, you went to 56. Let's just\nmake this public for the heck of\nit public s underscore token ID\nto high value. And we'll say\nthat when they meant an NF T\nwill do s token ID to high\nvalue, s underscore token\ncounter. We'll set that equal to\nhigh value. So when they meant\nthey choose the high value that\nthey want. And then down here\nwe'll say if the price is\ngreater than or equal to the\nhigh value of the token ID, then\nwe'll use the high one.\nOtherwise, we'll just use the\nlow one. Oops, and this needs to\nbe you into videos x two into\n256. Excuse me, since we want to\nbe able to compare them pretty\nequally. And boom, our contract\nlooks really good. Now the only\nthing we'd want to add in here\nis probably an event. So we\nprobably want to emit an event\nin time we met to one of these\nNF T's. So we might do event\ncreated NF T, will say you went\nto 56 indexed token ID comma int\n256. I value like so. And then\nwhen we met this NFT, will do\nemit create n t, s underscore\ntoken counter, comma, I value.\nAnd then it's best practice to\nto have to update our token\ncounter before we actually do\nthe minting. So we'll do that as\nwell. Okay, there's a ton of\ncode here. And like I said, we\ndefinitely would not have\nwritten all that code without\nhaving compiled to run some\ntests first, but we decided we\nwant to just write it all right\noff first. So and I did some\nmisspellings. Let's just make\nsure everything compiles here.\nAwesome. Everything's compiled\nhere. As you already know, a\ncouple things that we're going\nto need to do to test this out.\nFirst thing we're gonna need to\ndo is write our deploy function,\nwe've got our basic NFT, we've\ngot our random and f t, both of\nthese hosted on IPFS. Now we're\ngoing to do a dynamic NFT that's\nhosted 100 percent on chain, and it\nchanges based off the price of\nan asset. So let's do this. Oh,\nthree, deploy dynamic, SVG\nnft.js. We are no, we're gonna\nneed a little bit of\nboilerplate. So let's go to our\nbasic NFT. And we'll just grab\nall this the first seven lines\nor so. And we'll just paste it\nin here. What do we need for our\nconstructor? Well, we\nneed a price feed address, a low\nSVG and a highest CG. Okay, so\nlet's get all of those. So price\nfeed address is something we've\nalready done before. And we can\nadd that into our helper\nHardhead config. And we'll do\none and a foreign local, we're\ngoing to use what we're going to\nuse a mock. And if we're on\nRinkeby, or an actual network,\nwe're going to use an actual\naddress. So let's go ahead to\ndark side chain that link will\ngrab a price feed address, the M\nAetherium. data feeds will go to\nrank B, rank B and let's just\nuse eath USD copy that will make\na new entry eath USD price feed\nlike so. And for localhost,\nwe're good. So since we know for\nlocalhost, we're going to need\nto do a mock. Let's see if we\nhave a price feed mock. Okay,\nnow we don't, we're gonna need a\nmock v3 aggregator dot soul. I\njust copied pasted mine. If you\nwant, you can just go right to\nthe to a repo here. Or you can\ncopy from a previous section,\njust a reminder heart at f and f\nt FCC contracts asked moc v3\naggregator and this is using\npoint 06 of solidity. So we're\ngoing to want to make sure that\nin our hard hat dot config, we\nhave at least one 0.6 version,\nwhich we do so we're good there.\nThat means in our deploy mocks,\nwe're going to want to add So\ninitial price will be 2000\ndecimals will be a team. So now\nwe've waited to deploy mocks for\nthat price feed. So we're gonna\nsay const chain ID equals\nnetwork dot config dot chain Id\ndo if development chains dot\nincludes network dot name, and\nthe more we need to import\ndevelopment chains looks like\nwhere did say const eth USD\nakregator equals we'll get that\nprice feed equals awaits ethers\ndot get contract Mark v3 Air\ngate tour, and then we'll up\nhere we'll do let eath USD price\nfeed address eath USD price feed\naddress equals eath USD\naggregate tore that address else\nwill say the eath USD price feed\naddress is going to be equal to\nwhat we find in the network\nconfig. Network config. Chain ID\ndot eth USD price. Okay, so we\nhave the eth USD price feed\nrate. Now we need the lowest VG\nand the high SVG. So we're going\nto create a new folder in our\nimages folder. So we go CD\nimages, MK dir dynamic NF t. And\nnow we'll have two folders in\nhere dynamic which is empty and\nrandom, which has all the random\nstuff. If you want to use your\nown SVGs for this, you\nabsolutely can. But if you want\nto just come to my images file\nand then save these images as so\njust come right click Save image\nas. Save them. and then drag and\ndrop them into your images files\nhere, you can absolutely do\nthat. So now that we have those,\nwe want to go ahead and read\nthose into our script here.\nWe'll say const, low SVG equals\na weight. And we're going to use\nFs again. So we're gonna do\nconst Fs equals require Fs, or\ndo await Fs dot read file sync,\nwe're going to read in this\nfile, which for me, it's at dot\nslash images slash dynamic NF T\nslash brown dot SVG. And we're\nusing encoding of UTF eight. And\nthen we'll say const. Hi, SVG\nequals await Fs dot read file\nsync. Copy this whole thing,\nbecause we're using the same\nstuff. This one's going to be\nhappy about SVG. And that's it.\nSo when price is good, we're\ngonna do happiness, SVG, when\nprice is bad, we're gonna do\nfrown at SVG. Now, let's go\nahead and let's deploy this\ncontract. So we'll say arguments\nor args equals, it's gonna be\nthe price feed address, low SVG,\nand then high SVG. And we'll say\nconst, dynamic S, G and F T\nequals await, deploy dynamic SVG\nand f t, comma little bracket\nhere, from Deployer.\nargs, args log true. And the\nweights confirmations, it's\ngoing to be network dot config,\nthat block confirmations, or one\nwill do some logging, I will do\nlog to do that. But Larry, do\nsome verification, I'm actually\njust going to copy paste that\nfrom our last script, because\nit's going to be exactly the\nsame copy paste. But instead of\nrandom IPFS, it's going to be\ndynamic SVG and f t. The rest of\nthis looks good. And that's just\nabout it. So we'll do module,\nexports dot tags, equals and\nwe'll do all dynamic. SVG. And\nwe'll do main. Oh, okay. Let's\ntry to see if our deploy script\nthat we just created works. To\ndo h h, or yarn hardhat deployed\ndash dash tags, die Namic SVG,\nthat makes sense, because we\ndidn't deploy the mocks. So\nwe'll do tags, dynamic SVGs. And\nthen also the mocks. Local\nnetwork detected play marks, we\ndeploy the marks, deploying\ndynamic SVG, awesome. You know\nwhat comes next? You Gosh, darn\nright, it's time for some tests.\nNow, once again, I'm going to\nencourage you to pause the video\nnow and try to write your own\ntest for this test for this\nsection actually can be a little\nbit tricky. Since we are going\nto be manipulating the price of\nour mock aggregator, we are\nchecking for these long strings,\nand such. So be sure to use the\nGitHub repository associated\nwith this lesson, in case you\nget lost. Now, I want to show\nyou what this looks like on a\nmarketplace, like OpenCL. So we\nare going to deploy this to rink\nB. Now keep in mind test that\ncan be slow. So you might want\nto be patient here. And you\ndon't even have to do it if you\ndon't want to. But it is kind of\nnice to see. Okay, that's what\nit really looks like. And you\ncan go to the contract on chain\nonce it's verified. And you can\nread the token URI and\neverything. And it's pretty fun.\nSo let's just add one more bit\nto our deploy folder. Let's add\na mint script that just emits an\nNF T for each one of these\ncontracts. So we're going to\ncreate no for mint.js. And we're\njust going to have each one of\nthese contracts mint NFT. Let's\ngo ahead and do this. So in\nhere, we'll do const ethers\nnetwork equals require arhat.\nAnd then I'm going to do a\nlittle copy paste in. I'm just\ngoing to copy this part because\nI know I'm going to need that.\nWe are going to need a deploy\nbut we're not going to need to\ndeploy. So I'll grab get named\naccounts, get named accounts,\nit's going to come right from\nthere. So we have a Deployer.\nOur deployer is just gonna be\nused to mint them. First we'll\nmint the basic NF t. So we'll\nsay const basic NF t equals wait\nethers dot get contract, basic N\nft, and we'll connect the\ndeployer to it. And then we'll\nsay const basic mint and if T or\nbasic mint, TX equals await\nbasic NF T dot mint NF t. And\nthen we'll do a weight basic\nmint, TX dot weight one and then\nwe'll do a little console dot\nlog base Again, T index zero has\ntoken URI, we'll put in a little\nawait basic NF T dot token URI\nof zero. That's it for the basic\nentity. Now we'll do our random\nIPFS and empty. So we'll say\nconst, random IPFS NF t equals\nawait ethers dot get contract,\nrandom IPFS and f t, connected\nto the Deployer. This one, we\nneed a mint fee. So we'll say\nconst, mint V equals await\nrandom IPFS NF T dot get mint\nfee. And then we'll do the mint.\nSo we'll say const, random IPFS\nand ft mint, TX equals await,\nrandom IPFS and F T dot request\nand F team. And for this one, we\nneed to pass a value, which is\ngoing to be the mint v.to\nstring. Now for this one, just\nlike what we saw in our tests,\nwe're going to have to do this\nawait new promise again, right,\nbecause we need to wait for it\nto return need to listen for\nthose events, we probably should\nset up the listener first. So\nlet's actually set up the\nlistener first. So we're going\nto do await new promise, and\nwe're gonna do async function.\nAnd we're going to do resolve\nreject. In here, we're gonna use\nthat, that fun little arrow\nsyntax in here.\nAnd now since we're in this\nfunction here, we actually set\nthe timeout resolve like this,\nwhich means we have five minutes\nto time this out, you might want\nto bump this up even more five\nminutes might not be enough,\nthis is gonna be 300\nmilliseconds here, we're gonna\ndo that once again. So we'll say\nrandom IPFS and ft dot once.\nOnce we get that NFT minted\nevent, we're going to run an\nasync function, we're just gonna\ndo resolve. And inside here is\nwhere we can actually put,\nactually requesting the NFT. But\nbelow our listener, right, so in\nthere, and then we can say if\ndevelopments chains, that\nincludes network dot name. So\nlet's just make sure we import\nthose development chains and\nnetwork or affect them and\nchains that includes network dot\nname. So we're on a test net,\nthis is where we go ahead and we\npretend to be those mocks. So\nwe'll say const Request ID\nequals random IPFS. Oh,\nactually, we're going to need to\ndo const random IPFS and ft min\nTX receipt equals await on IPFS\nand empty minted TX dot weight\none. So we're gonna need to get\nthe receipt. And from the\nreceipt, we can get the request\nID. That events one dot args dot\nrequest id.to string. And then\nwe can do const VRF. coordinator\nV to mock equals await ethers\ndot get contract, the RF\ncoordinate for V to mock,\nconnect this to the Deployer.\nAnd then we'll do a wait the RF\ncorded and a Tor V to mock that\nfulfill random words with\nRequest ID, random IPFS. And if\nT dot address, we can do console\ndot log random IPFS and have T\nindex zero token URI to await\nrandom IP. That's NF T dot token\nURI of zero. Finally, we can do\nour dynamic SVG, NF t. So we can\nsay const, high high value\nequals ethers.utils.do parse\nether here. So we'll say\n4000 $4,000 will be the high\nvalue. We'll say const. Dynamic\nSVG and f t equals await ethers\ndot get contract, dynamic. SVG\nand a T will connect it to the\ndeployer say const by Namic, s,\nB, G, and f t mint, TX equals\nawait dynamic SVG and F T dot\nmint and f t i value to string\nthen we'll just do wait. This\nstat wait one. And finally\nconsole dot log dynamic. SVG NFT\nindex zero token URI is going to\nbe a weight dynamic. SVG and ft\ndot token URI of zero. Okay, I\nthink that looks good. Let's try\nthis on a local network. So\nwe'll do yarn hard hat deploy.\nAnd we'll run all those scripts\nIt looks like everything worked.\nSo we have random, basic NFT\nindex zero has a token year, I\nhave this IPFS thing, random\nIPFS NFT. index zero has this\nthing. And then our SVG has this\ngiant monstrosity, okay,\nperfect. And then we can even\ncheck, right, we can even grab\nthis IPFS hash, we go to our\nIPFS node, or if you installed\nIPFS in your browser, or you're\nworking with Brave, we can just\npop it right into our browsers\nand see what it looks like.\nRight. And then if I zoom in,\nand adorable St. Bernard, with\nthe image of the St. Bernard,\nlooking like that, this one's\nalso gonna be St. Bernard. And\nthen of course, are SVG, which\nwe can also copy, paste, and\nboom, that looks great. And then\nwe can copy the image. And it's\na frowny face or shad. But\nAwesome. Okay, so it's working\nlocally for us. Now, let's go\nahead and try to make this work\non an actual test net. So\nhopefully, our helper hard hat\nconfig is set up correctly. And\nthere's enough stuff in here\nwhere we need to make sure that\nwe have a subscription ID,\nright, we're going to need to\nmake sure we have a subscription\nID. And we shouldn't call the\nmint function, right, because\nwe're going to need to add our\nconsumer to the VRF. Before we\ncan actually meant so let me\nlet's add some tags to our meant\nhere. So we'll do module dot\nexports, dot tags equals, and\nwe'll say all comma meant a\nwhile ago, I said okay, let's\nadd a main tag. Now we're coming\naround to why we added this main\ntag here. So what we want to do\nis want to deploy all of these\ncontracts. But before we finally\nmeant for our IPFS one, we need\nto add that contract to our\nconsumer, here's what we're\ngonna do, we're gonna run yarn,\nHardhead, deploy dash dash\nnetwork Rinkeby dash dash tags\nmain. Now, this won't meant any\nof our NF T's, okay, won't mean\nto any of our NF T's, it'll just\ndeploy those contracts might\njust sit around and wait a\nlittle bit for these to actually\ndeploy. So this is a great time\nto go take a break, maybe go\ntake a walk, get a sip of water,\nget a cup of coffee, whatever\nyou want to do. Yeah, once\neverything is deployed, then we\ncan go to V or F dot chain dot\nlink, we're already connected\nhere, we used our subscription.\nAnd then we would just add our\nIPFS consumer in here. And we'd\nbe good to go. And All right,\nonce everything goes through,\nand we have all three of our\ntransactions on the blockchain,\nwe can go ahead, we can grab our\nrandom IPFS NF T, we'll grab\nthat address, we'll come back\nover to V or F dot chain dot\nlink slash rink D, we'll go to\nour subscription ID, and we'll\nadd a new consumer will add that\ncontract address. So we'll go\nahead and approve and Metamask.\nAnd once this goes through, we\ncan finish running the mint part\nof our deploy folder. Once it's\nconfirmed, we can close maybe we\ncan do a little refresh, we\nshould see our new address added\nas a subscription here. Now that\nwe've added that we can mint one\nNF T from each one of these\ncontracts are in hard hats,\ndeploy dash dash tags meant dash\ndash network Rinkeby. And we'll\nhave to wait a little bit for\nthis too. Okay, now that we have\nthem all minted, we should get a\nlittle output like this. Right?\nBasic NF t zero has token URI\nhere. Basic random IPFS NF T has\ntoken your eye here. And then\nour SVG has this as a token\nyear, right. So what can we do\nnow? Well, let me go grab, I'll\ngrab my wallet address and stick\nit into Rinkeby ether scan. And\nwe can see we called mint\nrequest and mint again. And we\ncreated three contracts, right,\nwe created our basic NFT, our\nrandom IPFS NFT and our dynamic\nSVG NFT. What we can do now is\nwe can grab, we can copy the\naddress of our contract. And we\ncan go to test nets that open\nsee that i Oh,\nand we can put that address in\nthe bar here in the search bar\nhere. Now this part is\nincredibly, incredibly variable.\nOkay, open C can be really slow.\nAnd it can take open see up to a\ncouple of hours to register that\na contract has been deployed to\na test net. So if it doesn't\nshow up right away, don't be\ndiscouraged. Don't let it drag\nyou down. But if it does, you\nshould be able to click on your\ncollection and see the NFT is\nactually here. I'm going to grab\nour random IPFS NFT. Let's grab\nthat contract address. I'm going\nto grab that test net site open\nc.io. Paste that address in\nthere. And what do you know we\ndo indeed see, random IPFS and f\nt, right and I've deployed a\ncouple of them. So this one's v\ntwo, and we have our adorable\nShiva in you right here. So this\nis what it looks like an open C\nnow we can 100 percent verify that our\ncode is good even if it doesn't\nshow up on Open. See. If we go\nto the contract we go to read\ncontract. And then we go to\ntoken URI punch and zero here. A\nquery, grabbed this, stick it\ninto our browsers, the JSON\nlooks good. So let's grab the\nimage URI. Paste that in. And if\nwe can see this here, that means\nthat our code is good. And you\nhave successfully deployed a\nnumber of FFTs to the\nblockchain. We have learned a\nmassive amount in this course,\nthis is definitely one of the\nmost jam packed one. And it's\nall about art. Right? Isn't that\ncrazy? Let's do a quick\nrefresher of this entire course\nhere. So first off, we learned\nthe basics of an NF T with our\nbasic NF T dot Sol, we learn\nthat these NF T's are based off\nof the ERC 721 standard. And\nthat just means they have\nfunctions like name, token, Uri,\netc. We learned that NF T's use\nthis token URI to tell us what\nthe token actually looks like a\ntoken, your eye will look\nsomething like this, it's going\nto be a name a description, it's\ngoing to have an image URL,\nwhich points to a different\nlocation for what the NFT\nactually looks like. It'll have\nstuff like attributes, it can\nhave stuff like attributes, and\na few other tags. This is known\nas the metadata of the NFT. And\nthis tells us about the NFT. We\ncan also have all that metadata\non chain, of course, to\ncustomize it on chain, and make\nit look and grow and change and\nbe interactive on chain, we\nlearned more about IPFS, we\nactually wrote a script called\nupload to pinjarra.js, where we\ncan actually programmatically\nupload images and files to\nanother IPFS pinning service for\nus, we can of course, always use\nour own IPFS nodes if we want.\nNow this token URI can really be\nanything. And we hosted it on\nIPFS for our basic NFT and for\nour random NFT. But for our\ndynamic NFT, we actually hosted\nthe token, you're right 100 percent On\nchain, so we didn't use IPFS.\nAnd we made this dynamic where\nthe token URI actually changes\nbased off of the price of a\nchangeling price feed in our\nrandom IPFS NFT, we gave our NFT\na chance we gave different\nrarities to the different dogs\nso that we could create\nprogrammatically rare NF TS\nwhere our pug is super rare. Our\nShiva is sort of rare, and our\nSt. Bernard is pretty common. So\nthe fact that we got to ship it\nin you was awesome. We did some\namazing deployments, we wrote\nsome tests. Not only that, but\nwe learned a lot about\ntransactions, and how we can\nactually add whatever data we\nwant to this data section. And a\nlittle bit more about what our\ntransactions look like, and how\nwe can actually use functions,\nselectors and function\nsignatures to be able to call\nanything, right and we learn\nmore about ABI dot encoding, and\nencoding packed and all this\nbinary stuff if you want it to\ngo deep into that. So this was\nan absolutely JAM PACKED\nsession. And you should be\nincredibly proud of yourself,\nespecially with your little\npuppy that you can see on open\nsea or you can see directly on\nether scan, or you can just look\nat it and IPFS and be really\nproud of what you've done. But\nwith that being said, huge\ncongratulations on making this\nfar. Definitely definitely\ndefinitely take a break here,\nand we'll see you in the next\none.\nOkay, now we have less than\nfifth team, which is going to be\nour next JS NFT marketplace. And\nif you finish this lesson, you\nare a web three full stack\nmonster, this is going to be our\nmost complicated front end using\nthe web three stack and using a\nlot of really advanced web\nthree, and blockchain tools. So\nget really excited because we\nare going to learn a ton in this\nlesson. Now there are actually\nthree different repos associated\nwith this lesson. The first one\nis going to be our typical hard\nhat project. For the back end,\nafter the hard hat project, we\nactually have two repos both are\ngoing to be our front end repos,\nand they're going to be slightly\ndifferent. In this project,\nwe're going to learn more about\nhow events are so important and\nwhy events are so important,\nespecially for off chain\nservices. And so we're actually\ngoing to look at two different\nways to work with them, one\nusing the mirallas, or a\ncentralized database, and then\none using the graph. And the\nreason that I want to show both\nof these is that oftentimes,\nwhen people are looking to scale\nthe projects, when people are\nlooking to get things done\nreally quickly, taking a more\ncentralized approach can often\nbe a little quicker, and you can\nsometimes add more functionality\nto your website. And there's\nstill a lot of protocols that\nhave decentralized backends. And\ncentralized front ends. One such\nexample, is open sea, open sea,\nfor example, has the ability to\nactually like different and fts.\nNow, this isn't something that\nwe would actually want to spend\nany gas on. But it is something\nthat we're gonna have to store\nin some type of database\nsomewhere, so that people have\nthe ability to do that. So I\nwant to show you this optional\nfirst way to build these front\nends, since all of our logic is\nstill going to be 100 percent. On\nchain, the front end matters a\nlittle bit less, because anybody\ncan still interact with the\ncontracts that we build on\nchain. Now in web three, we\ndon't want to stay there.\nHowever, getting an MVP done\ngetting a minimal viable project\ndone is really, really\nimportant. So using a\ncentralized server, like\nMorales, or centralized project\ncan make us much quicker. In\nfact, we have been using\ncentralized services, like\nalchemy, kind of throughout this\nwhole project. But of course, I\nalso want to show you the\ndecentralized way to make your\nfront end. So after we work with\nMorales, we're also going to\nshow you how to use the graph\nthen for to do all this event\nindexing. Now the graph is going\nto be the decentralized way we\ncan make our front end and work\nwith these events. And the graph\nalso comes with its own graph\nrepo. So we'll learn all about\nthat once we get to the front\nend section. But let me show you\nwhat we're going to build\nbecause it is really cool. Now\nthat we've learned a ton about\nhow to make NF T's what they\nare, we're going to make our own\nNFT marketplace. And like I\nsaid, this is really going to be\nour deep dive into all these\namazing front end tools. So\nhere's what our front end is\ngonna look like. But what we can\ndo is we can connect with our\nlittle connect button, we hit\nMetamask Metamask pops up, we'll\ngo ahead and connect. And now\nthat we're connected, we can see\nthe different entities in here.\nAnd if we're on an address\nthat's owned by us, it will say\nowned by you. And if we switch\naddresses, or UI will go ahead\nand update, connect there. And\nnow we're owned by a different\naddress. Now, if it's owned by\nus, we get this little hover\nthat says Update listing. And\nright now it's worth 0.18.\nThat's what it's listed for on\nour marketplace. If it's owned\nby us, and we click it, we can\nupdate it to a different price.\nLet's update it to 50 eath, or\nwhatever your layer one currency\nis, we'll just say new listing\nprice, we'll go ahead and\nconfirm. And I'll say listing\nupdated, please refresh, and\nwhat we can do them. And we'll\nmine some blocks on the back\nend, and boom, now we see that\nit's worth 50 here. Now if we\nswitch to a different account,\nnow we can see owned by blah,\nblah, blah, and the hovered now\nsays by me, if his selected as a\ndifferent user, I'm gonna get\nthis transaction to actually buy\nit. Now go ahead and confirm\nthat I'm gonna buy it, I get a\nlittle pop up. This is item\nbought successfully. Now if I do\na little refresh, we'll now see\nthat that NFT is gone from the\nmarketplace, since we bought it\nright, it's no longer available\nto be sold. Now what we can do\nthen is we can come over to sell\nNF Ts and at the bottom, we'll\nsee a withdraw proceeds. So\nwhenever somebody buys an NF T,\nthe NFT marketplace actually\nkeeps the proceeds that actually\nkeeps the result of the sale. So\nif we switch back to our address\nthat had the NF T listed, we can\nnow see Withdraw 50 proceeds\nbecause we know that we have 50\neath, because we just bought\nthat for 50. So if we hit\nwithdraw, Metamask is gonna pop\nup, we can go ahead and confirm,\nwait a little bit as transaction\npopulates, and boom once it goes\nthrough, we'll see now we have\nzero proceeds. Right, we\nwithdrew everything from here.\nSo what we can do now, is we can\nrelist that NFT. So if we come\nback, let's go back to the one\nwho just bought that NF t. If we\nknow the address and the token\nID of the NF t and we own it, we\ncan go ahead and relist it,\nbecause we can place the address\nin here with the token ID Give\nus some sort of price, we'll\nsubmit, we'll approve giving the\nNFT marketplace access to our\nNFT to our little doggie. And\nthen we'll go ahead and actually\nsend the transaction to actually\nlist the NFT on a marketplace\nthat we get NFT listed\nsuccessfully. After we remove\nsome blocks in the back end, we\ncan go back to the front end.\nAnd we now see, it's owned by\nus, instead of the original\nowner, right and set for 10\nether. And then we can of\ncourse, switch back to a\ndifferent user, and we can have\nthem actually buy. So this is\ngoing to be a NFT marketplace\nthat's completely decentralized,\nwe are going to learn a ton\nabout front end a ton about\nindexing a ton about events, and\nwhy they are so powerful. And\nI'm really excited for you for\nthis one. Because if you get\nthrough this one, you will have\nso many tools at your fingertips\nfor working with the blockchain.\nAre you ready, let's jump in.\nLet's build the contracts first,\nand then we'll build the front\nend. Let's do this. Now this\nproject is going to be based off\nthe Arteon project, which is a\ncompletely open source\ndecentralized smart contract NFT\nmarketplace, I'll leave a link\nto it in the GitHub repo\nassociated with this course,\nours of course, is going to be a\nminimalistic version of this.\nSo we're in our VS code pre\nnormal. And we're going to\ncreate a new folder here called\nhard hat. And if T marketplace,\nFCC, oops, MK dir, like them,\nwe're gonna cd into it. And then\nopen this up and its own VS\ncode. Once again, you can use\ncode period, or file open\nfolder, and open this folder.\nOnce we get in here, we're going\nto do all of our normal stuff\nthat we've been doing throughout\nthe course. And once again, if\nyou want to copy paste over your\npackage, JSON, if you want to\ncopy paste in the modules,\nwhatever you want to do, feel\nfree to do so I'm gonna go ahead\nactually, this repo here, we're\ngonna scroll up and just grab\nonce again, this line from less\nthan nine. And just run that I\nknow I'm gonna be using prettier\nso I'm just gonna go ahead and\ncopy paste those two prettier\nfiles over prettier ignore and\nprettier RC going to be using\nthem again, for linting. With\nsolidity we're going to use Sol\nhint dot JSON. So we're going to\ngrab that dot soul hint dot\nJSON. And the dots will hint dot\nignore. I'm also going to grab\nthe hard hat dot config dot j s\nbecause we're going to be using\na really, really similar setup.\nAnd this hard hat dot config dot\nj s. It's got waffle in it,\nether scan, hard hat deploy\ncoverage gas reporter sizer and\nDottie and v dot config, we're\ngoing to bring over our Dotty\nand V. And we're also gonna\nbring over our utils folder as\nwell. Right, so a lot of that\nboilerplate we're gonna bring on\nover. And now just like that,\nsince we have the hard hat dot\nconfig dot j s in here, if we\nrun yarn, hard hat, right now,\nyarn hard hat will actually see\nwe get the output like this. So\nlet's go ahead. And before we\nactually write our contracts,\nlet's go ahead and write a\nlittle doc saying what our\ncontract is even going to do,\nwhat do we want this to do?\nWe're going to create a\ndecentralized NFT marketplace.\nSo what does that mean? What\nwill we probably need? Well,\nwe'll probably need some type of\nlist item function, because\nwe'll want to list NF T's and\nthis will be to list NF t's on\nthe marketplace, we'll need some\ntype of buy item to buy the NF\nT's. And then we'll probably\nneed maybe like a cancel listing\nor cancel item, if you no longer\nwant to sell it, maybe an update\nlisting, update price. And then\nmaybe a withdraw proceeds to\nwithdraw payment or my bot and\nfts. So when somebody buys an\nNFT, I'm gonna have to withdraw\nit from the contract since the\ncontract is going to be the one\nto actually hold those funds.\nThat looks pretty good to me.\nLet's go ahead and start\nbuilding this. So let's create a\nnew folder, contracts. And let's\njump into this. So we'll create\na new file NFT marketplace.\nThat's all. So let's get our\nboilerplate. spdx pragma,\nsolidity, carrot zero, point,\n8.7, contract and ft.\nMarketplace, boom. If we're\ndoing this, right, h h compile\nor yarn Hardhead to compile or\nMPX, art, hit, compile, boom,\nthings are looking good. So if\nwe go back to our readme, we can\ngrab these here, even stick them\nin as like a little comment for\nus to kind of reference later\non. Let's start with listing the\nitems. How are we going to keep\ntrack of listing people's items.\nAnd once again, remember, when\nI'm usually coding this, I'm\ngoing back and forth between\nwriting tests and writing the\nactual code. We're just going to\nwrite all the solidity in one\nchunk, and then go write the\ntests. So we're going to say,\nthese are going to be our main\nfunctions. I'm going to start\nwith function list item. And we\nare going to make this one look\nreally, really good. So we're\ngoing to do natspec. And\neverything, this is going to\nneed to be an external function,\nright, we're probably not going\nto want any of our internal\nfunctions calling list item,\nit's going to be called by\nexternal projects or external\naccounts are probably going to\nneed an address and ft address,\nwrite the address of the NFT,\ncontract a un 256 token ID, the\nID of the token ID of the\ncontract that we're going to\nuse. And then we're going to\nwant to set a un 256 price. So\nfirst off, we're probably going\nto want the price to be greater\nthan zero. So maybe we'll put in\nlike a little if or require\nstatement here, we'll say if\nprice is less than or equal to\nzero, then we'll go ahead and\nrevert with a price must be\nabove zero error. And then of\ncourse, we'll prepend it with\nthe name of the contract into\nunderscores. And then at the\ntop, the error price must be\nabove zero. Now in order for us\nto list it, we could actually do\nthis one of two ways we could\none, we could send the NFT to\nthe contract, this would require\nus doing like a transfer, right,\nwe could have got the contract\nhold the NFT. Now we could do\nthis, but this is going to be\nkind of gas expensive for\nsomeone to actually list on f t.\nAnd we can have the owner of the\nNFT be our NFT marketplace, we\ncould 100 percent do that. The issue\nwith this, though is that the\nmarketplace will then own the\nNFT. And the user won't be able\nto say like, Hey, I own this\nNFT, it's in the marketplace,\nthey technically would be able\nto but they would have to\nwithdraw it, we might do this a\nslightly different way where we\ncan say owners can still hold\ntheir NFT and give the\nmarketplace approval to sell the\nNFT for them. Now, of course the\nowners of the entity could\nwithdraw approval at any time\nand the marketplace wouldn't be\nable to sell it anymore.\nHowever, this would be really\neasy for people to actually\nread, they would all they would\nhave to do is read like is\napproved for marketplace. And\nthey can actually see if the\nitem was really listed or not.\nSo we're gonna go ahead and\nwrite it this second way,\nbecause that's what Ardian does.\nAnd this is the least intrusive\nway to have this marketplace,\nright? People still will have\nownership of their NF Ts, and\nthe marketplace will just have\napproval to actually swap and\nsell their NF T once the prices\nare met. So since we want to\nmake sure the marketplace has\napproval, let's make sure the\nmarketplace has approval. So we\ncan call we can call this get\napproved function on that token\nID to make sure that the\nmarketplace is approved to work\nwith the NFT. To do this, we're\ngoing to need the AI ERC 720\ninterface and we can actually\ngrab that from open Zeppelin.\nRight and this interface will\nwrap around an address and then\nwe can call get approved on that\naddress. So we'll do import at\nopen Zeppelin slash contracts\nslash token slash ERC 721 slash\nI ERC 721 dot Sol. And since\nwe're doing an import from open\nZeppelin, we'll do yarn add dash\ndash Dev, add open Zeppelin now\nthat we have this interface in\nhere, what we can do is we'll\nsay I ERC 721 NF t equals IRC\n721 wrapped around this NF T\naddress that we're passing in.\nAnd we'll say if NF T dot get\napproved of the token ID that\nwe're trying to list does not\nequal address this. So if we are\nnot approved, then we'll revert\nnot approved or market place.\nAnd then we'll of course we'll\nwant to do prepend it with NFT\nmarketplace into underscores. So\nerror like this, Bada bing bada\nboom, now that we've gotten a\nlittle bit of that out of the\nway, we're probably going to\nwant to have some type of data\nstructure to list all these NF\nT's. And typically we get to\nOkay, do we want to use an\narray? Or do we want to use a\nmapping? What do you think?\nBefore we continue? Let's pause\nfor a second, do you think it\nmakes more sense to put these NF\nT's and an array or an A\nmapping? And when you're\nthinking about this, try to\nthink about, okay, well, people\nare gonna have to buy these and\nsell these, what makes more\nsense, think about this for a\nsecond, maybe pause it and write\nin a comment here, what you\nthink an array or a mapping is\nbetter. Now, if you said\nmapping, I would agree with you.\nYou couldn't do an array and you\nwouldn't necessarily be wrong,\nbut it's not the way that I\nwould go about that for an\narray. Anytime someone wants to\nbuy an item, we're gonna have to\ntraverse through the array,\nwe're gonna have to make this\nmassive dynamic array. And that\nmight get a little bit dicey as\nthat array gets really, really\nbig. So we're gonna go ahead and\nmake this a mapping. And this is\nprobably going to be a global\nvariable or a state variable. So\nup at the top, let's go ahead\nand create this mapping, it's\ngoing to be a mapping of\naddresses of NFT addresses.\nRight? So it's going to be the\nNFT contract address mapped to\nthe NFT, token ID mapped to some\ntype of listing. So we'll say, a\nmapping of address to a mapping\nof UNT 256. to, well, what do we\nwant here? Well, we want we want\nthe price, right? So is that\nanother you went up to six. But\nwe also want, we also want to\nkeep track of the sellers, we\nknow who to send money to. So we\ncould make two mappings or we\njust create a new type of type\nlisting, let's go ahead and do\nthat. We'll comment this out for\nnow. And so at the top, since\nthis is going to be a type\nwhere, say, struct listing, and\nin here, we're going to do a\nutility six, the price of the NF\nt, and then address the seller\nof the NF team. And now that we\nhave that new typing, we can\nuncomment this, we can say NFT,\ncontract address map to the NFT\ntoken ID mapped to the listing,\nand we'll make this a private\nvariable called S underscore\nlistings. Now back down in our\nlist item function, we're going\nto update that s listing\nmapping. So we're gonna say s\nlisting of NF T address, right,\nthe address of the NF T at the\ntoken ID is going to equal we're\ngonna create a listing of the\nprice. And then who, well the\nseller is going to be message\nthat sender, right? So message\ndot sender, they're the one\nwho's actually listing the item.\nAnd since we're updating a\nmapping here, what's the best\npractice for update mappings,\nyou guessed it, we need to emit\nan event and especially for this\nproject, you're gonna see why\nemitting events, for at least\nthis project, this is so\nhelpful. So we're gonna go ahead\nand emit an item listed event,\nwhich we're going to create in\njust a second. And we'll give\nthe message that sender, the NFT\naddress, the token ID, and the\nprice item listed. And then up\nat the top, of course, but below\nour structure, we're gonna say\nevent item listed will do an\naddress indexed seller\naddress indexed NFT, address,\naddress indexed token ID, and\nthen a un 256 price. Sorry, this\nneeds to be a un 256 token ID,\nyou int 56. This looks pretty\ngood to us. However, we probably\nwant to make sure we only list\nand FTEs that haven't already\nbeen listed. So we can add like\nan if then in here. And this is\nkind of where preference comes\nin a little bit. But I'm\nactually going to create a\nmodifier called not listed. So\nwe make sure we don't relist,\nand if T's that are already\nlisted above our main functions,\nor do like a little indicator\nmodifier not listed. This is\ngonna take an an address NFT\naddress, a un 256 token ID and\nan address owner. And what we're\ngoing to say is we're going to\ncheck, we're going to make a new\nlisting memory listing equals s\nunderscore listings of NFT\naddress token ID. Now we're\ngonna say if listing dot price\nis greater than zero, we're\ngonna go ahead and revert with\nalready passing the NFT address\nand a token ID. And of course,\nwe're going to prepend this with\nNFT marketplace. And at the top,\nwe do error ft marketplace\nalready listed, like so. And\nthen we're going to put a little\nunderscore right underneath and\nthen up here, we'll do address\nand if the address you went to\n56. Okay, ID. So this modifier\nlooks pretty good. Let's just\nmake sure it's actually going to\ncompile we'll do yarn Hardhead\ncompile or hh compile. Great.\nThat looks good. We'll add this\nmodifier to our list item\nfunction will do NFT address,\ntoken ID message dot sender.\nCool. What else should we check\nfor here? Well, we should also\ncheck that the NF T that's being\nlisted is owned by message dot\nsender. This way only the owners\nof the NF T can actually listed\nhere so let's go ahead and we'll\nadd a is owner modifier modifier\nis owner NFT address token ID\nspender you into 256 here and an\naddress spender I ERC 721 NF t\nequals IRC 721 And if the\naddress address owner equals NF\nT dot owner a Have a token ID.\nAnd then we'll say if spender\ndoes not equal owner. And we'll\nrevert with a not owner error\nthat we're going to go ahead and\ncreate up top. So we'll say\nerror, not owner. And we'll\nprepend it with NFT marketplace\nwith two underscores revert\nrevert not owner, then will do\nunderscore for the rest of the\ncode, and boom, now underneath\nare not listed will do is owner\nNFT address, token ID message\ndot center. So now our list item\nchecks to see if it's already\nlisted, make sure that only the\nowner of the NFT of that token,\nId can list it. And then it goes\nahead and lists it looking\nnicely. Okay, cool. So that is\nour list item method here. Now\nlet's go ahead and do a little\nbit of natspec on\nthis. And now we have a little\nnatspec here, which looks really\nprofessional. Alright, great. So\nwe have a list item function.\nAll right, what's next? Well,\nmaybe let's make a buy item\nfunction for people to buy their\nNF T's after they've been\nlisted. So let's create them do\nfunction by item. So we'll take\nan address, and if the address\nun 256 token ID, and this will\nbe an external function. And\nthat will also make this payable\nan external function because we\nknow only people or contracts\noutside of this contract are\ngoing to call by item and\npayable so that people can spend\neath to spend eath, or whatever\nlayer one currency to actually\nbuy these prices, we could want\n100 percent at channeling prices in now\nfor listing, we could of course,\nadd price and then do like, you\nknow address token price. And do\nwhat we did before with chain\nlink price feeds to convert the\nprice of these tokens into how\nmuch they actually cost. And we\ncould 100 percent do that with chaining\nprice feeds. But for simplicity,\nwe're gonna leave that off. But\nI will put that as a challenge\nto you through challenge is\ngoing to be have this contract\naccept payment in a subset of\ntokens as well, of course, we\nwould need to give a little hint\nhere is channeling price feeds\nto convert the price of the\ntokens between each other, we're\ngonna choose which NFT in which\ntoken ID we want to buy. So\nwhat's the first thing that we\nprobably want to do? Well, we\nprobably want to check that this\nby item is actually listed. So\nwe're actually going to make a\nnew modifier instead of not\nlisted we'll make it is listed\nup and modifiers modifier is\nlisted. And this is going to\ntake an address and up the\naddress un 256 token ID. And to\ncheck to see if this is listed,\nwe'll say listing memory listing\nequals s underscore listings of\nthe NFT address of the token, Id\nsort of go into the mapping\nhere. And then we're just gonna\ncheck the price. So we'll say if\nthe listing that price is less\nthan or equal to zero, so\nbasically, if there's no price,\nif it's defaulted to zero, if\nthe price is zero, then we're\ngonna say revert, not listed.\nAnd after the address, token ID,\nand of course, we're going to\nprepend. And if the marketplace\nand the marketplace underscore\nunderscore, not listed, and then\nwe're gonna copy this up here,\nwe're gonna say air listed, and\nthis is going to take address,\nNFT address, and au int 256\ntoken Id like so, the down in\nour modifier, then we're going\nto add the underscore and to add\nthe rest of our code here. So\nnow we have an is listed\nmodifier, we're going to check\nto make sure that that NFT is\nactually listed down here now\nwe're gonna say is listed\naddress and ft address or excuse\nme, and if the address and token\nID. Now once again, we're gonna\nsay listing memory listed item\nequals s underscore listings.\nAnd if T address token ID, or\nsay if message dot value is less\nthan listed item dot price, then\nwe're going to revert with price\nnot met. Then we'll do NFT\naddress, Open ID listed item dot\nprice Excel so we're going to\ncreate a new air price not met\nerror. Price not met of course\nwe're going to prepend this with\nNFT marketplace to take an\naddress. And if the address you\nwent to 56 token ID and then a\nUNT 256 price. So we can see exe\nexactly how the price wasn't\nmet, and then back down here,\nwe'll get the full error. So we\nwant to make sure they're\nsending us enough money. First\nof all, when they send this\nmoney, it needs to belong to\nwhomever listed the item. So we\nactually need to keep track of\nhow much money these people\nhave. So let's create another\ndata structure called proceeds\nwhere we keep track of how much\nmoney people have earned selling\ntheir NF T's. So we'll create a\nmapping of address to you and\n256. And this is going to be a\nmapping of seller address to\namount earned. And we'll make\nthis private called S underscore\nproceeds. And what we'll do is\nwhen somebody buys an item, is\nwill update their proceeds.\nSo we'll say as proceeds of\nlisted item, that seller equals\ns proceeds of illicit IO dot\nseller plus MSG dot value. Now,\nonce we buy this item, we're\ngoing to want to delete the\nlisting. So to delete a mapping\nfrom a wreck, so to delete an\nentry and a mapping, we just use\ndelete s underscore listings and\nft address of the token ID. So\nwe remove that mapping. And then\nfinally, we're going to go ahead\nand transfer it. So we'll say I\nERC 721 and ft address, we're\ngoing to call dot transfer from\nthe listed item dot seller to\nthe message dot sender with the\ntoken ID. Now you'll notice\nsomething here, we don't just\nsend the seller the money. Now\nwhy is that? Well, solidity has\nthis concept called pull over\npush. And it's considered a best\npractice when working with\nsolidity, you want to shift the\nrisk associated with\ntransferring ether to the user.\nSo instead of sending the money\nto the user, this is what we\ndon't want to do want to have\nthem withdraw the money, we\nalways want to shift the risk of\nworking with money and working\nwith eath or whatever layer one\nyou're working with, to the\nactual user. So we don't want to\nsend them the money directly, we\nwant to create this s proceeds\ndata structure and we can have\nthem withdraw from it later on.\nNow, we could probably do some\nchecking here. Or we could say\nokay, check to make sure the NFT\nwas transferred. And if we look\nat I ERC 721 though, and we're\nlooking at the transfer from\nfunction, we don't see it\nactually has a return. And if we\ngo to the IP 721 We can see that\nnone of these have a return type\nthough, transfer from doesn't\nhave a return type here.\nHowever, we do see this safe\ntransfer from bit safe transfer\nfrom it's going to be a little\nbit better, right because if we\nlook at transfer from transfers\nownership of an entity, the\ncaller is responsible to confirm\nthat underscore two is capable\nof receiving entities or else\nthey may be permanently lost. So\nmaybe instead we want to use\nsafe transfer from which throws\nan error unless message sender\nis the current owner and\nauthorize operator, or blah,\nblah, blah. So instead of\ntransfer from we're going to\nactually use safe transfer from\njust to be a little bit safer.\nSo we'll do safe transfer from\ninstead of transfer from. And\nthen since we're updating a\nmapping, we're going to do what,\nyou guessed it, let's omit an\nevent, we'll call item bot. Lab\nwill be a message that sender,\nan empty address, token ID and\nfor listed item that price. So\noff the top, let's create a new\nevent. To event item bought. And\nthis will be a an address\nindexed fire an address indexed\nNFT address an address indexed\ntoken ID and then a un 236\nprice. Just kidding, that\ndoesn't look fantastic. This\nshould be intuitive six. Now it\nlooks fantastic. Now in this buy\nitem, we've set this up in a way\nthat is safe from something\ncalled a reentrancy attack. And\nwe've been coding these\ncontracts in a way where we kind\nof do all this state change\nfirst. And then we transfer the\nNFT that token or etc. But why\nare we doing that? Cognitively\nwe think it might make sense.\nOkay, first, maybe we should\nactually send the NFT right,\nwe'd want to send the entity\nfirst.\nThis is actually a huge security\nvulnerability. And to understand\nwhy let's learn about one The\nmost common hacks in blockchain,\nthe reentrant. See attack. Now\nin this sub lesson, we're going\nto talk about reentrant. C, and\nin the GitHub repo associated\nwith this lesson, we're going to\nhave the code for everything\nthat we're going to go through\nhere. And the code that we're\nlooking at is based off of this\nsolidity by example. reentrant.\nSee example. And I have a link\nto it in the GitHub repo\nassociated with this course.\nNow, I have a sample contract\nhere, it's a place where you can\ndeposit and withdraw your eath.\nSo what it does is it has a\nmapping called balances, where\nyou can call deposit, and it'll\nupdate how much you've deposited\ninto the protocol. And then it\nhas a withdrawal function as\nwell. So what it does is it\nfirst grabs your balance from\nthis balances mapping, make sure\nthat you have more than zero.\nAnd then the way that we've been\nsending eath, this whole time,\nwe do message that sender dot\ncall, we send the balance, and\nthen we update bounces of\nmessage sender equals zero. Now\nthis is the line that actually\nmakes this contract incredibly\nvulnerable. And if we run this\nright now, though, we'll say\nhey, no, it looks like it's\nworking as expected, we can go\nto deploy a copy the accounts\nthat I'm working with, like that\nin a bounce zero, we can\ndeposit, you know, it's going\naway, let's go to ether, will\ndeposit to ether, come down,\nwhat deposit now had to balance\nbounces up, we'll hit withdraw,\nnow have bounces goes back to\nzero. And it seems like it's\nworking as intended. Now,\nthere's actually a way we can\nattack this function to drain\nall the money in this contract.\nAnd this is what's known as a\nreentrancy attack. The two most\ncommon kinds of attacks in this\nspace are going to be reentrancy\nattacks, which is what we're\ntalking about here. And Oracle\nattacks, which usually only\nhappen when a protocol doesn't\nuse the decentralized Oracle,\nlucky for you, we're teaching\nyou right from the get go how to\nuse chain link so that you can\nbe protected. And it's these two\ntypes of attacks that often\nresult in the most amount of\nmoney last, there's a\nleaderboard called rec dot news,\nwhich keeps track of many of the\ntop attacks that have ever\nhappened in the defi space. With\nmany of them if you go into the\nretrospectives are either an\nOracle attack or a reentrancy\nattack. And you might be saying,\nHey, where are we just talking\nabout NF T's this, this doesn't\nhave anything to do with NF T's\nwe'll get there, don't worry. In\na new contract below, we're\ngoing to create a new contract\ncalled attack down here. And\nwhat we'll do with this attack\ncontract is we'll grab this\nreentrant vulnerable contract,\nwe'll say reentrant, vulnerable,\npublic reentrant vulnerable,\nlike so. And we'll save that\nreentrant vulnerable contract as\na global variable. And we'll say\nconstruct door address,\nunderscore ranch and vulnerable\naddress. And then we'll say\nreentrant vulnerable equals\nrancher and vulnerable at\nreentrant vulnerable address.\nNow what we're going to do is\nwe're going to create a function\ncalled attack. And it's this\nfunction that's going to call\nwithdraw in a malicious way. So\nwe're going to say attack, this\nis going to be an external\npayable contract. And we're\ngoing to call the posit on this.\nSo we'll deposit some money\nfirst. So we'll do reentrant\nvulnerable dot the posit\nwill send a value of one ether.\nAnd then immediately we will\ncall re N Trent vulnerable dot\nwithdraw. Now at first glance,\nthis seems pretty harmless.\nBut remember, when we call\nmessage dot call like this to\nsend we're calling back to this\nthis attack contract. Now when\nwe call this attack contract, is\nthere a way to execute any other\ncode? Well, there is remember\nhow we learned about fallback\nfunctions. If we put a fallback\nfunction in here or a receive\nfunction. When this code runs\ncall and seconds our contract\nether we can have it trigger our\nfallback function to call\nwithdraw again. So that will\nsend our contract more ether\nthan it's do before we update\nthe balance. So let's see what\nthis looks like. So in our\nfallback here, we'll say if the\naddress of reentrant vulnerable\nbalance is greater than or equal\nto one ether aka we're saying if\nthere's money left in the\ncontract, then rancher\ninvulnerable dot withdraw. And\nthen we'll put to get balanced\nfunction in our attacking\ncontract. We're going to attack\nreentrant vulnerable by calling\nwithdraw. When we get to this\nsend section, what are we going\nto do, we're going to have our\nfallback function trigger\ncalling withdraw again. Now when\nwe call withdraw again, bounces\na message that sender hasn't\nbeen zeroed out yet. So the\ncontract code will go, oh, you\nstill have some money here.\nLet's go ahead and let's send\nyou that, which will then again,\ntrigger us to call withdraw. And\nso we'll just keep calling\nwithdraw until we're done. So\nlet's see what this looks like.\nSo we compile this, and then\nlet's go to deploy, first, let's\ndeploy the reentrant vulnerable\ncontract. Alright, and we can\nhave any contract address, you\nknow, like the one that deployed\nit, we can have a deposit, let's\ndo, we have a deposit one ether\ndeposit. Now we can check the\nbalances of it. Copy. Paste\ngreat, is one. So now let's have\na do 10. Deposit, it took the\nbalance. And now we have this\nmuch in here. So we have this\nmuch in here. And if we\nwithdrew, we withdraw all of it.\nAnd if we switched accounts, to\nsomebody else, we hit withdrew.\nNothing would happen because\nthat other account doesn't have\nanything, which makes sense. So\nthere's a lot of money in here,\nright. And if we do get balanced\nwith the contract, we can see\nhow much money it has, right? It\nhas this much money total. Now\nwhat we can do on a different\naccount, let's choose this, this\nbrand new account, let's go\nahead and deploy the attack\ncontract. And we'll pass it the\nreentrant value address as an\ninput parameter. So we'll deploy\nthat. And now what we'll do is\nwe'll call attack. And you'll\nsee even though this contract\ndoesn't have anything deposited\nin the reentrant vulnerable\ncontract, we will still steal\nall the funds in here or just\nabout all the funds. So right\nnow hit get balance, and a\nreentrant vulnerable, here's\nwhat it is, get balance a here\nzero, you know, there's the\naddress, we had attack now, now\nthat get bounce, oh, excuse me\nin public, and withdrawal should\nbe payable as well. Now we'll\npass one ether as an input\nparameter to our attack\nfunction, and we're going to\ndeposit just one ether. And then\nwe're going to withdraw. And\nwe're going to keep withdrawing,\nbecause our fallback function is\ngoing to keep calling withdraw.\nAnd all we had to do was deposit\none ether, and we're gonna be\nable to pull out all 11 that are\nin here.\nSo we'll hit attack now.\nTransaction went through, the\nnew balance of our contract is\n12, because the one that we\ndeposited and then the 11 that\nwe stole, and the new balance of\nour old contract is now zero. So\nthis is known as a reentrant.\nSee attack. Basically, since we\ncall a function in another\ncontract in the middle of our\nwithdraw, we allow code to run\non a different contract. And the\ncode that ran runs on this\ncontract, recalls withdraw\nbefore balances is set to zero,\nwe get to here we call the\nfallback function of our other\ncode, and it calls withdraw, and\nwe need to reread withdraw\nbefore we get to setting\nbalances a message that sender\nequals zero. So this is an\nissue, obviously. And there are\ntwo ways we can prevent it.\nThere's the easy way. And then\nthe mutex way, I don't wanna say\nthe hard way, it's just a\ndifferent way. So one of the\nthings you'll always see in\nsecurity tools is you always\nwant to call any external\ncontract as the last step in\nyour function, or the last step\nin transaction. And we want to\nupdate bounces to zero before we\ncall that external contract,\nbecause of balances of message\nsender is reset to zero before\nwe call external code, then if\nit were to try to re enter this,\nit would hit this require step\nand just cancel out right here\nand wouldn't be able to send any\nether again. So that's the first\nstep that we can do. The next\nstep that we can do is using\nsomething called a mutex lock.\nAnd this is what open Zeppelin\ndoes with one of the modifiers\nthat they have, we can have some\ntype of a Boolean called locked\nor something and just right at\nthe top, we can just say require\nnot locked. Otherwise, revert.\nAnd then the first thing we do\nin this contract is we can say\nlocked equals true. And then the\nlast thing we do in here is we\nsay locked equals false. And\nusing this lock in here, we only\nallow one piece of code to ever\nexecute in here at a time and we\nonly unlock it once the code\nfinishes. Now open Zeplin comes\nwith a reentrancy guard which we\ncan use on our code. And it has\na modifier non reentrant which\ndoes essentially what we were\ntalking about with our locks it\ncreates a variable called status\nand changes it to enter whenever\na function has been entered. It\nruns out code, and then changes\nit back to not entered when it's\nfinishes. And whenever any code\nruns, it just requires that it\nis not entered. So if we wanted\nto use this on our code, we can\nimport at open Zeppelin, slash,\ncontracts, slash security, slash\nreentrancy. Guard about so we\ncan inherit the functions by\nsaying NFT marketplace is\nreentrancy guard. And then any\nfunction that we're nervous is\ngoing to have this reentrant see\nissue, like maybe by item, for\nexample, we would just add the\nmodifier non reentrant. Just\nlike that. And that'll add that\nmutex, that locking mechanism\nthat we talked about. Now, the\nmutex way is a little bit more\nexplicit with our security,\nright? Because we're saying,\nHey, this is locked. This is a\nnon reentrant function. Still a\nbest practice, whenever you call\nexternal code, like what we see\nhere is you do all of your state\nchanges before you call an\nexternal contract. Now, you\nmight be saying, Oh, that's cool\nat all. But what about how does\nthis relate to our NF Ts? Well,\nimagine for a second, instead of\nmessage that sender dot call,\nthis is, you know, all success\nequals, you know, some NF T dot\ntransfer from, and then we do\nsome transfers from stuff in\nhere. And instead of doing some\nfallback stuff, our NF T has our\nNF T's function transfer from\nthe similis code to re enter\ninto our withdraw. If we have\nour withdrawal set up like this,\nsince we're still calling an\nexternal contract with NFT. To\ntransfer from that transfer from\nin that external contract could\nbe malicious and try to re enter\nour contract. As a best\npractice, you always want to\nchange your state, before you\ncall any external contracts that\nyou might not have control of, I\nhighly recommend playing around\nwith this a little bit just\nbecause seeing is believing. And\nwith that being said, again, all\nthe code for this is going to be\navailable in the GitHub sociated\nwith this lesson for this\nreentrant vulnerable code. And\nwith that, let's go back to our\nNFT project.\nOkay, so now we know why we're\ndoing this safe transfer from at\nthe bottom of our function here\nat the bottom of our bio,\nbecause if our safe transfer\nfunction from was a little bit\nhigher, maybe what ends up\nhappening is we send multiple NF\nT's to the wrong address before\nwe update them. So that's why we\ndo that. And we favor push over\nPaul. As we said, Here, there's\na whole lot of these security\ntips that you'll learn going on\nthrough this course and in\nsolidity. But this is still\nfantastic, right, we have our by\nitem. And we have our list item\nfunctions. Let's do a cancel\nitem now, or cancelled listing.\nSo we'll do a function.\nCancel listing we'll do the NFT\naddress. And the UN 256 token\nID. This will be an external\nfunction. One will want to make\nsure only the owner of this\nentity can cancel it. So we'll\nsay is owner.\nAnd if T address, token ID\nmessage dot Sen. Want to make\nsure that the NFT is actually\nlisted. So we'll do is listed\nand ft address, token ID. And\ngreat. Now to cancel this, all\nwe're going to do is we're going\nto delete s listings NFT address\ntoken ID, we're just going to\ndelete that mapping. And then\nwe'll emit an event item\ncancelled message dot sender and\nif T address and token ID. And\nof course, we're going to create\na new event here. We'll say\nevent item canceled. And it will\nbe an address indexed seller\naddress. Index NFT address. You\nwant to 56 indexed token ID. All\nright. Great. That was pretty\nquick. Cancel listening. Boom.\nJack. Done. What's next? Okay,\nlet's update our listings. So\nwe'll do function update listing\naddress and if the address you\nwent to for the sixth token ID\nyou went to the six new price\nwill update the price of this of\nthis external we'll make sure\nit's listed with is listed\nsay is owner do a token ID and\nthen we'll do message dot\nsender. Now to update our\nlisting We'll just say s\nunderscore listings of NF T\naddress. At token ID dot price\nequals the new price that we're\ngiving it. And then we'll admit,\nwe can omit like item updated.\nBut we can also just omit an\nitem listed with MSG dot sender\nNFT address, token ID, new\nprice. Because essentially, by\nupdating it, we're essentially\njust relisting it with a new\nprice. So we're just going to do\nan item listed event, we only\nhave one more function to do, we\nneed to do a withdraw proceeds.\nSo we'll say function, withdraw\nproceeds to get all the payments\nfor all of our entities. So\nwe'll get the the proceeds by\ndoing new activity six proceeds\nequals s underscore proceeds of\nMSG dot sender, right, we're\ngetting all the payments that\nwere collected in by item, and\nwe're saying if proceeds is less\nthan or equal to zero, then\nwe're going to revert with no\nproceeds. And we're going to\nmake this a NFT. Marketplace\nunderscore underscore no\nproceeds. Excel create at the\ntop error empty marketplace no\nproceeds being otherwise, we'll\nsay s underscore proceeds of MSG\ndot sender equals zero. So we're\ngoing to reset the proceeds to\nzero, right, we're going to do\nthis before we send any\nproceeds. And then we're going\nto do our traditional way we\nsend payments, so bool success\nequals payable, message dot\nsender call value is going to be\nproceeds all blank here. And\nthen we could do require, you\nknow, we could do require\nsuccess, or we could say\nif not success, reverts revert\nwith Aleksey marketplace,\ntransfer failed. And then we'll\nmake this a new air, air NFT\nmarketplace transfer failed. Put\na semicolon here. And we're\nlooking pretty good. Now we even\nhave a way to withdraw. So we\nhave our five functions here.\nAwesome. Let's just create a\ncouple of getters. So maybe\nwe'll do we even copy this.\nPaste it here we'll say getter\nfunctions like so. And we'll do\nfunction maybe we'll do get\nlisting. Take an address, NF T\naddress, the utilities X token\nID, external view, which returns\na listing in memory. And we'll\nsay return s underscore listings\nof NF T address token Id like\nso. And also function, get\nproceeds of address seller,\nexternal view returns, you went\nto the desex return s underscore\nproceeds of the seller. So we'll\nget how much money somebody is\nowed. And then any listings and\nlet's run a little compile here,\nyarn, or hit Compile or hh\ncompile just to see where we\nmessed up. Oh, we did a mess up.\nWow, that's great. And now,\nguess what? You have\nsuccessfully created a\nminimalistic NFT marketplace\nthat's completely decentralized.\nThat is pretty wild. And that is\nincredibly powerful. And you\nshould feel really excited for\nyourself. Very cool, very good\njob. But you know, we're not\ndone, we got to write some\ndeploys and some tests. So let's\njump into that. Now since we've\ndone this a couple of times, I\nactually encourage you to pause\nthe video here and try writing\nyour own deploy scripts and your\nown tests. And then go ahead and\ncome back and follow along with\nus and see if you did it\ncorrectly, we're going to create\na new folder called deploy. Of\ncourse, we already have the hard\nhat deploy in our hard hat\nconfig. So we know we're good to\ngo here. So let's go ahead and\ncreate a one. Deploy NFT\nmarketplace.js. Now once again,\nyou've seen a lot of this\nbefore, so we're going to spare\nthe details do const network\nequals require hard hat to\nconstant development chains,\nequal equals require dot dot\nslash help our hard hats config,\nwhich we should have let's see.\nDo we copy paste it over? No.\nOkay, so we didn't copy paste\nover Are helper Hardhead config\nfrom the last project, let's go\nahead and grab it. Or we can\ngrab it from the smart contract\nlottery and paste that in here.\nAnd we really only need this\nfile for the development chains\nhere. Right for hard hat and\nlocalhost, we're going to grab\nthe development chains from\nthat. And then we'll also grab\nconst. Verify, equals require,\nget this from utils. Verify,\nright? Do we have utils, we have\nverify. Fantastic. Now we'll do\nmodule that exports equals\nasync. an async function where\nit's gonna take get named\naccounts and deployments. From\nthe hard hat input parameter,\nand then we're gonna do const.\nDeploy comma log equals\ndeployments. And then const,\nDeployer equals await, get named\naccounts. Which, of course,\nwe're getting from our heart\nhead dot config. We have named\naccounts, we have a Deployer.\nAnd we have a player or whatever\nyou have in here from our last\nproject. And now does our entity\nmarketplace have a constructor?\nConstruct? Nope, no constructor.\nSo we know args is going to be\nblank. And then we can say const\nNFT. Marketplace equals await,\ndeploy. And if T marketplace,\nsay from Deployer, args is going\nto be args. Log will be true.\nAnd then wait confirmations will\nbe network dot config dot wait\nconfirmations or one, two, this\nis going to be block on for\npatients, we'll go to the\nconfig, just make sure that\nthose are in here. I'm sorry, I\ndidn't add them in here. So\nwe'll do block confirmations is\ngoing to be six\nfor all of our networks. So I\nactually grabbed this not from\nthe last project, it looks like\nI grabbed this from the hard hat\nstarter kit. So I'm just going\nto add those block confirmations\nin there. And now we're good to\ngo. Now we're gonna say if we're\nnot on a development chain, not\ndevelopment chains that includes\nnetwork dot name, and process\nstudy and be done ether scan API\nkey, then we're gonna go ahead,\nwe'll do log verifying. And then\nwe'll do a weight verify. And if\nthe markets place dot address\nwith arcs, and then we'll do\nlike log a whole bunch of\nhyphens here. And then finally,\nmodule that exports dot tags\nequals all and then NFT Mar good\nplace. And we can test this\ndeploy function with yarn\nHardhead deploy. Tada, we did\nit. Great. So now we have the\ndeploy function, we can verify\nwe have our contract, what else\nare we probably gonna need to\ndo. Since this is an NFT\nmarketplace, we're probably\ngoing to need some NF Ts. So\nwhat we can do is in our\ncontracts, and we'll create a\nnew folder for tests got a new\nfile in here called Basic NF T\ndot soul. And in here, we can\nadd that basic NF T from our\nlast project. Or you can just go\nto my or you can just go to the\nGitHub repo associated with this\ncourse, go to contracts, test,\nbasic NF t, and then just copy\npaste. That works too. So this\nbasic NF t that we're using is\njust pointing to the pug as the\nbasic NF T for us to use just to\ntest this out. So now that we\nhave a basic NFT we're gonna\nneed to create new file, oh to\ndeploy basic NF T dot j s, and\nwe'll borrow a lot of the\nboilerplate from over here. So\nwe'll copy all of this actually\npaste it in. We'll say const\nargs equals blank, and we'll say\nconst basic NF t equals await\ndeploy basic NF T. From\nDeployer. args is going to be\nargs. Log is going to be true\nweight con confirmations is\ngoing to be network dot config\ndot block confirmations or one\nand then we'll verify this with\nif not develop meant chains dot\nincludes network dot name and\nprocess dot EMV that ether scan\nAPI key that will say log or To\nfind dot A dot await there if I\nbasic NFT dot address, and arcs,\nmodule dot exports dot tags\nequals all, and basic NFT. And\nwe can test both of these with\nyarn, art had deploy. And\nfantastic. Both of these have\nbeen deployed. Again, you don't\nhave to pause. But it is a good\nway to really hone in to really\nsharpen those skills on doing\nall this. And repetition is the\nmother of all skill. So\nrepeating this stuff yourself\nand thinking through these\nproblems yourself and trying to\ncode these things yourself, are\nreally what's going to make you\nsuccessful at this. All right,\nawesome. Now that we have our\ndeploy Betson, it's time to\nwrite some tests. Now, if you go\nto the GitHub repo associated\nwith this course, and you go to\nthe test folder, the tests and\nhere are some of the robust,\nwe've actually written out of\nall of our projects, there's a\nlot of tests in here. Now,\npretty much everything in here,\nwe've already learned about and\nyou already know how to do you\nhave the ability to do it. So\nI'm just going to go ahead and\nget you started off, and we're\ngoing to write one test\ntogether. And then I highly\nrecommend you going back in, you\ntried to write some tests\nyourself, to get that code\ncoverage to get that test\ncoverage to be 100 percent. So let's go\nahead, we'll write one test\ntogether, then you should pause\nthis video and try to write some\ntests yourself. When you're done\nwriting tests and you think\nyou've hit 100 percent, feel free to\ncompare back to the test that we\nwrote. So let's create a new\nfolder called tests. Test. And\nin here, we'll do a new one\ncalled unit. And if you want to\nwrite staging tests later on,\nyou absolutely can we will not.\nWe'll create a new file in here\ncalled NFT marketplace.test.js.\nAnd we'll start some tests. So\nwe'll do const.\ncert, expect equals require Chai\nconst. Network deployments,\nethers, equals require hard hat\nconst development chains equals\nrequire dot dot slash dot dot\nslash helper, hothead config.\nAnd we're gonna do the same\nsetup we've been doing. We'll\nsay bang development chains dot\nincludes network dot name,\nquestion mark, describe dot\nskip. Else describe. And if NF T\nmarketplace tests, comma async\nfunction, excuse me, this is\njust gonna be a function.\nScrabble oval is just a\nfunction, not an async function,\nlike so. Great. Now let's get\nsome variables and do a before\neach. So we'll say NF T\nmarketplace, basic NF T, we'll\ncreate a constant price. So\nwe're just always set the price\nof all of our NF T's to the same\nthing. This will be ethers dot\nutils dot parse\nether 0.1. We'll say const token\nID for now will always be zero.\nAnd then we'll do before each\nwill be an async function.\nAnd we'll get out and we'll also\nget Deployer. Say deployer\nequals await, get named\naccounts. We're gonna need to\ngrab getting into accounts from\nhard hat as well wrap this all\nup dot deployer Excel and then\nwe'll also in our heart\nhat.config.js. Under get named\naccounts, we also have something\ncalled player. Now I didn't talk\nabout this too much. But we're\ngoing to have a second account\nwhich is defaulted to the first\nindex, right? So we can do at\nthe top to come up player. And\nwe can say player equals await\nget named accounts dot player.\nNow we have a player and a\ndeployer account will do await\ndeployments, that fixture. All\nwill just deploy all of those\ncontracts will run through\neverything in our deploy folder.\nWe'll get our NFT marketplace.\nWe'll say NFT marketplace equals\nawait ethers dot get contract\nand ft. marketplace. And then\nwe'll do basic NF t equals await\nethers dot get contract. Basic\nNF T. The way ethers dot get\ncontract works is it defaults to\ngrab thing, whatever account is\nthat account zero, which right\nnow is our Deployer. If we want\nto call a function on NFT\nmarketplace, with the player\nbeing the one calling the\nfunction, we would have to say,\nentity marketplace equals await\nand empty marketplace dot\nconnect player like this. And\nnow whenever we call a function,\nwe would use the player instead\nof the Deployer. Sometimes what\nI like to do and you'll see this\nin my code, is I'll do let NFT\nmarketplace contract. And then\nlet NFT marketplace, and then\nI'll do NFT marketplace contract\nequals await ethers dot\ncontract. And then I'll connect\nand set that to the NF T\nmarketplace. Yes, we can do, we\ncan automatically choose who to\nconnect by placing whoever want\nto connect to write and get\ncontract. But sometimes it's\nreally nice to be kind of\nexplicit. So it's really up to\nyou. I'm going to undo all that,\nI just want to re show you that\nto make sure that you knew\nthat's how you kind of switch\naround with the different\naccounts and the different\nusers. Now that we have an NF T,\nwe're probably going to need to\nmint the NFT so that we can\nactually place it on the market.\nSo we'll do await basic NF T dot\nmeant NF t, and then we'll\napprove to send it on to the\nmarketplace. So we'll do a wait.\nBasic NF T dot approve and T\nmarket place dot address token\nID, which is going to be zero.\nAnd just like that, the NOC\nmarketplace remember, it can't\ncall approve, because it doesn't\nown that NF t. So we need to\nhave the Deployer. Call\napproved, right. And remember,\nsince we're not we need to put\nbasic NF T in here. Since we\ndidn't tell ethers who to\nconnect this to it just\nautomatically connected it to\nour Deployer because that's\nwhat's at account zero. So it's\nthe deployer calling minting it\nand then the deployer approving\nto send it to the marketplace.\nOnly after this approved\nfunction has been called canned\nthe NFT marketplace called\ntransfer from all those NF T's.\nNow we're just going to do one\ntest here. We're gonna say it\nlists and can be bought. That's\nit, and this will be an async\nfunction. And we're just gonna\nlist the NFT and buy a weight\nentity marketplace.if We go to\nour energy marketplace, what are\nwe doing, we're listing it\nright, we want to list the item\nor with the address token ID and\nthe price. So we'll do dot list\nitem. Basic NF T dot address,\ntoken ID is zero, which we've\ndefined right here. And then\nprice we've hard coded up here\nas well. So we're listing it. So\nthe deployer owns the NF T, the\nplayer is now listing it, now we\nwant to buy it, let's have the\nplayer be the one to buy it. So\nwhat we're going to do is we're\ngoing to have to connect the\nplayer to the NFT marketplace.\nSo we can say const player\nconnected NF T, marketplace\nequals and ft marketplace dot\nConnect. Player. And then we can\nbuy the item by saying a weight\nplayer connected and ft\nmarketplace.by item. It'll be\nthe basic and if we look back at\nthe end of the marketplace, what\ndoes buy item need, needs the\nNFT address and the token ID. So\nbasic NF t that address\nand then the token ID and after\nthis bot, we should check to see\nthat the player actually does\nindeed own that NF team. So we\ncan say const new owner and we\ncheck to see if that owner is\nindeed updated. We can say basic\nNFT dot owner of because NF T's\nhave an owner of function, token\nID and then we also want to see\nthat the deployer actually is\ngoing to get paid. So we can say\nawait and if T marketplace dot\nget\nproceeds of Deployer. So now we\ncan do assert new owner dot two\nstring equals player and we can\nassert deployer proceeds.to\nstring equals price.to string\nbecause they should have been\npaid that price. And that's\nright, it's actually a little\nbit easier. instead of grabbing\nplayers from getting named\naccounts. It's a little bit\neasier just to grab it right\nfrom ethers. So we'll do const\naccounts equals await\nget signers. And then we'll save\nplayer equals accounts of one\njust because when we connect\nit's expecting it type of\naccount and then the the get\nnamed account is a different\ntype. So Oh, it's just a little\nbit easier to actually connect\nlike this. So now we'll connect\nto the player like so just know\nthat player and deployer are now\ndifferent types. So you'll see a\nlittle bit differences there. To\nme, this is ethers that gets\nsigners. And then when we buy\nthe item, we're of course gonna\nhave to pass a value, it's gonna\nbe price, of course, we're going\nto need to pay the price of the\nNFT. And then of course, this\nneeds to be player dot address.\nAnd that's the difference right\nnow we got to do player that\naddress whenever we want the\naddress of one of the ethers\naccounts. And then this new\nowner, of course, should be in a\nwait. And now we can run this\nall. In Tada, we see things\npass. So our NFT marketplace is\nable to facilitate the buying\nand selling of an NF T with\narbitrary humans. This is\nfantastic. So we just ran the\nsingle test to show a little bit\nof the oddities when working\nwith NF T's and some different\naccounts. But 100 percent If you feel\nup for the challenge, take this\ntime, pause this video and try\nto write some tests. Remember,\nthe goal here is for us to do\nyarn hardhat coverage, and see\nwhat our coverage is and try to\nget it to be 100 percent coverage. If\nwe run it right now, we'll see\nOh, my goodness, we are missing\na lot of coverage. Here, we have\na ton of uncovered lines, on top\nof uncovered functions,\nbranches, statements, etc. Try\nto write some tests to get this\nto 100 percent and then come back.\nOkay, welcome back. Hopefully\nnow you've written some tests.\nAnd when you run your tests, you\ncan get some of them, I look\nlike this, right. And these are\nmy tests, these are the tests\nthat I wrote, you could do more\nyou could do last. And let's\nsee, when I run yarn Hardhead\ncoverage, I even missed some\nlines. And I could I could test\na little bit more. So make your\ntests even better than the ones\nthat I made. So these are the\ntests from the GitHub repo\nassociated with this. Now that\nwe've written some tests here,\nlet's just write a couple of\nscripts. And the reason we're\ngonna write a couple of scripts\nis we're gonna need these a\nlittle bit later. So we'll write\nsome scripts to mint, some\namount of teased by some NF T's\netc. And we'll need this to\nfiddle around and play on the\nfront end a little bit later. So\nto create a script, again, we've\ndone this perform, let's do a\nscript called mint, and list dot\nj s. And this will be to mint at\nNFT. And then immediately listed\non the marketplace. So let's\ncreate an async function called\nmint, and list. And down below,\nwe're going to call mint and\nlist I'm going to copy paste\nwith that same script thing that\nwe've been doing. Obviously,\ninstead of Maine, though, we're\ncalling this mountain list. Now\nin this mountain list, where\nit's a constant, NFT mark, and\nof tea market, place equals\nawait ethers dot get contract.\nAnd ft marketplace. And right\nwe're going to import ethers\nfrom hard hat. And then we'll do\nwe'll grab basic NF t. So we'll\nsay const. Basic kind of T\nequals await ethers dot get\ncontract. Basic NF t. And then\nfirst we'll mint a basic NF t.\nSo we'll do console dot log,\nmaintained at the top. And we'll\ndo a weight or actual we'll say\nconst. Mint, TX equals await\nbasic NF T dot mint NF t. And\nthen we'll do await min TX dot\nWait, wait one block. And\nactually we'll say const. Mint\nTX receipt. So that equals that.\nAnd in this receipt, here's\nanother reason why events are so\ngood. When we met this NFT.\nWe're omitting the token ID in\nan event in this document ID\nevent. So we could say const\ntoken ID equals mint TX receipt\ndot events of zero. That args\ndot token Id like that. And now\nwe have the token ID. And now\nthat we have the token ID and\nthe basic NFT. minted we can now\ncall on our NFT marketplace list\nitem. So now we'll say console\ndot log. Approving NFT right,\nit's gonna be real similar to\nour tests here. I'm gonna say\nconst approval TX equals await\nbasic NFT data prove\nNFT marketplace dot address\ntoken ID and then we'll do a\nweight approved TX dot wait one\nand we'll do console dot log\nlisting NF t.at that and then\nwe'll do const TX equals await\nand if T market market place\nthat list item and we'll do NFT\nmarketplace that address So can\nId do await TX dot wait one,\nconsole dot log listed and cool.\nAnd we can try this out by\nrunning yarn hardhat node, which\nis going to run through our\ndeploy scripts, right, it's\ngoing to run to these deployed\nscripts here. And then in a new\nterminal, we'll run our script,\nyarn hard hat, run scripts meant\nand list dash dash network\nlocalhost. And we missed an\nargument, oh, we need a price as\nwell to list our entity. So\nwe'll create a constant price\nequals and we'll say ethers dot\nutils dot parse, ether 0.1. And\nwe'll pass the price and to the\nlist item. So oops, and sorry,\nit's not the marketplace that\nwe're listing, the basic NF t\nthat we're listing, of course,\nso run that again. And Bada\nbing, bada boom, got some listed\nevents. And we can see here,\nwe're doing some listing and\nawesome. So now we have a\nscript. Alright, so now that we\nhave a script, and we're going\nto be writing a couple other\nscripts a little bit later, we\nessentially have a really solid\nrepo here are our totally\ndecentralized, NFT marketplace,\nthis is absolutely massive, and\nyou should be incredibly,\nincredibly proud of yourself.\nNow, of course, this is all\ncode. And people can interact\nwith this, if they're software\ndevelopers, which is great. But\nwe're going to want to allow\nanybody to be able to interact\nand list their own NF t's on our\nmarketplace. So what are we\ngoing to do? Well, we're going\nto want to build a front end for\nthis. And now we're gonna get\ninto the second part of this\nlesson. So on lesson 15, we just\nfinished the backend. Now we're\ngonna move on to the front end,\nwe're gonna start with this\nmorass code. The code for both\nof these is pretty much nearly\nidentical. But we're going to\nstart with Morales, and we're\ngoing to teach you how to do\nboth of these. And we're going\nto teach you the difference\nbetween the Morales and the\nMoGraph. And kind of why we're\neven using them in the first\nplace, we're going to start with\nMorales. So if you want to\nfollow along with this next\nsection, all the code we're\ngoing to be working with, is\ngoing to be in here. So you\nexcited, I hope you are because\nthis is going to be a phenomenal\nsession, we are about to build\none of the most sophisticated\nfront ends that we can using the\ntools that we have. And like I\nsaid, we showed you a little bit\nearlier what this is going to\nlook like. So let's do a quick\nrefresher here. So here's what\nour front end is going to look\nlike. But what we can do is we\ncan connect with our little\nconnect button, we hit Metamask\nMetamask pops up, we'll go ahead\nand connect. And now that we're\nconnected, we can see the\ndifferent NF T's in here. And if\nwe're on an address that's owned\nby us, it will say owned by you.\nAnd if we switch addresses, are\nyou I will go ahead and update,\nconnect there. And now we're\nowned by a different address.\nNow if it's owned by us, we get\nthis little hover that says\nUpdate listing. And right now\nit's worth 0.18. That's what\nit's listed for on our\nmarketplace. If it's owned by\nus, and we click it, we can\nupdate it to a different price.\nLet's update it to 50 eath, or\nwhatever your layer one currency\nis, we'll just save new listing\nprice. We'll go ahead and\nconfirm. And I'll say the\nlisting updated, please refresh,\nwhat we can do them. And we'll\nmine some blocks on the back\nend, and boom, now we see that\nit's worth 50 here. Now if we\nswitch to a different account,\nnow we can see owned by Baba\nblah, and the hovered now says\nby me enough is selected as a\ndifferent user, I'm going to get\nthis transaction to actually buy\nit. Now go ahead and confirm\nthat I'm going to buy it, I get\na little pop up. This is item\nbought successfully. Now if I do\na little refresh, we'll now see\nthat that NFT is gone from the\nmarketplace since we bought it\nright and it's no longer\navailable to be sold. Now what\nwe can do then is we can come\nover to sell NF tees. And at the\nbottom, we'll see a withdraw\nproceeds. So whenever somebody\nbuys an NF T, the NFT\nmarketplace actually keeps the\nproceeds that actually keeps the\nresult of the sale. So if we\nswitch back to our address that\nhad the NFT listed, we can now\nsee Withdraw 50 proceeds because\nwe know that we have 50 eath,\nbecause we just bought that for\n50. So if we hit withdraw,\nMetamask is going to pop up, we\ncan go ahead and confirm, wait a\nlittle bit as transaction\npopulates, and boom once it goes\nthrough, and we'll see now we\nhave zero proceeds. Right? We\nwithdrew everything from here.\nSo what we can do now is we can\nrelist that NFT. So if we come\nback, go back to the one who\njust bought that at a T if we\nknow the address and the token\nID of the NF t and we own it, we\ncan go ahead and relisted you're\ngonna place the address in here\nwith the token Id give it some\nsort of price. We'll submit\nwe'll approve giving the NFT\nmarketplace access to our or\nNFT, to our little doggie. And\nthen we'll go ahead and actually\nsend the transaction to actually\nlist the NFT on a marketplace\nthat we get NF T listed\nsuccessfully. After we move some\nblocks in the backend, we can go\nback to the front end. And we\nnow see, it's owned by us,\ninstead of the original owner,\nright and set for 10 ether. And\nthen we can of course, switch\nback to a different user, and we\ncan have\nthem actually buy. Alright, so\nnow that we have the contracts,\nwe know what this looks like on\nthe contract side. So now let's\nfigure out how to do this on the\nfront end side. So let's jump\ninto our code editor. And begin\nif we're on our hard hat and my\nNFT marketplace Free Code Camp\nfolder. That's great. But we're\ngoing to create another folder,\nwe're going to CD down and\ndirectory. And we're going to\nmake a new directory. I'm going\nto call it next Jas and if T\nmarketplace dash FCC. Now you\ncan do next Jas marketplace dash\nmirallas FCC if you want. Again,\nwe're starting with mirallas CD\nnext Jas NFT marketplace FCC. So\nnow that we have this folder,\nwill do code dot will open up a\nnew VS code, or you can do File\nOpen folder and open this new\nfolder. And we can begin working\nin this new folder in here. Now\nthat we're in our new project,\nwe're in our new folder, we're\ngonna do exactly what we've done\nbefore. Yarn create next app,\nperiod. Okay, we've done our\nsetup here. Now, I don't like es\nlint. So once again, I'm just\ngoing to go ahead and delete\nthat. And what we're going to\nadd in instead is our prettier\nstuff. So prettier, ignore\nprettier RC. Again, some people\nmay strongly disagree with me on\nthat, but to each their own\nright, this is what I like to\ndo. So this is what I'm going to\ndo. Now we have a minimalistic\nreact project, right? If we run\nyarn Dev, we open up our UI on\nthat site, copy this, or\nCommand, click it. Tada. Welcome\nto next. Jas Yeah, we've got an\nx js application. As we know, we\ngo to pages, we go to index.js.\nLet's delete everything in here.\nBom will leave the stuff and\nhead if it comes with stuff and\nhead will write Hi, exclamation\nmark. We'll save we'll come\nback. And now we see Hi. And\nI'll zoom in a whole bunch.\nBoom. So now we have some\nminimalistic reacts minimalistic\nnext, Jas. Now, I know we\nalready started the project\nhere. But let's jump to the\nreadme that's given to us. And\nlet's talk about how we want to\ndo this what we want this to\nactually look like. Well, we're\ngoing to want to make a\nhomepage. And in this homepage,\nwe'll say we'll have it show\nrecently listed, NF T's homepage\nwill show recently listed\nentities that will say if you\nown the NFT, you can update the\nlisting. If not, you can buy the\nlisting. So we'll have that. And\nthen we'll have a sell page. And\nin this page, you can list your\nNFT on the marketplace. So these\nare going to be our two main\npages, we're gonna have a\nhomepage and a sell page. Now\nwe're going to have a ton of\ncomponents, but we're really\nonly going to have two main\npages. So if we go back over to\nPages, right, right now we have\nour apps dot j s, which serves\nour app, which is cool, which\neverything runs through. And\nthen we have our homepage. Let's\nalso create right now, our sell\npage or selling of T dot j s.\nAnd then in here, we'll just\nmake this really minimal, that\nwe can copy most of what's in\nhere, we can actually just copy\npaste this whole thing, paste it\nin here. And instead of high,\nwe'll say sell page. We'll save\nthat. Now if we go to our\nlocalhost do debt slash sell.\nAnd if T oops, we gotta run. Run\nthe front end again. With yarn\nDev. Sorry, we'll run yarn dev\nagain. Now we refresh. And now\nwe can see sell page. So sell\npages that slash sell page, and\nthen home is just going to be\nhigh. Okay, cool. So we have our\ntwo pages. Which one should we\nwork on first? Well, let's work\non our homepage. So we're going\nto be in our index.js. I'm going\nto keep this front end bit\nrunning, we're going to hide it\noops, that's the opposite of\nhiding it, push it down, we're\ngoing to hide it like that. And\nlet's go ahead and let's start\nbuilding this. So we see in our\nindex js, we have some head\nstuff here, I'm going to change\nthis to NFT. Marketplace.\nDescription is going to be just\nan empty marketplace.\nLike so Fabcon looks great. Now\nif we do a little refresh, now\nit says NFT marketplace up at\nthe top here, which is good.\nThat's what we want. Well in our\nindex page, what's one of the\nfirst things that we're always\ngoing to need to do? You guessed\nit, we're going to need a little\nconnect button right? We're\ngoing to need our users to be\nable to connect to to web three\nto connect to a blockchain. So\nsame as we've done before. Let's\ngo ahead let's create a\ncomponents folder. And we'll\ncreate a header component\ncomponent Nance folder and we'll\ncreate a new file The header\ndigests. Now remember, since\nwe've done this before, with our\nfront end lottery code, we can\nalways refer back to the lottery\ncode as well when we're building\nthis, okay. And of course, we\nhave all of the code for this on\nthe GitHub repo. So you can use\nthat to what I'm not going to\nhave you all do is last time, we\ndid that manual header thing,\nright, where we had to do all\nthe local storage and do all\nthat crazy stuff, we're not\ngoing to do that. This time,\nwe're going to just do it the\neasy way, we're going to just\nuse the web three UI kit. So to\nuse this connect button, we're\ngoing to do yarn, add. And we're\nnot going to do dash dash Dev,\nbecause this connect button is a\nnecessary component for the\nfront end, yarn add web through\nUI Kit. This also means we're\ngoing to do Morales and react\nmirallas. I said, and this is\nwhere it might be a little\nconfusing. I know I said in here\nthat we have both a Morales and\nother graph edition. So we're\nstill going to use the Morales\npackage in both of them. The\nonly difference is we're going\nto use a Morales server as well\nin our Morales edition. And\nwe're not going to use a morale\nserver on our the graph edition,\nthey're both can use the Morales\npackage because all the open\nsource hooks and tools are still\nincredibly powerful, even if we\ndon't use the Morales server. So\nwe're still going to use the\nMorales package even when we're\ngoing to be using the graph.\nGreat. So now that we've added\nthose all, we're going to do\nexactly what we did before on\nour last next Jas process. So in\norder to use our web through UI\ncomponent in our app, dot j, s,\nand do import mirallas provider\nquotes and without sorry, and\ncurly brace, it's from react\nmirallas like that. And then\nwe're going to wrap our whole\ncomponent thing in a morass\nprovider. So we're gonna do\nreturn, little open parentheses,\nclose parentheses here. We're\ngonna do rounds provider. And\nthen we're gonna do in if she\nallies on Mount is going to\nequal false, because we're not\ngoing to use the server yet, or\nelse provider. Okay, cool. Now\nthat we've wrapped our app in a\nMorales provider, and go back to\nour header, we're gonna say\nExport default function header,\nwe're going to grab our Connect\nbutton from what through your\neye kit. So we'll do import\nconnect button from web three UI\nkits. And then in here, we're\njust gonna say return. The next\nbutton. Now what we can do back\nin our app, J. S, is we can do\nimport, import, do header from\ndot dot slash components header,\nand we have our header, we'll\njust put our header right above\nthe component. And we're going\nto add some stuff to the header\nin a bit. Let's just make sure\nthat we're importing the header\ncorrectly. Let's go back to our\nUI here. And okay, boom, we have\nour connects button. If we click\nit, you know, we'll get this\nlittle pop up. And I'm way\nzoomed in. So I'm going to anway\nzoom in.\nNow, what else do we want to put\nin our header? Well, we're\nprobably going to want to like\ngive this like a name and make\nthis look a little bit nicer,\nprobably going to want to a link\nas well to our cell NF T page.\nSo let's create a navbar. So\ninstead of just returning the\nconnect button, put this in\nparenthesis and we'll have a\nreturn some other stuff too. So\nwe can use this nav tag, which\nusually defines like a nav bar.\nSo it's really similar to a div,\nit's just another tag. Right, so\nnow we'll put everything into\nthis nav tag. And in next Jas,\nwe can actually make links using\nthe next Jas link tag. So what\nwe can do in this is link allows\nus to basically connect to\ndifferent links or URLs in our\napplication, like so. So we can\ndo import link from next slash\nlink. And in here, let's say if\nwe want it to go to the\nhomepage, we can make a link.\nAnd we'll say h ref equals slash\nequals slash. And inside of\nthis, we would wrap this in an a\ntag to make it clickable. And\nthen we could just say something\nlike NFT marketplace. Now if we\nsave that, we go to our front\nend, we now we see have a NFT\nmarketplace button that we can\nclick and since we're already at\nhome, we're not going to go\nanywhere. But if we copy this\nlink section, paste it below,\nand we make another one for cell\nand f t. And we title this cell\nNF t. Now we save we go back to\nour front end, we now have NFT\nmarketplace and sell NFT if I\nclick sell NF t we now get to\nthe sell page right we'll go\nback to the homepage sell page\nflip back and forth. Awesome,\nvery exciting. So now we have\nhave an incredibly minimalistic\nheader obviously looks terrible.\nSo let's do just a little bit of\nformatting. And oftentimes\nyou'll do the formatting last.\nBut while we're here, we might\nas well do our formatting we're\ngoing to use what if you guessed\ntailwind? You guessed correctly.\nSo remember, tailwind with.\nNext. Jas, you can always just\nfollow along here. And we'll\ngrab, we'll do the exact same\nthing we did before we'll do\nyarn, add dash dash Dev, that\nstuff right there. And then\nwe'll run a knit after these\nfinished\ninstalling. So we'll do yarn,\nand then paste that in. And\nthere we go. So now we've got\nour post CSS config, we've got\nour tailwind config. We're going\nto grab tailwind.config.js.\nPaste it in here. And then we're\ngoing to grab Global's dot css\nand open up Global's dot css,\npaste that in there, and cool.\nNow we have tailwind in here.\nNow that we have tailwind, we\ncan do some tailwind stuff to\nour header here. Let's let's\ncreate a div for all of these\nfor everything here, we'll\ncreate a little div for all the\nstuff here, we'll make like a\nbig section for almost like a\nbig sign saying, Hey, you're at\nthe NFC marketplace, h1, which\nstands for header one, and we'll\ngive it a class name of padding\ny of form. Padding x of four,\nwe'll do font bold text will be\nthree XL, and then it'll just\nsay NFT marketplace. Now we have\nthis NFT marketplace, which is\nnice bolt. Awesome. If you're on\nyour server you're going to kill\nit's going to kill it with Ctrl\nC, and then we're going to\nrestart it. And that's going to\npull in all the tailwind stuff.\nAnd now if we refresh our local\nmain, we should now see okay,\nand if T and F c, r gets place,\nright, we now see this and big\nand bold, which looks a lot\nbetter. So let's keep going.\nLet's give our whole nav a class\nname. Equals we'll give it\npadding of five, border bottom\nto flex flex row justify just if\nbetween n items center. We'll\nsee how that looks. Haha, looks\na lot better. We're now kind of\nlike setting this up with a\nbottom border kind of stick and\nsome stuff like this, that looks\nmuch much nicer already. Let's\ngo down here. Let's make our\nbuttons have a class name equals\nlax lax row items center. And\nlike I said, this is not a\nstyling class. So we're not\nreally going to go over exactly\nhow we're styling this. And that\nis okay. But that's going to\nmove that over make that look a\nlittle nicer. We'll give our\nlink here, a class name equals\nMr. For P six. And we'll give\nboth of these the same class\nname both these links, give them\nsome padding, so they moved away\nfrom each other some margin to\nthe right, so they're away from\neach other. And oh, I forgot to\ndo this Morales off equals\nfalse. We need Morales auth\nequals false so that we don't\nautomatically connect to a\nMorales database or try to\nconnect to Morales database,\nwhen we connect, we want to just\nconnect with our Metamask. And\nwe'll change this to home\ninstead of the marketplace. But\notherwise, that looks pretty\ngood home selling of T Connect\nbutton. And we can adjust the\nformatting of this to make it\nlook a little different. But I\nthink for the most part, this\nlooks much better,\nright? Alright, cool, much, much\nbetter looking header. Here, we\nhave our app.js setup with the\nmouse provider headers\ncomponents. Let's now move on to\nour index. Let's now move on to\nshowing these NF T's showing all\nthe NF T's in our marketplace.\nAnd here's where it's going to\nalready start to heat up and get\nreally interesting. And actually\none more thing, we're going to\ngrab this headpiece in the index\nif you haven't. And we're just\ngoing to have it be in the app\nJSX. So yeah, and our app.js\nwe're going to put that header\nup at the top, and just put a\nlittle, little div, Div. div,\nlike so wrapping around this\nwhole thing. This goes here. And\nthis way, no matter what page\nwe're on, we're always going to\nhave this as our header. And we\ndon't have to define it each one\nof our little our things here.\nSo we'll do a refresh. And it\nsays head is not defined. Sorry,\nthat's because we're going to\nneed to copy import head from\nnext slash head. Paste it into\nour app that Jas import head\nfrom next head. And now we can\nsee we're going to empty\nmarketplace no matter what page\nwe're on, because we're defining\nit at our app level. We have the\nheader in here, we have this\nstuff in here, index almost has\nnothing in it now. Let's do\nthis. So what do we want to do?\nWe want the homepage aka our\nindex to show recently listed\nNFT. So the question is, how do\nwe show the recently listed NF\nTs. How do we do that? Well,\nlet's go back to our contract.\nWe go back to our hard hat NFT\nmarketplace So we're looking at\nat the marketplace, what do we\nhave in here? How do we actually\nsee where NFT is stored? Well,\nthey're stored in this listings\nmapping. However, how do we see\nall of the listings that are in\nhere? Well, this is a mapping,\nwhich means we have every single\naddress on the planet in here,\nwe can't loop through the\nmapping, we'd have to loop\nthrough every single address on\nthe planet, which is some\ninsanely large number that you\nand I could never fathom how\nmany addresses there are. So\nwhat are some solutions that we\ncan take to this problem, right?\nBecause we're obviously not\ngoing to loop through\neverything. So what do we do?\nWhat's what's kind of the first\napproach, one of the first\napproaches would be like,\nalright, Patrick, well, why\ndon't we just create an array,\nan array of listings instead,\nand this might be a good\napproach. But what if then later\non, we also want to get some\nother weird data, maybe we want\nto get all the NF t's a user\nowns NF t's a user owns, there's\nno array of NF T's that a user\nowns. Again, that's just a\nmapping. But what if we want to\nquery some other weird data, or\nquery some other weird data, or\nwhat if an array will be very\ngas expensive, which it is, if\nwe make this an array to loop\nthrough, it'll be incredibly gas\nexpensive. So we don't want to\nhave to go back and change. So\nI'm going to I'm going to type\nthis out. Because this is\nimportant. We don't want to\nchange our protocol for just the\nwebsite, we don't want to change\nour protocol for just the\nwebsite, or we don't want to\nmuch change our protocol for the\nwebsite. Because if we were to\nmake this an array, it would\nbecome incredibly gas\ninefficient. And it would become\nmuch harder to use this NFT\nmarketplace because it would be\nso much more expensive. And as\nyou build more and more complex\nprotocols, you're going to\nrealize that having an array for\nevery single mapping you have\nisn't feasible. This is one of\nthe reasons where these events\ncome into play. So every single\ntime we list an NF t, we call\nthis list item function. And we\nomit item listed, this item\nlisted event is stored in a data\nstructure that's still on chain,\nbut just smart contracts can\naccess it. However, guess what\ncan't access it off chain\nservices can access these\nevents. So what we do in this\ncase, is what we're going to do\nis we will index the events off\nchain and then read from our\ndatabase. So what we're\nliterally going to do is we're\ngoing to set up a server to\nlisten for those events to be\nfired, fired. And we will add\nthem to a database to query. So\nyes, we're literally going to\ntake every single time an item\nis listed, we're going to index\nit in a database for ourself.\nAnd then we're going to call our\ncentralized database to start\nand we're going to call that\ndatabase to do that. Now the\nquestion then becomes Whoa,\nisn't that centralized? Hey,\nPatrick, we're talking isn't\nthat centralized? What the\nHickety heck, and the answer to\nthat is, it's not necessarily.\nSo the graph is a protocol that\ndoes exactly this. It's a\nprotocol that indexes events off\nchain, and sticks them into this\nthe Graph Protocol. And it does\nit in a decentralized way,\nMorales, the way we're going to\nshow you first does it in a\ncentralized way, Morales is\ngoing to do it in a centralized\nway, which might be the route\nthat you want to go for speed\nfor extra bells and whistles, so\nthat you can do local\ndevelopment, which is what we're\ngoing to be focusing on here, or\nany of the other functionality\nthat Morales comes with. Because\nMorales does a lot more than\njust that. That's something to\nkeep in mind too, is even though\nwe are adding a centralized\ncomponent, or logic, our smart\ncontracts, the real bulk of this\napplication is decentralized.\nAnd you can verify all your\ninteractions are working with\nthis decentralized smart\ncontract, we've actually been\nusing a lot of protocols that\nare centralized, like ether\nscan, like open see, and some of\nthese centralized protocols are\nreally important to this space.\nSo we're showing you Morales to\nget you familiar with working\nwith one of these centralized\nservers, in case you optionally\nwant to make an application that\nprovides a centralized service.\nAnd there's a ton of tools in\nthe space like opens up and\ndefender tenderly and more, that\nare centralized, but give us\nmassive, massive benefits. We as\na community are bringing more\nand more things to being\ndecentralized. And sometimes we\nneed some training wheels to get\nthere. And then the graph is\ngoing to be the decentralized\nway, which is a bit of a longer\nprocess to go main net, but\nwe'll explain all that when we\nget there. Let's learn how we\ncan list the most recently\nlisted NF T's and Morales in the\ngraph. Both have some really\nsolid videos, I'm going to leave\nsome links in the GitHub repo\nassociated with this. So if you\nwant to learn more, you should\ndefinitely watch both of those\nbecause they are absolutely\nfantastic and will help you\nunderstand this event stuff\nbetter. So normally, when we\nread from the blockchain, we do\nsomething like contract dot get,\nget listing, you know, and then\nwe put it whatever our input\nparameters are. Contract double\nblah, so instead, so we're going\nto read from a database that\nhouses All the mappings and an\neasier to read data structure.\nBoth Morales and the graph do\nthis.\nWe've been using the morass,\nopen source packages and tools.\nHowever, Morales also comes\noptionally with a server back\nend to give your web three\napplications more functionality.\nHowever, there's a ton of stuff\nthat we're not going to cover\nthat Morales can do to help\nbuild your web three\napplications. So instead of me\ncontinuing to talk about\nMorales, and what it can do, we\nhave Ivan here to give a brief\noverview of some of the other\nthings that Morales can do take\nit away, and\nmy name is Ivan, I'm from\nrallis. And I'm here to tell you\nhow you can speed up your\ndevelopment by 10 times and I'm\nnot over exaggerating, when\nyou're building something, you\nwant to ensure that is scalable,\nbecause your DAP may go global,\nit may get viral, it may go\nmainstream, it can happen. And\nif it happens, you don't want to\nstart from scratch, you want to\nuse tools and services that\nallow you to go fast, and also\nto go big. And that's exactly\nwhat mirallas provides. At\nmirallas. We create tools, we\ncreate infrastructure for\ndevelopers in a way that you\nhave a single workflow, and they\nwill soon explain what it means\nbecause this is what saves you\ntime. If you have a single\nworkflow for doing things. And\nworkflow in web three really\nmeans that you have to have a\nsmart contract, whether it's a\ntoken, the game, some kind of\nstaking some kind of\nmarketplace, some kind of defy,\nit will be on chain, but at the\nsame time, you have to connect\nit to your back end. Because\nwhen something happens on chain,\nyou need to monitor that. So you\ncan create web hooks, you can\ncreate email, you can create a\npush notification, you can run\nsome custom code, you can run\nsome calculation, you can save\nsomething to the database,\neverything on chain at the end\nof the day needs to go into our\nback end. And when something is\nin your back end, it needs to go\nto the front end. So for\nexample, you change the UI when\nsomething happens on chain or\nyou change the UI. If your user\nreceives a transfer there is\nabove a specific threshold. Or\nif your user has this NFC, you\ncan allow them access into some\nkind of chat or some kind of\nexclusive piece of content. So\nat Morales, we provide you with\na full stack suite of tools that\nis used by over 100,000\ndevelopers, it's really becoming\none of the most adopted tech\nstacks in web three. And it all\nstarts with Morales identity,\nwhich ensures that you get one\npiece of code, you write one\npiece of code and you can log in\nyour users across different\nblockchains across different\nwallets. And in your morale is\ndashboard, you will get the user\nprofile, and you will get a web\nsession. So mirallas allows you\nto manage identities because a\nuser profile can have many\ndifferent wallets from many\ndifferent chains connected to\nit. And all of the transactions\nwill be synced from that user,\nall the real time transactions\nwill be synced about that user.\nAnd also, you have established\nweb session between your front\nend whether it is a game,\nwhether it is a web website, we\nensure that you have secure\nauthenticated web sessions, and\nwe provide you with session\nmanagement. So in case you have\nyour own bike, and then you have\nmirallas session identity\nmanagement, you can invalidate\nsessions, you can log in users\nand do all of that great, all of\nthese great things with one line\nof code. That's very important.\nNumber two is Morales real time\nI already mentioned a bit of it.\nBut basically when you have a\nuser, you know exactly what's\ngoing on in real time. You can\nrun custom code, whenever a user\ndoes a transaction, you can run\ncustom code or do a web hook or\nemail or push notification\nwhenever a user interacts with a\nsmart contracts or when a smart\ncontract simply emits an event.\nThis can be an trade in an NFC\nmarketplace, this can be ERC 20\ntransfer, you can be very\nflexible by setting filters. So\nyou can say only give me alerts\nonly give me web hooks when the\nuser transfers more than 10\nNFCs. Or when this token\ntransfer is above $1,000, and so\non so forth. This is morale is\nreal time very, very powerful\nthings. Next are mirallas SDKs.\nSo whether you're building a\nwebsite, whether you're building\na game where full integration\nwith game engines, whether\nyou're building for some other\nplatform, we have extensive SDKs\nthat are easy to use that allow\nyou to do all of this that allow\nyou to connect to Morales and do\nthis very, very easily. And if\nyou go to our documentation,\nwhich I highly recommend you to\ndo, you go to Morales, Doc's dot\nmorales.io, if you go to Doc's\ndot, Marisa Yo, you will first\nand foremost understand what\nmirallas is in depth. So you can\nthink of it kind of like\nFirebase, but for crypto,\nbasically, it's a managed\nbackend, that you can connect\nyour front end. Also, you can\nconnect it to your own back end\nusing no GS SDK, it's very, very\neasy. But what I wanted to show\nyou here is cross platform. So\nfor each thing we have, let's\nsay you want to get nfts for\nyour user, we'll show you how to\ndo it in simple JavaScript,\nvanilla JavaScript, how to do it\nand react, how to do it using a\nweb request. Let's say that you\njust want to use a raw web\nrequest. Let's say you're using\nsome kind of language that we\ndon't have SDK for you still can\nuse Morales just that you have\nto call the raw HTTP request.\nAnd we'll also show you how to\ndo it in Unity using C sharp in\nUnity game engine. So we're\nvery, very clear cross platform.\nAnd we are cross chain. So this\nmeans for example, when you log\nin the user, you can create the\nuser profile where you have the\nlambda address, let's say your\nuser uses Solana then they can\neasily connect Aetherium, they\ncan easily connect Binus chain,\nthe end, we're gonna add more\nchain soon, they can easily\nconnect L Ron, to one user\nprofile. And then you have all\nkinds of different wallets,\ndifferent chains, and you have\none single user profile one\nsingle user ID. This is, by the\nway, how it will look like in\nyour database. As you can see,\nyou're going to have a user user\ntable right here, you're going\nto have all of their accounts.\nSo in this case, I only have\neath. But if I have Solana, if I\nhave other types of blockchains,\nit will all be right here. And\nthis is a database that also has\nall my transactions. This is a\ndatabase where I can set up\ndifferent listen events or smart\ncontracts. So for example, open\nsee I can watch open see smart\ncontracts or something else. And\nit's very, very variable,\nbecause this is MongoDB. This is\nMongoDB, you can run MongoDB\nqueries, it's very, very\nvariable. So in that sense,\nmirallas gives gives you a nice,\nnice dashboard with everything\nyou need to know about your\nusers, their sessions, their\npermissions, and so on, so\nforth. And of course, you can\nconnect to your own back end\nusing the Node js SDK. So this\nis Morales SDKs. And finally,\nwhen we're speaking about the\nworkflow, the final thing is the\nAPI's, which I also already\nshowed you, but the API is that\nyou can do RAW requests from any\nprogramming language from any\nkind of architecture. So using\nthis workflow, you can easily\nachieve anything you want very,\nvery quickly. You really have to\ntry Morales it is it will change\nyour life. I can explain here\nall I want, I have limited time.\nBut as you can already see, by\nthis presentation, you're very\ncurious, as you already can see,\nby this presentation, you want\nto try this as you already feel\nby watching me here, you are\nvery, very excited. We have to\nget your hands dirty. So go,\nnumber one, two dogs, authorize\nthe sale, and go here getting\nstarted connector SDK in vanilla\nor react and go through all of\nthis. See the magic for\nyourself. And if you want\npracticalities, go to youtube\nchannel and go to morality Oh,\nslash projects, guys, you all in\nthe community. Using Morales,\nyou will succeed using rallies,\nyou will achieve your goal. And\nyou're going to do sooner than\nyou expect yourself. You're\ngonna surprise yourself. But\ndon't let yourself down. Go to\nmorales.io sign up, get started,\nyou guys. Now that I've\nexplained all of that, what does\nthis look like? Well, this is\nwhere we're actually going to\nstart using mirallas with its\nserver capabilities. And we're\ngoing to sign up for a server\nhere. And we're going to use\nMorales as our back end for our\napplication. So to get set up\nwith Morales, we go to\nmorales.io. We can go ahead and\nsign up for free. We'll put our\nemail in, we'll create some\npassword. Why are you here?\nOther please specify Patrick's\namazing hardhat video, you don't\nhave to write that. But if you\nwant to write that you can. What\ndid you hear about Morales for\nthe first time? Well, you all\nheard about it on YouTube,\nbecause you heard it from me,\nand then pick your roll, I'm\ngoing to be a developer, we'll\nhit next, I don't want to\nsubscribe. But I'm going to not\nbe a robot and create your\naccount. And it even gives us a\nlittle property or create your\nfirst server. So our back end is\ngoing to use a server to do any\nstuff on the back. So we'll\ncreate a server. And if we were\ngoing to do a main net or a\ntestament, we choose one of\nthose. But for now we're going\nto do a local dev chain server.\nAnd again, this is one of the\nadvantages of Morales is it\nallows us to work with our local\ndev chain. For indexing events,\nwe can actually index our events\nfrom our local hard hat node,\nwhich is incredibly, incredibly\npowerful here, so check your\nemail, and we'll have an\nactivate my account thing,\nemail, we'll hit activate your\naccount. And it'll bring us back\nhere and we'll recreate and\nwe'll do local dev chain.\nAlright, so now we're going to\ncreate a new local dev chain\nserver. So we're going to call\nthis NFT marketplace, we're\ngoing to select the region,\nwhatever region you want, I'm in\nthe eastern United States. So\nI'm going to choose New York.\nBut whatever location works for\nyou, we're gonna do local dev\nchain, and we're going to do\neath, local dev chain. And\nagain, if you're building for\npolygon, if you're building for\navalanche, if you're building\nfor Phantom, if you're building\nfor any of these EVM compatible\nchains, again, your eath local\ndev chain, it's going to work\nexactly the same. So we're going\nto add instance now. And we're\ngoing to create a new\napplication here. So we're going\nto close now we have the server\nhere, and it says ganache, but\nit's really hard hat. Don't\nworry about that. Now that we\nhave our server up, we can go to\nthe Morales documentation, what\nwe're looking for is events,\nwe're looking to sync with\nevents. So we can even do a\nlittle search in here for\nevents. And we see smart\ncontract events platform\nAutomatic Sync, and even tells\nus a little bit more about why\ndo we need to sync and watch\nsmart contract events. So\nbasically, this server our\ndatabase is going to be looking\nfor these events to be emitted.\nBut before we can do that, we\nneed to hook up our application\nto our server and if you go to\nthe React Morales GitHub right\nat the top And you'll probably\nsee saw this before, when you\nhave this Morales provider in\ntheir docks, they actually pass\nan app ID and a server URL. And\nthis is how we can actually\nconnect directly to our servers\non mirallas. So what we're gonna\ndo is right, now we're gonna go\nback to our app that Jas and\noriginally we've been saying\ninitialize on Mount equals\nfalse. When we say this, we're\nsaying, Hey, we're not going to\nuse a morale server, we're just\ngoing to use the open source\nmorass tools that y'all provide.\nNow, we actually do want to use\ntheir server, right, we do want\nto use all these bells and\nwhistles that Morales comes with\nout of the box. So we're going\nto change that. So instead of\nsaying initialize on Mount\nequals false, we're just getting\nready with the app ID and the\nserver URL. So we're going to\ndelete this. And just like it\nsays, in the documentation,\nwe're gonna give it an app ID\nand a server URL. So we're gonna\nsay app ID equals, and this is\nwhere as a string, we'll put our\napp ID. So if we go back to our\nMorales database, we can go to\nview details. And we see all\nthis information in here. And we\ncan grab our application ID, we\ncan copy it, paste it in here.\nAnd then we'll want to grab our\nserver URL, which is at the top.\nSo this is the URL of our unique\ncustom morale server. So we'll\nsay server, URL equals and then\npaste that in there like that.\nNow, if you've been following\nalong with these tutorials, you\nmight be thinking oh, we're\nwe're kind of just hard coding\nthat stuff right in there like\nthat, how that seems kind of\nthat seems kind of bad. Well, if\nthat's your intuition, that is\nfantastic. So instead, we're\nactually going to put these into\nenvironment variables. So we're\ngoing to create a new file, a\ndot env file. And this is where\nwe're going to put all of our\nenvironment variables. Now next,\nJas comes with built in support\nfor environment variables, which\nallow you to do the following\nuse dot env, dot local to load\nenvironment variables or those\nenvironment variables to the\nbrowser by prefixing. It with\nnext underscore public. So\nthere's a couple of different\nenvironment variable paths we\ncan use. We can do dot env, dot\nlocal, we can do dot env, dot\nthis dot that that the other\nthing, we're just going to do\ndot env, to keep it simple here.\nBut in order for our front ends,\nto read environment variables\nfrom our dot env file, we have\nto do next underscore public\nunderscore, and next Jas will\nlook into our dot env file for\nvariables that start with this\nand only stick these environment\nvariables into our application.\nIf we were to just do like\nMorales server equals blah,\nblah, blah, it has no idea what\nthis is because we need to do\nnext underscore public\nunderscore. And if we do that,\nand we'll do a console dot log,\nlook here, process dot env. Next\npublic morale server and we\nactually need to kill it and\nrestart it. And then we go back,\nwe do a little refresh here,\nit'll say Look here as a do bla\nbla bla, because that's what is\nin the dot env file with that\nnext public. So we'll grab our\napp ID, we'll copy it. And then\nour dot env will do next public\napp ID equals and we'll paste\nthat in there. We'll grab our\nserver URL, we'll go back to\nhere. We'll do next public\nserver URL equals, we'll paste\nthat like that. And now at the\ntop, we'll say const. App ID\nequals process dot E and V dot\nnext, public app ID. And then\nwe'll say const. Server URL\nequals process dot E and V dot\nnext public server URL. Now that\nwe've had these variables, we'll\nstick them in like this.\nSo this is how we can connect\nour application to our morale\nserver. Now, of course, we\nhaven't done anything yet. But\nwe're getting started, right?\nThis is how we're going to\nconnect to it. Now that we've\nsigned in, well, I told you that\nour morale server was going to\nbe indexing our events. And if\nyou go to this Dashboard button,\nthis is our entire database.\nEverything in this browser tab\nis what's in our database right\nnow. And as you can see, right\nnow, there's not a whole lot of\nanything, if we had any events\ndata in here, it would be in\nhere. So we need to tell our\nserver, hey, you need to start\nlistening for events. So we can\nshow the most recently listed\nentities. So morale server, you\nneed to start listening, you\nneed to create a database entry\nfor every single one of these\nitem listed events. And whenever\nsomebody buys an item, right,\nwhenever somebody buys that\nitem, or cancels an item, you\nneed to remove that from your\ndatabase. How do we start\ntelling Morales to start\nlistening to our events? Well,\nfirst off, well, first off,\nwe're gonna need to connect it\nback to to our blockchain. And\nthen we're going to say, which\ncontract which events and what\nto do when it hears those\nevents. So we need to connect it\nand then we need to tell it what\nto do when it hears those\nevents. So how do we connect our\nmirallas server to our hard hat\nblockchain? And right now, we're\nnot running one. But let's go\nahead and we'll start up our\nhard hat, our local host\nblockchain. So in one terminal,\nwe're running the front end and\nanother terminal will see the\ndownload directory. We'll cd\ninto our hard hat NFT\nmarketplace dot Free Code Camp\nor Free Code Camp, and we'll do\nyarn hard hat node. And if we've\ndone everything correctly, it'll\ndeploy our NFT marketplace.\nIt'll deploy our Basic NFT and\nthen it'll start local HTTP web\nsocket at blah, blah, blah. So\nthat's good. So now that we have\nthat Node running, what we can\ndo is we can go to view details,\nand go to dev chain proxy\nserver. So this dev chain proxy\nserver is going to be how we\nactually tell Morales to listen\nto our locally running hard hat\nnode. Now, to do this, what\nyou're going to need to do is\nwe're going to need to download\nthis what's called a reverse\nproxy. And I have a link to this\nin the GitHub as well, depending\non what computer you're running\non will tell you which one of\nthese we actually need to\ndownload. And then there's some\ntroubleshooting tips down here\nif you ever get lost, and if\nyou're really, really confused,\nwhat we can do what Morales FRP\nto download, do a quick search\non this. We even come right to\nthe documentation, connecting\nganache to Morales note for Mac\nusers download FRP dot Darwin\ndot bla bla bla for the nosh\nproxy server. So I'm on a Mac.\nSo I'm going to download this\nDarwin AMD 64. And for look at\nthe releases, that's the first\none at the top, Darwin AMD 64.\nSo this is the one that I'm\ngoing to go ahead and download.\nI'm gonna click it, I'm going to\ndownload it. Once I have it\ndownloaded, we're going to open\nit up, and we're gonna get a\nfolder and we're gonna get a\nfolder that looks like this. The\nmain things that we need are\ngoing to be f RP and FRP C dot\nini. F RPC is going to be the\nexecutable it's going to be what\nwe're going to run to connect\nour blockchain node to Morales,\nand F RPC dot ini is going to be\nbasically the config file to do\nthis. Now, again, this is one of\nthe sections where downloading\nthis is going to be one of the\nhardest steps here. So if you\nget lost, please ask questions\nin the GitHub, please ask\nquestions in the Morales forum,\nthere is a Morales forum as\nwell, where you can ask a ton of\ndifferent questions. And please\ncheck out the troubleshooting as\nwell. But what I'm going to do\nis I'm going to create a new\nfolder in here new folder called\nF R P. And I'm doing it in here\njust to make it a little easier.\nBut you could really put this\nwherever you want, and then\nalways refer back to it. And\nwhat I'm going to do is I'm\ngoing to take I'm going to copy\nthese two files, and place it\ninto this FRP folder. So now I\nhave FRP C, and F RPC that ini\nif you click on the F RPC, it's\ngoing to be like, hey, it's\nbinary, you can't really look at\nthis, don't click that, it'll\njust be a whole bunch of\nnonsense, but the F RPC dot ini\nlooks like a pretty typical\nconfig file. And this is what\nwe're going to adjust. If we\neven go back to our morale\nserver, it'll give you what you\nneed down here. And we're using\nhard hat. So we're going to copy\neverything here. We're gonna go\nback to our F RPC dot ini, and\nthen just paste whatever is in\nthere in here. And that's how\nwe're going to tell this F RPC\nthing that we need to connect. I\nhaven't tried this out for users\nusing WsL. So if you're using\nWsL, let us know in the full\nblockchain solidity course, Jas,\nmake a new discussion, if you\nhaven't seen it already, saying,\nHey, I'm using WsL for the F\nRPC. And here's what you need to\nuse. And then at the bottom, it\nsays, run and enjoy. I'm running\non a Mac OS, which runs Linux\ncommands, so I can just copy\nthis, I'll create a new\nterminal. And what I'm going to\ndo is I'm going to cd into that\nFRP folder. And I'm going to\npaste that thing that I just\nthat I just copied from Ross. So\nwe're running that F RPC\nexecutable dash c, which is dash\nconfig, F RPC dot ini. If I hit\nEnter, it's gonna say log into\nserver success, get run ID,\nblah, blah, server, UDP port,\nand then a whole bunch of other\nstuff. If you're seeing success\nstuff here, that means you did\nit right. And you can hit CTRL C\nto cancel because we're not\ngoing to keep running it. Now,\nif you want to just run this,\nyou absolutely can. But I'm\ngoing to show you another way to\ndo this. And this is using the\nMorales admin CLI. So everything\nthat we're doing here, all these\nbuttons that we're pressing,\nMorales actually comes with this\nthing called the Morales admin\nCLI or the command line\ninterface. So this is a way for\nus to connect and run all these\nbuttons and stuff that we're\npressing right from our terminal\nand right from our shell. So I'm\ngoing to show you a couple of\ncommands on how to work with the\nadmin CLI. And we're going to be\nworking with a lot of admin CLI\ncommands. But all we're going to\ndo is npm install dash g\nMorales, admin CLI or for us\nyarn Global Add. So we're going\nto grab that will do yarn,\nGlobal Add routes, admin CLI\nlike that. And now we should be\nable to run Morales admin CLI\nand see a whole bunch of stuff\nlike that. And if you ran\nroutes, admin CLI, we have all\nthis stuff. And one of the big\nones, one of the important ones\nthat we're going to be working\nwith is this connect local dev\nchain. So running this F RPC\ndash c dash f RPC ini. That's\ngoing to be the same as running\nthis connect local dev chain.\nNow what I like to do is jump\ninto our package dot JSON. And\nwe'll create an additional\nscript in here for us to just\nrun yarn, whatever the name is\nthat we want, and just to do\nthat, and just to make it a lot\neasier for us to connect our\nlocal dev chain so underneath\nlint, I'm going to do a calm\nMa'am, I'm going to create a new\ncommand. I'm gonna say Morales\nsync. And we're going to run the\nMorales admin CLI version of\nthis f RPC dash c thing. So what\nwe're going to do in here is\nwe're going to say mirallas\nadmin CLI, connect local dev\nchain, dash dash chain, hard\nhat, dash dash mirallas. Capital\nsub domain.\nThis is where we're going to put\nthe subdomain of a morale\nserver, which if we go to, we go\nback to our routes, admin data\nservers, we can go back to\nserver details. So it's going to\nbe not the HTTPS, it's just\ngoing to be from here all the\nway to the.com. So not even the\nport, we're going to grab that\nwe're going to paste that there.\nAnd then we're going to do space\ndash dash f RPC path is going to\nbe dot slash F RPC, slash FRP\nslash F RPC. Now if we save\nthis, and we run it, it's not\ngoing to work though. So if I\nrun yarn with our new script,\nMorales sync, it's gonna say\nspecify Morales API key, it's\ngoing to give us this prompt.\nAnd in our dashboard, we have\nour API key, which we can copy,\nwe can paste it, and then API\nsecret, we can copy and then\npaste it. And then we'll say\nstarting connection to hard hat,\nwhich is great. But that's\nreally annoying. And I don't\nwant to have to do that. So\nwe're going to Ctrl C, we're\ngoing to kill that. And what we\ncan do is we can go into our dot\nenv. And we can actually add\nthose as environment variables\nthat Morales is expecting. So\nwhen we run this Morales admin\nCLI, it'll check our dot env\nfile for Morales API key, which\nwe can copy right here. And then\nMorales API secret, which we can\ncopy, and paste right here. Now,\nthe reason that these aren't\ncapital and doing next public,\nthese are not going to be part\nof our front end piece. These\nare keys that we're using on the\nback end to test and for our\nlocal dev chain connection. So\nwe don't need to do next public,\nwe're just going to leave it\nlike this. But now if I hit up\nand run yarn Morales sync,\nagain, it's not going to prompt\nme this time, it's just gonna\nsay starting connection to hard\nhat. And if you see this, this\nstarting connection to hard hat\nbit, we can come back to our\nservers, we'll go to dev chain\nproxy servers, we'll hit this\ndisconnected button and refresh.\nAnd if you see connected, you've\nsuccessfully connected our heart\nadd node, which is running here\nto our Morales server, which is\nawesome. And in fact, if you sit\non your heart had no terminal,\nyou'll see the actual RPC calls\nto our blockchain here. And\nyou'll see Morales is\nconsistently calling f block\nnumber to make sure it's up to\ndate with what it has. So how do\nwe tell a morale server to start\nlistening for events? Well,\nthere are two ways we can do\nthis. The first way is with the\nuser interface. So we can go to\nview details, we'll go to sync.\nAnd right now it says no sync\nservices installed. So we'll hit\nAdd a new sync. And we can see\nsync and watch address and sync\nand watch contract events, we\ncan watch the address for\ntransactions or we can watch\nsome address for any events. And\nwe can manually add all our\ninformation here, you can select\nthe chain description, decide if\nwe want to optionally sync\nhistorical, we could put the\ntopic of the event, the ABI of\nthe event, the address of the\nevent filter, and then a table\nname. Or we could do all this\nprogrammatically, which is what\nwe're going to do, we'll create\na little script that we can run,\ntell our morale server to watch\nfor those scripts. And we'll see\nour database get upgraded to\nlisten for those events. So back\nin our code, we're going to\ncreate a new file called add\nevents that Jas now we have one\nterminal that's running our\nfront end one terminal that's\nrunning our blockchain one\nterminal that syncing our\nblockchain with morass. And now\nwe're going to do another\nterminal. For anything else we\nwant to do like run little\nscripts become the Morales\ndocks, and you click connect\nwith SDK, there's a ton of\ndifferent ways we can actually\nconnect with the SDK, we've\nalready learned how to connect\nwith react by using React\nMorales. Now we're going to\nconnect with no JS since we're\ngoing to run a little Morales\nscript. And here's like a little\nexample of what it looks like in\nthe documentation. But I'm gonna\ngo ahead, so I'm gonna say const\nMorales, equals require oralis\nslash node. And we're going to\nimport the node extension of the\nMorales package into our script\nhere, we're going to require dot\nenv\ndot config, which means we're\ngoing to need to install dot env\nyarn add dash dash dev dot env.\nAnd now we have to tell our\nmorale server all the same\ninformation that we would need\nto tell it on the user\ninterface. So one of the first\nthings that we're going to need\nis the address of our contract.\nWe're gonna need to say const\ncontract address equals and this\nis where we go oh, well, how do\nwe how do we get that contract\naddress? The easy way to do this\nis we just go back where we're\nrunning the blockchain And we'd\ngrab where that NFC marketplace\nis deployed. And similar to our\nsmart contract lottery where we\ncreated an update front end\nscript, we're gonna do the exact\nsame thing here. So back in our\nheart hat, NFT marketplace, and\nif T code, we go to our deploy\nscript or deploy folder, we're\ngonna create a new file called\n99 Dash update, front end dot j\ns, and we're gonna create a\nlittle bit of our deploy process\nthat will automatically update\nour front end. So we can just\ngrab the network address from a\nfile that is programmatically\ncreated. So we're gonna do\nmodule dot exports equals async\nfunction. And now we'll say if\nprocess dot EMV that update\nfront end, then console dot log,\nupdating front end so that in\nour dot EMV, we have update\nfront end equals true. And that\nwill be how we decide whether or\nnot we actually want to update\nthe front end. And then we'll\ncreate a function called up date\ncontract addresses, which we\nwill await. And this will update\nthe contract addresses of our\nfront end. So let's make that\nfunction. Do async function\nupdate contract addresses, make\nsure those are spelled the same.\nSo we'll say const NFT, market\nplace equals await ethers dot\nget contract. And then yes, we\nneed to import const ethers\nequals require hardhat, we'll\ngrab the NFT market place. And\nthen we're going to want to\nwrite our files in here to\nsomeplace in our front end code\nfor us, we're going to do in a\nnew folder constants. And we're\ngoing to create a new file in\nhere called network mapping dot\nJSON. And we'll have this just\nbe a JSON object which keeps\ntrack of all of our deployments.\nSo if we deploy something to\nrink V chain will keep a list\nwill keep a list of it will say\nNFT marketplace will keep a list\nof all the addresses of the IoT\nmarketplace, comma basic NF T,\nright, and then I list of all\nthose right now we don't have\nanything deployed. So we'll just\nhave it be an empty JSON object.\nNow back in our deploy script in\nthe hard hat NFT marketplace\nproject, we're going to keep\ntrack of that location. So right\nat the top, we're gonna say\nconst. Front, and contracts file\nequals, and we'll place where it\nis according to your file setup.\nSo if I do cd dot dot slash,\nnext JS NFT, marketplace, free\ncode, Camp constants, network\nmapping dot JSON, this is where\nmine is. So you're going to want\nto put it wherever your location\nis in relation to your heart at\nMt marketplace Free Code Camp,\nit's my front end contract file,\nit's going to be right here. Now\nthat we have all that we're\ngoing to get the chain ID. So\nwe're gonna say const, chain ID\nequals network dot config dot\nchain, id.to string. And we're\ngoing to need to import network\nfrom hard hat as well. And then\nwe're going to want to read from\nthis network mapping file to see\nwhat's currently in there. So\nwe'll say const. Contract\naddresses equals and we're gonna\ndo a JSON dot parse Fs dot read\nfile sync, front, and front and\ncontracts. File comma UTF,\neight. Now here's what we're\ngonna say, if chain ID is in\ncontract. addresses, let's say\nif this list of contract\naddresses doesn't include the\nmarketplace, then added on,\nwe're gonna say if contract\naddresses of chain ID of the\nNFT. Marketplace will say dot\nincludes NF T, market, Mar get\nplace dot address, then so we'll\nsay contract address says chain\nID NFT marketplace, dot push NFT\nmarketplace dot address else\nwe're gonna say contract\naddress says of chain ID of NFT\nmarketplace, which is going to\nbe a new entry now equals NFT.\nMarket market place dot address.\nSo now we've updated our\ncontract addresses object and we\njust need to write it back to\nthe network mapping. So now\nwe're gonna say Fs dot right\nfile sync front and contracts\nfile comma JSON dot string five\ncontract addresses and then at\nthe bottom we'll do module dot\nexports dot tags equals and\nwe'll say all or front end. Now\nwhat we can do is we can run\njust this update front end\nscript with yarn hardhat deploy\ndashed dash, network localhost.\nAnd we only want to do this\nupdate front end script. So we\nsay dash dash tags front end,\nand we run this, and I ran into\nan error FS is not defined, oh,\nI forgot to do const Fs equals\nrequire Fs stride again, cannot\nset properties of undefined NFT\nmarketplace. Oops. And that's\nbecause this line is off instead\nof this line, sorry. Basically,\nright now, what it's saying is,\nit's saying, hey, this NFT\nmarketplace thing doesn't exist.\nSo we need to make it exists. So\nnow we'll say contract addresses\nof chain ID equals a new entry\nof NFT marketplace and adds its\nfirst parameter, it's going to\nbe NF T, Mark gets placed dot\naddress, like that. Now we can\nrun it, and updating front end\nlooks like it's done. So if we\ngo back to our front end, we now\nsee we have an entry for\nlocalhost with NFC marketplace\nwith the address in our network\nmapping dot JSON. So if you did\nthat correctly, you should get\nthis. If not, if you're having a\nhard time with that you can, of\ncourse, just go ahead and hard\ncoded in but I do highly\nrecommend you do it\nprogrammatically, because your\nlife is going to be a lot\nbetter. So cool. We have this\nupdate front end script that\nworks now, so we can put this\nback off to the side. And let's\nkeep going. So we now have this\nnetwork mapping file with\ncontract addresses based off of\nthe chain ID. So what we can do\nis we can pull that in as well,\nwe'll say const contract,\naddress says equals require dot\nslash constants, slash network\nmapping dot JSON. And now we can\nget the contract address based\noff the chain ID. So we'll say\nchain ID equals process dot E\nand V dot chain ID, or 31337. So\nin our data and V, we'll make a\nnew entry called Chain ID. And\nfor now, we'll do 31337. And now\nwe can get the contract address\nby saying contract address\nequals contract addresses at the\nchain ID of n, f t, Mark get\nplace of zero. So we're going to\ngo into that network mapping, go\nto the chain, Id go to the NFT\nmarketplace and get the most\nrecently deployed NFT\nmarketplace boom. So now we have\nthe contract address contract\naddress says Excuse me. Now in\nour add events, we'll create a\nnew function kind of similar to\nwhat we're doing, we'll do async\nfunction main. And this will be\nour main function. And then of\ncourse, we're going to copy\npaste that main script thing\nwe've been doing this whole time\ndomain dot then catch blah,\nblah, blah, we go back to the\nmorass documentation, though, we\ncan see we're going to need to\ngrab our server URL, app ID\nmaster key, and then start it\nup. So we're gonna do the exact\nsame thing. So once again,\nsorry, before we even get into\nour main, you can do it in your\nmain function, if you want.\nWe'll say const server URL\nequals, and we can just grab\nthis once again, from our web.\nSo we'll say process web dot\nnext public Morales server URL,\nwe'll get the app ID equals\nprocess Studien v dot next\npublic Morales app ID, and then\nwe'll say const, master key\nequals process study v dot\nmaster key. So we don't have a\nmaster key in here yet. So we'll\ncreate a new one called master\nkey. We'll go back to our\nMorales front end, we'll close\nout of this, we'll hit View\nDetails. And we'll grab that\nmaster key. So we'll copy that,\ngo back to our code editor and\npaste it in. And now we have a\nmaster key in our web as well.\nWe don't want our master key on\nour front end. So we're not\ngoing to put next public like\nthat. Now, the first thing we're\ngoing to do in our main function\nis we're going to do await\nMorales dot start server URL,\napp ID and master key as the\ninput parameters for this will\ndo a little console dot log,\nworking with contract address,\ncontract address. Now we're\ngonna go ahead and add all those\nsame pieces that we see on the\nUI. So what are the events we\nwant to listen for? Well, if we\ngo back to our code here, so we\nhave our NFT marketplace, where\njust type in event we have item\nlisted item bought an item\ncancelled. So we have three\nevents we want to listen and a\nMorales, they have this add new\nevents synced from code, which\nwe're basically going to be\nfollowing. To do this, we need\nto obviously start and then\ncreate our options for the\nevent. We have the chain address\ntopic, abi elimite, table name\nand sync historical and then we\njust do Morales dot Cloud dot\nrun, watch cloud event options\nuse master key. And that's\npretty much it. So we're going\nto follow these documents here\nto do our code. So let's start\nwith item listed. Let's create\nsome options for our IDed listed\nevent. So we'll say let item\nlisted options, or we could do\nconst if we want to, but I'm\njust gonna do let item listed\noptions equals. And first we're\ngonna need the chain ID, which\nwe have, because we're getting\nit from Morales. Now the first\nthing to point out about chain\nID is that ralis understands a\nlocal chain is 1337. So even if\nyou're on 31337, if you're doing\na local development, you got to\nswitch it to 1337. So we're\ngoing to make another variable\ncalled Morales chain ID. And\nwe're just going to say, let\nMorales chain ID equals chain ID\nequals 31337. Question mark\n311337. Otherwise, chain ID but\nwe're saying since Morales\nunderstands that any local Dev\nis going to be 1337, we're going\nto say if chain ID equals 31337.\nThen have Morales chain ID equal\n1337. Otherwise have an equal\nwhatever whatever our chain\nideas and in our dot env we can\ndecide okay, if we want to do\nrink B, localhost main net, etc.\nWe're gonna say Okay, chain ID\nmorass will do your Morales\nchain ID, comma, we'll say what\nelse do we need? We did the\nchain ID, we're gonna skip\ndescription, a sync historical.\nSo hit sync historical allows\nthe node to go back throughout\nthe blockchain, grab all the\nevents ever emitted by that\ncontract. Since this is a very\nsmall local blockchain will just\nsay sync historical is true.\nLike that. Okay, what else do we\nneed? Okay, we need the topic,\nthe topic is going to be your\nevent information. So to get the\ntopic, go back to our event\ncode, and the topic is just\ngonna be the name of the event,\nplus the type of the parameters.\nSo we're gonna go back to our\ncode, we're gonna go back to\nhere, we're gonna say, topic is\ngoing to be item listed, and it\ntakes an address, an address, an\naddress, you went to 56, and a\nUNT 256, address address, you\ninterviewed six, YouTube and\nsix. Those problems seem like\nthat, we also need the API of\njust the event, which again, we\ncan find we go back to our hard\nhat project, we go to artifacts,\nwe go to contracts. And if the\nmarketplace dot soul NFT\nmarketplace dot JSON, our ABI\nstarting from here is going to\nbe the ABI of the whole\ncontract. And we just want that\nitem listed event. So we did\nCtrl F, and we found it here.\nAnd we're going to grab from\nright after it says type event,\nwe're going to copy we're going\nto scroll up to write up to\nanonymous false, right, so this\nbit describes the ABI of the\nevent. So we have internal type,\naddress, name, seller type,\naddress, and if T address token\nID price item listed, right, so\nthis is going to be the ABI of\nour just our item listed event,\nwe can take that and we just\nstick it in here, hit save, and\nmine auto format it to get rid\nof the parentheses. Okay, what\nelse do we need, we have the\ntopic, we have the ABI, we\nalready have the address, we're\nnot going to do a filter. And\nthen we need a table name. So\nwe're going to do a new line,\nwe'll say table name, it's going\nto be item listed. And this is\ngoing to be the name of the\ntable that we update in our\ndatabase. So we're gonna get a\nnew table in here called item\nlisted, and it's just gonna be\nfilled with information about\nthe item listed event. And\nthat's it right and we would hit\nconfirm if we were doing this on\nthe UI. And since we're doing\nhere, we'll just hit save, this\nis one of our events, we want to\ndo this for all of our events.\nLet's do it now for item bought.\nSo we'll say let's, item bought\noptions, equals and we'll repeat\nthe process, some of the stuff\nat the top is gonna be the same,\nthe chain it is gonna be the\nsame sync historical is gonna be\nthe same. So we can just grab\nthose two, paste them down here\nfor item, but the topic is going\nto be different. The topic is\ngoing to be item bot is the name\nof the event, it's going to take\nan address, an address, a un 256\nand a un 256. The ABI is going\nto be different. Once again,\nwe're gonna go to our Hardhead\nNFT marketplace, we'll look for\na bot, you'd find this event\nhere. We'll copy this, go back,\nwe'll paste it in here, we now\nhave item bot, we'll give it a\ntable name of item bot. And then\none more then we have let item\ncancelled options equals and\nwe'll do chain ID that's going\nto be rouse chain ID gonna be\nthe same boilerplate from the\ntop address. Contract address\ntopic is going to be different.\nThe topic for this it's called\nitem cancelled, and it takes an\naddress, an address and a UNT\n256 will say sync. Historical\nwill be true, historical is\ntrue. And then we need the ABI.\nOnce again we can go back to our\nhard hat, compile information we\ncan look for item cancelled,\ngrab that ABI of that event.\nCopy that. Come back to our\nrunning code pasted in. Oops and\nI didn't give item canceled.\nLet's give item canceled the\ntable name, which will be item\ncanceled. So now if I zoom out\njust a hair, I now have item\ncancelled options, item bought\noptions. And item listed options\nare telling Ross Hey, listen for\nthese events, whenever you hear\nan item canceled event, stick\nall this stuff into a database.\nWhenever you hear an item bought\nevent, stick all this in a\ndatabase, whenever it emits an\nitem listed, stick all this in\nin a database so that we can\nread from it. So we're indexing\nthese events so that we can\nquery them much easier. Now to\nsend them up to our our server\nwill say const listed response\nequals await or Alice or Alice\ndot Cloud dot run, watch\ncontract event will pass the\nitem listed options. And then\none more comma, and then we pass\nan object in here where we're\njust gonna say use master key is\ngoing to be true. And we'll do\nthe same thing we'll say const\nbot response or passing the bot\nitem options. So we'll say bot\nresponse equals await or else\ndot Cloud dot run, watch\ncontract, event, comma, item\nbought options. Comma, use\nmaster key that's going to be\ntrue. And then finally Kant's\ncanceled response equals await\noralis dot Cloud dot run, watch\ncontract event, comma, item\ncanceled options, comma use\nmaster key is going to be true.\nNow this Morales dot Cloud dot\nrun API call to our server that\nwe're making is going to return\na response. And let's look at\nthe docs to actually see what\nthat response looks like if it\nworked out. Well. In the\nterminal, you'll see success\ntrue. So this is the return\nwe're getting from the API. So\njust to make sure everything\ngoes well, I'll do an if listed.\nresponse dot success, we're\ngetting that success object from\nthe rails server, we'll just do\na console dot log success\ndatabase updated with watching\nevents. And then else we'll say\nconsole dot log, something went\nwrong with a duck. And of\ncourse, we're not just looking\nfor let's say response dot\nsuccess to be true. We also want\ncanceled response that success\nand bots response\nis successful. Then say hey, you\ndid it. Otherwise say hey,\nsomething went wrong. So this is\nhow we're going to\nprogrammatically tell our server\nour database to listen for\nevents. So we just do await\nMurata Clodagh, run, watch\ncontract events, we pass it this\nobject with all these parameters\nand flags in there. And then\nthat's it. And then we can send\nthem is because I put next\npublic Morales server URL. And\nin my DMV, I just have next\npublic server URL. So let's\nchange the name here. Looks like\nour server URL was wrong. And\nour app ID name is also wrong.\nSo let's fix that next public\napp ID master key looks correct.\nOkay, cool. So let's know things\nright? More Alice, like cada\nrun, Rasta cloud run, when we\nrun this in our database, if we\nhit refresh, right now, we don't\nsee those tables in here. But\nonce we run this, add events.js,\nwe should call our server and we\nshould tell it hey, you need to\nadd these tables. And you need\nto start listening for those\nevents. So in a new terminal,\nwe're going to run this add\nevents such as, so I'm going to\nmake the terminal nice big. And\nthis is where if something goes\nwrong, it can be a little\nfrustrating to figure it out how\nto fix this. So if you run into\nan issue here, if something's\nnot working as expected, please\nuse the GitHub repo associated\nwith this course. And also the\nMorales forum is here for you,\nand Stack Exchange Etherium. So\nwe're going to run Node, add\nevents, dot j s, and we'll hit\nenter. Okay, boom, now we see\nsuccess database updated with\nwatching events. Now, if you ran\ninto an issue, and you rerun it,\nand it gets something went\nwrong, there's a chance that it\ncould still be correct, right,\nbecause it returns false. It\nreturns that there's an issue if\nany of these already have the\ntable in there. So if we go back\nto our database here, and we hit\nrefresh, I can now see item\nbought, item canceled and item\nlisted in my database. And\nagain, you can see them by\nhitting the drop down on your\nserver and hitting dashboard. We\nalso see event Sync Status. And\nthis is how our database knows\nthat it needs to be listening\nfor some events, and it's got\nall the information about how to\nlisten for our events in here.\nSo cool. So now we are listening\nfor events. This is fantastic.\nSo now what this means is our\ndatabase is now listening To our\nblockchain node, and it's\nlistening for events in here\nit's listening for these item\nlisted item bought item,\ncancelled events. So let's go\nahead and test this back in our\nhardhat NFT marketplace Free\nCode Camp window. We have some\nscripts in here. One of them is\nmint and list. So we went to New\nNFT. And we listed on the\nmarketplace when we list an NF\nT, well, our mirallas database\nshould hear that item listed\nevent and go ahead and stick it\ninto this item listed table that\nit made. So for us to test this\nout, let's open up our terminal\nin our Hardhead NFT marketplace\nrepo. And we'll run Minton list\nfor our localhost before we\nactually run it, just be sure\nthat our hard hat node is synced\nup with our Morales server in\norder for your database to\nactually grab that event. Your\nlocal hard hat node needs to be\nconnected. So we'll do yarn,\nhard hat run scripts, mint and\nlist.js dash dash, network\nlocalhost. Let's enter. Okay,\nminting, approving listing\nlisted now if we flip back to\nour database, after a quick\nrefresh, what do you know, we\nsee that there's an indeed an\nitem listed events in our\ndatabase, we can see information\nabout a tool we can see there's\na block hash, a timestamp, we\nsee the token ID that was\nlisted, we see the price of the\nlisting the transaction hash, we\nsee all this information about\nour event. And now it's in this\ndatabase for us to query. So if\nyou have reached this point, you\nhave successfully set up an\nindexer with the Morales\ndatabase. And you should be\nsuper pumped because this is\nreally powerful. And now we're\ngetting advanced, we're starting\nto do some advanced stuff. So if\nyou've made it this far, huge\ncongrats. This is already really\ncool. Now, some other\ntroubleshooting help here that\nI've run into many times myself,\nlet's say I've left this\nproject, and I've killed my\nheart hit note, I'm going to\nkill it right now. If I stopped,\nmy heart had node and I come\nback to my Morales admin, I'm\ngoing to view details dev chain\nproxy server, I'm now\ndisconnected. And if I hit this\nlittle refresh, I'm disconnected\nof course, because I'm not\nrunning my heart headnote\nanymore. If I restart my node,\nmy note is now restarted. My\nconnects local dev chain command\nis still running. If I re fresh\nit, it'll now say connected,\nwhich is great. However, if I go\nback to my blockchain, or if I\ngo back to my hard hat, NFC\nmarketplace script, I run yarn,\nhard hat script, mint and list\nagain, network localhost, I go\nback to my database now, and I\ndo a refresh, we don't see that\nitem listed in here. So our\nmirallas server is looking to\nmake sure that that the\nblockchain we're working with is\nthe same one. So if we reset our\nblockchain, like we did, right,\nwe canceled it and we reset it,\nour database is gonna get really\nconfused. So what we have to do\nis we have to hit reset local\nchain, reset local chain, we\nwant to make sure that our new\nlocal chain is running, and that\nwe're connected here. So we'll\nhit reset local chain, and this\nwill tell them Ross, hey, we\nreset the chain, it's okay,\nplease continue doing so. And\nonce we hit reset local chain,\nwe're not going to see that item\nlisted in here. However, if we\ngo back, and we rerun mint and\nlist network, local host with\nthis reset local chain. Now, if\nwe go back to our Morales\ndatabase, we hit refresh, we now\nsee that new one has gotten in\nanytime you stopped your hard\nhat note, anytime you reset your\nhard hat node, the takeaway is\nyou're going to need to go to\nView Details dev chain proxy\nserver and reset local chain.\nNow you can do that\nprogrammatically as well, we're\nnot going to go over how to\nprogrammatically do that. But\nthat might be something you want\nto add to your hard hat deploy.\nThe other thing to note is that\nit didn't clear out our last\nevent, right, the last event.\nAnd if I go one minute and list\nagain, after completes, we'll\nhave another event in here.\nOkay, this is great. So all of\nthis is being said, the reason\nwe're doing all this in the\nfirst place is so that in our\nindex.js we can start listening\nfor events. How do we show the\nrecent listen entity. So now we\nhave a database of listed\nentities. So what we could do,\nwe could just query this item\nlisted table right and grab\neverything in here. However, we\nhave an issue here, what happens\nif someone buys an NFT, if\nsomeone buys an NF T, the item\nlisted event will still be in\nour database. But technically it\nwon't be on the marketplace\nanymore. It'll be gone, it won't\nbe listed. So what can we do,\nthere's a number of\narchitectural choices we can\nmake to get around this problem\nto solve this problem. But one\nof the things we can do is\nactually we can use mirallas\nCloud Functions. So Morales\ncloud functions allow us to just\nreally add anything we want our\nfront end to do from the morale\nserver. And these are functions.\nThese are scripts that are going\nto run on a morale server\nwhenever we want them to. So we\ngo to our server hit the little\ndrop down and we hit Cloud\nFunctions. Now this is where we\ncan write somewhere else stuff\nto run on our server whenever we\nwant. And we are going to set up\nour Cloud Functions in our IDE\nby hitting this little drop done\nto actually sync up our Visual\nStudio code with our Cloud\nFunctions, we can just run this\ncommand here, and it will add\nwhatever cloud functions we have\nin some cloud folder to here. So\nwhat we can do back in our VS\ncode, let's make a new folder,\nnew folder called Cloud\nFunctions. And in here, we'll\ncreate a new file called Update,\nactive items.js. So in here, if\nwe were to write something like\nconsole dot log, hi, we can\nactually have this automatically\nsaved on a morale server. And\nthe way that we do this is by\nrunning this command. Now, we\nwant to make it so that it's a\nlot easier for us to run this\ncommand than just always having\nto run this massive thing. So\nwhat we're going to do is we're\ngoing to open up our package\njson, and we're going to make\nanother Morales script here,\nright below here, we're going to\nmake another Morales script,\nwe're gonna say Morales Morales\ncloud, and we're going to have\nit, run this command. So we're\ngoing to copy this command here,\npaste it into our package json.\nSo it's going to be Morales\nadmin CLI, watch cloud folder,\nwe don't need the Morales API\nkey, because it'll grab that\nfrom our environment variables.\nWe don't need them rouse secret,\nbecause it'll grab that from our\nenvironment variables, we do\nneed the morale subdomain\nautosave one. And then the\nMorales cloud folder is going to\nbe that new Cloud Functions bid\nthat we made that slash cloud\nfunctions, functions. Now, in a\nnew terminal, if I run yarn,\nmore Alice cloud, which is going\nto be same as running this huge\nfunction here, I hit enter,\nit'll say compile, you know,\nversion, blah, blah, compiling,\nblah, blah, changes uploaded\ncorrectly. And if we go back to\nour front end, we can see this\nconsole dot log ky and our front\nend being updated. And if we\ncontinue to run this in our\nupdate active items at Jas, we\ncould also write console dot\nlog, you'll save it. And if this\nis still running, it'll\nautomatically upload it. And now\nwe can see if we do a little\nrefresh on our front end Cloud\nFunctions, we can see it's been\nuploaded here. Now at this\npoint, if you have a ton of this\nstuff running, you might see CPU\n100 percent, you might see this little\nthing pop up and the server\nmight start going a little bit\nslower, we're starting to use a\nlot of network activity here. So\nI'm going to close my yarn\nMorales cloud for now. And I'm\njust going to upload it once\nwhen I need to. Because we're\nconnected, we have it listening\nto events, we're having it doing\nmore and more stuff here. And it\ncan start to put a lot of load\nonto the server. So we're just\ngonna go ahead and we're going\nto cancel that out. And now the\nCPU is a lot lower. But if we go\nback to Cloud Functions, we can\nsee it's still in here. And\nanytime we update our Cloud\nFunctions, it'll update our\nserver with those cloud\nfunctions. And we'll just run\nthat darn morass cloud once\nwe're all done here. Anyways, so\nright now we're trying to figure\nout, Okay, we have item listed,\nbut if someone buys an item,\ntechnically, it won't be listed\nanymore. But our item listed\ntable will still have it listed.\nSo what we can do is we can\ncreate a Cloud Function that\nruns whenever we want. And like\nI said, we can have these run\nwhenever we want. We can call\nthese whenever we want. But\nwe're going to create a Cloud\nFunction that only runs.\nWhenever one of these events are\nsynced item listed item\ncancelled or item bought, we're\ngoing to create a new table\ncalled active item, an active\nitem is going to say, okay,\nanytime it's listed, it will be\nactive, but when it's bought or\ncancelled will remove it from\nthe active item list. So we're\ngoing to create a new table. So\nlet's go ahead and do that. We\nstarted off with more Alice\nthought. And then if you're IT\nauditors that you don't need\nthis, we don't need to import\nMorales here, because we're\ngoing to upload it as a Cloud\nFunction. And our server already\njust automatically injects\nmirallas into our scripts. So\nwe're gonna say Morales dot\ncloud, that after save, and\nthere's a whole bunch of stuff\nyou can do with your Morales\ncloud. And again, you can find\nthese all in the documentation.\nThe after save keyword means\nthat anytime something gets\nsaved on a table that we\nspecify, we'll do something. And\nit takes two parameters. So it\ntakes what table that we want to\ndo something after it's saved.\nAnd we're gonna say item listed.\nSo we're saying anytime\nsomething is saved to the item\nlisted table, we'll run some\nasync function.\nAnd we'll put request in here.\nBecause anytime something gets\nsaved, it comes with a request.\nSo anytime an item listed\nhappens, we want to add it to\nour active items list. And our\nrequests come with this is\nflagged called confirmed. So\nwe'll say const confirmed\nbecause every request, every\nevent actually gets triggered\ntwice. So once a transaction\ngoes through, it triggers a save\nand then once again, once that\ntransaction is actually\nconfirmed, we actually only want\nto update our active item when\nthe transaction is actually\nconfirmed. So we'll say const\nconfirmed equals request dot\nobject dot get confirmed.\nScreening, get the confirmed\nattribute from that request. And\nthen we're also going to make A\nlogger will say const logger\nequals oralis dot Cloud dot get\nlogger. And you'll see why in a\nsecond, we can actually write\nlogs to our Morales database\nwith this logs thing. So any\nlogs we can add into here, and\nI'll show you that in a minute.\nSo console logger Morales dot\ncloud, get logger. And then\nwe'll just do logger dot info.\nLooking for confirmed x, and we\ncan actually test this right\nnow. Right, we can actually test\nthis right now. In our logs. We\nshould see looking for confirmed\nTX Once an item listed and saved\nnow to test this out just to\ntest that our logger is actually\nworking. Let's run yarn, yarn\nRoss cloud just update active\nitems to our to our morale\nserver changes uploaded\ncorrectly. Okay, we'll kill it\nnow. And now in our where we\nhave our Minton, lists script.\nLet's run Minton list. And we\nshould see on our server we\nshould get those logs. Now if we\ngo to our server, we do a little\nrefresh here. And if we look at\nour logs now we can now see\nlooking for confirmed TX in our\nserver logs. Now in our logs.\nHere we see we only see that\nlooking for confirmed TX once\nand I just told you, it actually\ntriggers twice once when the\ntransaction is first sent. And\nthen once when the transaction\nis confirmed, aka has block\nconfirmations. And additionally,\nif we look in our database at\nthe item listed, and we scroll\nall the way to the right, we can\nsee confirmed equals false. So\nwe only want to count this item\nlisted event interactive items\nwhen confirmed is true. So what\nwe want to do actually is we\nwant to update our scripts to\nadd one block confirmation on\ntop of our local Hardhead\nblockchain so that these can be\nchanged to confirmed now to get\naround this. What I usually will\ndo in my mentalist script is\nI'll add a new utility. So I'll\ngo to my utils, I'll do new\nfile, and I'll create a move\nblocks.js. And this will be a\nutility that I use to actually\nmove the blocks. So when we run\nour own heart hat node, we\nactually have complete control\nover what we want our heart hat\nnode to do. So what we can do is\nwe can actually manually mine\nnodes and actually move blocks\nahead so that Morales knows Oh,\nokay, this transaction is\nconfirmed, right, because we're\nmining the block with the\ntransaction. And that's it, and\nRoss is just going to forever be\nwaiting for the next block. So\nwe want to add some\nfunctionality to our scripts,\nwhere we just mine a block after\nit's done. Now, keep in mind\nthat if we mined like 1000\nblocks or a ton of blocks really\nquickly, Moorehouse might have a\nhard time indexing that. So we\nreally want to just mined one at\na time and give me enough time\nto index each block that we\nmined. So we're actually going\nto build a little script, we're\ngoing to manually mine using\nthis EVM mine RPC method that\ncomes with our heart hat\nblockchain. So we have this new\nmove blocks script. And let's go\nahead and make this. So instead\nof this being our script, we're\ngoing to have like a main\nfunction at the bottom, we're\njust gonna have this be a\nutility that we're going to\nimport into other scripts. So\nwe're not going to need a main\nfunction here, we're just going\nto need to make this an async\nfunction. And we'll call it move\nblocks. And then we'll say\namount, which is going to be the\nnumber of blocks, we want to\nmove, we'll also put a sleep\namount and default it to zero,\nthis sleep amount is going to be\nan optional parameter. If we\nwant to move blocks and sleep\nmaybe a second between blocks to\nresemble a real blockchain, we\ncan have that in here too. So we\ncan have it resemble a real\nblockchain by sleeping every\ntime a block is moved or just\nkind of waiting every time a\nblock has moved. So in our move\nblock scripts, we'll do console\ndot log, moving blocks, dot that\ndot, and we'll say for let index\nequals zero, and we'll do a for\nloop around the amount and call\nthat EVM. Mine in this for loop\nindex is less than amount index\nplus plus a weight network. And\nthen we got to import network\noops, we got to import network\nfrom hard hat here, await\nnetwork dot provider dot\nrequest. And then we're going to\nrequest the method e v, mime,\ncomma params are going to be\nempty. And this is actually the\nsame way we can make raw calls\nto our blockchain nodes. We\ndon't do a lot of this because\nethers abstract this under the\nhood, but we're making a raw\ncall to EVM mine. Obviously, you\ncan't call EVM mine on a real\nblockchain because you can't\njust tell a blockchain node to\nmine the next block. Since this\nis our local hard hat node, we\ncan call the VM now we're gonna\nsay if sleep amount is greater\nthan zero, or just if sleep\nmount, then we're also going to\nhave this script sleep or wait a\nshort duration. So up at the\ntop, we're actually going to\ncreate a new function called\nsleep, which is going to input a\ntime in milliseconds. And this\nis going to return a new\npromise, right? Because\nremember, in order for us to\nwait for some time we got to use\npromises, which we've learned\nbefore. And this promise is\ngoing to take a function with\nresolve as an input parameter.\nAnd we're just going to say, set\ntimeout is going to be resolve,\ncomma, time in Ms. So the way we\ncan sleep in JavaScript is we\nreturn a new promise. And we\njust call this set timeout\nfunction, which basically just\nweights the time in\nmilliseconds. Now to actually\nsleep. We'll say console dot\nlog, sleeping for sleep amount.\nAnd then we'll do await, sleep,\nsleep amount, and this is going\nto be in milliseconds. So since\nsleep returns a promise, we can\ncall it with await to say, okay,\nwait for this sleep function to\nfinish. And the sleep function\nis only going to finish when the\ntime in MS in time in\nmilliseconds finishes. So now we\nhave a function called move\nblocks, which will actually\nmined blocks on our local\nblockchain, so that Morales can\nget that block confirmation that\nit's looking for now at the\nbottom, we'll just do module dot\nexports, move blocks, move\nblocks, and then we'll also\nexport sleep as well, because\nwhy not? Equals like that. Now,\nwhat we can do back in our\nMinton list, up at the top,\nwe'll say const, move blocks\nequals require dot dot slash\nutils slash move blocks. And\nthen we'll also import network\nfrom ethers network. And the\ndown in our script. Just right\nat the bottom, we'll just say if\nnetwork dot config, that chain\nID equals equals 31337 await,\nmove blocks, we'll say we'll\nmove to blocks and then we'll\nalso do sleep amount equals\n1000. We'll wait one millisecond\nbetween each block that we\nmined. So sleep mount equals\n1000, which is going to be one\nmillisecond. Now let's even just\ncomment all this out for a\nsecond. We'll just run this\nscript with only this live.\nRight we'll pull this up the\nyarn hard hat, run scripts,\nmentalist dash dash network,\nlocal host, we'll just move the\nblocks move back to our front\nend, we'll refresh, we'll go\nlook at item listed. We'll\nscroll all the way to the right,\nand now we see confirmed is\ntrue. And now if we were to look\nin our logs, we would see that\nlogging item happened twice.\nAlright, so Let's uncomment this\nand continue. Now that we have\nthis now that we're learning\nabout logging, now that we're\ndoing all this stuff, we can say\nIf confirmed, we're going to do\nsome stuff. If confirmed, we're\ngoing to create a table called\nactive item and add this to the\nactive item table. So we're\ngoing to do a little logger dot\ninfo bound item. And we'll\ncreate a new table and a new\nentry in this table. So we'll\nsay const active item equals\nmore Alice dot object dot extend\nACC active item. This we're\nsaying if active item exists,\ngreat grab it if not create it.\nSo we're going to create this\nactive item table if it doesn't\nexist, if it does exist, great,\ngrab it. And we're going to say\nconst active item equals new,\nactive item. So we're going to\ncreate a new entry in this\nactive item table that we're\ncreating. And we'll say active\nitem dot set. And we can set any\nof the columns we want for this\nnew table that we're creating.\nSo let's give it a marketplace\naddress column. So we'll say\nmarket place address. And this\nwill come from the request dot\nobject dot get address all of\nthese requests from events come\nwith the address that they're\ncoming from, which for us is\ngoing to be the marketplace\naddress, we'll do active item\nthat set and if T address which\nthese events saved come with all\nthe parameters of our event. So\nwe'll say request that object\ndot get NFT address will get the\nprice will say active item dot\nset price is going to be request\ndot object dot get price will\nget the token IDs will say\nactive item dot set token ID\nrequest dot object dot get token\nID and then we'll get the seller\nwill say active item dot set\nseller is going to be request\nthat object dot get seller. So\nwe're getting all of this\ninformation from our event. And\nthis event update from Ross\nautomatically always comes with\nthe address that the event was\nomitted from. So we're gonna\ngrab all that we're going to\ncreate this active item table.\nWe're going to add all these\nrows. We're going to add this\none row with all these columns\nin it. Awesome. Now we'll just\ndo logger dot info just to do a\nlittle print out. We'll say\nadding address. We'll do a\nlittle string interpolation\nwe'll say request dot object dot\nget address period token ID with\nrequest dot object dot get token\nID. And I need to close this off\nhere, better. And then outside\nof the logger dot info, we'll\njust say logger dot info,\nsaving. And then we just run\nawait active item dot save. And\nnow we have cloud function\nthat's going to create a new\nentry in a new table called\nactive item anytime item listed\nhappens. So after item is called\nthe trigger for our cloud\nfunction, and there are a whole\nbunch of different triggers for\ndifferent Ross Cloud Functions.\nIf you go to the Morales docs,\nwe look for trigger, we can find\na list of all these different\ntriggers in here, like after\nsave for Save. After save,\nbefore delete, after delete,\nbefore save file, there's all\nthese different triggers to\ntrigger this cloud code. Now, if\nwe upload this new script to our\nmorale server with yarn morass,\ncloud changes uploaded\ncorrectly, okay, great, we'll\nkill it. Let's go to our cloud\nserver, do a little refresh just\nto make sure that it's not still\nprocessing that update. Okay,\nCPUs low enough. Okay, great.\nNow in our database, we don't\nsee an active item table in\nhere. But if we go back to our\nHardhead script, and we call\nmint and list, since now we have\na Cloud Function that says okay,\nanytime an item listed event\nhappens, update that active item\ntable, we should see active item\nupdate. So let's run this. And\nremember for all of this, we\nneed to have our heart head node\nrunning connected to Hardhat.\nAnd if we reset our local chain,\nwe need to click that reset\nlocal chain button. So we went\nahead, we ran this. Now if we go\nback to our database, we give it\na little refresh. And right now\nI actually don't see anything.\nSo if I go to my logs go to\ninfo, I can see any errors or\nissues in here. So it looks like\nafter save failed for item\nlisted for user bla bla bla,\nlooks like there is an issue\ncannot read properties of\nundefined reading extend. And\nthat's also in the info, I made\nan issue. I didn't quite write\nall my code, right. And if we go\nback to our update active item,\nI can see where I messed up. It\nshould be Morales dot object\nwith a capital O dot extent. So\nwhat I'm going to do, then run\nyarn morass cloud again, now\nthat I have this correct, we're\ngoing to cancel that, we're\ngonna run our mminton list\nagain, now that we've fixed our\nscript. And now that we've fixed\nour script, go back to our\ndatabase, we'll give it a little\nrefresh, I can now see we have\nan active item entry in\nhere. Now at this point, there\nare going to be times when you\ndon't want to leave and go get a\ncoffee, right, or go to the\nbathroom or go get some food.\nAnd you're going to want to stop\nyour terminals from running. So\nlet's actually practice\nrestarting everything and re\ngetting into this local\ndevelopment environment. Because\nit can be a little weird and a\nlittle tricky. So let's practice\nthis. So once again, let's come\nover here. And what do we need\nto do? Well, we're going to Ctrl\nC, we're going to kill our\nblockchain Ctrl C, we're going\nto kill our connection to our\nMorales server. And if we're\nrunning a front end Ctrl C, that\ntoo, now if we go to our server,\nwe go to view details. Dev chain\nproxy server, if we hit status,\nthis reset button here will\nstill we will be disconnected\nnow. And now everything has been\ndisconnected. Now if we want to\nrestart everything, if we're on\nour heart hat NFT marketplace\nwill run yarn Hardhead node, and\nthat will spin everything up\nagain, we'll run yarn Morales\nsync to sync back with our\nroutes connection, we can go\nback to our server will do view\ndetails and we should be\nconnected now. Connected. Since\nwe restarted our local\nblockchain, we now need to\nremember to do reset local\nchain, we'll go ahead and run\nthat. Great. If we want to\nrestart our front end, we can\nrestart our front end like so\nnow the thing is, our database\nwill still have even when we\nrefresh it even though we reset\nthe local blockchain, it'll\nstill have all this stuff in it.\nNow these entries in here are\nentries from a blockchain that\nno longer exists. So what I\noften will do is I'll click this\nbutton up here, and we'll just\ndelete all rows in this class.\nTo confirm we do active item,\nread the name of the table. And\nlet's do it for item listed too.\nWe'll select that edit, delete\nall rows, item listed. Yes,\ndelete. We'll do a little\nrefresh. Now everything is\nzeroed out here. Now we have an\nempty database for these events\nin our after save here. And now\nthat we've added that little\nweight in our script, let's go\nback to our hard hat NFT\nmarketplace, we'll run yarn, RT\nhat, run scripts, mint and list\ndot j s dash dash network, local\nhost. This will mint it approve\nit listed and then we mined two\nblocks to give Morales time to\nindex our event and then on a\nmorale server. We go ahead and\nrefresh we now see item listed\nas one and active item is One\nall at the same time. So that is\nhow we're going to make sure\nthat Morales always indexes\nwhenever we call a function,\nwe're just going to mind one\nadditional block to tell Morales\nHey, that transaction has indeed\nbeen confirmed. So really\nexciting. And we got to practice\nclosing and restarting and doing\nall that good stuff, too. So now\nthis is fantastic. Now that we\nhave this additional\nfunctionality to make it a lot\neasier for someone else over\nokay, awesome, we can check\nactive item. Well, we're not\nquite done yet, right? Because\nwhat if somebody buys an NFT, or\nsells an entity we should have\nactive item be removed? Right,\nright now there's one item\nlisted in one active item. But\nif we buy an item, active item\nwill still show that that item\nis active. So let's go ahead and\nlet's update our cloud function\nto also say, okay, anytime an\nitem is bought, we remove that\nitem from being active. So let's\ncreate another after save. Let's\nfirst built this for canceling\nthe item. And then we'll build\none for buying the item. So to\nmake another after save to make\nanother trigger, we'll say\nmirallas dot Cloud dot after\nsave, we'll say item cancelled.\nAnd this will be an async\nfunction that takes the request\nas an input parameter again, and\nwe're going to do the same\nthing. We're gonna say const\nconfirmed equals request that\nobject dot get confirmed, we'll\nsay const. Logger equals routes\ndot Cloud dot get logger, like\nso. And then we'll do logger.\nOops, lowercase L. And then\nwe'll do logger dot info,\nmarketplace, the little pipe\nobject and then just request dot\nobject. And then we'll do the\nsame thing. If confirmed. If\nthis transaction is confirmed\nafter one block, we're going to\nremove it from active item. And\nwe're going to be using a query\nto first find that active item\nthat's getting cancelled. And\nyou can learn more about basic\nqueries in the Morales\ndocumentation here. So we're\ngoing to get that table by\nsaying const active item equals\nmore outlets that object for the\ncapital O object dot extend\nactive item. And we're going to\ncreate a new query. So we're\ngoing to query our table before\nwe actually set or save\nanything. So we're gonna say\nconst, query, query equals new\nMorales dot query of active\nitem. So we're going to query\nour Morales database to find an\nactive item that's in there,\nthat's going to match the\nrequest here, so we can cancel\nit. So we'll say query dot equal\nto\nmarketplace address, comma\nrequest that object dot get\naddress, we're looking for an\nactive item where the\nmarketplace address is going to\nbe the same as the address of\nthe item cancelled. We'll say\nquery dot equal to NF T address,\ncomma request dot object dot get\nan F T address will say query\ndot equal to token ID, comma\nrequest dot object dot get token\nID. And that should be it right?\nSo let's look again at our\ncontract here. And what is the\nitem canceled give us it gives\nus a seller NFC address and a\ntoken ID seller and ft address\nand a token ID. And we're\nlooking for NFT address and the\ntoken ID, we don't need to look\nfor the seller, we just need to\nlook for these two. And then of\ncourse, the marketplace address.\nSo great. So now that we have\nthose two, we can say logger dot\ninfo, and then we'll just print\nout marketplace type query. And\nthen we'll just print out this\nquery that we're running. And\nthen we can say const, cancelled\nitem equals await query dot\nfirst, we're going to find the\nfirst active item in the\ndatabase that has the same\nmarketplace address and a T\naddress and token ID that just\ngot cancelled. So we're going to\nfind that first cancelled item.\nWe'll do a little bit more\nlogger information, we'll say\nlogger dot info, marketplace,\npipe, cancelled item. And then\nwe'll just do some string\ninterpolation. And we'll print\nout that canceled item.\nCancelled item and we'll say if\ncancelled item. So if the query\ndoesn't find anything, it'll\nreturn undefined. So we're\nsaying if cancelled item which\nwill return true if it found\nsomething. So if cancelled item,\nthen we're gonna say logger dot\ninfo. Deleting and then we'll do\nrequest dot object dot get token\nID at address, request dot\nobject dot get address address\nspace since it was canceled, so\nwe're going to do a little print\nlittle logging here. Take the\nleading that thing since it was\ncanceled and then we're going to\nrun a wait canceled item dot\ndestroy and that's when we\nremove it from the active item.\nAnd then we'll just say else.\nLogger dot info, no item found\nwith address, request dot object\ndot get address, and token, Id\nrequest dot object, dot get\ntoken ID. So cool. So now we\nhave this after save here, it\nlooks like my terminal\nautomatically added this require\nin here, which we don't want. So\nI'm just gonna go ahead delete\nthat. We can upload this to our\nMorales server by running yarn,\nMorales cloud and great changes\nuploaded correctly. And now to\ntest this test that this is\nworking, let's create a new\nscript in our hard hat NFT\nmarketplace called cancel item.\nSo we'll go to scripts right now\nwe have mentioned list, we'll do\nnew file, we'll call it cancel\ndot Jas. We'll do cancel item,\nJas. And this will be a script.\nSo we're going to use that that\nmain thing here, but we're going\nto call our function cancel. So\nwe'll do async function cancel,\nand then at the top, we'll say\nconst token ID equals Now let's\ngo to our active item list. And\nlet's find a token ID that's in\nhere. Okay, token ID zero. And\nso we'll use this as the token\nID that we want to delete. So\nwe'll use token ID zero. So in\nour cancel item.js script, we'll\nsay const token ID equals zero\nand let's cancel it. So we'll\nsay const NFT. Marketplace\nequals await ethers dot get\ncontract. And yes, const ethers\nequals require hardhat. And ft\nmarketplace will say const basic\nNF t equals await ethers dot get\ngets contract. Basic NF team do\nconst TX equals await NF T\nmarketplace dot cancel listing\nbasic NF T dot address token ID.\nAnd we're going to call cancel\nitem should be cancelled listing\nwe call the cancel listing. So\ncancelled listing Yep, like\nthat. And it takes the address\nof the NFT and the token ID. So\nthe basic NF T dot address and\nthe token D Okay, great. And\nthen we'll do a weight TX dot\nweight one. And then we'll do\nconsole dot log NFT cancelled.\nAnd then we'll say if network\ndot config dot chain ID equals\nequals 31337. We'll go ahead and\nwe'll do a wait move blocks to\ntwo and then we'll say sleep.\nMount equals 1000. And then\nwe'll just say const. Move\nblocks equals require dot dot\nslash utils slash move blocks.\nOkay, cool. That looks really\ngood. So let's go ahead and run\nthis yarn hardhat run scripts\ncancel item.js dash dash\nnetwork, local host and ft\ncancelled moving blocks\nsleeping. Okay, great. Our node\nis running. Awesome. We're\nconnected to our mirallas we've\nuploaded our cloud function with\nyarn Morales cloud. Now if we go\nback to our database, do a\nlittle refresh. Looks like I\nhave an issue here. I go to my\ninfo it says after save failed\nfor item Cancel for user blah\nblah, blah. Here's the login\ninformation. Morales dot cloud\napt get latar is not a function.\nUh huh. Well, that makes a lot\nof sense. Get water. Let's do\nlet's make this get logger.\nShall we get logger to let's re\nupload them. Changes uploaded\ncorrectly. And now I'm going to\nhave to manually go to active\nitem I'm gonna have to manually\ndelete this one will have a\ndelete this row. Yes, delete, do\na refresh. And the reason I have\nto do that is because it's\nalready been saved. And we're\ndoing an after save. So because\nI messed up. If you spelt that\nright, you probably did, right.\nBut because I messed up, we're\ngonna have to rebuild a new one.\nAnd then delete that new one.\nI'm going to run yarn, hard hat\nrun scripts, mint and list\nnetwork localhost. And we just\nmeant to add a new one. Let me\ncheck the Morales database,\nwe'll do a refresh. I can see it\nin here, I can see it an item\nlisted. It has a token ID of\none. So let's go ahead and\ncancel that now. So I'm going to\nchange my token ID and cancel\nitem to one. And now we'll run\nthat script Barnhardt at run\nscripts cancel item, network,\nlocal host run this NFT\ncancelled moving blocks. Now\nwe'll go to the front end, we'll\ndo a refresh. And we can see\nit's been removed from active\nitem programmatically, which is\ngreat. So this is where these\nlogs can be really helpful. Now\nit can be a little scary to do\nthings wrong on purpose, but\nlearning how to use information\nlike the logging and learning\nhow to debug effectively is\ngoing to make you a lot faster\nof a coder because guess what,\nyou're not going to be perfect.\nYou're going to run into issues\nunderstanding how to use The Log\nUnderstanding how to read the\nerrors is going to make you much\nfaster developer. So now we have\nsomething for cancelled item,\nwe're also going to need\nsomething for what? Well, you\nguessed it for buying the item.\nSo let's make another one of\nthese murales to cloud that\nafter save. And we're going to\nbe using most of this same exact\ncode for item bought that we use\nfor item cancelled, we probably\nshould turn it all into a\nfunction. But for practice,\nwe're just going to go ahead and\ndo it one more time, we'll do\nMorales dot cloud. And then my\nVS code keeps sticking this in\nfor some reason. I'm going to\nundo that Morales dot Cloud dot\nafter save. Item bot is the\nevent. There'll be an async\nrequest little arrow function\nhere, say const confirmed equals\nrequest that object dot get\nconfirmed will get whether this\ntransaction is confirmed. We'll\nget the logger I'm just going to\ncopy paste so I get it right\nthis time. So I'm going to copy\nand paste those two lines const\nlogger equals Morales dot Cloud\ndot get logger logger dot info.\nAnd we'll say If confirmed const\nactive item equals Morales dot\nobject dot extend active item\nconst query and for this query,\nI'm actually just going to copy\nthese lines because this is\ngoing to be exactly the same.\nWe're going to look for the NFT\naddress and the token ID and the\nmarketplace address. And if we\nlook in our NFT dot soul and up\nto marketplace dot som alright\nand bot event as the NFT\naddress. And the token ID which\nis what we want to find are\nlisted and of team. So we'll run\nthat query. We'll do const bots\nitem equals await query dot\nfirst, and we'll do exactly what\nwe did before. If bots item then\nlogger dot info, deleting\nrequest dot object dot get\nobject ID await bought item dot\ndestroy logger dot info deleted\nitem with Open ID request dot\nobject dot get open ID at\naddress request dot object dot\nget\naddress. And then if we don't\nfind it will say else. Logger\ndot info, no item found with\naddress request that object dot\nget address and token, Id\nrequest that object dot get\ntoken ID. Cool. So that looks\ngood. Let's go ahead and upload\nthis to the cloud. So do yarn\noralis Cloud changes uploaded\ncorrectly. Let's go make sure it\nlooks good on our server. So\nwe'll give a morale server a\nlittle refresh. Go to Cloud\nFunctions here. I can see the\nitem cancelled in here still.\nAnd now I can see the item\nbought after save perfect. Looks\nlike I'm at 100 percent capacity. So\nwe're gonna give it a second\njust to cool down thinking give\nit a little refresh and looks\nlike we're back down after our\ncloud function has been\nuploaded. Okay, cool. To test\nout that this part is working.\nLet's go ahead we'll write\nanother script here. Do new file\nby item dot j s. And we'll do\nthe same thing right now. On our\ndatabase. We don't have any\nactive items. So we'll just run\nreal quick. We're on mint and\nlist. Mint a new one. We'll go\ncheck our database we'll do a\nlittle refresh. Looks like\nactive vitamins in here with a\ntoken ID of two now. So we'll do\nis we'll buy that token ID so\nwe'll say const ethers network\nequals require arhats const move\nblocks equals require dot slash\nutils slash move blocks const\ntoken ID equals to async\nfunction by item const NFT\nmarketplace equals await ethers\ndot get contract NF T\nmarketplace const basic NF t\nequals await ethers dot get\ncontract basic NFT coms listing\nequals await and ft market place\ndot get listing basic NF T dot\naddress and the token ID will\nsay const price equals listing\nthat price that to string and\nwe'll say const Tx and this is\nus going to actually buy it\nequals await and ft marketplace\ndot buy item basic n f t dot\naddress, token ID, comma. And\nthen the value of course is\ngoing to be the price. Do await\nTX dot wait one, console dot log\nbots NF t. And then if network\ndot config dot chain ID equals\n31337, then await move blocks to\ncomma, sleep amount equals 1000.\nAnd then this is a script of\ncourse, so we're going to use\nthe same stuff we're using for\ncancel. But instead of\ncancelled, it's going to be\ncalled by item. So we have the\nitem inactive item here, we run\nyarn, art hat run scripts by\nitem.js Dash network, localhost.\nNow we can test buying this\nitem. Okay, Bob, the NFT looping\nblocks, we'll do a little\nrefresh on our database, and\nboom, we can see the active item\nis gone. And we can see, the\nitem has now been bought.\nAwesome. We're almost done\nkeeping our active item, just a\ntable of active items. But\nthere's one more thing we should\ndo. We're not going to test this\nhere. But if you want to test\nit, we can we actually in our\nNFT marketplace, go to\nmarketplace dot Sol, we actually\nhave an update listing function\nas well, that also admits an\nitem listed. So we also want to\ncheck to see if item listed is\ncoming from update listening. So\nback in our item listed Cloud\nFunction, before we actually\nstart saving stuff, we want to\ncheck to see if it already\nexists. So we're gonna say so\nwe'll say const query equals new\nmirallas dot query. And sorry, I\nkeep sticking the sin of active\nitem. And we're going to do\nexactly what we've been doing.\nWe're gonna say query dot equal\nto NFT. Address, we're gonna\nlook for the NFT address request\ndot object dot get and ft\naddress, query dot equal to\ntoken ID, request that object\ndot get token ID, query dot\nequal to marketplace, address,\ncomma request dot object dot get\naddress query dot equal to\nseller requests dot object dot\nget seller will say const\nalready listed item equals await\nquery dot first. And then we'll\nsay if this item has already\nbeen listed. Then we'll go ahead\nand say logger dot info.\nDeleting already listed request\ndot object dot get object ID.\nAnd we'll do a weight already\nlisted item dot destroy. And\nthen do logger dot info, deleted\nitem with token ID request dot\nobject dot get token ID at\naddress request dot object dot\nget address since it's already\nbeen listed, if the object has\nalready been listed, we know\nthat it's coming from this\nupdate listing function. So\nwe're going to delete it first,\nand then we'll resave it with\nits new price. So and let's just\ngo ahead, and let's upload this\nto the cloud yarn Morales cloud.\nupload this to our server\nchanges uploaded correctly.\nLet's go check our server, give\nit a little refresh. We'll go\ncheck Cloud Functions. And it\nlooks like our item listed query\nfor deleting is now in here. But\nwith all that, we now have a way\nto constantly have this active\nitem table only be the items\nthat are actively on our\nmarketplace without having to\nspend any additional gas in our\napplication. And this is going\nto be way better for user\nexperience because they're not\ngoing to have to pay extra gas\nto keep all these entities and\nmaybe an array or some more data\nstructures. If you've made it\nthis far. This is easily one of\nthe hardest parts of this\ncourse, because we're working\nwith a ton of technologies.\nWe're working with a smart\ncontract, we're working with\nCloud Functions, we're working\nwith a back end database. Now if\nyou've made it this far, you\nshould be incredibly incredibly\nproud. So now let's just go\nahead, let's mint and list one\nmore NFT. So we'll do we'll run\nyarn heart at run scripts, mint\nand list network local hosts\nwill meant it will list it or\nsleeping. Let's go check our\ndatabase. We'll do a refresh. We\nsee the active item in here. And\nnow let's learn how to call all\nof the objects in In our active\nitem database here, let's do it.\nAnd remember, if you ever reset\nyour local blockchain, you're\ngonna have to come in here and\ndelete all the rows in the\nsupport tables.\nWith all that being said, it's\ntime to finally come back to our\nfront end, and come back to our\nindex dot J. S and answer this\nquestion. How do we show the\nrecently listed NF Ts, we only\nwant to show the active NF t's\non the marketplace. And now we\nhave a system for getting only\nthe active ones, only the ones\nthat are currently on the\nmarket, because we're indexing\nthese events. Now, I'm going to\ndelete all these comments here.\nAnd let's do this. So what we're\ngoing to do is we're going to do\nthis thing called use Morales\nquery. So if we go to the React\nMorales docks, there is a hook\ncalled use Morales query. And\nthis allows us to fetch and make\nqueries to our database in a\nReact context. Back in here,\nwe're going to say, import, use\nMorales query from react\nmirallas. Now, if you look in\nthe docs here, use mouse query\nreturns data error is loading.\nAnd this will automatically run\nthis query the instant our index\npops up. So to get the data from\nthe query to get all of our\nactive items from our database,\nwe'll say const data, and we'll\nrename data to listed and fts.\nAnd then we'll also check to see\nif this query is still fetching.\nSo we'll say is fetching and\nthen we'll rename that to\nfetching listed NF t is equals\nuse Morales query. And inside\nhere, this takes two input\nparameters, it takes the table\nname to do the search on and\nthen it also takes a function or\nthe query. So the table name\nthat we're going to be looking\nfor is going to be active item.\nAnd then the function for the\nquery is going to be we're going\nto say query dot, we'll limit it\njust to 10. So we'll say only\nthe first 10, we'll do it in dot\ndescending order, based off the\ntoken ID. And then if we wanted\nto do different pages, we could\ndo this thing called dot skip\nwith page numbers, we're not\ngoing to do page numbers here.\nSo we're just going to leave it\nlike this for now. And that's\nit. So we're saying, okay,\ngreat, grab from our database on\nthe active item table, grab just\nthe first 10 in descending order\nof the token ID. Now it's going\nto save the result of this to\nthis listed NF TS section. Now\nto see if this is working. Let's\njust do a little console dot log\nlisted NF t's just to see what\nthis using Ross query actually\nreturns for us. And now we have\nour local blockchain Node\nrunning, we have our connection\nto our Morales server, and we\nhave our front end running. So\nlet's go to our front end, we'll\ndo a little refresh here, we'll\nright click and hit Inspect,\nwe'll go to the console. And we\nsee we have this array being\nspit out here. Now the first\ntime it console dot logs, it's\nempty. This is because when it\ninitially loads listed out of\nT's hasn't returned yet. And\nit's so it's actually just going\nto be an empty array. But when\nit finishes loading, we're going\nto get an array of size one, we\nget an array of size one,\nbecause active item only has one\nenter right now. So we get this\narray of size one, and we can\nsee it index zero, we have class\nname active item, we have the\nitem ID, we have all these\nattributes, which are going to\nbe created at the marketplace\naddress. And if the address the\nprice, the seller and the token\nID this is exactly what we see\nin our database here. So\nPerfect. That's exactly what we\nwant to be able to show these NF\nt's on the front end. So how do\nwe actually show this NFT and\nlist this NF T. For people who\naren't developers and aren't\ngoing to go into the console dot\nlog? Well, what we're going to\nbe doing is in this return here,\nwe'll put some parentheses\naround this. First, we should\ncheck to see if we are fetching\nthose listed NF T's. So we'll do\nsome JavaScript stuff. And we'll\nsay fetching listed NF T's and\nwe'll do a ternary operator. So\nwe're gonna say if we are\nfetching those NF T's, let's add\nlike a little div div that just\nsays loading that that done,\nwe'll put a little colon here.\nAnd if we're not fetching, we'll\ndo we'll say listed NF TS dot\nmap. So dot map basically loops\nthrough and does some function\non all of the listed entities in\nthe function we're going to want\nours to do. And it's going to\ntake each NF t as input\nparameters. So we say we're\ngoing to basically loop through\neach NF T. And we're going to\nsay, console dot log and F T dot\nattribute attributes with an S.\nAnd then inside of these inside\nof this attributes are the\ndifferent pieces that we want.\nSo we're going to get those\npieces we'll say const we want\nto show the price. The NFT\naddress, the token ID in the\nmarketplace address, which of\ncourse is just gonna be this\none, and then the seller, that's\nall this information that we're\ngoing to want to show on the\nfront end will say that equals\nNF T dot attributes. So we're\ngoing to pull these out, and we\ncan see price seller token ID,\netc. We're going to pull those\nout of NF T dot attributes. And\nwe can show those by in this\nfunction here, we'll say return.\nAnd then we'll return some HTML,\nwe'll do like div div. And then\nwe can say like price, price,\nprice,\nperiod, and f t address and ft\naddress, token ID, token ID\nseller, then added this for some\nreason. So I'm going to delete\nthat add $1 signs before all\nthese for some reason, delete\nthose, save. Now if I go to the\nfront end, I can now see\ninformation about our NFT from\nour database is listed here.\nThat's fantastic. We see the\nprice we see the address, we see\nthe token ID we see the seller.\nNow if we go back to our NFT\nmarketplace, our little our\nlittle hard hat MC marketplace,\nlet's mint another one. Yarn\nhard hat run scripts mentalist\nDash network localhost, we're\ngoing to run that it's going to\nmint one more. If we go back to\nour Morales database, we do a\nlittle refresh on that active\nitem table, we now have a new\nitem in here. So if we go back\nto our front end, we give this a\nlittle refresh. And boom, now we\nhave two items in here. So this\nis awesome, we now have a way to\nactually show the most recently\nlisted NF t's on our\nmarketplace, plus ah.\nNow, of course, you might be\nsaying to yourself, hey,\nPatrick, that's cool and all.\nBut that looks really ugly. And\nI would agree with you. But 100 percent\nagree with you. So we should\ncome up with a component to show\nour listed entities that looks a\nlot nicer. So when instead of\nreturning and just printing out\nthe raw information, we probably\nwant to show the image, right,\nwe want to show the image, we\nwant to make everything look a\nlot nicer. So we're going to\ncreate a new component that\nwe're going to return in here to\nformat all of our NF T's\nappropriately. So we're gonna go\nto components, we'll do new\nfile, and we're going to call NF\nT box dot j s. And this is where\nwe're going to grab all the\ninformation on how to show what\nour NFT actually looks like. So\nlet's get started working on our\nentity box, we're gonna set this\nup, the way we've been setting\nall these up would do export\ndefault function, and ft box.\nNow something that's a little\nbit different for this one,\nthough, is that in our index, we\nhave all this information. So\nwe're gonna need to pass all\nthese variables to our NFT Box\ncomponent. So to do that, we'll\nadd them as input parameters for\nour component here. So we'll say\nprice, and if the address, token\nID, marketplace, address, and\nseller. So right now on our\nfront end, we just have a whole\nbunch of text, and we even have\nthis gross warning, we're gonna\nget rid of that tip. And as we\nknow, tokens have their token\nURI, which points to an image\nURI or an image URL of what the\nactual token looks like. So what\nwe're going to want to do is\nwe're going to want to call that\ntoken URI, and then call the\nimage URI to show the image. So\nwe're going to actually have to\nwait those two API requests to\nget the actual image. And we're\ngoing to save that image as a\nstate variable on this component\nhere. So as you already know,\nwe're going to work with use\nstate to keep track of that\nimage URI. So we'll do import,\nuse state from react like this.\nAnd in here, we'll say const,\nimage, Uri, comma set image, URI\nequals use state. And we'll\nstart it off as a blank string.\nNow let's create a function,\nwe're going to call it update UI\nto update our UI and grab this\ntoken URI and the image URI. So\nwe'll create an async function\ncalled Update UI. And in order\nto get the image first, we're\ngonna need to get the token URI,\nand then using the image ag from\nthe token URI gets the image. So\nfirst thing we're gonna have to\ndo is get the token URI. So we\nknow how to do this with use web\nthree contract. So we'll do\nimport, use web three contract\nfrom react Morales. And as we\nknow, use web through contracts\nis going to need some\nparameters. So we'll say const\nrun contract function, get token\nURI, equals, use web through\ncontract. First, we need the ABI\nof the NFT because we're gonna\nneed to call token URI. So to\nget the ABI we're gonna need to\nonce again update our front end.\nSo let's comment this part out.\nWe'll go back to our hard hat\npiece. And let's look in our\ndeploy scripts. We have this\nupdate front end right now. All\nthis is doing is updating calm\nobject addresses. Well, that's\ngood. We're also going to want\nto add API's to our front end as\nwell. So let's create another\nfunction in here called Update\nAPI. And we'll pass the API's as\nwell. So we'll do async function\nupdate API. And we'll give it\nboth the basic NFT API and the\nNFT marketplace API, because\nwe're going to need both of\nthem. So we'll say const NF T,\nmarketplace equals await ethers\ndot get contract. And f t\nmarketplace, we're going to\nwrite the ABI to the front end\nAPI location, we have the front\nend contracts file. So let's\nalso do a const. Front and ABI\nlocation equals, and we'll do\ndot dot slash next, Jas, and if\nT marketplace dash FCC slash\nconstants, and instead of\nactually just giving the file\nname, we can just give it the\nfront end API location. And then\nwe'll actually have it generate\nthat file for us because we're\njust going to overwrite the ABI\nfile anytime we work with it. So\nnow that we have the\nmarketplace, we'll just do Fs\ndot right file sync, and we'll\ndo front and ABI location, and\nft marketplace, dot JSON. And ft\nmarketplace, dot interface that\nformat ethers dot utils dot\nformat types dot JSON. So we're\nalso going to want to do that\nfor the basic NF t. So we'll say\nconst basic NF t equals await\nethers dot get contract basic NF\nT Fs dot right? file sync, it's\ngoing to be that exact same\nplace right here. Except for\nit's going to be a different\nlocation, it's going to be basic\nNFT dot JSON. And of course,\nwe're gonna do a comma basic NF\nT, that interface dot format\nethers dot utils, dot format,\ntypes dot JSON, you can find\nthis NFT marketplace that\ninterface in the Hardhead\ndocumentation. And you can find\nthis in the ethers\ndocumentation. So now we have\nthis update ABI function. Let's\nalso add this to our module that\nexports so we'll do a weight up\nthe ABI like that.\nThere's a hyphen here that\nshouldn't be here. And we'll run\njust this part of our hardhat\nfront end, run yarn, hard hat,\ndeploy dash, dash dash tags, the\ntag here is front end, front\nend. And now it's had nothing to\ncompile updating front end, it's\ndone. So if we go back to our\nfront end, now, we go to our\nconstants, we now see two\nobjects in here, which are going\nto be API's, the basic NFT, and\nthe NFT. Marketplace. Awesome.\nSo now that we have that, we can\nimport those into our front end.\nSo we can say import, and if T\nmarketplace, abi from dot dot\nslash constants slash NF T,\nmarketplace dot JSON. And we can\nalso get the NF T API. So we'll\ndo import NF T, abi from that\nthe slash constants slash basic\nNF T dot JSON. Now in our run\ncontract function, our token URI\nfunction is part of the NFT API.\nSo the API will be the NFT, abi,\nthe contract address\nis going to be the address of\nthe NFT, which we're passing in\nas a parameter. So we'll pass an\nNF T address, the function name\nis going to be token URI, and\nthe params are going to be the\ntoken ID, which is getting\npassed as an input parameter to\nthis function to this component.\nRight. And we can double check.\nWe're good to our basic NF T dot\nsoul, right? We scroll down, we\nhave this token URI that we're\noverriding. And this is the\nfunction we want to call takes\nthe token ID. So this the\nfunction we want to call takes\nthe token ID. Okay, great. So in\nour update UI, first, we'll say\nconst, token URI equals await\ntoken URI. Now let's do a little\nconsole dot log token your eye,\njust to see what this returns to\nmake sure that update UI is\ncalled, we'll add it to a use\neffect, we'll say use effect.\nAnd this takes an input\nparameter of a function to do,\nwe'll just say Update UI. And\nthen we'll only have this run\nanytime is web three enabled\nchanges. So we want to run\nupdate UI, but we want it to be\ndependent on is web three\nenabled. And then we'll say if\nit's web three enabled, then\nupdate UI. So we need to add use\neffect as well. So we're using\nuse state, we'll do comma, use\neffect. And now we should at\nleast be reading our token URI\noff the blockchain. We're not\ngoing to set the image yet,\nright, because we're going to\nget the image URI from the token\nneuron. Let's add this NFT box\nto our index to see if it's\nworking well so far back in our\nindex Next, up at the top, we\nwill import NF T box from dot\ndot slash components slash NF T\nbox. And down here, while we're\nreturning this will add our NF T\nbox component will make sure to\npass in all the parameters it\ntakes. So the price is going to\nequal that JavaScript price. And\nft address is going to equal the\nJavaScript entity address. The\ntoken ID is going to equal the\ntoken ID, marketplace address is\ngoing to be marketplace address\nseller is going to be the\nseller. And you saw that warning\nwhere it's saying, hey, all the\ncomponents need to all the\nthings in the mapping need to\nhave their unique key. So we'll\nsay key, we'll give these all a\nkey as well. We'll say key\nequals this, we'll do some\nstring interpolation, we'll just\nsay the NFT address, combined\nwith the token ID can be the\nkey. So if we save that, go back\nto our front end here, do a\nlittle refresh marketplace\naddress is not defined market\nplace address. So let's make\nsure we spell things right,\nlet's go back to the front end,\nwe'll give it a refresh is what\nthree enabled is not defined.\nOops, excuse me in the NFT box,\nwe need to grab that from us\nMorales, so we'll import use\nMorales. And in our ponents here\nwe'll say const is web three\nenabled equals use Morales.\nWe'll save that. And one thing I\nnoticed actually is this needs\nto be wrapped in squigglies.\nSorry, I forgot to do that. Our\ncomponent actually just takes a\nprops, props input parameter.\nAnd we would need to do like\nprops that token ID to get token\nID. But instead, we just extract\nit out by doing putting the\nlittle squiggly brackets here.\nSo put the squiggly brackets\nthere. Great, we'll do a little\nconsole dot log token, your eye,\nor index.js has everything\nupdated. Here. Let's do a little\nsave. And we can even say if is\nweb three enabled up the UI.\nLike that we'll save we'll go to\nthe front end, we'll do a little\nrefresh. We'll see if\neverything's working as\nexpected. And as long as we're\non that hard had localhost and\nour meta mask. And again, you\ncan ignore this error, this\nwarning that's up here for now.\nAnd if you click this, and you\nhave your IPFS and brave or your\nIPFS companion, we can now see\nwe're getting our token URI,\nwhich is perfect. The piece that\nwe want now is this image bid.\nAnd for this one that I'm using\nit is an HTTPS, which\ntechnically isn't decentralized,\nright, we would need it to come\nfrom instead of HTTPS, we would\nneed to come from IPFS colon\nslash slash but but actually\nhaving it as HTTPS ipfs.io. For\nnow was good, we'll explain why\nin just a second. Now that we\nare getting the token URI, we\ncan call this URL, and we can\nget back the image that we want\nto actually show on the front\nend. So in here, we'll do a\nlittle console dot log, the\ntoken, URI is string\ninterpolation, like this, and\nthen we'll say if token URI,\nwe're going to need to now grab\nthis token URI, and get the\nimage from it. And this is where\nwe're going to get a little bit\nfunky. And we're going to cheat\na little bit. Now for our\napplication, not everybody is\ngoing to have IPFS companion,\nnot every browser is IPFS\ncompatible. So we're gonna have\nto actually cheat a little bit\nhere, we're actually going to\nchange the token Uriah from its\nIPFS edition to an H HTTPS\nedition. And this is known as\nusing an IPFS gateway, which is\na server that will return IPFS\nfiles from a normal URL. So\nwe're going to use an IPFS\ngateway, which we can just make\nregular HTTPS calls to, and it\nwill return those IPFS files. So\ntechnically, are we making the\ncentralized doing this? Yes. And\nis that ideal? No. However,\nuntil the world adopt IPFS, and\nuntil the world adopts the\nstandards, it's kind of what we\nhave to do right now. Because\notherwise, the front end will\njust show up as blank to them.\nAnd we can't have that we don't\nwant that. So we're gonna say\nconst request URL equals token\nURI dot replace IPFS, slash\nslash with HTTP s, HTTPS.\nslash slash ipfs.io/ipfs/so.\nWe're saying, if you have a\ntoken URI that starts with IPFS,\nthat's great. But we're going to\nswitch it to using an IPFS\ngateway. It's really use the\nIPFS gateway provided by the\nteam that builds IPFS. So pretty\nreliable gateway is is kind of a\ncop out. Yes. Are our files\nstill on? IPFS? Yes. So it's not\nthe end of the world. But this\nis just going to make calling\nthese API's a lot easier for us.\nAnd we're going to say const\ntoken URI. Response equals\nawait. And this is going to be a\nlittle weird. We're going to do\ntwo awaits. await a weight fetch\nrequest, URL dot JSON. So fetch\nis a keyword you can use in\nJavaScript to fetch or get a URL\nfetch keyword is essentially\ndoing the same thing as pasting\nthis into the browser, like so.\nAnd getting this JSON response.\nSo we await to get the response.\nAnd then we await to convert the\nresponse to JSON. And that's how\nwe get the toggle response. So\nwe now have this object in our\nJavaScript, which is perfect\nbecause this object has this\nimage attribute that we want. So\nwe're gonna do the same thing we\ndid here, we're gonna use the\nIPFS gateway, this one's already\nusing HTTPS that ipfs.io. But if\nit wasn't, we would still want\nto convert it. So now we're\ngonna say const. Image URI\nequals token you are i response\ndot image. So we're gonna get\nthe image tag of this response\nhere. And then we're going to\nsay const. Image URI URL, is\ngoing to equal to, and we're\ngonna do the exact same thing\nthat we did up here, we're going\nto use the gateway image URI dot\nreplace IPFS, colon slash slash\nwith HTTPS ipfs.io/ipfs. And\nnow, and that's how we get this\nURL right here. And so we can\nfinally do set image URI, to\nthat image URL. And now we have\nour image URI is going to be\nthat image right here. Now, is\nthis a little bit wonky? Yes.\nAre there better ways that we\ncan do this? Yes, there's\nactually a number of better ways\nthat we could do some of this,\nwe could actually, since we're\nusing Morales, we could render\nimage on our server and just\ncall our server, what else could\nwe do well, or test nets and\nmaintenance routes actually\ncomes with a bunch of hooks like\nus NFT balance that will show us\nan F TS show us how many NF T's\nshows all this information about\nNF T's but it only works on test\nnets and main net, we'd have the\nworld adopt IPFS. So we don't\nhave to do this wrapping.\nUnfortunately, it doesn't yet so\nsuch as life. But now that we're\nsetting the image, alright, we\nhave this image URI, we have\nwhat this actually looks like,\nwe're going to have this and if\nwe click on this, we use this in\nour browser, it returns this\ndog. So now we have the image\nURI in our website, we can\nfinally use it to show what this\nis going to look like. So\nfinally, we can create a return\nin here. So down below, we'll do\nreturn to a little div. And then\nwe'll do another div just\nbecause I want to. And we can do\nsome JavaScript, we can say if\nif that image array exists,\nwe'll do some stuff. Otherwise,\nwe'll do some other stuff. So if\nit doesn't exist, maybe we'll do\na div for now. div that just\nsays loading dot the dot. And if\nit does exist, for now, we'll\njust say, just do a little div,\nclose the div. And we'll just\nsay found it. Now if we go back\nto our front end, let's see if\nwe're good here.\nUh huh. If I do a refresh, we\nsee found it for both of these\nNF T's. Okay, cool. So how do we\nactually show these NF T's, we\nfinally have the URL that we can\nuse to show the NF T's. But we\nwant to actually use them next.\nJas actually comes with a\ncomponent called the image\ncomponent that we can use to\nrender images really easily just\nby using a URI. Now, because\nwe're going to use this image\ntag, and because it does some\noptimizations on the back end,\nthat means that this website\nwon't be able to be deployed to\na static to a static site, like\nIPFS. Because now our website\nrequires a server technically,\nrequires a server just because\nwe have Morales. So that might\nbe another reason, we might not\nwant to, since we're using this\nimage tag, we can't deploy this\nstatically to something like\nIPFS is we're going to up at the\ntop, we're going to import image\nfrom next slash image. And we're\ngonna down here we're going to\nsay, instead of founded, we're\ngonna go Image, we're gonna\nclose it off here, too, we're\ngonna give a loader of just a\nblank function that just gives\nus the image URI. Don't worry\ntoo much about loader. For now,\nwe're gonna say the source of\nthe image is going to be the\nimage URI. And then we'll give\nit a height of maybe 200. And\nthen we'll give it a width of\nalso maybe 200. And if we did\nthis right, after we save, we\nshould see the image on our UI.\nSo we'll go back to our website,\nand oh, my goodness, we can see\nthe dogs holy cow. This is\ngetting really exciting. We can\nsee the puppies, we can see the\nimages, we're definitely doing\nsomething right here, which is\nreally exciting. Now I know I\nsaid this before that this isn't\na CSS. This isn't a formatting\ntutorial, because that's\ndefinitely not my expertise.\nHowever, let's make this look a\nlittle bit nicer. And we're\ngoing to use once again, the web\nthree UI kit, because the web\nthree UI kit has a whole bunch\nof tools that are really, really\nhelpful for us to use. So if we\ngo to the web three UI kit, we\ncan go to that live storybook\nAnother interactive bit, and we\ncan scroll down to the section\nthat has called card. Or we can\nmake these little clickable\ncards and we can display some\ninformation about our nfts. So\nlet's go ahead and at the top,\nwe'll do import import card from\nweb three UI kit. And now\ninstead of just showing the\nimage, we'll wrap the image in a\ncard like this. We'll save that.\nNow back on our front end, give\nit a little refresh. Now we've\ngot this kind of clickable\nsection that looks a little bit\nnicer. We'll even label it. And\nwe can even label it with a\ntitle and description. Now we\ncan grab the title and the\ndescription from the token URI\nresponse. So up at the top,\nlet's go ahead, let's grab the\ntitle and the description of the\ntoken UI as a state variable. So\nwe'll say const, token name, set\ntoken name, equals use state,\nstart off as blank, the const\ntoken description, that token\ndescription, equals use state.\nStart off as blank to download,\nwe do this update UI bit, we'll\ncall set token name. So we'll\nsay name is token, your response\ndot name, we'll say set token\ndescription, which will be\ntoken, your response dot\ndescription. And then we'll use\nthose descriptions and title in\nthe cart. So we'll say title\nequals token name, description\nequals token description. Save\nthat. We'll look at our front\nend here. Give it a little\nrefresh. Oh, and now we have the\nname of the NFT. And its\ndescription on our front end.\nOkay, cool. Let's keep going.\nWhat else do we want on this?\nWell, we probably want who it's\nowned by. So we'll put a little\ndiv inside the card, say div,\nmaybe we'll even put the token\nID we'll do a little number.\nWith the token ID.\nWe'll do another little div, and\nthen we'll make this italic.\nWe'll say class name equals\nitalic. And then text is going\nto be small. And we'll say owned\nby, and this is where we can get\nthe seller that we're passing in\nas an input parameter. And then\nmaybe underneath the image, we\nwant to put the price. We'll do\na little div here. And then\nwe'll say price like this.\nHowever, we're probably don't\nwant it in way we want it in\nhuman readable units. So we'll\nimport ethers, we'll say import\nethers from ethers. And then\ninstead of just showing the\nprice, we'll do a little, little\nJavaScript and here we'll do\nethers dot utils dot format,\nunits, price, price and ether.\nAnd then we'll do space eath.\nAnd then we'll make this be\nclass name equals font bold, so\nwe can read how much it's listed\nfor on our marketplace. Let's go\nback a high we can now see, this\nis token ID number four. We can\nsee who it's owned by we'd see\nthe price of it and then more\ninformation about the dog. Yay.\nNow let's format all this stuff\nin here a little bit nicer. So\nlet's wrap everything in a div\nin one more div. And that will\nsay class name is going to be\nflex. And this is going to help\nformat everything, we'll put\neverything in a column items and\nget to. And now if we look back\nthere, kind of like in a column\nnow, wrapping one more div, give\nthem some padding, last name\nequals P to say a little bit\npadding has been added. Okay,\nnice. And then we'll go back to\nour index, and we'll add some\nformatting to our index here. So\nour main one, we're going to\nremove styles dot container,\nwe're just gonna say container.\nMX auto, we're going to make an\nh1 in here, class name, equals,\nI form E X for font bold text to\nXML. This is we're just gonna\nsay recently listed, then we're\ngoing to do another div. Class,\nname equals flex, flex wrap.\nWe're going to end this div\naround our JavaScript here. And\nlet's look at our UI. And let's\nsee what that does. Okay, cool.\nLet's go back to our index.\nLet's remove all this stuff.\nSince now we're adding that to\nthe card. Let's save. Now it's\nlooking a lot better, we finally\nable to start listening our NF\nTs and then have them show up on\nour marketplace like we see\nhere. Fantastic. Okay, if we go\nto the readme homepage show\nrecently listen to empties. Oh,\nmy goodness, this is a check\nwe're done here. Now, and I know\nwhat seemed like a lot of work,\nbut a lot of it was setting up\nthat morale server correctly.\nAnd because we have our own back\nend, now, we have some back end\nservices that we needed to\nconfigure. But now that\neverything's set up, the rest of\nthis is going to be easy St. Now\nwe are only going to want this\nto show if we're connected to\nweb three. Right? Now, if we\nclick this, this still shows up.\nSo we're going to have to update\nthis a little bit. And in our\nindex.js, we're now we're\nchecking to see fetching.\nListen, NF T's right before\nthat, right? Before we do that\nwe actually want to see is web\nthree enabled. And this is going\nto be a little bit of nested\ntertiary operations. If web\nthree is enabled, then we're\ngoing to do all this fetching,\nlisted NF T's stuff here. We're\ngonna do everything in here. So\nif it's not enabled, let's do\nlike a little div that says web\nthree, currently not enabled.\nAnd of course, we're going to\nneed to grab is web three\nenabled. So we're going to say,\nfor the top we'll do const is\nwhat three enabled equals use\noralis as we've been doing, and\nwe're going to grab use Morales\nfrom react Morales, we'll save\nthat go back to our front end,\ngive it a little refresh. If\nwe're connected, we'll see the\nmarketplace. If we disconnect,\nwe see web three currently not\nenabled, which is what we want.\nPerfect. So what is next in our\nreadme. If you only NFT, you can\nupdate the listing. Let's first\nlet's figure out if somebody\nactually is the owner of these\nentities. Let's make it really\neasy for the people on this\nwebsite. Well, first we can get\nthe person's Metamask by\ngrabbing the account from us\nmouse, so we'll do a comma\naccount. So then we can easily\njust do const is owned by user\nequals seller equals equals\nequals account. So the seller\nwe're getting from the contract,\nthe account we're getting from\nwhoever's connected here, if the\nseller equals the account, there\nis no seller equals equals\nequals undefined. We'll just say\nthey're owned by you. And now\ninstead of saying owned by\nseller, we can say const,\nformatted seller address equals,\nand we'll do the ternary\noperator will say if it's on by\nyou, then we'll just say you\ninstead of seller. Otherwise,\nwe'll say seller. Now we'll say\nowned by formatted seller\naddress like this. So if we go\nback to our front end, we do a\nlittle refresh. depending on\nwho's connected, you might see\nowned by blah, blah, blah. Now\nif I go to my Metamask, let me\ngo ahead and switch account to\naccount three, let's go ahead\nand connect our account three,\nwe now see owned by you instead.\nRight, and we can even switch\nagain, we'll switch accounts\nagain, we'll switch to account\none, we now see owned by blah,\nblah, blah, like so since when\nwe switch back and forth, the\ndiameters of this actually\nchange which is really annoying.\nSo maybe we want to go one step\nfurther. And we want to truncate\nthis seller address make it a\nlittle bit smaller. So we want\nto make a seller a little bit\nsmaller. So let's create a new\nfunction. And we can create this\noutside of the export default\nfunction because this is going\nto be a function that doesn't\ndepend on anything inside our\napp. It's just going to be kind\nof a raw function. So we're\ngoing to create we'll call it\nconst truncate string, and this\nis going to be a function that\ntakes a full string, and a\nstring length as parameters. And\nwe're just going to pass the\nseller address and how long we\nwant to make this string. So\nthis is going to be an arrow\nfunction we're going to do here,\nand we're gonna say, if all\nstring dot length is less than\nor equal to str Lang, return\nfull str. Otherwise, we'll say\nconcept ra torx equals three\nlittle dots. And we'll say,\nLet's separate Tor length equals\nSep. Ra Tor dot length. To make\ncon separator length, we'll say\nconst chars to show is going to\nbe the the string length minus\nthe separator length, we'll say\nconst. Front chars or front\ncharacters is going to equal\nmath dot ceiling chars to show\ndivided by two const back chars\nis going to equal math dot\nfloor, chars to show divided by\ntwo. And if you don't understand\nthis math here, don't worry\nabout it. And then we're gonna\nsay return full string\nsubstring of zero to front chars\nplus the SEP IRA tour plus full\nSTR dot substring. of full STR\ndot length, minus back chars.\nAnd now what we can do is we can\ngrab this truncate STR this\ntruncate string and for is\nformatted seller will say if\nit's you will still do you but\notherwise we'll do truncate\nstring of seller or blank if\nthere's no seller, and we'll\nhave it be size 15. And now if\nwe save that, go back to our\nfront end, if it's owned by you,\nit's still gonna say on by you.\nBut if we switch accounts, and\nnow says owned by, you know,\nblah, blah, blah, dot the dot\nblah, blah, blah with a\ntruncated address. And then\nthese sizes don't actually\nchange, which is a lot nicer\nthan them getting bigger and\nsmaller. So awesome. So now we\nhave this formatted even better.\nOkay, now what do we want to do?\nWell, now that we know who owns\nthe NFT, NF T, and it's\nformatted pretty nicely, we need\nto figure out a way to update\nthe listing. So what we want to\ndo is, once again, if it's owned\nby us, and we can switch back to\nthe account, it's owned by if\nit's owned by us, when we click\non it, we want to be able to\nupdate the listing on the\nmarketplace. So to do this,\nwe're going to create a new\ncomponent called Update listing\nngModel. So we're gonna create a\nnew component, new file, update,\nlisting ngmodel.js. A ngModel is\nsomething that like pops up. So\nfor example,\nthis little pop up here is known\nas a modal. And this is what we\nwant to build. If it's owned by\nus, when we click this, we want\nit to pop up this modal thing.\nSo to get started, we'll do the\nsame thing we've been doing for\nall of our components here,\nwe'll do export default,\nfunction, update, listing\nngModel, like so. And we're\nprobably going to want to pass\nit these parameters from the\nentity box, probably gonna want\nto pass these parameters. So the\nngModel knows what function it\nneeds to call in our NFT\nmarketplace. The way we're going\nto update listing is we're going\nto call this update listing\nfunction where we need the\naddress token ID and then some\nnew price. So we're going to at\nleast need those. So we're going\nto need the NFT address, and at\nleast the token ID to make this\nlittle pop up, we're not going\nto code it ourselves, we're\ngoing to once again, use the web\nthree UI kit, web three UI Kit\nhas this nice pop up section,\nwhere it has some code to work\nwith a modal. So we're going to\nimport that will do import\nngModel from web three UI kit,\nlike so here's what it looks\nlike we have modal and then we\nhave all this stuff on working\nwith the modal. So we'll do our\nreturn, do a little modal, like\nthis. One of the key things in a\nngModel is whether or not it\nshould be visible. So it has an\nis visible tag, which we're\nactually gonna have to grab,\nwe're actually gonna have to\ngrab from the empty box. So\nwe're going to pass a little is\nvisible here as well, in our NFT\nbox, we need to tell our ngModel\nwhen it's visible. So we'll\nwe'll make that code in a little\nbit. Right now, it'll just be\nblank. And inside of our\nngModel, we're going to want to\ngive an input field for how to\nupdate it. So I know we've done\nsome regular inputs before,\nsince we've been working with\nweb through UI kit, let's just\nuse the input that it has as\nwell. So we'll do a little comma\ninput here. And inside of the\nngModel we'll create a new\ninput. So on our input field,\nwe'll give this a label which is\ngoing to be update listing price\nin L one currency. And we'll\njust do eath. For now we'll just\nhard coded as eath name will be\nnew listing price, and type is\ngoing to equal a number we'll do\nLittle backslash here, oops,\nwe'll do a little backslash\ninstead of like that. So cool.\nSo when this modal pops up, it's\ngonna have this input in here.\nAnd we can actually test to see\nif this is working. We can\nimport this into our NFT box,\nwe'll do import, update, listing\nngModel. From that slash,\nupdate, listing ngModel oops,\nand sorry, this doesn't need\nparentheses, and at the top of\nour return here, right before\nour card will add it in. So\nwe'll just add another div\nthough. So that these two can be\nin the same react. But we'll add\nanother div, we'll say Update\nlisting ngModel, like so with a\nlittle backslash here. And right\nnow we just have to pass is\nvisible. And then for now, we're\njust going to say true. So now\nwith this listing ngModel on our\nfront end, we do a little\nrefresh. And we get this little\nbox like this update listing\nprice and one currency. And we\nhave to close two of them.\nBecause technically we right now\nboth modalities are true, right.\nSo if we do a refresh, we get\nthis little input pop up this\nlittle modal and we close it\ntwice, because we have two NF\nT's if you have a ton of NF T's\nhere, you will have to close a\nton of those. So we change it to\nfalse, we go back to the front\nend, we do a little refresh, and\nboom, now it's false. So true,\nsave, run, and it's there.\nGross, delete, delete, false,\nsave front end, it's not there\nanymore. Okay, cool. So we're\ngonna have to tell this ngModel\nonly to pop up when somebody\nclicks this and have tea that\nthey own. So to actually toggle\nthis and actually make this\nwork, we're going to update our\ncard. So whenever we click our\ncard, we're going to create a\nfunction called handle card\nclick that handle card click is\ngoing to update a variable for\nwhether or not we should show\nthis ngModel. So we're going to\ndo is we're gonna say on click\nof the card, aka, once we click\nour dog, we're going to call\nsome function. So we're gonna\nsay on click, equals handle\ncard, click, animal card, click,\nand we're going to make this a\nfunction, we're gonna say const,\nhandle card click equals a\nfunction, we'll use some Arrow\nstuff here. And then we'll just\nsay, if it's is owned by user,\nif it's on by user, we'll show\nthe ngModel. Else, we will call\nthe by item function, since we\nwant our whole UI to rerender.\nOnce we change, once we change\nthe variable to show the\nngModel, we're going to do this\nas a US state. So we'll say\nconst, show ngModel. Come a set,\nshow ngModel equals use state.\nAnd then we're going to start it\noff being defaulted to false. So\nby default, we are not going to\nshow them on down which is what\nwe want. But if it's owned by\nthe user, we're gonna say Set\nShow ngModel to be true. And\nthen else right now we'll just\nput console dot log, let's buy\nwill actually update this to\nbind the item a little bit\nlater. So now instead of having\nis visible be false, we'll have\nis visible equal to show\nngModel. Or show ngModel.\nVariable. Okay, great. So now if\nwe save that, we go back to our\nUI, we right click, we hit\nInspect, if we own it, and we\nclick it, the ngModel will pop\nup, and we can click it out,\nclick another one, but that will\npop up if we don't own it. So if\nwe switch accounts, Connect will\nswitch. We click it, nothing\nhappens. And if we go to\ninspect, we go to the console,\nwe click it, we should see let's\nbuy pop up, which is what we do\nsee, we'll do a little refresh\nhere. Click we see let's buy pop\nup, click again, let's buy click\nlet's pilots pilots, why? Great,\ncool. So now we have a word for\nthat ngModel. To actually show\nup correctly, let's switch back\nto the person who actually owns\nthis NFT we click it, we want to\nbe able to when we hit OK, or\nsubmit, we want to send a\ntransaction to update the price\nof our NFT here, so what we can\ndo is in our input will have a\nlabel called on change equals\nand this is the function that\nwill call whenever this updates.\nSo we're gonna say on change\nevent is going to be a function.\nAnd we're going to create a\nfunction called set price to\nupdate listing listing with\nevent dot target dot value. So\nwe want to keep track of\nwhatever we've put in here. So\nwhen we call the function to\nupdate the price, it'll just\nalready automatically have it.\nSo we'll create this function\nand event dot target dot value\nis going to be whatever's in\nthis input box here. So we'll\ncreate this set price to update\nlisting with will have this be a\nuse date because we are going to\nwant to change the UI based off\nthis so we'll say const price to\nup date listing with comma set\nprice to update listing with\nequals use state and then we'll\nhave this be zero to start or\nblank. And so now, whatever is\nin here is going to get updated\nwith this. So now I can do like\nour console dot log price update\nlisting with Get back to the\nfront end, oops, we need to\nimport use state import, use\nstate from react. Go back to the\nfront end, we click this, we\nright click Inspect.\nBy type one, we can see 114, we\nsee 14. So let's remove the\nconsole dot log now. Now what we\ncan do in here is we can create\nfield called on okay, this is\ngoing to be the function that we\ncall when we hit this, okay\nhere, so on. Okay, it's going to\nbe equal to a function, we're\ngoing to use a little arrow\nnotation, and we're going to\ncall that update listing\nfunction on the blockchain,\nwe're going to need to grab that\nfunction so we can use it. So\nonce again, to use that\nfunction, we're going to import\nuse web three contract from\nreact mirallas. And as a new\nhook, we'll say const run\ncontract function called Update\nlisting, equals use web three\ncontract. And this is going to\nbe a function that we're going\nto call on our NFT marketplace.\nSo ABI is going to be the NFT\nmarketplace API, which we can\nget by doing an import, similar\nto what we did over here. And we\nactually just copy paste from\nour NFT box. So we'll do import\nNFT marketplace API from dot dot\nconstant send it to marketplace\nthat JSON, we're gonna need the\ncontract address, which is going\nto be an input parameter to our\nupdate listing ngModel. So we\ncan even do a comma market place\naddress, copy this place that\nhere, that means in our NFT box,\npretty soon, we're going to have\nto pass all these variables to\nit, but we'll save that in just\na second. So NFT marketplace\naddress marketplace address\nfunction name, is going to be\nwhat it's called Update, listing\nin our smart contract, and then\nthe params. So if we go to this,\nwe have update listing takes the\nNFT address token ID and new\nprice do NFT address, which will\nbe NFT address, we'll say token\nID is going to be token ID and\nthe new price your price will\nget from price to update listing\nwith but will convert it from\nhuman readable to ethers. So\nwe'll import ethers from ethers.\nAnd the new price will be ethers\ndot utils dot parse ethers or\nether price to update listing\nwith or just in case it's blank,\nwe'll just say or zero. So we\nhave the NFT address the token\nID marketplace address in our\nNFT box, we're gonna have to\npass those parameters in here.\nSo we have is visible, we're\nalso going to have token ID,\nwhich is going to equal token\nID, marketplace address is going\nto equal the marketplace\naddress. And the NFT address is\ngoing to equal the NFT address.\nAnd as we code and test this\nsomething that's going to be\nreally annoying, because it's\nreally annoying for me right now\nlet's refresh our website. And\nif we click it, this thing pops\nup. But when I hit X, and I\nclick this, again, nothing shows\nup. That's because technically\nshow ngModel is still true right\nnow, even though we've exited\nout. So what we want to do in\nthe NFT box is in our update\nlisting ngModel we're also going\nto pass it in on close, and\nwe're going to pass it a hide\nngModel variable that we're\ngoing to create, and right under\nShow ngModel Set Show ngModel\nwe're going to create const Eid\nngModel. And this is just going\nto be a function, that's just\ngoing to say set, show modal. to\nfalse, we're going to pass this\nfunction to our update modal\nlisting. So we're going to do\ncomma on Close. And in our modal\nhere, we're going to say, on\nClose. On, cancel, we're going\nto do, we're going to call that\non close function, or on Close\nbutton pressed, we're also going\nto call that on close function.\nNow if we refresh our website,\nclick this modal pops up, we\nclick X, click it again, it'll\npop back up, because now we're\nproperly setting it to false and\nthen resetting it to true. Now\nto actually send this update\nlisting function, we're going to\npass this another thing, another\nvariable, we're going to pass it\non Okay, which is going to be a\nfunction as well. It's just\ngoing to call update listing\nthat we just created. Now, it's\nalways a good idea to add an On\nerror. We'd say on error, take\nthat error as a function and\nconsole dot log.\nThe error and this needs to be\nin squiggly brackets like that,\nbut contract address is wrong.\nSo we'll make this contract, con\ntract address and spell that\ncorrectly. Spelled correctly.\nNow let's go back to the UI,\nwe'll give it a little refresh.\nClick, this will add one. And we\nsee Metamask pop up. So this is\nworking out perfectly. Now I'm\ngoing to cancel it, and our apps\ngonna freak out and stuff. But\nthat's okay, we are doing\nfantastically okay app popped up\nlike that, which is good. We\nhave this little error handling,\nwhich I like to add for all of\nthese run contract functions.\nLet's also do an on success. So\nlet's say when this does go\nthrough successfully, we'll call\na function called handle update,\nlisting success. And this will\nbe a function that we'd call\nwhen this goes through\ncorrectly. So at the top, let's\nmake this new function, we'll\nsay const. Handle update,\nlistening success is going to be\na new function using the arrow\nsyntax here. And we'll have this\nsetup a new notification for a\nweb application. So for us to do\nnotifications, we're going to\nuse web three UI Kits use\nnotification, this is going to\nbe that same notification\nservice that we used in our last\none. So up at the top here,\nwe'll import it, use\nnotification. And then we'll\nsay, right in our component,\nwe'll say const, dispatch equals\nuse notification. And since\nwe're using notifications back\non our app.js, we have to import\nit in here. So we'll do import\nnotification provider from web\nthree UI kit. And inside of our\nMorales provider, we'll add the\nnotification provider around our\nheader and our component, so\nthat we have context for this.\nNow in our handle update listing\nsuccess, inside this function\nwill say dispatch, say type is\ngoing to be success. message\nwill be listing updated, title\nwill be listing updated, please\nrefresh, please refresh and move\nblocks. And then position. Top\nright. And then we'll do on\nclothes, and on clothes. And\nwe'll say set price to update\nlisting with back to zero. I\nalso I'm editing this a little\nbit in the future. And I\nrealized that I actually forgot\nto add the TX to a lot of these\nhandle functions. So on these,\nwhenever we call one of these\nrun contract functions, like\nwe've been saying they have this\non error in this onsuccess. Now\nthis onsuccess automatically\npasses the result of the call to\nwhatever callback function is\nthere. So for example, up the\nlisting returns a transaction,\nand we'll pass that transaction\nto whatever you add to the\nonsuccess. So now in here, you\ncan actually have it have a\ntransaction as an input\nparameter. And this would be the\ntransaction that's going to go\non the blockchain to you know,\nupdate the price. So we actually\nwant to change it from a regular\nfunction to an async function.\nSo we can actually do await TX\ndot Wait, one, because we don't\nwant to say, hey, success, you\nknow, listing has been updated\nbefore the transaction actually\ngoes through. So we want the\ntransaction to go through first.\nAnd then we want to pop the\ndispatch up saying, hey, it's\ngone through so and then\nadditionally, when we actually\ncall these modells on the on,\nokay, on the onsuccess, we pass\nthem in just by referencing the\nname of the function. So we\ndon't do this arrow syntax,\nanymore like this, we just say,\nhey, the onsuccess is going to\nbe this, go ahead and pass your\nresults to it. So that's how we\nactually call it down here. If\nyou look at the GitHub repo\nassociated with this, you go to\ncomponents, and we go into\nthese. So in this video, I\nforgot to add the await TX dot\nwait one. But in the GitHub\nrepo, we have these. And when\nI'm demoing things in the video\nhere, the dispatch, it's gonna\npop up before the transaction\nactually finishes going through.\nSo just want to let you know,\nand back to the video. So now we\nhave a little success thing\nthat'll pop up when we're\nsuccessful. And the other thing\nis, when we call this, we are\ngoing to omit an item listed\ninside of our Morales dashboard,\nthe price should actually update\nin our active item because of\nour Cloud Functions. So we're\ngoing to put this all together\nnow. So we're on the front end.\nAnd if the marketplace owned by\nyou will click it. Update\nlisting to 25. We're gonna hit\nOK, meta masks is gonna pop up.\nWe're gonna go ahead and confirm\nand ran through an error because\nwe need to click Metamask I need\nto reset my account. So I'm\ngoing to do settings, advanced\nreset account.\nOkay, now let's go ahead\nMetamask has popped up again,\nwe're gonna go ahead and confirm\nit closed, the pop up modal, and\nwe got our little notification\nthere. And we can see an\nactivity we have that\ntransaction has indeed completed\nSo now if we go to active item,\nwe give it a little refresh.\nRight now we see our item listed\nevent. But the issue is that\nit's not confirmed yet. So what\nwe're going to need to do is\nwe're going to need to move our\nblocks by one. So in our NFT\nmarketplace, we're just going to\ncreate a new script, a new file\ncalled Mind dot Jas, just to\nmove our blocks once, and we're\ngoing to say const, move blocks,\nequals require dot slash utils,\nslash move blocks, we'll say\nconst blocks equals to const\nsleep amount equals 1000 async\nfunction mine, do await move\nblocks will do blocks as the\nparameter and then sleep sleep\namount will equal sleep amount.\nAnd this will be a script. So\nwe'll add our copy paste our\nthat same syntax we're doing\nhere just with mine. And now we\nwant to just mine these two\nblocks. So we'll run yarn, art\nhat run scripts. Mind that Jas\ndash dash network, local host.\nSo we're going to mine those two\nblocks. Now if we go back to our\ndatabase, we go back to active\nitems, we can see it's been\nupdated because now in our item\nlisted, that 2500 event is now a\nconfirmed transaction, and we\nget to confirm their excellent.\nSo that means since it's\nconfirmed back in our front end,\nwe'll give this a little\nrefresh. We can see the pup is\nnow worth 25 eath. Awesome. So\nwe're updating ngModel is\nworking perfectly. Excellent\njob. So now let's go to the\nreadme. If you own the NFT, you\ncan update the listing. That's a\ncheckmark. Excellent. Next, what\ndo we want it to do? If you\ndon't own it, you can buy the\nlisting. Okay, so let's go back\nto our website, let's switch\nusers to a different account,\nwe're probably going to want an\naccount that own some money. So\nlet's go ahead and send this\nother account some money\ntransfer between my accounts,\nwe'll send 100 eath to account\none, confirm on our hard hat\nchain here. Alright, great. Now\nwe can go ahead and switch to\naccount one, and we have 100\neath. Okay, great. As these\npops, each cost less than 100\neath. So that's gonna be more\nthan plenty for us to test this\nout. Let's go back to this box.\nBecause I think somewhere we\nsaid, we did a little handle\ncard click, if it's owned by the\nuser, have the modal pop up. If\nnot, let's do the by\nfunctionality. So to do the by\nfunctionality, we're gonna go\nahead and do another run\ncontract function. So we'll do\nconst run contract function,\nwe'll call this one by item. And\nthis will equal use web three\ncontract. And this is going to\nbe the ABI for the NFT\nmarketplace. API, the contract\naddress is going to be the\nmarket place address. The\nfunction name is going to be by\nitem, the message value is going\nto be the price of the NFT.\nBecause we need to send that\namount to buy the item. And then\nparams are going to be NFT\naddress, which is going to be\nthe NFT address. And the token\nID, which is going to be the\ntoken ID now that we have this\nby item on handle card click, we\ncan say okay, said show ngModel\nis true. Otherwise, we're gonna\ncall by item. And we're going to\ndo on air. Air is going to be a\nfunction where we're just going\nto console dot log the air and\nonsuccess. It'll be a function\nwhere we call handle by item\nsuccess. So we'll create a new\nhandler for this right\nunderneath handled cart click\nthe const handled by item\nsuccess equals a function. And\nfor this, we'll also have this\ndo a little notification. So\nonce again, we're going to\nimport we're going to import use\nnotification from web through UI\nkit. We're going to say const.\nDispatch equals use\nnotification. And then in\nhandled by item success. We're\ngonna say dispatch\ntype, success. Message. Item\nbought. Title will also be item\nbought. Then pole position will\nbe top right That's it. So\nhandle card click, if they own\nit, we're going to show that\nupdate listing ngModel. If they\ndon't already own it, someone's\ngonna buy it. So let's go back\nhere. And I'm currently on an\naccount that does not own these\nNF T's. Let's go ahead and click\nit. Our Metamask does indeed\nshow up for 25 eath. That's\ncrazy expensive. Let's go ahead\nand confirm item has been\nbought, we'll go ahead and click\nthat little x, we go to our meta\nmask, the transaction is\npending. And it's gone through.\nThis is fantastic. Okay, our\nhomepage is done, we can show\nrecently listed NF T's if not,\nyou can update the listing. If\nnot, you can buy the listing.\nAnd now it's time for our cell\npage. So the last thing that we\nneed to do is our cell page,\nlet's get this cell page, let's\nget this done pages, we have our\ncell NFT page, which right now\ndoes a whole lot of nothing. And\non our front end, we go here,\nthere's not a whole lot here.\nAnd actually, you can list your\nNFT in the marketplace, we also\nneeded to add withdraw proceeds.\nSo I didn't add that. But that's\nprobably going to be something\nwe're going to want to allow\npeople to do as well. So let's\nget started here. So we can\nremove this head stuff now that\nwe're adding that in our main\npage. And for us to submit a new\nNFT, we're probably gonna need a\nspace to add the address of the\nentity that token ID of the NFT\nand all this other stuff. So\nwe're gonna need a form to do\nthis, which guess what, we can\nalso grab a form from the web\nthrough UI kit as well. So we're\ngonna go ahead in our cell NMC\npage, we're going to import form\nfrom web three UI kit. And we're\ngoing to create a new form in\nour cell page. Now, the\nparameters we can add to our\nform, again, you can find them\nin documentation here, or we're\ngoing to add with one of the\nmain pieces is going to be this\ndata piece, which is going to be\nan object that has a list in it,\nof all the different fields, we\ncan put in our form. So maybe\nwe'll do our first one have a\nname of NFT address. That's\ngonna be of type text, excuse\nme, and these are all going to\nbe this is a list of list of\nobjects like that. Now, if we\nsave that, we go back to our\ncell page, we can now see an\nempty address and a little\nSubmit button. That right now\ndoes a whole lot of nothing. So\nwe have an NFT address, it'll\ntake a text, maybe we'll also do\nin foot width of 50 percent will have\nthe starting value be blank. And\nthe key of this will be NFT\naddress, what else do we need,\nwe're going to need to give it\nthe token ID so we'll say name,\ntoken ID, type is going to be a\nnumber value, we'll start off\nit's blank. And then the key for\nthis will be token ID. Next,\nwe're going to need the price.\nSo we'll say name will be price.\nIn eath. type will be a number\nvalue will be blank. And the key\nwill be price. And we don't need\nto have to form tags, we'll just\ndelete that second one and have\nit auto close with one tag. And\nthen in here, we'll do title\nequals sell your NF T ID equals\nmain form. So cool. So now we\ncan take an empty address, a\ntoken ID and a new price with\nthe title of cellular NFT.\nGreat, that looks really nice.\nRight now our form doesn't do\nanything, we probably want to\ngive it the functionality to\nactually do stuff. So we'll say\non Submit, and we'll have to\ncreate a new function to\nactually list our NF T's. So\nwe're going to create a function\ncalled approve and list we have\nto approve our marketplace to\npull the NFT from our wallets.\nSo we're going to create a new\nfunction, a sync function\napproven list, which is going to\ntake a data input parameter on\nour form, when we hit on submit,\nit's automatically going to pass\nthis data object to our approved\nlist function. So that's how\nwe're going to get the value of\nthe address the value of the\ntoken ID and the value of the\nprice. So in our async function\napproven list, do console dot\nlog, approving the contract, the\nNFT address is going to come\nfrom this data object. So it's\ngoing to be data dot data at\nindex zero, or zero with object\nhere is going to be our address\nthat input result.\nOur token ID is going to equal\ndata dot data. One because\nagain, this one is going to be\nour token ID that input result.\nAnd then the price is going to\nequal that ethers dot utils dot\nparse units of data dot data\nhave to the input result, comma\nether.to string. So we're going\nto get the price in eath. In\nhuman readable form, we're going\nto convert it to Aetherium\nreadable form. And then we're\ngoing to pass it as a string\nbecause this returns a big\nnumber, which we don't want. So\nwe have the NFT address, the\ntoken ID and the price of the\nnew listing, what we can do now\nis we can say const approve\noptions equals a little function\nhere, the ABI which is going to\nbe our NFT abi, which we need to\nimport, we need to import both\nethers from ethers. And we also\nneed to import the NFT abi, for\nits NFT ABI from dot dot\nconstants slash basic at A T dot\nJSON, I just copied and pasted\nfrom the NFT box, the contract\naddress is going to be the NFT\naddress, the function name is\ngoing to be approve params are\ngoing to be two, the marketplace\naddress, which we're going to\ndefine in just a second, and\nthen the token ID will be token\nID. Now the marketplace address\nin our NFT box, we're getting\nthis directly from index, an\nindex is getting it from our\ndatabase. Now we want our app to\nbe smart enough to be able to\ngrab the NFT marketplace itself,\nthe marketplace address. And if\nwe go to our constants, right\nnow, we actually have it in this\nnetwork mapping. So we're going\nto want to grab it right up at\nthe top by saying const\nmarketplace address equals\nnetwork mapping, network mapping\nof what of the chain ID of the\nentity marketplace address at\nthe zero with index. So network\nmapping of the chain ID, which\nwe're going to get honest chain\nID equals us Morales. Now chain\nId actually comes like we said\nit's a wax hex form for Morales.\nSo we're gonna have to convert\nthe chain ID to its string\nreadable version. So we'll say\nconst, chain string equals chain\nID. And we'll do a tertiary\noperator, if the chain ID\nexists, will parse int of the\nchain id.to string. So we'll\nparse it from its hex to a more\nreadable version, and then do.to\nstring. And then otherwise,\nwe'll just say we're on 31337.\nSo chain ID string. So in the\nnetwork mapping at the chain ID\nstring, dot NFT marketplace at\nindex zero, that's going to be\nour marketplace address. So we\ngot the marketplace address,\nthis is all we need to call the\napproved function on our NFT we\ncan now call running contract\nfunction for a proof. So we're\nactually going to do this a\nlittle bit differently. We're\njust going to say const. Run\ncontract function equals use web\nthree contract, you could import\njust run contract function, and\nthen pass all those options to\nit like what we're gonna do\nhere. Now we're just gonna say\nawait on contract function.\nBecause this is an async\nfunction await run contract\nfunction, we're gonna say params\nare going to be approve options.\nAnd we're gonna say onsuccess,\nwe're going to do something, I'm\ngoing to say on error, we're\nalso going to just do error,\nlittle arrow function, console\ndot log error. Now on success,\nonce we send this transaction,\nafter the Approve goes through,\nwe're going to want to call the\nlist function right underneath\nthis will call async async.\nFunction, handle approve\nsuccess. And this is going to\ntake the NFT address, the token\nID, and the price is it put in\nparameters. So once this run\ncontract function goes through,\nwe're going to call\nof handle proof success. And\nwe'll pass it the end of the\naddress, token ID and the price,\nwhich will say console dot log.\nOkay, now time to list and we'll\ndo the same thing. We'll do\nconst list options, equals and\nthis is going to be all the\noptions for calling the list\nfunction API is going to be on\nthe marketplace this time. So\nNFT market place abi, which\nagain, we're going to have to\nimport so I'm going to go back\nto NFT box. We're gonna copy\nthat line here, paste it in the\ntop. That's going to be the API\nfor that contract address. It's\ngoing to be the marketplace\naddress, which we already have.\nfunction name is going to be\nlist item. And the params are\ngoing to be NF T address of the\nNFT address, token ID of token\nID, price of price. And now we\nhave those options, we can do\nawait, run contract function\nwith params. Of list options,\nwill say onsuccess arrow\nfunction, handle list success,\nwhich is a function we haven't\nmade yet. It will say on air\nerror. And we'll just say\nconsole dot log error. Okay, so\nlet's make this handle list\nsuccess handle one spell handle\ncorrectly handle the success,\nthis will be an async function.\nAnd this is also going to call\ndispatch and make a little\nnotification. So we're going to\ngrab that from web three UI kit,\nuse notification. We'll say\nconst dispatch equals use\nnotification. And now down in\nhandle the success say dispatch,\ntype success. Message NFT\nlisting, title NFT listed\nposition. top bar, and cool. And\nwe're also gonna have to grab us\nMorales from react Morales. So\ndo import us Morales from react\nor else. So let's import this\nnetwork mapping. Import network\nmapping from dot dot slash\nconstants slash network mapping\ndot JSON. Because I spelled\ncontract address wrong again,\ngood our front end we'll give it\na refresh us web three contract\nisn't defined. Let's get that\nfrom react moralss. Well save\nthat refresh our front end. And\ntada, we're good to go here.\nAlright, now to test this out,\nwe're going to want to do is\nwe're going to want to create\nanother script here. So we're\nback in our heart at NFT\nmarketplace, we're looking at\nour scripts. And we're going to\ncreate a new file just called\nmint.js. So we're not going to\nlist this time, we're just going\nto mint it just going to mint an\nNF t so we can list it ourselves\non the UI. And actually, we can\njust copy our mminton list code,\npaste it into here, and just\nremove the approval and the\nlisting code. Boom, remove that,\nremove this, remove this. And\nthat's all we need. And now\nwe'll just change the name to\nmint. Well, we can remove price\nas well. And we'll change this\nto mint. And that's it. Now we\nhave a script that we can call,\nwell, we'll just mint an NFT, we\ncan also get rid of the NFT\nmarketplace. Actually, we will\nprobably want the token ID so we\ncan know what it is. So let's do\nconst token ID equals. So let's\nactually get the receipt we'll\ndo const mint TX receipt, but\nthe receipt, I can there equals\nthat. And then I'm just going to\ncopy this from the mminton\nreceipt. Cons token ID equals\nthis, paste it into our mint.js\nand then a console dot log. Got\ntoken ID, string interpolates\ntoken ID, hard hat, run scripts,\nmins dot j s dash dash network,\nlocal host. And we're going to\nmint an NF T. Got token ID six\nmeans we know m token ID six, we\ncan list this entity. Let's also\nadd the address. Let's do\nconsole dot log NFTL. And if the\naddress is going to be we'll do\nstring interpolation.\nAnd you know what? Let's make\nthis again. Mint dot j s okay\ncool. Got token ID seven and if\nthe address this so what we can\ndo now we'll grab this NFT\naddress. So from account one,\nlet's go to Account three\nbecause that's the account that\nI've done my imports on now when\nyou switch accounts, we're going\nto want to refresh the page as\nthe address seven 0.6. Submit\nMetamask pops up. Give\npermission Yes. Okay, now it's\ntime to list you now have one\npen, okay. Local host list item.\nWe can see all the data and\neverything. Okay, let's go ahead\nand confirm NFT listed Okay,\nokay. Okay. Okay. So this is\ngood. Now to get Morales to\ncatch up to speed back in our\nnode. Let's just go ahead and\nrun yarn, RT hat run scripts,\nmine dot j s dash dash network,\nlocal host. We're going to mine\nthose two blocks. And now if we\ngo to our item listed, we'll\ngive this a little refresh. Go\nto active item. We can see\nthere's a new item listed for\n0.6 eath. In our database. This\nis fantastic. Now that we've\nlisted this, if we go back to\nnow let's make And let's move on\nto one more. Let's list the\nsecond one, just to see that\nit's actually working. Okay,\ntoken ID eight. Let's grab this\naddress. Let's give this a\nrefresh. paste this in token ID\neight. We'll do 0.999. Let's\nsubmit. we'll approve this. Yes.\nThen we'll send it. Yes. Okay,\nnow let's go ahead and mine two\nblocks. So I'm just going to hit\nup and go back to mine will run\nthe mining, moving blocks. Okay,\ngreat. Now, if we go back home,\nwe'll see there are three NF T's\nnow listed, we have the original\none, that we have those two that\nwe just listed eight, and seven\nfor 0.6 and 0.999. Listed on our\nNFT marketplace. This is so\nexciting. Our listing is working\ncorrectly, okay. Now, due to the\nfact that this lesson is already\nincredibly long, actually\ndecided to cut the part of that\nand then withdraw a bit, because\nwe don't really learn anything\nnew there. However, feel free to\njump back in to get every bit\nassociated with scores, where we\nwill have that withdrawal\nfunctionality for you if you\nwant to implement it. Otherwise,\nfeel free to skip and move on\nahead. This is incredibly\npowerful. And you should be\nincredibly excited about\nyourself. If you've made it this\nfar. This is awesome. You just\nmade a decentralized marketplace\nand then built a front end on\ntop of it to allow anybody to\ninteract with your marketplace.\nEasily. Huge, huge.\nCongratulations here. Oh, this\nis a perfect time to go take a\nbreak and celebrate. And this is\na great time to ping me on\nTwitter to ping me on Twitter\nsaying hey, Patrick, I just\ncompleted the NFT marketplace.\nFull Stack front end part of\nyour Free Code Camp course, I\nnow know how to build full stack\nfront end on top of my smart\ncontract applications. And be so\nso pumped with yourself because\nthis is so awesome. I can't\nunderstate how excited I am that\nyou've made it this far, you are\nlearning and working with a ton\nof technologies, solidity smart\ncontracts, and front end you are\ndoing full stack you were doing\na lot of stuff here. So you\nshould be really proud of\nyourself. huge congratulations,\nbe sure to absolutely give\nyourself a pat on the back. And\nthen get ready to continue to\nour next section.\nNow that we've done all of this\nusing our Morales back end, I'm\nabout to switch it up on you,\ninstead of indexing all of our\nevents with a centralized\nserver. Now we're going to learn\nhow to build this using the\ngraph, which is a decentralized\nevent indexer that we can use, a\nlot of the code is going to be\nexactly the same. So instead of\nus starting from a new, what\nwe're going to do, first of all\nwe can we can close all our\nlocal stuff, we can close all of\nthese things, we can close all\nof our terminals finally, which\nis really exciting. And in this\nfolder, what we're going to do\nis we're actually just going to\ncopy everything into a new\nfolder. So I'm going to CD down\na directory, we're going to make\na new one called next Jas. And\nif T marketplace, the graph,\ndash FCC, and all the code for\nthis section is going to be here\nfor front end the graph indexer\nwe're gonna have to make another\nrepo and we'll get to that in a\nlittle bit. For all the changes,\nit's going to be in this section\nhere. So what we're going to do\nis we're going to make this new\nfolder, and we're going to do\ncopy dash R. Next, Jas and ft\nmarketplace FCC into next Jas\nNFT. Marketplace, the graph FCC.\nSo we're going to copy\nrecursively, everything that's\ninside that folder we just\ncreated into this new one that\nwe're going to make a lot of\nadjustments to. And this might\ntake a little bit of time to run\nbecause we've got a lot of stuff\nin this folder. And Alright,\nonce we've done that, we can cd\ninto this next Jas and ft\nmarketplace, the graph FCC and\ndo code period and open this up\nin a new code editor. Or as\nalways, you can do File Open\nfolder to open it like that. Now\nthat we're in here, we're going\nto learn how to do this exact\nsame project, instead of using\nmirallas. But using the graph,\none of the things that we're\nfirst going to do is we're\nactually going to deploy our\ncontracts to rink B. So we're\ngoing to grab our marketplace,\nthat soul, pull this over, we're\ngoing to grab our hard hat\nmarketplace dot soul project,\npull it over. And first, we're\ngoing to run our deploy script\non rink v. So hopefully, you've\ngot all your deploy stuff set up\ncorrectly, so that all the\narguments can go through\ncorrectly for rink v as well. So\nwe're gonna go ahead and run\nthis yarn, hard hat deploy dash\ndash network Rinkeby. And to\nmake sure that it's going to\nwork for Rinkeby. Let's check\nour hard hat config. Okay for\nnetworks, looks like I have my\nRigby stuff in here for\nnetworks. Okay, I've got my RPC\nURL, which I'm getting from my\nenvironment variables. If I have\na private key, I have a private\nkey, which I'm also getting from\nenvironment variables, I have a\nchain ID block confirmations and\nsave deployments. So let's go\nahead and run this. Now we're\ngoing to go ahead and be\ndeploying the NFT marketplace to\nthe Rigby network. And our\ndeploy script also has an ID\nsome verification. So we can\nverify this as well, you can't\nreally follow along with this\nsection without deploying a\nmarketplace to rink be here. So\ndeploy to rank B, or whatever\ntest net is recommended in this\nlesson 15 section, and go from\nthere. Alright, great, we've\ndeployed our NFC marketplace.\nNow we're gonna go ahead and\ndeploy our basic NFT. And once\nthese are done deploying, we can\nstart updating our front end\ncode to work with the graph\ninstead of mirallas. Okay, we've\nverified everything to which\nlooks great. Now we're going to\nverify our basic NFT. And we've\nhave it verified. Awesome. So\nnow we have an NFT marketplace\ndeployed to ring P, and a basic\nNFT deployed to rink B. And both\nof them are verified. So be sure\nto take note of those, because\nwe're going to need them when\nwe're moving over to our the\ngraph section. So now let's grab\nour code editor titled next Jas\nand ft marketplace, the graph.\nAnd let's get going. Now, we\njust deployed that to rink B.\nBut we forgot to add some code\nin here to update our network\nmapping. However, if we go back\nand we open back up code dot\ndot, next Jas NFT marketplace,\nFCC, in the network mapping in\nhere will now have a new entry\nfor rink B, if we did it\ncorrectly, let's copy this\nnetwork mapping and paste it\nover in our network, our next GS\nand ft marketplace, the graph\nsection, or you can just\nmanually add your new entry.\nRight. So you want to add\nnetwork ID for network\nmarketplace. And the address of\nthat network marketplace that\nyou just deployed, is we're\ngoing to delete this Cloud\nFunctions bit. Goodbye, because\nsince we're not working with the\nserver anymore, there's not\ngonna be any cloud functions or\nany back end to run. So we're\ngonna move that to trash\ngoodbye. Next, we don't need FRP\nanymore, because we're not going\nto be connecting our local\nblockchain to the graph, we're\nonly going to be working with\nthe test net here. So let's go\nahead and delete that. Goodbye,\nwhat's next in our pages, and\nour app dot j s. Right now we're\nconnecting to a Morales provider\nlike this, we're going to switch\nthis back to initiate allies on\nMount, this is going to go back\nto being false, we're no longer\ngoing to connect to our Morales\ndatabase like this, we're just\ngoing to use the hooks again.\nNow with that the only thing\nthat's going to change is our\nindex.js. Right now, in our\nindex.js, we're getting our list\nof NF TS from our Morales query.\nSo we're going to change this,\nlet's update our readme. So\nwe're gonna say instead of\nreading the events from ralis,\nwe will first off we're going to\nindex them with the graph. And\nthen we're going to read from\nthe graph. So the question is,\nwhat is the graph.\nSo the graph is going to be a\ndecentralized layer for storing\nevent data. So there are all\nthese blockchains and all these\ndifferent storage networks. And\nthe graph is and the graph is a\nnetwork of different nodes that\nread from blockchains and index\nthis data, and it exposes an API\nfor us to call we can read that\ndata. Rather than just myself.\nWe actually have nattered\nAbbott, who can explain it a lot\nbetter than I can take it away.\nAnd at.\nFirst, I'd like to thank Patrick\nfor creating such a wonderful\neducational resource and\ninviting me to be a part of it.\nMy name is Nadia dabit. I'm a\ndeveloper relations engineer\nworking with the graph. The\ngraph is an indexing and\nquerying protocol for\ndecentralized networks like\nAetherium IPFS, dozens of other\nEVM compatible networks, as well\nas near and then the future\ncosmos and Solana. Using the\ngraph developers can build and\npublish open API's called\nsubgraphs that they can then use\nin their applications to enable\nbetter querying capabilities of\ndata stored on these networks,\nincluding features like\nfiltering, sorting, relational\ndata, and full stack search.\nsubgraphs live in between the\nblockchain and the UI providing\nan important piece of software\ninfrastructure, a flexible\nperformant and decentralized API\nlayer, and the traditional tech\nstack databases, servers and\nAPI's query filter, sort\npaginate group and join data\nbefore it's returned to an\napplication, usually via some\ntype of HTTP request. These\ntypes of data transformations\nare not possible when reading\ndata directly from Aetherium or\nother blockchains. Before the\ngraph teams had to develop and\noperate proprietary indexing\nservers. This required\nsignificant engineering and\nhardware resources and broke the\nimportant security principles\nrequired for decentralization,\nhow we interact with and build\non top of blockchains it's much\ndifferent than what we are used\nto in the traditional tech\nstack. In a blockchain data\nisn't stored in a format that\ncan be easily or efficiently\nconsumed, or retrieved directly\nfrom other applications or front\nends. The problem is that you\nneed to have the data indexed\nand organized for efficient\nretrieval. Traditionally, that's\nthe work that databases and web\nservers do in this centralized\ntech stack. But that in indexing\nlayer was missing in the web\nthree stack. Let's take a look\nat a couple of other examples of\nindexing in the real world.\nSearch engines like Google crawl\nthe internet indexing relevant\ndata making it available for\nusers to search via their web\ninterface and other API's.\nWithout this indexing layer,\nit'd be hard for us to know\nwhere and how to find relevant\ninformation across the web.\nAnother similar analogy is a\nlibrary. Using an indexing\nsystem like the Dewey Decimal\nSystem, we know where to find\nthe book that we're looking for\nwithout having to go through\nbook by book looking throughout\nthe entire library. The graph\nserves over 2 billion queries\nper day to many different types\nof web three applications,\nincluding apps in the defy\ngaming and FC space. Before we\ndig into any code, let's take a\nlook at how to build a sub\ngraph. To get started, you would\ngo to the graph.com and create a\nnew sub graph and the graph user\ninterface. You would then use\nthe graph CLI to scaffold out an\nempty sub graph boilerplate that\nyou can then update with your\nown contract information. In\nyour subgraph configuration, you\nwould define things like your\ndata model, the network, the\ncontract addresses and other\nconfigurations that are specific\nto the data that you would like\nto index. For our data model, we\nuse Graph QL, schema definition\nlanguage defining top level\ntypes as well as fields within\nthose types. When we're ready to\ndeploy our subgraph, so we can\nbegin testing it out and using\nit in our application, we can\nuse the graph CLI running the\ndeploy command. Once the\nsubgraph is deployed and the\ndata begins to be indexed, we\ncan start testing it out using\nthe graphical interface directly\nin the graph dashboard. When\nwe're ready to start queering,\nour sub graph from our\napplication, we can use the API\nURL that's been given to us by\nthe graph along with any Graph\nQL query. If you'd like to learn\nmore about the graph, check out\nthe graph.com as well as Graph\nProtocol, Twitter, the docs at\nthe graph.com/docs, or our\nDiscord at the graph.com/discord\nThanks matter. And now that we\nhave a better idea of what the\ngraph is, we can actually start\nbuilding with it. Now if we were\nto try to run this app as it is,\nit obviously would fail, right,\nbecause index.js, right now is\nreading from mirallas instead of\nfrom the graph. So like it says\nin our readme, first thing we're\ngoing to need to do is we're\ngonna need to index from the\ngraph, and then we can just this\nproject to read from the graph.\nSo let's go ahead and learn how\nto build our sub graph. In order\nfor us to tell the graph network\nto start indexing the events\nfrom our contract, we're gonna\ngo to graph.com, we're gonna go\nto products. And we're going to\ngo to sub graph studio, if you\ngo to products, the first thing\nyou see is the Graph Explorer,\nthese are already existing sub\ngraphs. And if you go through\nhere, you'll see a lot of\nincredibly popular decentralized\nprotocols all have different sub\ngraphs, hosted service is going\nto get discontinued at some\npoint. So we're going to skip\nthere. So let's go to sub graph\nstudio, this is going to help\nenable us to create a sub graph\nfor other nodes to start\nindexing our events. So we're\ngonna go ahead and connect our\nwallet with meta mask. And I'm\ngoing to choose account one\nhere, next connect, and we're\ngoing to want to switch off of\nHardhead. Local, over to the\nRinkeby test network. And I'll\ngo to Account one here. And\nwe're going to get a signature\nrequest from the graph summary\nto the website that we just\nbuilt. The subgraph website has\nsome signings functionality with\na database on the back end. So\nwe're seeing in real life,\nexactly the methods that we just\nused. So instead of signing with\nMorales, they're just have their\nown custom sign in here. So\nwe're gonna go ahead and sign in\nso that the graph website knows\nthat it can interact with us.\nAnd we can go ahead and enter\nour email if we want. I'm gonna\ngo ahead and skip. And you'll\neven get a little notification\nhere saying only subgraphs\nindexing Aetherium or main net\nor Rigby can be created in\nsubgraph studio. So let's go\nahead and create a subgraph. So\nwe're going to pick a cerium\nRigby and the subgraph name is\ngoing to be NFT marketplace.\nWe'll go ahead and hit Continue.\nNow, this is going to be our\ndashboard for creating our sub\ngraph. And there's a ton of\ninstructions over here and\ndocumentation that we can view\nto get started, I'm going to add\nthis documentation to the GitHub\nrepo associated with this\ncourse. So this NFT marketplace\nsub graph is going to need its\nown git repository itself. So\nwhat we're going to do back in\nhere is we're going to CD down,\nwe're going to make a new\ndirectory, and we're going to\ncall it graph. And if T\nmarketplace, FCC, we're going to\nopen that up as well. So code\ngraph NFT, marketplace, FCC, or\nfile open graft code marketplace\nFCC, and in this window, we're\ngoing to build our subgraph.\nLocally, we're going to build\nour subgraph and push it up to\nthe subgraph studio. And in\nhere, there's a whole bunch of\ninstructions that we can follow\nalong with to go ahead and\ninstall. The first thing that we\nneed to do is install the graph\ncommand line interface. And we\nwant to install this globally.\nSo I'm going to copy this part\nhere. Come back to my terminal\nOh, yarn, global ad and paste\nthat in. It's this command line\nthat's going to help us build a\ngraph and build instructions for\nthe graph to actually start\nindexing our events. Now that\nwe've installed the globally, we\ncan initialize our graph code.\nSo we can copy this line. And\nwe'll run graph a knit dash dash\nstudio NFT marketplace and hit\nenter. The protocol is going to\nbe Aetherium, or subgraph. Slug\nwill be NFT. marketplace. We\nwant the directory to be here,\nbut it's saying directory\nalready exists. So we'll just\ngive it NFT marketplace. And\nthen we'll move it after this.\nAnd this is on the Rinkeby. Test\nnet. And now we want to give it\nthe contract address. So we want\nto grab that address that we\njust deployed. And it should be\nnow in our network mapping. So\nwe're going to grab that\ncontract address that we just\ndeployed, and paste it in here.\nLike so. And since we've already\nverified on ether scan, it\nautomatically grabs the ABI for\nus from ether scan, we'll give\nit the contract name, which is\nthe NFT marketplace. And it's\ngoing to give us a whole bunch\nof boilerplate code in this NFT\nmarketplace directory. And this\nmight take a couple of minutes.\nAlright, awesome. So now that\nit's done, we see subgraph NFT\nmarketplace created in NFT\nmarketplace. Now, I don't want\nit to be in the seller folder.\nSo what I'm going to do is I'm\ngoing to move it down a\ndirectory, but you can leave it\nwhere it is, if you want, I'm\ngoing to say move, I'm going to\nsay move NFT marketplace, star\nto dot slash. Now everything\ninside of NFT marketplace will\nbe in this current directory.\nAnd then if the marketplace will\nbe empty. So with that, I'm\ngonna go ahead and delete. And\nif the marketplace. Alright,\ngreat. Now let me walk you\nthrough exactly what's going on\nhere and what these files are\nthat we just created. So our\nfirst folder is going to be\nAPI's. In order for the graph to\nindex and read our contract\nindex our events, it's going to\nneed the ABI of our events. So\nwe've got the ABI of our entire\nmarketplace, from ether scan, if\nwe didn't verify an ether scan,\nwe can just create this API\nfolder ourself and add the NFT\nmarketplace JSON in here. Now we\nhave this generated folder. This\nis an auto generated file. He\neven says at the top, do not\nedit this file directly. You can\nkind of think of this as the\nbuild folder, or where we\ncompile graph code. Node\nmodules, of course, is going to\nbe node modules and\ndependencies. SRC is going to be\nwhere we define and we tell the\ngraph, how to actually map and\nhow to actually work with our\ncontract. And it is a TypeScript\nfile. So for all of you who have\nbeen just doing this in\nJavaScript, I will have to teach\nyou a little bit of TypeScript\njust to get through this part.\nThen we have networks dot JSON,\nwhich gives us all of our\nnetwork information about which\nnetworks, what are the\naddresses, and what are the\ndifferent contracts that we're\ngoing to be indexing, package\ndot JSON, which of course is\njust a normal package dot JSON.\nAnd it's got some graph scripts\nalready built in schema dot\ngraph. QL is going to be our\nGraph QL schema. So this is also\ngoing to be how we tell the\ngraph how to actually work with\nour events and index our events.\nAnd if you're familiar, the\nschema follows the Graph QL\nsyntax. So if you've ever worked\nwith Graph QL, before, it's\ngoing to be the exact same way,\ngraph. QL is a query language\nfor your API. And instead of\nbeing kind of a relational\ndatabase, it can query in a more\ngraph type way, I'm not going to\ngo too deep into how it actually\nworks behind the scenes. But if\nyou want to learn more, I'm\ngoing to leave some docs in the\nGitHub repository associated\nwith this course, the sub graph\ndot Yamo tells our subgraph how\nto combine all the files\ntogether. So we have data\nsources, data sources, where\nthey're coming from different\naddresses, different entities or\nevents, the API's where to grab\nour files from different event\nhandlers, which we'll talk about\nin a minute. And then the main\nfile, which is going to be our\nmapping.ts, we have a TS config,\nwhich is a configuration file\nspecific to TypeScript. And then\nof course, we have our yarn dot\nlock. With all this information\nwith all this code, we are now\ngoing to update all this code to\ntell the graph to start indexing\nour events. So we can read our\nevents from the graph in a\ndecentralized context, as\nopposed to from a centralized\ndatabase. And after we build\neverything, we're going to run\nthrough this off and deploy\ncode, which is to authenticate\nourselves, and then deploy our\ncode to the graph to start\nindexing. So without further\nado, let's jump in. And let's do\nthis. So one of the first things\nI'm going to do, I'm going to\nadd a highlighter for these dot\nGraph QL files. So in our\nextensions, we're gonna look at\nGraph QL. And we're gonna stall\nthis Graph QL extension. Now\nthat we've installed it, if we\ngo back to schema dot graph, QL,\nwe've got it with some colors\nnow, which is exciting. So this\nschema dot Graph QL is going to\ndefine what entities we have in\nour contract if we were to be\nanalogous to mirallas. These are\ngoing to be how we're going to\ndefine what our tables are going\nto look like. And these are\ngoing to be our events. plus\nthat active item table that we\ncreated. So we're not going to\nhave an example entity though,\nwe're going to have a type\nactive item. And this is going\nto be an add entity. So these\nare the different types we have\nin our graph that we can\nactually query on, our main\nthing that we're going to want\nto query on is same as before,\nit's going to be our active\nitems. And then inside of our\nactive items, we're going to\ntell the graph, what parameters\neach one of these active item\ntypes has, well, it's going to\nhave an ID of type ID. So the\nvariable is ID of type ID. And\nyou can read more about the\ndifferent types in the graph\ndocumentation. And this\nexclamation mark means it must\nhave an ID. So every active item\nneeds to have and will have an\nID, we'll say there's going to\nbe a buyer, which is going to be\nan address, so that's going to\nbe a byte and the buyer could be\nblank, right? It could be the\n0x 000, we're going to have all\nof our active items have a\n0000 dot.if. If no one has\nbought yet, we're going to have\na seller, which of course is\nalso going to be a bytes because\nit's going to be an address,\nwe're going to have an NFT\naddress. So the address of the\nNFT, which will also be bytes,\nwe're going to have a token ID\nwhich isn't going to be bytes,\nthis is going to be of type big\nint, and then we're going to\nhave a price, which is also\ngoing to be a big int. Now price\nwe're going to leave as not\nrequired for price, we're just\ngoing to have price be nullable.\nSo price can be null. So we have\nan active item. Awesome. What\nelse are we going to need? What\nwhat other tables do we have in\nMorales? Well, we're going to\nneed type item listed. And this\nis going to be at entity is\ngoing to need an ID, it'll have\na seller. Whenever an item gets\nlisted, it's going to have a\nseller right, which is going to\nbe a bytes again. And if the\naddress the address of the NFT,\nwhich will also be bytes, the\ntoken ID, which is going to be a\nbig int, and then the price,\nwhich will also be a big end,\nwe're gonna need a type item\ncancelled at entity\nwhich will have an ID seller an\nNFT address. And a token ID will\nbe a big end. And then last type\nitem bought will be in that\nentity is going to have an ID\nID. It's going to be a buyer\nbytes.\nAnd then of T address a bytes\nand a token ID again, and then a\nprice of beginnt. And with\nJustice Information, we've\ndefined what we want our\nsubgraph to keep track of wants\nto keep track of item bought\nevents, item, cancelled events,\nitem listed events. And then\nwe're going to make this new\nactive item table similar to\nwhat we did with mirallas. And\nit's going to be some function\nof these these other three\nevents. And now we're done with\nour schema dot graph. QL.\nAwesome. So what do we do now\nwe're going to need to tell our\nsub graph to actually listen for\nthese events. So what we can do.\nSo what we want to do to tell it\nhow to listen for these events,\nis we're going to go to src\nmapping.ts. It's this mapping.ts\nfile that's going to tell our\nsubgraph how to actually map and\nhow to actually store all the\nevent information that we have.\nIf you look in it right now, it\nmight even give you kind of a\nsample event. So it says Export\nfunction, handle item event.\nThis is what Maya says right\nnow, it takes as an input\nparameter event item bot. So\nthis is saying whenever an item\nbot event occurs, do this handle\nitem bot function. So anytime\nitem bot happens do this handle\nitem bot. And we're actually\ngetting this item bot from our\ngenerated NFT marketplace from\nsome generated code. In the\ngraph. If we run graph code Gen.\nThis graph code Gen command\ngrabs all the stuff we have in\nthe schema dot Graph QL and puts\nit in this generated file. Now\nthat I've run graph code Gen,\nyou'll see in here there's an\nitem bot class, you see there's\na schema, that type script. And\nactually we can even find that\nnew active item class that we\ncreated in our schema. So\nanytime you update schema dot\nGraph QL, you're always going to\nwant to run graph code Gen, so\nyou can update those types. And\nif this failed, it means that\nyou messed up something in your\nschema dot Graph QL. Now in our\nmapping.ts, we're actually\nimporting item bought item\ncancelled item listed from\ngenerated and if the marketplace\nand if the marketplace from our\ngenerated code. These are going\nto be our events. And we're not\ngoing to need to do anything\nwith the NFT marketplace. We're\njust going to need our event\ninformation. For now. Let's go\nahead and just delete everything\ninside our handle item bot or\nwhatever sample is given to you.\nSo we're importing a or events\nfrom our generated code. And\nthen we have this line here,\nwhich we're going to change in a\nsecond. So again, we have these\nthree functions handle item\nbought, handle item canceled and\nhandle item listed. Whenever we\nget an item bought event, we're\ngoing to do this function.\nWhenever we get an item canceled\nevent, we're going to do this\nfunction. And all this code is\ndefined in our sub graph dot\nYamo. You can see the different\nentities here in a bot item\ncancelled item listed, and the\nevent handlers. So it says,\nokay, anytime this specific\nevent gets fired with an index\naddress, an index address index,\nYouTube 36 in YouTube had six\ncall handle item bought, which\nagain, we're getting in here\nhandle item. But so that's\nexactly how this works. So let's\nfigure out what to do when an\nitem bought event triggers. And\nI think that item bought item\ncancelled item lists it is a\nlittle confusing. So I like to\nchange this to item bought as\nitem bought event item cancelled\nas item cancelled event item\nlisted as item listed event. So\nI'm just changing the names of\nthese three that are imported\nfrom NFT marketplace. And now\nI'm going to change event item\nbot to item bought event. Event\nitem cancelled to item cancelled\nevent and event item listed to\nitem listed event. Okay, great.\nAnd we're just going to remove\nthis line for now. And we also\ndon't need this line at the top\nat the beginning, we will in a\nminute, but we'll delete it for\nnow. So here's our minimalistic\ncode here. So whenever we list\nan item, what do we need to do?\nWell, we need to save that event\nin our in our graph. And then we\nalso need to update our active\nitem, exactly as we did with\nMorales. So first thing that\nwe're going to need to do is\neither get or create an item\nlisted object. And something\nthat we need to know is that\neach item needs a unique ID. And\nwe actually need to create that\nID. So one of the first things\nI'm going to do is going to\ncreate a function called Get ID\nfrom event params. And it's\ngoing to take a token ID and\nhere's where TypeScript comes\ninto play a little bit. In\nTypeScript, we actually need to\ndefine the types of our\ndifferent parameters. So token\nID is going to be a big int. And\nwe'll also take an NFT address,\nwhich will take in a type of\naddress. And we also need to say\nwhat return type or function is\ngoing to give, which we're going\nto return a string, we're going\nto create an ID from event\nparams. And it's just going to\nbe a combination of the token ID\nand the NFT address. The\ncombination of these two will\ngive a unique ID for each one of\nthese types of event. So we're\njust gonna say return token ID,\nand token ID has a function\ncalled to x string, I'm gonna\nsay plus, and if T address.to X\nstring, like so. And big int an\naddress, we need to import from\nat Graph Protocol slash graph\nTX. It already imported big\nenough for me. So I'm just going\nto add address in here is the\ntwo special types that come from\nthe graph. And then string is\nbuilt into TypeScript. Now that\nwe have a way to get a special\nID for each item in our function\nhere, we have to now either get\nor create a new item listed. Now\nright now we have an item. But\nevent we don't have an item\nbought object. So the item\nbought object is going to be\nwhat we save, the item bought\nevent is just the raw event. So\nwe have to create an item bought\nobject from our item bought\nevent. And in TypeScript, these\nare going to be two different\ntypes. So we have to import\nthese item by objects. So those\nactually get auto created from\ngenerated schema. In here we\nhave active item, we have item,\nwe have an item bought class, we\nhave an item cancelled, etc. So\nwe're gonna have to import those\ntypes from there. So we can say,\nimport, item listed, comma,\nactive item, item bought an item\ncancelled from dot slash,\ngenerated slash schema. Let's go\nahead and get or create an item\nbot object. So we'll say let\nitem bot equals item bot dot\nload. And this is how we load an\nitem we load its unique ID by\ncalling this get ID from event\nparams dot load, get ID from\nevent params. And we can pass\nevent dot params. That token ID\nbecause an item bot event is\ngoing to have a token ID and\nevent that params.nf T address.\nNow I know we probably should\nhave done handle item listed\nfirst but we're doing item bot\nfirst. Since we're buying an\nitem, we probably will also have\nan active item as well, right?\nWe haven't made yet an item\nlisted. But this is going to be\nsimilar to what we did with\nMorales. So we know that every\ntime we live Certain items will\nalso list an active item. So\nwe'll say let active item equals\nactive item that load. And we're\ngoing to do this exact same\nthing. So I'm just going to copy\npaste it into here. And even\nthough these are going to have\nthe exact same ID, it doesn't\nmatter because they're the same\nID across different types. Now\nwe're gonna say, if there is no\nitem bot, we'll say item bot\nequals a new item bot object.\nAnd we'll give it an ID, which\nis going to be exactly our ID\ngiving parameter here, get ID\nfrom events, and pass that\nthere. So we're going to create\na new item bought here. And now\nwe're going to update all its\nparameters. So back in our\nschema dot graph, QL. An item\nbought has an ID, buyer address,\ntoken ID and price. So we're\ngonna say, item bought, that\nbuyer equals event dot params\ndot buyer, item bought.nf T\naddress equals event.params.nf T\naddress, item bot, dot token ID\nequals event dot params dot\ntoken ID. And that looks good.\nAnd our active item will be from\nitem listed, and item listed\nshould give it all these\nparameters, except for it won't\nhave a buyer. So we just need to\nupdate the buyer on our active\nitem. So we'll say active item,\ndot buyer, we'll do a little\nexclamation mark. This is some\nTypeScript stuff, saying we will\nhave an active item. Don't worry\ntoo much about it if you're\nunfamiliar with TypeScript. And\nwe'll say that equals event dot\nparams dot buyer. And now\nsimilar to Morales, we're gonna\ndo item bot dot save and active\nitem with an exclamation mark\nagain, that save and this is how\nwe're going to save this item\nbought event as an object in our\nthe Graph Protocol. And also,\nwe're going to update our active\nitem. So this is our full\nfunction of handle item bought.\nWhenever somebody buys an item,\nwe update a new item bought\nobject, and we update our active\nitem to be a new buyer, we're\nnot going to delete it from our\nactive items list, we're just\ngoing to update it with a new\nbuyer. And we'll just say if it\nhas a buyer, that means it's\nbeen bought. If it doesn't have\na buyer, that means it's still\non the market. Awesome. So now\nthat we've done our handle item\nbot, let's now do our handle\nitem listed, which will\nhopefully make our handle item\nbot a little bit easier to\nunderstand. So for handle item\nlisted, we're going to do the\nsame piece here. So we're going\nto say let item listed equals\nitem listed dot load. And we're\ngonna do the exact same thing as\nwhat we did for all these will\ndo get ID from event params.\nLike so, get a different event\nparams. And we're gonna say let\nactive item. And this line is\ngoing to be exactly the same as\nup here. So I'm just going to\ncopy paste. So we're saying,\nokay, great, grab our item\nlisted, and grab our active\nitem, see if those objects\nalready exist. I will say if\nthere is no item listed, which\nthere shouldn't be, we'll go\nahead and create a new one,\nwe'll say item listed\nequals new item listed. And its\nID is going to be from this\nfunction that we created are\nunique IDs. Now, unlike what we\ndid above, we're also going to\nsay, if there is no active item,\nthen we're going to create a new\nactive item, right? Because\nwe're listing an item, it\nshouldn't be an active item. Now\nthis functionality is going to\nmake a lot more sense here,\nright? Because if we're updating\nthe price of an item, active\nitem will already exist. If it's\na brand new listing, though,\nactive item will not exist. So\nwe'll say okay, if it doesn't\nexist, okay, that means it's a\nbrand new listing, we'll say\nitem listed equals new item\nlisted, and then we'll give it\nan ID. That's the same ID\nmethodology, paste that in. So\nnow all we got to do is update\nthese new objects. So I will say\nitem listed that seller equals\nevent dot params dot seller. And\nI'm just going to copy paste\nthis line. Because this is just\ngonna be active item dot seller\nnow. Oops, see me and then it'll\nmake this active item. active\nitem instead of item listed. And\nwhat else comes with item\nlisted? Well, let's go to the\nschema item listed has an NFT\naddress, token ID and a price.\nSo okay, so let's add those.\nitem listed dot NFT address\nequals event.params.nf T\naddress. Copy paste this line\nbecause it's gonna be the be the\nexact same for active item. Now\nitem listed that token ID equals\nevent dot params dot token ID.\nCopy paste this line. Same thing\nfor active item. Item listed dot\nprice equals event dot params\ndot At price, copy, paste this\nline for active item. And then\nwe just say those two. So item\nlisted that save active item.\nSave. So in our protocol here,\nif it's already been, if there\nalready is an active item, then\nwe just go ahead and we get that\nactive item. This would be for a\nlisting that we're updating. If\nnot, we make a new one. We\nupdate it with whatever came in\nthrough the event. And then we\nsave it to our graph protocol.\nOkay, perfect. Now we only have\none left, item cancelled. So\nlet's figure out how to do item\ncancelled, it's going to look\nreally similar to item bought.\nSo we'll say let item cancelled\nequals item cancelled that load.\nAgain, we're going to do this\nexact same Id get our that we're\ndoing for everything, we'll say\nlet active item equals, and I'm\ngoing to zoom out a little bit\nless active item equals active\nitem dot load. Or do this exact\nsame thing here. Boom. And then\nwe're gonna say, if not item\ncancelled, which there shouldn't\nbe because this should be the\nonly item canceled event here.\nWe'll say item cancelled, equals\nnew item cancelled. And we're\ngonna give it an ID using the\nsame ID methodology we've been\nusing. Now this is going to look\na little bit different. We're\ngonna say item canceled, that\nseller equals event dot params\ndot seller. So far, so good.\nItem canceled dot NFT address\nequals event dot params dot NFT\nAddress item canceled dot token\nID equals event dot params dot\ntoken ID. And then finally, we\nare going to change the active\nitem a little bit different than\nwhat we've seen. active item\nexclamation mark again, ignore\nif you're confused by that dot\nbuyer. And we're going to update\nthe buyer to equal address dot\nfrom string.\nWe're going to give it what's\ncalled the Dead address. And\nthat's this right here.\n0x 1-234-567-8910 1112 1314\nproducing 718 1920 21 to two to\nthree to 45 to 67 to\n8930 3130 230-334-3536 zeros\nlowercase d, uppercase E,\nlowercase A uppercase D, this is\nknown as the dead address. And\nthis is how we're going to\ndecide if an item is still on\nthe marketplace or not. Or if an\nitem has been bought or not. If\nwe have the dead address as its\nbuyer, that's going to mean that\nthe item has been cancelled. And\nthat's how we are going to be\nable to tell that an item is on\nthe marketplace or not dead\naddress means it's been\ncancelled. An empty address,\nwhich is what will happen for\nhandle item listed means it's on\nthe market. And an actual real\naddress means that it's actually\nbeen bought by somebody. So the\nway we can tell if it's on the\nmarket is it's 0x 0000000.\nBecause the data address is\nobviously going to be different\nthan than all zeros. The data\naddress is a commonly used\naddress kind of as a burner\naddress that nobody owns, then\nwe can just say, item cancelled\nthat save an active item that\nsay active item, exclamation\nmark dot save and perfect. Our\nmapping file is now completed.\nWe now have three different\nfunctions to define how to\nhandle when items are bought\nevents, how to handle when items\nare cancelled event and item\nlisted events. And if you're\nconfused, remember all the code\nfor this is available on this\nthe graph section of my GitHub.\nSo you can just follow along\nwith the code here, if you ever\nget lost or need help. And with\nthat, we're almost ready to tell\nour subgraph to start listening\nto our contracts, there's just\nat least one more thing that we\nwant to do. So in our sub graph\ndot Yamo, we'll see source\naddress blah, blah, blah, this\nis telling us to start indexing\nevents since the beginning of\nAetherium. Now we don't really\nwant it to do that, because it\nwill take a really long time, we\nwant to tell our subgraph Hey,\nyou don't just start from\nbeginning of time, you just need\nto start from right before our\ncontract was deployed. So we can\nadd what's called our start\nblock to tell it what block\nnumber to start deploying. Now\nif we have our address, which we\ndo right here, we can copy it,\nwe can paste it on to the rink\nfee, ether scan, paste it in\nhere, or really any block\nExplorer, and we'll see what\nblock number our contract was\ndeployed. And it looks like it\nwas this block. So I'm going to\ncopy that address, go back to my\ncode and say starting block,\nit's going to be right here.\nStarting block is going to be\nwhen it was deployed, minus one.\nSo we're gonna go right before\nwe deployed our contract, we're\ngoing to start reading any event\nthat is indexed from it. Now if\nyou just deployed this, it might\nnot have any events in it at\nall, which we're going to fix in\njust a minute so don't worry,\nbut with that all the\ninstructions for how to build\nOur sub graphs are ready to be\ndeployed to the graph, start our\nindexing and start working with\nour instructions in a\ndecentralized context. So what\nwe can do now is back in the\ngraph, we actually have the auth\nand deploy code right here, we\ncan copy this, this graph auth\ndash dash studio, which is our\ndeploy key on how to deploy. And\nwe can run this in our code\neditor. So we're going to paste\nthat in here, graph off dash\nstudio, hit enter. And we're\ngonna say deploy key set for the\ngraph. So this is just setting\nus up so that whenever we push\nour code, it's going to push it\nto this sub graph configuration\nthat we've made on their site to\nhelp us deploy automatically.\nNow we can do, we don't need to\nenter the subgraph, because\nwe've already moved stuff down,\nis we'll build the sub graph,\nwe'll run graph code Gen, we can\njust run graph kojem,\nwhich again, is just going to\nmake sure our schema dot Graph\nQL looks good. And then we're\ngoing to run our graph build.\nAnd this graph build command is\ngoing to compile and run all of\nour sub graph stuff, everything\nin mapping that JSON all our\ngenerated code. And it's going\nto put this into a real build\nfolder, the generated folder has\nkind of like a pseudo build\nfolder. And then we have a real\nbuild folder. So the generated\nis just to build some typings\nfor our TypeScript. And it's\nthis build folder, this real\nbuild folder, is what we're\ngoing to actually be deploying\nand sending to the graph. And we\ncan actually deploy our\nsubgraph. Now, with graph deploy\ndash s studio. And if the\nmarketplace, which we're going\nto run right now, now is going\nto give us a version label\noption, which we're going to\ngive it the 0.0 point one, since\nthis is our first version, and\nit goes ahead and starts\ndeploying it to the graph, we\nalso get to upload our sub graph\nto IPFS. And we have a little\nhash right here for IPFS for a\nsubgraph that we could look at.\nBut now if you're successful, we\nnow have this build completed\nthing. And we have these sub\ngraph endpoints for queries and\nsubscriptions. So we can\nactually start querying and\nsubscribing to our sub graph.\nBut if we go back to our site\nhere now and we hit refresh, we\ncan now see status deployed, we\ncan see that we're sinking. And\nnow we have some nodes that are\nlistening for our events to be\nemitted here, which is\nincredibly exciting. We can go\nto logs to see if anything went\nwrong. And right now it's just\nindexing, it's listening. It's\ngoing through all the different\nblocks in the blockchain,\nlistening for our events. And\nthen we have a playground here\nwhere we can run some queries to\nsee different events and the\ndifferent responses from our\nGraph QL, which right now, it's\ntotally blank, because we\nhaven't done anything yet. So\nonce again, let's pull up our\nhard hat and ft marketplace\ncode, or open it up in a new\nterminal, whatever you want to\ndo. And let's go ahead, and\nlet's run our mminton list\nscript. But for rink B, so we'll\ndo yarn, hard hat, run scripts,\nmint, and list item dash dash\nnetwork Rinkeby. So we're going\nto mint an NF T, right, this is\ngoing to be to transaction, so\nwe're gonna have to wait a\nlittle bit, and then we're going\nto approve the NFT. And then\nwe're going to list it on our\nmarketplace. And once it's\nlisted, it's going to emit an\nitem listed event. And we should\nsee now we have an active item\nand an item listed data in our\nGraph QL. Now you can learn more\nabout now what you see here on\nthe left hand side is what's\nknown as a Graph QL query. Now,\nwe're not going to go over how\nto do these, but I'm going to\nleave some links in the GitHub\nrepository. If you want to learn\nhow to do more of these queries,\nthese are going to be similar to\nwhat we saw with Morales. But\ninstead of them being kind of\nregular table lookups. They're\nin Graph QL syntax, and the\nresults of our query, end up\nbeing over here, we can see more\ninformation about our schema all\nthe way to the right over here.\nBut if we look at our code, now,\nwe've made the NFT approved it\nwe've listed it on our\nmarketplace. So now if we go\nback to the graph, and we run\nthis query, and we do a little\nrefresh on our NFT marketplace,\nwe might have to wait a few\nminutes for the graph to index\nthese new blocks. But in our\nplayground, we should see the\nshow up as a query. If you don't\nautomatically get these you can\npause the video to write these\ninto your Graph QL playground,\nright? So after a few minutes,\nrefresh on ether scan, I can see\nthat list item transaction has\ngone through. This means we've\nemitted a new event. So if I\ncome back to my playground, and\nI hit play here, oh my goodness,\nwe can see we have active items.\nAnd we see we have item listed.\nThis is fantastic. That means in\na decentralized context, we have\na off chain service that is\nindexing our events for our\ncontract so that we can update\nour front end and we can update\npeople in a decentralized way.\nThis is so exciting.\nAwesome, so now that we have\nthis all set up, we can finally\ngo back to our next JS project\nor next Jas NFT marketplace the\ngraph FCC. The reason we did all\nthis is because right Now in our\ncode base for our next Jas NFT\nMarketplace application, we're\nreading from a Morales database,\nwhich we're not going to do\nanymore. Instead of reading from\na Morales database, we're going\nto read from the graph, let's go\nahead and learn how to update\nour code our index dot j, s to\nread from the graph instead. So\nto highlight this, to show this,\nwe're actually going to create a\nnew page, a new file, and we're\njust going to call it graph,\nexample, dot j, s. And we're\njust gonna make this a really\nminimalistic page to show you\nhow to do a graph query. So\nsimilar to index dot j, s, we're\ngonna do export default graph\nexample. It's going to be a\nfunction, or default function,\ngraph example. And we're gonna\nuse this tool called Apollo\nclient, copy, paste it over. And\nwe're going to add it with yarn,\nadd dash dash dev at a P O ll O,\nslash, client, or excuse me, not\nDev, because we do need this on\nthe front end. So yarn add at\nApollo slash client. Oh, sorry,\nwe also need to do yarn, add\nGraph QL, we need to add both of\nthose. And it's this Apollo\nslash client, which is how we're\ngoing to make queries to our\nnewly created graph. QL. So\nwe're gonna say import the use\nquery hook, from this package we\njust installed from at a P, O,\nll o slash client. And we'll\nalso import G QL. So to create a\nnew query, we'll say const, get\nactive item equals g QL. And\nwe'll add this backtick here.\nAnd we'll add all of our Graph\nQL stuff in here, this is gonna\nbe equivalent to this, this is\nGraph QL. Syntax. And we're\ngonna be putting this Graph QL\nsyntax into our code base here.\nBut we only want to get the\nactive items. So how are we\ngoing to get the active items?\nWell, we can actually build it\nover here on our playground\nfirst, and then add it to our\ncode base. So we'll say we want\nto grab the active items, we'll\ngrab the first five, and then\nwe'll say where the buyer is\ngoing to be 0x 12345678. We're\nsaying where the buyer is empty.\nSo we're grabbing the active\nitems where there is no buyer,\nand then we're going to do and\nthen we're going to get the ID,\nthe buyer, the seller, the NFT\naddress, token, ID and the price\nfrom that. And if we hit run, we\nget our active item here. So we\nsee here, the buyer is this\nexact 0x 12345678 Because it\ngets defaulted to zero when\nthere is no buyer. And this is\nwhy for item cancelled, we\nupdated the buyer to be that\ndead address. So if it's bought,\nit won't be active anymore. And\nif it's cancelled, it also won't\nbe active anymore. Now we can\ncopy this query and paste it\ninto our code. And now we have a\nGraph QL query that we can use\nfor our graph example. Now in\nour graph example, we'll use\nthis query with this use query\nhook. So in export default\nfunction, graph example, we can\nsay const. And it comes with a\nwhole bunch of stuff like\nloading error, and then the data\nreturned equals, use query. And\nthen we'll just pass it this Get\nactive item, or get active\nitems, let's put an S on it, get\nactive items. And then we can\njust return return a little div.\nAnd we'll say hi in the div, and\nthen we'll just do console dot\nlog data. And then now we'll go\nback to our app.js, where we're\nwrapping everything in a Morales\nprovider, we also need to wrap\neverything in an Apollo\nprovider. And we need to\ninitialize it kind of similar to\nhow we initialize connecting to\nour morale server, but we're\ngoing to initialize connecting\nto our Graph QL. So we're gonna\nsay import a P O ll o provider,\na P O ll o client, and in mem\nory, cache from at a P O ll o\nslash client, like that, and\nthen we'll have to initialize\nthis so we can delete the morale\nstuff. We'll initialize this\nclient by saying const client\nequals new a P O LL. O client,\nand we'll give it the parameters\nhere. And you can find this all\nin the Apollo client\ndocumentation will say there's\ngoing to be a cache to help when\nwe do refreshes and stuff we'll\nsay new in\nmemory cache, and we'll say\ncomma URI, a que where we're\ngoing to be connecting. And this\nis where we're going to add the\nAPI for our sub graph. So if we\ngo back to details, we can see\ntemporary query URL and this is\na rate limited temporary query,\nbecause this is just a test net,\nand we're going to copy this, go\nback to our code. And we're just\ngoing to paste it in here. So\nwhatever you have for temporary\nquery URL, and your sub graph\nstudio, that's where you're\ngonna paste in here. Now, this\nclient tells our Graph QL, where\nit should be making those\nqueries. And we're gonna make it\nto here. Now, this starts with\nHTTPS. So is this centralized?\nYes, because we are directly\ncalling the graph website.\nHowever, all the data is still\ngonna be stored in this\ndecentralized graph indexer. And\nkind of similar to what we did\nwith IPFS, we're doing this kind\nof as a gateway to make it a lot\neasier for us to connect and\nread the data from the graph\nstudio. However, in the future,\nas more protocols and more\nbrowsers adopt the graph, and\nIPFS, this will become a lot\neasier inside of our Morales\nprovider, but outside of our\nnotifications provider, we're\ngonna say a P O ll o provider,\nand then client equals client.\nAnd then we're going to copy the\nclosing tag, and put it around\nthe notification provider and\npress Save. Now I'm gonna save\nour front end, now we're going\nto try to run our front end. And\nwe're gonna have to change some\nstuff in here because it's going\nto freak out. So we're gonna run\nyarn Dev, for new front end. So\nwe're gonna go to our localhost\n3000. And it's going to totally\nfreak out, because we still have\nsome morale stuff in here. And\nthat's totally okay. We, of\ncourse, we don't need a hard hat\nNode running. Because we're on a\ntest net, we don't need to be\nsynched with Morales, we don't\nneed to be doing any of that\nstuff. Because we're working\nwith a test net, right now, it's\nactually not freaking out, which\nis great. But it shows obviously\nnothing for recently listed. So\nwhat we're going to do now is\nwe're gonna do slash, graph\nexample, and hit enter. And we\ncan see Hi, show up. But if we\ngo to inspect, and we go to\nconsole, a console here, we can\nsee an object here of active\nitems, which is returned from\nthe graph with buyer ID, NFT,\naddress price and all this stuff\nin the air. This is fantastic.\nSo okay, okay. Okay. So all we\nhave to do now is we just have\nto update. So let's go ahead,\nwe'll kill our server. For now,\nall we have to do is update,\ninstead of use mirallas query,\nwe're going to delete this. And\nwe're just going to query from\nApollo query from our Graph QL.\nAnd everything else stays the\nsame, right? Because our NFT\nbox, and all the rest of the\ncode that we worked with, will\nstill work exactly the same. So\nfirst, we just got to get our\naddress. So we're gonna say\nimport, same as Sell, sell NFT,\nimport the network mapping, so\nI'm actually just going to copy\nit. So we're going to import\nnetwork mapping from constants,\nnetwork mapping dot JSON. And\nnow we can say const.\nMarketplace, address equals, and\nwe're going to get the exact\nsame way we did this and sell\nNFT to, so we're going to grab\nthis line getting the chain\nstring, we'll paste that in\nhere, which means we're going to\nneed to get chain ID from user\nMorales. And then we're gonna\nget the marketplace address like\nthis. So we're going to copy\nthat line, paste it in here.\nOkay, great. Now we have the\nmarketplace address. So now\nwe're just going to do const.\nLoading error data, which we can\ndo listed. And if T is again,\nequals, use query, and we can do\nthat get active items. So what\nI'm going to do is I'm going to\ncreate a new file and constants,\nwe're going to pass that get\nactive items thing in their new\nfile, we're just going to call\nit sub graph queries, dot j, s.\nAnd then here, we're gonna say\nimport G QL. From at a Apollo\nslash client. And we'll say\nconst, get active items, equals\ng QL backtick. And exactly what\nwe did in that great, let's go\nback to the graph example, we'll\njust copy that whole line\nactually pasted in here. And now\nwe'll just do export default,\nget active items. And we'll\nimport this query from sub graph\nqueries into our index dot j s.\nSo we'll say import, get active\nqueries are skimming apt get\nactive items from dot dot slash\nconstants slash sub graph\nqueries. And now in our use\nquery will pass Get active\nitems, which should return are\nlisted NF Ts. So now, we'll\nchange this from fetching listed\nNF Ts to loading, loading, or we\ndon't have listed NF Ts. So if\nit's loading or we don't have\nlisten if TS then do loading,\notherwise, we're going to do\nanother mapping, but the return\nof the Graph QL is going to be a\nlittle bit different. So instead\nof listing MTS dot map, it's\ngoing to be listed NF T's dot AQ\ntwo have items, dot map and f t,\nand then we're going to get\nprice. And if the address token\nID, we're not going to get\nmarketplace address, but we'll\nget seller from NFT. And it's\nnot going to be returned with\nattributes. So we can just do\nconsole dot log NFT instead. And\nthen we just pass all that stuff\nnormally to, to that NFT box\nexactly the way that we did\nbefore. So really, we're all\nwe're doing is we're swapping\nout the query methodology here,\nprice is going to be from price\nprice is going to be from the\nquery, and ft address is going\nto be from the query token ID\nfrom the query marketplace\naddress, that's also gonna be\nslightly different, we're going\nto get that from our own config\nseller is going to be from the\nquery, and then the key is going\nto be from the query as well. So\nnow if we save that, if we\nrestart our website, with yarn\nDev, and we go back to our\nhomepage, we should see\neverything exactly the same,\nexcept for the images being\npulled from the graph, instead\nof being pulled from her Alice.\nLet's go back to our front end,\nwe'll give it a nice refresh,\nclose out the console. And we'll\ngo to our homepage. And I forgot\nto do use query. So let's import\nuse query, import, use query\nfrom at a Paulo slash client.\nLet's save and let's go back and\ngive that a refresh. And oh, my\ngoodness, we now have updated to\nget our events from a\ndecentralized data structure.\nThat's freaking awesome. Now\nlet's talk about hosting this\nreal quickly, we are using the\nimage tag in here in our NFT\nbox, we are using the image tag\nin here from next Jas, which\ncomes with some pre processing.\nSo it's a little hard to use on\nIPFS. So we would need to update\nthe way we do images in order to\nhost this on IPFS. But we still\ncan do that. Some other options\nwe have actually are Morales, we\ncan actually even host our apps\non Morales, if we want. We can\nalso use things like for cell or\nNetlify, or etc, or really any\nother traditional centralized\nhosting service. Now, if you\nwant to, I challenge you to\nupdate this code to make it be\nable to be hosted on IPFS. So\nthat you'll have an end to end\ndecentralized. And if the\nmarketplace first wanted to make\na PR to this code, so that it\ncan be successfully hosted\ncompletely end to end on IPFS\nwins and empty for me. But wow.\nAnd with that we are done with\nless than 15. This is an\nabsolutely monstrous\naccomplishment. And if you\nfinish this, if you've\nunderstood everything, if you've\ngotten through everything so\nfar, you should feel incredibly\nproud of yourself. Because this\nis our last full stack section,\nour front end section and you're\na full stack monster at this\npoint. huge congratulations, you\nshould be super, super, super\nproud. And definitely take a\nbreak, go get a coffee, and get\nready for the final stretch of\nlessons 1617 and 18. Those are\ngonna go by a little bit\nquicker. I'm very excited for\nyou take a break, and I'll see\nyou there.\nRight, welcome to Lesson Six\ntene, where we're going to be\ngoing into even more low level\ncode here. The hard hat upgrades\nof course, per usual, our entire\nGitHub repository is located\nhere. And additionally, we have\nan optional video that you can\nwatch. If you want to learn\nmore, we're actually going to\nwatch a slice of that video that\nexplains upgradable smart\ncontracts. So let's jump in. Now\nI'm editing this video much\nlater after I filmed that, hence\nwhy I have a beard so I'll be\njumping in from time to time\nupdating some of the sections.\nWhen deploying your smart\ncontracts on chain. We all know\nthat those smart contracts are\nimmutable or unchangeable. But\nwhat if I told you that they\nwere immutable?\nWell, technically, that wouldn't\nbe correct. However, smart\ncontracts actually can change\nall the time. When people\ntransfer tokens when people\nstake in a contract or really do\nany type of functionality. Those\nsmart contracts have to update\ntheir balances and update their\nmappings and update their\nvariables to reflect this. The\nreason that they're immutable is\nthat the logic itself never\nchanges and will be on chain\nlike that forever. So\ntechnically, yes, once they are\ndeployed, they are immutable.\nAnd this is actually one of the\nmajor benefits of smart\ncontracts in the first place\nthat nobody can tamper with or\nscrew with our smart contracts\nonce we deploy them. However,\nthis can be an issue if, for\nexample, we want to upgrade our\nsmart contract or protocol to do\nmore things, or want to fix some\nglaring bug or issue that we\nhave. Now even though we can't\nchange the specific code that's\nbeen deployed to an address, we\ncan actually do a lot more than\nyou think. And in this video,\nwe're going to explain the\ndifferent methodologies behind\nupgrading your smart contracts.\nAnd then we're going to show you\nhow to do it with hard hat and\nopen Zeppelin huge shout out to\na lot of open Zeppelin and\ntrilobites articles that helped\nme put this video together and a\nnumber of other sources as well\nlinks in the description. So\nlet's get to it. Now at first\nglance, you might be thinking,\nif you can upgrade your smart\ncontracts, then they're not\nreally immutable that in a way\nyou'd be right. So when\nexplaining kind of the different\nphilosophies and patterns that\nwe can use here, we do need to\nkeep Behind the philosophies and\ndecentralization implications\nthat each one of these patterns\nhave, as they do all have\ndifferent advantages and\ndisadvantages. And yes, some of\nthe disadvantages here are going\nto affect the centrality. So we\nneed to keep that in mind. And\nthis is why it's so important\nthat before you go ahead and\njump in and start deploying\nupgradable smart contracts, you\nunderstand the trade offs. So\nwe're going to talk about three\ndifferent ways to upgrade your\nsmart contracts. The first one\nbeing the not really slash\nParamor ties way to upgrade your\nsmart contracts, the social\nmigration method, and then the\nmethod that you probably have\nheard about, which is proxies,\nwhich have a ton of\nsubcategories, like metamorphic\ncontracts, transparent\nupgradable, proxies, and\nuniversal upgradable proxies. So\nlet's talk about the not really\nupgrading method, or the\nparameterization method, or\nwhatever you want to call it.\nThis is the simplest way to\nthink about upgrading your smart\ncontracts. And it really isn't\nupgrading our smart contracts.\nBecause we can't really change\nthe logic of the smart contract,\nwhatever logic that we've\nwritten, is there, we also can\nadd new storage or state\nvariables. So this is really not\nreally upgrading. But it is\nsomething to think about\nupgrades is just parameterizing,\neverything, whatever logic that\nwe've deployed is there, and\nthat's what we're interacting\nwith this function means we just\nhave a whole bunch of setter\nfunctions. And we can update\ncertain parameters. Like maybe\nwe have a reward parameter that\ngives out a token at 1 percent, every\nyear or something like that.\nMaybe we have a setter function\nthat says, hey, update that to\n2 percent, or update that to 4 percent. It's\njust a setter function that\nchanges some variable. Now, the\nadvantages here, obviously, this\nis really simple to implement.\nThe disadvantage is that if you\ndidn't think of some logic or\nsome functionality, the first\ntime you deployed their smart\ncontract, that's too bad, you're\nstuck with it, you can't update\nthe logic or really update\nanything with the\nparameterization, aka, not\nreally method. And the other\nthing you have to think about is\nwho the admins are, who has\naccess to these setter functions\nto these updating functions. If\nit's a single person, guess\nwhat, you have a centralized\nsmart contract. Now of course,\nyou can add a governance\ncontract to be the admin\ncontract of your protocol. And\nthat would be a decentralized\nway of doing this. So just keep\nthat in mind, you can do this\nmethod just need a governance\nprotocol to do so another\nexample of this might be a\ncontract registry. And this is\nsomething actually that early\nversions of ABA used before you\ncall a function, you actually\ncheck some contract registry\nthat is updated as a parameter\nby somebody and you get routed\nto the contract, and you do your\ncall there. Again, this really\ndoesn't allow us to have the\nfull functionality of upgrades\nhere, you can argue that this\nregistry is a mix of one of the\nlater versions. But for all\nintents and purposes, this\ndoesn't really give us that\nflexibility that we want for\nupgrades. But some people might\neven think that upgrading your\nsmart contract is ruining the\ndecent reality. And one of the\nthings that makes smart\ncontracts so potent is that they\nare immutable, and that this is\none of the benefits that they\nhave. So there are some people\nwho think that you shouldn't add\nany customization or any\nupgradability, you should deploy\nyour contract. And then that's\nit. trilobites has actually\nargued that if you deploy your\ncontract, knowing that it can't\nbe changed later, you take a\nlittle bit extra time, making\nsure you get everything right.\nAnd there are often less\nsecurity vulnerabilities because\nyou're just setting it\nforgetting it and not looking at\nit again. Now, if I wanted to\nupgrade a smart contract with\nthis philosophy in mind, the\nphilosophy that I do want to\nkeep my smart contracts\nimmutable, we can instead use\nthe social migration method,\nwhich I previously called the\nEat method. And now I think it's\nless funny. So we're just gonna\nstick with social migration, the\nsocial eating method, or the\nmigration method is just when\nyou deploy your new contract,\nnot connected to the old\ncontract in any way. And by\nsocial convention, you tell\neverybody, hey, hey, this new\ncontract, this new one that we\njust deployed? Yeah, this is the\nreal one now. And it's just by\nconvention of people migrating\nover into using this new one,\nthat the upgrade is done, hence\nmy slang name of social yeet.\nBecause you use the first one\nout of the way and move to the\nsecond one.\nI think I'm funny. Yeah, this\nhas the advantage of truly\nalways saying, Hey, this is our\nimmutable smart contract. And\nthis is our new one. This is\nreally the truest definition of\nimmutable, because since you\ngive it no way of being upgraded\nin place, than if somebody calls\nthat contract in 50,000 years in\nthe future, it will respond\nexactly the same. Another huge\ndisadvantage here is that you\nhave to have a totally new\ncontract address. So if you're\nan ERC 20 token, for example,\nyou have to go convince all the\nexchanges to list your new\ncontract address as the actual\naddress. Keep in mind that when\nwe do this, we do have to move\nthe state of the first one over\nto the second one. So for\nexample, if you're an ERC token\nmoving to a new version of that\nERC token, you do, you have to\nhave a way to take all those\nmappings from the first contract\nand move it to the second one.\nObviously, there are ways to do\nthis, since everything is on\nchain. But if you have a million\ntransfer calls, I don't want to\nhave to write the script that\nupdates everyone's balance and\nfigures out what everyone's\nbalance is just so I can migrate\nto my new version of the\ncontract. So there's a ton of\nsocial convention work here to\ndo. trilobites has actually\nwritten a fantastic blog on\nupgrading from a v1 to v2 or\netc. With this eat methodology\nand they give a lot of steps for\nmoving your storage and your\nstate variables over To the new\ncontract. So link in the\ndescription if you want to read\nthat. Now let's get to our big\nticket item. So in order to have\na really robust upgrading\nmentality or philosophy, we need\nto have some type of methodology\nor framework that can update our\nstate, keep our contract address\nand allow us to update any type\nof logic in our smart contracts\nin a easy way, which leads us to\nour big ticket item is the\nproxies. What's our big ticket\nitem?\nproxies, proxies. Proxies are\nthe truest form of upgrades,\nsince a user can keep\ninteracting with the protocols\nthrough these proxies, and not\neven notice that anything\nchanged or even got updated.\nNow, these are also the places\nwhere you can screw up the\neasiest. Proxies use a lot of\nlow level functionality. And the\nmain one being the delegate call\nfunctionality. Delegate call is\na low level function where the\ncode in the target contract is\nexecuted in the context of the\ncalling contract. And message\ndot sender and message dot value\nalso don't change. So you\nunderstand what delegate call\nmeans. Now, right? Great. And in\nEnglish, this means if I\ndelegate call a function in\ncontract B from contract a, I\nwill do contracts B's logic in\ncontract a. So if contract B has\na function that says hey, store\nthis value in a variable up top,\nI'm going to store that variable\nin contract a, this is the\npowerhouse. And this combined\nwith the fallback function\nallows us to delegate all calls\nthrough a proxy contract address\nto some other contract, this\nmeans that I can have one proxy\ncontract that will have the same\naddress forever. And I can just\npoint and route people to the\ncorrect implementation contract\nthat has the logic, whenever I\nwant to upgrade, I just deploy a\nnew implementation contract and\npoint my proxy to that new\nimplementation. Now, whenever a\nuser calls a function on the\nproxy contract, I'm going to\ndelegate call it to the new\ncontract, I can just call an\nadmin only function on my proxy\ncontract, let's call it upgrade\nor something and I make all the\ncontract calls go to this new\ncontract. When we're talking\nabout proxies, there are four\npieces of terminology that we\nwant to keep in mind. First is\nthe implementation contract. The\nimplementation contract has all\nof our logic and all the pieces\nof our protocol. Whenever we\nupgrade, we actually launch a\nbrand new implementation\ncontract, the proxy contract\nproxy points to which\nimplementation is the correct\none. And routes everyone's calls\nto the correct implementation\ncontract, you can think the\nproxy contracts sits on top of\nthe implementations the user,\nthe user is going to be making\ncontract and function calls\nthrough the proxy contract. And\nthen some type of admin, the\nadmin is the one who's going to\ndecide when to upgrade and which\ncontract to point to. In this\nscenario, the other cool thing\nabout the proxy and delegate\ncall is that all my storage\nvariables are going to be stored\nin the proxy contract and not in\nthe implementation contract.\nThis way, when I upgrade to a\nnew logic contract, all of my\ndata will stay on the proxy\ncontract. So whenever I want to\nupdate my logic, just point to a\nnew implementation contract, if\nI want to add a new storage\nvariable or a new type of\nstorage, I just add it in my\nlogic contract and the proxy\ncontract will pick it up. Now,\nusing proxies has a couple of\ngotchas. And we're gonna talk\nabout the gotchas. And then\nwe're going to talk about the\ndifferent proxy contract\nmethodologies, because yes,\nthere are many proxy contract\nmethodologies as well. And this\nis why trilobites doesn't really\nrecommend using upgradable\nproxies for your smart\ncontracts. Because they're\nfraught with a lot of these\npotential issues. Not to\nmention, again, you do still\nhave some type of admin who's\ngoing to be upgrading your smart\ncontracts. Now, if this is a\ngovernance protocol, then great,\nyou're decentralized. But if\nthis is a single group or\nentity, then we have a problem.\nThe two biggest gotchas are\nstorage, clashes, and function\nselector clashes. Now, what does\nthis mean? When we use delegate\ncall, remember, we do the logic\nof contract B inside contract a.\nSo if contract B says we need to\nset value to two, we go ahead\nand set value to what these\nsmart contracts are actually\nkind of dumb, we actually set\nthe value of whatever is in the\nsame storage location on\ncontract as contract B. So if\nour contract looks like this,\nand we have two variables and\ncontract a, we're still going to\nset the first storage spot on a\ncontract a to the new value.\nThis is really important to know\nbecause this means we can only\nappend new storage variables and\nnew implementation contracts.\nAnd we can't reorder or change\nold ones. This is called storage\nclashing. And in the\nimplementations we're going to\ntalk about, they all address\nthis issue. The next one is\ncalled function select or\nclashes. When we tell our\nproxies to delegate call to one\nof these implementations, it\nuses what's called a function\nselector to find a function. A\nfunction selector is a four byte\nhash of the function name and\nthe function signature. Don't\nworry about the function\nsignature for now. Now, it's\npossible that a function in the\nimplementation contract has the\nsame function selector as an\nadmin function in the proxy\ncontract, which may cause you to\ndo accidentally a whole bunch of\nweird stuff. For example, in\nthis sample code in front of you\neven though All these functions\nare totally different, they\nactually have the same function\nselector. So yes, we can run\ninto an issue where some\nharmless function like get price\nhas the same function selector\nas upgrade proxy or destroy\nproxy or something like that.\nThis leads to our first of the\nthree implementations of the\nproxy contracts. This is called\nthe transparent proxy pattern.\nAnd it's actually going to be\nthe pattern that we're gonna be\ndemoing to you today. In this\nmethodology, admins are only\nallowed to call admin functions.\nAnd they can't call any\nfunctions in the implementation\ncontract. And users can only\ncall functions in the\nimplementation contract and not\nany admin contracts. This way,\nyou can't ever accidentally have\none of the two swapping, and\nhaving a function selector clash\nand you running into a big issue\nwhere you call a function, you\nprobably shouldn't have, if\nyou're an admin, you're calling\nadmin functions. If your user\nyou're calling implementation\nfunctions. So if you're an\nadmin, and you build some crazy,\nawesome defi protocol, you\nbetter come up with a new wallet\naddress because you can't\nparticipate. The second type of\nproxy we're going to talk about\nis the universal upgradeable\nproxy, or the\nop amps. This version of\nupgradable contracts actually\nputs all the logic of upgrading\nin the implementation itself\nthis way, the solidity compiler\nwill actually kick out and say,\nHey, we got two functions in\nhere that have the same function\nselector. This is also\nadvantageous because we have one\nless read that we have to do, we\nno longer have to check in the\nproxy contract if someone is an\nadmin or not. This saves on gas,\nof course, and the proxy is also\na little bit smaller. Because of\nthis, the issue is that if you\ndeploy an implementation\ncontract, without any\nupgradeable functionality,\nyou're stuck. And it's back to\nthe Eat method with you. And the\nlast pattern or methodology that\nwe're going to talk about is the\ndiamond pattern, which does a\nnumber of things. But one of the\nbiggest things that it does, it\nactually allows for multiple\nimplementation contracts. This\naddresses a couple of different\nissues. For example, if your\ncontract is so big, and it\ndoesn't fit into the one\ncontract maximum size, you can\njust have multiple contracts\nthrough this multi\nimplementation method. It also\nallows you to make more granular\nupgrades, like you don't have to\nalways deploy and upgrade your\nentire smart contract, you can\njust upgrade little pieces of\nit. If you've chunked them out.\nAll the proxies mentioned here\nhave some type of Aetherium\nimprovement proposal, and most\nof them are in the draft phase.\nAnd at the end of this\nexplainer, we will do a demo of\nshowing you how the delegate\ncall function works. And the end\nof the demo is right now. So\nlet's look at delegate call.\nNow, we're going to learn about\nhow to actually build these\nproxies how to build these\nupgradable smart contracts. And\nto do this, we first need to\nlearn about this delegate call\nfunction. And it's going to be\nreally similar to the call\nfunction, which we learned much\nearlier. If you haven't seen\nthat, be sure to go back to our\nHarnett. And if T's we have a\nsub lesson in there, about EVM,\nopcodes, and coding and calling\nand we'll give you all the\ncontext for delegate call. Like\nI said, in the explainer, it's\nvery similar to call however,\nthe way that I think about it is\none contract says Oh, I really\nlike your function, I'm going to\nborrow it myself. And we're\ngoing to be looking at solidity\nby example. I'll leave a\ndescription in the GitHub. And\nall the code for this will be in\nthe GitHub associated with this\nlesson as well. Now we have two\ncontracts, we have this contract\nB that we're going to be\ndeploying on remix and it looks\nlike a real minimalistic real\nsimple contract. We have a\ncouple of storage variables\nhere. And then we have a\nfunction that updates our\nvalues, we have a function\ncalled Set VARs and updates are\nyou into public num? Now as we\nlearned before, whenever we have\nsome type of contract with\nstorage variables they get\nstored in, in this storage data\nstructure that's index starting\nfrom zero, right now are you\ninto public num is that index\nzero, or sender's at index one,\nour values and index two etc.\nNow we're going to deploy a\ncontract a and now this contract\nis actually going to use the\ndelegates call function. Now a\ncontract a this is going to look\na little bit different, but it's\nstill going to have this set\nbars functions, except it's\ngoing to make a delegate call\nfunction call to our contract B.\nNow in our lesson 14 with NF TS\nwe learned about call API dot\nencode with signature API dot\nencode etc. So if you're\nunfamiliar with function\nselectors, if you're unfamiliar\nwith if you're unfamiliar with\nthis syntax, be sure to go back\nto lesson 14 To understand ABI\ndot encode with signature and\ncontract dot call. The\ndifference here is we're doing\ncontract dot delegate call. What\nthis call does is something very\nsimilar to call. Normally, if we\ndid contract dot call on this\ncontract, we would just call\nthis, we would just be calling\nthis function set VARs, which\nwould update contracts B's\nstorage, but instead we're\nsaying Hey, call that set VARs\nfunction, and then pass this as\nan input parameter, but call it\nin our contract, call it on\ncontract a, we're kind of\nborrowing a function for our\ncontract. And so instead, what\nwe're going to do, is we're\ngoing to borrow this set bars\nand run the set bars function\nover here. Now the difference is\ninstead of num equals num The\nvariables could be named\ndifferent than the variables on\ncontract a. So instead of num\nequals num, our contract is\ngoing to say, hey, whatever that\nstorage of zero have that equal\nto whatever we pass as an input\nparameter. And if that's a\nlittle bit confusing, just stay\nwith me. Let's go ahead and\nlet's see this in remix. So I'm\ngoing to copy paste this code\ninto remix here. So we can kind\nof test and see what this looks\nlike. Again, there's a link to\nthis in the GitHub repo\nassociated with this course,\nfeel free to pause the video to\ngrab this link. It's solidity,\nhyphen, by hyphen,\nexample.org/delegate call, or\nyou can just grab the code\ndirectly from lesson 16 Hardhead\nupgrades. So let's compile this\ncode. And let me show you what I\nmean. So I'm going to compile\nit, and we'll go to the Run tab.\nAnd first let's deploy this\ncontract beam, we'll hit Deploy,\nwe now have a contract, num,\ncenter and value are all blank,\nwe'll update the number to\nsomething like 777, we'll hit\nSet VARS. Set VARs will change\nthe storage variable num to 777.\nAnd then we're changing the\nsender and the value, sender,\nand value is zero. Now let's\ndeploy contract a. So we'll\nscroll back up contract a\ndeploy, of course, we're on the\nJavaScript VM. Now we have this\ncontract a with num value in\nCinder are also all blank. But\nwhen we call set VARs, it's\ngoing to borrow this set VARs\nfunction from contract B and run\nit in contract a, you can almost\nthink of it as if we're copying,\nset VARs and pasting it into our\ncontract a just for one run, and\nthen immediately deleting ADM,\nthat's what this delegate call\nfunction does. So when I call\nset VARs, we're going to pass it\nthis contract address as an\ninput parameter. So it knows to\ncall this contract said virus\nfunction. When I pass it the\naddress, and I pass 987. Since\nwe're borrowing the function,\nwe're not going to update this\nnum. On contract B, we're going\nto update the num on contract a.\nSo when I hit Set VARs, we see\nnum now has 19. Seven, we see\nSenator and we see value still\nbeing zero here, because again,\nwe're borrowing this function\nand running it here. Now the way\nthat this works, is it actually\ndoesn't look at the names of our\nstored variables, it looks at\nthe storage slots. So when we\nborrow this function using\ndelegate call, so we could have\nthis these variables we named\nanything instead of num, we\ncould call this first value.\nSenator, we could call something\nelse. And then value we could\ncall foo, or whatever you want\nhere. And when we borrow this\nfunction using delegate call,\ninstead of grabbing the actual\nnames of the variables, our\ncontract will swap out these\nvariable names with the storage\nslot. So it says oh, okay, well,\nin contract B, you're accessing\nthe num variable, which is,\nwhich is at storage slot zero.\nSo when we borrow set bars and\ncontract a with Delegate call,\nwe'll say storage slot\nzero is going to equal that\nunderscore num. Which are this\ncontract storage slot zero is\nfirst value. So we'll say first\nvalue equals underscore Now,\nsomething else is going to be\nstored slot two, so it's gonna\nsay okay, storage slot two,\nwe're gonna update storage slot\ntwo to message that sender.\nOkay? value here is storage slot\nthree. So whatever's in storage,\nslot three, will update with\nmessage dot value like this. So\nthat's essentially what's going\non behind the scenes. So let's\ngo ahead and let's delete those\nand redeploy. redeploy them. So\nwe'll deploy contract be\ndeployed contract a, right now\nin B, once again, if we do 1234,\nset VARs, we have 123. And then\ncontract a. Now even though\nthese variables have different\nnames, we could grab contract\nB's address, paste it in, do\n654, hit Set VARS. And first\nvalue is now six by four. So\ndelegate call allows us to\nborrow functions, and then just\ntransposes whatever is in here\nto the storage location\nequivalents. And the other thing\nthat's interesting is even if\nyou don't have variables, it'll\nstill save to storage slots. So\nin contract a, if we didn't have\nany of those variable names,\nstorage slot, 01, and two would\nstill get updated. Now here's\nwhere things can get really\ninteresting. Let's delete our\ncontract again. And let's change\nthe type of our contract A's\nfirst value to from a UNT to a\nBoolean. Let's save that. And\nnow let's deploy contract a. Now\nwhen we call set VARs, on our\ncontract a, it's still going to\nuse the Set VARs function of\ncontract B, which takes a\nYewande and assigns the first\nstorage slot that number we pass\nit, but our first storage slot\nis now a Boolean was so what do\nyou think's going to happen now?\nWell, let's try it out. Let's\ncopy contract B's address, paste\nit in here. We'll pass we'll do\ntu tu, tu as our input\nparameter, we'll hit Set VARS.\nOur transaction actually does go\nthrough. And now when we look at\nfirst value, it says true. Hmm,\nthat's really weird. What if we\nchange set VARs to zero, and hit\nSet VARS. And now, first value\nis false. In storage here, when\nwe add a number with set VARs,\nit's going through because it's\njust setting the storage slot of\nthe boolean to a number. And\nwhen solidity reads it, it goes,\nOh, well, first value is a\nBoolean. So if it's anything\nother than zero, it's going to\nbe true. So this is how you can\nactually get some really weird\nresults. If your typings are\ndifferent, or if your stored\nvariants are different. What if\nwe made this an address. So this\nis where working with Delegate\ncall can get really weird and\nreally tricky, really fast.\nAll right. Now, with all this\nbeing said, let's turn up the\nheat. And let me show you a\nsmall proxy, a minimal proxy\nexample, that shows how a\ncontract can be used as a\nsingular address, but the\nunderlying code can actually\nchange. And all the code we're\ngonna be working with, once\nagain, in the hardhat upgrades,\nFCC sub lesson, small proxy dot\nSol, and you can go ahead and\ncopy paste this code if you want\nto follow along. So you don't\nhave to code along with me here.\nBut you absolutely can if we\nwant. Now, I will say this is\ngoing to be one of the most, if\nnot the most advanced section of\nthe entire course. So feel free\nto go ahead and skip over this\nsub lesson. If you want to just\nmove on to learning how to\nactually build these proxies,\nwithout really understanding\nwhat's going on behind the\nscenes. However, it is still\nreally powerful if you do\nunderstand what's going on\nbehind the scenes. So I have\nthis minimalistic starting\nposition right here. I have\nsmall proxy is proxy. And I'm\nimporting this proxy dot sole\nthing from up in Zeplin.\nopenzeppelin has this\nminimalistic proxy contract that\nwe can use to actually start\nworking with this delegate call.\nNow this contract uses a lot of\nassembly or what's something\ncalled you'll. And it's an\nintermediate language that can\nbe compiled to bytecode for\ndifferent backends. It's a sort\nof inline assembly inside\nsolidity and allows you to write\nreally, really low level code\nclose to the opcodes. Now we're\nnot going to go over you'll but\nI'll leave some links to the\nyou'll documentation if you want\nto learn more. Even if you're a\nreally advanced user, you really\nwant to try to use as little\nEULA as possible. Because since\nit is so much lower level, it is\nmuch easier to screw things up.\nHowever, like I said, for this\nexample, we are going to be\nusing a little bit of you'll now\nin this proxy that we're going\nto be doing, we have this\ndelegate function, which inside\nthis inline assembly, which is\nyou'll, it does a whole lot of\nreally low level stuff. But the\nmain thing that it does is it\ngoes ahead and it does this\ndelegate call functionality. If\nwe look here, we can see it's\nusing a fallback function and a\nreceive function. So whenever it\nreceives a function that doesn't\nrecognize it'll call fallback,\nand fallback calls our delegate\nfunction. So anytime a proxy\ncontract receives data for a\nfunction it doesn't recognize it\nsends it over to some\nimplementation to some\nimplementation contract where it\nwill call it with Delegate call.\nIn our minimalistic example\nhere, we have a function called\nSet implementation, which will\nchange where those delegate\ncalls are going to be sending.\nThis can be equivalent to like\nupgrading your smart contract.\nAnd then we have implementation\nhere to read where that\nimplementation contract is. Now\nto work with proxies, we really\ndon't want to have anything in\nstorage, because if we do\ndelegate call, and that delegate\ncall changes, some storage,\nwe're going to screw up our\ncontract storage. The one caveat\nthough to this, we do still need\nto store that implementations\naddress somewhere, so we can\ncall it so ERP 1976. It's called\nthe standard proxy storage slot,\nwhich is an Aetherium\nimprovement proposal for having\ncertain storage slots\nspecifically used for proxies.\nAnd in our minimalistic example\nhere, we set bytes 32, private\nconstant implementation slot to\nthat location in storage. And\nwe'll say, okay, whatever is\nthat this storage slot is going\nto be the location of the\nimplementation address. So the\nway our proxy is going to work\nis any contract that calls this\nproxy contract. If it's not this\nset implementation function,\nit's going to pass it over to\nwhatever is inside the\nimplementation slot address.\nThat's what we're going to build\nhere. So we have the small proxy\nis proxy. And we'll create a\nreal minimalistic contract. So\nwe'll say contract employee,\nmentation A, and we'll just give\nit a U and 256. public value and\nthen function set value, you add\n256 new value, public will say\nvalue equals new value So this\nis going to be our\nimplementation. So now anytime\nsomebody calls small proxy, or\nsmall proxy contract, it's going\nto delegate, call it over to our\nimplementation, a, and then save\nthe storage in our small proxy\naddress. So we're going to call\nour small proxy with the data to\nuse this set value function\nselector. So let's make it a\nlittle easier just to figure out\nhow to get that data by creating\na new helper function, do\nfunction, get data to transact.\nAnd we can get the data using\nthe API dot encode with\nsignature that we learned in an\nearlier lesson. So function get\ndata to transact, we'll pass it\na un 256 number to update. So\nwe'll give this the number we\nwant to call a new value. We'll\nhave this be public pure, that's\ngoing to return a bytes.\nMemory. And we'll just say\nreturn ABI dot ENCODE. With\nsignature set value, you went to\n56, comma, number to update.\nSo you'll remember this from our\ncall anything section. And if\nyou don't remember how to do\nthat, remember to refer back to\nour NFT section to learn how to\ncall anything and use ABI dot\nencode ABI dot encode with a\nsignature and call anything with\nits raw bytes bring and get the\ndata to transact. And we know\nthat when we call implementation\na, from our small proxy, we're\ngoing to update our small\nproxies storage. So we'll create\na little function in solidity\njust to read our storage in\nsmall proxy. We're gonna say\nfunction, read storage. And this\nwill just be a public view, will\ndo returns, returns you into\n256, value at storage slot,\nzero. And we are going to use a\nlittle bit of assembly here\nsince we are doing all this low\nlevel stuff. And we're going to\ncall the s load up code to read\nthe value at storage slot zero,\nwe'll say value at storage slot\nzero, and we're going to set it\nand then in assembly, this is\nhow we set things, we're going\nto set it equal to s load of\nstorage slot zero, and then it\nwill return this value here. So\nwe're reading directly from\nstorage. Oops, and then we need\na little parenthese here. Sorry.\nSo now, let's go ahead and\ndeploy our small proxy. And\nlet's deploy our implementation\nA. Now our small proxy has a\nfunction called Set\nimplementation. So we're saying,\nokay, anytime we call this proxy\ncontract, we're going to\ndelegate call the functions over\nto here. So we're going to grab\ncurrent implementations A's\naddress, paste it into set\nimplementation 77. So this is\nthe data of set value you in\n256, with that number to update\nencoded in it. So if we call our\nsmall proxy, with this data, our\nproxy contract is gonna go, oh,\nokay, this is a function. I\ndon't I don't see that function\nhere. We're going to call our\nfallback, right, which again, is\ncoming from open Zeplin. And our\nFallback is going to do this\ndelegate, which is this low\nlevel stuff, but it's basically\njust doing a delegate call,\nwe're gonna call our fallback\nfunction, and then we're gonna\nget the function in the\nimplementation A, we're gonna\nborrow this function, and we're\ngonna use it on our on\nourselves. So if I copy this,\nthe implementation has been set\nto being this address down here.\nSo all the logic is going to be\ndone here. So when I go ahead,\nand I grabbed this, and paste it\ninto call data, and I hit\ntransact looks like it went\nsuccessfully went through. If I\nread storage, now, we see that\nit is indeed 777, which is\nincredibly exciting. Now, this\nis incredibly beneficial,\nbecause now let's say we want to\ngo and update our code, right?\nWe don't like contract\nimplementation anymore. So let's\ngo ahead copy contract\nimplementation A. And we'll make\na new one called implementation\nB. Now, let's say whenever\nsomebody calls set value, we do\nvalue equals new value, plus\none, or plus two. Let's go\nahead, let's save this. Let's\ncompile this. And let's deploy\nimplementation B, we'll grab\nimplementation B's contract\naddress, we'll call it onset\nimplementation in our proxy. And\nessentially, we have now\nupgraded from implementation a\nto implementation B. Now, if we\nuse this same data here, we're\nstill going to call set value\nwas 777. But instead, we're now\ndelegate calling to\nimplementation B, instead of\nimplementation A. So if I call\nif I put this data into the low\nlevel call data, and I hit\ntransact, it looks like it went\nthrough. Now I read storage and\nnow is 779 since doing value\nequals new value plus two so\nthis is a minimalistic example\nof how upgrading actually works.\nNow, this is incredibly\nbeneficial, because we can\nalways just tell people, Hey,\nmake all your function calls to\nsmall proxy, and you'll be good\nto go. But like I said before,\nthis also means that the\ndevelopers of this protocol can\nessentially change the\nunderlying logic at any time.\nThis is why it is so important\nto be sure to read contracts and\ncheck to see who has the\ndeveloper keys. And if a\ncontract can be updated, if a\ncontract can be updated, and a\nsingle person can update it,\nwell guess what, you have a\nsingle centralized point of\nfailure. And technically the\ncontract isn't even\ndecentralized. Now, something\nelse I was talking about in the\nvideo is function clashes\nfunction selector clashes. Right\nnow, whenever we call set\nimplementation, the proxy\nfunction sedimentation gets\ncalled because we don't trigger\nthe fallback because we can see\nthe function is here. However,\nif I have a function called Set\nimplementation, in our\nimplementation, this one can\nnever be called, whenever we\nsend a function signature of set\nimplementation, it's always\ngoing to call the one on the\nproxy. This is where the\ntransparent proxy that we're\ngoing to be working with can\nhelp us out here and the\nuniversal upgradable proxy can\nhelp us to, and I'm not going to\ngo too much deeper into these\nnow. But we've left some links\nin the GitHub repository to\nteach you more about these\nselector clashes. And how those\ntwo proxy patterns that I just\nmentioned, the transparent and\nuniversal upgradable can get\naround these, if you're confused\nby anything in here, go into\nthis discussion thread and make\na new discussion about proxies\nmake a new discussion about the\nAssembly about the you'll set\nimplementation, this is a great\ntime to connect with other\npeople taking the course and ask\nquestions here, because I know\nthat this is a really advanced\nsection, and requires you\nhaven't gone through a lot of\nthose sub lessons that we've\ngone before. And if it takes you\na couple times of playing around\nwith solidity and playing around\nwith remix, I definitely\nrecommend you do so this is the\nsection we're seeing really is\nbelieving. And I want you to\njump into remix. And I want you\nto test this. And I want you to\nplay around with this and see\nwhat you can break and fiddle\nwith. But with all that being\nsaid, we finally have all the\nknowledge that we need to build\nour hardhat project that deals\nwith upgrades. So let's go ahead\nand jump into it.\nYour new terminal, we're going\nto do MK dir, hard hat,\nupgrades, FCC, CD, hard hat,\nupgrades, FCC, and then code\nperiod, or file, open folder,\nthis folder here, now I'm going\nto grab that same yarn add we've\nbeen grabbing from less than\nnine, we're gonna paste it in,\nwe're going to add all of these\ndifferent parameters. And once\nagain, we're going to copy over\nour hard hat config from\nprevious sections, we're going\nto copy over prettier. And we're\njust going to get our basic\ndefault setup. At this point,\nyou might have a setup that\nworks best for you and that you\nlike better. And feel free to\ngrab that as well. So I'm going\nto paste the prettier is in\nhere. And I'm going to paste the\nhard hat.config.js that we've\nbeen using, instead of running\nyarn hard hat. And now we should\nbe good to go. So let's create a\nnew folder called contracts. And\nin here, we're going to create a\nnew file called Box dot soul.\nAnd then it's this contract,\nthat's going to be our\nimplementation or our logic\ncontract. So it will say pragma,\nsolidity carrot zero point 8.7\ncontract box will say you into\n256 internal value will do event\nvalue changed you into 256 new\nvalue, do function store, you\nwent to 36 value, this will be a\npublic function will say value\nequals new value. So this store\nfunction is going to update our\nvariable at storage slot zero,\ninternal, and then we'll just\nomit value changed that new\nvalue. And then we'll just\ncreate function retrieve, which\nwill be a public view returns a\nUNT 256 We'll just do return\nvalue. And then we're going to\ncreate a new function called\nversion. And this will be a\npublic door. And that returns a\nun 256. And we're just going to\nhave this return one. So our box\ncontract here is going to be\nversion one. Now we're going to\ncopy all this code, paste it\ninto a box v two dot soul and\nrename it to contract box v two,\nwe're going to update the\nversion to version two here. And\nwe're going to create a new\nfunction called increment. And\nthis will be a public function.\nAnd we'll say value equals value\nplus one. And then we will emit\na value changed event with\nvalue. We're going to have one\ncontract address originally use\nthe logic in box and then we're\ngoing to upgrade it to the logic\nin box V two. And we're going to\nlearn how to use all the tools\nthat we've been working with\nhere to add this logic and\ncreate this logic And let's just\nmake sure this works, we'll do\nyarn, or that compile.\nSo let's make a readme.md, we'll\nsay, one, we're going to upgrade\nbox to box V two. So we're going\nto make a proxy contract, that's\ngonna point to box. And then\nlater on, we're going to update\nit to point to box V two. Right,\nso we're going to start it up\npointing to box, then we're\ngoing to have it point to box V\ntwo. And that's how we're going\nto upgrade it, one of the first\nthings we're going to need to do\nis deploy a proxy, we can deploy\na proxy manually ourselves, and\nwe can build the proxy contracts\nand do all that stuff. That's\nour first option. Hardhead\ndeploy also comes built in with\ndeploying and upgrading proxies\nitself, where we can just\nspecify that we want to use a\nproxy. And we could specify the\ntype of proxy that we want to\nuse. So number two is just\nsaying using hard hat deploys,\nbuilt in proxies. And then\nnumber three is open Zeppelin\nactually has an upgrades plugin,\nwhich allows you to write some\nreally simple scripts that\nallows you to have a really\nsimple API like upgrades dot\ndeploy proxy, and then upgrades\nthat upgrade proxy. Now for this\nsection, we're going to be doing\nthe hard hat deploys built in\nproxies. However, in the GitHub\nrepo associated with this, if\nyou go to scripts, there's other\nupgrade examples that will show\nyou how to use the opens up and\nupgrades plugin. And we're not\ngoing to do deploy a proxy\nmanually manually, because we\nessentially just showed you how\nto do that in our sub lesson. So\nwe're going to show you this,\nwe're going to show you the\nHardhead deploys built in\nproxies, and if you want to use\nthe openzeppelin upgrades\nplugin, that is available in the\nGitHub repo as well. So let's go\nahead and do this. So we're\ngoing to go ahead and we're\ngoing to make a new folder, or\ndeploy folder. And first, we're\ngoing to make a new file called\na one, deploy box dot j s. And\nthis is going to look really\nsimilar to everything we've been\ndoing so far. So module dot\nexports, equals async function,\nwe're going to get named\naccounts and deployments. The\narrow function will say const\ndeploy COMM A log equals\ndeployments const deployer\nequals await, get named.\nAccounts, do a little logging,\nlike this, and then we'll say\nconst, box equals await, loi,\nbox, comma, we'll say from\nDeployer, comma, args like this,\nwe'll say weight con formations\nis going to be network dot\nconfig dot block confirmations\nfor Masons. And yep, we got to\ngrab const from hard hat. And\nthen we can add the parameter in\nhere for proxies. And this is\nwhere we can add a ton of\ninformation. So like I said,\nwe're going to use the\ntransparent upgradable proxy\nfrom open Zeppelin, which if we\nwant to use it, we're going to\nhave to add open Zeppelin. So\nwe'll do yarn, add dash dash dev\nat open Zeppelin slash\ncontracts. And we can tell our\nhard hat to deploy this box\ncontract behind a proxy will say\nthe proxy contract is going to\nbe the open Zeppelin transparent\nproxy. And we're also going to\ndo a via admin contract. So\ninstead of having an admin\naddress, for the proxy contract,\nwe're going to have the proxy\ncontract owned by an admin\ncontract. And doing it this way\nis considered a best practice\nfor a number of reasons. But\nwe'll name this admin contract,\nbox proxy admin and the artifact\nfor this box proxy admin. So\nwe'll need to create a box proxy\nadmin contract to be the admin\nof our box. So in our contracts\nfolder, create a new folder\ncalled proxy. And in here, a new\nfile called Box proxy admin that\nsaw and this is going to be the\nadmin contract we're going to\nhave for controlling the proxy\nof our box so inbox proxy admin\ndot Saul will do SP DX license.\nI then to fire MIT pragma\nsolidity, carrot zero, point\n8.7,\nsay contract, box proxy admin,\nlike this, right? And once\nagain, we're going to use one of\nthe open Zetland tools in the\ntransparent folder. They have a\nproxy admin dot Saul, which is\ngoing to be essentially what our\nbox proxy admin is going to be.\nIt has some functionality, it\nhas some functions in here like\nchange, proxy admin, upgrade,\nupgrade and call for dealing\nwith upgrades. All contracts. So\nwe're going to import it will do\nimport at open Zeppelin slash\ncontracts slash proxy slash\ntransparent, slash proxy admin,\ndot soul. And we'll say our\nBrock's box proxy admin is proxy\nadmin, like this. And to have\nthis box proxy admin work with\nthe heart at deploy plugin, our\nconstructor needs to take an\naddress owner as an input\nparameter, but we're just going\nto leave that blank. And then,\nand then we need to do the proxy\nadmin, which is just going to be\nblank as well. And that's it.\nThat's all we're going to do box\nproxy admin contract, which just\nhas all of the functionalities\nto do upgrades and change proxy\nadmin and all this stuff. We're\ngoing to deploy our box contract\nbehind a proxy and opens up and\ntransparent proxy that is owned\nby our Brock's proxy admin\ncontract in the template\nAetherium contracts. GitHub repo\nis actually an examples slash\nopens up on proxies branch that\nwill show you how to work with\ndifferent types of proxies. And\nthere will be a link to this in\nthe GitHub repo associated with\nthis course. And then we'll do\nour verification, say, chains\ndot includes. And we'll go\nahead, I'm going to copy paste\nour hard hat helper config from\nour last project, which has\ndevelopment chains, hard hat and\nlocal host that we export, will\nimport this as well. const\ndevelopment chains equals\nrequire dot slash helper hard\nhat config. If development\nchains dot includes network dot\nname, and process dot env dot\nether scan API key log,\nverifying that the same as we've\ndone a way to verify last, we're\ngoing to copy over our utils\nfolder. So just copy, paste, we\nnow have verify, which will\nimport it in here. So we'll do\nconst verify equals require dot\ndot slash utils, slash verify,\nawait verify box dot address.\nAnd then args is going to be\nblank. So we'll just do blank\nhere, and boom. And that's going\nto be it for our box deployment.\nSo we can test this out by\nrunning yarn Hardhead deploy,\nsee if everything works here.\nAnd that's it done. And then we\nshould do actually, we should\nadd log beach true as well.\nLet's run this again, much\nbetter. So you can see we\nactually deploy a couple of\ncontracts. So we deploy our box\nproxy admin, which is going to\nbe our admin contract, then we\ndeploy box implementation. So\nhard hat deploy, went ahead and\ntook our box contract and\nrenamed it to box implementation\nand then deployed it, then it\ndeployed our box proxy here. So\nanytime we call this address, it\nactually will point to the logic\nof our box. Now what we can do\nis we can write a deploy script\nto deploy box, the box v2\nimplementation, and then upgrade\nour box to box V to create a new\ndeploy script called Zero to\ndeploy box v2 dot j s or deploy\nbox two dot j s. And we'll do\nsomething really similar here.\nRight, so I'm just going to copy\npretty much of this, paste it in\nhere. Now we're going to do\nconst box v two equals await,\ndeploy. Box v two, comma, from\nDeployer. Log True RMS blank,\nweights confirmations, it's\ngoing to be network dot config\ndot lock.\nOr masons, then I'm going to\ncopy the verification code, copy\nthis, paste it here, server,\nthis is going to be box v2 dot\naddress. Okay, great. So we now\nhave some code where we can\ndeploy box and box v2. Now let's\ngo ahead and write a script to\nactually upgrade these. So we'll\ndo a new folder, scripts. New\nFile, and we'll call it upgrade\nbox dot j s. Now we're going to\ndo it the manual way here. And\nthe reason we're going to do it\nthe manual way is because I want\nto show you exactly the\nfunctions that we're calling to\ndo this upgrade process.\nHowever, hard hat deploy also\ncomes with an API to make it\nreally easy to actually just\nupgrade your box contracts. This\nis gonna be script. So we'll\nstart off with async function\nmain. And then we'll copy paste\nour traditional script, main dot\nthen process exit blah, blah,\nblah, that whole thing. We're\nfirst gonna get the box proxy\nadmin contract. We'll say box\nconst. Box, proxy admin equals\nawait ethers dot get contract,\nbox proxy admin and we got to\nimport you Here's from Hardhead,\nthen we're going to get the\nactual proxy, which is our\ntransparent proxy. So we'll say\nconst transparent proxy equals\nawait ethers dot get contract,\nbox underscore proxy. Since hard\nhat deploy, we'll just name the\nproxy the name of the\nimplementation underscore proxy.\nAnd then of course, we're going\nto need our box V to contract.\nSo say const. Box v two equals\nawait ethers dot get contract,\nbox V two. Now we can say const,\nupgrade TX equals a weight box\nproxy admin, that upgrade. And\nwe're going to call the upgrade\nfunction on our box proxy admin,\nwhich calls it on our\ntransparent proxy, which will\nchange the implementation from\nbox one to box two. So box proxy\nadmin, that upgrade, we're going\nto upgrade the transparent proxy\ndot address to our box B to that\naddress, it will look in our box\nproxy, a box proxy has an\nupgrade function which calls\nupgrade to on our transparent\nupgradeable proxy will do a\nweight upgrade TX dot wait one.\nAnd now to work with the\nfunctions on our box v two,\nwe're gonna say const proxy box\nequals await ethers dot get\ncontract. At box v two, we're\ngoing to get the box v two ABI\nhowever, we're going to load it\nat the transparent proxy\naddress. This way ethers knows\nokay, we're going to call all of\nour functions on the transparent\nproxy address. But this proxy\nbox is going to have the ABI of\nbox v2, which is what we want.\nNow we can say const version\nequals await proxy box dot\nversion. And we'll say console\ndot log version. And if we want\nto compare this to its original\nimplementation, before we\nupgrade, we can do the same\nthing. We can say const proxy\nbox v1, let's actually call this\nproxy box V to say cost proxy\nbox v one is going to be this\nexact same thing\nequals this call box here. And\nwe'll do const version equals\nweight, right proxy box v1 dot\nversion, console dot log\nversion, or version v1, version\nv1. We'll call this version v\ntwo, version v two, and proxy\nbox V two. So we'll get our\nversion v one will upgrade. And\nthen we'll see at that same\naddress what the version\nfunction now returns. So let's\nopen our terminal. If I run\nyarn, our head node will spin up\na node will have deployed our\nadmin our implementation, our\nproxy, and then our box V to\nimplementation. I'll make a new\nterminal. And I'll run yarn,\nhard hat run scripts upgrade box\nthat J S dash dash network,\nlocal host. And we should see\nthat box actually update. And\nthat's exactly what we see. And\nthen let's do well, it's I\nforgot to do.to string in here.\nBut it goes from version one to\nversion two on that exact same\naddress. And with that little\ncode, we have successfully\nlearned how to upgrade our smart\ncontracts programmatically. Now,\nlike I said, in the GitHub repo\nassociated with this lesson, you\ncan also check out the upgrades\nplugin from open Zeppelin. So to\nwork with that, you would just\ndo upgrades dot deploy proxy\nproxy to call the Prepare\nupgrade function, and then\nupgrade upgrade proxy just like\nthat. They also have an upgrade\ntutorial, step by step for\nhardhat that you can follow\nalong with as well. Now I know\nthis was an advanced section.\nAnd I know we went a little bit\nquick here. But honestly, if you\njust finish this section, not\nonly have you completed all\nthese other sections that make\nyou a really powerful smart\ncontract developer. But you've\nlearned some really advanced\nstuff here. We've gone into low\nlevel code like delegate call,\nwe've gotten to assembly we've\ngotten to you'll we've gotten to\nthese proxy patterns, which can\nreally make you a an incredible\nstand out developer in the smart\ncontract space. So if you just\nfinished this section, you\nshould be so so proud of\nyourself because we went really\nfast and because there's a lot\nof advanced information here.\nNow, like I said, 100 percent, be sure\nto go into the discussions tab\nand ask questions and connect\nand talk to other people in the\narea. Maybe look at the already\nrunning discussions and jump in\nand start asking other students\nand start asking other people\nabout what they've learned and\nhow their proxies are going. And\nif they made anything really\ncool. If you're just excited and\nyou want to go to the show and\ntell section, make a show and\ntell me like hey, here's my\nGitHub repo for doing this\nupgrade section. going here and\nbe excited with that being said\ngo and take that coffee break go\ntake that walk go to the gym go\nget excited Go tell your friends\nwe are almost done we have two\nlessons left and then you're\nhome free\nAll right, welcome back to\nlesson 17 For hardhat. Douse,\nyou're almost done. Now for this\nsection, I've actually already\nmade a video on how to code a\ndowel with TypeScript and\nsolidity in JavaScript. So we're\nactually just going to play this\nvideo for this section. The\nreason we're going to display\nthis one is because I did a lot\nof work to make this one look\nreally good. And it's still\nincredibly up to date. So this\nis going to be in TypeScript and\nsolidity. However, we're going\nto have the JavaScript edition\nof the code base in this code\nfrom the video section. If you\nwant the most up to date version\nof this delta template code, you\ncan use, you can select this up\nto date code, which goes to this\ndoubt template repo. I'll be\nupdating this repo periodically\nwith new Dao examples and new\nways to create doubts or\ndecentralized autonomous\norganizations. Now, before we\nlearn how to code a doubt, we\nshould learn what the DAO is.\nAnd again, I've already made a\nvideo that I've put a lot of\nwork into. So we're going to\nwatch what a Dow is from a high\nlevel first, then we're going to\nlearn how to code a Dow. And\nthen our last section is going\nto be security and auditing. And\nwe're going to finish this out.\nSo Bucklin, let's learn what a\nDow is. And then let's go ahead\nand build a Dow, let's do it.\nNow, daos for decentralized\nautonomous organizations is a\nbit of an overloaded term. But\nit typically describes any group\nthat is governed by a\ntransparent set of rules found\non a blockchain or smart\ncontract. And I say overloaded\nbecause some people say bitcoin\nis down because the miners can\nchoose whether or not to upgrade\ntheir software. Other people\nthink that Dows must use\ntransparent smart contracts,\nwhich have the rules ingrained\nright into them. And then other\npeople think Tao is just a\nbuzzword, so they just slap the\nname relay on to any\norganization so that they can\nget some clout. And this makes\nfor sad, Patrick. And it's not\nto be confused with the Dow,\nwhich was an implementation of a\nDow back in 2016, which set the\nrecord for the largest hack at\nthat time. So there's a lot of\ndifferent ways to think about\nand the Dow term is used in a\nlot of different ways. But in\nessence, imagine if all of the\nusers of Google were given\nvoting power into what Google\nshould do next. And the rules of\nthe voting was immutable,\ntransparent, and decentralized.\nThis solves an age old problem\nof trust, centrality and\ntransparency, and giving the\npower to the users of different\nprotocols and applications\ninstead of everything happening\nbehind closed doors. And this\nvoting piece is a cornerstone of\nhow these operate this\nDecentralized Governance, if you\nwill, and it can be summarized\nby company or organization\noperated exclusively through\ncode. And to really understand\nall this, we're going to look\nunder the hood of the protocol\nthat's setting the precedent for\nall other doubts and compound,\nthen once we look at compound,\nwe'll understand what goes into\nbuilding one of these and all\nthe trade offs, all the\ndifferent architectural choices\nmean for your group. And then in\nmy next video, I'm gonna have a\nfull coat along tutorial for\ndevelopers looking to build one\nof these themselves. But be\nabsolutely sure to watch the\nrest of this video because it's\ngoing to give you all the\narchitectural fundamentals. So\nyou can make intelligent\ndecisions when you get to that\nsection. And be sure that you\nand your Dow friends smash the\nlike and subscribe button. So we\ncan keep giving you the best\nengineer first content on the\nplanet when\nit comes to smart contracts.\nLet's get into it. So here we\nhave the compound protocol. It's\na borrowing and lending\napplication that allows users to\nborrow and lend their assets.\nAnd everything about this\napplication is built in smart\ncontracts. Now, oftentimes,\nthey're gonna want to do a lot\nof new things, maybe they want\nto add a new token to allow\nborrowing and lending, maybe\nthey're gonna want to change\nsome of the API parameters,\nmaybe they're gonna want to\nblock certain coins, there's a\nlot of different things that\nthey might want to do. So that's\nwhere we're gonna go ahead to\ngovernance, this is where you\ncan find a user interface for\nlist of all the proposals and\nall the different ballots that\ncame to be. So here's a list of\nsome of the governance proposals\nthat this protocol has actually\nbeen making to improve. And\nlet's look at one of these\nproposals that's currently\nactually in process. So if we\nclick on the proposal, we\nactually see everything about\nthis proposal, who voted for who\nvoted against and the proposal\nhistory here. Now, the first\nthing to one of these proposals\nis somebody has to actually\ncreate the proposal in a\nproposed transaction. And we\nactually see that proposed\ntransaction right here. If we\nclick on this, and we scroll\ndown, we can actually see the\nexact parameters they used to\nmake this proposal. Let's go\nahead and decode the input data.\nAnd we can see this is exactly\nwhat this proposal looks like.\nThe way that they're typically\ndivided is they have a list of\naddresses and the list of\nfunctions to call on those\naddresses. And then obviously,\nthe parameters to pass those\naddresses. So this proposal is\nsaying, Hey, I would like to\ncall Support Market on this\naddress, set reserve factor on\nthis address. Here are the\nparameters we're going to pass.\nThey're obviously encoded with\nbytes. And then here's the\ndescription string of what this\nis doing and why we're actually\ndoing this. The reason we have\nto do this proposal governance\nprocess is that these contracts\nlikely have access controls\nwhere only the owner of these\ncontracts can actually call\nthese Do functions, and the\nowner of these two contracts is\nlikely going to be this\ngovernance style. And values.\nZero just means that we're not\ngoing to send any eath along\nwith these transactions, once a\nproposal has been created, after\na short delay to becomes active,\nand this is when people can\nactually start voting on them,\nthis delay between a proposal\nand an act of vote can be\nchanged or modified, depending\non your doubt, then people have\nsome time to start voting on\nthem. And if it passes, which\nthis one overwhelmingly did, it\nreaches succeeded, we click on\nthis transaction again, and we\ngo to the compound governance\ncontract. And we scroll down to\ncontract, right as proxy, we can\nactually see the exact function\nthat the people call to vote,\nnamely cast by vote, cast, vote\nby signature and cast vote with\nreason. We'll talk a little bit\nabout the exact differences\nbetween these in our next video.\nBut these are the functions that\nthey're actually calling. And if\nyou go to the compound app, and\nwe go over to vote, this is a\nuser interface you can actually\nvote through to make it easier\nif you're not as tech savvy. So\nyou can vote right through this\napp dot compound at finance. Or\nyou can just send the\ntransaction yourself. Once all\nthose votes happen. It reaches\nthis queued stage. Now what is\nqueued mean? Well, before a\nproposal actually becomes\nactive, there's a minimum delay\nbetween a proposal passing and a\nproposal being executed. So\nsomebody has to call this cute\nfunction. And it only can be\ncalled if a vote passes. And it\nsays, OK, that postal ID has\nbeen cued, and we're going to\nexecute it soon. Now, if we go\nto a different proposal, like\nthis one, for example, we can\nsee it has been executed, we can\nsee somebody called this\nexecuted function. And they\nexecuted Proposal A detail. So\nthis is going to be a full\nexample of the lifecycle of a\nproposal going through this\nprocess. Now there are a couple\nthat even failed, a whole bunch\nof people voted against this.\nAnd if you scroll down, you can\nsee it was created, it was\nactive, and the majority of\npeople voted against. So that's\nwhere it stops. Now oftentimes,\njust putting one of these\nproposals through isn't enough\nto really garner some votes for\nit, you generally want a forum\nor some type of discussion place\nto talk about these proposals\nand why you liked them or don't\nlike them. Oftentimes, a\ndiscourse is one of the main\nplaces that people are going to\nargue for why something is good,\nor why something is bad. So\npeople can vote on these\nchanges. And again, snapshot\nmight be one of these tools that\nyou use to figure out if your\ncommunity even wants something\nbefore it even goes to vote, you\ncan join one of these, and with\nyour tokens actually vote on\nthings without them being\nexecuted just to get the\nsentiment or like I said before,\nyou could build your protocol in\na way that snapshot actually\nhelps you with the voting\nprocess. All right, now you've\nseen the protocol that has been\ninfluencing all the other\ndetails on how to vote. Now, you\nknow, now that we know what a\ndoubt looks like,\nlet's talk about the\narchitecture and tools that go\ninto building one of these and\nadditionally the trade offs that\nthey have. And the first thing\nto talk about here is going to\nbe the voting mechanism. Now\nvoting in Decentralized\nGovernance is critical to these\ndays, because sometimes they do\nneed to update and change to\nkeep up with the times. Not all\nprotocols need to have a Dow,\nbut those that do need to have a\ndoubt need a way for the\nparticipants to engage. This is\none of the most important\nquestions to ask him to tell\nyour communities. How do I\nparticipate? How do I engage in\nthis doubt? How do I help make\ndecisions and you'll find this\nis a bit of a tricky problem to\nsolve. Now, an easy approach to\nthis problem is going to be\nusing an ERC 20 or an NFT token\nas voting power. Similar to what\nwe saw with compound use the\ncomp token to vote for different\nproposals seems simple enough,\nright? Boom, problem solved\ngray. Now, this actually might\nbe the right approach for\ncertain doubts. But it also runs\nthe risk of actually being less\nfair. Because when you tokenize\nthe voting power, you're\nessentially auctioning off this\nvoting power to whoever's got\nthe deepest pockets, whoever has\nthe most money gets to pick the\nchanges. So if it's only the\nrich people who get to vote,\nthen it's highly likely that all\nthe changes in the protocol are\ngoing to benefit the rich, which\ndoesn't really seem like that\ngreat of an improvement over our\ncurrent world. And if T's are\ninteresting, because they have\nthis non fungible component, but\nyet, even they still run into\nthis issue. Additionally, if you\nbuy a whole bunch of votes, you\nmake a bad decision and then\nsell all your votes. You as an\nindividual don't really get\npunished, you just punish the\ngroup as a whole. But you being\nmalicious, you can get away with\npretty scot free now again, this\nvoting mechanism is going to be\ncorrect for some groups, but for\nother groups, maybe not. It\nreally just depends on what your\ndown community setup is going to\nlook like. Now the next one\nwe're going to talk about is\nskin in the game. Now metallic\nhas actually written a lot about\nthis and I highly recommend you\nread his article, link in the\ndescription to see that the skin\nin the game method means that\nwhenever you make a decision,\nyour vote is recorded. And if\nthat decision leads to a bad\noutcome, your tokens are axed.\nYou get punished for making evil\nor bad decisions for your Dao\nand your protocol. I like this\nmentality because even if you\nbuy a ton of tokens and decide\nto be ill with it, you can be\nheld accountable for your bad\ndecisions. Now, the hardest part\nabout this, though, is gonna be\nhow do we decide as a community?\nWhat is bad outcome? How do we\nactually punish these people?\nAnd that's easy, because the\nanswer is, I'm not sure. Now,\nthe third method of this voting\nmechanism is probably one of the\nmost interesting ones, but also\nthe hardest ones to implement.\nAnd this is proof of personhood,\nor participation. Imagine that\nall users of the compound\nprotocol were given a single\nvote simply because they use the\nprotocol. And even if they had\n1000 wallets, they use the\nprotocol. One human being means\none vote, this would be amazing,\nand a far more fair\nimplementation where votes\ncouldn't actually just be\nbought. The issue, however,\ncomes in something known as\ncivil resistance, how can we be\nsure that it's one vote equals\none participant and not one\nparticipant pretending to be\n1000s of different people, so\nthey get more votes. This method\nhasn't really been solved yet.\nBut I'm willing to bet some very\nclever engineer will do some\namazing chainlink integration,\nbecause proof of personhood is\nbasically just off chain data\nthat can be delivered on chain.\nAnd that's exactly where\nchanneling shines. Now, as you\ncan see all of these methods and\neven more that you probably\nthink of aren't that far\nfetched. And we actually see\nthese exact same methods\nhappening in the real world.\nProof of personhood or proof of\nparticipation might just be the\nexact same as kind of the\nregular government voting that\nwe see every day. In the United\nStates, at least one person gets\nto vote for one president, you\ncan't go around making a whole\nbunch of fake people and voting\nfor president. But in companies\nthe ERC 20 voting standard kind\nof applies, the more shares of a\ncompany you have maybe the more\nvoting power you have in that\ncompany. So we can draw\nparallels between the real world\nand how voting and governance is\ngoing to work in our smart\ncontracts. And in fact, you\nshould draw parallels and look\nfor inspiration from the web to\nspace. Now when it comes to\nimplementation of the voting, I\nput them into two categories on\nchain voting and off chain\nvoting on chain voting is\nexactly what we saw with\ncompound, the smart contract on\nchain, your voter, you call some\nfunction called vote with your\nmeta mask your ledger or\nwhatever, send a transaction and\nvote, you voted Congrats, you\ncan wear your little sticker now\ncall that function and you send\na transaction, you send a\ntransaction, what are the\ntransactions use that are kind\nof annoying and kind of costly?\nOh, that's right gas, I imagine\nyou have 10,000 people in your\ncommunity and it costs $100 To\nvote per person, you're now\ncosting your community $1\nmillion. Anytime you want to\nchange anything. This is\nobviously insane, and not very\nsustainable for your community\npro here is that the\narchitecture is really easy.\nEverything's going to be\ntransparent, everything's going\nto be on chain. And that's\nreally good. But yes, the con is\nthat you're going to break the\nbank account for a lot of people\npotentially. Now there are a lot\nof variations of this to help\nsolve some of these problems,\nespecially the gas problem. One\nof the ones that I'm incredibly\nexcited for is this one called\ngovernor's seat, where they use\nsome random sampling to do some\nquadratic voting to help reduce\ncosts while increasing civil\nresistance. You want to learn\nmore about that one to be sure\nto read about it in the\ndescription. So on chain voting\nis the simplest one here. But\nlet's talk about off chain\nvoting. To cast the vote off to\ndecentralized context, relax,\nrelax, you can vote off chain\nand still have the 100%\ndecentralized, you can actually\nsign a transaction and sign a\nvote without actually sending to\na blockchain and therefore\nwithout actually spending any\ngas. Instead, what you can do is\nsend that signed transaction to\na decentralized database like\nIPFS, count up all the votes in\nIPFS. And then when time comes,\ndeliver the result of that data\nthrough something like an Oracle\nlike chain link to the\nblockchain all in a single\ntransaction. Alternatively, what\nyou could do is you could replay\nall the same transactions in a\nsingle transaction to save gas,\nthis can reduce the voting cost\nby up to 99%. Right now, this is\nan implementation and one of the\nmost popular ways to do this is\nthrough snapshot. And I'm just\ndying for someone to make a\nchain link integration because\nit's going to be so much safer,\nmore secure and better and blah,\nblah, blah, die for it. This is\nyour call to action go build\nthis thing. This option. voting\nmechanism obviously saves a ton\nof gas to the community and can\nbe a more efficient way to store\nthese transactions anyways,\nhowever, it needs to be\nimplemented very carefully. If\nyou run your entire Dow through\na centralized Oracle, you are\nessentially reintroducing a\ncentralized intermediary and\nruining the decent quality of\nyour application. So don't do\nthat. And if you made it to this\npoint of the video, give\nyourself a little pat on the\nback. You're doing fantastic.\nFantastic. Like I said, I have a\nvideo coming out after this one\nit's going to show you end to\nend how to build one of these\nfrom scratch let's learn about\nsome of the tools that you can\nuse to help get you up to speed\nquicker. Now there are a number\nof no code solutions that can go\ninto building one of these\ndowels Tao stack Aragon. Just\nkidding, this is Aragon, colony\nand Tao house are all\nalternatives that can actually\nhelp you with the upside of\nrunning a Dao and building a\ndoubt. However, if you want more\ngranular control and you don't\nwant to have to pay any the fees\nassociated with these protocols,\nyou might want to Do it from\nscratch. Now let's talk about\nsome of the more Cody solutions\nthat you can use snapshot is one\nof the most popular tools out\nthere for both getting the\nsentiment of a Dao. And actually\nperforming that execution, users\ncan vote through this protocol\nwith their actual tokens, those\ntransaction gets stored in IPFS.\nBut none of it actually gets\nexecuted. Unless the doubt\nchooses to, this can be a great\nway to get a feel for what your\nDow wants to do. And Optionally,\nyou can send the transactions\nand execute the votes as well\nhighly recommend checking out\nZodiac which is a suite of\ndatabase tools for you to\nimplement into your Dallas as\nwell tally is another one of\nthese UIs that allows people to\nsee and actually vote and\ninteract with these smart\ncontracts through user\ninterface. So those of you who\ndon't know about Gnosis safe,\nyou absolutely should know Safe\nis a multi SIG wallet. And the\nreason I put this on the list,\neven though it's adds kind of\nthis centrality component is\nthat most dowels in the\nbeginning, are probably going to\nstart with some type of\ncentrality, it's much easier to\nbe fast when you don't have\n1000s of people to wait for a\nvote. And in the beginning, any\nprotocol is going to be\ncentralized to some degree\nanyways, using a multisig, we're\nvoting happens through only a\nfew key members can be good in\nthe beginning for your dials,\nand often emergencies as well.\nBut just keep in mind, when you\nadd one of these, you are adding\nthis level of centrality, and\nthen of course opens up and\ncontracts we love opens up and\ncontracts. These are the\ncontracts that we're going to be\nbasing our Dao code along.\nAlright, so that's all the\ntools. That's the architecture.\nOne more thing before I let you\ngo legality, the future of Dows\nis interesting for all these\nreasons we just talked about,\nbut especially on a legal front,\ndoes it make sense for a doubt\nto live by the same regulation\nas another company? Why would\nyou even force it down to do\nsomething, you'd have to enforce\nthem to all vote a certain way\nif the government tells you to,\nit's a little gray, it's hard to\nnail down who to even keep\naccountable for these days and\nthe United States at least you\ncan actually form your own Dow\nand have it legally recognized\nin the state of Wyoming. This is\nsomething I want to do. So we'll\njust have to see what happens\nthere. Oh, at this point, you\nhave been injected with all the\nDow knowledge you need to\nsucceed and thrive with this new\namazing technology and these new\namazing concepts. And I found\nthem kill baby. All right, well,\nyou heard him it's time to\nbuild. Like we said, All the\ncode is going to be located in\nless than 17 Here, let's jump\nin.\nIn this video, we're going to\nshow you how to build your own\ndoubt inspired by compound now\nthis is going to be 100% on\nchain voting and on chain\ngovernance. We're going to show\nyou the easiest way to spin up\nan NFT or ERC 20 voting type\ndown all using solidity and\nhardhat. Now if you haven't\nwatched my last video going over\nthe architecture of Dows, what\ngoes into one of these be\nabsolutely sure to watch that\nvideo first and then come to\nthis video. Because that video\nexplains all the philosophy\nbehind what we're doing here\nwe're going to be using opens up\nand contracts and a hard hat\nframework to build this all in\nsolidity. If you want to see a\nbrand new or Pythonic version of\ndoing this, check the link in\nthe description because we did a\nvideo over at the chainlink\nhackathon recently. And\nadditionally, additionally, we\nknow that because we're doing\nthis 100% on chain gas fees are\ngoing to be expensive. So I'm\nreally looking forward to\nsomebody doing a chain link plus\nIPFS plus snapshot integration\nso that we can do all this off\nchain. And once that exists, you\nalready know I'm gonna make a\ntutorial on that. And if you\nlike this style of content, be\nsure to smash that like button,\nsubscribe and leave a comment in\nthe comment section to let me\nknow what you want to see. Next,\nlet me know how you want to\nsupercharge your smart contract\ndeveloper experience. So let's\njump in. Right, so here's what\nwe're going to be building,\nwe're gonna have a very basic\nsmart contract here, right, it's\ncalled box and all it can do is\nstore a value and then retrieve\na value. But the thing is, its\nownable. And only the owner of\nthis contract can call the store\nfunction and guess who the owner\nis going to be the owner is\ngoing to be the doubt. So only\nthrough a process of governance,\ncan anyone store a different\nfunction here. And once we're\ndone, we're going to go through\nthe entire process of proposing\nvoting queueing and then\nexecuting a transaction in a Dao\nto update our Bach contract. And\nthat's one of the beautiful\nthings about these these Dao\nsetups is that they're\ncompletely modular, right. And\nso when I go through the whole\nprocess, I'll do Hardhead tests\nhere, which my tests right now\nare set up to just do\neverything, we're going to see\nevery single step that this Dow\nis going to take. So we see box\nstarting value is going to be\nzero. And then all of this stuff\nis going to the governance\nprocess. These are just some\nsome notes. Basically people are\nvoting, queueing and executing.\nAnd then at the end, we chained\nthe value of the box contract\nthrough a voting process. And\nthat's exactly what we're gonna\nshow you how to do today. Now\nremember all the code for what\nwe're going to be doing here is\nin my doubt template GitHub repo\nso if you ever get lost, feel\nfree to refer back to this to\nget started. And additionally,\nif you want to see the Pythonic\nversion of this, feel free to go\nback to the downmix The main\nthing is though that all the\ncontracts are going to be the\nsame no matter what brownie hard\nhat, dab tools, foundry, it\ndoesn't matter. So the first\npart of this section is gonna be\nexactly the same. And here's our\nagenda here. First, we're gonna\nwrite the smart contract. So if\nyou're not familiar with\nHardhead, who cares, we're gonna\nbe doing the smart contracts\nfirst, then we are going to\nwrite deployment scripts. And\nthis is where your hard hat\nknowledge is going to come into\nplay. We're going to be writing\nour deployment scripts in\nTypeScript here, because\nTypeScript is phenomenal. If\nyou're unfamiliar with\nTypeScript, I challenge you to\nrewrite this in JavaScript and\nmake a JavaScript version. And\nthen finally, we're going to\nwrite some scripts to interact\nwith our governance with our\ndeployed contracts. Now, a quick\nnote, this isn't how I\noriginally built this, I didn't\njust read smart contracts, write\ndeployment scripts, write the\nscripts, and then the tests and\nboom, I was done, I had a back\nand forth between tests, smart\ncontracts, deploy scripts, etc.\nIf you're thinking, Oh, my\ngoodness, that's so easy for him\nto go through this. So\nseamlessly. When I originally\nwrote this code, it was a lot of\nback and forth. And that's how\nyou should be developing, you're\ngoing to be moving between tests\nand smart contracts and stuff.\nAdditionally, in this tutorial,\nwe are going to show you some\nsick Hardhead skills. So you are\nnot only gonna learn how to\nbuild a Dow, but you're gonna\nlearn some really advanced\nHardhead skills. So let's jump\nin. Let's do this. So the code\neditor I'm using is Visual\nStudio code. So make sure you\nhave a code editor up and ready\nto go. And you'll need a couple\nof prerequisites here. Again,\nthe prerequisites are in the\nGitHub repository, we're going\nto need Git, no J, s. And yarn,\nif you want to just clone this\nrepo and follow the instructions\nhere to get started, you\nabsolutely 100% can and then you\ndon't even need to build this\nfrom scratch. But we're going to\nwant to learn to build this from\nscratch. So let's just start git\ndash dash version. Great, we\nhave Git no dash dash version.\nGreat, we have node, and then\nyarn dash dash version. Great,\nwe have yarn, we can get\nstarted. So everything that\nwe're going to be installing\nhere for packages is going to be\na dev dependency. So the first\nthing we need to do is do yarn,\nadd dash dash Dev, hard hat,\nif you'd haven't already. And\nnow in our folder, we're gonna\nhave node modules package dot\nJSON readme and a lock. Of\ncourse, now that we have that we\ncan run yarn RDAP, we're gonna\nget the hard hat CLI up. And\nwe're going to have all this\nstuff in here, we're just going\nto create an empty hardhat dot\nconfig dot j s, and we're going\nto turn it to TypeScript. The\nadvanced sample TypeScript\nproject has a bunch of stuff\nthat I don't like. So we're just\ngoing to create an empty\nhardhead.config.js. And perfect,\nwe've got a little hard\nhat.config.js. Now let's go\nahead and create a folder, or\ncontracts folder. And this is\nwhere we're going to add all of\nour contracts. So the first\nthing contract that we're going\nto need is the contracts we want\nto have govern, which in our\ncase is going to be box dot\nsoul. Now, I am actually just\ngoing to copy paste my box, that\nsoul here, because it's not\nparticularly interesting. But\nyou could really code whatever\nyou want here. So feel free to\npause the video, copy paste from\nmy GitHub repo, create your own\ngovernance contract that you\nwant to play with, or do\nwhatever you want here. But for\nus, we just have a store\nfunction, and retrieve function,\nand an event, and then a private\nvalue that we're going to be\nstoring and retrieving. And\nthat's it. So of course, we want\nto fix this. We're importing\nfrom openzeppelin contracts\nopens up is amazing. We're gonna\nwant to add this we'll do yarn,\nadd dash dash Dev, at opens up\non contracts. And that should\nget rid of the box. That's all.\nlet's reopen box. And boom,\nlooks like we did a detour to\nthat perfect. And for\nextensions, I'm using the\nsolidity, the one Blonko, slit\nextension. And that's what we\nget this wonderful linting\nthings here. Great. So now we\nwant to check to see if this\ncompiles if using remix, you can\ncompile with remix hard hat,\nyou're gonna see how we compile\nhere. Or if you're using you\nknow, Browning, we just want to\nsee if this compiles correctly.\nSo run yarn had a hard hit\nCompile. Looks like we ran into\nsome compilation errors, because\nwe need to update this, let's\nuse these 8.8 of solidity we'll\ntry to compile again. And\nperfect looks like we're\ncompiling successfully. Look\nhere, we do indeed have our\ncontract in here. Okay, perfect,\neasy part out of the way.\nAlready. That was so quick. Now\nlet's start creating the next\npart. Let's create the\ngovernance part. So what we're\ngoing to be working with to\nbuild this governance platform\nis we're gonna be building it\noff of the ERC. 20 standard, so\nyou're gonna get an ERC 20\ntoken. And that's going to be\nthe token that you get to vote.\nSo let's create a new file\ncalled governance token. That's\nall governance token dot Sol.\nAnd this is gonna be the code\nfor the token that we use to\nactually vote. Now we're going\nto create a normal ERC 20 token.\nAnd then we're going to extend\nit to make it governance a bowl\nand you'll understand what I\nmean in a second. So let's go\nahead and make this spdx license\nidentifier. It's going to be MIT\npragma solidity we'll do zero\npoint 8.8. And then we'll do\ncontract governance token, and\nthen we'll say is ERC 20 I'm\njust gonna go ahead and import\nopenzeppelin Because open\nZeppelin has a package where\nbasically has everything we need\nfor an ERC 20 token. So we're\ngonna say import at open\nZeppelin slash contracts slash\ntoken slash ERC 20x We can go to\ntheir github openzeppelin\ncontracts token, your C 20 And\nwe'll do ERC 20 Dotto, we'll do\nthis for now.\ntoken, use your C 20 ditzel.\nWe're gonna change this, but\ndon't worry about that yet. Now\nwe're going to do a un 256\nPublic Storage Max supply, it's\nthe best practice, but it's\nfine, we'll give this a max\nsupply this much was going to be\n1-234-567-8910 12345678. So it's\ngonna be 1 million, we're gonna\ndo 1 million of these tokens.\nAnd then we're gonna create the\nconstructor construct or your C\n20. Give it governance token as\na name, and then our symbol is\ngoing to be GT. And for those\nwho who don't know, when you\ninherit another contract in your\nconstructor, you can use that\ninherited contracts constructor\nas well. In fact, I think you\nhave to So governance token G\nteam, and then we'll even call\none of these ERC 20 functions\ncalled mint. And we'll mint to\nmessage dot sender, so whoever\ndeploys this ERC 20 contract\nwill just meant them everything,\nthe whole Max supply. Now\nnormally, if this was a normal\nERC 20 token, you'd be all done.\nBut this isn't a normal ERC 20\ntoken. See, when we do votes, we\nneed to make sure that it's\nfair, imagine this for a second,\nsomeone knows a hot proposal is\ncoming up, they want to vote on.\nSo they just buy a ton of\ntokens. And then they dump it\nafter the votes over. We want to\navoid this. We want to avoid\npeople just buying and selling\ntokens to get in on governance.\nSo what we do is we actually\ncreate a snapshot of how many\ntokens people have at a certain\nblock snapshot of tokens people\nhave at a certain block. And we\nwant to make sure once a\nproposal goes through, we\nactually pick a snapshot from\nthe past that we want to use\nthis kind of incentivizes people\nto not just jump in when it's a\nproposal and jump out because\nonce a proposal hits, it uses a\nblock snapshot from the past. So\nwe're actually going to need to\nchange this a little bit. We're\ngonna change this from ERC 20 to\nan ERC 20 votes, and we can\nactually see this in open\nZeppelin and the extensions\nslash ERC 20 votes that soul\ncontract. If we go back to IRS\nto their GitHub, we can see ERC\n20 votes, they also have a\nsnapshot, which is pretty\nsimilar. And some of the main\nfunctions are it has these\ncheckpoints. So these\ncheckpoints are basically Hey,\nwhat is the snapshot? There's a\nnumber of checkpoints, you can\nalso delegate your tokens to\ndifferent people. So maybe\nyou're not going to be available\nto actually vote. So you say,\nHey, I'm gonna give my tokens to\nsomebody else. You can get how\nmany votes somebody has passed,\nvotes get passed, or was apply\nit has all these functions that\nmake this token, much better as\na voting tool. Right makes it\nmuch much better. So we're gonna\nsay our contracts governance\ntoken is ERC 20 votes and we\njust have to add additional\nconstructor, this ERC 20 permit,\nI'm sorry, I kind of copied\npasted that. So ERC 20 permit\ngovernance token. And right now\nwe have a governance token that\nis a little bit more capable of\ndoing actual voting, right,\nbecause as the snapshot has this\ndelegating functionality, it has\nthese checkpoints, it's going to\nbe much better for doing votes\nin a fair way. The only thing\nthat we need to do though, is we\nneed to add some overrides,\nright. And we're just gonna say\nthe functions below our\noverrides required by solidity.\nAnd this part is a little bit\nboring. So I'm just going to\ncopy paste it, feel free to copy\npaste it from my GitHub. But\nwhat we're doing is anytime we\ndo this after token transfer,\nand the time we transfer a\ntoken, we want to make sure that\nwe call the after token transfer\nof the ERC 20 votes. And the\nreason that we do this is\nbecause we want to make sure\nthat the snapshots are updated,\nright, we want to make sure that\nwe know how many people have how\nmany tokens at each block. Same\nthing with the mint. Same thing\nwith burning, we want to make\nsure we always know how many\ntokens people have at different\nblocks or can be at different\ncheckpoints I should say. And\nthat's the most important bit at\nwhich checkpoint Are you going\nto use for your token voting. So\ncool. Feel free to copy that,\nagain, from a GitHub or if you\nwant you can even just try the\nrest of the tutorial without\nthis and see how you fare. But\ncool. So now we have a\ngovernance token and ERC 20\ntoken that we can use for\ngovernance. So let's try to\ncompile it. Yarn Hardhead\ncompile. Great, looks like\nthings are compiling\nsuccessfully. Perfect. So our\ngovernance token looks good. Our\nbox looks good. Let's actually\nnow start creating our\ngovernance contracts. Now we're\nactually going to make a folder\ncalled governance standard\nbecause this is going to be the\nstandard governance model. This\nis going to be this on chain ERC\n20 and I plan on updating this\nin the future with no a\ngovernance off chain or\nsomething right. So for now,\nwe're calling a governance\nstandard because this is the\nquote unquote standard way to do\ngovernance, but in the air,\nwe're going to need two\ncontracts actually, we're gonna\nneed a government work, contract\nthat soul and then we're also\ngoing to need a time lock that\nsoul and this will make sense in\na second. So our gov contract\ndot soul, this is going to be\nthe contract that has all the\nvoting code, all the voting\nlogic that our governance token\nis going to use, the Time Lock\nis actually going to be an\nadditional contract that is\nactually the owner. So the Time\nLock and the governor contract\nare sort of one in the same, but\nthe difference is the Time Lock\nis actually going to be the\nowner of the box contract. And\nthis is important because\nwhenever we propose or cue\nsomething to a proposal to go\nthrough, we want to wait, right?\nWe want to wait for a new vote\nto be executed. Now, why do we\nwant to do that, let's say some\nproposal goes through, that's\nbad. So like, let's say we have\na box contract. And then a\nproposal goes through that says,\nEveryone who holds the\ngovernance token has to pay five\ntokens, or something like that,\nright, or whatever, or who\nknows, right? Maybe that's\nsomething that you don't really\nwant to be a part of. So all of\nthese governance contracts give\ntime to give time to users to\nget out, if they don't like a\ngovernance update. So we always\nwant to have some type of\ntimeline. So once a proposal\npasses, it won't go in effect\nright away, it'll have to wait\nsome duration, and then go in\neffect. So that's what the\ntimeline is gonna be for.\nGovernor contract is going to\nhave all of our actual code. Now\nwe can cheat a little bit.\nActually, we can cheat a lot of\na little bit. So opens up one\nhas a thing called the contracts\nwizard, and there'll be a link\nto this in the description as\nwell. And this opens up when\nwizard is a way for us to write\nreally basic boilerplate code\nright in there wizard. So right,\nso if we go to the wizard\ncontract here, we can see we can\nmake an ERC 20 and NFT 1155. And\nthen finally, this gov thing\nhere. So we can call it give it\na name, we're going to call Rs.\nGov contract, during explain\nwhat all this means, and give it\na voting delay, which is the\ndelay since a proposal is\ncreated until voting starts. So\nonce you create a proposal, you\ngotta wait a little bit, the\nvoting period, how long votes\nshould go for. And the reason\nthat this audio is important is\nbecause they actually do votes,\nvoting period in terms of\nblocks. So it's an anti pattern\nto actually do timed based\nthings in smart contracts, it's\nmuch better to do block based\nthings. So we're saying one\nweek, but it's that's going to\nbe you know, if if the average\nblock time is 13.2 seconds,\nwe're gonna figure out the weak\nproposal threshold is going to\nbe the minimum number of votes\nand account must have to create\na proposal. So maybe you only\nwant people who have a lot of\nyour governance token to make\nvotes quorum percentage, it's\nwhat percentage of people need\nto vote it all. So we're saying\n4% of all token holders need to\nvote or we could say you know,\nexactly 100 tokens need to vote\nwhatever we want to do here. We\nalso have some updatable\nsettings we have Bravo\ncompatible Bravo is the compound\ntype contract. So if you want to\nmake it integratable, with\ncompound you can do that. Votes\ncomp like or ERC 20 votes, we're\nworking with this ERC 20 votes,\nwe always want to do a time\nlock, we're gonna do the open\nZeplin implementation of a time\nlock, you could also do a\ncompound implementation, we\naren't going to do upgradability\nhere, however, I have a number\nof fantastic resources on how to\nactually do upgradability. And\nif we did want to do\nupgradability, it adds all this\nother stuff. We're not going to\ndo that for now because it makes\nit so much longer video, and\nthen you can add some stuff like\nthis, but Oh, so that's pretty\nmuch it. And I know this feels\nlike you're cheating, or we're\njust going to copy this whole\nthing, right? Copy all that\nstuff that we put in copy to\nclipboard, and we're going to\npaste it in. Don't worry, I'm\ngonna explain what's going on\nnow. So we have our government\ncontract. And this is governor\nGovernor setting Governor\ncounting simple Governor votes,\nGovernor votes, quorum Franco,\nall this stuff. All these are\njust implementations to make it\neasier to be governor, Governor\ncounting simple is a way of\ncounting votes, Governor votes\nis a way of integrating with\nthat year's 20 contract. Quorum\nfraction is is a way to\nunderstand quorum time lock.\nObviously, it's time lock. This\nis going to be the base\ncontract. That's gonna be some\nsettings. And we're gonna talk\nabout this in a minute. But\nlet's go over what are the\nfunctions here so we have voting\ndelay. This is exactly the\nvoting delay, which we're gonna\ndo superdad voting gelei, we're\ngonna get from this governor\nsettings contract that we're\ngoing to set in a minute your\nvoting period that we're going\nto set in our gov settings,\nwhich is this one right here.\nAnd again, if you want to like\nlook at all these contracts, you\nabsolutely can, right, if we go\nto contracts, governance,\nextensions, we have all these in\nhere, right? So if we look at\ngovernance settings, we can see\nit has voting delay voting\nperiod, proposal threshold, and\nthose are right in its\nconstructor. And that's exactly\nwhat we're setting, right. We're\nsetting voting delay voting\nperiod, and then the proposal\nthreshold, and then we're also\ngoing to make this customizable\nas well. And the rest of these\nthat's exactly what doing\ncalling the quorum from the\nsuper get votes. And then again,\nthe super is those inherited\ncontracts, get the state and\nthen we have some interesting\nfunctions we have proposed. This\nis what we're actually going to\ndo to propose new governance we\nhave proposal threshold, and\nthen we have execute which\nexecutes a cued proposal. To\ncancel, we have executor which\nwe're is going to be who can\nactually execute stuff, we're\nactually going to make it\nanybody and then supports\ninterface, you can basically\nignore. But let's make this a\nlittle bit more customizable. So\nwe have Iboats token, this is\ngoing to be our governance\ntoken, the timeline controller\ntimeline, this is going to be\nthe timeline controller that we\nmake an amended. And again, we\nneed this because we don't want\nto let any proposal just go\nthrough once it passes, we want\nto give people time to get out.\nBut let's add the UN 256 voting\ndelay as a parameter here. And\nfor voting delay, we're going to\ndo this, we're going to set it\nas our governor settings, we're\ngoing to do a UNT 256 voting\nperiod. And we're going to add\nthat right here. And this means\n45,000 blocks is approximately\none week. And that's what that\nmeans we're going to leave\nproposal threshold to zero\nbecause we don't really want to\nchange that we want to let\nanyone make a proposal. And then\nwe're just going to add you in\n256 underscore core\npercentage to this. So Governor\nvotes quorum percentage\ncorporate senators. So now this\nis completely customizable, for\nvoting, delay voting period,\ncore percentage for whatever you\nwant it to be. And believe it or\nnot, that's it. Now you have a\nsimple governance contract.\nThank you, openzeppelin, for\ndoing 99% of the work for us. So\nthat's it. So this contract,\nit's going to have all these\nfunctions that we're going to go\nover for proposing for executing\nand for queuing, different\nproposals. Right. Now we got to\nmake a time lock contract here.\nAnd this contract is actually\ngoing to be a lot easier. So\nwe're just going to do it from\nscratch. So we're going to spdx\nlicense I then to fire, my team,\ndo pragma solidity and let's\njust do this your point a point\nzero, and then we're going to\nimport from open Zeppelin, a\ncontract called the Time Lock\ncontroller. So if we look at the\ngovernance here, if this time\nlock controller dot soul\ncontract, and this has all this\nfunctionality in here for\ncreating roles, who can actually\npropose who can execute, who's\nthe Time Lock admin, but it also\nhas these execute stuff in here\nas well. It's gonna work in\ntandem with our governance\ncontract, right? This is the\ncontract that says that makes\nsure our governance contract\ndoesn't just push stuff through\nwilly nilly. So we're gonna say\nwe're gonna first import that\nimport at open Zeppelin slash\ncontracts slash governance slash\nTime Lock controller. That's all\nand then we're gonna say\ncontract, I'm lock is Time Lock\ncontroller like that. And we'll\ncreate our little constructor\nhere, and truck door. And this\nbecause this takes a couple\ndifferent parameters, we're\ngonna take a un 256 Min delay,\nwhich are min delay, Min delay\nis going to be along you have to\nwait before executing. So this\nis Hey, once proposal passes,\ngreat, we gotta wait this\nminimum delay, then we're going\nto do a list of proposers, an\naddress array memory of\nproposers. And then the\nproposers is the list of\naddresses that can propose for\nus, we're just gonna say\neveryone's gonna be able to\npropose. And then last, an\naddress array, memory of\nexecutors who can execute\neverything, and we're just gonna\nsay executors who can execute\nwhen a probe posle passes. And\nagain, we're just gonna say\neverybody, and the reason we\nneed these is because we need to\npass these to our time lock\ncontroller, this constructor is\nexpecting three parameters. So\nwe'll just do Tama controller,\ndelay, pro posers, X EQ, tours.\nAnd that's it. So this is going\nto be what owns everything, it's\nthe timelog, that's going to be\nowning our box. It's not the\ngovernment contract, the\ngovernment contracts is where\nwe're going to send our votes\nand stuff. But at the time lock\nthat actually everything needs\nto flow through in order for\ngovernance to actually happen,\nbecause we want to make sure we\nhave this min delay, we go\nthrough the right process and\neverything. And believe it or\nnot, that's everything. That is\nall the code you're going to\nneed as far as the solidity\ngoes, to create a governance to\ncreate a Dao. So even do your\nown hard hat compile, make sure\neverything's compiled. And tada,\nwe've done it, you've done most\nof the hard work. Now we're\ngoing to flip over to actually\nwriting the scripts to deploy\nand to interact with everything\nusing TypeScript here. At this\npoint, if you're like, Oh, I\nalready learned everything that\nI wanted, I don't use hard hat,\nI use some other tools. This is\nwhere I challenge you to go out\nand I challenge you to try\nsomething else. Now if you've\nreached this point, I just want\nto give you a huge congrats,\nbecause you have taken the steps\nto build your own doubt build\nyour own governance model.\nThat's all the solidity that you\nreally need. You can take that\ndeploy that and you're good to\ngo. But of course, we know that\nthere's more to being a smart\ncontract developer than just the\nsolidity you got to do the\ntooling right to let's go ahead\nand we'll jump into writing\nthose TypeScript scripts to\nactually do this. And again, if\nyou want to see a Python version\nof this, go check out a link up\ndescription to see the Pythonic\nversion of this. And of course,\ndon't forget to smash that like\nbutton, subscribe, leave a\ncomment on how you're doing so\nfar. And, of course, give\nyourself a pat in the back.\nGreat job. You're doing amazing\ngetting this far. Congrats,\nlet's jump in.\nAlright, so we're back here,\nwe've written our smart\ncontracts already, check wasn't\nthat easy, right, this was way\neasier than I thought it would\nbe. Now we're just gonna write\nour deployment scripts, and then\nwe're gonna write our scripts to\ninteract with them. Again, my\nfull repo also has tests, but\nwe're just gonna write some\nscripts. And then feel free to\ncheck out the tests yourself. So\nlet's write those deployment\nscripts to we're actually going\nto be using a package for\ndeployment called Hard Hat\ndeploy. It is absolutely\nphenomenal for hard hat for\nmaking your deployments much,\nmuch easier. We're gonna scroll\ndown to installation, and we're\nactually gonna go ahead and\ninstall this. So typically, you\ncould install it like this.\nWell, we're gonna use yarn, but\nwe're gonna do kind of the more\nsafe way which looks a little\nwonky, but I'm explaining it\nright. So instead of NPM\ninstall, we're gonna do yarn,\nadd dash dash Dev, and then this\nwhole thing right here. So we're\ngonna do yarn, add dash dash\nDev, and then just paste that in\nhere. So this is gonna be at\nnomic, labs slash hard hat,\nhyphen ethers at NPM, colon,\nhard hat, deploy ethers. And\nwhat this is doing is we're\nbasically saying hard hat deploy\nethers is going to be overriding\nthis hardened ether thing. And\nwe're also going to add ethers\nas well. And then once we add\nthis in, check our package json,\nwe can see we have hard hats. We\nhave hard hat ethers, which is\nbeing overwritten by this hard\nhat, deploy ethers. And then\nadditionally, we're going to\nwant to add on a deploy. So do\nyarn, add dash dash Dev, hard\nhat hyphen, deploy. And what\nthis is going to allow us to do\nis instead of having to write\nscripts, and do all this stuff,\nthat kind of makes it hard to\nsave your deployments and\neverything, we're going to just\ncreate a deploy folder, where\nwe're going to add all of our\ndeploy scripts in here. So I\nabsolutely love this package.\nIt's makes deployment really,\nreally easy. So in here, we're\ngonna create new file, it's\ngoing to do oh one, we're gonna\ngo step by step deploying\neverything, we're gonna call\nthis deploy, govern or token dot\nTypeScript, that's gonna be the\nfirst thing we're going to do.\nAlso, we're gonna change this to\nTypeScript. Tada, we now have\nTypeScript. Yay. Now the one\nthing that is kind of nice about\ndoing kind of that advanced\nTypeScript thing at the heart\nhad kind of gives it the\nbeginning, is you don't have to\ninstall all the TypeScript stuff\nyourself. But we do. So we're\ngoing to do yarn, add TypeScript\ntype chain, vs node at type\nchain slash ethers, V five, this\nis a lot of stuff, don't worry\ntype chain slash hard hat, at\ntype slash Chai, at type slash\nnode. And then we'll make sure\nthis is all Dev, dash dash Dev,\nI know there's a lot of stuff.\nThere's all this stuff to make\nit TypeScript D.\nYou can absolutely do this in\nJavaScript if you want. You just\nhave to do JS files and ignore\nthe typing. So But feel free to\ndo whatever you want to do.\nAlright, cool. And we should be\nokay here. Let's go into our\ngovernor token here. And we'll\ncreate a deploy script. So the\nHardhead deploy GitHub repo has\na little demo boilerplate code\nfor you actually do your deploy\nscript. So feel free to\nreference here if you lost or\nconfused. So what we're going to\ndo is we're going to import the\nhard hat runtime environments,\nfrom our enhanced slash types.\nAnd you'll see why we need this\nin just a second. And then we're\nalso going to import deploy\nfunction from Hardhead. Deploy\nslash types. And these are the\ntwo main things you need to\ncreate a deploy function with\npothead deploy, we're going to\ncreate our function, we're going\nto call it const ploy governance\ntoken, it's going to be of type\ndeploy function. So in order for\nthese to actually work, we just\ncreate a whole bunch of deploy\nfunctions that we run with heart\nhub. And this is going to be an\nasync function. That's going to\ntake the hard hat runtime\nenvironment as an input\nparameter that we're going to\ncall HRV. So when we run hard\nhat deploy, which you'll see in\na second, we're actually passing\nour fake hard hat chain that\ngets spun up in the background\nfor us, right, we can even do\nlike console dot log Hello. And\nif we do yarn, hard hat deploy.\nActually, before we even do\nthat, if we do yarn, hard hat\ndash dash help, you'll see,\nsince we imported hard hat\ndeploy up excuse me, we need to\nadd this to our config. First in\nour config, we're gonna need to\ndo top imports, hard hat deploy\ntop Roscoe need to import at\nnomic labs slash hard hat\nethers, we're also going to need\nto import at type chain slash\nhard hat. And then we'll leave\nit there for now. We'll have to\nimport more stuff in a second\nbut literally like that. Now, if\nwe do yarn hard hat that should\nhelp we should see a new task in\nhere. And we do we actually see\na ton of new tasks right? Filled\nwith tasks, check clean compile,\nconsole deployed. And this is\nthe new task that we have that\nactually deploys all of our\ncontracts, anything that's in\nthis deploy folder, our head\nwill go ahead and run right now\nin our deploy folder. All we\nhave is this console dot log\nHello. So if we run yarn, or hit\nDeploy, we should See, it just\nprints out hello. It'll spin up\na new blockchain background,\nwhile all of our projects and\neverything, do some type type\nchain stuff, and it says you'll\nsee this a lot deploy script dot\nfunc is not a function. And\nthat's because we actually need\nto export this now. So we'll do\nexport default, deploy\ngovernance token. That's why\nit's getting mad at us. Now\nwe'll run yarn had her hard hat\ndeploy. And boom, we say hello.\nSo this is how we can actually\ndeploy all of our scripts. And\nwe can run everything that's in\nthis deploy folder in one go,\nwhich is really helpful. So\nlet's go ahead and deploy our\ngovernance token first. And this\nwill get a lot faster as we go\nalong. Don't worry, so delete\nthis. And first we're gonna do\nit, we're gonna say const. We\nneed an account to deploy this\nfirst. So we'll say const, get\nnamed accounts, deployments, and\nnetwork equals HRA. And this is\ngoing to be a little bit more\nadvanced. This is hard stuff.\nThis is this is the slick stuff\nwe're doing here, we're getting\nthese from our hard hat runtime\nenvironment, which is being\nupdated from hard hat deploy. So\nget named accounts is way for us\nto actually import accounts from\nour hard hat config, right into\nour deploy script. So we're\ngonna go to our hard hat config.\nAnd we're gonna create a new\nconfig that's a little bit nicer\nthan this. So first, we need to\nimport the hard hat config type.\nSince we're using type scripts,\nwe're going to import hard hat\nuser config from hard hat slash\nconfig. And we're going to\ncreate a config. So I'm just\ngonna comment this out. For now\nwe're gonna say const. Config,\nit's gonna be type hard hat user\nconfig. Equals, and this is\nwhere we can add a whole bunch\nof stuff. So let's say our\ndefault network is going to be\nhard hat, which is kind of our\nlocal fake blockchain. And then\nwe're gonna say solidity is\nzero, point 8.8, then we're\ngoing to do this thing called\nnamed accounts, which is what we\ncame here in the first place\nfor. So this is just a list of\naccounts that we can use. So for\naccounts, we'll say Deployer,\nthis will be the name of our\naccount that does all the\ndeploying, and we'll just say,\ndefault, is going to be zero. So\nwhenever we run an any chain,\nour zero with account is going\nto be named Deployer. What other\nthing that we need to do is we\nneed to add our networks here.\nAnd there's actually two\nnetworks that we're going to\nhave, we're gonna have a hard\nhat with a chain ID of 313337.\nAnd we're also going to have\nlocal hosts of chain ID 31337.\nNow, these look like they're\npretty much the same. And I\nunderstand that, but they're\nnot. And you'll understand why\nin a second, but we need them\nfor now. Just to tell Hardhead\nhey, here are the development\nfake blockchains that we're\nworking with? Okay. So this is\nkind of our basic setup here.\nOkay. I know that was kind of a\nlot. But now that we have get\nnamed accounts, we have network,\nright? Because anytime you\ndeploy something, it's going to\nbe on a network. And when we\ndeploy something, if you run\nyarn, hard hat node, what hard\nhat is going to do, it's going\nto spin up a fake blockchain in\nthe background. Oh, it's gonna\nbe mad at me for a second. Oh,\nI forgot to add export, default\nconfig, right, we need to export\nthe config. Hell hard hat that\nwe're using this version of\nsling. Now if you're on a hard\nhat node, you'll see why we\nadded these two networks up here\nhard hat on localhost, we\nactually get spun up our own\nfake blockchain, we get\naccounts, we get private keys,\nwe get everything right. This is\na hard hat Node running in this\nterminal, right? When you run\nhard hat node, oddly enough,\nit's actually the local host\nnetwork. It's not the Hard Hat\nNetwork. When using hard hat\ndeploy, it's gonna be the local\nhost network. Or excuse me, when\nyou use hard hat node, it's\nactually going to be the local\nhost network, not the Hard Hat\nNetwork. The Hard Hat Network is\nwhat it uses when it runs tests.\nlocalhost is when you run this\nhard hat node and have this kind\nof fake blockchain running in\nyour terminal. So that's what\nthe localhost is. Cool. Well,\nCtrl C will kill that. Alright,\ngreat. So now stuff is actually\nworking. So get them to count\ndeployments is going to be a\nwhole bunch of stuff from\ndeployments, you'll see in a\nsecond and network is the\nnetwork that we're on. Okay,\ngreat. So now we're gonna grab\nconst deploy log equals\ndeployments, this deployments\nobject comes with this deploy\nfunction. And this log function,\nthis log function is kind of\nnice for doing logging. And then\nwe're gonna grab const, employer\nequals await, get named\naccounts. So we're grabbing from\nour config, this deployer\naccount, right? And it's always\ngoing to be the zero with index.\nSo it's defaulted to the zero\nindex for whatever accounts that\nwere with. Great. So we now have\nan account to deploy stuff from\nwe have a deploy function, we\nhave all this stuff, we're\nlooking pretty good. Cool. So\nsometimes they'll do like a log,\nflying governance token, dot,\nand we'll say const governance\ntoken equals await, deploy, and\nthen the name of the contract\nwhich is governance token,\ncomma, and these are all the\nparameters that we're going to\npass to it. So we're gonna say\nfrom deployer doesn't take any\narguments. So args is just going\nto be blank. We're going to do\nlog to be true so we'll get some\nlogs printed out for us. And\nthen I have this wait\nconfirmations attribute set in\nGitHub repo. For now we're going\nto ignore this. But if you\nfollow along with my repo and\nyou want to auto verify stuff,\nthis is something that you're\ngoing to want to use. So you\nneed to wait some amount of\nblocks for this contract to be\ndeployed before you can actually\ngo ahead and verify it, right.\nBecause if you're using ether\nscan or something, you're gonna\nneed to wait like, yeah, you're\ngonna need to wait a few\nminutes. So check out my GitHub\nrepo for this wait confirmation\nstuff, I'm just going to ignore\nit for now. Additionally, in my\nGitHub repo, I have this verify\nfunction, where we check to see\nif it's on a development chain.\nAnd if it is, we don't verify\nit. But if it's on like ether\nscan or something, we go ahead\nand verify it. So be sure to\ncheck the GitHub repo to learn\nhow to just auto verify without\nhaving to do anything. Now if we\njust do this part. And then we\ncan even do Floyd, governance\ntoken to address governance\ntoken dot address. And we'll do\nyarn hardhat. Deploy. Boom. So\nwe spin up on a fake Hard Hat\nNetwork, we do deploy governance\ntoken to address boom. And this\nis how we deploy a fake has\ndeployed this to our own little\nnetwork here. Great. So this\ntokens been deployed, we have\nour deploy script. Yeah, zoom\nout a little bit. Let's zoom out\na little bit. Great. That's the\nwhole thing. Now we're going to\nadd one more thing here, we're\ngoing to add something called\ndelegate function. Now, when you\nactually deploy this contract,\nnobody has voting power yet. The\nreason is, because nobody has\nthe token delegated to them, we\nwant to delegate this token to\nour Deployer. Right, so we're\ngoing to call this delegate\nfunction. So we're going to\ncreate a new function called\nconst. delegate. And it's going\nto be an async function. It's\ngoing to take a governance token\naddress as a string, it's going\nto take a delegated account,\nalso as a string, so we're\nracing and say, who do we want?\nDelegate? Who do we want to be\nable to vote with our token?\nOkay, so we have created this\nasync function called delegate.\nAnd how do we do this? Well, we\nsay Kant's over its token equals\ntoken equals await ethers dot\nget contract at.\nAnd probably for two ethers for\nus from hardheaded Otto did\nthat, which is great. That's\nwhat we want. Once it's like\nethers. Thank you vs. Code away.\nEther is like a contract at. And\nwe're going to say we want our\ngovernance token, which is at\ncontract, governance token\naddress. And I have auto format\nunsaved, which is why it keeps\nformatting like that. This\nshould be delegated account.\nOkay, cool. We have our\ngovernance token contract. Now\nwe can do const TX or\ntransaction equals await,\ngovernance token dot delegate\ndelegate this delegated account\nhere. And then we can do a wait,\nwe'll wait for this transaction\nto be confirmed by one block.\nAnd then we'll just do console\ndot log checkpoints, wait,\ngovernance token dot num\ncheckpoints delegated account?\nSo what is this doing? So we\nhave this num checkpoints\nfunction which we can go check\nto see on that ERC 20 token what\nthis is actually doing. But\nbasically what this whole thing\nis doing, we have this delegate\nfunction that we haven't used\nit. But when somebody calls us,\nwe're saying, Hey, you can use\nmy vote, take my votes and vote\nhowever you want. And that's\nwhat these this delegate does.\nNow, if we look at this token,\nhere, see 20 extensions, your\nsee 20 votes, we look at number\ncheckpoints, we can see how many\ncheckpoints that account\nactually has reason this is so\nimportant is because once again,\nlike I was saying when people do\na vote, they do it based off\nsome checkpoints. And anytime\nyou transfer a token, or\ndelegate a token, basically call\nthis function move voting power,\nwhich happens with the back end,\nwhich writes the checkpoint and\nsays, Hey, at checkpoint x,\nhere's what everybody has for\nvoting powers. And that's what\nthese are so important. And I\nknow I said before, it's every\nblock, but it's actually just\nevery checkpoint, whenever these\ncheckpoints are updated, that's\ngonna be a lot cheaper on gas\nthan if we just did every single\nblock, right? That'd be kind of\ninsane. So the checkpoint for\nthis governance checkpoint, and\nwe'll see what that actually is\nin just a second. So we'll even\ndo a wait, delegate, governance\ntoken dot address, and Deployer.\nAnd we'll say log delegated.\nNow, when we're on this\nfunction, John Howard hit\nDeploy. We have one checkpoint,\nwhich makes sense, right?\nBecause this was just deployed,\nit was just delegated. This\naddress has one checkpoint.\nThat's it. And the reason I\nchecked for this is because if\nyou see zero checkpoints here,\nit means you haven't delegated\ncorrectly. So be sure to check\nfor checkpoints. But that's it.\nWe have our deployed governance\ntoken contract done. Bravo.\nLet's move on to the next one.\nSo what do we want to do after\nwe deploy our governance token?\nWell, let's deploy that timelock\nor timelock.ts. And we're going\nto copy a lot of this stuff over\nfrom here, so I'm actually going\nto Oh, and then sometimes you'll\nget some weird linting errors\nhere. I just do det TS ignore\nthere. And sometimes you'll get\nit here too. Oh, actually, we\ndon't even need network. Okay,\ncool. Yeah, you don't even need\nnetwork loops. Sometimes we get\nsome weird linting errors.\nSometimes Vyas code has a hard\ntime telling understanding like\nthis, this overwrite thing that\nwe did. So just run that TS\nignore if if it gives you some,\nsome engineers, anyways, yes, we\nhave this Oh, to deploy time\nlock here, we're going to deploy\nour time lock contract. And\nwe're going to borrow a lot of\nthe things that we did from\nhere, so I'm just going to come\nback here are actually going to\ncopy paste these two top bits.\nAgain, we're gonna do const\ndeploy timelock is going to be a\ndeploy function, it's going to\nbe an async function that takes\nthe heart at runtime environment\nas a parameter, and cool, nearly\nexactly the same sorry. And then\nwe're going to grab these first\nthree lines, or first four\nlines, I guess, pesos, then\nwe're going to be getting those\nexact same things here. And\nwe're going to be doing nearly\nthe exact same thing. So we'll\ndo log deploying. Time Lock,\npoint time lock, will do const.\nMark equals await, deploy,\nunlock. We'll add some\nparameters in here, we'll say\nfrom Deployer. Now does this\ntake some arguments? It\nabsolutely does. Right, we can\ntake a look at the Time Lock,\nMin delay proposers and\nexecutors. So what do we want\nour min delay to be? Well, this\nis a value that we're actually\ngoing to use a lot. So what I\nusually like to do is I create a\nnew file called helper. hardhats\nconfig.ts. And right at the top,\nI'll say Export const min.\nDelay, and I'll have this delay\nbe whatever I want it to be. So\nlet's just go ahead and do 3600,\nwhich is going to be\napproximately an hour, right,\nyou gotta wait this many\nseconds, I think that's an hour.\nWithout the old calculator.\nThere's 60 seconds, in 60\nminutes. Great. That's gonna be\none hour. So wait 30 minutes.\nAnd we're gonna go ahead and\nimport that here. We'll say\nimport, Min delay. Wow,\nautocomplete for being great.\nFrom helper from, you know, it's\ndown directory, helper Hardhead\nconfig. And that's gonna be our\nfirst argument here. Our second\nargument is going to be a list\nof proposals. Now we're going to\nleave it blank for now. And also\nthe list of executors we're also\ngoing to leave it blank for now,\nwe're going to update this in a\nminute. And you'll see why once\nwe get there, we'll do log true.\nThis also has a wait\nconfirmations thing in my\nGitHub, but we're going to skip\nthat for now. It also has an\nauto verify, we're also gonna\nskip that for now. Then we just\nneed to export default, deploy\ntimelock. And boom, we should be\ngood. So let's try to run this\non hard hat deploying. So now\nthis should run both of these\ngreat deployed governance token\ndeployed timelock.\nPerfect, we are cruising now\nwhat we want to deploy that\ngovernance contract now. So\nlet's go ahead and do that.\nWe're gonna do Oh, three LOI.\nGov, nor contract.ts. And you\nguessed it, this is going to\nlook pretty similar to what we\njust did. Right. So in our\ndeployed time lock, let's go\nahead and just grab those top\ntwo things. We'll paste it in\nhere. We'll do const deploy,\ngovern or contract, there's\ngoing to be an apply function,\nit's going to be an async\nfunction, taking a part at\nruntime environment, save and\nclose this for now. And we can\neven go back and grab these\nthree lines from our Oh, to\ndeploy time lock, paste that\nright in here, because we're\ngoing to need to get the exact\nsame things. And additionally,\nfor this, we're going to need to\nget the governance token and the\nTime Lock contract. So we'll do\nconst governance, token equals\nawait. Get which actually, we\nhave this, this get function\nthat comes from these\ndeployments, which literally\njust goes out and gets these\ndeployments. So we'll say get\nGover Nance token. And then we\nalso need to get the Time Lock.\nSo await, get m lock. And we\nneed these to pass as parameters\nfor our governor contract.\nRight? Because if we open up the\ngovernor contract that soul, we\nlook at the constructor, it\ntakes the token, the Time Lock\nvoting, delay voting period and\nquorum percentage as input\nparameters. So we'll do a quick\nlog deploying go burn nor ello.\nAnd they will do const govern\nnor contract equals await,\ndeploy, and will deploy the\ngovern nor contract I'm not sure\nif I'm spelling this right\nalways, but that's fine. And\nwe'll do the parameters once\nagain. So it's gonna be from\nDeployer. args are going to be\nthis list of args. What's the\nfirst thing that it needs? It\nneeds the token first and the\nTime Lock. So we'll do\ngovernance token dot address,\nthen it's going to need the Time\nLock that address. And it's\ngoing to need a vote on voting\ndelay voting period and quorum\npercentage. So these are also\nvalues that we're going to make\na lot. So let's open back up\nthat helper Hardhead config, and\nlet's create those as well. So\nwe'll say Export const just\nvoting period. And we'll say\nthis is going to be five blocks,\nwe'll do export const voting\ndelay, this is going to be just\none block, which I know is\nreally quick. And then we're\ngonna need export const Orem\npercentage, which we're gonna\nsay is four 4% of voters always\nneed to be voting. Excuse me, 4%\nof voters need to have voted for\na vote to pass. Great. So we're\ngoing to do voting delay voting\npercentage quorum percentage. So\nwe'll import those so to import\nvoting delay voting period, or\nquorum percentage from helper\nHardhead config. And now that we\nhave those delay period\npercentage, we can just do kind\nof a voting delay, voting\nperiod, farm percentage, and\nthen we'll say log is true.\nAgain, this one as well. It has\na wait confirmations and auto\nverification that we're going to\ntotally ignore. And then we'll\nexport default, blood Governor\ncontract. Oh, Carrie, we're\ngetting spicy. Let's just make\nsure this works. Yarn hardhat\ndeploy. We should see three\ncontracts deployed here. I think\nto compile governance, token\ndeployed timelock deployed\ngovernance contract deployed.\nLet's go. Alright. Now, we're\nnot done yet. We have two more\ndeploy scripts to do. The first\none, we're going to call setup\ngovernance contracts. Okay. And\nthis one's really important. The\nright now our time lock contract\nhas no proposers and no\nexecutors. Right. So we want to\nchange that we want to only\nallow for the proposer to be the\ngovernor, the governor contract\nshould be the only one that\nproposes things the Time Lock,\nand then anybody should be able\nto execute the way that this\nworks. We say the governance\ncontract proposes something to\nthe Time Lock once it's in the\nTime Lock, and it waits that\nperiod. Anybody can go ahead and\nexecute it. So Governor contract\neverybody votes and everything.\nOnce a vote passes, Governor\nsays hey, Time Lock, can you\nplease propose this? Tom like\ngoes yeah, sure. But we got to\nwait, this minimum delay, once\nit's been in delay happens,\nanybody can execute it. Now this\nwould be really cool to do an\nintegration with chain link\nkeepers, by the way, for the\nchain link keepers to\nautomatically execute. And I\nshould build the next anyways.\nSo we have to set this up so\nthat these work as such, so\nwe're gonna create a new deploy\nthing called Oh, four, setup,\ngovernance contracts dot\nTypeScript. And this is going to\nbe the code that does all the\nsetting up. And this is gonna\nlook really similar once again,\nto all of our other deploy\nfunctions. So we'll go head back\nfrom oh three, we'll paste these\ntwo top ones in here, of course,\nwe're gonna do const setup\ncontracts, is it going to be a\ndeploy function, going to be an\nasync function, it's going to\ntake HRV art at runtime\nenvironment as parameters, and\nthen that's the winner right\nthere. Cool. And we're gonna be\ngrabbing those same three from\nthe top, as you can see, that\ngets a little bit easier,\nbecause it's kind of repetitive,\nright, we're gonna grab that bit\nright here. And now we're gonna\nget those contracts so that we\ncan interact with them. And this\nis another reason why a hard hat\ndeploy is so nice, because we\ncan just do const timelock\nequals await ethers that get in\nthe next let's go ahead and\nimport ethers from hard hat\nimports. Ethers\nfrom Red Hat will even drop a\nlittle TS ignore here. Ethers\ndot get contract, we want that\ntime lock contract. And we say\nwe want to attach it to the\nDeployer. So whenever we call a\nfunction on it, it'll be the\ndeployer calling that function\nand we want to do const Governor\nequals await ethers dot get\ncontract, Governor contract,\nthis is all going to be attached\nto the Deployer. Right. Now,\nwe're gonna do log setting up\nroles. And we're going to set up\nthe roles right, again, we're\nsetting it up so that only the\ngovernor can send things to this\ntime lock, because the Time Lock\nis going to be you can almost\nthink of the Time Lock as like\nthe president. Right. So\neverything goes to the Senate,\nthe House representative, which\nis the governor and then the\nPresident just says yeah, sure.\nWe just got to wait this minimum\ndelay, but the President will be\nthe one to actually execute\neverything which I'm not\nactually sure that's how it\nreally works in in politics, but\nfor for now, that's that's where\nwe're protecting the president\nor the time like is the only one\nthat can actually do anything\nhere. So the way that this works\nis we're actually going to get\nthe byte codes of different\nroles, right? So if you look at\nthese time locks here, so we'll\ndo ones up on contracts. And we\ngo to the governance here. We go\nto Tama controller has these\nthings called proposal roll,\nexecutor roll time, like admin,\netc. And these are just hashes\nof these strings here. But these\nare these are bytes 32 saying,\nHey, anybody who has this this\nbyte 32 is a proposer, anybody\nwho has this byte 32 is an\nexecutor. Anybody has this byte\nthere and soon as time like\nadmin, etc. Right now, our\nDeployer account is the time\nlike admin, and that's bad. We\ndon't want that we don't want\nanyone to be a time like admin,\nright? We don't want anyone to\nhave power over this time lock.\nWe don't want any centralized\nforce here. So what we're going\nto do is we're going to const\nwe're going to get those roles.\nproposer, proposer role, it's\ngoing to be a weight, unlock\nthat row pole sir role. And if\nyou're familiar with multi call,\nthis would be a great time to do\nmulti call and copy paste that\nwhole line x EQ tour role at x\nEQ tour roll, we're gonna copy\nthis whole line admin role. And\nthis is going to be on lock\nadmin role. So these are these\nthree roles that we need to fix,\nright, and let's go ahead and\nfix them. So the first thing\nwe're gonna need to do is we're\ngonna need to do const row poser\ndx equals await Time Lock dot\ngrant roll, propose a roll to\nour governor dot address. So\nsaying, okay, Governor, you're\nthe only one who can actually do\nanything once you tell the Time\nLock to do something. We'll wait\nfor the Time Lock period to be\nover. And then we'll be done.\nAnd then we'll just do an await\nposit TX dot wait one block just\nto make sure. Now we're gonna do\nthe const executor, TX equals\nawait Time Lock dot grant roll\nexecutor role to nobody, we're\ngoing to execute this we're\ngonna give this to nobody, we're\ngoing to say address zero which\nis going to be something that\nwe're going to want to add if we\ngo to our helper or head config\nwill say Export const address\nzero equals zero by you can just\ncopy paste this if you want.\nThere's a couple other ways you\ncan do this with ethers as well.\nWe're just gonna do like this. I\nlike having my conflict this and\nthen we just import it say\nimport at zero from dot dot\nslash helper Harnett config. So\nwe're giving the executor role\nto nobody, which means\neverybody. So once a proposers\nthing has gone through, anybody\ncan execute it. So we'll say\nexecutor, TX That wait one wait\na block. And then got one more\nto do here, we need to revoke\nrole right now our Deployer\ncount owns that time lock\ncontroller, right. And that's\nhow we can actually do these\ntransactions, we can actually\ngrant role because our Deployer\naccount owns it now that we've\ngiven everybody access. And\ngiven all the decentralized\naccess we need, we want to\nrevoke that role. So const\nrevoke TX equals await. I'm\nlocked up revoke role, admin\nrole from Deployer will do Rotex\nthat wait, now guess what\nanything that's um, like, wants\nto do has to go through\ngovernance, and nobody owns the\ntime I controller, it's\ncurrently after this runs, it's\nimpossible for anyone to do\nanything with the Time Lock\nwithout governance happening.\nAnd then of course, when the\nexport default set of contracts,\ngreat. And then the last step\nthat we need to do here is we\nneed to deploy the contract that\nwe actually want to govern over\nwrite that box contract, that\nreal basic contract. So we're\ngonna create a new 105, deploy\nbox.ts. And we're gonna do some\nof the same exact stuff we've\ndone right, so we're gonna grab\nthese two, these two here, paste\nit in, os deploy box is going to\nbe a deploy function equals\nasync function, Ah, sorry, hard\nhat runtime environment,\nwe're gonna grab those first\nthree lines, the TS ignore, just\nlike that. And now we're going\nto deploy this box. So log,\ndeploying bucks, and we're going\nto do const box equals await,\ndeploy box, give us some values\nfrom our Deployer. args does\nthis have any args so open a box\ndot soul, I don't see a\nconstructor. And while this is\nthe easiest contract out of all\nthese though, no constructor,\nand then we'll just say log,\nit's going to be true. And\nagain, if you want to check out\nmy GitHub repo for that\nconfirmations, but feel free to\ndo so it's coming here. And\nright now, our deployer has\nactually deployed this right,\nnot our time lock. So we want to\ngive the boxes ownership over to\nour governance process. So now\nwe're going to do say const\ntimelock, is going to be a\nweight ethers dot get contract.\nThe same thing as before.\ntimelock. We're going to grab\nethers from hardhat import\nethers from hard hat. And we're\ngonna do a little TLS ignore,\nit's being finicky. And then\nwe're going to transfer the\nownership of our box to this\ntime lock, okay, and now so this\nis actually what's known as a\nbox deployment. So before we do\nthat, we have to get the box\ncontract. So this is a box\ndeployment object, which doesn't\nhave contract functions we want\nto get the box contract object\nso we to box or const box\ncontract equals await ethers dot\nget contract at box and then\nwe'll just do you know box that\naddress. You could also do get\ncontract. Actually both of these\npretty much if you have the\naddress, you can just do box\nthat address. You could also do\nget contract here. Either one\nworks now that we have the box\ncontract, we do const transfer\nowner, dx equals await by\ncontract dot transfer TX or\nschema dot transfer ownership to\nour timelock dot address, time\nwalk dot address, then we just\ndo a weight transfer ownership\nTX dot weight one, do a log, you\ndone it. Those are export\ndefault. Deploy box. Oh, let's\nsee if this works. So we just\ndid everything. We're deploying\nthe GOV token, deploying the\ntimelock, which owns the\ngovernance process, we're\ndeployed the governance process,\nwe're setting up the governance\nprocess so that it's totally\ndecentralized. And then we\ndeployed and set up our box so\nthat it only can be updated\nthrough a governance process.\nLet's see if it works. Yarn,\nhard hat deploy. Let's see if it\nworks. Bada boom, you've done\nit. So you've just set up a\nscript to set this entire\ngovernance process up so you can\nbuild your own doubt. Are you\nstill here? Well, hell yeah, you\nare, congratulations on getting\nthis far, we have one more piece\nto go, we just got to write\nthose scripts. So we can\nactually interact with this, we\ncan actually do a governance, we\ncan actually see exactly what\nthe governance process looks\nlike. Now again, if you didn't\nwatch my last video on Dows, be\nsure to watch that, because\nthat's going to give you all the\ncontext for this part here. And\nif you're still watching 100%,\nsmash the like button, hit the\nsubscribe, leave a comment in\nthe comment section below, it\nreally helps the channel out. So\nproud of you for getting this\nfar. We're almost there, you're\ngetting now one more to go. And\nthen you are home free on\nbuilding your doubt. Let's get\nback into it.\nAlright, so now we're going to\nmake some scripts to actually\ninteract with propose Q and vote\non anything that happens in our\nDao. And these are the scripts,\nthese are kind of the things\nthat you would do on your front\nend when you build this when you\nbuild your doubt on the front\nend. Or you could do an\nintegration with snapshot or\ntally or something like that.\nAnd again, if you want to see\ncome to full functionality on\nthe GitHub, I have this test\nflow.ts It's not the greatest\ntest here. But you can also\ncheck this out, because it also\ndoes a soup to nuts\ndemonstration of going through\nthis exact process. So let's go\nahead and start making some\nscripts. So we're gonna create a\nnew folder called scripts. And\nthis is where we're going to put\nall of our scripts. Now the\nprocess for this is going to be\nwe're first going to propose\nsomething right? You know, maybe\nwe're going to propose that our\nbox contract stores the value\n77, right? Because when it first\ngets initialized, it's going to\nstart with zero. So maybe we'll\nwe'll propose it could start at\n77. Once proposing is done, we\nare voting on it. Right once\nproposals it and we're going to\nvote on whether or not we want\nthe proposal to go through right\nyes or no. And then if it\npasses, we go to queue and\nexecute, we queue first. And\nthen we execute, I'm just\nputting them both in the same\nscript to make it easier. So\nlet's start with propose here,\nbecause it's going to be the\nfirst thing that we're going to\ndo. So let's create a new\nfunction. We'll call it async\nfunction, and then we'll\nactually export it to export\nasync function propose. And\nwe're going to be in here for a\nlittle bit. So let's clear\neverything out. And okay, cool.\nSo this is where we're actually\ngoing to propose on our governor\ncontract, right? So we're going\nto propose a new governor\ncontract. So the first thing\nwe're gonna need, of course, is\ngonna be the governor. So you\ncan't govern nor equals await\nethers dot get contract, govern\nor contract, right? Since we're\ndoing ethers, we're gonna have\nto do import ethers from heart\napp. And then we're still\ngetting that fundamental thing.\nWe'll do a little AT Ts ignore\nhere. Cool. So we have the\ngovernor contract here, we're\ngoing to need the box contract,\nwe're gonna say hey, we want to\npropose the box contract changes\nthe store value. So we'll do\nconst box equals await ethers\ndot get this is a gift contract,\nwe want get contract, get\ncontracts at box. And those are\nthe two main ones that we're\ngoing to need just to start.\nNow, if we look at the proposed\nfunction, right, if we go to\ngovernance, we go to Governor,\nand we look at that proposed.\nThis is what it looks like. Now,\nI explained this proposed\nfunction in my last video. So if\nyou haven't seen it, be sure to\ngo back and watch it right\nbecause it'll give you\neverything that you need to know\nhere are basically we pick a\nlist of targets, which our list\nis just going to be just our box\ncontract. These are the targets\nthat we want to call functions\non, we do values like how much\nneeded ether we want to send,\nwhich we're not going to send\nanything, we have bytes, a array\ncalled data. So this is going to\nbe our encoded parameters for\nthe function that we want to\ncall and then a description. So\nthat's exactly what we're going\nto do here. So first, we need to\nfigure out what we're going to\ndo. So look at Box, we're going\nto call this store function with\nthis new value here. So we need\nto encode we need to encode this\nsocks here. And we also need to\nencode what we want to upgrade\nit to right so we have to code\nall the function parameters. So\nwe'll do const encoded function\ncall equals box and the way we\ncan get this box that interface\nthat encode function data and\nThis is what actually turns it\nto being this bytes call data,\nright? So we're encoding\neverything and this encoded\nfunction, you can find this in\nthe ethers documentation, we\nhave to pass it the function to\ncall, and then the arguments we\nwant to pass, right, and this is\nhow we actually get that. So\nlet's get these arguments here.\nSo we're gonna say args, we're\ngoing to make our proposed\nfunction a little bit modular.\nSo we're gonna say args is going\nto be an array of anything, and\nthen we're gonna say function to\ncall is just going to be a\nstring, right, and then right at\nthe bottom, we're actually gonna\ncall this, this proposed\nfunction. So we're gonna say\npropose, and let's say we want\nto give it 77, the function is\ngoing to be what it's going to\nbe store, store. And that's a\nstring. And this needs to be a\nlist. So we're going to do like\nthis. Now, we're actually going\nto use this all over the place.\nSo since we're gonna be using\nthis all over the place, we want\nto stick them in this part head\nhelper config. So what we're\ngoing to do is we're gonna say,\nexport const, new store value\nequals 77. And we're gonna do\nexport const funk equals store.\nAnd I propose, we're just going\nto import those. So we'll do\nimport, new store value, and\nalso funk from helper Hardhead\ndot config, and it added it in\nfor us, which is great. So we'll\njust put new store value in\nhere. And then we'll put funk in\nhere. And I know this might look\na little confusing, but\nbasically, the first thing we're\ngonna do is we're gonna call\nthis proposed function which\ncalls you know, post function up\nhere. Now we're going to do some\nfun little then process that\nexit zero. And then we're going\nto do a dot catch error, which\nif there's an error, basically,\nwe'll just do console dot log\nerror, then process that makes\nit. And this is pretty typical\nsetup for a really any script\nyou work with, and hardhat. So\ngreat. So we have constant coded\nfunction call, which has this\nfunction to call an arc. So\nwe're basically combining these\ninto this bytes thing. And we\ncan even print this out, you can\nsee what this looks like. So you\ndo console dot log, you see that\nthis is like this, this crazy\nbytes thing here. And the way we\ncan kind of test this, we'll do\nyarn hardhat node, which will\nspin up again, our fake\nblockchain. But additionally,\nwith Hardhead deploy, it will\ndeploy all of our contracts\nhere, right, we can see timelog\ngovernance, you know, everything\nthat we need for testing locally\nhas already been done. So once\nwe have that up, we can then do\nyarn hardhat, run scripts,\npropose that TS dash dash\nnetwork, local host, this is\nimportant to do, again, because\nwhen you're working with a node\nthat's running locally, you're\ngoing to be working with local\nhost, we'll see what it prints\nout here.\nContract named Governor\ncontracts, Governor contract.\nLet's try that again. And cool,\nyou can see this is what that\nencoded function call and\narguments looks like is this\nreally long byte string. But if\nyou were to decode this, using\nthe box interface, you would get\nthe function call and the\narguments, which is really\nexciting. So cool, we've encoded\nit to bytes. And now what we\nwant to do, we encourage the\nbytes, and now we're going to\ncreate that proposal\ntransaction. So we'll do console\ndot log will say pro posing, and\nsay, function to call on box\nthat address with args. And then\nwe also need to pass a proposal\ndescription. So we're gonna say\npro pose, all description, we\nwould do it on new line, why\nnot? Pro pulls all this option,\nwhich we don't have yet.\nAlright, we're gonna get it. So\nwe also need to pass a proposal\ndescription, right, because we\nhave down here, description. So\nlet's add another parameter to\nour propose here. So we'll say\nproposal description, and this\nwill be also a string. Down at\nthe bottom, we're going to need\na proposal description as well.\nSo we'll create a proposal or\nexport const proposal\ndescription, there's just going\nto be some string. So we'll say\nproposal number one, door 77 In\nthe box, that's the description\nhere, comma proposal\ndescription. And then we import\nthis or a helper config. Okay,\nperfect. So now we have the new\nstore value, the function the\nproposal description, and we can\nnow call that propose that we\nwere just looking at so here's\nwhat we're going to do const\npropose TX equals await. gov dot\npropose. And we need to pass\nthose lists. So first is going\nto be a list of targets, which\nfor us is just a box that\naddress right only one target.\nAnd again, these these little\nbrackets, make it a list of\nvalues, which is just going to\nbe zero, a list of encoded\nfunction calls or our bytes\ndata, basically, and then the\nproposal description, and then\nwe're going to do propose, TX\ndot wait one. Now, if you\nremember, from compound, this is\ngoing to be the exact same if we\ngo back to compound back to\ngovernance, this transaction is\nliterally going to be the same\nas this created thing here.\nRight? And if we scroll down,\nlike more, we can see the code\ninput data, those exact same\nthings on a compound proposal,\nright? We have targets values\nsignatures, well okay, this CES\nis a little bit more, this a\nlittle bit more advanced here,\nusing signatures, but it's got\nthe same thing called data and\nthen a description here, okay.\nNow since we have a voting\ndelay, people actually can't\nvote until the voting delay\npasses. Now, with a local\nblockchain, nobody's actually\nprocessing blocks and time\ndoesn't really pass as quick as\nwe want. And so we're just going\nto speed things up for our own\ntesting purposes. So the way I\nnormally do this is I create\nthis this variable, all\ndevelopment, exports, on\ndevelopment chains, and I'll add\nhard hat and local host. Because\nwe can actually do things with\nour own local blockchain, we can\nactually speed up time, we can\nspeed up blocks, we can do all\nthis crazy stuff. So usually,\nI'll actually import this in\nhere. And then we'll do a quick\nF. And I'll say, if we're on a\ndevelopment chain, let's just go\nahead and speed things up for\nus. Right. So I'll say if\ndevelopment chains that includes\nnetwork dot name, and then we\ncan import network from from\nethers, as well. And this is\nwhat I was talking about those\nsuper six skills that you're\ngonna learn. If it includes\nnetwork dot name, then we're\ngonna go ahead and move the\nblocks forward, right, because\nif we're not on development\nchain, we can't actually move\nblocks. So what we'll do here is\nactually I'll create a new\nfolder called utilities, you\nfolder, you are utils. And in\nhere, I'll create a script\ncalled Move blocks.ts. And we're\njust going to create this little\nfunction called move blocks,\nwhich moves blocks for us. And\nyou'll see how we do this. So\nwe're going to import network\nfrom heart app, because we want\nto speed up that voting delay,\nwe'll do export async function,\nwe'll call it move blocks. And\nit'll take an amount, which will\nbe a number, so how many blocks\nthat we actually want to move.\nAnd then we'll just do console\ndot log moving blocks. And we'll\nsay for let index equals zero,\nindex is less than amount. index\nplus plus, or we're going to do\nis we're going to do a weight\nnetwork DAP provider dot request\nrequest. And we're going to\nrequest method EVM. Mine. So\nbasically, we're mining for our\nlocal blockchain, right, so you\ncan find these docks in the hard\nhat docks in the ethers docks,\nthere's a couple different\nplaces you can find these. But\nthis is kind of this really cool\nhack that we can use to actually\nmove blocks forward on our local\nchain. Now, obviously, this\nwon't work on an actual chain,\nbecause you'd actually have to\ndo the mining but on our local\nchains, we can absolutely do\nthis. So we've exported this\nmove blocks function, and we're\nactually gonna grab that Mark\npropose, we're going to import\nmove box from utils blocks. And\nwe're going to say down here, if\nwe're on this development chain,\nand do a weight move blocks, and\nthen we'll move blocks by that\nvoting delay that we were\ntalking about, right? Because we\nneed to wait that voting delay\nin order to move and it looks\nlike an auto import it for us\nfrom our helper hardware config.\nI told you, we were gonna use\nthat a couple of times, but\nwe're gonna move blocks by that\nvoting delay. Now, this proposed\ntransaction does some stuff that\nwe actually want, right? So one\nof the big things that it wants\nis, is it has this proposal ID.\nAnd if we scroll down to the\nevent that it emits, it ends up\nemitting this proposal ID, we\nactually need the proposal ID\nfor later on when we actually go\nto vote. So what we're going to\ndo is we're actually going to do\nconst propose receipt equals\nproposed text dot weight. And\nwe're going to get those events\nfrom this proposed receipt. So\nwe're gonna say const. Proposal,\nid equals proposed receipt, that\nevents, the zero with event\nbecause that first event is the\nonly one we care about that are\nyour stop proposal ID. This is\nhow we get this proposal ID from\nthis omit also created event. A\ncouple other ways to get\nproposals to get events in\nhardhat. And I got a video on it\non my YouTube, if you want to go\ncheck that out. Something else\nthat we want to do is maybe we\nwant to see what the deadline is\nwith a snapshot, you can go\nahead and check my GitHub to\nkind of see what the snapshot\nlooks like or the deadline,\nbasically, how long we have to\nvote, you know what snapshot\nyou're working with, and all\nthese different things. But for\nnow, we're just gonna stick with\nthe proposal Id be sure to check\nout the GitHub for more stuff.\nNow we want to save this\nproposal ID, we want to save it\nsomewhere so that our other\nscripts so that our vote and our\nqueue and execute know what this\nproposal ID is going to be when\nwe run those. So what we're\ngoing to do is we're going to\ncreate this file called\nproposals dot JSON. And it's\ngoing to store all of our\nproposals. So we're gonna say\npro poll, souls dot JSON, it's\ngoing to have all of our\nproposals in here. So what we're\ngoing to do and we're going to\nadd this to our helper Hardhead\nconfig, and do export const,\nproposals, file equals proposals\ndot JSON. And we're going to\nimport this at the top as well\nas proposals file. And then once\nwe get this proposal ID, we're\ngoing to do is we're going to\nread all the current proposals.\nSo we're gonna say let proposals\nequals JSON dot parse, and we're\ngonna do Fs dot read file sync\nfrom this probe proposals file,\nand we're going to pass it to\nUTF eight. Now, this Fs we don't\nhave yet, so we're going to need\nto import Fs. So we're going to\ndo yarn add Fs like that. If\nwe're looking at package dot\nJSON. Oops, I should have saved\nthat as Dev, but I didn't Oh,\nwell, doesn't really matter. Now\nthat we have that we can\nactually import this into our\nTypeScript. So we're just going\nto say, import star as Fs from\nFs. And now we can actually use\nFs F as a way to kind of read\nfrom files. Now we can get this\nlist of proposals. So we got two\nproposals that JSON right now\nwe're just making a blank JSON.\nSo the first time we run it,\nit'll just be blank. But later\non, it'll have stuff in it. And\nthe way that we're going to save\nthese proposals is we're going\nto say pro proposals of network\ndot config dot chain ID, and\nthis little bank to say, yes,\nthere will be a chain id.to\nstring, we're going to store\nthem by their chain IDs, right.\nSo for each network that we have\na proposal to we'll we'll start\nlike that. And then we'll do dot\npush proposal, id.to string, and\nthen we'll write it back. We'll\ndo Fs dot right, file sync,\nproposals file. JSON does string\nphi, proposals, and awesome. And\nthat's all we need to do. So\nlet's go ahead and actually run\nthis. And then I have some\nconsole dot logs in here saying,\nHey, here's what the proposal\nstate is, is it open? Is it\nvoting is it canceled, you know,\netc. What the proposal snapshot\nis, you know, again, check my\nGitHub for that. But what we can\ndo, now this is done, we can do\nyarn, Hardhead node, spin up our\nlittle note here. And all the\ncontracts are deployed. And then\nwe'll do yarn, run scripts,\nproposed that TS dash dash\nnetwork, local host scripts\nproposed that TS is not found.\nPro pose, yarn, hard hat, run\nscripts, pose IDs, oops, dash\ndash network, local hosts. Try\nthis again. Now you found it.\nYay. Oh, I ran into an issue.\nAlthough description Moviebox\nCannot read property zero of\nundefined. Let's see where it\ngot mad at me. Poser sheet dot\nevent. It is events, not event\nshots again, on the localhost.\nThere we go running ran into\nanother issue. Posle already\nexists. Okay, so great. So the\nproposal already exists, let's\ngo ahead and just like kill the\nnode, restart the node, so you\ncan't have two proposals that\nare exactly the same, basically,\nright. So we can't do that, we\nwould need to change the\ndescription or something. So\nwe're just going to kill the\nnode and restart. Now we're\ngoing to run this proposal\nagain. And hopefully this one\nshould work this time. Community\nProperty zero of undefined owes\nreceipt. This needs to be await\nbecause it is a promise, kill\nthis one more time we run it\nonce all these get deployed. And\nwe're gonna go ahead and run\nthis. Now you can see how much\nquicker this is than if you were\nto actually send this to a test\nnet right to an event a lot of\nwaiting, which is no bueno. And\nwe run into one more Cannot read\nproperty, push them undefined.\nThat makes a lot of sense, too.\nBecause proposals dot JSON as\nnothing for chain IDs. So\n231337. And we'll put a little\nlist in here. Right now it's an\nempty list. Now we're going to\nkill this one more time, kill\nit.\nAnd then once this goes, then\nwe're gonna go ahead and do\nthis. Perfect. Now we're going\nto run this and now it should\nsave and everything should be\npeachy hunky dory. Awesome.\nproposal number one store in the\nbox, we move the blocks. And if\nwe look at proposal dot JSON, we\nnow see there's a list of\nproposals. And this is the\nproposal ID of that one we just\ncreated. Oh, okay, we made a\nproposal. Awesome. Nice work,\nwe'll leave that Node running.\nAnd hopefully we'll just do\nthings right for the voting. So\nlet's create this vote script\nnow. Okay, so now we proposed\nit's time to vote, let's do a\nlittle voting. So this is going\nto look pretty similar to that\nscript, we just we just created\nright. So we're in New async\nfunction, we'll call this main\nproposal index number, and we're\ncalling this main because we're\ngoing to have the vote function\nbe a little bit different.\nYou'll see why. And at the\nbottom, of course, we're going\nto do main index dot then\nprocess dot exit zero, catch\nerror arrow function, console\ndot error, error, and then\nprocess that exit. One main\nindex, we're gonna say our index\nzero cost index zero. We'll do\nlike this cost index is your\npostal index. So we're gonna get\nwe're gonna get that bit zero\nwith index, right, the first\nindex in our proposals dot JSON.\nSo whatever is the first one in\nthis list is what we're gonna\nuse, right? And that's what we\nwant right now. There's only one\nso it's easy. So we're gonna get\nthat first one in here. So first\nthing we're gonna need to do is\nwe're gonna need to grab the\nlist of proposals. So we're\ngonna do const proposals equals\nJSON dot parse, FS dot read,\nfile sync proposals file, UTF,\neight. So of course, we're going\nto need to import a bunch of\nstuff. We're going to import\nproposals file from that a slash\na Bernhard config. And then\nwe're going to do import star as\nFs from us. Great. We have Fs,\nwe can read stuff, and we can\nget those boats. Okay, cool. So\nwe have a list of proposal IDs.\nNow let's get our proposal idea\nwe'll do const probo. also ID\nequals proposals of network dot\nconfig. And then that's not what\nwe want. We want to actually\nimport network, import network\nfrom hard hat, network dot\nconfig, that chain ID,\nexclamation mark of proposal\nindex, which for us is going to\nbe zero, right? We're getting\nthat first proposal in the list\nof proposals. Now we're gonna\nchoose how we want to vote. So\nzero equals against one equals\nfour, and then two is abstain. I\ndon't know why you'd ever\nabstain abstaining costs gas,\nyou could just not vote, but\nwe're gonna say const vote way\nand the way we're gonna vote\nequals one. And we can also do a\nreason. So if we go back to our\ngovernor, there's a couple\ndifferent functions we get to do\nto vote, there's cast vote,\nwhere we just cast a vote, cast,\nvote with reason, and cast vote\nwith signature where we actually\ndo a signature. And I asked this\nquestion, Hey, what is cast vote\nby sick do on the opens up on\nforum, I was like, hey, what's\nthe what is the purpose of this?\nMy hunch was that anyone could\nthen execute this vote on behalf\nof me if I didn't send the\ntransaction. And that's exactly\nwhat it is. This method\nimplements a meta transaction\nand allows a project to\nsubsidize voting fees, the\nvoters can generate a signature\nfor free, and the project can\nsubmit those and pay for the\ngas. So this is incredibly\npowerful. And this is the\nfunction that allows this, this,\nthis cast vote by signature is\nwhat allows that snapshot chain\nlink integration that you know,\nhopefully one of you build, but\nfor us for this, since we're not\nimplementing these meta\ntransactions, these off chain\nstuff, we're just going to do\ncast a vote with reason why\nbecause we want to give it a\nreason. That's really it. So\nwe're gonna say const boat TX\nresponse equals await. Gov nor\ndot cast, excuse me, we need to\nget the government contract. So\nwe'll do const. Gov nor equals\nawait ethers dot get contract.\nGov contract. And then if we\ndon't have ethers, we should get\nethers. Great. Let's get ethers.\nAnd we'll ignore that. But now\nwe have the contract. So we'll\ndo a weight gov dot cast vote\nwith reason spell this right?\nWith reason. And we'll say\nproposal ID that way. And then\nthe reason which we don't have a\nreason here, so let's make a\nreason. Let's say the reason is\nreason, equals I like do cha\ncha, if you know that film, you\nshould definitely comment it in\nthe description. We have a\nreason so we're voting for we're\nsaying yes, we want we do indeed\nwant you to change the box to\n77. And the reason is because I\nlike a do the Cha Cha makes\nperfect sense if you don't think\nabout and then we'll do a wait,\nKotex response that wait. So I\ndo some stuff, again, checking\nthe state of the proposal where\ndifferent numbers mean, hey,\nit's in process, it's voting,\netc, we could check on that. But\nwe're gonna skip that for now.\nAll we're going to do now, now\nthat we voted, we're going to be\nthe ones to vote. So we're just\ngoing to once again move the\nblocks along. Why because we\nwant to just get to the end of\nthat voting period. So we're\ngonna do again, if velopment\nchains, that includes network\ndot name, then we're gonna do a\nweight move blocks, voting\nperiod, plus one. So we need to\nimport a whole bunch of stuff in\nhere. poses file development,\nlooks like those got auto\nimported, we need to import this\nmove blocks. So import move\nblocks from utils blocks, and\nthat network is in here. And\nthen we need voting period from\nour helper config. voting\nperiod. Okay, cool. And then\nwe'll do console dot log, voted,\nready to go. Now the reason that\nI checked the proposal state is\nbecause there's this state\nfunction in the governor\ncontract. So if we look up\nstate, what this does is it\ntells us what the state of the\nproposals in right if it's been\nexecuted, return that's been\nexecuted, if it's been canceled,\nreturn has been canceled. You\nhave the deadline, check to see\nif it's active, check to see if\nquorum reached all this stuff,\nright? And what you're usually\nlooking for is worm reached and\nvote succeeded, right? If both\nof these happen, the proposal\nstate DOT succeeded, right?\nOtherwise, it's defeated or it's\nnot there yet. I believe this is\na one and this is a zero. So if\nyou were to call that function\nand get the state right, now we\nshould get a zero. Or excuse me,\nwe should get a one for this\nhaving passed. If you want to do\nthat as a little extra credit,\nfeel free to do so. So let's see\nif we did this right. Well,\nactually, I guess we got to\nchange this just to vote. But I\njust wrapped everything up into\nmain. So let's see if this\nworks. Yarn, hard hat run\nscripts vote network, local\nhost. So we should get a little\nconsole dot log at the bottom\nthat says voted ready to go. So\nnow we're voting. We didn't just\ngo to the Arctic Council, we\ncould do yarn, hard hat console,\ndash dash network, local host.\nAnd in here, you can actually\njust check the state right in\nhere. Why not? We'll copy this\nline as governor because we\neither get contract Governor\ncontract. Now we can do a wait,\nGovernor, that's state of go to\nthe proposals dot JSON, grab\nthis, paste it in here. And we\nget a for the state of this\nright now is for I forget what\nfour means. It's like a proposal\nstate. The proposal state is\nactually in the eye governor so\nthe interface of the governor We\ncan see, zero is pending, one is\nactive, two cancelled, three\ndefeated, and four have\nsucceeded. So we are in a\nsucceeded state, which is really\ngood. That's exactly what we\nwant. So let's go ahead and quit\nnow. Excuse me Ctrl. C, our\nproposal is now in a succeeded\nstate. And we've actually moved\nthe blocks along the voting\nperiod. So voting is now over\nbecause we cheated. So now let's\ngo ahead and queue and execute\nthis to the last bit here. So\nthis is gonna look real similar\nto what we've done already.\nRight? Let's minimize this,\nexport async, function, Q, and\nexecute. And then at the bottom,\nwe'll just call queue, and\nexecute. And I'm just going to\ncopy paste, but it's that same\nsyntax here, then process exec\ncatch, blah, blah, blah, you get\nthe drill. So in order to queue\nand execute, go back to the\ngovernor contract, not the\ngovernor, let's go to the\ngovernor. First thing we're\ngoing to do is call this queue.\nNow this Q function is actually\nin the governor time lock, which\nis in this extensions here. So\nwe can find the governor Time\nLock controller here, and it\ndoes exactly the same as propose\nwe take everything that we did\nin the proposal, and then we\njust queue it like so. So we\npass the exact same values here.\nAnd that's so cute. So what\nwe're going to do is we're gonna\nneed to first get those exact\nsame values, which I told you\nwe're going to use a few times.\nSo we're going to import bunk,\nnew store value, proposal\ndescription of our article\nthing, right now that we have\nall that stuff, we'll say const\nargs equals a new store value,\nwe'll do const box equals await\nethers dot get contract, let's\nget that box contract again,\nwe're gonna have to import\nethers from our hat. And this is\ngoing to be from we're gonna do\nTS ignore, then we're once again\ncode this function call to const\nencoded function call equals\nBoxtop interface, encode\nfunction data. Once again, we're\ngonna do funk is the function we\nwant to call and args this is\nlike real similar to the our\nproposed bit that we did. And\nthen we're gonna do content\ndescription hash equals ethers\ndot utils that get GAC 256\nethers dot utils, that to you,\nTF eight bytes, this will make\nsense in a second. We're also\ndescription. So what's our\npropose, all we did was pass our\nproposal description, however,\nit actually gets hashed on\nchain, and that's what our view\nand execute is gonna be looking\nfor, it's gonna be looking for\nthe description hash, instead of\njust the pure description,\nright, and it's gonna be a\nlittle bit cheaper gas wise,\nwhich is good. So now that we\nhave the description hash, now\nthat we have all the same\nfunctions that we did for the\nsuppose it's time to queue them.\nSo do cost gov equals await\nethers dot get contract. Gov\ncontract, console dot log will\nsay we're queuing and then we'll\ndo cos Q, dx equals gov dot q.\nAnd we're going to pass the\nexact same parameters we did\nwith the pose except for what\nthe hash instead of the actual\nproposal, so box that address\nzero for eath, and pass that\ncode at function call. And then\nthe description hash rate. And\nthen we're going to do oops, is\ngoing to be a weight here. And\nthen we're gonna do a wait. You\ntext Oh, wait, one, wait a block\nthere. And great, then we're all\nqueued up. Now we still have to\nwait that minimum delay, right?\nRemember, on our timeline, it's\ngot this min delay thing. It\nsays, Hey, once something gets\nqueued up, you can't just\nexecute it right away. You gotta\ngive people time to get out. So\nwe're going to speed up time\nagain, we're going to say if\ndevelopment chains develop l\nmeant chains that includes and\nthen it looks like it auto\nimported for me development\nchains. Yes, it did. Amazing.\nThat includes network dot name.\nLet's just make sure we import\nnetwork from Hardhead. That\nincludes our name, then, of\ncourse, we're going to move\nblocks. But we also actually\nhave to move time here as the\nminimum delay is looking for\nsome time. So let's create a new\nutil called Move time. Okay,\nmove time that Yes. And this\nutil is going to allow us to\nmove time so you're learning all\nthe cool stuff. So we'll quickly\nwrite a script to do this\nimportant network from hard hat\nexport async function move time,\nhow much time will be a number\nof Mount console dot log, moving\ntime, and let's say await\nnetwork dot provider dot send\nEVM increase time and then just\nby the amount, then we'll just\nsay console dot log, move\nforward, amount seconds, it goes\nforward and seconds. Cool. So\nnow we have this move time\nfunction. That was pretty quick,\nright? So first, we're going to\nmove time and we're gonna move\ntime by that min delay first,\nplus one just to be safe. And\nthen we're also going to move\nblocks. We're gonna do a weight\nmove time, and then a weight\nmove blocks. And we'll just move\non block. So got it Import move\nblocks from utils. It imports\nmove time from those utils as\nwell, time. And then we also\nhave to import this min delay,\nwhich we get from our helper.\nHardhead config. Great. So we\nmoved all that stuff. Again, if\nthis were a real chain, you just\nhave to wait. But since we're\nnot a real chain, we can do\nwhatever we want. Yes, love\ndoing whatever I want. Now that\nit's all cued up, the voters\npassed, we're looking spicy.\nLet's drive this home. Xe cuting\ndo a little console dot log\nexecuting the const execute TX\nequals await. gov dot execute.\nWe're going to pass this the\nexact same set of things we did\nfor the Q TX so I'm literally\ngonna copy this. paste it down\nhere. And then we're just going\nto do a weight SQ TX dot weight.\nWe're going to wait one block.\nAnd then the final hour we'll\nsee if the governance updated\nour box contract const box new\nvalue equals await box dot\nretrieve. And that will do\nconsole dot log. New box value.\nBox new value.to string Oh, so\nif we did this right, it's new\nbox value to be updated. Let's\nsee if we did it right yarn hard\nhat run grips Q and execute now\nwork localhost. Did we do it\nright? Are we successfully done\ngovernance? We did. That's okay.\nWe're gonna figure out what we\ndid wrong. Did you mean could\ncheck 256 I spelt some stuff\nwrong. It needs to be spelt like\nno CK. Just just k. Okay, let's\ntry again. It failed before it\nactually did. I think that's\ngood. Queuing moving time\nprovider EVM and crit cuz I\nspelt increased time wrong. Oh,\nno EVM increase time to just\ndouble check. Make sure I'm\nspelling this right T is\nactually capital. So I totally\nmessed up. So it's actually\nalready been queued. It's been\nqueued right now on our little\nnode EVM increased team. So we\ncan either delete and kind of\nrestart, or I can just go ahead\nand I'm just going to comment\nout a bunch of stuff, we're just\ngoing to skip the cueing here.\nWe're gonna run this one more\ntime, because it's already been\nqueued. And now should just\nexecute, we're gonna move time\nagain. But that's fine. Oh, my\ngoodness, we did it. Right. And\nthen normally, you would just do\nit in one script. But this queue\nwould fail because it was\nalready queued. Right, you can't\nqueue twice, move forward. In\ntime, we move blocks we executed\nand we got a new box value\ncompletely using our Dow\ncompletely decentralized voting\ncompletely on chain, no third\nparty trust going in on here.\nThere's no voting booth, there's\nno you know, spending 1000s of\ndollars on staff, everything we\njust voted on happened right in\nfront of our faces. Now, again,\nI highly recommend go to my\nGitHub repo, you take a look and\nyou see what's going on here.\nAgain, if you want to see\nJavaScript stuff, feel free to\ndo some JavaScript stuff. But\nthis goes over how to just get\nclone and get started if you\nwant to do that as well. But if\nyou walked with me here, if you\nwalked through this with me, you\nhave learned in the absolute\nKhan, thank you so much for\nbeing here. And I'll see you\nnext time.\nAll right. Now, welcome to the\nfinal section of our course, the\nsecurity and auditing section,\nthis one is going to be a little\nbit less coding and a little bit\nmore explaining. And most of\nwhat we're going to be learning\nabout here is in this Hardhead\nsecurity FCC section. Throughout\nthis course, we've given you a\ncouple of tips about different\nsecurity features. One, we\ntalked about reentrancy, we\ntalked a little bit about Oracle\nTax, and we're going to talk\nabout those more. And some of\nthe tools we can use to make our\ncode more efficient, to look out\nfor bugs, and to make our code\nmore secure. So we're gonna go\nahead, we're gonna go over this\nhard hat security FCC code base,\nand we're going to walk through\nit a little bit. So one of the\nfirst things that we're going to\ntalk about is, what is an audit?\nWell, an audit is going to be a\nsecurity focused code review,\nlooking for issues with your\ncode. So for example, let's say\nwe have some code that looks\nlike this, this should be a\nlittle bit familiar, because we\ntalked about this in one of our\nearlier sections with\nreentrancy, our code, withdraw,\ngoes and sends ether and then\nupdates the balances, this code\nis clearly vulnerable to a\nreentrancy attack here. And this\nis something that an auditor\nwould catch. Since when we\ndeploy our code, that code is\nimmutable. And that code will\nalways be there, it's really\nimportant to have these security\nreviews done before we deploy\nour code to a main net, and\nbefore we go live, so if you're\ngoing to deploy some crazy,\nmassive defy protocol, and\nyou're gonna have billions of\ndollars of people's money locked\ninto your protocol, you probably\nwant to make sure that the money\nis going to go to the correct\nplaces. So audits are incredibly\nimportant for the lifecycle of\nour projects. And we want people\nto peer review, we want people\nto review our code to make sure\nthat everything looks good. Now,\nwhen we send our code to audit,\nthough, we shouldn't just say\nhey, here's our code. Can you\ncheck them Make sure it's good.\nThat's not going to give an\nauditor enough information, they\nneed to be able to very easily\nknow what your code does, how to\nwork with it, and what you're\nlooking for. Because auditors\naren't going to be kind of this,\nthis failsafe, where if your\ncode is terrible, they're going\nto catch everything. Auditors\nare human beings too. They can\nmiss things as well, auditors.\nAlso, don't make sure that your\ncode is bug free. Like I said,\naudits are security focused peer\nreviews for your codebase. And\nwhen you do send your code to\naudit, you want to make sure you\nhelp out your auditors as much\nas possible. There's an amazing\ntweet thread from Tinto and\npreviously was an open Zeplin\nauditor with a ton of tips and\ntricks for working with\nauditors, I highly recommend you\npause the video, you click this\nlink and you read through his\ntweets because they are\nfantastic. openzeppelin has a\nreadiness guide to try to help\nyou make sure that you're even\nready for an audit in the first\nplace. And we've got a link to\nthis readiness guide in the\nGitHub repository. The summary\nof them are to add comments to\nyour code, use natspec, which we\nlearned about to document your\nfunctions, document your\nfunctions, document your\nfunctions, test, be ready to\ntalk to your auditors, and be\nprepared to give them plenty of\ntime. They are literally pouring\nthemselves over your code for\nweeks on end to make sure\nthere's nothing wrong. If you\nrush your auditors, you're gonna\nget a rushed audit, and they're\ngoing to miss things. So let's\ntalk about the auditing process.\nIn auditing process is going to\nlook like this. First, they're\ngoing to run your tests. That's\nthe first step in order is\nalways going to take and right\nthere, they're gonna find okay,\ndo they have enough code\ncoverage? Is everything passing?\nWhat do the tests do? What is\nthe optimal functionality, after\nan auditor runs tests, they're\ngoing to read specs or run your\ndocs. And then they're going to\nrun some fast tools like\nSlither, linters and static\nanalysis. And that's going to be\none of the first things we're\ngoing to talk about slither and\nstatic analysis. So static\nanalysis is the process of just\nrunning some program to read\nover all your code and look for\ncommonly known bugs. One of the\nmost popular static analysis\ntools is going to be this tool\ncalled Slither. And that's going\nto be one of the first things\nwe're going to do here. So let's\ngo ahead and open up our VS code\nnow. And we'll make a new\ndirectory called hardhats\nsecurity, FCC. We'll cd into it.\nWe'll do code period. And we'll\nopen this up. Now what I want\nyou to do, instead of starting a\nnew folder, and everything is\nwe're going to get clone, my\nheart had security FCC. So we'll\ndo git clone, our net security\nFCC space, and then put a period\nto clone it into this directory.\nAnd we'll get everything like\nthis. Now in here, this comes\nwith a couple of different\ncontracts for us already, that\neach have a different\nvulnerability, one of them is\ngoing to be bad RNG. This is a\ncontract that picks a random\nwinner of a raffle using block\ndifficulty and message dot\nsender. This isn't truly random,\nas the miners can influence the\nblock dot difficulty, and people\ncan cancel transactions. And\nthere's a ton of ton of\ndifferent vulnerabilities with\ncreating randomness in this way.\nWe also have this liquid pool as\nan Oracle, the two most common\ntypes of attacks are reentrancy,\nwhich we've learned about an\nOracle manipulation attacks,\nwhich luckily for you, we've\ntaught you about decentralized\nOracle's and working with chain\nlink, which should make you a\nlot safer. And especially for\nthis section, I'm going to harp\non these, please, please,\nplease, if you taking this\ncourse, please do not make a\nprotocol that falls victim to\none of these, I will feel like I\nhave failed you. If you build a\nprotocol where you use some\ncentralized oracle that gets\nmanipulated, or you build a\nprotocol that has a reentrancy\nattack. The tools that I'm going\nto show you right here are going\nto help you with reentrancy. And\neverything I've taught you about\nchain link should hopefully\nteach you how to not get Oracle\nmanipulated. So in this contract\nhere, we're using a liquidity\npool as an Oracle and this is\nkind of some advanced defy stuff\nhere. This is a minimalistic\ndecentralized exchange example\nwhere people can buy and sell\nand swap different assets. Now\nusing this singular exchange, to\nget the swap price is a terrible\nidea. Because this is a single\nprotocol for a single price. The\nprice from this protocol is a\nsingle centralized location, and\nwe don't want to get our price\nfrom a single centralized\nexchange. We want to get it from\nmany exchanges. Getting the\nprice of any asset from a single\ndecentralized exchange is not\ndecentralized, is somebody\nmanipulates the market doing\nsome crazy advanced defy things\nthat will ruin the price of your\nassets. So getting the price of\nyour assets from a centralized\nlocation is a terrible idea. We\nhave a metamorphic proxy here.\nThe issue here is that it's\ninitialized double, and we don't\nguarantee that the contract has\nbeen initialized. We have a\nclassic reentrancy issue here.\nAnd then we have and then we\nhave a vault here where some\npassword is stored on chain and\nwe're crossing our fingers that\nnobody reads this password to\nunlock it. So we're going to run\nsome static analysis on these\ncontracts, see if that static\nanalysis can spot some of the\nbad things in here.\nTo get started, we're going to\nuse a tool like I said called\nslither slither tool was created\nby this Crytek team, aka the\ntrilobites team. Now, trilobites\nis one of my absolute favorite\nauditors in the space. And I\nabsolutely love all the tools\nthat this team puts out, they\nput up open source security\ntools for any of us to use such\nas slitter. Now to get started\nwith Slither, we actually need\nto install Python first. So you\ncan also run it with Docker. But\nI'm going to show you how to how\nto work with Python first. So if\nyou haven't worked with Python,\nbefore, you can come to\npython.org/downloads and\ndownload Python right from the\nwebsite, you'll know you've done\nit right. And you can run python\nthree dash dash version, like\nthis. Or if you have an older\nversion of Python, you can run\nPython dash dash version. Once\nyou install Python, you should\nalso have this tool called PIP\nthree installed and you can\ncheck by running PIP three dash\ndash version, or PIP dash dash\nversion. And we also want to\ninstall this sock select package\njust in case we're using weird\nversions of solidity to install.\nSo select, we run PIP three,\ninstall sock select, like that.\nAnd then we can do sock, select,\nuse. And then we can choose the\nversion of solidity or slither\nto work with. Once you have\nthose tools, you can just run\nPIP three install slither\nanalyzer like so. And you can\ninstall slither into your Python\nenvironment. I'm not going to\nrun it because already have. You\ncan also learn how to do this\nall with Docker and we'll learn\nhow to do this with Docker in a\nlittle bit. Now in our package\njson, we actually have command\nscript in our package. JSON for\nrunning Slither, you'll know\nyou've installed slither\ncorrectly. If you can run\nSlither, dash dash help you get\nan output like this. Now we can\nuse slither to run it on our\ncontracts folder by running this\nbig command here. So we'll say\nSlither. And we want to run it\non dot slash contracts, we need\nto tell it that it has some\npsaltery mappings, and every\ntime it sees open Zeppelin, it\nshould use Node module slash\nopen Zeppelin and every time it\nsees chain link introduced node\nmodules slash chain link. And\nI'm just going to read from our\npackage json. And we're\nexcluding a couple of functions\nthat it runs and excluding\nbuilder ignore, but don't worry\ntoo much about that. We've\nactually just run that by first\nrunning yarn to install all of\nour packages.\nAnd after we've installed all of\nour packages, we can run yarn\nSlither. Or you can copy paste\nthat slither command and run it\ndirectly. Now we'll get this\nmassive output that looks like\nthis with some red and some\ngreen. Let's go through what's\nactually happening here, the way\nthat we can read Slither, it'll\nlist out a number of lines that\nhave an issue and then a\nreference to that issue. And\neach one of these is separated\nby a new line. So that's a\nsection that's exception, etc.\nSo if we get a red here, that\nmeans that there is a high\nimpact issue that we definitely\nshould address. And it even\ncomes with a reference link that\nwe can copy paste and put into\nour browser and see what the\nissue is and more information\nfrom the slither tool about what\nthat issue is and how to correct\nit. We can see it catches our\nmetamorphic contract issue. It\nsays metamorphic contract is\nnever initialized. It is used\nhere in metamorphic dot kill.\nThe reason that this is a\nmassive issue, if we go to our\nmetamorphic contract outsole is\nthat if we deploy this contract,\nsomebody else could initialize\nthis code, become the owner, and\nthen automatically kill it\nbefore we even have a chance.\nThis is actually something that\nhas happened in the past and has\ncaused a ton of issues. So if we\nsee red in the terminal, this\nmeans Hey, massive issue, we\nshould absolutely check it out.\nNow there's gonna be a ton of\ngreen in here. These are\ndetectors that are probably low\nimpact, and they're probably\nokay. And in fact, we can see,\nit's even just calling out some\nopens up on stuff here, saying,\nHey, we see some inline\nassembly. Inline assembly is\nkind of scary, maybe don't use\nthat. So you can think of green\nas kind of a warning that\nthere's a low likelihood that\nthis will impact anything, but\nyou might want to check it out,\nwe get this different versions\nof solidity used, which is just\nsaying, hey, there's a couple\ndifferent versions of solidity\nthat might be something you want\nto keep in mind, maybe you\nshould use the same versions of\nsolidity. We have this allow old\nversions. And this is actually\nwhy throughout this whole\ncourse, we've been using zero\npoint 8.7 Because zero point 8.4\nand zero point 8.7 are\nconsidered more stable versions\nof solidity. So if you're using\nversions outside of there, so\nthere will say hey, maybe you\nwant to work with a different\nversion. We have some flags in\nhere about maybe Hey, you should\nmake a variable constant because\nit never changes which is great.\nUses literal with too many\ndigits saying hey, this Just\nkind of hard to read, maybe you\nscrewed up some of the zeros,\nloud old versions. And what's\nthis reentrancy in ether store\ndot withdraw. So just by running\nthis slither tool, we can catch\na reentrancy vulnerability in\none of our contracts, which is\nfantastic. So running the static\nanalysis caught at least two\nhuge vulnerabilities in our\nmetamorphic contract. And in our\nreentrancy contract, it didn't\ncatch the issues involved at\nsole liquidity pool, or bad RNG,\nthough, which is why we don't\nonly want to rely on slither\nbecause it's not going to catch\neverything, but it will catch a\nlot of major vulnerabilities. So\nthat's how we can use Slither,\nat least from a middle middle\nstack point to get started. So\ngreat, we just learned how to\nwork with Slither. That's one of\nthe first tools that are really\nfantastic in our audit process.\nAnd that's going to be\nconsidered a fast tool for\nstatic analysis, running tests,\nlinters, etc, are also types of\nstatic analysis.\nAfter we run a tool like that,\nwe enter some manual analysis\nwhere we walk through the code\nourselves manually, and maybe we\ndo it in tangent with running\nsome slower tools, like a kitna\nManta Corp, and other symbolic\nexecution tools. Symbolic\nExecution is where we simulate\nexecuting transactions on the\nblockchain. And one of these\nsymbolic execution tools that\nwe're going to work with is this\na kidmin tool. Again, this is a\ntrail of bits tool for doing\nsomething called fuzz testing.\nNow in programming, fuzzing or\nfuzz testing is an automated\nsoftware testing technique that\ninvolves providing invalid\nunexpected or random data as\ninputs to a computer program. In\na lot of our code, oftentimes,\nwe're going to get people\ninteracting with them in ways\nthat we will never think about.\nSo we want to be able to provide\nrandom data and random\ninformation to our test to see\nif something weird happens that\nwe weren't expecting. So we can\nactually build our own fuzz\ntests in our hard hat projects\nand run these fuzz tests, I've\nactually created a sample of\nfuzz tests, we write our fuzz\ntests in solidity, actually, as\nopposed to writing our tests in\nJavaScript. So let's say for\nexample, we've built this vault\ncontract. And we think that at\nfirst glance, hey, nobody should\never be able to know the\npassword, and no one should ever\nbe able to unlock this contract.\nWhich obviously, we know is\nridiculous, because we know that\nanybody can read anything in a\nstorage variable. So we know\nthat this should fail, but it\nmight be hard to write a test.\nTo catch that this actually\nwould fail. A good approach to\ntesting this would be to just\nsend a ton of random bytes 32\nobjects to this unlock function\nto see if we can unlock it. We\ncan write a fuzz test to do\nexactly that. So in my vault,\nfuzz test dot Sol, we're\nimporting vault outsole. And so\nwe're saying vault fuzz test is\nvault and we have a password of\n123, ASD 123. And now we have a\nfunction called a kid and a test\nfind password, where it's going\nto send a ton of random data\ninto vault to try to make s\nlocked equal false. So we just\nsay s locked equals true here,\nand our first test will try to\nmake s locked equals false. Now\nwe could install just the kitna,\nbut at this point, it's a good\nidea to bring up our the\nsecurity toolbox from trail of\nbits. So trail of bits has a\npackage called the eath security\ntoolbox, which has all their\nsecurity tools in one single\ncontainer kitna, Ethan o Manta\ncore, slither, rattle, and not\nso smart contracts, it has all\nthese in the same exact package.\nNow to work with this toolbox.\nWe're gonna need Docker\ninstalled. So we're gonna do a\nlittle bit of installation here.\nAnd again, sometimes this can be\nthe hardest part of the course\nis just installing these\npackages. So we've left a link\nto Doc's dot docker.com, get\nDocker to install Docker, to\nactually work with these tools,\nyou're just going to come you're\ngoing to click whichever one of\nthese is appropriate for you to\ninstall Docker, once we have\nDocker installed, we can run the\nE security toolbox by pulling it\ndown from the Docker equivalent\nof GitHub. And we're going to\nuse a whole bunch of Docker\ncommands that I'm not going to\nexplain here because this isn't\na Docker course, if you're\nlooking to get into the security\nstuff, I would definitely\nrecommend reading up on all\nthese commands afterwards. And\nwe're going to leave a ton of\nlinks for you to learn more. And\nin the package that JSON\nassociated with this lesson. We\neven have the command to get set\nup right in here. So we can just\nrun yarn toolbox, which will run\nour Docker command like this. So\nI'm just going to run yarn\ntoolbox. And if you get\nsomething like this saying\ncannot connect to the Docker\ndaemon is the Docker daemon\nrunning, because I need to have\nmy Docker daemon running. Since\nI installed Docker desktop. I\nneed to have my Docker engine\nstarted and running for it to\nactually be working. Again to\nwork with this. There's a lot of\nDocker setup and configuration\nthat needs to happen, which I'm\ngoing to leave a ton of\ninstructions on how to get\nstarted with Docker. Once we\nhave Docker setup. Now we can\nrun yarn toolbox, which will\nstick us into a new shell to\nwork with any of these tools\nthat trilobites has Out of the\nbox. Now our vault fuzz test\ncomes with a config as well.\nThis is in a Yamo file with all\nour arguments for running a\nkidnap. So it has a test limit,\nwhich is how many different\nruns, we should do a time delay,\nblock delay. And then of course,\nsome re mappings in here. This\ndarker shell will already have\nthe security tools already\ninstalled like the Kidner test.\nSo we'll run a kinah test on SRC\nslash contracts slash test slash\nfuzzing slash fault fuzz test\ndot Sol dash dash contract will\nbe vault fuzz test, dash dash\nconfig will be SRC slash\ncontracts slash test slash\nbuzzing slash config dot Yamo.\nAnd we'll go ahead and we'll hit\nenter here, and it'll say\nanalyzing contract, it'll give\nus an output like this, it will\ngive us an output that looks\nlike this. What it's saying is\nit found a use case where it\ncould make s locked equals\nfalse. And the use case was 123,\nASD 123. So when what seemed\nlike almost seconds, it found\nthe password to unlock our\ncontract. And this is why\nrunning a fuzz tester can be so\npowerful, we thought our\ncontract was secure, but it\nimmediately found the password,\nwhich means anybody else could\nimmediately find the password.\nAnd this would be an indicator\nthat what we're doing there is\nnot a good setup. So we'll hit\nCTRL C to escape. And to leave\nour Docker setup here,\nwe'll just write exit. Now\nagain, I'm going to leave a ton\nof links to work with a\nkidnapper and work with this\nfuzz tester in the GitHub repo\nassociated with this lesson, so\nthat you can go ahead and learn\nmore. Now, if you take anything\naway from this whole section, it\nshould be this right here. The\ntwo most common tasks are\nreentrant. See, and Oracle\nmanipulation. So if you're not\ngoing to be an auditor, and you\njust want to deploy things to\nmain net, always, always before\nyou deploy anything, the\nabsolute minimum that you should\nbe doing is always running\nSlither. And then looking\nmanually for Oracle manipulation\nand reentrancy attacks. If you\nsee in your code that you're\ngetting pricing information.\nPrice is a piece of data that we\nas humans have assigned to\nsomething if you're getting\npricing information from a\ncentralized location, rethink\nthat scenario, rethink what\nyou're doing there. If you're\ngetting a random number, if\nyou're doing any type of\nautomation from a centralized\nlocation, rethink it and change\nyour strategy. The chain link\nOracle network has been created\nfor a reason to prevent getting\nhacked like this. So please keep\nthese in mind before you deploy\nanything to main that with any\ntype of security guarantees.\nOkay, great. So we've learned\nabout the fast tools, we've\nlearned about some of the slow\ntools. We didn't look into Manta\nCorp or Mythix. But these are\nalso tools that you can use\nManta Corp is going to be\nanother tool from the trilobites\nteam. And Mythix is actually a\nsmart contract security service\nfrom the consensus team, you\nbasically send a bot that they\nhave running in the cloud your\ncontracts and will do some\nautomated process to check for\nsecurity vulnerabilities. This\nis a paid service. But if you're\ngoing to be deploying a protocol\nthat's worth millions of\ndollars, spending a few $1,000.\nSpending a few $1,000 to make\nsure it actually does. What it\nsays is going to do correctly is\ndefinitely something that you\nwant to invest in. After you run\nthrough this whole process. You\nthe smart contract developers\nand the auditors should discuss\ntheir findings. And if there's\nany issues, repeat the steps,\nrepeat all the steps again after\nchanges are made. So this audit\nprocess and making sure your\ncontracts are secure is a long\nprocess. And then afterwards, an\nauditor will finally write your\nreport with all security\nvulnerabilities and everything\nthat they found in your\ncontracts. Typically, you'll\norganize reports in a chart\nthat'll look something like\nthis, you'll label issues that\nhave a high chance of happening\nand have a high impact as\ncritical things that have a high\nimpact, but a low likelihood as\nmedium, and etc. I'm also going\nto leave some examples two\naudits that have been done in\nthe past so that you can take a\nlook at them. And you can see\nwhat a full audit looks like on\ncertain code. We'll be looking\nat openzeppelin sigma prime, and\ntrilobites, because these are\nthree of what I think are some\nof the best auditors in the\nspace. Now in the GitHub repo.\nWe also have a ton of other\ntools that you can use Mythix,\nmithril ethers play and\nconsensus security tools. If you\nwant to learn more about\nsecurity and auditing, I highly\nrecommend that after this course\nyou play the Ethernet game and\ndamn vulnerable Defy. These are\ntwo games that will teach you a\nton about security. And we'll\ntest the chops and we'll test\neverything that you've learned\nin this course. There's also a\ncouple of security focused blogs\nthat I really like. One of them\nin particular is wrecked dot\nnews. They keep a running list\nof some of the largest hacks\nthat have ever happened in the\nspace and then retrospectives on\nwhy those actually happened. And\nthey usually make it very\nentertaining as well. We have\nsome articles in here as well.\nOne of the best places to look\nat is this known attacks section\nwhere they talk Talk about\nreentrancy, Oracle manipulation,\nfront running and a ton of other\nattacks that you should\nabsolutely be aware of when\nwriting your smart contracts,\nwe're not going to go over them\nhere because they do a great job\nin these resources explaining\nthem, you should also check out\nthis article because I helped\nwrite it. So definitely check\nthat out. And then we've got a\nlist to even more sections. So\nthis is going to be a living\nsection here. So please feel\nfree. If you find more things in\nthe future, please feel free to\nmake pull requests and update\nthis repository so that other\npeople can learn and know more\nabout security and auditing and\nhave contract examples on what\nbad code looks like and how to\nactually catch them. Even though\nthis was one of our quickest\nsections. From a video\nstandpoint, this actually is\ngoing to be one of the longest\nsections of your career.\nSecurity is something that is\nalways going to be on your mind.\nAnd there's always going to be\nnew tools to help with security.\nAnd there's always going to be\nnew things to think about. So\neven though we went through this\nvery quickly, I would 100% want\nyou to pause this video, and\nwork with and try out some of\nthe tools we tried here. And\nthen maybe even try coming up\nwith your own vulnerabilities as\nwell. And with that being said,\nyou have just finished the last\nsection of this massive master\ncourse on learning smart\ncontracts, solidity, web three\nand blockchain development,\nyou should be incredibly proud\nof yourself. Congratulations, I\nand the web three community as a\nwhole want to congratulate you\nfor completing this absolutely\nmonstrosity of a tutorial, you\nhave done an amazing job to get\nthis far. And to watch me\ntalking to you right now. And if\nyou haven't finished the course,\ngo back and finish it before\ncoming here. We have learned so\nmuch on this journey. And I can\nsay from the bottom of my soul\nthat I am so glad to have you in\nthe web three space, smart\ncontract space, the blockchain\nspace, the cryptocurrency space,\nwe are so excited that you're\nhere. I'm really looking forward\nto seeing you in the web three\nin the blockchain community. Now\na lot of people ask, Well, where\ndo I go? Now, I didn't have all\nthis newfound knowledge. I'm\narmed with the intelligence of\nthe web three developer space.\nWell, I've left some links in\nthe GitHub repository to lead\nyou to those next steps. But the\nbiggest thing that you can do\nfor yourself right now is go\ntake what you've learned, and\napply it somewhere. This is\ngoing to be probably the most\nthorough course you will ever go\nthrough in this space. And you\ncan go tutorial to tutorial and\nboot camp to bootcamp all you\nwant. But at some point, you\nhave to make that leap, and you\nhave to dive in. And that's\nwhere the majority of the growth\nis going to be anyways. So if\nyou're here, wondering where to\ngo next, go join a hackathon. Go\nstart jumping into issues on\nGitHub repos, go start applying\nfor grants, go start applying\nfor jobs and say, I took\nPatrick's massive course. Here's\nmy GitHub repo, work on a\npersonal project, work on\nsomebody else's project. Take\nthis knowledge and apply it, the\nchallenges that you'll run into\nand the challenges that you'll\nface. Really trying to do\nsomething without me hand\nholding you is where you're\ngoing to learn 10 times as much\nas what you've learned here.\nI've walked through as deep down\nthis rabbit hole as I can take\nyou. Now it's up to you to go\nout and do something with it. So\nthank you, everybody who helped\nme create this course. Thank you\nfor taking this course. And I'm\nso excited to see you in the\ncommunity and see what you build\nand see what we can create with\nthis technology.\n",
  "words": [
    "interested",
    "learning",
    "blockchain",
    "course",
    "patrick",
    "collins",
    "veteran",
    "software",
    "engineer",
    "longtime",
    "finance",
    "industry",
    "developer",
    "sure",
    "leave",
    "comment",
    "something",
    "learned",
    "course",
    "welcome",
    "ultimate",
    "solidity",
    "smart",
    "contract",
    "blockchain",
    "developer",
    "course",
    "javascript",
    "addition",
    "recently",
    "version",
    "video",
    "python",
    "2",
    "million",
    "views",
    "right",
    "making",
    "watched",
    "smart",
    "contract",
    "tutorial",
    "planet",
    "learned",
    "ton",
    "first",
    "course",
    "love",
    "python",
    "language",
    "definitely",
    "sure",
    "check",
    "one",
    "taken",
    "learnings",
    "got",
    "making",
    "first",
    "course",
    "wrapped",
    "put",
    "javascript",
    "video",
    "looking",
    "get",
    "started",
    "web",
    "three",
    "blockchain",
    "smart",
    "contracts",
    "terms",
    "course",
    "anybody",
    "everybody",
    "matter",
    "experience",
    "level",
    "programming",
    "blockchain",
    "ideally",
    "know",
    "little",
    "bit",
    "javascript",
    "starting",
    "worries",
    "help",
    "along",
    "way",
    "case",
    "want",
    "learn",
    "little",
    "bit",
    "javascript",
    "starting",
    "fantastic",
    "courses",
    "free",
    "code",
    "camp",
    "learn",
    "absolutely",
    "really",
    "experience",
    "object",
    "oriented",
    "programming",
    "language",
    "work",
    "right",
    "brand",
    "new",
    "coding",
    "brand",
    "new",
    "blockchain",
    "exactly",
    "already",
    "know",
    "lot",
    "blockchain",
    "coding",
    "course",
    "give",
    "even",
    "deep",
    "fundamentals",
    "space",
    "welcome",
    "edge",
    "rabbit",
    "hole",
    "know",
    "name",
    "patrick",
    "collins",
    "smart",
    "contract",
    "engineer",
    "developer",
    "advocate",
    "chain",
    "link",
    "protocol",
    "live",
    "breed",
    "smart",
    "contracts",
    "also",
    "make",
    "youtube",
    "videos",
    "channel",
    "medium",
    "twitter",
    "threads",
    "teaching",
    "people",
    "smart",
    "contracts",
    "coding",
    "new",
    "technology",
    "love",
    "helping",
    "developers",
    "learn",
    "grow",
    "learn",
    "new",
    "advent",
    "blockchain",
    "smart",
    "contracts",
    "taking",
    "journey",
    "becoming",
    "blockchain",
    "expert",
    "wizard",
    "smart",
    "contract",
    "developing",
    "world",
    "even",
    "want",
    "become",
    "developer",
    "first",
    "section",
    "blockchain",
    "basics",
    "give",
    "lot",
    "fundamental",
    "knowledge",
    "blockchain",
    "smart",
    "contracts",
    "even",
    "work",
    "excited",
    "hope",
    "enjoy",
    "journey",
    "data",
    "dump",
    "passion",
    "educational",
    "project",
    "everything",
    "learned",
    "working",
    "space",
    "100",
    "certain",
    "follow",
    "along",
    "come",
    "side",
    "armed",
    "knowledge",
    "positive",
    "force",
    "incredible",
    "industry",
    "solidity",
    "smart",
    "contract",
    "developers",
    "massively",
    "demand",
    "average",
    "salary",
    "around",
    "year",
    "massive",
    "economic",
    "opportunity",
    "learning",
    "course",
    "technology",
    "ability",
    "revolutionize",
    "everything",
    "interact",
    "one",
    "pioneers",
    "ushering",
    "new",
    "age",
    "courses",
    "already",
    "track",
    "record",
    "giving",
    "people",
    "educational",
    "needs",
    "sending",
    "careers",
    "blockchain",
    "smart",
    "contract",
    "space",
    "going",
    "give",
    "cutting",
    "edge",
    "tools",
    "use",
    "including",
    "working",
    "things",
    "like",
    "phi",
    "nf",
    "ts",
    "dows",
    "erc",
    "20s",
    "upgradable",
    "smart",
    "contracts",
    "going",
    "teach",
    "skills",
    "necessary",
    "build",
    "defy",
    "applications",
    "like",
    "ave",
    "synthetics",
    "compound",
    "billion",
    "dollar",
    "decentralized",
    "applications",
    "massively",
    "successful",
    "nft",
    "projects",
    "like",
    "crypto",
    "punks",
    "board",
    "apes",
    "dow",
    "like",
    "maker",
    "dow",
    "developer",
    "dow",
    "amazing",
    "things",
    "seen",
    "cryptocurrency",
    "world",
    "learning",
    "skills",
    "economic",
    "opportunities",
    "fingertips",
    "ability",
    "pioneer",
    "completely",
    "changing",
    "way",
    "interact",
    "fundamental",
    "way",
    "building",
    "decentralized",
    "smart",
    "contract",
    "applications",
    "building",
    "world",
    "accountable",
    "world",
    "unbreakable",
    "promises",
    "faster",
    "efficient",
    "financially",
    "free",
    "world",
    "collaborative",
    "community",
    "combining",
    "prowess",
    "philosophy",
    "technology",
    "new",
    "system",
    "learn",
    "purpose",
    "value",
    "smart",
    "contracts",
    "decentralized",
    "applications",
    "lesson",
    "one",
    "course",
    "exciting",
    "finish",
    "course",
    "ready",
    "want",
    "give",
    "major",
    "thank",
    "major",
    "kudos",
    "taken",
    "first",
    "step",
    "enter",
    "realm",
    "welcome",
    "web",
    "three",
    "welcome",
    "blockchain",
    "welcome",
    "smart",
    "contracts",
    "see",
    "bottom",
    "rabbit",
    "hole",
    "let",
    "jump",
    "best",
    "practices",
    "course",
    "learn",
    "effectively",
    "learn",
    "course",
    "best",
    "want",
    "skip",
    "part",
    "help",
    "solve",
    "80",
    "issue",
    "going",
    "course",
    "100",
    "certain",
    "follow",
    "along",
    "github",
    "repository",
    "associated",
    "course",
    "link",
    "description",
    "video",
    "absolutely",
    "click",
    "follow",
    "along",
    "open",
    "tab",
    "code",
    "sam",
    "polls",
    "timestamps",
    "community",
    "interact",
    "going",
    "bible",
    "watching",
    "course",
    "yes",
    "discussions",
    "tab",
    "discussions",
    "tab",
    "place",
    "ask",
    "questions",
    "engage",
    "developers",
    "going",
    "course",
    "well",
    "get",
    "help",
    "etc",
    "sure",
    "say",
    "hello",
    "meet",
    "like",
    "minded",
    "individuals",
    "like",
    "blockchain",
    "smart",
    "contracts",
    "move",
    "really",
    "quickly",
    "things",
    "constantly",
    "updated",
    "make",
    "sure",
    "always",
    "date",
    "latest",
    "open",
    "documentation",
    "try",
    "open",
    "documentation",
    "well",
    "maybe",
    "even",
    "code",
    "sample",
    "next",
    "writing",
    "code",
    "sure",
    "refer",
    "back",
    "make",
    "sure",
    "keeping",
    "pace",
    "date",
    "samples",
    "sometimes",
    "technology",
    "might",
    "change",
    "might",
    "way",
    "something",
    "little",
    "bit",
    "better",
    "file",
    "called",
    "chronological",
    "updates",
    "sure",
    "first",
    "place",
    "check",
    "run",
    "issue",
    "see",
    "maybe",
    "something",
    "updated",
    "missed",
    "chronologically",
    "ordered",
    "easier",
    "find",
    "updates",
    "basically",
    "say",
    "always",
    "refer",
    "back",
    "github",
    "repo",
    "first",
    "find",
    "mistake",
    "something",
    "working",
    "way",
    "expected",
    "jump",
    "conversation",
    "leave",
    "discussion",
    "leave",
    "issue",
    "ask",
    "questions",
    "take",
    "breaks",
    "tell",
    "many",
    "people",
    "tried",
    "rushing",
    "entire",
    "first",
    "course",
    "one",
    "setting",
    "retain",
    "much",
    "information",
    "brain",
    "remembers",
    "information",
    "much",
    "better",
    "take",
    "breaks",
    "every",
    "25",
    "minutes",
    "half",
    "hour",
    "maybe",
    "take",
    "five",
    "minute",
    "walk",
    "every",
    "two",
    "hours",
    "take",
    "much",
    "longer",
    "break",
    "really",
    "want",
    "make",
    "sure",
    "something",
    "drills",
    "try",
    "go",
    "back",
    "reflect",
    "lesson",
    "prior",
    "continuing",
    "next",
    "lesson",
    "time",
    "though",
    "learn",
    "speed",
    "right",
    "speed",
    "course",
    "takes",
    "day",
    "week",
    "month",
    "even",
    "year",
    "matter",
    "learn",
    "pace",
    "right",
    "change",
    "speed",
    "talked",
    "using",
    "little",
    "gear",
    "icon",
    "youtube",
    "video",
    "talking",
    "way",
    "fast",
    "slow",
    "time",
    "talking",
    "slow",
    "speed",
    "also",
    "even",
    "go",
    "order",
    "bounce",
    "around",
    "topic",
    "topic",
    "want",
    "learn",
    "full",
    "stack",
    "skip",
    "full",
    "stack",
    "stuff",
    "want",
    "learn",
    "coding",
    "skip",
    "coding",
    "stuff",
    "want",
    "go",
    "advanced",
    "stuff",
    "go",
    "advanced",
    "stuff",
    "highly",
    "encouraged",
    "pause",
    "come",
    "back",
    "ask",
    "questions",
    "blockchain",
    "smart",
    "contract",
    "world",
    "incredibly",
    "collaborative",
    "sure",
    "use",
    "tools",
    "like",
    "discussions",
    "tab",
    "github",
    "repository",
    "asking",
    "questions",
    "stack",
    "overflow",
    "aetherium",
    "stack",
    "exchange",
    "tagging",
    "relative",
    "technologies",
    "making",
    "issues",
    "different",
    "github",
    "repositories",
    "working",
    "jumping",
    "discord",
    "reddit",
    "twitter",
    "place",
    "communities",
    "technologies",
    "congregating",
    "reason",
    "putting",
    "much",
    "emphasis",
    "community",
    "aspects",
    "becoming",
    "solidity",
    "blockchain",
    "engineer",
    "much",
    "solidity",
    "part",
    "comfortable",
    "tools",
    "space",
    "including",
    "ones",
    "get",
    "help",
    "give",
    "help",
    "essential",
    "successful",
    "networking",
    "massive",
    "makes",
    "ton",
    "fun",
    "continue",
    "journey",
    "get",
    "advanced",
    "looking",
    "places",
    "meet",
    "developers",
    "hackathons",
    "one",
    "best",
    "places",
    "connect",
    "engineers",
    "chainlink",
    "hackathons",
    "eath",
    "global",
    "hackathons",
    "dev",
    "folio",
    "hackathons",
    "three",
    "great",
    "hackathon",
    "suites",
    "connect",
    "matter",
    "journey",
    "great",
    "places",
    "flex",
    "learned",
    "alright",
    "best",
    "practices",
    "course",
    "standing",
    "edge",
    "rabbit",
    "hole",
    "looking",
    "peering",
    "world",
    "web",
    "three",
    "smart",
    "contracts",
    "blockchain",
    "like",
    "want",
    "jump",
    "want",
    "keep",
    "going",
    "let",
    "begin",
    "journey",
    "world",
    "smart",
    "contracts",
    "starts",
    "blockchain",
    "basics",
    "know",
    "excited",
    "get",
    "coding",
    "jump",
    "want",
    "learn",
    "fundamentals",
    "blockchains",
    "smart",
    "contracts",
    "understanding",
    "ideologies",
    "basics",
    "important",
    "dictate",
    "architect",
    "decentralized",
    "applications",
    "learning",
    "basics",
    "blockchain",
    "solidity",
    "critical",
    "already",
    "know",
    "basics",
    "blockchain",
    "feel",
    "free",
    "jump",
    "lesson",
    "two",
    "since",
    "probably",
    "heard",
    "bitcoin",
    "bitcoin",
    "one",
    "first",
    "protocols",
    "use",
    "revolutionary",
    "technology",
    "called",
    "blockchain",
    "bitcoin",
    "white",
    "paper",
    "created",
    "pseudo",
    "anonymous",
    "satoshi",
    "nakamoto",
    "outlined",
    "bitcoin",
    "make",
    "peer",
    "peer",
    "transactions",
    "decentralized",
    "network",
    "network",
    "powered",
    "cryptography",
    "decent",
    "tality",
    "allowed",
    "people",
    "engage",
    "censorship",
    "resistant",
    "finance",
    "decentralized",
    "manner",
    "due",
    "features",
    "talk",
    "little",
    "bit",
    "people",
    "took",
    "superior",
    "digital",
    "store",
    "value",
    "better",
    "store",
    "value",
    "something",
    "like",
    "gold",
    "example",
    "also",
    "hear",
    "people",
    "commonly",
    "refer",
    "digital",
    "gold",
    "similar",
    "gold",
    "scarce",
    "amount",
    "set",
    "amount",
    "bitcoin",
    "available",
    "planet",
    "much",
    "buy",
    "sell",
    "read",
    "original",
    "vision",
    "white",
    "paper",
    "linked",
    "white",
    "paper",
    "github",
    "repo",
    "associated",
    "course",
    "insane",
    "breakthrough",
    "little",
    "bit",
    "going",
    "learn",
    "exactly",
    "possible",
    "actually",
    "works",
    "hood",
    "people",
    "though",
    "saw",
    "technology",
    "wanted",
    "take",
    "little",
    "bit",
    "farther",
    "even",
    "blockchain",
    "technology",
    "years",
    "later",
    "man",
    "named",
    "vitalik",
    "buterin",
    "released",
    "white",
    "paper",
    "new",
    "protocol",
    "named",
    "aetherium",
    "use",
    "blockchain",
    "infrastructure",
    "additional",
    "feature",
    "2015",
    "number",
    "co",
    "founders",
    "released",
    "project",
    "aetherium",
    "people",
    "could",
    "make",
    "decentralized",
    "transactions",
    "decentralized",
    "agreements",
    "decentralized",
    "organizations",
    "ways",
    "interact",
    "without",
    "centralized",
    "intermediary",
    "centralized",
    "governing",
    "force",
    "basically",
    "idea",
    "take",
    "thing",
    "made",
    "bitcoin",
    "great",
    "add",
    "decentralized",
    "agreements",
    "smart",
    "contracts",
    "fact",
    "technically",
    "smart",
    "contracts",
    "even",
    "really",
    "new",
    "idea",
    "back",
    "1994",
    "man",
    "named",
    "nick",
    "zabo",
    "actually",
    "originally",
    "come",
    "idea",
    "smart",
    "contracts",
    "set",
    "instructions",
    "executed",
    "decentralized",
    "autonomous",
    "way",
    "without",
    "need",
    "third",
    "party",
    "centralized",
    "body",
    "run",
    "come",
    "life",
    "blockchains",
    "smart",
    "contract",
    "platforms",
    "like",
    "aetherium",
    "smart",
    "contracts",
    "going",
    "core",
    "thing",
    "going",
    "working",
    "course",
    "going",
    "developing",
    "think",
    "smart",
    "contracts",
    "way",
    "think",
    "traditional",
    "contracts",
    "traditional",
    "agreements",
    "set",
    "instructions",
    "parties",
    "except",
    "instead",
    "written",
    "pen",
    "paper",
    "typed",
    "microsoft",
    "word",
    "written",
    "code",
    "embodied",
    "decentralized",
    "blockchain",
    "platforms",
    "also",
    "executed",
    "instead",
    "executed",
    "two",
    "parties",
    "three",
    "parties",
    "however",
    "many",
    "parties",
    "involved",
    "removes",
    "centralized",
    "issue",
    "talk",
    "bit",
    "one",
    "main",
    "differentiators",
    "etherium",
    "protocol",
    "bitcoin",
    "protocol",
    "smart",
    "contracts",
    "technically",
    "bitcoin",
    "smart",
    "contracts",
    "intentionally",
    "turing",
    "incomplete",
    "means",
    "functionality",
    "programming",
    "language",
    "would",
    "give",
    "intentional",
    "move",
    "bitcoin",
    "developers",
    "bitcoin",
    "developers",
    "viewed",
    "bitcoin",
    "store",
    "value",
    "versus",
    "aetherium",
    "developers",
    "viewed",
    "aetherium",
    "store",
    "value",
    "utility",
    "facilitate",
    "decentralized",
    "agreements",
    "smart",
    "contracts",
    "blockchains",
    "alone",
    "absolutely",
    "incredible",
    "however",
    "come",
    "huge",
    "issue",
    "want",
    "digital",
    "agreements",
    "replace",
    "agreements",
    "everyday",
    "lives",
    "probably",
    "going",
    "need",
    "data",
    "real",
    "world",
    "blockchains",
    "actually",
    "ca",
    "interact",
    "ca",
    "read",
    "listen",
    "data",
    "real",
    "world",
    "known",
    "oracle",
    "problem",
    "blockchains",
    "deterministic",
    "systems",
    "deterministic",
    "purpose",
    "learn",
    "works",
    "sessions",
    "come",
    "everything",
    "happens",
    "happens",
    "little",
    "world",
    "going",
    "agreements",
    "need",
    "external",
    "data",
    "need",
    "external",
    "computation",
    "oracle",
    "come",
    "play",
    "oracle",
    "device",
    "delivers",
    "data",
    "decentralized",
    "blockchain",
    "runs",
    "external",
    "computation",
    "however",
    "want",
    "applications",
    "stay",
    "truly",
    "decentralized",
    "ca",
    "work",
    "single",
    "oracle",
    "single",
    "data",
    "provider",
    "single",
    "source",
    "running",
    "external",
    "computations",
    "need",
    "decentralized",
    "oracle",
    "network",
    "similar",
    "decentralized",
    "blockchain",
    "network",
    "chain",
    "logic",
    "decentralized",
    "also",
    "need",
    "chain",
    "data",
    "computation",
    "decentralized",
    "combining",
    "chain",
    "decentralized",
    "logic",
    "chain",
    "decentralized",
    "data",
    "decentralized",
    "computation",
    "gives",
    "rise",
    "something",
    "called",
    "hybrid",
    "smart",
    "contracts",
    "biggest",
    "protocols",
    "interact",
    "today",
    "type",
    "hybrid",
    "smart",
    "contract",
    "interact",
    "hybrid",
    "smart",
    "contracts",
    "extent",
    "protocol",
    "chaining",
    "comes",
    "play",
    "modular",
    "decentralized",
    "oracle",
    "network",
    "bring",
    "external",
    "data",
    "external",
    "computation",
    "smart",
    "contracts",
    "make",
    "sure",
    "decentralized",
    "end",
    "end",
    "giving",
    "feature",
    "richness",
    "need",
    "agreements",
    "chainlink",
    "allows",
    "us",
    "get",
    "data",
    "upkeeps",
    "get",
    "random",
    "numbers",
    "really",
    "customize",
    "smart",
    "contracts",
    "meaningful",
    "way",
    "throughout",
    "course",
    "going",
    "use",
    "terminology",
    "smart",
    "contract",
    "however",
    "whenever",
    "say",
    "smart",
    "contract",
    "often",
    "using",
    "little",
    "interchangeably",
    "hybrid",
    "smart",
    "contracts",
    "know",
    "say",
    "hybrid",
    "smart",
    "contract",
    "talking",
    "specifically",
    "smart",
    "contracts",
    "type",
    "chain",
    "component",
    "since",
    "theorems",
    "release",
    "number",
    "different",
    "block",
    "chains",
    "smart",
    "contract",
    "platforms",
    "come",
    "light",
    "avalanche",
    "polygon",
    "phantom",
    "harmony",
    "majority",
    "course",
    "going",
    "assuming",
    "going",
    "deploying",
    "ethereum",
    "network",
    "however",
    "everything",
    "learned",
    "going",
    "applicable",
    "vast",
    "majority",
    "blockchains",
    "like",
    "polygon",
    "avalanche",
    "phantom",
    "harmony",
    "etc",
    "understanding",
    "everything",
    "theory",
    "funding",
    "mentals",
    "give",
    "skills",
    "need",
    "switch",
    "chains",
    "easily",
    "literally",
    "one",
    "line",
    "code",
    "worry",
    "learning",
    "specific",
    "tool",
    "specific",
    "chain",
    "work",
    "together",
    "seamlessly",
    "couple",
    "smart",
    "contract",
    "platforms",
    "use",
    "solidity",
    "still",
    "learning",
    "fundamentals",
    "make",
    "much",
    "better",
    "well",
    "etherium",
    "far",
    "value",
    "locked",
    "used",
    "blockchain",
    "smart",
    "contract",
    "platform",
    "also",
    "hear",
    "two",
    "terms",
    "used",
    "little",
    "bit",
    "interchangeably",
    "well",
    "sometimes",
    "say",
    "smart",
    "contract",
    "platform",
    "sometimes",
    "say",
    "blockchain",
    "kind",
    "mean",
    "thing",
    "obviously",
    "blockchains",
    "could",
    "mean",
    "store",
    "value",
    "smart",
    "contract",
    "platform",
    "get",
    "idea",
    "similarly",
    "chainlink",
    "popular",
    "powerful",
    "decentralized",
    "oracle",
    "network",
    "one",
    "going",
    "focusing",
    "course",
    "well",
    "chainlink",
    "also",
    "blockchain",
    "agnostic",
    "work",
    "aetherium",
    "avalanche",
    "polygon",
    "solana",
    "terra",
    "really",
    "blockchain",
    "throughout",
    "course",
    "hear",
    "term",
    "dap",
    "decentralized",
    "protocol",
    "smart",
    "contract",
    "protocol",
    "decentralized",
    "application",
    "kind",
    "mean",
    "thing",
    "decentralized",
    "application",
    "usually",
    "combination",
    "many",
    "smart",
    "contracts",
    "get",
    "solidity",
    "see",
    "singular",
    "smart",
    "contract",
    "really",
    "looks",
    "like",
    "like",
    "said",
    "learning",
    "core",
    "fundamentals",
    "make",
    "better",
    "solidity",
    "better",
    "smart",
    "contract",
    "developer",
    "also",
    "hear",
    "term",
    "web",
    "three",
    "lot",
    "video",
    "industry",
    "web",
    "three",
    "idea",
    "blockchain",
    "smart",
    "contracts",
    "next",
    "iteration",
    "web",
    "web",
    "one",
    "permissionless",
    "open",
    "source",
    "world",
    "static",
    "content",
    "web",
    "two",
    "permissioned",
    "web",
    "dynamic",
    "content",
    "agreements",
    "logic",
    "runs",
    "centralized",
    "servers",
    "control",
    "information",
    "web",
    "three",
    "comes",
    "back",
    "permissionless",
    "web",
    "dynamic",
    "content",
    "instead",
    "centralized",
    "servers",
    "running",
    "logic",
    "decentralized",
    "networks",
    "run",
    "logic",
    "creating",
    "censorship",
    "resistant",
    "agreements",
    "smart",
    "contracts",
    "enable",
    "also",
    "generally",
    "accompanied",
    "idea",
    "users",
    "protocols",
    "work",
    "ownership",
    "economy",
    "see",
    "mean",
    "later",
    "course",
    "talked",
    "lot",
    "history",
    "high",
    "level",
    "protocols",
    "smart",
    "contracts",
    "smart",
    "contracts",
    "really",
    "mean",
    "say",
    "trust",
    "minimize",
    "agreements",
    "unbreakable",
    "promises",
    "real",
    "value",
    "add",
    "smart",
    "contracts",
    "look",
    "hood",
    "take",
    "peek",
    "works",
    "technical",
    "standpoint",
    "let",
    "learn",
    "value",
    "purpose",
    "us",
    "building",
    "technologies",
    "taken",
    "course",
    "problem",
    "technology",
    "solve",
    "mind",
    "technology",
    "really",
    "good",
    "problem",
    "solves",
    "solve",
    "problem",
    "bother",
    "mark",
    "contracts",
    "blockchain",
    "web",
    "three",
    "cryptocurrencies",
    "different",
    "words",
    "encapsulate",
    "idea",
    "unique",
    "paradigm",
    "think",
    "easiest",
    "way",
    "sum",
    "smart",
    "contracts",
    "create",
    "trust",
    "minimized",
    "agreements",
    "might",
    "scratching",
    "head",
    "much",
    "easier",
    "way",
    "think",
    "give",
    "rise",
    "unbreakable",
    "promises",
    "yes",
    "heard",
    "right",
    "unbreakable",
    "agreements",
    "promises",
    "additionally",
    "give",
    "rise",
    "speed",
    "efficiency",
    "transparency",
    "number",
    "things",
    "made",
    "video",
    "pretty",
    "recently",
    "exactly",
    "let",
    "dive",
    "take",
    "listen",
    "purpose",
    "undeniable",
    "value",
    "smart",
    "contracts",
    "cryptocurrencies",
    "fundamentally",
    "landscape",
    "markets",
    "agreements",
    "know",
    "unfortunately",
    "probably",
    "bombarded",
    "people",
    "screaming",
    "empties",
    "money",
    "memes",
    "fun",
    "let",
    "forget",
    "bullet",
    "get",
    "essence",
    "space",
    "already",
    "web",
    "three",
    "video",
    "send",
    "friends",
    "explain",
    "excited",
    "space",
    "explain",
    "crypto",
    "come",
    "right",
    "place",
    "yes",
    "fun",
    "memes",
    "markets",
    "money",
    "stuff",
    "things",
    "outside",
    "purpose",
    "blockchains",
    "relates",
    "age",
    "old",
    "elementary",
    "school",
    "unbreakable",
    "promise",
    "pinky",
    "swear",
    "let",
    "get",
    "froggy",
    "nearly",
    "everything",
    "life",
    "result",
    "agreement",
    "contract",
    "chair",
    "result",
    "agreement",
    "buy",
    "sell",
    "lumber",
    "assemble",
    "sell",
    "chair",
    "real",
    "tailor",
    "amazon",
    "made",
    "agreement",
    "buy",
    "chair",
    "40",
    "lights",
    "house",
    "powered",
    "electricity",
    "agreement",
    "electric",
    "company",
    "agree",
    "pay",
    "return",
    "keep",
    "lights",
    "electricity",
    "generate",
    "agreements",
    "engineers",
    "built",
    "turbines",
    "generate",
    "electricity",
    "insurance",
    "agree",
    "pay",
    "amount",
    "money",
    "every",
    "month",
    "return",
    "nothing",
    "mean",
    "cover",
    "medical",
    "bills",
    "almost",
    "everything",
    "everything",
    "interact",
    "result",
    "form",
    "agreement",
    "contract",
    "aspect",
    "agreements",
    "contracts",
    "feel",
    "kind",
    "abstract",
    "boring",
    "really",
    "grasp",
    "simplify",
    "also",
    "refer",
    "promises",
    "get",
    "oil",
    "change",
    "promising",
    "faithfully",
    "change",
    "oil",
    "exchange",
    "money",
    "put",
    "money",
    "bank",
    "promise",
    "keep",
    "safe",
    "exchange",
    "use",
    "money",
    "give",
    "loans",
    "buy",
    "lottery",
    "ticket",
    "lottery",
    "promises",
    "give",
    "fair",
    "chance",
    "winning",
    "ton",
    "money",
    "exchange",
    "buying",
    "ticket",
    "whenever",
    "make",
    "one",
    "agreements",
    "way",
    "asking",
    "pinky",
    "swear",
    "screw",
    "treat",
    "fairly",
    "always",
    "happen",
    "let",
    "look",
    "real",
    "world",
    "example",
    "someone",
    "breaking",
    "pinkie",
    "swear",
    "back",
    "80s",
    "90s",
    "mcdonald",
    "ran",
    "promotion",
    "people",
    "win",
    "money",
    "collecting",
    "mcdonald",
    "monopoly",
    "game",
    "cards",
    "idea",
    "simple",
    "buy",
    "mcdonald",
    "return",
    "get",
    "chance",
    "win",
    "1",
    "million",
    "imagine",
    "mcdonald",
    "literally",
    "going",
    "hey",
    "everybody",
    "promise",
    "buy",
    "mc",
    "food",
    "mcnuggets",
    "give",
    "fair",
    "chance",
    "winning",
    "money",
    "ended",
    "breaking",
    "promise",
    "instead",
    "fair",
    "chance",
    "winning",
    "chance",
    "fact",
    "zero",
    "mid",
    "90s",
    "13",
    "24",
    "million",
    "went",
    "pockets",
    "people",
    "playing",
    "game",
    "honestly",
    "group",
    "corrupt",
    "insiders",
    "rigged",
    "game",
    "meaning",
    "played",
    "mcdonald",
    "monopoly",
    "game",
    "buying",
    "set",
    "lies",
    "promises",
    "100",
    "always",
    "going",
    "broken",
    "thing",
    "really",
    "matter",
    "mcdonald",
    "fault",
    "ones",
    "making",
    "promises",
    "ultimately",
    "could",
    "keep",
    "another",
    "way",
    "could",
    "think",
    "24",
    "million",
    "essentially",
    "stole",
    "system",
    "deployed",
    "blockchain",
    "something",
    "called",
    "smart",
    "contract",
    "would",
    "impossible",
    "defraud",
    "24",
    "million",
    "due",
    "smart",
    "contracts",
    "immutable",
    "decentralized",
    "transparent",
    "get",
    "back",
    "minute",
    "agreements",
    "contracts",
    "make",
    "imagine",
    "making",
    "pinky",
    "swear",
    "10",
    "year",
    "old",
    "imagining",
    "agreement",
    "would",
    "hold",
    "hey",
    "buddy",
    "could",
    "could",
    "please",
    "keep",
    "money",
    "safe",
    "play",
    "like",
    "please",
    "come",
    "back",
    "immediately",
    "might",
    "get",
    "worrying",
    "feeling",
    "chest",
    "something",
    "might",
    "go",
    "wrong",
    "10",
    "year",
    "old",
    "might",
    "lose",
    "money",
    "might",
    "thinking",
    "could",
    "trust",
    "break",
    "promise",
    "feeling",
    "ca",
    "breathe",
    "untrustworthy",
    "situations",
    "happens",
    "time",
    "trust",
    "used",
    "car",
    "salesperson",
    "give",
    "good",
    "car",
    "trust",
    "tag",
    "says",
    "machine",
    "washable",
    "make",
    "shirt",
    "shrink",
    "insurance",
    "provider",
    "break",
    "promise",
    "covering",
    "medical",
    "bills",
    "want",
    "get",
    "hit",
    "bus",
    "patrick",
    "promises",
    "go",
    "hike",
    "well",
    "actually",
    "actually",
    "issue",
    "current",
    "agreements",
    "contracts",
    "trust",
    "people",
    "making",
    "right",
    "thing",
    "however",
    "often",
    "actually",
    "incentivized",
    "right",
    "thing",
    "insurance",
    "want",
    "pay",
    "money",
    "sometimes",
    "salespeople",
    "want",
    "get",
    "shit",
    "shelves",
    "girlfriend",
    "promised",
    "go",
    "hike",
    "need",
    "hikes",
    "else",
    "happened",
    "might",
    "thinking",
    "okay",
    "patrick",
    "seems",
    "cool",
    "like",
    "actually",
    "affected",
    "well",
    "mcdonald",
    "lottery",
    "spoke",
    "great",
    "depression",
    "run",
    "banks",
    "banks",
    "promised",
    "keep",
    "money",
    "safe",
    "went",
    "back",
    "go",
    "get",
    "would",
    "actually",
    "money",
    "well",
    "behold",
    "times",
    "money",
    "last",
    "year",
    "robin",
    "hood",
    "painted",
    "amazing",
    "picture",
    "user",
    "application",
    "give",
    "access",
    "markets",
    "promise",
    "give",
    "retail",
    "investor",
    "fair",
    "chance",
    "interacting",
    "world",
    "finance",
    "side",
    "asset",
    "asset",
    "asset",
    "asset",
    "2008",
    "financial",
    "crisis",
    "remember",
    "shady",
    "deals",
    "behind",
    "closed",
    "doors",
    "combined",
    "lies",
    "financial",
    "product",
    "brought",
    "world",
    "economic",
    "knees",
    "hyperinflation",
    "zimbabwe",
    "hyperinflation",
    "brazil",
    "fair",
    "enough",
    "us",
    "history",
    "relentless",
    "lesson",
    "trustworthy",
    "entities",
    "notorious",
    "promised",
    "breakers",
    "finally",
    "way",
    "fix",
    "smart",
    "contracts",
    "jump",
    "smart",
    "contracts",
    "lot",
    "people",
    "might",
    "thinking",
    "hey",
    "cool",
    "however",
    "systems",
    "place",
    "protect",
    "lot",
    "things",
    "true",
    "great",
    "helpful",
    "step",
    "forward",
    "systems",
    "often",
    "breaks",
    "ones",
    "2008",
    "definitely",
    "work",
    "ones",
    "robin",
    "hood",
    "crisis",
    "definitely",
    "work",
    "even",
    "systems",
    "apply",
    "go",
    "court",
    "try",
    "work",
    "maybe",
    "court",
    "years",
    "actually",
    "see",
    "resolution",
    "time",
    "needed",
    "money",
    "longer",
    "technology",
    "tool",
    "fix",
    "fundamental",
    "problem",
    "agreements",
    "today",
    "tool",
    "smart",
    "contracts",
    "tool",
    "blockchain",
    "built",
    "gon",
    "na",
    "give",
    "quick",
    "overview",
    "smart",
    "contract",
    "however",
    "leaving",
    "links",
    "description",
    "depth",
    "explanations",
    "basics",
    "smart",
    "contract",
    "agreement",
    "contract",
    "set",
    "instructions",
    "deployed",
    "decentralized",
    "blockchain",
    "contract",
    "set",
    "instructions",
    "deployed",
    "altered",
    "automatically",
    "executes",
    "everyone",
    "see",
    "terms",
    "agreement",
    "real",
    "basics",
    "code",
    "executed",
    "decentralized",
    "collective",
    "like",
    "group",
    "people",
    "group",
    "people",
    "running",
    "certain",
    "software",
    "means",
    "one",
    "person",
    "entity",
    "actually",
    "alter",
    "agreements",
    "change",
    "terms",
    "arrangement",
    "traditional",
    "agreements",
    "whoever",
    "owns",
    "contract",
    "whoever",
    "owns",
    "execution",
    "contract",
    "flip",
    "switch",
    "say",
    "going",
    "anymore",
    "smart",
    "contracts",
    "web",
    "three",
    "blockchain",
    "longer",
    "typically",
    "smart",
    "contracts",
    "decentralized",
    "blockchain",
    "used",
    "combination",
    "decentralized",
    "oracle",
    "network",
    "get",
    "real",
    "world",
    "assets",
    "information",
    "words",
    "sound",
    "like",
    "conjuring",
    "magic",
    "spell",
    "well",
    "check",
    "links",
    "description",
    "want",
    "learn",
    "technical",
    "implications",
    "technical",
    "person",
    "interested",
    "getting",
    "nitty",
    "gritty",
    "kind",
    "think",
    "like",
    "https",
    "bet",
    "vast",
    "majority",
    "even",
    "know",
    "https",
    "stands",
    "yet",
    "use",
    "every",
    "single",
    "day",
    "whenever",
    "log",
    "internet",
    "fix",
    "mcdonald",
    "monopoly",
    "issue",
    "traditional",
    "form",
    "lottery",
    "executed",
    "behind",
    "closed",
    "doors",
    "somebody",
    "operated",
    "owned",
    "code",
    "contracts",
    "agreements",
    "ran",
    "lottery",
    "power",
    "alter",
    "nobody",
    "people",
    "internal",
    "lottery",
    "could",
    "audit",
    "altering",
    "happening",
    "code",
    "lottery",
    "deployed",
    "onto",
    "blockchain",
    "every",
    "time",
    "hacker",
    "attempted",
    "alter",
    "everyone",
    "would",
    "notified",
    "could",
    "even",
    "alter",
    "terms",
    "smart",
    "contract",
    "altered",
    "deployed",
    "combine",
    "smart",
    "contract",
    "chain",
    "link",
    "vrf",
    "oracle",
    "get",
    "verifiably",
    "random",
    "number",
    "presto",
    "perfectly",
    "decentralized",
    "unalterable",
    "agreement",
    "impossible",
    "hack",
    "commit",
    "fraud",
    "manipulate",
    "saved",
    "public",
    "4",
    "million",
    "fixing",
    "issue",
    "trust",
    "fix",
    "robin",
    "hood",
    "well",
    "problem",
    "robin",
    "hood",
    "already",
    "fixed",
    "right",
    "problem",
    "centralized",
    "body",
    "flip",
    "switch",
    "time",
    "say",
    "ca",
    "access",
    "markets",
    "anymore",
    "breaking",
    "promise",
    "actually",
    "giving",
    "access",
    "markets",
    "already",
    "fixed",
    "something",
    "called",
    "decentralized",
    "exchanges",
    "exist",
    "today",
    "one",
    "exchanges",
    "one",
    "called",
    "uniswap",
    "swap",
    "erc",
    "20",
    "tokens",
    "kind",
    "equivalent",
    "stocks",
    "little",
    "confusing",
    "wo",
    "get",
    "either",
    "centralized",
    "body",
    "flip",
    "switch",
    "ruin",
    "access",
    "markets",
    "investors",
    "decentralized",
    "exchange",
    "would",
    "saved",
    "hundreds",
    "millions",
    "dollars",
    "would",
    "prevented",
    "fraudulent",
    "market",
    "manipulation",
    "fix",
    "run",
    "banks",
    "transparency",
    "built",
    "automated",
    "solvency",
    "checks",
    "build",
    "bank",
    "like",
    "smart",
    "contract",
    "insolvency",
    "checks",
    "built",
    "make",
    "impossible",
    "get",
    "solve",
    "means",
    "brokers",
    "agreement",
    "history",
    "lesson",
    "trust",
    "assumption",
    "broken",
    "smart",
    "contracts",
    "applied",
    "applied",
    "especially",
    "time",
    "big",
    "money",
    "runs",
    "owns",
    "controls",
    "everything",
    "desperately",
    "need",
    "move",
    "world",
    "self",
    "interested",
    "centralized",
    "entity",
    "ca",
    "flip",
    "switch",
    "ruin",
    "people",
    "access",
    "services",
    "need",
    "move",
    "away",
    "world",
    "brand",
    "based",
    "world",
    "math",
    "based",
    "right",
    "interact",
    "service",
    "like",
    "break",
    "promise",
    "thing",
    "walk",
    "street",
    "next",
    "service",
    "going",
    "make",
    "set",
    "promises",
    "hope",
    "pray",
    "actually",
    "going",
    "keep",
    "move",
    "world",
    "look",
    "map",
    "say",
    "oh",
    "okay",
    "one",
    "plus",
    "one",
    "equals",
    "two",
    "agreement",
    "going",
    "every",
    "single",
    "time",
    "guaranteed",
    "decentralized",
    "autonomous",
    "agent",
    "incentive",
    "evil",
    "everything",
    "transparent",
    "open",
    "big",
    "company",
    "better",
    "one",
    "plus",
    "one",
    "equal",
    "three",
    "maybe",
    "would",
    "go",
    "behind",
    "closed",
    "doors",
    "flood",
    "numbers",
    "come",
    "back",
    "like",
    "hey",
    "one",
    "plus",
    "one",
    "equals",
    "three",
    "smart",
    "contracts",
    "impossible",
    "right",
    "thing",
    "infrastructural",
    "given",
    "choice",
    "two",
    "agreements",
    "one",
    "trust",
    "single",
    "centralized",
    "entity",
    "going",
    "right",
    "thing",
    "versus",
    "decentralized",
    "untampered",
    "double",
    "collective",
    "one",
    "gon",
    "na",
    "choose",
    "picking",
    "one",
    "ca",
    "screw",
    "every",
    "single",
    "time",
    "every",
    "agreement",
    "apply",
    "technology",
    "relatively",
    "new",
    "already",
    "seen",
    "relandscaping",
    "entire",
    "markets",
    "continue",
    "traditional",
    "financial",
    "world",
    "already",
    "getting",
    "lunch",
    "eaten",
    "defy",
    "decentralized",
    "finance",
    "already",
    "200",
    "billion",
    "people",
    "money",
    "protocols",
    "help",
    "fair",
    "accountable",
    "transparent",
    "financial",
    "system",
    "defy",
    "movement",
    "one",
    "main",
    "reasons",
    "got",
    "space",
    "desperately",
    "need",
    "move",
    "away",
    "right",
    "people",
    "chances",
    "wealth",
    "sucked",
    "group",
    "bending",
    "rules",
    "favor",
    "smart",
    "contracts",
    "ticket",
    "better",
    "world",
    "industries",
    "also",
    "coming",
    "smart",
    "contracts",
    "blockchain",
    "innovations",
    "advantages",
    "grow",
    "get",
    "better",
    "get",
    "closer",
    "vision",
    "concept",
    "fulfilled",
    "trust",
    "minimized",
    "agreements",
    "smart",
    "contracts",
    "minimizing",
    "trust",
    "need",
    "give",
    "people",
    "order",
    "agreements",
    "executed",
    "trust",
    "minimized",
    "agreements",
    "confusing",
    "say",
    "unbreakable",
    "promises",
    "got",
    "ta",
    "honest",
    "guys",
    "blockchains",
    "smart",
    "contracts",
    "cryptocurrencies",
    "actually",
    "trust",
    "minimize",
    "agreements",
    "security",
    "benefits",
    "uptime",
    "benefits",
    "execution",
    "speed",
    "benefits",
    "whole",
    "lot",
    "lot",
    "easier",
    "learn",
    "one",
    "learn",
    "ones",
    "later",
    "right",
    "kind",
    "like",
    "sprinkles",
    "top",
    "building",
    "future",
    "excited",
    "even",
    "introduction",
    "part",
    "learned",
    "ton",
    "let",
    "quick",
    "summary",
    "learned",
    "far",
    "bitcoin",
    "first",
    "protocol",
    "take",
    "blockchain",
    "technology",
    "limelight",
    "take",
    "cryptocurrencies",
    "mainstream",
    "bitcoin",
    "sort",
    "digital",
    "gold",
    "store",
    "value",
    "able",
    "make",
    "transactions",
    "users",
    "decentralized",
    "manner",
    "aetherium",
    "smart",
    "contract",
    "platforms",
    "take",
    "blockchain",
    "technology",
    "one",
    "step",
    "enabling",
    "people",
    "make",
    "smart",
    "contracts",
    "decentralized",
    "trust",
    "minimized",
    "agreements",
    "smart",
    "contracts",
    "decentralized",
    "applications",
    "access",
    "interact",
    "real",
    "world",
    "using",
    "something",
    "called",
    "decentralized",
    "oracle",
    "networks",
    "chain",
    "link",
    "decentralized",
    "network",
    "allows",
    "us",
    "build",
    "hybrid",
    "smart",
    "contracts",
    "combines",
    "chain",
    "logic",
    "chain",
    "decentralized",
    "data",
    "decentralized",
    "computation",
    "giving",
    "rise",
    "logic",
    "completely",
    "decentralized",
    "data",
    "external",
    "computation",
    "completely",
    "decentralized",
    "giving",
    "us",
    "features",
    "traditional",
    "agreements",
    "traditional",
    "contracts",
    "digital",
    "currencies",
    "like",
    "aetherium",
    "bitcoin",
    "value",
    "even",
    "without",
    "smart",
    "contract",
    "part",
    "censorship",
    "resistant",
    "decentralized",
    "store",
    "value",
    "naturally",
    "powerful",
    "right",
    "links",
    "github",
    "repository",
    "teach",
    "decentralized",
    "store",
    "value",
    "flips",
    "traditional",
    "finance",
    "head",
    "another",
    "one",
    "great",
    "reasons",
    "building",
    "smart",
    "contracts",
    "easiest",
    "way",
    "boil",
    "trust",
    "minimized",
    "agreements",
    "unbreakable",
    "promises",
    "let",
    "also",
    "go",
    "features",
    "smart",
    "contracts",
    "traditional",
    "environment",
    "first",
    "feature",
    "course",
    "decentralized",
    "centralized",
    "intermediary",
    "different",
    "individuals",
    "run",
    "one",
    "blockchains",
    "known",
    "node",
    "operators",
    "combination",
    "1000s",
    "node",
    "operators",
    "running",
    "software",
    "running",
    "algorithms",
    "running",
    "smart",
    "contracts",
    "make",
    "network",
    "decentralized",
    "dive",
    "deeper",
    "works",
    "later",
    "next",
    "feature",
    "transparency",
    "flexibility",
    "decentralized",
    "networks",
    "since",
    "individual",
    "node",
    "operators",
    "run",
    "software",
    "everybody",
    "see",
    "everything",
    "happening",
    "chain",
    "meaning",
    "shady",
    "deals",
    "weird",
    "things",
    "happening",
    "anything",
    "going",
    "unfair",
    "people",
    "able",
    "see",
    "use",
    "everybody",
    "perfect",
    "information",
    "play",
    "rules",
    "additionally",
    "mean",
    "privacy",
    "blockchain",
    "pseudo",
    "anonymous",
    "meaning",
    "necessarily",
    "tied",
    "identity",
    "real",
    "life",
    "also",
    "feature",
    "speed",
    "efficiency",
    "ever",
    "tried",
    "bank",
    "transfer",
    "send",
    "money",
    "across",
    "seas",
    "know",
    "sometimes",
    "take",
    "two",
    "three",
    "weeks",
    "fact",
    "banks",
    "really",
    "basic",
    "math",
    "subtracting",
    "money",
    "balance",
    "adding",
    "balance",
    "take",
    "long",
    "blockchain",
    "transactions",
    "happen",
    "instantly",
    "another",
    "instance",
    "financial",
    "world",
    "today",
    "know",
    "clearing",
    "houses",
    "settlement",
    "days",
    "take",
    "long",
    "time",
    "blockchain",
    "need",
    "happen",
    "instantly",
    "obviously",
    "much",
    "quicker",
    "also",
    "makes",
    "much",
    "efficient",
    "interactions",
    "security",
    "immutability",
    "immutable",
    "means",
    "ca",
    "changed",
    "smart",
    "contract",
    "deployed",
    "whatever",
    "code",
    "going",
    "code",
    "forever",
    "altered",
    "tampered",
    "way",
    "means",
    "security",
    "much",
    "easier",
    "whereas",
    "centralized",
    "world",
    "somebody",
    "hack",
    "server",
    "jump",
    "database",
    "change",
    "numbers",
    "ca",
    "blockchain",
    "world",
    "since",
    "decentralized",
    "order",
    "hack",
    "blockchain",
    "take",
    "half",
    "nodes",
    "opposed",
    "centralized",
    "world",
    "take",
    "one",
    "regular",
    "world",
    "computer",
    "backup",
    "computer",
    "go",
    "data",
    "gone",
    "blockchain",
    "world",
    "computer",
    "backup",
    "computer",
    "go",
    "data",
    "safe",
    "run",
    "decentralized",
    "nodes",
    "even",
    "100",
    "nodes",
    "1000",
    "nodes",
    "go",
    "matter",
    "long",
    "one",
    "node",
    "copy",
    "blockchain",
    "good",
    "go",
    "hacking",
    "blockchain",
    "nearly",
    "impossible",
    "leaps",
    "bounds",
    "difficult",
    "hacking",
    "centralized",
    "server",
    "safer",
    "asset",
    "sense",
    "well",
    "need",
    "access",
    "credentials",
    "information",
    "assets",
    "private",
    "key",
    "basically",
    "password",
    "discussed",
    "video",
    "smart",
    "contracts",
    "remove",
    "counterparty",
    "risk",
    "remove",
    "centralized",
    "intermediary",
    "remove",
    "trust",
    "gateways",
    "web",
    "two",
    "engage",
    "users",
    "individuals",
    "always",
    "best",
    "interests",
    "heart",
    "smart",
    "contracts",
    "remove",
    "counterparty",
    "risk",
    "one",
    "contracts",
    "created",
    "ca",
    "go",
    "ca",
    "alter",
    "ca",
    "let",
    "greed",
    "ego",
    "anything",
    "else",
    "get",
    "better",
    "alter",
    "terms",
    "deal",
    "said",
    "gives",
    "rise",
    "trust",
    "minimized",
    "agreements",
    "programmatic",
    "unbreakable",
    "promises",
    "move",
    "away",
    "brand",
    "based",
    "agreements",
    "math",
    "based",
    "agreements",
    "look",
    "cryptography",
    "look",
    "right",
    "code",
    "see",
    "exactly",
    "something",
    "going",
    "going",
    "execute",
    "versus",
    "rely",
    "human",
    "right",
    "thing",
    "smart",
    "contracts",
    "decentralized",
    "hybrid",
    "smart",
    "contracts",
    "right",
    "thing",
    "infrastructural",
    "pieces",
    "boil",
    "us",
    "freedom",
    "interact",
    "way",
    "want",
    "interact",
    "without",
    "afraid",
    "interacting",
    "like",
    "going",
    "screw",
    "us",
    "trust",
    "minimized",
    "piece",
    "unbreakable",
    "promises",
    "make",
    "interactions",
    "much",
    "better",
    "purely",
    "web",
    "two",
    "world",
    "constantly",
    "bombarded",
    "messages",
    "projects",
    "protocols",
    "pushing",
    "us",
    "move",
    "act",
    "direction",
    "makes",
    "profitable",
    "versus",
    "smart",
    "contract",
    "space",
    "see",
    "everything",
    "transparently",
    "even",
    "engage",
    "interact",
    "partially",
    "owners",
    "protocols",
    "interactions",
    "decide",
    "want",
    "part",
    "smart",
    "contracts",
    "around",
    "years",
    "generate",
    "industries",
    "come",
    "due",
    "smart",
    "contract",
    "platforms",
    "around",
    "well",
    "probably",
    "heard",
    "already",
    "mentioned",
    "let",
    "give",
    "quick",
    "refresher",
    "phi",
    "phi",
    "stands",
    "decentralized",
    "finance",
    "gives",
    "users",
    "ability",
    "engage",
    "finance",
    "markets",
    "without",
    "go",
    "centralized",
    "intermediary",
    "example",
    "like",
    "said",
    "robin",
    "hood",
    "longer",
    "trust",
    "robin",
    "hood",
    "would",
    "continue",
    "give",
    "access",
    "markets",
    "instead",
    "would",
    "able",
    "see",
    "smart",
    "contract",
    "yes",
    "access",
    "markets",
    "2008",
    "financial",
    "crisis",
    "never",
    "trust",
    "groups",
    "institutions",
    "giving",
    "correct",
    "things",
    "back",
    "end",
    "see",
    "everything",
    "transparently",
    "right",
    "blockchain",
    "engage",
    "things",
    "like",
    "money",
    "markets",
    "sophisticated",
    "financial",
    "products",
    "easy",
    "effectively",
    "securely",
    "time",
    "recording",
    "defi",
    "around",
    "200",
    "billion",
    "assets",
    "management",
    "quickly",
    "growing",
    "really",
    "excited",
    "defy",
    "ton",
    "defy",
    "examples",
    "showing",
    "build",
    "interact",
    "protocols",
    "coming",
    "lessons",
    "dows",
    "decentralized",
    "autonomous",
    "organizations",
    "another",
    "group",
    "already",
    "mentioned",
    "dows",
    "groups",
    "governed",
    "completely",
    "decentralized",
    "set",
    "instructions",
    "smart",
    "contracts",
    "chain",
    "massive",
    "benefits",
    "engagement",
    "much",
    "easier",
    "rules",
    "black",
    "white",
    "see",
    "everything",
    "directly",
    "chain",
    "voting",
    "governance",
    "technologies",
    "completely",
    "decentralized",
    "blockchain",
    "space",
    "one",
    "big",
    "ones",
    "pushing",
    "evolve",
    "politics",
    "evolve",
    "governance",
    "make",
    "efficient",
    "fair",
    "reasonable",
    "better",
    "know",
    "examples",
    "build",
    "dows",
    "work",
    "dows",
    "incoming",
    "lessons",
    "sure",
    "watch",
    "nf",
    "stanford",
    "non",
    "fungible",
    "tokens",
    "really",
    "kind",
    "described",
    "digital",
    "art",
    "unique",
    "asset",
    "much",
    "keep",
    "high",
    "level",
    "projects",
    "like",
    "board",
    "apes",
    "crypto",
    "punks",
    "revolutionized",
    "way",
    "people",
    "get",
    "paid",
    "work",
    "show",
    "creativity",
    "status",
    "much",
    "yes",
    "course",
    "lessons",
    "showing",
    "create",
    "interact",
    "nf",
    "well",
    "many",
    "groups",
    "many",
    "industries",
    "created",
    "result",
    "insane",
    "technology",
    "maybe",
    "finishing",
    "journey",
    "us",
    "go",
    "one",
    "pioneer",
    "next",
    "industry",
    "next",
    "billion",
    "dollar",
    "idea",
    "learned",
    "much",
    "already",
    "learned",
    "lot",
    "high",
    "level",
    "information",
    "let",
    "finally",
    "jump",
    "let",
    "make",
    "first",
    "transaction",
    "let",
    "get",
    "set",
    "interact",
    "new",
    "world",
    "next",
    "section",
    "going",
    "get",
    "wallet",
    "going",
    "show",
    "exactly",
    "transaction",
    "looks",
    "like",
    "feels",
    "like",
    "let",
    "dive",
    "aetherium",
    "website",
    "going",
    "make",
    "transaction",
    "test",
    "aetherium",
    "blockchain",
    "explain",
    "means",
    "little",
    "bit",
    "going",
    "first",
    "transaction",
    "made",
    "blockchain",
    "process",
    "going",
    "follow",
    "going",
    "work",
    "exact",
    "polygon",
    "avalanche",
    "phantom",
    "evm",
    "compatible",
    "blockchains",
    "explain",
    "means",
    "bit",
    "follow",
    "along",
    "fun",
    "order",
    "make",
    "transaction",
    "blockchains",
    "first",
    "thing",
    "need",
    "need",
    "set",
    "wallet",
    "gon",
    "na",
    "go",
    "ahead",
    "go",
    "meta",
    "mask",
    "one",
    "popular",
    "wallets",
    "one",
    "easiest",
    "use",
    "going",
    "go",
    "ahead",
    "download",
    "using",
    "brave",
    "browser",
    "works",
    "chrome",
    "firefox",
    "really",
    "browsers",
    "going",
    "little",
    "extension",
    "top",
    "right",
    "hand",
    "browser",
    "way",
    "really",
    "easily",
    "see",
    "times",
    "wallet",
    "still",
    "aetherium",
    "based",
    "currencies",
    "gon",
    "na",
    "go",
    "ahead",
    "install",
    "meta",
    "mask",
    "brave",
    "add",
    "brave",
    "add",
    "extension",
    "go",
    "ahead",
    "get",
    "started",
    "working",
    "brave",
    "first",
    "step",
    "absolutely",
    "need",
    "take",
    "starting",
    "journey",
    "one",
    "easiest",
    "steps",
    "take",
    "gon",
    "na",
    "go",
    "ahead",
    "get",
    "started",
    "going",
    "create",
    "brand",
    "new",
    "wallet",
    "gon",
    "na",
    "go",
    "ahead",
    "hit",
    "create",
    "wallet",
    "already",
    "wallet",
    "actually",
    "import",
    "via",
    "seed",
    "phrase",
    "talk",
    "seed",
    "phrase",
    "secret",
    "phrase",
    "little",
    "bit",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "wallet",
    "sure",
    "agree",
    "help",
    "metamask",
    "create",
    "password",
    "make",
    "sure",
    "really",
    "secure",
    "purpose",
    "demo",
    "passwords",
    "gon",
    "na",
    "password",
    "please",
    "password",
    "may",
    "also",
    "get",
    "video",
    "like",
    "teaching",
    "secret",
    "recovery",
    "phrase",
    "thing",
    "pneumonic",
    "see",
    "recovery",
    "phrase",
    "lot",
    "clear",
    "give",
    "us",
    "ton",
    "different",
    "tips",
    "actually",
    "store",
    "keep",
    "safe",
    "main",
    "takeaway",
    "never",
    "shared",
    "absolutely",
    "never",
    "shared",
    "going",
    "go",
    "ahead",
    "click",
    "reveal",
    "secret",
    "words",
    "showing",
    "guys",
    "demo",
    "really",
    "care",
    "however",
    "show",
    "secret",
    "phrase",
    "anybody",
    "else",
    "access",
    "funds",
    "application",
    "everything",
    "going",
    "tutorial",
    "going",
    "use",
    "fake",
    "money",
    "going",
    "use",
    "real",
    "money",
    "matter",
    "purposes",
    "testing",
    "developing",
    "always",
    "recommend",
    "using",
    "completely",
    "separate",
    "meta",
    "mask",
    "completely",
    "separate",
    "wallet",
    "going",
    "throughout",
    "entire",
    "course",
    "already",
    "wallet",
    "already",
    "meta",
    "mask",
    "please",
    "set",
    "new",
    "one",
    "create",
    "new",
    "profile",
    "create",
    "new",
    "meta",
    "mask",
    "wallet",
    "use",
    "duration",
    "course",
    "however",
    "going",
    "actually",
    "put",
    "money",
    "absolutely",
    "need",
    "written",
    "lose",
    "access",
    "private",
    "keys",
    "talk",
    "little",
    "bit",
    "lose",
    "access",
    "wallet",
    "lose",
    "access",
    "funds",
    "give",
    "tips",
    "like",
    "store",
    "phrase",
    "password",
    "manager",
    "like",
    "one",
    "password",
    "write",
    "phrase",
    "piece",
    "paper",
    "put",
    "secure",
    "location",
    "memorize",
    "whatever",
    "want",
    "make",
    "sure",
    "backed",
    "somewhere",
    "gon",
    "na",
    "go",
    "ahead",
    "hit",
    "download",
    "best",
    "practice",
    "save",
    "computer",
    "much",
    "better",
    "use",
    "password",
    "manager",
    "write",
    "piece",
    "paper",
    "something",
    "gon",
    "na",
    "go",
    "ahead",
    "hit",
    "next",
    "going",
    "ask",
    "us",
    "verify",
    "actually",
    "written",
    "gon",
    "na",
    "go",
    "ahead",
    "hit",
    "confirm",
    "great",
    "gives",
    "us",
    "couple",
    "tips",
    "remember",
    "definitely",
    "take",
    "tips",
    "seriously",
    "especially",
    "gon",
    "na",
    "use",
    "real",
    "money",
    "like",
    "said",
    "demo",
    "going",
    "use",
    "test",
    "money",
    "big",
    "deal",
    "put",
    "real",
    "money",
    "absolutely",
    "need",
    "backup",
    "seed",
    "phrase",
    "secret",
    "phrase",
    "going",
    "refer",
    "pneumonic",
    "phrase",
    "awesome",
    "see",
    "interface",
    "wallet",
    "full",
    "screen",
    "depending",
    "browser",
    "actually",
    "come",
    "pin",
    "browser",
    "click",
    "top",
    "right",
    "drop",
    "see",
    "interface",
    "pneumonic",
    "phrase",
    "secret",
    "phrase",
    "secret",
    "12",
    "words",
    "gave",
    "us",
    "given",
    "us",
    "access",
    "new",
    "account",
    "address",
    "account",
    "located",
    "right",
    "fact",
    "click",
    "copy",
    "clipboard",
    "go",
    "tool",
    "called",
    "block",
    "explorer",
    "called",
    "ether",
    "scan",
    "actually",
    "paste",
    "address",
    "see",
    "details",
    "account",
    "ether",
    "scan",
    "like",
    "said",
    "known",
    "block",
    "explorer",
    "way",
    "view",
    "different",
    "addresses",
    "transactions",
    "happenings",
    "happen",
    "blockchain",
    "look",
    "address",
    "created",
    "ether",
    "scan",
    "etherium",
    "main",
    "net",
    "see",
    "transactions",
    "happened",
    "really",
    "analytics",
    "comments",
    "balance",
    "value",
    "brand",
    "new",
    "wallet",
    "address",
    "punched",
    "ether",
    "scan",
    "represents",
    "unique",
    "address",
    "unique",
    "wallet",
    "identifiable",
    "us",
    "talk",
    "ether",
    "scan",
    "little",
    "bit",
    "bit",
    "tool",
    "going",
    "use",
    "quite",
    "often",
    "wallets",
    "like",
    "meta",
    "mask",
    "actually",
    "even",
    "click",
    "right",
    "create",
    "even",
    "accounts",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "account",
    "call",
    "account",
    "two",
    "see",
    "one",
    "different",
    "address",
    "click",
    "one",
    "go",
    "back",
    "ether",
    "scan",
    "paste",
    "address",
    "hit",
    "enter",
    "see",
    "another",
    "address",
    "uniquely",
    "identifiable",
    "us",
    "right",
    "zero",
    "balance",
    "value",
    "transactions",
    "go",
    "back",
    "metamask",
    "click",
    "little",
    "button",
    "see",
    "two",
    "different",
    "accounts",
    "hit",
    "extension",
    "top",
    "right",
    "click",
    "button",
    "two",
    "different",
    "accounts",
    "12",
    "word",
    "secret",
    "recovery",
    "phrase",
    "allows",
    "us",
    "create",
    "multiple",
    "accounts",
    "secret",
    "recovery",
    "phrase",
    "secret",
    "recovery",
    "phrase",
    "give",
    "us",
    "access",
    "account",
    "one",
    "account",
    "two",
    "accounts",
    "create",
    "hitting",
    "create",
    "account",
    "button",
    "gives",
    "access",
    "accounts",
    "meta",
    "mask",
    "addresses",
    "accounts",
    "public",
    "unique",
    "identifiers",
    "also",
    "private",
    "unique",
    "identifier",
    "identifiable",
    "us",
    "similar",
    "pneumonic",
    "private",
    "identifiers",
    "never",
    "want",
    "share",
    "never",
    "want",
    "give",
    "private",
    "known",
    "accounts",
    "private",
    "key",
    "mnemonic",
    "give",
    "access",
    "many",
    "accounts",
    "private",
    "key",
    "give",
    "access",
    "one",
    "accounts",
    "see",
    "hitting",
    "little",
    "three",
    "dots",
    "going",
    "account",
    "details",
    "export",
    "private",
    "key",
    "punch",
    "password",
    "able",
    "see",
    "private",
    "key",
    "going",
    "private",
    "key",
    "account",
    "think",
    "private",
    "key",
    "password",
    "account",
    "lets",
    "create",
    "transactions",
    "reason",
    "showing",
    "mine",
    "screen",
    "going",
    "put",
    "real",
    "money",
    "going",
    "burner",
    "account",
    "tutorial",
    "highly",
    "recommend",
    "use",
    "burner",
    "account",
    "use",
    "accounts",
    "never",
    "put",
    "real",
    "money",
    "along",
    "way",
    "show",
    "make",
    "sure",
    "normally",
    "good",
    "idea",
    "show",
    "share",
    "private",
    "keys",
    "secret",
    "recovery",
    "phrase",
    "somebody",
    "gets",
    "hold",
    "private",
    "key",
    "access",
    "account",
    "one",
    "however",
    "wo",
    "access",
    "account",
    "get",
    "hold",
    "12",
    "word",
    "recovery",
    "phrase",
    "pneumonic",
    "access",
    "accounts",
    "people",
    "say",
    "keep",
    "private",
    "keys",
    "safe",
    "keys",
    "bitcoin",
    "keys",
    "aetherium",
    "talking",
    "mnemonics",
    "secret",
    "recovery",
    "phrases",
    "private",
    "keys",
    "keep",
    "private",
    "public",
    "addresses",
    "totally",
    "public",
    "anybody",
    "view",
    "accounts",
    "something",
    "like",
    "ether",
    "scan",
    "explore",
    "totally",
    "okay",
    "people",
    "share",
    "public",
    "addresses",
    "lose",
    "private",
    "key",
    "lose",
    "access",
    "one",
    "accounts",
    "lose",
    "mnemonic",
    "could",
    "potentially",
    "lose",
    "access",
    "accounts",
    "basically",
    "trying",
    "say",
    "back",
    "keep",
    "safe",
    "places",
    "course",
    "okay",
    "lose",
    "one",
    "since",
    "putting",
    "real",
    "money",
    "real",
    "world",
    "sure",
    "great",
    "main",
    "security",
    "considerations",
    "look",
    "top",
    "right",
    "right",
    "next",
    "account",
    "button",
    "clicking",
    "also",
    "see",
    "thing",
    "saying",
    "etherium",
    "main",
    "net",
    "networks",
    "tab",
    "click",
    "see",
    "list",
    "different",
    "networks",
    "currently",
    "access",
    "etherium",
    "main",
    "net",
    "main",
    "network",
    "aetherium",
    "real",
    "money",
    "spent",
    "used",
    "transactions",
    "course",
    "going",
    "working",
    "etherium",
    "main",
    "net",
    "instead",
    "going",
    "working",
    "something",
    "called",
    "test",
    "net",
    "since",
    "engineers",
    "oftentimes",
    "going",
    "want",
    "test",
    "see",
    "code",
    "actually",
    "going",
    "interact",
    "going",
    "use",
    "combination",
    "local",
    "networks",
    "test",
    "networks",
    "actually",
    "actually",
    "test",
    "smart",
    "contracts",
    "mainly",
    "going",
    "use",
    "local",
    "networks",
    "get",
    "little",
    "bit",
    "see",
    "test",
    "networks",
    "come",
    "default",
    "meta",
    "mask",
    "hit",
    "show",
    "slash",
    "hide",
    "test",
    "networks",
    "bring",
    "us",
    "settings",
    "page",
    "hit",
    "select",
    "show",
    "test",
    "networks",
    "list",
    "hit",
    "scroll",
    "back",
    "close",
    "settings",
    "hit",
    "network",
    "tab",
    "see",
    "networks",
    "like",
    "ropsten",
    "koven",
    "rinkeby",
    "garelli",
    "test",
    "networks",
    "networks",
    "resemble",
    "aetherium",
    "polygon",
    "avalanche",
    "phantom",
    "blockchains",
    "actually",
    "switch",
    "accounts",
    "one",
    "test",
    "networks",
    "let",
    "click",
    "rink",
    "b",
    "example",
    "see",
    "rinkeby",
    "test",
    "network",
    "also",
    "zero",
    "aetherium",
    "money",
    "nothing",
    "blank",
    "rinkeby",
    "wallet",
    "test",
    "nets",
    "work",
    "nearly",
    "identical",
    "aetherium",
    "main",
    "networks",
    "except",
    "run",
    "real",
    "money",
    "run",
    "fake",
    "money",
    "way",
    "us",
    "learn",
    "interact",
    "see",
    "different",
    "smart",
    "contracts",
    "actually",
    "work",
    "together",
    "time",
    "filming",
    "rink",
    "b",
    "one",
    "popular",
    "test",
    "networks",
    "along",
    "covid",
    "going",
    "work",
    "lot",
    "rigby",
    "tutorial",
    "however",
    "absolutely",
    "sure",
    "check",
    "github",
    "repository",
    "make",
    "sure",
    "always",
    "date",
    "best",
    "test",
    "network",
    "following",
    "along",
    "tutorial",
    "since",
    "test",
    "networks",
    "people",
    "running",
    "goodness",
    "hearts",
    "sometimes",
    "best",
    "ones",
    "actually",
    "change",
    "sure",
    "follow",
    "along",
    "github",
    "repository",
    "might",
    "also",
    "use",
    "covid",
    "time",
    "time",
    "maybe",
    "even",
    "grilli",
    "going",
    "show",
    "use",
    "couple",
    "different",
    "test",
    "nets",
    "fact",
    "go",
    "github",
    "repo",
    "associated",
    "course",
    "see",
    "recommended",
    "test",
    "net",
    "indeed",
    "currently",
    "ranking",
    "going",
    "work",
    "change",
    "able",
    "follow",
    "along",
    "another",
    "test",
    "leave",
    "notes",
    "continue",
    "actually",
    "go",
    "rigby",
    "ether",
    "scan",
    "go",
    "look",
    "rinku",
    "ether",
    "scan",
    "looks",
    "like",
    "first",
    "thing",
    "shows",
    "rinkeby",
    "dot",
    "ether",
    "punch",
    "address",
    "copy",
    "paste",
    "see",
    "details",
    "address",
    "rinkeby",
    "ether",
    "scan",
    "like",
    "said",
    "right",
    "totally",
    "blank",
    "networks",
    "interface",
    "later",
    "also",
    "going",
    "able",
    "work",
    "polygon",
    "avalanche",
    "etc",
    "add",
    "networks",
    "get",
    "bit",
    "reiterate",
    "test",
    "nets",
    "free",
    "testing",
    "smart",
    "contracts",
    "main",
    "net",
    "networks",
    "cost",
    "money",
    "considered",
    "live",
    "also",
    "want",
    "put",
    "caveat",
    "want",
    "keep",
    "mind",
    "test",
    "nets",
    "run",
    "goodness",
    "people",
    "hearts",
    "want",
    "abuse",
    "want",
    "use",
    "learn",
    "move",
    "try",
    "send",
    "billion",
    "transactions",
    "one",
    "test",
    "nets",
    "fact",
    "going",
    "right",
    "going",
    "send",
    "transaction",
    "rinkeby",
    "test",
    "net",
    "show",
    "us",
    "exactly",
    "would",
    "look",
    "like",
    "main",
    "network",
    "order",
    "us",
    "simulate",
    "one",
    "transactions",
    "going",
    "go",
    "called",
    "faucet",
    "go",
    "github",
    "repository",
    "associated",
    "course",
    "right",
    "underneath",
    "recommended",
    "test",
    "net",
    "going",
    "test",
    "net",
    "faucets",
    "going",
    "show",
    "us",
    "date",
    "faucet",
    "location",
    "us",
    "getting",
    "test",
    "net",
    "aetherium",
    "faucets",
    "dot",
    "chain",
    "dot",
    "link",
    "recommended",
    "faucet",
    "actually",
    "put",
    "wallet",
    "address",
    "get",
    "test",
    "net",
    "link",
    "test",
    "net",
    "aetherium",
    "gon",
    "na",
    "gon",
    "na",
    "connect",
    "wallet",
    "rinkeby",
    "network",
    "going",
    "come",
    "going",
    "switch",
    "covid",
    "etherium",
    "rigby",
    "going",
    "make",
    "sure",
    "meta",
    "mask",
    "rinkeby",
    "test",
    "network",
    "set",
    "gon",
    "na",
    "go",
    "ahead",
    "hit",
    "connect",
    "wallet",
    "going",
    "choose",
    "meta",
    "mask",
    "meta",
    "mask",
    "actually",
    "going",
    "pop",
    "say",
    "would",
    "like",
    "connect",
    "website",
    "connecting",
    "website",
    "give",
    "websites",
    "interface",
    "interact",
    "wallets",
    "interact",
    "meta",
    "masks",
    "worry",
    "sending",
    "transactions",
    "like",
    "get",
    "bit",
    "pick",
    "account",
    "want",
    "connect",
    "let",
    "choose",
    "account",
    "one",
    "hit",
    "next",
    "go",
    "ahead",
    "connect",
    "connected",
    "actually",
    "see",
    "account",
    "connected",
    "little",
    "warning",
    "gone",
    "wallet",
    "address",
    "automatically",
    "placed",
    "going",
    "make",
    "first",
    "test",
    "transaction",
    "need",
    "test",
    "link",
    "going",
    "leave",
    "later",
    "going",
    "come",
    "back",
    "get",
    "test",
    "link",
    "going",
    "need",
    "test",
    "aetherium",
    "let",
    "go",
    "ahead",
    "complete",
    "security",
    "choosing",
    "traffic",
    "lights",
    "going",
    "hit",
    "send",
    "request",
    "going",
    "asking",
    "faucet",
    "send",
    "us",
    "test",
    "aetherium",
    "test",
    "net",
    "faucets",
    "ways",
    "us",
    "get",
    "money",
    "wallets",
    "test",
    "net",
    "test",
    "aetherium",
    "worth",
    "actual",
    "money",
    "since",
    "get",
    "free",
    "exist",
    "main",
    "net",
    "ca",
    "get",
    "real",
    "aetherium",
    "real",
    "money",
    "free",
    "main",
    "network",
    "rinkeby",
    "getting",
    "fake",
    "rinckey",
    "aetherium",
    "gon",
    "na",
    "go",
    "ahead",
    "hit",
    "send",
    "request",
    "hit",
    "send",
    "request",
    "transaction",
    "hash",
    "going",
    "pop",
    "says",
    "transactions",
    "initiated",
    "waiting",
    "confirmation",
    "means",
    "wallet",
    "actually",
    "going",
    "send",
    "us",
    "test",
    "eath",
    "transaction",
    "wait",
    "transaction",
    "finish",
    "verifying",
    "finish",
    "going",
    "work",
    "right",
    "away",
    "would",
    "recommend",
    "wait",
    "minute",
    "try",
    "click",
    "transaction",
    "hash",
    "transaction",
    "show",
    "also",
    "close",
    "copy",
    "address",
    "actually",
    "already",
    "see",
    "eath",
    "wallets",
    "go",
    "back",
    "rinkeby",
    "ether",
    "scan",
    "paste",
    "address",
    "see",
    "ether",
    "balance",
    "also",
    "see",
    "transaction",
    "information",
    "going",
    "wallet",
    "green",
    "click",
    "transaction",
    "link",
    "get",
    "something",
    "like",
    "worry",
    "ether",
    "scan",
    "click",
    "transaction",
    "hash",
    "transaction",
    "list",
    "also",
    "see",
    "details",
    "like",
    "meta",
    "mask",
    "eath",
    "fake",
    "aetherium",
    "transaction",
    "associated",
    "wallet",
    "awesome",
    "though",
    "switch",
    "networks",
    "switch",
    "networks",
    "back",
    "etherium",
    "main",
    "net",
    "see",
    "nothing",
    "theory",
    "main",
    "net",
    "go",
    "ropsten",
    "also",
    "nothing",
    "eath",
    "rinkeby",
    "test",
    "network",
    "want",
    "practice",
    "working",
    "another",
    "test",
    "net",
    "faucet",
    "using",
    "multiple",
    "test",
    "nets",
    "let",
    "go",
    "ahead",
    "try",
    "section",
    "right",
    "completely",
    "optional",
    "watch",
    "follow",
    "along",
    "example",
    "see",
    "wallet",
    "already",
    "covid",
    "supported",
    "maybe",
    "switch",
    "covid",
    "maybe",
    "switch",
    "covid",
    "drop",
    "remove",
    "test",
    "10",
    "link",
    "need",
    "test",
    "eath",
    "hit",
    "robot",
    "send",
    "request",
    "things",
    "pop",
    "time",
    "going",
    "covid",
    "test",
    "net",
    "transaction",
    "finishes",
    "going",
    "thing",
    "covid",
    "like",
    "rink",
    "b",
    "transaction",
    "finishes",
    "going",
    "see",
    "test",
    "eath",
    "covid",
    "network",
    "want",
    "go",
    "ahead",
    "try",
    "working",
    "another",
    "one",
    "test",
    "nets",
    "like",
    "maybe",
    "example",
    "covid",
    "recommend",
    "go",
    "ahead",
    "giving",
    "try",
    "completely",
    "optional",
    "would",
    "always",
    "refer",
    "back",
    "github",
    "repo",
    "make",
    "sure",
    "working",
    "date",
    "faucet",
    "test",
    "net",
    "look",
    "back",
    "ether",
    "scan",
    "actually",
    "see",
    "details",
    "actually",
    "took",
    "place",
    "actually",
    "happened",
    "metamask",
    "get",
    "balance",
    "eath",
    "sudden",
    "well",
    "looked",
    "transaction",
    "section",
    "see",
    "transaction",
    "address",
    "sent",
    "us",
    "ether",
    "click",
    "transaction",
    "hash",
    "see",
    "details",
    "actually",
    "went",
    "transaction",
    "understanding",
    "going",
    "transaction",
    "essential",
    "learning",
    "smart",
    "contract",
    "developer",
    "engaging",
    "ecosystem",
    "let",
    "learn",
    "first",
    "bit",
    "top",
    "transaction",
    "hash",
    "unique",
    "identifier",
    "blockchain",
    "test",
    "net",
    "identifies",
    "exact",
    "transaction",
    "transaction",
    "hash",
    "identifies",
    "sending",
    "eath",
    "address",
    "see",
    "status",
    "transaction",
    "successful",
    "break",
    "case",
    "see",
    "block",
    "number",
    "transaction",
    "included",
    "get",
    "blocks",
    "little",
    "bit",
    "see",
    "timestamp",
    "course",
    "transaction",
    "occurred",
    "see",
    "account",
    "go",
    "ahead",
    "open",
    "new",
    "tab",
    "see",
    "account",
    "transaction",
    "came",
    "got",
    "3",
    "million",
    "ether",
    "course",
    "fake",
    "rinckey",
    "ether",
    "really",
    "matter",
    "see",
    "us",
    "wallet",
    "address",
    "0x",
    "106",
    "x",
    "blah",
    "blah",
    "blah",
    "cero",
    "x",
    "1066",
    "blah",
    "blah",
    "blah",
    "right",
    "value",
    "transaction",
    "course",
    "ether",
    "see",
    "value",
    "obviously",
    "value",
    "mode",
    "sent",
    "see",
    "transaction",
    "fee",
    "gas",
    "price",
    "hover",
    "tooltip",
    "see",
    "zoom",
    "ether",
    "scan",
    "see",
    "amount",
    "paid",
    "miner",
    "processing",
    "transaction",
    "see",
    "gas",
    "price",
    "cost",
    "per",
    "unit",
    "gas",
    "specified",
    "transaction",
    "ether",
    "gray",
    "higher",
    "gas",
    "price",
    "higher",
    "chance",
    "getting",
    "included",
    "block",
    "scroll",
    "even",
    "click",
    "see",
    "also",
    "see",
    "ton",
    "information",
    "going",
    "click",
    "see",
    "less",
    "focus",
    "two",
    "explain",
    "later",
    "session",
    "let",
    "talk",
    "concept",
    "transaction",
    "fees",
    "gas",
    "second",
    "remember",
    "said",
    "blockchain",
    "run",
    "different",
    "nodes",
    "different",
    "nodes",
    "running",
    "blockchain",
    "actually",
    "get",
    "paid",
    "transactions",
    "happen",
    "blockchains",
    "whenever",
    "make",
    "transaction",
    "node",
    "miner",
    "validator",
    "somebody",
    "running",
    "blockchain",
    "software",
    "gon",
    "na",
    "get",
    "paid",
    "tiny",
    "bit",
    "aetherium",
    "polygon",
    "whatever",
    "blockchain",
    "running",
    "gon",
    "na",
    "get",
    "paid",
    "tiny",
    "bit",
    "native",
    "blockchain",
    "currency",
    "payment",
    "obviously",
    "incentivize",
    "people",
    "continue",
    "run",
    "nodes",
    "calculate",
    "much",
    "pay",
    "much",
    "node",
    "operators",
    "get",
    "paid",
    "based",
    "much",
    "gas",
    "use",
    "concept",
    "gas",
    "gas",
    "unit",
    "computational",
    "measure",
    "computation",
    "transaction",
    "uses",
    "gas",
    "pay",
    "example",
    "hit",
    "click",
    "really",
    "quickly",
    "see",
    "section",
    "say",
    "gas",
    "limit",
    "gas",
    "usage",
    "transaction",
    "limit",
    "units",
    "gas",
    "transaction",
    "actually",
    "use",
    "transaction",
    "use",
    "21",
    "units",
    "gas",
    "simple",
    "things",
    "like",
    "sending",
    "ether",
    "units",
    "gas",
    "usually",
    "pretty",
    "cheap",
    "maybe",
    "complex",
    "things",
    "like",
    "like",
    "minting",
    "nft",
    "depositing",
    "defy",
    "contract",
    "etc",
    "maybe",
    "cost",
    "gas",
    "computationally",
    "expensive",
    "little",
    "confusing",
    "right",
    "worry",
    "much",
    "know",
    "use",
    "gas",
    "pull",
    "calculator",
    "gas",
    "times",
    "gas",
    "price",
    "right",
    "times",
    "gas",
    "price",
    "get",
    "exact",
    "see",
    "transaction",
    "fee",
    "gas",
    "price",
    "times",
    "much",
    "gas",
    "used",
    "transaction",
    "fee",
    "whoever",
    "sent",
    "us",
    "ether",
    "also",
    "paid",
    "etc",
    "rinkeby",
    "ether",
    "make",
    "transaction",
    "blockchain",
    "different",
    "way",
    "actually",
    "calculating",
    "gas",
    "stuff",
    "works",
    "basically",
    "going",
    "high",
    "level",
    "going",
    "focus",
    "total",
    "transaction",
    "fee",
    "obviously",
    "gas",
    "price",
    "cover",
    "blockchain",
    "works",
    "explain",
    "burn",
    "stuff",
    "gas",
    "fees",
    "stuff",
    "know",
    "anytime",
    "make",
    "transaction",
    "chain",
    "pay",
    "little",
    "bit",
    "call",
    "transaction",
    "gas",
    "example",
    "go",
    "metamask",
    "two",
    "accounts",
    "right",
    "account",
    "one",
    "rinckey",
    "eath",
    "account",
    "two",
    "zero",
    "rigby",
    "send",
    "rinckey",
    "eath",
    "account",
    "account",
    "much",
    "rinky",
    "eath",
    "think",
    "left",
    "well",
    "let",
    "go",
    "ahead",
    "try",
    "first",
    "transaction",
    "actually",
    "creating",
    "going",
    "spend",
    "gas",
    "go",
    "ahead",
    "hit",
    "send",
    "hit",
    "transfer",
    "accounts",
    "count",
    "two",
    "next",
    "see",
    "information",
    "actually",
    "going",
    "metamask",
    "new",
    "advanced",
    "gas",
    "ui",
    "settings",
    "also",
    "going",
    "turn",
    "song",
    "go",
    "ahead",
    "click",
    "enable",
    "enhanced",
    "gas",
    "ui",
    "turn",
    "go",
    "back",
    "going",
    "experimental",
    "tab",
    "could",
    "also",
    "general",
    "settings",
    "tab",
    "depending",
    "actually",
    "run",
    "see",
    "little",
    "notification",
    "depends",
    "version",
    "metamask",
    "using",
    "get",
    "little",
    "drop",
    "says",
    "different",
    "type",
    "gas",
    "fees",
    "actually",
    "pay",
    "reason",
    "gas",
    "fees",
    "might",
    "change",
    "see",
    "depending",
    "busy",
    "blockchain",
    "pay",
    "gas",
    "lot",
    "people",
    "sending",
    "transactions",
    "means",
    "going",
    "enough",
    "space",
    "everyone",
    "transaction",
    "get",
    "bit",
    "oversimplification",
    "happening",
    "worry",
    "much",
    "want",
    "send",
    "ether",
    "second",
    "account",
    "see",
    "gas",
    "estimated",
    "section",
    "saying",
    "estimating",
    "going",
    "pay",
    "gas",
    "addition",
    "sending",
    "eath",
    "bottom",
    "amount",
    "plus",
    "gas",
    "fee",
    "going",
    "total",
    "amount",
    "going",
    "spending",
    "transaction",
    "sending",
    "also",
    "gas",
    "piece",
    "go",
    "ahead",
    "confirm",
    "see",
    "transaction",
    "pending",
    "rigby",
    "ether",
    "scan",
    "click",
    "even",
    "hit",
    "view",
    "block",
    "explorer",
    "rigby",
    "transaction",
    "hash",
    "pop",
    "depending",
    "click",
    "might",
    "say",
    "indexing",
    "means",
    "ether",
    "scan",
    "received",
    "transaction",
    "trying",
    "place",
    "see",
    "anything",
    "means",
    "maybe",
    "transaction",
    "gone",
    "yet",
    "maybe",
    "need",
    "wait",
    "little",
    "bit",
    "maybe",
    "need",
    "go",
    "back",
    "github",
    "repo",
    "pick",
    "recommended",
    "testament",
    "faucet",
    "might",
    "wait",
    "minute",
    "actually",
    "finish",
    "indexing",
    "minute",
    "see",
    "transaction",
    "indeed",
    "passed",
    "see",
    "lot",
    "information",
    "saw",
    "last",
    "one",
    "time",
    "ether",
    "look",
    "meta",
    "mask",
    "see",
    "see",
    "account",
    "one",
    "rounding",
    "little",
    "bit",
    "click",
    "big",
    "button",
    "see",
    "actually",
    "etc",
    "account",
    "account",
    "two",
    "exactly",
    "spent",
    "little",
    "bit",
    "aetherium",
    "gas",
    "send",
    "transaction",
    "little",
    "bit",
    "information",
    "know",
    "actually",
    "interact",
    "applications",
    "use",
    "blockchain",
    "send",
    "transactions",
    "lot",
    "non",
    "technical",
    "details",
    "something",
    "incredibly",
    "exciting",
    "little",
    "bit",
    "information",
    "know",
    "interact",
    "blockchains",
    "interact",
    "etherion",
    "protocol",
    "want",
    "learn",
    "code",
    "anything",
    "go",
    "start",
    "interacting",
    "aetherium",
    "interact",
    "protocols",
    "much",
    "information",
    "however",
    "know",
    "guys",
    "learn",
    "code",
    "let",
    "look",
    "hood",
    "aetherium",
    "actually",
    "going",
    "transactions",
    "gas",
    "blockchains",
    "really",
    "going",
    "let",
    "learn",
    "fundamentals",
    "blockchain",
    "want",
    "go",
    "ahead",
    "jump",
    "coding",
    "go",
    "ahead",
    "grab",
    "timestamp",
    "description",
    "however",
    "learning",
    "exactly",
    "blockchain",
    "works",
    "going",
    "make",
    "incredibly",
    "powerful",
    "developer",
    "let",
    "take",
    "look",
    "first",
    "going",
    "going",
    "blockchain",
    "demo",
    "site",
    "right",
    "creator",
    "site",
    "fantastic",
    "video",
    "fantastic",
    "walk",
    "blockchain",
    "one",
    "one",
    "right",
    "site",
    "looking",
    "another",
    "explanation",
    "definitely",
    "check",
    "video",
    "absolutely",
    "fantastic",
    "first",
    "thing",
    "really",
    "need",
    "order",
    "understand",
    "blockchain",
    "really",
    "anything",
    "everything",
    "going",
    "working",
    "first",
    "really",
    "need",
    "understand",
    "sha",
    "256",
    "hash",
    "hashing",
    "kind",
    "general",
    "let",
    "first",
    "understand",
    "hash",
    "hash",
    "unique",
    "fixed",
    "length",
    "string",
    "meant",
    "identify",
    "piece",
    "data",
    "created",
    "putting",
    "piece",
    "data",
    "hash",
    "function",
    "example",
    "hashing",
    "algorithm",
    "used",
    "sha",
    "etherium",
    "actually",
    "uses",
    "right",
    "hashing",
    "algorithm",
    "quite",
    "sha",
    "256",
    "kind",
    "sha",
    "family",
    "really",
    "another",
    "way",
    "hash",
    "things",
    "specific",
    "hash",
    "algorithm",
    "matter",
    "much",
    "example",
    "shot",
    "six",
    "imagine",
    "etherium",
    "hash",
    "going",
    "result",
    "different",
    "hash",
    "going",
    "happen",
    "application",
    "whatever",
    "data",
    "whatever",
    "information",
    "put",
    "data",
    "section",
    "see",
    "hash",
    "changes",
    "happening",
    "data",
    "running",
    "sha",
    "256",
    "hash",
    "algorithm",
    "outputting",
    "unique",
    "hash",
    "hash",
    "unique",
    "fixed",
    "length",
    "string",
    "going",
    "identify",
    "like",
    "blank",
    "data",
    "piece",
    "right",
    "put",
    "know",
    "name",
    "like",
    "patrick",
    "collins",
    "hash",
    "going",
    "represent",
    "patrick",
    "collins",
    "right",
    "see",
    "even",
    "put",
    "know",
    "tons",
    "tons",
    "data",
    "length",
    "string",
    "change",
    "right",
    "always",
    "gon",
    "na",
    "put",
    "almost",
    "amount",
    "data",
    "upper",
    "limit",
    "max",
    "size",
    "data",
    "intents",
    "purposes",
    "pretty",
    "much",
    "put",
    "length",
    "see",
    "every",
    "time",
    "type",
    "patrick",
    "collins",
    "hash",
    "always",
    "gon",
    "na",
    "seven",
    "e",
    "five",
    "right",
    "gon",
    "na",
    "delete",
    "gon",
    "na",
    "patrick",
    "collins",
    "75",
    "b",
    "always",
    "unique",
    "hash",
    "always",
    "going",
    "unique",
    "right",
    "always",
    "gon",
    "na",
    "fixed",
    "length",
    "string",
    "take",
    "idea",
    "putting",
    "data",
    "move",
    "concept",
    "block",
    "block",
    "concept",
    "going",
    "take",
    "exact",
    "thing",
    "hash",
    "data",
    "section",
    "right",
    "instead",
    "everything",
    "singular",
    "data",
    "area",
    "right",
    "going",
    "split",
    "data",
    "block",
    "nuns",
    "data",
    "going",
    "actually",
    "going",
    "hash",
    "three",
    "get",
    "get",
    "hash",
    "right",
    "gon",
    "na",
    "put",
    "three",
    "gon",
    "na",
    "say",
    "three",
    "combined",
    "together",
    "gon",
    "na",
    "put",
    "every",
    "three",
    "hashing",
    "algorithm",
    "figure",
    "type",
    "bunch",
    "stuff",
    "see",
    "block",
    "one",
    "nonce",
    "know",
    "nonce",
    "data",
    "going",
    "get",
    "hash",
    "see",
    "actually",
    "screen",
    "turns",
    "red",
    "block",
    "turned",
    "red",
    "happens",
    "hit",
    "mind",
    "button",
    "hit",
    "mind",
    "button",
    "actually",
    "gon",
    "na",
    "take",
    "time",
    "gon",
    "na",
    "think",
    "little",
    "bit",
    "see",
    "nonce",
    "actually",
    "changed",
    "right",
    "nonce",
    "different",
    "hash",
    "starts",
    "four",
    "zeros",
    "okay",
    "back",
    "turn",
    "green",
    "talking",
    "mining",
    "talking",
    "miners",
    "solving",
    "type",
    "difficult",
    "problem",
    "takes",
    "lot",
    "time",
    "example",
    "problem",
    "miners",
    "solve",
    "find",
    "nonce",
    "value",
    "nonce",
    "section",
    "hashed",
    "block",
    "number",
    "one",
    "data",
    "would",
    "start",
    "four",
    "zeros",
    "problem",
    "miners",
    "solve",
    "start",
    "four",
    "zeros",
    "way",
    "really",
    "kind",
    "brute",
    "force",
    "know",
    "trying",
    "stuff",
    "tried",
    "one",
    "okay",
    "one",
    "work",
    "okay",
    "two",
    "nope",
    "two",
    "work",
    "3456",
    "okay",
    "five",
    "well",
    "started",
    "one",
    "zero",
    "four",
    "keep",
    "trying",
    "numbers",
    "get",
    "one",
    "know",
    "let",
    "hit",
    "mine",
    "four",
    "zeros",
    "top",
    "start",
    "specific",
    "problem",
    "changes",
    "blockchain",
    "blockchain",
    "right",
    "yet",
    "aetherium",
    "different",
    "problem",
    "miners",
    "solve",
    "bitcoin",
    "different",
    "problems",
    "concept",
    "going",
    "take",
    "one",
    "block",
    "going",
    "concept",
    "going",
    "data",
    "going",
    "block",
    "number",
    "going",
    "nonce",
    "right",
    "nonce",
    "solution",
    "going",
    "number",
    "use",
    "get",
    "like",
    "solution",
    "problem",
    "right",
    "go",
    "one",
    "know",
    "hit",
    "mine",
    "nonces",
    "changed",
    "right",
    "went",
    "one",
    "nonce",
    "allowed",
    "hash",
    "start",
    "four",
    "zeros",
    "happening",
    "blockchain",
    "miners",
    "mining",
    "going",
    "process",
    "computationally",
    "intensive",
    "process",
    "trying",
    "find",
    "nonce",
    "fulfills",
    "whatever",
    "problem",
    "really",
    "actually",
    "block",
    "really",
    "happening",
    "miners",
    "mining",
    "looking",
    "trial",
    "error",
    "brute",
    "force",
    "trying",
    "find",
    "nut",
    "know",
    "block",
    "let",
    "go",
    "next",
    "step",
    "figure",
    "okay",
    "well",
    "block",
    "chain",
    "example",
    "blockchain",
    "going",
    "look",
    "like",
    "right",
    "combination",
    "know",
    "back",
    "block",
    "section",
    "one",
    "one",
    "block",
    "looks",
    "like",
    "multiple",
    "different",
    "blocks",
    "right",
    "one",
    "represents",
    "different",
    "block",
    "additional",
    "column",
    "additional",
    "variable",
    "like",
    "know",
    "block",
    "nonce",
    "data",
    "right",
    "blocked",
    "nonce",
    "data",
    "also",
    "thing",
    "called",
    "previous",
    "right",
    "actually",
    "gon",
    "na",
    "pointing",
    "previous",
    "hash",
    "last",
    "block",
    "example",
    "go",
    "last",
    "block",
    "blockchain",
    "says",
    "previous",
    "look",
    "hash",
    "block",
    "number",
    "four",
    "look",
    "previous",
    "four",
    "zeros",
    "b",
    "nine",
    "four",
    "zeros",
    "b",
    "nine",
    "way",
    "back",
    "first",
    "block",
    "previous",
    "zeros",
    "right",
    "block",
    "previous",
    "zeros",
    "going",
    "known",
    "genesis",
    "block",
    "probably",
    "heard",
    "genesis",
    "block",
    "first",
    "block",
    "blockchain",
    "previous",
    "hash",
    "points",
    "hash",
    "actually",
    "exist",
    "imagine",
    "kind",
    "block",
    "worked",
    "block",
    "nuts",
    "dated",
    "go",
    "hashing",
    "algorithm",
    "blockchain",
    "block",
    "nonce",
    "data",
    "previous",
    "hash",
    "go",
    "hashing",
    "algorithm",
    "figure",
    "hashes",
    "okay",
    "go",
    "know",
    "example",
    "type",
    "patrick",
    "obviously",
    "longer",
    "valid",
    "right",
    "nuns",
    "combined",
    "block",
    "data",
    "previous",
    "hash",
    "going",
    "solve",
    "problem",
    "four",
    "zeros",
    "start",
    "right",
    "gon",
    "na",
    "go",
    "fix",
    "kind",
    "easy",
    "way",
    "see",
    "broken",
    "let",
    "take",
    "look",
    "break",
    "block",
    "right",
    "happens",
    "break",
    "data",
    "like",
    "patrick",
    "see",
    "read",
    "invalid",
    "right",
    "block",
    "hash",
    "nonce",
    "hash",
    "new",
    "data",
    "name",
    "patrick",
    "hashed",
    "previous",
    "block",
    "brand",
    "new",
    "hash",
    "right",
    "block",
    "still",
    "pointing",
    "previous",
    "hash",
    "right",
    "right",
    "pointing",
    "previous",
    "block",
    "wrong",
    "messed",
    "nuts",
    "previous",
    "hash",
    "also",
    "wrong",
    "right",
    "talk",
    "blockchains",
    "immutable",
    "exactly",
    "immutable",
    "right",
    "go",
    "back",
    "change",
    "anything",
    "know",
    "typed",
    "right",
    "entire",
    "blockchain",
    "invalidated",
    "none",
    "going",
    "nonces",
    "solve",
    "equation",
    "anymore",
    "blockchains",
    "immutable",
    "anytime",
    "change",
    "one",
    "thing",
    "ruin",
    "rest",
    "blockchain",
    "okay",
    "however",
    "though",
    "know",
    "originally",
    "go",
    "ahead",
    "mine",
    "mine",
    "see",
    "know",
    "going",
    "start",
    "getting",
    "computationally",
    "expensive",
    "go",
    "redo",
    "basically",
    "entire",
    "blockchain",
    "farther",
    "farther",
    "line",
    "get",
    "harder",
    "harder",
    "becomes",
    "know",
    "rehash",
    "redo",
    "different",
    "block",
    "chains",
    "makes",
    "lot",
    "sense",
    "right",
    "blockchain",
    "really",
    "hard",
    "change",
    "something",
    "past",
    "go",
    "ahead",
    "remind",
    "one",
    "controls",
    "blockchain",
    "right",
    "one",
    "controls",
    "know",
    "want",
    "change",
    "something",
    "past",
    "okay",
    "great",
    "got",
    "change",
    "state",
    "know",
    "mine",
    "one",
    "know",
    "obviously",
    "going",
    "computationally",
    "expensive",
    "something",
    "right",
    "one",
    "owns",
    "blockchain",
    "decentralized",
    "nature",
    "distributed",
    "nature",
    "really",
    "makes",
    "incredibly",
    "powerful",
    "gon",
    "na",
    "go",
    "distributed",
    "tab",
    "also",
    "referred",
    "decentralized",
    "tab",
    "going",
    "show",
    "us",
    "blockchain",
    "looks",
    "like",
    "decentralized",
    "manner",
    "exact",
    "initial",
    "setup",
    "shoot",
    "blockchain",
    "first",
    "blockchain",
    "kind",
    "exactly",
    "one",
    "also",
    "peer",
    "peer",
    "beam",
    "prc",
    "people",
    "talking",
    "peer",
    "peer",
    "peer",
    "peer",
    "transactions",
    "talking",
    "kind",
    "concept",
    "talking",
    "right",
    "number",
    "different",
    "peers",
    "running",
    "blockchain",
    "technology",
    "weighted",
    "equally",
    "right",
    "one",
    "peers",
    "one",
    "nodes",
    "one",
    "entities",
    "running",
    "blockchain",
    "exact",
    "power",
    "anybody",
    "else",
    "right",
    "way",
    "tell",
    "easily",
    "blockchain",
    "correct",
    "ones",
    "correct",
    "looking",
    "end",
    "hash",
    "right",
    "looking",
    "blockchain",
    "remember",
    "remember",
    "hash",
    "last",
    "block",
    "going",
    "encompass",
    "blocks",
    "right",
    "last",
    "hash",
    "going",
    "previous",
    "hash",
    "includes",
    "previous",
    "hash",
    "hash",
    "includes",
    "previous",
    "hash",
    "last",
    "hash",
    "encompasses",
    "everything",
    "right",
    "look",
    "look",
    "hash",
    "piercey",
    "four",
    "zeros",
    "e",
    "four",
    "b",
    "look",
    "latest",
    "hash",
    "appear",
    "b",
    "four",
    "zeros",
    "e",
    "b",
    "pure",
    "four",
    "zeros",
    "e",
    "peers",
    "nodes",
    "decentralized",
    "know",
    "independent",
    "independent",
    "users",
    "running",
    "blockchain",
    "software",
    "matched",
    "easy",
    "nodes",
    "look",
    "say",
    "hey",
    "great",
    "matched",
    "let",
    "say",
    "decides",
    "know",
    "something",
    "happened",
    "blockchain",
    "like",
    "wanted",
    "go",
    "back",
    "change",
    "something",
    "right",
    "let",
    "say",
    "change",
    "know",
    "obviously",
    "rest",
    "blockchain",
    "invalidated",
    "spend",
    "lot",
    "computational",
    "power",
    "catch",
    "speed",
    "let",
    "go",
    "ahead",
    "humor",
    "let",
    "say",
    "ended",
    "catching",
    "ended",
    "catching",
    "know",
    "ended",
    "mining",
    "everything",
    "valid",
    "blockchain",
    "right",
    "solves",
    "equation",
    "awesome",
    "however",
    "block",
    "number",
    "three",
    "something",
    "new",
    "right",
    "peer",
    "put",
    "happens",
    "look",
    "blockchains",
    "running",
    "software",
    "looking",
    "hashes",
    "hash",
    "block",
    "number",
    "five",
    "pure",
    "new",
    "hash",
    "09",
    "bc",
    "pure",
    "b",
    "different",
    "hash",
    "00",
    "e",
    "b",
    "right",
    "right",
    "disappear",
    "new",
    "stuff",
    "pure",
    "b",
    "well",
    "decentralized",
    "data",
    "comes",
    "look",
    "piercey",
    "piercey",
    "also",
    "e",
    "forby",
    "piercey",
    "say",
    "hey",
    "wrong",
    "get",
    "right",
    "pure",
    "stop",
    "able",
    "participate",
    "mining",
    "rewards",
    "essentially",
    "forked",
    "blockchain",
    "started",
    "little",
    "blockchain",
    "right",
    "history",
    "ones",
    "piece",
    "data",
    "block",
    "three",
    "whereas",
    "pure",
    "b",
    "pure",
    "c",
    "nothing",
    "really",
    "shows",
    "blockchain",
    "worlds",
    "decentralized",
    "world",
    "really",
    "centralized",
    "entity",
    "know",
    "pure",
    "know",
    "might",
    "maliciously",
    "motivated",
    "change",
    "know",
    "block",
    "number",
    "three",
    "however",
    "democracy",
    "rules",
    "right",
    "majority",
    "rules",
    "blockchain",
    "pure",
    "vmpfc",
    "say",
    "hey",
    "know",
    "cute",
    "puree",
    "wrong",
    "right",
    "right",
    "might",
    "little",
    "abstract",
    "look",
    "data",
    "know",
    "typing",
    "kind",
    "random",
    "stuff",
    "think",
    "okay",
    "yeah",
    "data",
    "right",
    "makes",
    "sense",
    "know",
    "kind",
    "random",
    "strings",
    "really",
    "anything",
    "us",
    "actually",
    "go",
    "token",
    "section",
    "everything",
    "really",
    "starts",
    "make",
    "lot",
    "sense",
    "exact",
    "setup",
    "pure",
    "pure",
    "b",
    "piercey",
    "except",
    "difference",
    "instead",
    "kind",
    "data",
    "section",
    "tx",
    "transaction",
    "section",
    "right",
    "represents",
    "transactions",
    "happening",
    "block",
    "right",
    "sending",
    "25",
    "darcy",
    "bingle",
    "bingley",
    "force",
    "toward",
    "dollars",
    "27",
    "cents",
    "1922",
    "right",
    "exact",
    "thing",
    "transactions",
    "gon",
    "na",
    "get",
    "hashed",
    "exact",
    "way",
    "data",
    "going",
    "get",
    "hashed",
    "powerful",
    "know",
    "want",
    "malicious",
    "right",
    "want",
    "say",
    "hey",
    "really",
    "wanted",
    "give",
    "jane",
    "lot",
    "money",
    "elizabeth",
    "puree",
    "go",
    "back",
    "change",
    "well",
    "know",
    "whole",
    "blockchain",
    "get",
    "invalidated",
    "long",
    "ago",
    "going",
    "match",
    "chains",
    "right",
    "blockchain",
    "going",
    "excluded",
    "overall",
    "blockchain",
    "let",
    "let",
    "go",
    "ahead",
    "fix",
    "thing",
    "become",
    "malicious",
    "want",
    "send",
    "know",
    "want",
    "miss",
    "audrey",
    "less",
    "money",
    "maybe",
    "want",
    "send",
    "1",
    "go",
    "mind",
    "thing",
    "hash",
    "two",
    "one",
    "going",
    "match",
    "rubies",
    "rubies",
    "hash",
    "bba",
    "going",
    "match",
    "pierce",
    "hash",
    "bba",
    "well",
    "two",
    "gon",
    "na",
    "say",
    "hey",
    "blockchain",
    "invalid",
    "matching",
    "majority",
    "know",
    "right",
    "really",
    "blockchains",
    "work",
    "low",
    "level",
    "goes",
    "back",
    "understanding",
    "hash",
    "idea",
    "using",
    "sophisticated",
    "manner",
    "kind",
    "cryptographically",
    "prove",
    "know",
    "stuff",
    "lies",
    "way",
    "blockchain",
    "works",
    "instead",
    "random",
    "stuff",
    "put",
    "status",
    "section",
    "actually",
    "going",
    "solidity",
    "code",
    "finding",
    "ways",
    "interact",
    "different",
    "blocks",
    "different",
    "protocols",
    "chain",
    "said",
    "different",
    "smart",
    "contracts",
    "next",
    "question",
    "might",
    "asking",
    "okay",
    "well",
    "know",
    "sure",
    "one",
    "know",
    "let",
    "say",
    "let",
    "say",
    "darcy",
    "right",
    "sure",
    "darcy",
    "one",
    "actually",
    "send",
    "us",
    "money",
    "know",
    "darcy",
    "sent",
    "25",
    "bingley",
    "well",
    "get",
    "private",
    "keys",
    "public",
    "keys",
    "going",
    "go",
    "let",
    "quick",
    "recap",
    "learned",
    "section",
    "far",
    "right",
    "learned",
    "aetherium",
    "actually",
    "runs",
    "hit",
    "check",
    "use",
    "sha",
    "demo",
    "really",
    "matter",
    "talking",
    "hashing",
    "algorithms",
    "hash",
    "unique",
    "fixed",
    "length",
    "string",
    "meant",
    "identify",
    "piece",
    "data",
    "hash",
    "algorithm",
    "hash",
    "function",
    "function",
    "algorithm",
    "computes",
    "type",
    "data",
    "unique",
    "hash",
    "mining",
    "going",
    "process",
    "finding",
    "solution",
    "blockchain",
    "problem",
    "example",
    "problem",
    "finding",
    "hash",
    "starts",
    "four",
    "zeros",
    "nodes",
    "get",
    "paid",
    "mining",
    "different",
    "blocks",
    "problem",
    "going",
    "different",
    "blockchain",
    "blockchain",
    "block",
    "blockchain",
    "basically",
    "combination",
    "block",
    "nonce",
    "transaction",
    "previous",
    "hash",
    "create",
    "unique",
    "hash",
    "block",
    "depending",
    "blockchain",
    "implementation",
    "might",
    "couple",
    "fields",
    "might",
    "different",
    "fields",
    "essentially",
    "going",
    "blockchains",
    "decentralized",
    "distributed",
    "many",
    "independent",
    "users",
    "going",
    "run",
    "blockchain",
    "software",
    "check",
    "compare",
    "see",
    "blockchains",
    "acting",
    "honestly",
    "ones",
    "acting",
    "maliciously",
    "blockchain",
    "world",
    "majority",
    "rules",
    "nonce",
    "answer",
    "used",
    "number",
    "used",
    "get",
    "hash",
    "nonce",
    "kind",
    "overloaded",
    "term",
    "actually",
    "used",
    "number",
    "different",
    "reasons",
    "case",
    "using",
    "solve",
    "problem",
    "getting",
    "four",
    "five",
    "zeros",
    "stop",
    "hash",
    "however",
    "aetherium",
    "also",
    "often",
    "used",
    "number",
    "transactions",
    "given",
    "address",
    "going",
    "talk",
    "little",
    "bit",
    "signing",
    "transactions",
    "private",
    "keys",
    "cryptography",
    "pieces",
    "right",
    "blockchain",
    "demo",
    "see",
    "fantastic",
    "transactions",
    "right",
    "things",
    "went",
    "know",
    "darcy",
    "one",
    "send",
    "25",
    "bangli",
    "right",
    "know",
    "actually",
    "happened",
    "pieces",
    "learned",
    "test",
    "net",
    "meta",
    "mask",
    "account",
    "really",
    "going",
    "start",
    "come",
    "life",
    "little",
    "bit",
    "example",
    "public",
    "private",
    "keys",
    "okay",
    "top",
    "private",
    "key",
    "right",
    "randomly",
    "generated",
    "private",
    "key",
    "know",
    "kind",
    "states",
    "key",
    "really",
    "want",
    "keep",
    "secret",
    "going",
    "using",
    "kind",
    "secret",
    "password",
    "transactions",
    "really",
    "pick",
    "know",
    "private",
    "key",
    "anything",
    "want",
    "algorithm",
    "going",
    "use",
    "algorithm",
    "aetherium",
    "bitcoin",
    "use",
    "elliptic",
    "curve",
    "digital",
    "signature",
    "algorithm",
    "variant",
    "digital",
    "signature",
    "algorithm",
    "going",
    "create",
    "public",
    "key",
    "right",
    "really",
    "going",
    "go",
    "kind",
    "digital",
    "signature",
    "algorithm",
    "know",
    "use",
    "hash",
    "knowledge",
    "learned",
    "combined",
    "pieces",
    "kind",
    "get",
    "public",
    "gon",
    "na",
    "go",
    "deep",
    "private",
    "key",
    "create",
    "get",
    "public",
    "key",
    "public",
    "key",
    "want",
    "everybody",
    "access",
    "right",
    "yeah",
    "whole",
    "world",
    "see",
    "private",
    "key",
    "really",
    "want",
    "private",
    "want",
    "people",
    "see",
    "going",
    "use",
    "private",
    "key",
    "like",
    "password",
    "quote",
    "unquote",
    "digitally",
    "sign",
    "transactions",
    "people",
    "verify",
    "public",
    "key",
    "let",
    "let",
    "see",
    "actually",
    "looks",
    "like",
    "let",
    "pick",
    "random",
    "key",
    "secure",
    "key",
    "right",
    "longer",
    "secure",
    "going",
    "go",
    "signatures",
    "right",
    "let",
    "say",
    "message",
    "want",
    "right",
    "say",
    "hi",
    "world",
    "right",
    "want",
    "message",
    "gon",
    "na",
    "happen",
    "private",
    "key",
    "created",
    "use",
    "sign",
    "data",
    "right",
    "remember",
    "blockchain",
    "demo",
    "know",
    "kind",
    "hashing",
    "stuff",
    "right",
    "using",
    "shea",
    "256",
    "hash",
    "get",
    "hash",
    "well",
    "something",
    "similar",
    "instead",
    "hashing",
    "using",
    "digital",
    "signature",
    "algorithm",
    "create",
    "message",
    "signature",
    "really",
    "powerful",
    "algorithm",
    "works",
    "create",
    "message",
    "signature",
    "private",
    "key",
    "somebody",
    "else",
    "ca",
    "derive",
    "private",
    "key",
    "message",
    "signature",
    "makes",
    "really",
    "really",
    "powerful",
    "however",
    "go",
    "verify",
    "using",
    "public",
    "key",
    "right",
    "oh",
    "public",
    "key",
    "using",
    "using",
    "public",
    "key",
    "anybody",
    "verify",
    "let",
    "go",
    "ahead",
    "sign",
    "anybody",
    "verify",
    "signature",
    "right",
    "public",
    "private",
    "key",
    "sign",
    "things",
    "public",
    "key",
    "anybody",
    "verify",
    "something",
    "right",
    "anybody",
    "verify",
    "let",
    "say",
    "somebody",
    "tries",
    "fake",
    "transaction",
    "say",
    "hey",
    "know",
    "transaction",
    "verify",
    "signature",
    "public",
    "key",
    "easily",
    "whole",
    "thing",
    "turns",
    "red",
    "verified",
    "right",
    "algorithm",
    "says",
    "hey",
    "wrong",
    "go",
    "ahead",
    "take",
    "transactions",
    "exact",
    "way",
    "want",
    "send",
    "money",
    "know",
    "want",
    "send",
    "400",
    "know",
    "address",
    "another",
    "address",
    "using",
    "private",
    "key",
    "sign",
    "transaction",
    "anybody",
    "else",
    "world",
    "verify",
    "transaction",
    "right",
    "people",
    "say",
    "hydra",
    "keys",
    "know",
    "protect",
    "keys",
    "talking",
    "accounts",
    "right",
    "go",
    "settings",
    "reason",
    "showing",
    "guys",
    "pneumonic",
    "private",
    "key",
    "dumpster",
    "account",
    "going",
    "throw",
    "away",
    "end",
    "video",
    "gon",
    "na",
    "put",
    "real",
    "money",
    "look",
    "metamask",
    "pneumonic",
    "phrase",
    "allows",
    "us",
    "easily",
    "get",
    "different",
    "private",
    "keys",
    "right",
    "pneumonic",
    "phrase",
    "combined",
    "know",
    "whatever",
    "account",
    "number",
    "get",
    "us",
    "private",
    "key",
    "mnemonic",
    "phrase",
    "combined",
    "one",
    "gon",
    "na",
    "get",
    "private",
    "key",
    "look",
    "account",
    "details",
    "export",
    "private",
    "key",
    "confirm",
    "going",
    "private",
    "key",
    "going",
    "use",
    "sign",
    "transactions",
    "right",
    "anybody",
    "else",
    "gets",
    "access",
    "private",
    "key",
    "sign",
    "transactions",
    "us",
    "send",
    "transactions",
    "us",
    "want",
    "keep",
    "private",
    "works",
    "exact",
    "way",
    "right",
    "important",
    "hide",
    "private",
    "keys",
    "hide",
    "mnemonics",
    "aetherium",
    "address",
    "actually",
    "piece",
    "actually",
    "piece",
    "public",
    "key",
    "get",
    "address",
    "aetherium",
    "take",
    "public",
    "key",
    "created",
    "private",
    "key",
    "hash",
    "using",
    "aetherium",
    "hashing",
    "algorithm",
    "take",
    "last",
    "20",
    "bytes",
    "actually",
    "derive",
    "address",
    "knowing",
    "exact",
    "methodology",
    "get",
    "address",
    "really",
    "matter",
    "could",
    "change",
    "blockchain",
    "blockchain",
    "could",
    "even",
    "change",
    "know",
    "essentially",
    "kind",
    "addresses",
    "derived",
    "derivative",
    "public",
    "key",
    "right",
    "public",
    "key",
    "public",
    "know",
    "using",
    "public",
    "key",
    "kind",
    "public",
    "way",
    "totally",
    "fine",
    "private",
    "key",
    "sign",
    "transactions",
    "note",
    "though",
    "send",
    "transaction",
    "going",
    "assign",
    "create",
    "transaction",
    "us",
    "send",
    "learn",
    "later",
    "send",
    "transactions",
    "cool",
    "lot",
    "information",
    "let",
    "quick",
    "recap",
    "public",
    "key",
    "derived",
    "using",
    "digital",
    "signature",
    "algorithm",
    "private",
    "key",
    "right",
    "want",
    "keep",
    "private",
    "key",
    "private",
    "times",
    "going",
    "use",
    "private",
    "key",
    "sign",
    "transactions",
    "signing",
    "transactions",
    "private",
    "key",
    "one",
    "actually",
    "ca",
    "get",
    "private",
    "key",
    "message",
    "signature",
    "however",
    "using",
    "public",
    "key",
    "anybody",
    "easily",
    "verify",
    "signature",
    "signed",
    "fact",
    "signed",
    "meta",
    "mask",
    "private",
    "keys",
    "located",
    "account",
    "details",
    "section",
    "hit",
    "show",
    "private",
    "keys",
    "type",
    "password",
    "get",
    "private",
    "key",
    "quick",
    "note",
    "oftentimes",
    "using",
    "private",
    "keys",
    "somewhere",
    "want",
    "hexadecimal",
    "form",
    "going",
    "use",
    "private",
    "key",
    "something",
    "like",
    "brownie",
    "go",
    "later",
    "need",
    "actually",
    "append",
    "0x",
    "front",
    "get",
    "later",
    "address",
    "account",
    "derived",
    "think",
    "private",
    "key",
    "creates",
    "public",
    "key",
    "create",
    "address",
    "little",
    "barrier",
    "big",
    "barrier",
    "private",
    "key",
    "want",
    "keep",
    "private",
    "public",
    "key",
    "address",
    "public",
    "information",
    "know",
    "little",
    "bit",
    "going",
    "underneath",
    "hood",
    "blockchains",
    "let",
    "go",
    "back",
    "transactions",
    "look",
    "gas",
    "thing",
    "look",
    "see",
    "actually",
    "happening",
    "gas",
    "particular",
    "little",
    "bit",
    "tricky",
    "wrap",
    "head",
    "around",
    "get",
    "right",
    "away",
    "worry",
    "go",
    "examples",
    "start",
    "make",
    "sense",
    "saying",
    "let",
    "look",
    "transaction",
    "fee",
    "bid",
    "costs",
    "associated",
    "running",
    "transaction",
    "scroll",
    "ether",
    "scan",
    "see",
    "thing",
    "says",
    "block",
    "base",
    "fee",
    "per",
    "gas",
    "plus",
    "max",
    "party",
    "fee",
    "per",
    "gas",
    "times",
    "gas",
    "use",
    "might",
    "little",
    "bit",
    "confusing",
    "let",
    "actually",
    "break",
    "going",
    "aetherium",
    "erp",
    "15",
    "five",
    "nine",
    "place",
    "going",
    "specific",
    "aetherium",
    "every",
    "blockchain",
    "might",
    "little",
    "bit",
    "differently",
    "click",
    "see",
    "see",
    "number",
    "useful",
    "values",
    "see",
    "gas",
    "limit",
    "usage",
    "transaction",
    "used",
    "gas",
    "sent",
    "gas",
    "along",
    "sometimes",
    "sending",
    "transaction",
    "depending",
    "sent",
    "depending",
    "specific",
    "instructions",
    "might",
    "actually",
    "use",
    "way",
    "gas",
    "want",
    "use",
    "transactions",
    "actually",
    "set",
    "limit",
    "hey",
    "want",
    "use",
    "x",
    "amount",
    "gas",
    "want",
    "x",
    "computational",
    "units",
    "fact",
    "go",
    "metamask",
    "click",
    "send",
    "transfer",
    "accounts",
    "pick",
    "know",
    "eath",
    "something",
    "next",
    "actually",
    "hit",
    "little",
    "button",
    "go",
    "advanced",
    "actually",
    "edit",
    "specifics",
    "transaction",
    "one",
    "going",
    "gas",
    "limit",
    "change",
    "gas",
    "limit",
    "maybe",
    "2200",
    "2300",
    "even",
    "less",
    "since",
    "sending",
    "aetherium",
    "takes",
    "exactly",
    "gas",
    "metamask",
    "defaults",
    "setting",
    "well",
    "also",
    "see",
    "interesting",
    "things",
    "see",
    "priority",
    "fee",
    "max",
    "base",
    "fee",
    "let",
    "reject",
    "transaction",
    "let",
    "look",
    "back",
    "ether",
    "scan",
    "talk",
    "currently",
    "aetherium",
    "according",
    "ee",
    "ip",
    "1559",
    "every",
    "transaction",
    "aetherium",
    "comes",
    "something",
    "called",
    "base",
    "fee",
    "minimum",
    "gas",
    "price",
    "need",
    "set",
    "include",
    "transaction",
    "notice",
    "priced",
    "something",
    "called",
    "gateway",
    "gateway",
    "come",
    "site",
    "eath",
    "link",
    "github",
    "repository",
    "scroll",
    "see",
    "way",
    "gateway",
    "ether",
    "five",
    "put",
    "one",
    "ether",
    "see",
    "much",
    "one",
    "ether",
    "terms",
    "way",
    "terms",
    "way",
    "one",
    "ether",
    "equal",
    "1",
    "billion",
    "way",
    "going",
    "one",
    "ether",
    "1112",
    "1314",
    "16",
    "seven",
    "eight",
    "team",
    "18",
    "zeros",
    "away",
    "easier",
    "ways",
    "referring",
    "really",
    "really",
    "small",
    "amounts",
    "aetherium",
    "look",
    "gas",
    "fees",
    "see",
    "base",
    "fee",
    "go",
    "away",
    "obviously",
    "would",
    "even",
    "smaller",
    "number",
    "units",
    "weigh",
    "take",
    "number",
    "put",
    "calculator",
    "see",
    "equal",
    "40",
    "weigh",
    "whole",
    "bunch",
    "zeros",
    "ether",
    "max",
    "fee",
    "refers",
    "maximum",
    "gas",
    "fee",
    "willing",
    "pay",
    "transaction",
    "actually",
    "see",
    "max",
    "fee",
    "little",
    "bit",
    "higher",
    "actually",
    "ended",
    "paying",
    "maximum",
    "something",
    "something",
    "gas",
    "price",
    "actually",
    "paid",
    "transaction",
    "might",
    "course",
    "little",
    "bit",
    "different",
    "additionally",
    "max",
    "priority",
    "fee",
    "going",
    "max",
    "gas",
    "fee",
    "willing",
    "pay",
    "plus",
    "max",
    "tip",
    "willing",
    "give",
    "miners",
    "currently",
    "aetherium",
    "base",
    "fee",
    "ends",
    "getting",
    "burnt",
    "see",
    "ether",
    "scan",
    "exactly",
    "much",
    "getting",
    "burnt",
    "pull",
    "calculator",
    "grab",
    "gas",
    "fee",
    "multiply",
    "amount",
    "gas",
    "used",
    "see",
    "indeed",
    "much",
    "aetherium",
    "actually",
    "ended",
    "burning",
    "go",
    "back",
    "ethereum",
    "converter",
    "paste",
    "see",
    "two",
    "numbers",
    "indeed",
    "equal",
    "means",
    "whenever",
    "send",
    "transaction",
    "little",
    "bit",
    "aetherium",
    "removed",
    "circulation",
    "forever",
    "considered",
    "burnt",
    "currently",
    "theory",
    "part",
    "aetherium",
    "part",
    "transaction",
    "fee",
    "actually",
    "gets",
    "burnt",
    "part",
    "goes",
    "directly",
    "miners",
    "figure",
    "exactly",
    "much",
    "went",
    "miners",
    "could",
    "number",
    "minus",
    "burnt",
    "amount",
    "much",
    "etherium",
    "paid",
    "aetherium",
    "miner",
    "transaction",
    "see",
    "transaction",
    "type",
    "erp",
    "15",
    "five",
    "nine",
    "eip",
    "15",
    "five",
    "nine",
    "version",
    "transactions",
    "like",
    "said",
    "every",
    "blockchain",
    "going",
    "different",
    "fee",
    "burning",
    "fee",
    "gas",
    "process",
    "going",
    "little",
    "bit",
    "different",
    "blockchains",
    "limited",
    "block",
    "space",
    "transactions",
    "gas",
    "price",
    "costs",
    "transaction",
    "included",
    "one",
    "blocks",
    "changes",
    "based",
    "much",
    "demand",
    "base",
    "gas",
    "fee",
    "aetherium",
    "go",
    "depending",
    "many",
    "people",
    "sending",
    "transactions",
    "many",
    "people",
    "want",
    "included",
    "block",
    "ton",
    "people",
    "want",
    "included",
    "block",
    "means",
    "ton",
    "gas",
    "obviously",
    "going",
    "get",
    "burnt",
    "left",
    "link",
    "video",
    "github",
    "repository",
    "section",
    "youtuber",
    "amazing",
    "job",
    "breaking",
    "eip",
    "15",
    "five",
    "nine",
    "gas",
    "model",
    "actually",
    "works",
    "highly",
    "recommend",
    "pause",
    "video",
    "watch",
    "video",
    "understand",
    "base",
    "fee",
    "gets",
    "programmatically",
    "algorithmically",
    "adjusted",
    "try",
    "target",
    "blocks",
    "50",
    "full",
    "50",
    "full",
    "base",
    "fee",
    "automatically",
    "goes",
    "less",
    "50",
    "full",
    "base",
    "fee",
    "goes",
    "lot",
    "basics",
    "transaction",
    "works",
    "little",
    "confusing",
    "let",
    "quick",
    "refresher",
    "everything",
    "unique",
    "transaction",
    "hash",
    "uniquely",
    "identifies",
    "transaction",
    "blockchain",
    "see",
    "status",
    "see",
    "block",
    "number",
    "confirmed",
    "one",
    "thing",
    "want",
    "look",
    "scroll",
    "see",
    "block",
    "number",
    "block",
    "confirmations",
    "many",
    "blocks",
    "mined",
    "since",
    "block",
    "included",
    "like",
    "saw",
    "blockchain",
    "demo",
    "longer",
    "blockchain",
    "gets",
    "harder",
    "tamper",
    "secure",
    "typically",
    "see",
    "processes",
    "say",
    "something",
    "20",
    "block",
    "confirmations",
    "30",
    "block",
    "confirmations",
    "etc",
    "reason",
    "wait",
    "block",
    "confirmations",
    "want",
    "make",
    "sure",
    "transaction",
    "actually",
    "included",
    "actually",
    "see",
    "block",
    "transaction",
    "included",
    "transactions",
    "different",
    "details",
    "much",
    "gas",
    "used",
    "gas",
    "limit",
    "etc",
    "timestamp",
    "transaction",
    "happened",
    "see",
    "see",
    "value",
    "see",
    "transaction",
    "fee",
    "see",
    "right",
    "blocked",
    "base",
    "fee",
    "per",
    "gas",
    "plus",
    "max",
    "priority",
    "fee",
    "per",
    "gas",
    "times",
    "gas",
    "used",
    "see",
    "details",
    "gas",
    "gas",
    "price",
    "cost",
    "one",
    "unit",
    "gas",
    "gas",
    "limit",
    "max",
    "amount",
    "units",
    "gas",
    "willing",
    "pay",
    "transaction",
    "usage",
    "many",
    "actually",
    "got",
    "us",
    "base",
    "fee",
    "going",
    "base",
    "network",
    "fee",
    "per",
    "gas",
    "40",
    "way",
    "per",
    "one",
    "gas",
    "used",
    "max",
    "gas",
    "max",
    "gas",
    "price",
    "willing",
    "pay",
    "max",
    "priority",
    "gon",
    "na",
    "max",
    "gas",
    "price",
    "plus",
    "tip",
    "give",
    "miners",
    "see",
    "much",
    "burnt",
    "see",
    "transaction",
    "savings",
    "difference",
    "much",
    "actually",
    "used",
    "paid",
    "returned",
    "example",
    "transaction",
    "gas",
    "price",
    "ended",
    "picking",
    "little",
    "less",
    "max",
    "gas",
    "price",
    "gas",
    "price",
    "ended",
    "using",
    "little",
    "less",
    "max",
    "priority",
    "fee",
    "savings",
    "compared",
    "also",
    "see",
    "erp",
    "15",
    "five",
    "nine",
    "transaction",
    "see",
    "nonce",
    "zero",
    "transaction",
    "showing",
    "first",
    "nones",
    "course",
    "see",
    "input",
    "data",
    "transactions",
    "sending",
    "aetherium",
    "input",
    "data",
    "going",
    "blank",
    "see",
    "get",
    "smart",
    "contracts",
    "input",
    "data",
    "going",
    "blank",
    "going",
    "one",
    "important",
    "features",
    "transactions",
    "also",
    "notice",
    "state",
    "tab",
    "advanced",
    "tab",
    "shows",
    "different",
    "states",
    "changed",
    "based",
    "transaction",
    "going",
    "ignore",
    "one",
    "know",
    "blockchain",
    "works",
    "hood",
    "let",
    "talk",
    "blockchain",
    "fundamentals",
    "actually",
    "covered",
    "topics",
    "previous",
    "freako",
    "camp",
    "video",
    "let",
    "go",
    "first",
    "time",
    "listen",
    "concepts",
    "seem",
    "little",
    "bit",
    "hard",
    "grasp",
    "worry",
    "continue",
    "move",
    "course",
    "start",
    "make",
    "sense",
    "see",
    "used",
    "real",
    "examples",
    "definitely",
    "would",
    "recommend",
    "going",
    "back",
    "rewatching",
    "listening",
    "parts",
    "quite",
    "get",
    "asking",
    "questions",
    "discussions",
    "tab",
    "github",
    "repository",
    "awesome",
    "know",
    "cryptography",
    "pieces",
    "little",
    "nitty",
    "gritties",
    "blockchain",
    "actually",
    "works",
    "signatures",
    "work",
    "everything",
    "sticks",
    "together",
    "let",
    "talk",
    "little",
    "bit",
    "works",
    "actuality",
    "really",
    "going",
    "lot",
    "different",
    "blockchain",
    "slightly",
    "different",
    "algorithms",
    "slightly",
    "different",
    "metrics",
    "criteria",
    "lot",
    "stuff",
    "talking",
    "specific",
    "implementations",
    "keep",
    "mind",
    "exact",
    "algorithm",
    "might",
    "little",
    "bit",
    "different",
    "concepts",
    "still",
    "going",
    "exactly",
    "hashing",
    "hash",
    "function",
    "going",
    "matter",
    "look",
    "decentralized",
    "blockchain",
    "going",
    "matter",
    "look",
    "actually",
    "implemented",
    "going",
    "little",
    "bit",
    "different",
    "traditionally",
    "run",
    "application",
    "website",
    "something",
    "connects",
    "server",
    "interacting",
    "centralized",
    "entity",
    "unlike",
    "saw",
    "blockchain",
    "multiple",
    "different",
    "peers",
    "going",
    "run",
    "single",
    "centralized",
    "group",
    "still",
    "could",
    "run",
    "many",
    "different",
    "servers",
    "servers",
    "still",
    "going",
    "controlled",
    "centralized",
    "group",
    "blockchains",
    "saw",
    "run",
    "network",
    "different",
    "independent",
    "nodes",
    "saw",
    "peer",
    "peer",
    "b",
    "piercey",
    "different",
    "examples",
    "different",
    "independent",
    "users",
    "running",
    "blockchain",
    "technology",
    "node",
    "use",
    "term",
    "node",
    "usually",
    "referring",
    "single",
    "instance",
    "decentralized",
    "system",
    "say",
    "single",
    "node",
    "talking",
    "blockchain",
    "talking",
    "one",
    "pure",
    "pure",
    "bs",
    "pure",
    "c",
    "running",
    "blockchain",
    "software",
    "talking",
    "one",
    "server",
    "running",
    "technology",
    "network",
    "combination",
    "nodes",
    "interacting",
    "creates",
    "entire",
    "blockchain",
    "makes",
    "potent",
    "anybody",
    "join",
    "network",
    "decentralized",
    "barrier",
    "entry",
    "little",
    "bit",
    "hardware",
    "requirements",
    "getting",
    "correct",
    "materials",
    "run",
    "software",
    "running",
    "software",
    "anybody",
    "join",
    "networks",
    "participate",
    "makes",
    "truly",
    "decentralized",
    "fact",
    "go",
    "github",
    "right",
    "run",
    "aetherium",
    "node",
    "seconds",
    "traditional",
    "world",
    "applications",
    "run",
    "centralized",
    "entities",
    "entity",
    "goes",
    "maliciously",
    "bribed",
    "decides",
    "want",
    "shut",
    "ca",
    "ones",
    "control",
    "everything",
    "blockchains",
    "contrast",
    "problem",
    "one",
    "node",
    "one",
    "entity",
    "runs",
    "several",
    "nodes",
    "goes",
    "since",
    "many",
    "independent",
    "nodes",
    "running",
    "matter",
    "blockchain",
    "system",
    "persist",
    "long",
    "least",
    "one",
    "node",
    "always",
    "running",
    "luckily",
    "us",
    "popular",
    "chains",
    "like",
    "bitcoin",
    "aetherium",
    "1000s",
    "1000s",
    "nodes",
    "showed",
    "demo",
    "one",
    "node",
    "acts",
    "maliciously",
    "nodes",
    "ignore",
    "node",
    "kick",
    "even",
    "punish",
    "systems",
    "easily",
    "check",
    "everybody",
    "else",
    "node",
    "see",
    "okay",
    "one",
    "sync",
    "majority",
    "yes",
    "majority",
    "rules",
    "comes",
    "blockchain",
    "blockchain",
    "keeps",
    "full",
    "list",
    "every",
    "transaction",
    "interaction",
    "happened",
    "blockchain",
    "saw",
    "node",
    "tries",
    "act",
    "maliciously",
    "hashes",
    "going",
    "way",
    "whack",
    "going",
    "match",
    "everybody",
    "else",
    "gives",
    "blockchains",
    "incredibly",
    "potent",
    "immutability",
    "trait",
    "nothing",
    "changed",
    "corrupted",
    "essence",
    "think",
    "blockchain",
    "decentralized",
    "database",
    "aetherium",
    "extra",
    "additional",
    "feature",
    "also",
    "computation",
    "decentralized",
    "manner",
    "let",
    "talk",
    "consensus",
    "proof",
    "work",
    "proof",
    "stake",
    "probably",
    "heard",
    "really",
    "important",
    "blockchains",
    "actually",
    "work",
    "went",
    "blockchain",
    "example",
    "mining",
    "feature",
    "known",
    "proof",
    "work",
    "proof",
    "work",
    "proof",
    "steak",
    "fall",
    "umbrella",
    "consensus",
    "consensus",
    "really",
    "important",
    "topic",
    "comes",
    "blockchains",
    "consensus",
    "defined",
    "mechanism",
    "used",
    "reach",
    "agreement",
    "state",
    "single",
    "value",
    "blockchain",
    "especially",
    "decentralized",
    "system",
    "briefly",
    "alluded",
    "consensus",
    "mechanism",
    "blockchain",
    "example",
    "said",
    "one",
    "change",
    "something",
    "two",
    "majority",
    "rule",
    "kick",
    "one",
    "part",
    "consensus",
    "mechanism",
    "roughly",
    "consensus",
    "protocol",
    "blockchain",
    "decentralized",
    "system",
    "broken",
    "two",
    "pieces",
    "chain",
    "selection",
    "algorithm",
    "civil",
    "resistance",
    "mechanism",
    "mining",
    "piece",
    "proof",
    "work",
    "algorithm",
    "known",
    "civil",
    "resistance",
    "mechanism",
    "aetherium",
    "bitcoin",
    "currently",
    "use",
    "please",
    "note",
    "depending",
    "watching",
    "eath",
    "two",
    "longer",
    "proof",
    "work",
    "proof",
    "work",
    "known",
    "civil",
    "resistance",
    "mechanism",
    "defines",
    "way",
    "figure",
    "block",
    "author",
    "node",
    "going",
    "node",
    "work",
    "find",
    "mine",
    "author",
    "block",
    "nodes",
    "verify",
    "accurate",
    "civil",
    "resistance",
    "blockchains",
    "ability",
    "defend",
    "users",
    "creating",
    "large",
    "number",
    "pseudo",
    "anonymous",
    "identities",
    "gain",
    "disproportionately",
    "advantageous",
    "influence",
    "set",
    "system",
    "layman",
    "terms",
    "basically",
    "way",
    "blockchain",
    "defend",
    "somebody",
    "making",
    "bunch",
    "fake",
    "blockchains",
    "get",
    "rewards",
    "two",
    "types",
    "civil",
    "resistance",
    "mechanisms",
    "going",
    "talk",
    "namely",
    "proof",
    "work",
    "proof",
    "stake",
    "let",
    "talk",
    "proof",
    "work",
    "little",
    "bit",
    "depth",
    "first",
    "proof",
    "work",
    "civil",
    "resistant",
    "single",
    "node",
    "go",
    "computationally",
    "expensive",
    "process",
    "called",
    "mining",
    "demonstrated",
    "earlier",
    "figure",
    "answer",
    "blockchains",
    "riddle",
    "finding",
    "correct",
    "nonce",
    "whatever",
    "blockchain",
    "system",
    "place",
    "proof",
    "work",
    "works",
    "matter",
    "many",
    "pseudo",
    "anonymous",
    "accounts",
    "make",
    "one",
    "still",
    "undergo",
    "computationally",
    "expensive",
    "activity",
    "finding",
    "answer",
    "proof",
    "work",
    "problem",
    "proof",
    "work",
    "riddle",
    "demonstration",
    "finding",
    "nonce",
    "first",
    "four",
    "zeros",
    "blockchain",
    "might",
    "change",
    "riddle",
    "work",
    "change",
    "problem",
    "little",
    "bit",
    "different",
    "fact",
    "blockchains",
    "make",
    "riddle",
    "intentionally",
    "hard",
    "intentionally",
    "easy",
    "change",
    "called",
    "block",
    "time",
    "block",
    "time",
    "long",
    "takes",
    "blocks",
    "published",
    "proportional",
    "hard",
    "algorithms",
    "problems",
    "actually",
    "change",
    "depending",
    "long",
    "want",
    "blockchain",
    "system",
    "wants",
    "block",
    "time",
    "long",
    "make",
    "problem",
    "hard",
    "wanted",
    "short",
    "make",
    "problem",
    "lot",
    "easier",
    "talk",
    "civil",
    "attacks",
    "little",
    "bit",
    "affect",
    "system",
    "proof",
    "work",
    "verifiable",
    "way",
    "figure",
    "block",
    "author",
    "civil",
    "resistant",
    "need",
    "combine",
    "chain",
    "selection",
    "rule",
    "create",
    "consensus",
    "consensus",
    "protocols",
    "features",
    "roughly",
    "two",
    "pieces",
    "going",
    "look",
    "second",
    "piece",
    "going",
    "chain",
    "selection",
    "rule",
    "know",
    "blockchain",
    "actually",
    "real",
    "blockchain",
    "true",
    "blockchain",
    "bitcoin",
    "aetherium",
    "use",
    "form",
    "consensus",
    "called",
    "nakamoto",
    "consensus",
    "combination",
    "proof",
    "work",
    "longest",
    "chain",
    "rule",
    "decentralized",
    "network",
    "side",
    "whichever",
    "blockchain",
    "longest",
    "chain",
    "number",
    "blocks",
    "going",
    "chain",
    "use",
    "makes",
    "lot",
    "sense",
    "every",
    "additional",
    "block",
    "chain",
    "behind",
    "going",
    "take",
    "computation",
    "come",
    "saw",
    "transaction",
    "actually",
    "saw",
    "confirmations",
    "number",
    "confirmations",
    "number",
    "additional",
    "blocks",
    "added",
    "transaction",
    "went",
    "block",
    "see",
    "confirmations",
    "means",
    "block",
    "transaction",
    "two",
    "blocks",
    "ahead",
    "longest",
    "chain",
    "want",
    "point",
    "lot",
    "people",
    "use",
    "proof",
    "work",
    "consensus",
    "protocol",
    "want",
    "say",
    "little",
    "bit",
    "inaccurate",
    "sometimes",
    "people",
    "use",
    "interchangeably",
    "proof",
    "work",
    "piece",
    "overall",
    "consensus",
    "protocol",
    "bitcoin",
    "aetherium",
    "one",
    "current",
    "case",
    "nakamoto",
    "consensus",
    "nakamoto",
    "consensus",
    "combination",
    "proof",
    "work",
    "longest",
    "chain",
    "rule",
    "equally",
    "important",
    "proof",
    "work",
    "also",
    "tells",
    "us",
    "transaction",
    "fees",
    "block",
    "rewards",
    "go",
    "remember",
    "made",
    "transaction",
    "talk",
    "gas",
    "transaction",
    "fee",
    "getting",
    "paid",
    "getting",
    "transaction",
    "transaction",
    "fee",
    "going",
    "miners",
    "validators",
    "proof",
    "work",
    "network",
    "called",
    "miners",
    "proof",
    "stake",
    "network",
    "called",
    "validators",
    "little",
    "bit",
    "different",
    "get",
    "talk",
    "proof",
    "stake",
    "proof",
    "work",
    "system",
    "nodes",
    "competing",
    "find",
    "answer",
    "blockchain",
    "riddle",
    "remember",
    "example",
    "find",
    "hash",
    "four",
    "zeros",
    "start",
    "depending",
    "blockchain",
    "implementation",
    "riddle",
    "going",
    "little",
    "bit",
    "different",
    "nodes",
    "trying",
    "many",
    "possible",
    "try",
    "get",
    "answer",
    "first",
    "first",
    "node",
    "figure",
    "answer",
    "blockchain",
    "real",
    "gon",
    "na",
    "get",
    "transaction",
    "fee",
    "gon",
    "na",
    "get",
    "paid",
    "node",
    "gets",
    "paid",
    "actually",
    "get",
    "paid",
    "two",
    "different",
    "ways",
    "one",
    "going",
    "transaction",
    "fee",
    "another",
    "piece",
    "going",
    "block",
    "reward",
    "remember",
    "talked",
    "alternating",
    "gas",
    "price",
    "gray",
    "transaction",
    "well",
    "transaction",
    "fee",
    "going",
    "pay",
    "blockchain",
    "nodes",
    "including",
    "transaction",
    "block",
    "reward",
    "given",
    "nodes",
    "protocol",
    "blockchain",
    "probably",
    "heard",
    "bitcoin",
    "halving",
    "halving",
    "referring",
    "block",
    "reward",
    "getting",
    "cut",
    "half",
    "supposed",
    "cut",
    "half",
    "roughly",
    "every",
    "four",
    "years",
    "block",
    "reward",
    "increases",
    "circulating",
    "amount",
    "whatever",
    "cryptocurrency",
    "rewarded",
    "example",
    "aetherium",
    "block",
    "reward",
    "giving",
    "aetherium",
    "bitcoin",
    "block",
    "reward",
    "giving",
    "bitcoin",
    "nodes",
    "competing",
    "first",
    "one",
    "find",
    "transaction",
    "first",
    "one",
    "find",
    "answer",
    "problem",
    "ones",
    "win",
    "block",
    "reward",
    "transaction",
    "fee",
    "block",
    "chains",
    "like",
    "bitcoin",
    "example",
    "set",
    "time",
    "longer",
    "going",
    "give",
    "block",
    "rewards",
    "miners",
    "nodes",
    "going",
    "get",
    "paid",
    "trends",
    "action",
    "fees",
    "gas",
    "fee",
    "paid",
    "whoever",
    "initialize",
    "transaction",
    "got",
    "funds",
    "faucet",
    "server",
    "somebody",
    "else",
    "paying",
    "transaction",
    "fee",
    "us",
    "however",
    "sent",
    "ether",
    "one",
    "account",
    "another",
    "first",
    "account",
    "actually",
    "paid",
    "transaction",
    "fee",
    "send",
    "ether",
    "proof",
    "steak",
    "also",
    "gas",
    "fee",
    "paid",
    "validators",
    "instead",
    "miners",
    "talk",
    "little",
    "bit",
    "let",
    "talk",
    "two",
    "types",
    "attacks",
    "happen",
    "blockchain",
    "worlds",
    "let",
    "talk",
    "first",
    "one",
    "sybil",
    "attack",
    "sybil",
    "attack",
    "user",
    "creates",
    "whole",
    "bunch",
    "pseudo",
    "anonymous",
    "accounts",
    "try",
    "influence",
    "network",
    "obviously",
    "bitcoin",
    "aetherium",
    "really",
    "really",
    "difficult",
    "user",
    "needs",
    "work",
    "proof",
    "work",
    "ton",
    "collateral",
    "proof",
    "stake",
    "talk",
    "bit",
    "prevalent",
    "attack",
    "known",
    "51",
    "attack",
    "saw",
    "part",
    "consensus",
    "protocol",
    "block",
    "chains",
    "going",
    "agree",
    "longest",
    "chain",
    "one",
    "going",
    "go",
    "long",
    "matches",
    "51",
    "rest",
    "network",
    "means",
    "longest",
    "chain",
    "51",
    "rest",
    "network",
    "called",
    "fork",
    "network",
    "bring",
    "network",
    "onto",
    "longest",
    "chain",
    "sybil",
    "attacks",
    "obviously",
    "single",
    "node",
    "single",
    "entity",
    "tries",
    "affect",
    "decent",
    "reality",
    "network",
    "pretending",
    "multiple",
    "different",
    "people",
    "although",
    "person",
    "entity",
    "like",
    "said",
    "really",
    "difficult",
    "proof",
    "work",
    "proof",
    "steak",
    "see",
    "blockchains",
    "democratic",
    "whichever",
    "blockchain",
    "buy",
    "longest",
    "blockchain",
    "whole",
    "system",
    "going",
    "corroborate",
    "nodes",
    "produce",
    "new",
    "block",
    "add",
    "longest",
    "chain",
    "nodes",
    "follow",
    "longest",
    "chain",
    "rest",
    "network",
    "agreeing",
    "add",
    "blocks",
    "chain",
    "follow",
    "small",
    "reorganizations",
    "actually",
    "pretty",
    "common",
    "blockchain",
    "picks",
    "block",
    "different",
    "longest",
    "chain",
    "puts",
    "swap",
    "another",
    "block",
    "continue",
    "different",
    "blockchain",
    "however",
    "group",
    "nodes",
    "enough",
    "nodes",
    "enough",
    "power",
    "could",
    "essentially",
    "51",
    "network",
    "influence",
    "network",
    "whatever",
    "direction",
    "want",
    "known",
    "51",
    "attack",
    "happened",
    "blockchains",
    "like",
    "ethereum",
    "classic",
    "aetherium",
    "bigger",
    "blockchain",
    "decentralized",
    "secure",
    "becomes",
    "watch",
    "video",
    "become",
    "blockchain",
    "engineering",
    "expert",
    "definitely",
    "recommend",
    "run",
    "node",
    "well",
    "going",
    "increase",
    "security",
    "network",
    "whole",
    "running",
    "node",
    "proof",
    "work",
    "fantastic",
    "allows",
    "us",
    "easily",
    "protect",
    "sybil",
    "attacks",
    "keep",
    "blockchain",
    "decentralized",
    "secure",
    "however",
    "drawbacks",
    "well",
    "proof",
    "work",
    "costs",
    "lot",
    "electricity",
    "every",
    "single",
    "node",
    "running",
    "fast",
    "win",
    "race",
    "get",
    "rewards",
    "leads",
    "obviously",
    "environmental",
    "impact",
    "since",
    "proof",
    "work",
    "nakamoto",
    "consensus",
    "lot",
    "protocols",
    "taken",
    "idea",
    "gone",
    "different",
    "direction",
    "different",
    "civil",
    "resistance",
    "protocol",
    "lot",
    "intention",
    "lot",
    "environmentally",
    "friendly",
    "popular",
    "one",
    "right",
    "proof",
    "stake",
    "chains",
    "already",
    "using",
    "proof",
    "stake",
    "protocol",
    "live",
    "thriving",
    "like",
    "avalanche",
    "lalana",
    "polygon",
    "polka",
    "dot",
    "terra",
    "additionally",
    "aetherium",
    "decided",
    "upgrade",
    "eath",
    "two",
    "proof",
    "stake",
    "algorithm",
    "well",
    "also",
    "features",
    "talk",
    "bit",
    "quick",
    "aside",
    "tools",
    "going",
    "learn",
    "still",
    "going",
    "work",
    "eath",
    "two",
    "depending",
    "watch",
    "everything",
    "still",
    "valid",
    "let",
    "talk",
    "proof",
    "stake",
    "different",
    "civil",
    "resistance",
    "mechanism",
    "instead",
    "solving",
    "difficult",
    "problem",
    "proof",
    "stake",
    "nodes",
    "put",
    "collateral",
    "going",
    "behave",
    "honestly",
    "aka",
    "stake",
    "example",
    "aetherium",
    "two",
    "nodes",
    "put",
    "aetherium",
    "stake",
    "going",
    "behave",
    "honestly",
    "network",
    "misbehave",
    "network",
    "going",
    "slashed",
    "remove",
    "steak",
    "obviously",
    "good",
    "civil",
    "resistance",
    "mechanism",
    "try",
    "create",
    "whole",
    "bunch",
    "anonymous",
    "accounts",
    "one",
    "accounts",
    "put",
    "stake",
    "misbehave",
    "going",
    "run",
    "risk",
    "losing",
    "money",
    "put",
    "collateral",
    "system",
    "miners",
    "actually",
    "called",
    "validators",
    "longer",
    "binding",
    "anything",
    "actually",
    "validating",
    "nodes",
    "unlike",
    "proof",
    "work",
    "every",
    "node",
    "racing",
    "first",
    "one",
    "find",
    "block",
    "proof",
    "stake",
    "nodes",
    "actually",
    "randomly",
    "chosen",
    "propose",
    "new",
    "block",
    "rest",
    "validators",
    "validate",
    "node",
    "proposed",
    "block",
    "honestly",
    "saw",
    "cryptography",
    "lesson",
    "usually",
    "easy",
    "nodes",
    "verify",
    "proposal",
    "transaction",
    "honest",
    "randomness",
    "really",
    "important",
    "topic",
    "talking",
    "blockchains",
    "keep",
    "mind",
    "blockchains",
    "deterministic",
    "systems",
    "walled",
    "gardens",
    "rest",
    "world",
    "know",
    "deterministic",
    "system",
    "definition",
    "ca",
    "random",
    "numbers",
    "choose",
    "random",
    "validators",
    "system",
    "changes",
    "blockchain",
    "blockchain",
    "actually",
    "choosing",
    "node",
    "change",
    "blockchain",
    "blockchain",
    "eath",
    "two",
    "using",
    "called",
    "rand",
    "doubt",
    "least",
    "original",
    "implementation",
    "decentralized",
    "autonomous",
    "organization",
    "collectively",
    "chooses",
    "random",
    "number",
    "collectively",
    "chooses",
    "node",
    "going",
    "run",
    "next",
    "going",
    "dive",
    "deep",
    "good",
    "chance",
    "might",
    "change",
    "future",
    "go",
    "randomness",
    "solutions",
    "blockchain",
    "later",
    "course",
    "proof",
    "stake",
    "obviously",
    "pros",
    "cons",
    "well",
    "pros",
    "great",
    "civil",
    "resistance",
    "mechanism",
    "great",
    "way",
    "figure",
    "author",
    "block",
    "pros",
    "way",
    "less",
    "computationally",
    "expensive",
    "figure",
    "new",
    "block",
    "instead",
    "every",
    "single",
    "node",
    "network",
    "trying",
    "one",
    "node",
    "needs",
    "rest",
    "nodes",
    "need",
    "validate",
    "cons",
    "usually",
    "considered",
    "slightly",
    "less",
    "decentralized",
    "network",
    "due",
    "upfront",
    "staking",
    "costs",
    "cost",
    "participate",
    "gets",
    "little",
    "bit",
    "philosophical",
    "battle",
    "decentralized",
    "decentralized",
    "enough",
    "think",
    "community",
    "decide",
    "progress",
    "think",
    "learn",
    "decentralized",
    "decentralized",
    "enough",
    "general",
    "consensus",
    "amongst",
    "blockchain",
    "engineers",
    "though",
    "proof",
    "stake",
    "decentralized",
    "secure",
    "massive",
    "environmental",
    "impact",
    "improvement",
    "one",
    "two",
    "main",
    "reasons",
    "eath",
    "shifting",
    "eath",
    "two",
    "reduces",
    "environmental",
    "impact",
    "99",
    "main",
    "pieces",
    "proof",
    "work",
    "proof",
    "stake",
    "want",
    "talk",
    "another",
    "concept",
    "really",
    "important",
    "ecosystems",
    "scalability",
    "talking",
    "gas",
    "prices",
    "saying",
    "gas",
    "prices",
    "get",
    "really",
    "high",
    "lot",
    "people",
    "want",
    "send",
    "transaction",
    "block",
    "much",
    "black",
    "space",
    "nodes",
    "add",
    "many",
    "notes",
    "lot",
    "people",
    "want",
    "use",
    "blockchain",
    "gas",
    "price",
    "skyrockets",
    "scalable",
    "want",
    "add",
    "people",
    "blockchains",
    "going",
    "cost",
    "use",
    "blockchains",
    "people",
    "going",
    "want",
    "get",
    "blocks",
    "means",
    "kind",
    "ceiling",
    "many",
    "people",
    "use",
    "system",
    "financial",
    "constraints",
    "get",
    "imposed",
    "gas",
    "prices",
    "keep",
    "rising",
    "aetherium",
    "attacking",
    "environmental",
    "impact",
    "proof",
    "work",
    "switching",
    "proof",
    "steak",
    "also",
    "implementing",
    "new",
    "methodology",
    "called",
    "sharding",
    "sharding",
    "solution",
    "scalability",
    "problem",
    "sharded",
    "blockchain",
    "really",
    "means",
    "going",
    "blockchain",
    "blockchains",
    "main",
    "chain",
    "going",
    "coordinate",
    "everything",
    "amongst",
    "several",
    "chains",
    "hook",
    "main",
    "chain",
    "means",
    "chains",
    "people",
    "make",
    "transactions",
    "effectively",
    "increasing",
    "amount",
    "block",
    "space",
    "sharding",
    "greatly",
    "increase",
    "number",
    "transactions",
    "blockchain",
    "layer",
    "one",
    "another",
    "term",
    "might",
    "first",
    "time",
    "heard",
    "layer",
    "one",
    "going",
    "talk",
    "layer",
    "one",
    "layer",
    "twos",
    "terms",
    "scalability",
    "really",
    "quickly",
    "well",
    "layer",
    "one",
    "refers",
    "base",
    "layer",
    "blockchain",
    "implementation",
    "bitcoins",
    "layer",
    "one",
    "aetherium",
    "layer",
    "one",
    "avalanches",
    "layer",
    "one",
    "base",
    "layer",
    "blockchain",
    "solutions",
    "layer",
    "two",
    "application",
    "added",
    "top",
    "layer",
    "one",
    "added",
    "top",
    "blockchain",
    "examples",
    "layer",
    "twos",
    "going",
    "chain",
    "link",
    "arbitrage",
    "optimism",
    "arbitrage",
    "optimism",
    "interesting",
    "layer",
    "twos",
    "also",
    "look",
    "solve",
    "scalability",
    "issue",
    "arbitrage",
    "optimism",
    "known",
    "roll",
    "ups",
    "roll",
    "transactions",
    "layer",
    "one",
    "like",
    "aetherium",
    "going",
    "go",
    "deep",
    "roll",
    "ups",
    "actually",
    "work",
    "really",
    "need",
    "know",
    "roll",
    "kind",
    "like",
    "sharded",
    "chain",
    "derive",
    "security",
    "base",
    "layer",
    "layer",
    "one",
    "like",
    "aetherium",
    "bulk",
    "send",
    "transactions",
    "onto",
    "layer",
    "one",
    "solve",
    "scalability",
    "issues",
    "another",
    "blockchain",
    "people",
    "make",
    "transactions",
    "still",
    "kind",
    "base",
    "aetherium",
    "layer",
    "different",
    "side",
    "chains",
    "side",
    "chains",
    "derive",
    "security",
    "protocols",
    "roll",
    "ups",
    "derive",
    "security",
    "base",
    "layers",
    "arbitrage",
    "optimism",
    "example",
    "going",
    "secure",
    "aetherium",
    "fantastic",
    "guys",
    "go",
    "little",
    "bit",
    "deeper",
    "roll",
    "ups",
    "left",
    "link",
    "description",
    "right",
    "talked",
    "lot",
    "stuff",
    "let",
    "quick",
    "recap",
    "moving",
    "aetherium",
    "bitcoin",
    "currently",
    "proof",
    "work",
    "blockchains",
    "follow",
    "nakamoto",
    "consensus",
    "however",
    "aetherium",
    "moving",
    "aetherium",
    "two",
    "proof",
    "stake",
    "sharded",
    "blockchain",
    "sybil",
    "attacks",
    "prevented",
    "due",
    "protocols",
    "like",
    "proof",
    "work",
    "proof",
    "steak",
    "51",
    "attacks",
    "grow",
    "increasingly",
    "harder",
    "size",
    "blockchain",
    "run",
    "node",
    "consensus",
    "mechanism",
    "allows",
    "blockchain",
    "agree",
    "upon",
    "state",
    "blockchain",
    "sharding",
    "roll",
    "ups",
    "solutions",
    "scalability",
    "issues",
    "layer",
    "ones",
    "layer",
    "one",
    "based",
    "blockchain",
    "implementation",
    "like",
    "bitcoin",
    "aetherium",
    "blockchain",
    "scalability",
    "problem",
    "always",
    "enough",
    "block",
    "space",
    "amount",
    "transactions",
    "want",
    "get",
    "leads",
    "high",
    "gas",
    "prices",
    "gas",
    "prices",
    "much",
    "costs",
    "interact",
    "blockchain",
    "blockchain",
    "basics",
    "blockchain",
    "explainers",
    "information",
    "go",
    "world",
    "start",
    "working",
    "blockchains",
    "interacting",
    "blockchains",
    "least",
    "level",
    "knowledge",
    "going",
    "incredibly",
    "proud",
    "making",
    "far",
    "definitely",
    "sure",
    "give",
    "pat",
    "back",
    "round",
    "applause",
    "gotten",
    "lot",
    "basics",
    "fundamentals",
    "way",
    "let",
    "start",
    "jumping",
    "coding",
    "aspect",
    "going",
    "learn",
    "actually",
    "build",
    "smart",
    "contracts",
    "build",
    "trust",
    "minimized",
    "agreements",
    "blockchains",
    "smart",
    "contract",
    "platforms",
    "next",
    "section",
    "solidity",
    "basics",
    "solidity",
    "fundamentals",
    "section",
    "give",
    "skills",
    "start",
    "actually",
    "coding",
    "solidity",
    "understanding",
    "smart",
    "contracts",
    "work",
    "underneath",
    "hood",
    "point",
    "absolutely",
    "give",
    "high",
    "five",
    "maybe",
    "say",
    "hi",
    "github",
    "discussions",
    "maybe",
    "say",
    "hi",
    "community",
    "twitter",
    "reddit",
    "etc",
    "proud",
    "making",
    "far",
    "journey",
    "really",
    "begun",
    "already",
    "learned",
    "much",
    "let",
    "begin",
    "next",
    "section",
    "let",
    "jump",
    "code",
    "getting",
    "coding",
    "sections",
    "need",
    "stress",
    "absolutely",
    "use",
    "github",
    "repository",
    "associated",
    "course",
    "come",
    "github",
    "repo",
    "scroll",
    "click",
    "lesson",
    "right",
    "lesson",
    "two",
    "welcome",
    "remix",
    "simple",
    "storage",
    "click",
    "give",
    "ton",
    "timestamps",
    "helpful",
    "links",
    "associated",
    "lesson",
    "additionally",
    "biggest",
    "piece",
    "code",
    "available",
    "right",
    "underneath",
    "lesson",
    "title",
    "code",
    "going",
    "working",
    "well",
    "additional",
    "information",
    "work",
    "code",
    "please",
    "asking",
    "questions",
    "entering",
    "discussions",
    "though",
    "please",
    "ask",
    "questions",
    "full",
    "blockchain",
    "solidity",
    "course",
    "repository",
    "thank",
    "top",
    "repository",
    "scroll",
    "resources",
    "course",
    "section",
    "brings",
    "us",
    "github",
    "discussions",
    "ask",
    "questions",
    "github",
    "discussion",
    "section",
    "course",
    "additionally",
    "stack",
    "exchange",
    "aetherium",
    "stack",
    "overflow",
    "talk",
    "little",
    "bit",
    "format",
    "questions",
    "ask",
    "questions",
    "best",
    "way",
    "highest",
    "chance",
    "getting",
    "good",
    "answer",
    "later",
    "lesson",
    "highly",
    "recommend",
    "pause",
    "make",
    "accounts",
    "stack",
    "exchange",
    "aetherium",
    "stack",
    "overflow",
    "github",
    "right",
    "already",
    "links",
    "course",
    "found",
    "github",
    "repository",
    "typically",
    "coding",
    "section",
    "start",
    "giving",
    "quick",
    "overview",
    "code",
    "going",
    "working",
    "going",
    "building",
    "towards",
    "since",
    "everything",
    "going",
    "project",
    "based",
    "going",
    "learn",
    "first",
    "one",
    "remix",
    "though",
    "going",
    "skip",
    "lot",
    "stuff",
    "get",
    "used",
    "highly",
    "recommend",
    "coding",
    "remix",
    "follow",
    "along",
    "code",
    "along",
    "remember",
    "change",
    "speed",
    "coding",
    "fast",
    "coding",
    "slow",
    "start",
    "going",
    "jump",
    "tool",
    "called",
    "remix",
    "unsure",
    "get",
    "link",
    "remix",
    "github",
    "repository",
    "gon",
    "na",
    "writing",
    "code",
    "welcome",
    "remix",
    "ide",
    "integrated",
    "development",
    "environment",
    "going",
    "learn",
    "code",
    "interact",
    "smart",
    "contracts",
    "want",
    "go",
    "ahead",
    "accept",
    "help",
    "remix",
    "never",
    "give",
    "quick",
    "walkthrough",
    "tools",
    "remix",
    "actually",
    "going",
    "skip",
    "gon",
    "na",
    "explain",
    "everything",
    "going",
    "remix",
    "powerful",
    "tool",
    "lot",
    "features",
    "allow",
    "us",
    "really",
    "see",
    "interact",
    "smart",
    "contracts",
    "eventually",
    "going",
    "move",
    "remix",
    "actually",
    "local",
    "development",
    "environment",
    "however",
    "remix",
    "absolutely",
    "fantastic",
    "learning",
    "fundamentals",
    "solidity",
    "highly",
    "recommend",
    "everybody",
    "start",
    "remix",
    "getting",
    "started",
    "come",
    "remix",
    "ide",
    "whole",
    "lot",
    "different",
    "things",
    "popping",
    "us",
    "lot",
    "different",
    "plugins",
    "well",
    "since",
    "going",
    "working",
    "solidity",
    "going",
    "language",
    "using",
    "develop",
    "smart",
    "contracts",
    "go",
    "ahead",
    "get",
    "started",
    "clicking",
    "solidity",
    "plugin",
    "couple",
    "tools",
    "show",
    "side",
    "even",
    "click",
    "solidity",
    "plugin",
    "still",
    "able",
    "code",
    "solidity",
    "smart",
    "contracts",
    "left",
    "hand",
    "side",
    "going",
    "start",
    "actually",
    "interact",
    "things",
    "button",
    "top",
    "left",
    "files",
    "explore",
    "directories",
    "remix",
    "comes",
    "boilerplate",
    "different",
    "contracts",
    "different",
    "scripts",
    "different",
    "tests",
    "different",
    "dependencies",
    "going",
    "minimize",
    "little",
    "bit",
    "want",
    "go",
    "ahead",
    "right",
    "click",
    "delete",
    "folders",
    "contracts",
    "folders",
    "feel",
    "free",
    "kind",
    "like",
    "feel",
    "free",
    "leave",
    "well",
    "going",
    "leave",
    "contracts",
    "folder",
    "going",
    "delete",
    "different",
    "files",
    "inside",
    "start",
    "blank",
    "slate",
    "projects",
    "come",
    "something",
    "known",
    "readme",
    "usually",
    "usually",
    "explains",
    "actually",
    "work",
    "code",
    "purposes",
    "going",
    "delete",
    "well",
    "follow",
    "along",
    "blank",
    "remix",
    "setup",
    "click",
    "contracts",
    "folder",
    "click",
    "little",
    "page",
    "icon",
    "create",
    "new",
    "file",
    "little",
    "box",
    "pop",
    "start",
    "typing",
    "text",
    "going",
    "type",
    "simple",
    "storage",
    "dot",
    "sol",
    "dot",
    "sol",
    "tells",
    "compilers",
    "going",
    "solidity",
    "file",
    "going",
    "code",
    "solidity",
    "solidity",
    "primary",
    "coding",
    "language",
    "smart",
    "contracts",
    "smart",
    "contract",
    "languages",
    "well",
    "solidity",
    "far",
    "dominant",
    "smart",
    "contract",
    "coding",
    "language",
    "simple",
    "storage",
    "dot",
    "soul",
    "contract",
    "right",
    "actually",
    "start",
    "coding",
    "solidity",
    "let",
    "start",
    "coding",
    "solidity",
    "click",
    "button",
    "right",
    "files",
    "button",
    "looks",
    "like",
    "solidity",
    "logo",
    "see",
    "bunch",
    "stuff",
    "pop",
    "different",
    "parameters",
    "us",
    "actually",
    "compile",
    "solidity",
    "code",
    "run",
    "first",
    "thing",
    "going",
    "need",
    "solidity",
    "smart",
    "contract",
    "going",
    "version",
    "solidity",
    "going",
    "use",
    "always",
    "top",
    "solidity",
    "code",
    "solidity",
    "constantly",
    "changing",
    "language",
    "constantly",
    "updating",
    "language",
    "relatively",
    "new",
    "compared",
    "languages",
    "need",
    "tell",
    "code",
    "hey",
    "version",
    "want",
    "use",
    "add",
    "solidity",
    "version",
    "pragma",
    "solidity",
    "version",
    "want",
    "use",
    "want",
    "choose",
    "specific",
    "version",
    "could",
    "say",
    "zero",
    "point",
    "current",
    "version",
    "date",
    "point",
    "getting",
    "used",
    "different",
    "versions",
    "solidity",
    "good",
    "practice",
    "different",
    "versions",
    "solidity",
    "considered",
    "stable",
    "others",
    "zero",
    "point",
    "one",
    "versions",
    "considered",
    "stable",
    "double",
    "slashes",
    "known",
    "comment",
    "places",
    "type",
    "stuff",
    "wo",
    "actually",
    "get",
    "executed",
    "wo",
    "get",
    "compiled",
    "really",
    "considered",
    "part",
    "code",
    "example",
    "could",
    "write",
    "hello",
    "patrick",
    "going",
    "run",
    "code",
    "part",
    "code",
    "would",
    "get",
    "completely",
    "ignored",
    "double",
    "backslash",
    "called",
    "comments",
    "coding",
    "building",
    "projects",
    "sure",
    "use",
    "comments",
    "tool",
    "advantage",
    "every",
    "time",
    "write",
    "new",
    "function",
    "learn",
    "something",
    "understand",
    "learned",
    "something",
    "new",
    "want",
    "remember",
    "put",
    "comment",
    "code",
    "going",
    "effective",
    "taking",
    "notes",
    "course",
    "making",
    "comments",
    "code",
    "saving",
    "code",
    "refer",
    "back",
    "later",
    "leave",
    "comments",
    "code",
    "leave",
    "notes",
    "code",
    "one",
    "best",
    "ways",
    "understand",
    "coding",
    "want",
    "refer",
    "back",
    "later",
    "comes",
    "versions",
    "solidity",
    "actually",
    "different",
    "ways",
    "actually",
    "write",
    "say",
    "want",
    "use",
    "zero",
    "point",
    "would",
    "write",
    "maybe",
    "okay",
    "use",
    "new",
    "version",
    "solidity",
    "zero",
    "point",
    "tell",
    "code",
    "okay",
    "new",
    "version",
    "put",
    "little",
    "caret",
    "tell",
    "solidity",
    "hey",
    "version",
    "zero",
    "point",
    "okay",
    "contract",
    "means",
    "zero",
    "point",
    "would",
    "work",
    "zero",
    "point",
    "point",
    "10",
    "etc",
    "wanted",
    "use",
    "would",
    "type",
    "like",
    "want",
    "use",
    "solidity",
    "versions",
    "specific",
    "range",
    "could",
    "something",
    "like",
    "say",
    "want",
    "solidity",
    "version",
    "greater",
    "equal",
    "zero",
    "point",
    "less",
    "zero",
    "point",
    "means",
    "compiler",
    "zero",
    "point",
    "zero",
    "point",
    "would",
    "work",
    "means",
    "zero",
    "point",
    "would",
    "work",
    "zero",
    "point",
    "would",
    "work",
    "point",
    "10",
    "would",
    "work",
    "zero",
    "point",
    "would",
    "work",
    "strictly",
    "less",
    "point",
    "00",
    "point",
    "would",
    "also",
    "work",
    "keep",
    "things",
    "simple",
    "us",
    "going",
    "use",
    "zero",
    "point",
    "every",
    "line",
    "solidity",
    "completed",
    "every",
    "completed",
    "section",
    "needs",
    "end",
    "one",
    "semicolons",
    "tell",
    "solidity",
    "end",
    "line",
    "also",
    "top",
    "code",
    "always",
    "going",
    "want",
    "put",
    "called",
    "spdx",
    "license",
    "identifier",
    "optional",
    "compilers",
    "flag",
    "warning",
    "one",
    "make",
    "licensing",
    "sharing",
    "code",
    "lot",
    "easier",
    "link",
    "licenses",
    "work",
    "section",
    "lesson",
    "github",
    "repository",
    "spdx",
    "license",
    "identifier",
    "say",
    "spdx",
    "license",
    "identifier",
    "gon",
    "na",
    "choose",
    "mit",
    "mit",
    "license",
    "one",
    "least",
    "restrictive",
    "licenses",
    "use",
    "mit",
    "license",
    "code",
    "samples",
    "version",
    "much",
    "written",
    "actually",
    "go",
    "ahead",
    "write",
    "compiler",
    "tab",
    "scroll",
    "hit",
    "compile",
    "little",
    "turn",
    "thing",
    "go",
    "minute",
    "see",
    "contract",
    "attempted",
    "compiled",
    "since",
    "actually",
    "contract",
    "see",
    "contract",
    "compiled",
    "yet",
    "see",
    "compiler",
    "automatically",
    "switched",
    "zero",
    "point",
    "compiling",
    "code",
    "means",
    "taking",
    "human",
    "readable",
    "code",
    "like",
    "pragma",
    "solidity",
    "transforming",
    "computer",
    "code",
    "specific",
    "instructions",
    "computer",
    "use",
    "go",
    "lot",
    "machine",
    "level",
    "code",
    "computer",
    "level",
    "code",
    "later",
    "section",
    "using",
    "mac",
    "also",
    "hit",
    "command",
    "run",
    "compiler",
    "well",
    "windows",
    "might",
    "ctrl",
    "actually",
    "choose",
    "compiler",
    "version",
    "want",
    "use",
    "however",
    "tell",
    "code",
    "specifically",
    "use",
    "zero",
    "point",
    "hit",
    "compile",
    "button",
    "automatically",
    "switch",
    "zero",
    "point",
    "however",
    "use",
    "carrot",
    "thing",
    "get",
    "specifically",
    "say",
    "hey",
    "want",
    "point",
    "10",
    "hit",
    "compile",
    "compile",
    "point",
    "remember",
    "carrot",
    "says",
    "want",
    "use",
    "least",
    "zero",
    "point",
    "eight",
    "way",
    "latest",
    "version",
    "let",
    "stay",
    "zero",
    "point",
    "next",
    "thing",
    "going",
    "code",
    "define",
    "contract",
    "get",
    "full",
    "screen",
    "view",
    "go",
    "ahead",
    "hit",
    "compiler",
    "button",
    "get",
    "rid",
    "start",
    "defining",
    "contract",
    "gon",
    "na",
    "go",
    "ahead",
    "write",
    "word",
    "contract",
    "tells",
    "solidity",
    "next",
    "pieces",
    "code",
    "going",
    "contract",
    "contract",
    "key",
    "word",
    "solidity",
    "tells",
    "compiler",
    "next",
    "section",
    "code",
    "going",
    "define",
    "contract",
    "think",
    "contract",
    "similar",
    "class",
    "object",
    "oriented",
    "programming",
    "like",
    "java",
    "javascript",
    "let",
    "go",
    "ahead",
    "give",
    "contract",
    "name",
    "going",
    "call",
    "rs",
    "simple",
    "storage",
    "add",
    "little",
    "open",
    "close",
    "curly",
    "brackets",
    "everything",
    "inside",
    "open",
    "close",
    "curly",
    "brackets",
    "going",
    "contents",
    "contract",
    "simple",
    "storage",
    "go",
    "ahead",
    "hit",
    "command",
    "ctrl",
    "see",
    "little",
    "green",
    "checkmark",
    "show",
    "always",
    "go",
    "back",
    "compiler",
    "tab",
    "scroll",
    "hit",
    "compile",
    "see",
    "little",
    "green",
    "checkmark",
    "little",
    "green",
    "checkmark",
    "means",
    "code",
    "compiling",
    "successfully",
    "errors",
    "could",
    "hypothetically",
    "deploy",
    "contract",
    "right",
    "would",
    "valid",
    "contract",
    "congratulations",
    "writing",
    "first",
    "contract",
    "solidity",
    "multiple",
    "different",
    "types",
    "primitive",
    "data",
    "types",
    "go",
    "solidity",
    "documentation",
    "github",
    "repository",
    "read",
    "learn",
    "different",
    "types",
    "four",
    "basic",
    "types",
    "going",
    "boolean",
    "int",
    "int",
    "address",
    "bytes",
    "lower",
    "level",
    "type",
    "talk",
    "little",
    "bit",
    "later",
    "boolean",
    "define",
    "type",
    "true",
    "false",
    "int",
    "going",
    "unsigned",
    "integer",
    "means",
    "going",
    "whole",
    "number",
    "positive",
    "negative",
    "positive",
    "integer",
    "going",
    "positive",
    "negative",
    "whole",
    "number",
    "address",
    "going",
    "address",
    "like",
    "see",
    "meta",
    "mask",
    "types",
    "well",
    "learn",
    "later",
    "reason",
    "types",
    "use",
    "define",
    "different",
    "variables",
    "variables",
    "basically",
    "holders",
    "different",
    "values",
    "example",
    "could",
    "create",
    "variable",
    "called",
    "favorite",
    "number",
    "represent",
    "somebody",
    "favorite",
    "number",
    "would",
    "put",
    "bull",
    "keyword",
    "renumber",
    "say",
    "okay",
    "variable",
    "called",
    "favorite",
    "number",
    "type",
    "boolean",
    "favorite",
    "number",
    "going",
    "represent",
    "true",
    "false",
    "set",
    "value",
    "could",
    "say",
    "favorite",
    "number",
    "equals",
    "true",
    "favorite",
    "number",
    "going",
    "true",
    "could",
    "also",
    "say",
    "favorite",
    "number",
    "equals",
    "false",
    "boolean",
    "faded",
    "number",
    "going",
    "false",
    "uns",
    "could",
    "say",
    "went",
    "favorite",
    "number",
    "equals",
    "set",
    "number",
    "means",
    "favorite",
    "number",
    "going",
    "123",
    "enter",
    "special",
    "actually",
    "specify",
    "many",
    "bits",
    "want",
    "allocate",
    "number",
    "bits",
    "bytes",
    "pretty",
    "fundamental",
    "pieces",
    "information",
    "computer",
    "science",
    "going",
    "go",
    "however",
    "fantastic",
    "video",
    "github",
    "repository",
    "explains",
    "basically",
    "much",
    "storage",
    "memory",
    "allocate",
    "number",
    "big",
    "get",
    "say",
    "int",
    "eight",
    "eight",
    "bits",
    "way",
    "went",
    "specify",
    "big",
    "automatically",
    "defaults",
    "oftentimes",
    "better",
    "writing",
    "code",
    "explicit",
    "usually",
    "see",
    "int",
    "256",
    "represent",
    "un",
    "could",
    "also",
    "int",
    "favorite",
    "number",
    "equals",
    "123",
    "int",
    "going",
    "go",
    "ahead",
    "add",
    "boolean",
    "back",
    "going",
    "change",
    "back",
    "unt",
    "let",
    "change",
    "favorite",
    "number",
    "five",
    "could",
    "also",
    "something",
    "called",
    "strings",
    "string",
    "favorite",
    "number",
    "text",
    "equals",
    "five",
    "strings",
    "represent",
    "basically",
    "words",
    "represent",
    "putting",
    "quotes",
    "going",
    "word",
    "phrase",
    "really",
    "really",
    "kind",
    "combination",
    "keystrokes",
    "ends",
    "positive",
    "negative",
    "could",
    "say",
    "negative",
    "five",
    "positive",
    "five",
    "going",
    "valid",
    "since",
    "also",
    "address",
    "address",
    "equals",
    "grab",
    "address",
    "right",
    "metamask",
    "paste",
    "notice",
    "end",
    "lines",
    "code",
    "semicolon",
    "also",
    "bytes",
    "objects",
    "bytes",
    "32",
    "representing",
    "many",
    "bytes",
    "want",
    "says",
    "called",
    "favorite",
    "bytes",
    "gon",
    "na",
    "set",
    "equal",
    "cat",
    "strings",
    "actually",
    "really",
    "interesting",
    "strings",
    "secretly",
    "bytes",
    "objects",
    "text",
    "cat",
    "actually",
    "string",
    "automatically",
    "get",
    "converted",
    "one",
    "bytes",
    "object",
    "bytes",
    "objects",
    "typically",
    "look",
    "like",
    "0x",
    "random",
    "letters",
    "numbers",
    "represent",
    "bytes",
    "object",
    "cat",
    "automatically",
    "get",
    "converted",
    "bytes",
    "talk",
    "bytes",
    "coming",
    "sessions",
    "also",
    "bytes",
    "two",
    "bytes",
    "three",
    "bytes",
    "five",
    "bytes",
    "22",
    "get",
    "picture",
    "uns",
    "sixth",
    "lowest",
    "go",
    "eight",
    "bits",
    "eight",
    "bits",
    "byte",
    "go",
    "steps",
    "eight",
    "816",
    "32",
    "etc",
    "way",
    "example",
    "ca",
    "bytes",
    "go",
    "ahead",
    "try",
    "compile",
    "get",
    "little",
    "red",
    "thing",
    "scroll",
    "get",
    "declaration",
    "error",
    "identifier",
    "found",
    "unique",
    "bytes",
    "64",
    "favorite",
    "bytes",
    "equals",
    "cats",
    "even",
    "got",
    "little",
    "red",
    "warning",
    "sign",
    "remix",
    "remix",
    "telling",
    "us",
    "something",
    "wrong",
    "line",
    "switch",
    "back",
    "bite",
    "since",
    "byte",
    "32",
    "maximum",
    "size",
    "bytes",
    "could",
    "also",
    "bytes",
    "object",
    "means",
    "size",
    "typically",
    "want",
    "explicit",
    "going",
    "stick",
    "bytes",
    "32",
    "want",
    "learn",
    "different",
    "types",
    "use",
    "different",
    "features",
    "sure",
    "check",
    "solidity",
    "documentation",
    "simple",
    "storage",
    "let",
    "say",
    "want",
    "store",
    "numbers",
    "let",
    "go",
    "ahead",
    "delete",
    "everything",
    "except",
    "favorite",
    "number",
    "section",
    "solidity",
    "remove",
    "equals",
    "five",
    "favorite",
    "number",
    "actually",
    "get",
    "set",
    "default",
    "value",
    "default",
    "value",
    "solidity",
    "going",
    "whatever",
    "null",
    "value",
    "solidity",
    "case",
    "zero",
    "saying",
    "intuit",
    "six",
    "favorite",
    "number",
    "going",
    "saying",
    "256",
    "favorite",
    "number",
    "equals",
    "zero",
    "since",
    "gets",
    "initialized",
    "zero",
    "let",
    "initialize",
    "anything",
    "favorite",
    "number",
    "automatically",
    "start",
    "zero",
    "get",
    "confused",
    "coding",
    "along",
    "following",
    "along",
    "sure",
    "write",
    "comments",
    "code",
    "know",
    "going",
    "maybe",
    "example",
    "great",
    "comment",
    "would",
    "gets",
    "initially",
    "alized",
    "zero",
    "even",
    "confusing",
    "could",
    "say",
    "means",
    "section",
    "comment",
    "let",
    "go",
    "ahead",
    "create",
    "function",
    "functions",
    "methods",
    "self",
    "contained",
    "modules",
    "execute",
    "specific",
    "set",
    "instructions",
    "us",
    "call",
    "familiar",
    "java",
    "python",
    "javascript",
    "anything",
    "like",
    "functions",
    "work",
    "exact",
    "way",
    "functions",
    "get",
    "identified",
    "keyword",
    "function",
    "let",
    "create",
    "function",
    "called",
    "store",
    "change",
    "value",
    "favorite",
    "number",
    "new",
    "value",
    "number",
    "going",
    "change",
    "going",
    "variables",
    "passed",
    "store",
    "function",
    "going",
    "allow",
    "store",
    "function",
    "take",
    "variable",
    "type",
    "un",
    "call",
    "underscore",
    "favorite",
    "number",
    "make",
    "public",
    "function",
    "get",
    "minute",
    "going",
    "going",
    "set",
    "favorite",
    "number",
    "equal",
    "whatever",
    "variable",
    "passed",
    "function",
    "called",
    "store",
    "takes",
    "parameter",
    "going",
    "give",
    "sets",
    "favorite",
    "number",
    "variable",
    "equal",
    "whatever",
    "number",
    "give",
    "function",
    "see",
    "actually",
    "action",
    "let",
    "deploy",
    "even",
    "thicker",
    "blockchain",
    "test",
    "net",
    "going",
    "actually",
    "deploy",
    "local",
    "network",
    "javascript",
    "vm",
    "first",
    "even",
    "let",
    "make",
    "sure",
    "going",
    "compiling",
    "correctly",
    "looks",
    "like",
    "green",
    "checkmark",
    "good",
    "come",
    "button",
    "deploy",
    "run",
    "transactions",
    "tab",
    "deploy",
    "run",
    "transactions",
    "tab",
    "ton",
    "different",
    "configuration",
    "pieces",
    "actually",
    "deploying",
    "contract",
    "first",
    "want",
    "make",
    "sure",
    "javascript",
    "vm",
    "london",
    "piece",
    "javascript",
    "vm",
    "means",
    "going",
    "deploying",
    "fake",
    "local",
    "javascript",
    "vm",
    "javascript",
    "vm",
    "fake",
    "local",
    "blockchain",
    "simulate",
    "transactions",
    "really",
    "quickly",
    "without",
    "wait",
    "go",
    "test",
    "net",
    "worry",
    "london",
    "versus",
    "berlin",
    "piece",
    "injected",
    "web",
    "three",
    "web",
    "three",
    "provider",
    "talk",
    "little",
    "bit",
    "also",
    "account",
    "section",
    "run",
    "fake",
    "javascript",
    "vm",
    "given",
    "whole",
    "bunch",
    "fake",
    "accounts",
    "deploy",
    "given",
    "100",
    "eath",
    "one",
    "fake",
    "accounts",
    "kind",
    "think",
    "similar",
    "meta",
    "mask",
    "account",
    "meta",
    "mask",
    "except",
    "difference",
    "fake",
    "javascript",
    "vm",
    "aetherium",
    "given",
    "transactions",
    "including",
    "deploying",
    "contracts",
    "actually",
    "given",
    "gas",
    "limit",
    "also",
    "values",
    "send",
    "choose",
    "contracts",
    "right",
    "one",
    "contract",
    "simple",
    "storage",
    "going",
    "one",
    "going",
    "deploy",
    "left",
    "hand",
    "side",
    "deploy",
    "fake",
    "javascript",
    "vm",
    "gon",
    "na",
    "go",
    "ahead",
    "hit",
    "deploy",
    "button",
    "scroll",
    "way",
    "bottom",
    "see",
    "contract",
    "deployed",
    "says",
    "simple",
    "storage",
    "x",
    "blah",
    "blah",
    "blah",
    "blah",
    "blah",
    "see",
    "orange",
    "button",
    "store",
    "come",
    "grade",
    "text",
    "256",
    "underscore",
    "favorite",
    "number",
    "fake",
    "local",
    "blockchain",
    "actually",
    "given",
    "address",
    "every",
    "single",
    "smart",
    "contract",
    "address",
    "like",
    "wallets",
    "address",
    "hit",
    "copy",
    "button",
    "put",
    "comment",
    "make",
    "little",
    "bit",
    "bigger",
    "see",
    "address",
    "contract",
    "deployed",
    "located",
    "address",
    "additionally",
    "pull",
    "slider",
    "able",
    "see",
    "little",
    "green",
    "checkmark",
    "information",
    "deployment",
    "hit",
    "little",
    "drop",
    "see",
    "whole",
    "lot",
    "information",
    "something",
    "might",
    "notice",
    "see",
    "familiar",
    "keywords",
    "like",
    "status",
    "transaction",
    "hash",
    "gas",
    "etc",
    "deploy",
    "contract",
    "actually",
    "sending",
    "transaction",
    "remember",
    "anytime",
    "anything",
    "blockchain",
    "modify",
    "value",
    "sending",
    "transaction",
    "deploying",
    "contract",
    "modifying",
    "blockchain",
    "contract",
    "modifying",
    "state",
    "blockchain",
    "sent",
    "rinkeby",
    "covid",
    "main",
    "net",
    "network",
    "would",
    "spend",
    "gas",
    "actually",
    "deploy",
    "contract",
    "simulation",
    "much",
    "gas",
    "transaction",
    "hash",
    "stuff",
    "transaction",
    "actually",
    "deployed",
    "real",
    "network",
    "since",
    "javascript",
    "vm",
    "fake",
    "information",
    "big",
    "orange",
    "button",
    "store",
    "big",
    "orange",
    "button",
    "resembles",
    "store",
    "function",
    "created",
    "add",
    "number",
    "store",
    "like",
    "123",
    "hit",
    "store",
    "button",
    "actually",
    "call",
    "store",
    "button",
    "actually",
    "execute",
    "transaction",
    "fake",
    "jasika",
    "blockchain",
    "store",
    "number",
    "1234",
    "favorite",
    "number",
    "scroll",
    "way",
    "account",
    "see",
    "little",
    "bit",
    "less",
    "ether",
    "fake",
    "account",
    "spent",
    "gas",
    "actually",
    "call",
    "contract",
    "pull",
    "bottom",
    "bit",
    "call",
    "five",
    "call",
    "store",
    "see",
    "flashed",
    "quick",
    "second",
    "sent",
    "another",
    "transaction",
    "store",
    "value",
    "five",
    "favorite",
    "number",
    "question",
    "might",
    "really",
    "cool",
    "patrick",
    "ca",
    "see",
    "favorite",
    "number",
    "actually",
    "know",
    "transactions",
    "actually",
    "going",
    "well",
    "right",
    "visibility",
    "favorite",
    "number",
    "set",
    "private",
    "actually",
    "ca",
    "see",
    "talk",
    "visibility",
    "second",
    "make",
    "see",
    "change",
    "favorite",
    "numbers",
    "visibility",
    "public",
    "let",
    "go",
    "ahead",
    "recompile",
    "go",
    "back",
    "deploy",
    "tab",
    "click",
    "little",
    "x",
    "say",
    "let",
    "get",
    "rid",
    "contract",
    "gets",
    "rid",
    "window",
    "actually",
    "get",
    "rid",
    "blockchain",
    "immutable",
    "well",
    "kind",
    "immutable",
    "since",
    "kind",
    "fake",
    "simulated",
    "chain",
    "go",
    "ahead",
    "compile",
    "hit",
    "deploy",
    "scroll",
    "new",
    "contract",
    "two",
    "buttons",
    "one",
    "orange",
    "button",
    "store",
    "new",
    "favorite",
    "button",
    "button",
    "represents",
    "public",
    "variable",
    "favorite",
    "number",
    "resembles",
    "function",
    "saying",
    "hey",
    "show",
    "favorite",
    "number",
    "click",
    "favorite",
    "number",
    "button",
    "think",
    "show",
    "well",
    "remember",
    "gets",
    "initialized",
    "well",
    "let",
    "click",
    "indeed",
    "see",
    "zero",
    "shows",
    "see",
    "youtube",
    "id",
    "six",
    "value",
    "stored",
    "zero",
    "change",
    "number",
    "five",
    "calling",
    "store",
    "function",
    "hitting",
    "favorite",
    "number",
    "indeed",
    "see",
    "favorite",
    "number",
    "gets",
    "updated",
    "five",
    "functions",
    "variables",
    "one",
    "visibility",
    "specifiers",
    "public",
    "private",
    "external",
    "internal",
    "public",
    "visible",
    "externally",
    "internally",
    "meaning",
    "anybody",
    "interacts",
    "contract",
    "sees",
    "contract",
    "see",
    "stored",
    "favorite",
    "number",
    "function",
    "see",
    "solidity",
    "documentation",
    "says",
    "creates",
    "getter",
    "function",
    "storage",
    "slash",
    "state",
    "variables",
    "add",
    "keyword",
    "public",
    "favorite",
    "number",
    "actually",
    "creating",
    "called",
    "getter",
    "function",
    "favorite",
    "number",
    "basically",
    "creating",
    "function",
    "says",
    "return",
    "value",
    "favorite",
    "number",
    "blue",
    "button",
    "pops",
    "blue",
    "button",
    "function",
    "says",
    "hey",
    "return",
    "value",
    "favorite",
    "number",
    "private",
    "means",
    "specific",
    "contract",
    "call",
    "function",
    "storage",
    "mean",
    "contract",
    "read",
    "stored",
    "get",
    "little",
    "bit",
    "later",
    "means",
    "contract",
    "call",
    "favorite",
    "number",
    "function",
    "private",
    "functions",
    "visible",
    "current",
    "contract",
    "external",
    "functions",
    "visible",
    "externally",
    "meaning",
    "somebody",
    "outside",
    "contract",
    "call",
    "function",
    "internal",
    "means",
    "contract",
    "children",
    "contracts",
    "actually",
    "read",
    "get",
    "little",
    "bit",
    "later",
    "oddly",
    "enough",
    "variables",
    "function",
    "calls",
    "reason",
    "see",
    "favorite",
    "numbers",
    "show",
    "left",
    "hand",
    "side",
    "first",
    "deployed",
    "without",
    "public",
    "keyword",
    "give",
    "visibility",
    "specifier",
    "functions",
    "variables",
    "automatically",
    "get",
    "deployed",
    "internal",
    "know",
    "internal",
    "functions",
    "variables",
    "called",
    "specific",
    "contract",
    "derived",
    "contracts",
    "get",
    "later",
    "let",
    "keep",
    "public",
    "reason",
    "prefixing",
    "parameter",
    "underscore",
    "way",
    "tell",
    "us",
    "hey",
    "variable",
    "different",
    "favorite",
    "number",
    "global",
    "different",
    "naming",
    "conventions",
    "used",
    "parameters",
    "get",
    "later",
    "course",
    "understand",
    "good",
    "names",
    "parameters",
    "every",
    "time",
    "call",
    "store",
    "function",
    "change",
    "value",
    "actually",
    "sending",
    "transaction",
    "remember",
    "every",
    "single",
    "time",
    "change",
    "state",
    "blockchain",
    "transaction",
    "see",
    "details",
    "go",
    "transaction",
    "details",
    "logging",
    "area",
    "remix",
    "actually",
    "scroll",
    "see",
    "transaction",
    "cost",
    "units",
    "gas",
    "see",
    "number",
    "something",
    "around",
    "notice",
    "number",
    "sending",
    "aetherium",
    "something",
    "computationally",
    "expensive",
    "actually",
    "storing",
    "number",
    "think",
    "happen",
    "inside",
    "store",
    "function",
    "well",
    "instead",
    "storing",
    "number",
    "maybe",
    "else",
    "store",
    "number",
    "update",
    "favorite",
    "number",
    "say",
    "favorite",
    "number",
    "equals",
    "favorite",
    "number",
    "plus",
    "one",
    "since",
    "stuff",
    "see",
    "store",
    "function",
    "actually",
    "become",
    "expensive",
    "let",
    "go",
    "ahead",
    "recompile",
    "delete",
    "redeploy",
    "new",
    "contract",
    "store",
    "five",
    "look",
    "details",
    "transaction",
    "scroll",
    "execution",
    "costs",
    "indeed",
    "see",
    "amount",
    "gas",
    "greatly",
    "increased",
    "things",
    "store",
    "function",
    "computationally",
    "expensive",
    "like",
    "said",
    "blockchain",
    "little",
    "different",
    "way",
    "actually",
    "calculate",
    "gas",
    "easiest",
    "way",
    "think",
    "stuff",
    "expensive",
    "transaction",
    "going",
    "cost",
    "let",
    "go",
    "ahead",
    "delete",
    "line",
    "continue",
    "example",
    "let",
    "talk",
    "scope",
    "second",
    "favorite",
    "number",
    "basically",
    "something",
    "called",
    "global",
    "scope",
    "meaning",
    "anything",
    "inside",
    "brackets",
    "access",
    "favorite",
    "number",
    "variable",
    "something",
    "like",
    "made",
    "un",
    "256",
    "called",
    "test",
    "var",
    "set",
    "equal",
    "five",
    "created",
    "new",
    "function",
    "called",
    "something",
    "take",
    "parameters",
    "public",
    "could",
    "access",
    "test",
    "var",
    "change",
    "something",
    "like",
    "six",
    "well",
    "let",
    "go",
    "ahead",
    "see",
    "happens",
    "try",
    "compile",
    "actually",
    "run",
    "error",
    "expected",
    "primary",
    "expression",
    "right",
    "oh",
    "well",
    "double",
    "question",
    "mark",
    "let",
    "try",
    "get",
    "undeclared",
    "identifier",
    "something",
    "function",
    "know",
    "test",
    "var",
    "create",
    "variables",
    "viewed",
    "scope",
    "little",
    "confusing",
    "look",
    "curly",
    "brackets",
    "two",
    "curly",
    "brackets",
    "encompass",
    "whole",
    "section",
    "write",
    "opening",
    "one",
    "closing",
    "one",
    "create",
    "variable",
    "directly",
    "inside",
    "curly",
    "brackets",
    "means",
    "everything",
    "access",
    "however",
    "test",
    "var",
    "created",
    "inside",
    "curly",
    "brackets",
    "means",
    "stuff",
    "inside",
    "curly",
    "brackets",
    "access",
    "test",
    "var",
    "since",
    "functions",
    "something",
    "inside",
    "store",
    "something",
    "function",
    "wo",
    "know",
    "test",
    "var",
    "scope",
    "works",
    "want",
    "look",
    "see",
    "variable",
    "created",
    "inside",
    "curly",
    "brackets",
    "know",
    "functions",
    "work",
    "fails",
    "like",
    "saw",
    "documentation",
    "add",
    "public",
    "variable",
    "favorite",
    "number",
    "secretly",
    "adding",
    "function",
    "returns",
    "favorite",
    "number",
    "also",
    "add",
    "function",
    "also",
    "returns",
    "favorite",
    "number",
    "resemble",
    "function",
    "getting",
    "created",
    "backend",
    "say",
    "function",
    "call",
    "retrieve",
    "make",
    "public",
    "view",
    "say",
    "returns",
    "went",
    "explain",
    "means",
    "second",
    "say",
    "return",
    "favorite",
    "number",
    "going",
    "hit",
    "command",
    "going",
    "lot",
    "throughout",
    "section",
    "remember",
    "equivalent",
    "going",
    "compile",
    "tab",
    "hitting",
    "compile",
    "go",
    "deploy",
    "tab",
    "delete",
    "last",
    "one",
    "deploy",
    "new",
    "one",
    "retrieve",
    "function",
    "going",
    "return",
    "exact",
    "thing",
    "favorite",
    "number",
    "going",
    "return",
    "update",
    "five",
    "called",
    "favorite",
    "number",
    "retrieve",
    "return",
    "five",
    "see",
    "two",
    "functions",
    "blue",
    "function",
    "orange",
    "difference",
    "different",
    "colors",
    "well",
    "key",
    "lies",
    "view",
    "keyword",
    "actually",
    "two",
    "keywords",
    "solidity",
    "notate",
    "function",
    "actually",
    "spend",
    "gas",
    "run",
    "keywords",
    "view",
    "pure",
    "let",
    "also",
    "get",
    "rid",
    "variable",
    "function",
    "view",
    "function",
    "means",
    "going",
    "read",
    "state",
    "contract",
    "going",
    "read",
    "something",
    "contract",
    "example",
    "retrieve",
    "function",
    "right",
    "reading",
    "favorite",
    "number",
    "view",
    "function",
    "disallows",
    "modification",
    "state",
    "ca",
    "update",
    "blockchain",
    "view",
    "function",
    "pure",
    "functions",
    "also",
    "disallow",
    "modification",
    "state",
    "could",
    "update",
    "favorite",
    "number",
    "also",
    "disallow",
    "reading",
    "blockchain",
    "could",
    "read",
    "favorite",
    "number",
    "either",
    "instead",
    "might",
    "pure",
    "function",
    "maybe",
    "something",
    "like",
    "function",
    "add",
    "public",
    "one",
    "plus",
    "one",
    "return",
    "one",
    "plus",
    "one",
    "would",
    "turns",
    "36",
    "maybe",
    "something",
    "like",
    "maybe",
    "math",
    "want",
    "use",
    "maybe",
    "specific",
    "algorithm",
    "want",
    "implement",
    "actually",
    "need",
    "read",
    "storage",
    "etc",
    "call",
    "view",
    "function",
    "pure",
    "function",
    "actually",
    "need",
    "spend",
    "gas",
    "since",
    "reading",
    "blockchain",
    "remember",
    "spend",
    "gas",
    "make",
    "transaction",
    "modify",
    "blockchain",
    "state",
    "notice",
    "little",
    "console",
    "call",
    "retrieve",
    "call",
    "things",
    "comes",
    "however",
    "looks",
    "different",
    "call",
    "store",
    "function",
    "call",
    "store",
    "function",
    "get",
    "little",
    "checkmark",
    "get",
    "hash",
    "get",
    "little",
    "checkmark",
    "get",
    "hash",
    "calls",
    "clicking",
    "blue",
    "buttons",
    "make",
    "transaction",
    "saying",
    "hey",
    "going",
    "read",
    "chain",
    "going",
    "read",
    "value",
    "however",
    "look",
    "details",
    "call",
    "execution",
    "cost",
    "bit",
    "going",
    "well",
    "read",
    "part",
    "right",
    "cost",
    "applies",
    "called",
    "contract",
    "function",
    "calls",
    "retrieve",
    "function",
    "updating",
    "state",
    "calls",
    "view",
    "pure",
    "function",
    "time",
    "cost",
    "gas",
    "example",
    "store",
    "function",
    "view",
    "function",
    "call",
    "retrieve",
    "point",
    "pay",
    "cost",
    "retrieve",
    "reading",
    "blockchain",
    "cost",
    "computation",
    "cost",
    "gas",
    "calling",
    "view",
    "functions",
    "free",
    "unless",
    "calling",
    "inside",
    "function",
    "costs",
    "gas",
    "case",
    "cost",
    "gas",
    "leave",
    "delete",
    "recompile",
    "redeploy",
    "favorite",
    "number",
    "retrieved",
    "still",
    "cost",
    "nothing",
    "add",
    "restore",
    "eight",
    "see",
    "see",
    "execution",
    "cost",
    "gone",
    "without",
    "retrieve",
    "go",
    "ahead",
    "compile",
    "hit",
    "command",
    "us",
    "compile",
    "deploy",
    "let",
    "go",
    "ahead",
    "store",
    "click",
    "transaction",
    "see",
    "much",
    "cheaper",
    "without",
    "retrieve",
    "function",
    "favorite",
    "number",
    "variable",
    "long",
    "public",
    "visible",
    "solidity",
    "also",
    "counted",
    "view",
    "function",
    "returns",
    "un",
    "returns",
    "keyword",
    "means",
    "function",
    "going",
    "give",
    "us",
    "call",
    "say",
    "function",
    "going",
    "give",
    "us",
    "function",
    "going",
    "return",
    "un",
    "call",
    "retrieve",
    "going",
    "return",
    "give",
    "us",
    "utility",
    "six",
    "result",
    "calling",
    "function",
    "six",
    "result",
    "calling",
    "arbitrary",
    "function",
    "contract",
    "good",
    "allows",
    "us",
    "store",
    "single",
    "favorite",
    "number",
    "want",
    "store",
    "range",
    "favorite",
    "numbers",
    "maybe",
    "want",
    "store",
    "whole",
    "bunch",
    "different",
    "people",
    "different",
    "favorite",
    "numbers",
    "well",
    "several",
    "different",
    "ways",
    "approach",
    "one",
    "ways",
    "could",
    "start",
    "approaching",
    "creating",
    "called",
    "struct",
    "people",
    "create",
    "new",
    "type",
    "solidity",
    "create",
    "people",
    "object",
    "holds",
    "someone",
    "name",
    "favorite",
    "number",
    "say",
    "struct",
    "people",
    "went",
    "56",
    "favorite",
    "number",
    "string",
    "name",
    "created",
    "new",
    "type",
    "called",
    "people",
    "kinda",
    "like",
    "intuited",
    "six",
    "boolean",
    "string",
    "people",
    "type",
    "use",
    "similar",
    "created",
    "un",
    "256",
    "public",
    "favorite",
    "number",
    "exact",
    "thing",
    "people",
    "could",
    "say",
    "people",
    "public",
    "call",
    "person",
    "create",
    "new",
    "people",
    "assign",
    "variable",
    "person",
    "say",
    "equals",
    "people",
    "public",
    "person",
    "equals",
    "add",
    "parentheses",
    "signify",
    "creating",
    "new",
    "person",
    "since",
    "made",
    "struct",
    "add",
    "little",
    "curly",
    "brackets",
    "let",
    "solidity",
    "know",
    "going",
    "grabbing",
    "struct",
    "variables",
    "say",
    "favorite",
    "number",
    "going",
    "two",
    "name",
    "going",
    "patrick",
    "semicolon",
    "hit",
    "ctrl",
    "go",
    "ahead",
    "compile",
    "go",
    "ahead",
    "deploy",
    "new",
    "person",
    "since",
    "public",
    "variable",
    "getter",
    "function",
    "called",
    "person",
    "click",
    "person",
    "see",
    "new",
    "object",
    "favorite",
    "number",
    "two",
    "name",
    "patrick",
    "see",
    "zero",
    "one",
    "showing",
    "index",
    "different",
    "variables",
    "new",
    "computer",
    "science",
    "typically",
    "computer",
    "science",
    "let",
    "start",
    "number",
    "zero",
    "zero",
    "index",
    "256",
    "called",
    "favorite",
    "number",
    "saved",
    "two",
    "index",
    "one",
    "string",
    "stands",
    "name",
    "patrick",
    "whenever",
    "list",
    "variables",
    "inside",
    "object",
    "solidity",
    "get",
    "automatically",
    "indexed",
    "favorite",
    "number",
    "gets",
    "indexed",
    "zero",
    "name",
    "gets",
    "indexed",
    "one",
    "interestingly",
    "enough",
    "whole",
    "bunch",
    "variables",
    "inside",
    "contract",
    "like",
    "public",
    "favorite",
    "number",
    "favorite",
    "number",
    "actually",
    "technically",
    "getting",
    "indexed",
    "zero",
    "storage",
    "slot",
    "make",
    "another",
    "one",
    "maybe",
    "want",
    "get",
    "six",
    "public",
    "brother",
    "favorite",
    "number",
    "would",
    "technically",
    "indexed",
    "first",
    "slot",
    "make",
    "one",
    "maybe",
    "sister",
    "favorite",
    "number",
    "would",
    "next",
    "add",
    "second",
    "slot",
    "favorite",
    "number",
    "zero",
    "add",
    "one",
    "two",
    "learn",
    "much",
    "later",
    "course",
    "similarly",
    "favorite",
    "number",
    "index",
    "zero",
    "name",
    "index",
    "one",
    "great",
    "want",
    "whole",
    "lot",
    "people",
    "gon",
    "na",
    "keep",
    "copy",
    "pasting",
    "changing",
    "people",
    "name",
    "person",
    "favorite",
    "one",
    "number",
    "one",
    "number",
    "three",
    "name",
    "ally",
    "person",
    "three",
    "favorite",
    "number",
    "seven",
    "name",
    "chad",
    "something",
    "obviously",
    "great",
    "way",
    "create",
    "lists",
    "large",
    "number",
    "people",
    "statically",
    "keep",
    "typing",
    "much",
    "better",
    "way",
    "create",
    "list",
    "let",
    "actually",
    "go",
    "ahead",
    "delete",
    "patrick",
    "much",
    "better",
    "way",
    "create",
    "list",
    "use",
    "data",
    "structure",
    "called",
    "array",
    "array",
    "way",
    "store",
    "list",
    "sequence",
    "objects",
    "creating",
    "array",
    "works",
    "exact",
    "seen",
    "initialize",
    "different",
    "types",
    "typically",
    "type",
    "object",
    "visibility",
    "object",
    "variable",
    "name",
    "exact",
    "thing",
    "arrays",
    "say",
    "want",
    "people",
    "array",
    "little",
    "brackets",
    "represent",
    "want",
    "array",
    "people",
    "give",
    "visibility",
    "public",
    "call",
    "people",
    "could",
    "thing",
    "256",
    "example",
    "could",
    "say",
    "went",
    "56",
    "public",
    "favorite",
    "numbers",
    "list",
    "add",
    "little",
    "array",
    "key",
    "favorite",
    "numbers",
    "list",
    "going",
    "array",
    "list",
    "going",
    "comment",
    "go",
    "ahead",
    "deploy",
    "contract",
    "let",
    "go",
    "ahead",
    "delete",
    "last",
    "one",
    "let",
    "redeploy",
    "blue",
    "people",
    "button",
    "remember",
    "since",
    "public",
    "variable",
    "automatically",
    "given",
    "view",
    "function",
    "given",
    "one",
    "blue",
    "buttons",
    "instead",
    "single",
    "button",
    "value",
    "shows",
    "giving",
    "us",
    "form",
    "fill",
    "wants",
    "take",
    "un",
    "256",
    "input",
    "parameter",
    "put",
    "zero",
    "get",
    "nothing",
    "back",
    "put",
    "one",
    "get",
    "nothing",
    "back",
    "matter",
    "put",
    "box",
    "right",
    "gon",
    "na",
    "get",
    "nothing",
    "back",
    "people",
    "array",
    "people",
    "list",
    "currently",
    "empty",
    "value",
    "wants",
    "going",
    "index",
    "object",
    "want",
    "example",
    "index",
    "zero",
    "patrick",
    "would",
    "show",
    "patrick",
    "zero",
    "x",
    "one",
    "john",
    "actually",
    "better",
    "yet",
    "patrick",
    "seven",
    "john",
    "etc",
    "would",
    "show",
    "since",
    "empty",
    "going",
    "show",
    "nothing",
    "let",
    "go",
    "ahead",
    "remove",
    "public",
    "variable",
    "favorite",
    "numbers",
    "get",
    "duplicate",
    "functions",
    "moment",
    "get",
    "retrieve",
    "function",
    "show",
    "add",
    "array",
    "second",
    "type",
    "array",
    "known",
    "dynamic",
    "array",
    "size",
    "array",
    "given",
    "array",
    "initialization",
    "say",
    "people",
    "array",
    "add",
    "three",
    "brackets",
    "means",
    "list",
    "array",
    "people",
    "could",
    "three",
    "people",
    "big",
    "give",
    "size",
    "means",
    "size",
    "size",
    "array",
    "grow",
    "shrink",
    "add",
    "subtract",
    "people",
    "add",
    "three",
    "maximum",
    "three",
    "array",
    "ever",
    "going",
    "work",
    "dynamic",
    "array",
    "going",
    "want",
    "add",
    "arbitrary",
    "number",
    "people",
    "array",
    "let",
    "go",
    "ahead",
    "create",
    "function",
    "going",
    "add",
    "people",
    "people",
    "array",
    "gon",
    "na",
    "say",
    "function",
    "add",
    "person",
    "going",
    "take",
    "string",
    "memory",
    "name",
    "input",
    "parameter",
    "explain",
    "minute",
    "un",
    "256",
    "underscore",
    "favorite",
    "number",
    "going",
    "make",
    "public",
    "function",
    "going",
    "going",
    "call",
    "push",
    "function",
    "available",
    "people",
    "object",
    "gon",
    "na",
    "say",
    "people",
    "dot",
    "push",
    "going",
    "create",
    "new",
    "person",
    "new",
    "people",
    "object",
    "going",
    "take",
    "favorite",
    "number",
    "name",
    "might",
    "little",
    "bit",
    "tricky",
    "let",
    "break",
    "people",
    "capitalized",
    "know",
    "since",
    "capitalize",
    "referring",
    "struct",
    "people",
    "variable",
    "people",
    "lowercase",
    "people",
    "referring",
    "lowercase",
    "array",
    "saying",
    "array",
    "dot",
    "push",
    "push",
    "equivalent",
    "adding",
    "basically",
    "new",
    "people",
    "grabs",
    "favorite",
    "number",
    "name",
    "another",
    "way",
    "could",
    "actually",
    "could",
    "create",
    "variable",
    "type",
    "people",
    "add",
    "like",
    "could",
    "say",
    "people",
    "new",
    "person",
    "equals",
    "people",
    "put",
    "brackets",
    "way",
    "say",
    "favorite",
    "number",
    "going",
    "input",
    "value",
    "parameter",
    "could",
    "say",
    "name",
    "going",
    "parameter",
    "hit",
    "save",
    "get",
    "error",
    "set",
    "saying",
    "data",
    "location",
    "must",
    "stored",
    "memory",
    "called",
    "data",
    "variable",
    "one",
    "given",
    "going",
    "add",
    "memory",
    "keyword",
    "explain",
    "little",
    "bit",
    "course",
    "need",
    "add",
    "new",
    "person",
    "people",
    "dot",
    "push",
    "right",
    "actually",
    "going",
    "push",
    "people",
    "people",
    "array",
    "get",
    "memory",
    "keyword",
    "bit",
    "go",
    "back",
    "deploy",
    "tab",
    "delete",
    "last",
    "contract",
    "let",
    "deploy",
    "new",
    "one",
    "right",
    "try",
    "look",
    "zero",
    "person",
    "people",
    "array",
    "get",
    "nothing",
    "let",
    "go",
    "ahead",
    "add",
    "person",
    "call",
    "patrick",
    "name",
    "seven",
    "favorite",
    "number",
    "added",
    "patrick",
    "added",
    "seven",
    "look",
    "people",
    "zero",
    "see",
    "zeroeth",
    "person",
    "name",
    "patrick",
    "favorite",
    "number",
    "seven",
    "boom",
    "exactly",
    "see",
    "see",
    "favorite",
    "number",
    "seven",
    "see",
    "string",
    "name",
    "patrick",
    "tried",
    "add",
    "john",
    "hit",
    "add",
    "person",
    "see",
    "transaction",
    "go",
    "go",
    "people",
    "zero",
    "still",
    "patrick",
    "favorite",
    "number",
    "seven",
    "look",
    "people",
    "index",
    "one",
    "going",
    "john",
    "favorite",
    "number",
    "look",
    "two",
    "course",
    "blank",
    "indeed",
    "see",
    "nothing",
    "actually",
    "happens",
    "perfect",
    "actually",
    "couple",
    "different",
    "ways",
    "create",
    "new",
    "person",
    "like",
    "showed",
    "use",
    "bracket",
    "notation",
    "actually",
    "add",
    "parameters",
    "order",
    "show",
    "first",
    "parameter",
    "people",
    "going",
    "favorite",
    "number",
    "favorite",
    "number",
    "comma",
    "second",
    "one",
    "going",
    "name",
    "second",
    "one",
    "going",
    "name",
    "save",
    "line",
    "created",
    "exact",
    "last",
    "line",
    "little",
    "bit",
    "less",
    "explicit",
    "way",
    "generally",
    "little",
    "bit",
    "better",
    "explicit",
    "variables",
    "even",
    "need",
    "save",
    "variable",
    "could",
    "take",
    "whole",
    "line",
    "replace",
    "new",
    "person",
    "exactly",
    "saw",
    "like",
    "even",
    "need",
    "memory",
    "keyword",
    "probably",
    "seen",
    "go",
    "ahead",
    "compile",
    "see",
    "little",
    "little",
    "red",
    "one",
    "roll",
    "says",
    "something",
    "error",
    "expected",
    "semicolon",
    "got",
    "bracket",
    "errors",
    "mean",
    "code",
    "compiling",
    "working",
    "expected",
    "go",
    "little",
    "semicolon",
    "recompile",
    "get",
    "green",
    "delete",
    "top",
    "line",
    "example",
    "compile",
    "actually",
    "get",
    "yellow",
    "thing",
    "yellow",
    "stands",
    "warnings",
    "warning",
    "get",
    "warning",
    "spx",
    "license",
    "identifier",
    "provided",
    "add",
    "let",
    "go",
    "ahead",
    "add",
    "back",
    "recompile",
    "warning",
    "goes",
    "away",
    "warnings",
    "stop",
    "code",
    "compiling",
    "get",
    "warnings",
    "okay",
    "usually",
    "good",
    "idea",
    "listen",
    "warnings",
    "often",
    "give",
    "really",
    "insightful",
    "information",
    "improve",
    "smart",
    "contracts",
    "summarize",
    "red",
    "broken",
    "yellow",
    "might",
    "want",
    "check",
    "wo",
    "stop",
    "continuing",
    "code",
    "one",
    "thing",
    "notice",
    "memory",
    "keyword",
    "notice",
    "try",
    "delete",
    "function",
    "try",
    "compile",
    "actually",
    "run",
    "error",
    "data",
    "location",
    "must",
    "memory",
    "call",
    "data",
    "parameter",
    "function",
    "actually",
    "six",
    "places",
    "store",
    "data",
    "solidity",
    "stack",
    "memory",
    "storage",
    "call",
    "data",
    "code",
    "logs",
    "going",
    "go",
    "right",
    "going",
    "focus",
    "three",
    "big",
    "ones",
    "three",
    "important",
    "ones",
    "section",
    "called",
    "data",
    "memory",
    "storage",
    "section",
    "going",
    "talk",
    "call",
    "data",
    "memory",
    "storage",
    "little",
    "bit",
    "advanced",
    "totally",
    "grasp",
    "first",
    "time",
    "totally",
    "okay",
    "please",
    "continue",
    "even",
    "crystal",
    "clear",
    "going",
    "call",
    "data",
    "memory",
    "mean",
    "variable",
    "going",
    "exist",
    "temporarily",
    "name",
    "variable",
    "exists",
    "temporarily",
    "transaction",
    "add",
    "person",
    "function",
    "called",
    "storage",
    "variables",
    "exist",
    "even",
    "outside",
    "function",
    "executing",
    "even",
    "though",
    "specify",
    "favorite",
    "number",
    "automatically",
    "cast",
    "storage",
    "variable",
    "since",
    "explicitly",
    "defined",
    "one",
    "functions",
    "since",
    "need",
    "name",
    "variable",
    "anymore",
    "function",
    "runs",
    "keep",
    "memory",
    "could",
    "keep",
    "called",
    "data",
    "parameter",
    "called",
    "data",
    "end",
    "modifying",
    "name",
    "example",
    "could",
    "reassign",
    "name",
    "equal",
    "cat",
    "compile",
    "run",
    "error",
    "type",
    "literal",
    "string",
    "cat",
    "implicitly",
    "convertible",
    "expect",
    "type",
    "string",
    "called",
    "data",
    "however",
    "memory",
    "compile",
    "save",
    "error",
    "goes",
    "away",
    "call",
    "data",
    "temporary",
    "variables",
    "ca",
    "modified",
    "memory",
    "temporary",
    "variables",
    "modified",
    "storage",
    "permanent",
    "variables",
    "modified",
    "even",
    "though",
    "said",
    "actually",
    "six",
    "places",
    "access",
    "store",
    "information",
    "say",
    "variable",
    "stack",
    "code",
    "logs",
    "say",
    "memory",
    "storage",
    "called",
    "data",
    "learn",
    "much",
    "later",
    "section",
    "bit",
    "oversimplification",
    "essentially",
    "going",
    "next",
    "question",
    "might",
    "well",
    "need",
    "say",
    "memory",
    "need",
    "say",
    "memory",
    "well",
    "let",
    "go",
    "ahead",
    "put",
    "memory",
    "hit",
    "ctrl",
    "compile",
    "let",
    "see",
    "happens",
    "get",
    "solidity",
    "data",
    "location",
    "specified",
    "array",
    "struct",
    "mapping",
    "types",
    "memory",
    "given",
    "arrays",
    "structs",
    "mappings",
    "considered",
    "special",
    "types",
    "solidity",
    "solidity",
    "automatically",
    "knows",
    "256",
    "going",
    "slowly",
    "knows",
    "function",
    "un",
    "256",
    "going",
    "live",
    "memory",
    "however",
    "sure",
    "string",
    "going",
    "strings",
    "actually",
    "kind",
    "complicated",
    "behind",
    "scenes",
    "string",
    "actually",
    "array",
    "bytes",
    "since",
    "string",
    "array",
    "need",
    "add",
    "memory",
    "bit",
    "need",
    "tell",
    "solidity",
    "data",
    "location",
    "arrays",
    "structs",
    "mappings",
    "string",
    "secretly",
    "array",
    "need",
    "tell",
    "memory",
    "notice",
    "ca",
    "add",
    "storage",
    "keyword",
    "slowly",
    "also",
    "knows",
    "since",
    "function",
    "name",
    "variable",
    "actually",
    "getting",
    "stored",
    "anywhere",
    "says",
    "hey",
    "ca",
    "need",
    "beat",
    "memory",
    "called",
    "data",
    "two",
    "accepts",
    "want",
    "function",
    "look",
    "like",
    "summary",
    "struct",
    "mappings",
    "arrays",
    "need",
    "given",
    "memory",
    "called",
    "data",
    "keyword",
    "adding",
    "parameter",
    "different",
    "functions",
    "learn",
    "storage",
    "memory",
    "call",
    "data",
    "later",
    "sessions",
    "list",
    "great",
    "know",
    "someone",
    "name",
    "know",
    "favorite",
    "number",
    "well",
    "could",
    "could",
    "look",
    "whole",
    "array",
    "looking",
    "person",
    "example",
    "contract",
    "say",
    "okay",
    "looking",
    "john",
    "okay",
    "let",
    "start",
    "zero",
    "okay",
    "patrick",
    "okay",
    "let",
    "go",
    "one",
    "okay",
    "john",
    "oh",
    "great",
    "favorite",
    "number",
    "16",
    "well",
    "really",
    "easy",
    "two",
    "people",
    "hundreds",
    "people",
    "array",
    "well",
    "keep",
    "iterating",
    "way",
    "index",
    "person",
    "obviously",
    "really",
    "inefficient",
    "another",
    "way",
    "store",
    "information",
    "much",
    "easier",
    "quicker",
    "access",
    "well",
    "another",
    "data",
    "structure",
    "use",
    "something",
    "called",
    "mapping",
    "think",
    "mapping",
    "sort",
    "like",
    "dictionary",
    "set",
    "keys",
    "key",
    "returning",
    "certain",
    "value",
    "associated",
    "key",
    "create",
    "mapping",
    "variable",
    "exact",
    "way",
    "create",
    "variables",
    "going",
    "type",
    "mapping",
    "string",
    "tivity",
    "sex",
    "going",
    "type",
    "visibility",
    "keyword",
    "going",
    "public",
    "call",
    "name",
    "favorite",
    "number",
    "dictionary",
    "every",
    "single",
    "name",
    "going",
    "map",
    "specific",
    "number",
    "let",
    "add",
    "capability",
    "add",
    "person",
    "function",
    "going",
    "add",
    "people",
    "array",
    "let",
    "also",
    "add",
    "mapping",
    "say",
    "name",
    "favorite",
    "number",
    "app",
    "key",
    "name",
    "going",
    "equal",
    "favorite",
    "number",
    "let",
    "go",
    "ahead",
    "compile",
    "go",
    "deploy",
    "screen",
    "deploy",
    "click",
    "new",
    "button",
    "named",
    "favorite",
    "number",
    "type",
    "patrick",
    "nothing",
    "shows",
    "typing",
    "patrick",
    "see",
    "get",
    "zero",
    "response",
    "typing",
    "john",
    "also",
    "get",
    "zero",
    "response",
    "type",
    "becca",
    "also",
    "get",
    "zero",
    "response",
    "create",
    "mapping",
    "initialize",
    "everything",
    "null",
    "value",
    "every",
    "single",
    "possible",
    "string",
    "planet",
    "right",
    "initialized",
    "favorite",
    "number",
    "zero",
    "want",
    "change",
    "go",
    "manually",
    "add",
    "let",
    "go",
    "ahead",
    "add",
    "person",
    "mapping",
    "add",
    "patrick",
    "say",
    "favorite",
    "number",
    "seven",
    "looks",
    "like",
    "transaction",
    "go",
    "also",
    "add",
    "becca",
    "say",
    "favorite",
    "number",
    "let",
    "john",
    "say",
    "favorite",
    "number",
    "look",
    "patrick",
    "immediately",
    "get",
    "back",
    "patrick",
    "favorite",
    "number",
    "get",
    "seven",
    "back",
    "look",
    "john",
    "immediately",
    "get",
    "back",
    "back",
    "may",
    "get",
    "back",
    "also",
    "see",
    "array",
    "kept",
    "people",
    "push",
    "bit",
    "zero",
    "see",
    "patrick",
    "one",
    "see",
    "becca",
    "two",
    "see",
    "john",
    "mapping",
    "saying",
    "string",
    "name",
    "mapped",
    "un",
    "256",
    "favorite",
    "number",
    "lot",
    "variables",
    "like",
    "make",
    "explicitly",
    "named",
    "like",
    "name",
    "favorite",
    "number",
    "space",
    "let",
    "say",
    "really",
    "like",
    "simple",
    "storage",
    "contract",
    "right",
    "favorite",
    "number",
    "global",
    "variable",
    "save",
    "favorite",
    "number",
    "store",
    "function",
    "mapping",
    "name",
    "favorite",
    "numbers",
    "array",
    "new",
    "type",
    "created",
    "called",
    "people",
    "add",
    "array",
    "mapping",
    "using",
    "add",
    "person",
    "function",
    "created",
    "able",
    "save",
    "multiple",
    "people",
    "favorite",
    "numbers",
    "well",
    "kind",
    "global",
    "favorite",
    "number",
    "well",
    "let",
    "say",
    "really",
    "love",
    "contract",
    "ready",
    "send",
    "test",
    "net",
    "people",
    "interact",
    "future",
    "sections",
    "hear",
    "say",
    "write",
    "tests",
    "really",
    "simple",
    "auditing",
    "let",
    "go",
    "ahead",
    "learn",
    "actually",
    "deploy",
    "test",
    "net",
    "real",
    "network",
    "remember",
    "test",
    "nets",
    "run",
    "goodness",
    "people",
    "hearts",
    "little",
    "bit",
    "funky",
    "maybe",
    "work",
    "exactly",
    "show",
    "okay",
    "long",
    "works",
    "javascript",
    "vm",
    "set",
    "good",
    "practice",
    "learn",
    "deploy",
    "real",
    "test",
    "net",
    "let",
    "go",
    "ahead",
    "contract",
    "simple",
    "storage",
    "dot",
    "soul",
    "compiled",
    "compiling",
    "passing",
    "get",
    "little",
    "green",
    "checkmark",
    "go",
    "deploy",
    "section",
    "let",
    "go",
    "ahead",
    "get",
    "going",
    "change",
    "environment",
    "working",
    "javascript",
    "vm",
    "kind",
    "fake",
    "simulated",
    "environment",
    "want",
    "move",
    "either",
    "injected",
    "web",
    "three",
    "web",
    "three",
    "provider",
    "hover",
    "injected",
    "web",
    "three",
    "really",
    "really",
    "small",
    "text",
    "basically",
    "means",
    "going",
    "inject",
    "meta",
    "mask",
    "web",
    "three",
    "wallet",
    "browser",
    "use",
    "similar",
    "faucet",
    "pick",
    "account",
    "want",
    "use",
    "gon",
    "na",
    "go",
    "ahead",
    "pick",
    "account",
    "one",
    "actually",
    "see",
    "account",
    "account",
    "section",
    "remix",
    "injected",
    "web",
    "three",
    "means",
    "using",
    "meta",
    "mask",
    "whatever",
    "web",
    "three",
    "wallet",
    "web",
    "three",
    "provider",
    "little",
    "bit",
    "manually",
    "choose",
    "endpoint",
    "going",
    "go",
    "right",
    "get",
    "later",
    "course",
    "understand",
    "means",
    "picking",
    "injected",
    "web",
    "three",
    "whatever",
    "network",
    "injected",
    "web",
    "three",
    "case",
    "wallet",
    "connected",
    "going",
    "network",
    "deploy",
    "section",
    "going",
    "deploying",
    "rinkeby",
    "depending",
    "whatever",
    "recommended",
    "test",
    "net",
    "recommended",
    "faucet",
    "dictate",
    "test",
    "net",
    "actually",
    "deploy",
    "us",
    "going",
    "rigby",
    "deploy",
    "test",
    "remember",
    "going",
    "need",
    "gas",
    "going",
    "need",
    "tested",
    "etherium",
    "deploying",
    "main",
    "net",
    "main",
    "aetherium",
    "come",
    "top",
    "github",
    "repo",
    "make",
    "sure",
    "updated",
    "faucet",
    "place",
    "go",
    "link",
    "token",
    "contracts",
    "page",
    "chain",
    "link",
    "documentation",
    "scroll",
    "ranking",
    "see",
    "test",
    "link",
    "available",
    "test",
    "eath",
    "available",
    "location",
    "always",
    "look",
    "find",
    "date",
    "faucets",
    "point",
    "right",
    "back",
    "working",
    "injected",
    "web",
    "three",
    "go",
    "exact",
    "steps",
    "deploy",
    "test",
    "net",
    "deploy",
    "virtual",
    "machine",
    "remember",
    "run",
    "gas",
    "deploy",
    "sure",
    "check",
    "back",
    "faucets",
    "actually",
    "deploy",
    "going",
    "thing",
    "gon",
    "na",
    "go",
    "ahead",
    "hit",
    "deploy",
    "time",
    "metamask",
    "going",
    "pop",
    "ask",
    "us",
    "want",
    "actually",
    "deploy",
    "exact",
    "saw",
    "blockchain",
    "example",
    "sign",
    "transactions",
    "signing",
    "sending",
    "transaction",
    "data",
    "transaction",
    "massive",
    "massive",
    "data",
    "thing",
    "represents",
    "contract",
    "created",
    "see",
    "payment",
    "information",
    "transaction",
    "deploying",
    "contract",
    "see",
    "going",
    "cost",
    "around",
    "much",
    "aetherium",
    "deploy",
    "rinkeby",
    "test",
    "network",
    "going",
    "fake",
    "aetherium",
    "gon",
    "na",
    "go",
    "ahead",
    "hit",
    "confirm",
    "pop",
    "little",
    "console",
    "remix",
    "see",
    "slight",
    "delay",
    "actually",
    "say",
    "green",
    "checkmark",
    "confirmed",
    "went",
    "actually",
    "went",
    "go",
    "ahead",
    "right",
    "click",
    "open",
    "new",
    "tab",
    "view",
    "ether",
    "scan",
    "slight",
    "delay",
    "actually",
    "able",
    "see",
    "transaction",
    "details",
    "exactly",
    "transaction",
    "details",
    "sending",
    "aetherium",
    "hash",
    "status",
    "blocked",
    "block",
    "confirmations",
    "timestamp",
    "going",
    "us",
    "two",
    "going",
    "average",
    "contract",
    "created",
    "send",
    "value",
    "going",
    "zero",
    "ether",
    "course",
    "see",
    "transaction",
    "fee",
    "well",
    "gas",
    "price",
    "deploying",
    "contract",
    "blockchain",
    "modifying",
    "state",
    "blockchain",
    "pay",
    "gas",
    "see",
    "different",
    "pieces",
    "see",
    "gas",
    "limit",
    "gas",
    "usage",
    "much",
    "higher",
    "sending",
    "aetherium",
    "since",
    "putting",
    "lot",
    "data",
    "chain",
    "adding",
    "lot",
    "computation",
    "number",
    "much",
    "higher",
    "number",
    "sending",
    "aetherium",
    "come",
    "back",
    "remix",
    "scroll",
    "able",
    "see",
    "simple",
    "storage",
    "contract",
    "address",
    "hit",
    "copy",
    "button",
    "go",
    "rink",
    "ether",
    "scan",
    "paste",
    "search",
    "bar",
    "get",
    "contract",
    "deployed",
    "see",
    "first",
    "transaction",
    "going",
    "contract",
    "creation",
    "transaction",
    "contract",
    "created",
    "one",
    "transaction",
    "contract",
    "created",
    "contract",
    "created",
    "exact",
    "functions",
    "saw",
    "working",
    "javascript",
    "virtual",
    "machine",
    "fake",
    "environment",
    "super",
    "fake",
    "environment",
    "exact",
    "things",
    "javascript",
    "vm",
    "real",
    "test",
    "network",
    "see",
    "hit",
    "retrieve",
    "metamask",
    "pop",
    "blue",
    "view",
    "function",
    "look",
    "people",
    "zero",
    "also",
    "view",
    "function",
    "nothing",
    "pops",
    "named",
    "favorite",
    "number",
    "blank",
    "type",
    "patrick",
    "absolutely",
    "nothing",
    "happens",
    "right",
    "get",
    "get",
    "zero",
    "returned",
    "mappings",
    "initialize",
    "every",
    "single",
    "key",
    "blank",
    "null",
    "value",
    "256",
    "zero",
    "go",
    "ahead",
    "store",
    "favorite",
    "number",
    "store",
    "favorite",
    "number",
    "going",
    "modify",
    "blockchain",
    "meta",
    "mask",
    "pop",
    "us",
    "confirm",
    "transaction",
    "sign",
    "transaction",
    "modify",
    "blockchain",
    "state",
    "going",
    "store",
    "favorite",
    "number",
    "16",
    "hit",
    "store",
    "meta",
    "mask",
    "pop",
    "going",
    "go",
    "ahead",
    "actually",
    "confirm",
    "confirm",
    "equivalent",
    "us",
    "signing",
    "transaction",
    "sending",
    "blockchain",
    "modify",
    "state",
    "gon",
    "na",
    "go",
    "ahead",
    "confirm",
    "able",
    "view",
    "ether",
    "scan",
    "might",
    "take",
    "little",
    "bit",
    "actually",
    "index",
    "actually",
    "start",
    "working",
    "please",
    "patient",
    "test",
    "nets",
    "building",
    "applications",
    "want",
    "test",
    "net",
    "piece",
    "absolutely",
    "try",
    "last",
    "step",
    "wait",
    "really",
    "long",
    "time",
    "puts",
    "burden",
    "people",
    "running",
    "tests",
    "running",
    "goodness",
    "heart",
    "please",
    "try",
    "make",
    "last",
    "step",
    "actual",
    "building",
    "process",
    "us",
    "learning",
    "right",
    "okay",
    "slight",
    "delay",
    "hit",
    "refresh",
    "looks",
    "like",
    "indexing",
    "ether",
    "scan",
    "ether",
    "scan",
    "website",
    "still",
    "figuring",
    "transaction",
    "going",
    "remix",
    "looks",
    "like",
    "blockchain",
    "actually",
    "already",
    "gone",
    "hit",
    "retrieve",
    "indeed",
    "see",
    "favorite",
    "number",
    "course",
    "two",
    "still",
    "going",
    "blank",
    "looks",
    "like",
    "transaction",
    "gone",
    "ether",
    "scan",
    "indexed",
    "let",
    "go",
    "ahead",
    "add",
    "person",
    "add",
    "patrick",
    "favorite",
    "number",
    "going",
    "go",
    "ahead",
    "add",
    "person",
    "since",
    "orange",
    "transactions",
    "gon",
    "na",
    "pop",
    "modifying",
    "blockchain",
    "state",
    "go",
    "ahead",
    "hit",
    "confirm",
    "going",
    "little",
    "bit",
    "patient",
    "wait",
    "transaction",
    "go",
    "see",
    "update",
    "update",
    "hit",
    "named",
    "favorite",
    "number",
    "patrick",
    "get",
    "hit",
    "people",
    "zero",
    "get",
    "favorite",
    "number",
    "name",
    "patrick",
    "awesome",
    "actually",
    "successfully",
    "deployed",
    "contract",
    "actual",
    "test",
    "net",
    "actually",
    "seen",
    "ether",
    "scan",
    "transactions",
    "look",
    "like",
    "incredibly",
    "proud",
    "sure",
    "give",
    "high",
    "five",
    "pat",
    "back",
    "send",
    "tweet",
    "saying",
    "exactly",
    "excited",
    "make",
    "sure",
    "celebrate",
    "little",
    "wins",
    "celebrating",
    "little",
    "wins",
    "give",
    "motivation",
    "keep",
    "going",
    "really",
    "excite",
    "learning",
    "new",
    "thing",
    "huge",
    "congratulations",
    "got",
    "far",
    "deployed",
    "first",
    "contract",
    "test",
    "net",
    "congratulations",
    "want",
    "see",
    "looks",
    "like",
    "deploy",
    "different",
    "network",
    "need",
    "metamask",
    "switch",
    "different",
    "test",
    "net",
    "see",
    "switch",
    "covid",
    "remix",
    "automatically",
    "updates",
    "says",
    "ah",
    "injected",
    "web",
    "three",
    "covid",
    "test",
    "network",
    "could",
    "switch",
    "maybe",
    "grilley",
    "say",
    "ah",
    "injected",
    "web",
    "three",
    "grilley",
    "test",
    "net",
    "deploying",
    "course",
    "need",
    "actual",
    "test",
    "net",
    "aetherium",
    "deploying",
    "would",
    "able",
    "go",
    "ahead",
    "hit",
    "deploy",
    "right",
    "metamask",
    "pops",
    "get",
    "little",
    "red",
    "thing",
    "saying",
    "insufficient",
    "funds",
    "course",
    "later",
    "learn",
    "add",
    "new",
    "networks",
    "like",
    "polygon",
    "like",
    "avalanche",
    "like",
    "phantom",
    "metamask",
    "deploy",
    "one",
    "well",
    "mentioned",
    "term",
    "code",
    "wrote",
    "hit",
    "compile",
    "button",
    "compiles",
    "evm",
    "ethereum",
    "virtual",
    "machine",
    "worry",
    "much",
    "means",
    "evm",
    "standard",
    "deploy",
    "smart",
    "contracts",
    "aetherium",
    "like",
    "blockchains",
    "blockchain",
    "implements",
    "type",
    "evm",
    "deploy",
    "solidity",
    "code",
    "examples",
    "evm",
    "compatible",
    "blockchains",
    "going",
    "avalanche",
    "phantom",
    "polygon",
    "since",
    "evm",
    "compatible",
    "means",
    "write",
    "solidity",
    "code",
    "deploy",
    "blockchains",
    "show",
    "later",
    "add",
    "new",
    "networks",
    "metamask",
    "deploy",
    "let",
    "quick",
    "recap",
    "first",
    "smart",
    "contract",
    "actually",
    "take",
    "break",
    "maybe",
    "get",
    "ice",
    "cream",
    "coffee",
    "absolutely",
    "deserve",
    "congratulations",
    "first",
    "thing",
    "always",
    "need",
    "smart",
    "contracts",
    "tell",
    "solidity",
    "version",
    "solidity",
    "going",
    "using",
    "additionally",
    "want",
    "add",
    "spdx",
    "license",
    "identifier",
    "create",
    "contract",
    "object",
    "name",
    "contract",
    "contract",
    "solidity",
    "similar",
    "class",
    "programming",
    "languages",
    "everything",
    "inside",
    "squiggly",
    "brackets",
    "part",
    "contract",
    "many",
    "different",
    "types",
    "solidity",
    "like",
    "unsigned",
    "integer",
    "256",
    "boolean",
    "string",
    "bytes",
    "32",
    "etc",
    "want",
    "create",
    "new",
    "type",
    "create",
    "called",
    "struct",
    "solidity",
    "create",
    "arrays",
    "lists",
    "solidity",
    "create",
    "dictionaries",
    "called",
    "mappings",
    "solidity",
    "hash",
    "tables",
    "give",
    "key",
    "spit",
    "value",
    "key",
    "represents",
    "create",
    "functions",
    "solidity",
    "modify",
    "state",
    "blockchain",
    "also",
    "create",
    "functions",
    "solidity",
    "modify",
    "state",
    "blockchain",
    "view",
    "pure",
    "functions",
    "modify",
    "state",
    "blockchain",
    "also",
    "specify",
    "different",
    "data",
    "locations",
    "functions",
    "called",
    "data",
    "memory",
    "mean",
    "data",
    "temporary",
    "exist",
    "duration",
    "function",
    "storage",
    "variables",
    "permanent",
    "stay",
    "forever",
    "function",
    "parameters",
    "ca",
    "stored",
    "variables",
    "going",
    "exist",
    "duration",
    "function",
    "solidity",
    "code",
    "work",
    "hit",
    "compile",
    "actually",
    "compiles",
    "aetherium",
    "virtual",
    "machine",
    "specifications",
    "learn",
    "specifications",
    "later",
    "last",
    "least",
    "another",
    "huge",
    "congratulations",
    "first",
    "contract",
    "awesome",
    "right",
    "let",
    "get",
    "started",
    "lesson",
    "three",
    "remember",
    "everything",
    "github",
    "repository",
    "scroll",
    "hit",
    "lesson",
    "three",
    "see",
    "code",
    "building",
    "repo",
    "film",
    "underneath",
    "lesson",
    "three",
    "going",
    "lot",
    "information",
    "code",
    "code",
    "samples",
    "end",
    "dash",
    "f",
    "f",
    "c",
    "means",
    "dash",
    "free",
    "code",
    "camp",
    "see",
    "github",
    "repo",
    "ends",
    "dash",
    "f",
    "f",
    "c",
    "know",
    "repository",
    "associated",
    "course",
    "going",
    "quick",
    "high",
    "level",
    "walkthrough",
    "going",
    "building",
    "lesson",
    "need",
    "code",
    "right",
    "sit",
    "back",
    "watch",
    "enjoy",
    "lesson",
    "actually",
    "going",
    "expand",
    "three",
    "different",
    "contracts",
    "let",
    "say",
    "want",
    "able",
    "deploy",
    "simple",
    "storage",
    "contracts",
    "contract",
    "yes",
    "contracts",
    "indeed",
    "deploy",
    "contracts",
    "going",
    "create",
    "contract",
    "called",
    "storage",
    "factory",
    "dot",
    "sole",
    "going",
    "able",
    "deploy",
    "interact",
    "contracts",
    "could",
    "could",
    "go",
    "deploy",
    "javascript",
    "vm",
    "going",
    "choose",
    "storage",
    "factory",
    "gon",
    "na",
    "go",
    "ahead",
    "hit",
    "deploy",
    "contract",
    "number",
    "different",
    "functions",
    "top",
    "function",
    "function",
    "called",
    "crate",
    "simple",
    "storage",
    "contract",
    "click",
    "actually",
    "create",
    "simple",
    "storage",
    "contract",
    "us",
    "go",
    "ahead",
    "interact",
    "ig",
    "zero",
    "save",
    "favorite",
    "number",
    "one",
    "hit",
    "sf",
    "get",
    "zero",
    "get",
    "one",
    "back",
    "see",
    "address",
    "simple",
    "storage",
    "contract",
    "deployed",
    "additionally",
    "going",
    "learn",
    "number",
    "solidity",
    "features",
    "importing",
    "inheritance",
    "much",
    "let",
    "go",
    "ahead",
    "jump",
    "remember",
    "code",
    "available",
    "github",
    "repository",
    "sure",
    "refer",
    "back",
    "contracts",
    "get",
    "lost",
    "back",
    "remix",
    "simple",
    "storage",
    "dot",
    "soul",
    "skipped",
    "last",
    "section",
    "sure",
    "go",
    "full",
    "blockchain",
    "solidity",
    "course",
    "jas",
    "scroll",
    "lesson",
    "two",
    "welcome",
    "remix",
    "grab",
    "code",
    "go",
    "simple",
    "storage",
    "outsole",
    "copy",
    "paste",
    "code",
    "remix",
    "going",
    "starting",
    "simple",
    "storage",
    "contract",
    "great",
    "allows",
    "us",
    "store",
    "favorite",
    "number",
    "allows",
    "us",
    "store",
    "favorite",
    "numbers",
    "across",
    "different",
    "people",
    "mappings",
    "arrays",
    "let",
    "say",
    "want",
    "get",
    "even",
    "advanced",
    "actually",
    "contract",
    "actually",
    "deploy",
    "contracts",
    "us",
    "go",
    "ahead",
    "interact",
    "contracts",
    "contracts",
    "contracts",
    "interacting",
    "essential",
    "part",
    "working",
    "solidity",
    "working",
    "smart",
    "contracts",
    "ability",
    "contracts",
    "seamlessly",
    "interact",
    "known",
    "composability",
    "smart",
    "contracts",
    "composable",
    "easily",
    "interact",
    "especially",
    "awesome",
    "comes",
    "things",
    "like",
    "defy",
    "really",
    "complex",
    "financial",
    "products",
    "interact",
    "incredibly",
    "easily",
    "since",
    "code",
    "available",
    "chain",
    "going",
    "learn",
    "let",
    "keep",
    "simple",
    "storage",
    "contract",
    "exactly",
    "way",
    "going",
    "create",
    "new",
    "contract",
    "called",
    "storage",
    "factory",
    "going",
    "hit",
    "new",
    "file",
    "button",
    "type",
    "storage",
    "factory",
    "dot",
    "salt",
    "let",
    "close",
    "let",
    "go",
    "ahead",
    "get",
    "contract",
    "setup",
    "learned",
    "first",
    "thing",
    "going",
    "want",
    "spdx",
    "license",
    "identifier",
    "going",
    "mit",
    "next",
    "thing",
    "always",
    "going",
    "need",
    "solidity",
    "version",
    "pragma",
    "solidity",
    "could",
    "zero",
    "point",
    "one",
    "let",
    "zero",
    "point",
    "add",
    "carrot",
    "meaning",
    "version",
    "point",
    "something",
    "work",
    "let",
    "add",
    "contract",
    "name",
    "going",
    "storage",
    "factory",
    "hit",
    "command",
    "ctrl",
    "go",
    "compile",
    "tab",
    "hit",
    "compile",
    "boom",
    "regular",
    "setup",
    "want",
    "create",
    "function",
    "actually",
    "deploy",
    "simple",
    "storage",
    "contract",
    "create",
    "function",
    "called",
    "function",
    "create",
    "simple",
    "storage",
    "contract",
    "public",
    "anybody",
    "call",
    "deploy",
    "simple",
    "storage",
    "contract",
    "save",
    "global",
    "variable",
    "storage",
    "factory",
    "contract",
    "know",
    "simple",
    "storage",
    "contract",
    "looks",
    "like",
    "order",
    "deploy",
    "storage",
    "factory",
    "contract",
    "going",
    "deploy",
    "simple",
    "storage",
    "going",
    "need",
    "know",
    "code",
    "simple",
    "storage",
    "one",
    "way",
    "actually",
    "go",
    "simple",
    "storage",
    "dot",
    "soul",
    "copy",
    "everything",
    "underneath",
    "pragma",
    "solidity",
    "paste",
    "storage",
    "factory",
    "dot",
    "soul",
    "underneath",
    "pragma",
    "solidity",
    "go",
    "ahead",
    "compile",
    "save",
    "actually",
    "works",
    "storage",
    "factory",
    "soul",
    "contract",
    "actually",
    "two",
    "contracts",
    "simple",
    "storage",
    "contract",
    "storage",
    "factory",
    "contract",
    "actually",
    "go",
    "deploy",
    "tab",
    "scroll",
    "deploy",
    "storage",
    "factory",
    "dot",
    "soul",
    "simple",
    "storage",
    "storage",
    "factory",
    "see",
    "actually",
    "choose",
    "one",
    "contracts",
    "deploy",
    "single",
    "file",
    "solidity",
    "hold",
    "multiple",
    "different",
    "contracts",
    "simple",
    "storage",
    "storage",
    "factory",
    "actually",
    "go",
    "ahead",
    "create",
    "function",
    "deploy",
    "simple",
    "storage",
    "console",
    "going",
    "create",
    "global",
    "variable",
    "way",
    "would",
    "create",
    "global",
    "variable",
    "type",
    "going",
    "type",
    "simple",
    "storage",
    "contract",
    "give",
    "visibility",
    "public",
    "give",
    "variable",
    "name",
    "type",
    "simple",
    "storage",
    "contract",
    "going",
    "public",
    "name",
    "variable",
    "going",
    "simple",
    "storage",
    "function",
    "create",
    "simple",
    "storage",
    "contract",
    "gon",
    "na",
    "say",
    "simple",
    "storage",
    "equals",
    "new",
    "simple",
    "storage",
    "new",
    "keyword",
    "solidity",
    "knows",
    "ah",
    "okay",
    "going",
    "deploy",
    "new",
    "simple",
    "storage",
    "contract",
    "go",
    "ahead",
    "compile",
    "go",
    "deploy",
    "tab",
    "make",
    "sure",
    "javascript",
    "vm",
    "scroll",
    "contract",
    "choose",
    "storage",
    "factory",
    "remember",
    "need",
    "storage",
    "factory",
    "dot",
    "soul",
    "selected",
    "order",
    "show",
    "storage",
    "factory",
    "go",
    "ahead",
    "hit",
    "deploy",
    "see",
    "storage",
    "factory",
    "contract",
    "two",
    "buttons",
    "one",
    "create",
    "simple",
    "storage",
    "one",
    "going",
    "view",
    "simple",
    "storage",
    "contract",
    "click",
    "right",
    "going",
    "show",
    "us",
    "currently",
    "address",
    "zero",
    "gets",
    "initialized",
    "blank",
    "saying",
    "simple",
    "storage",
    "contract",
    "currently",
    "deployed",
    "pull",
    "console",
    "click",
    "create",
    "simple",
    "storage",
    "see",
    "created",
    "new",
    "function",
    "call",
    "storage",
    "factory",
    "dot",
    "create",
    "simple",
    "storage",
    "contract",
    "called",
    "function",
    "created",
    "deployed",
    "new",
    "simple",
    "storage",
    "contract",
    "see",
    "address",
    "simple",
    "storage",
    "contract",
    "clicking",
    "simple",
    "storage",
    "button",
    "see",
    "address",
    "associated",
    "know",
    "contract",
    "actually",
    "deploy",
    "another",
    "contract",
    "thing",
    "massive",
    "chunk",
    "code",
    "storage",
    "factory",
    "little",
    "bit",
    "redundant",
    "especially",
    "since",
    "file",
    "called",
    "simple",
    "storage",
    "dot",
    "soul",
    "let",
    "say",
    "contract",
    "got",
    "ton",
    "contracts",
    "always",
    "copy",
    "pasting",
    "contracts",
    "going",
    "lot",
    "work",
    "instead",
    "use",
    "called",
    "import",
    "let",
    "go",
    "ahead",
    "delete",
    "contracts",
    "simple",
    "storage",
    "going",
    "type",
    "import",
    "dot",
    "slash",
    "simple",
    "storage",
    "dot",
    "soul",
    "import",
    "dot",
    "slash",
    "simple",
    "storage",
    "dot",
    "seoul",
    "exact",
    "copy",
    "pasted",
    "version",
    "simple",
    "storage",
    "takes",
    "path",
    "another",
    "file",
    "takes",
    "path",
    "package",
    "github",
    "get",
    "minute",
    "another",
    "file",
    "says",
    "okay",
    "going",
    "paste",
    "contract",
    "top",
    "contract",
    "actually",
    "see",
    "go",
    "back",
    "compile",
    "go",
    "deploy",
    "let",
    "delete",
    "old",
    "contract",
    "actually",
    "see",
    "storage",
    "factory",
    "dot",
    "soul",
    "deploy",
    "click",
    "drop",
    "run",
    "functions",
    "exactly",
    "importing",
    "contracts",
    "like",
    "much",
    "nicer",
    "always",
    "copy",
    "pasting",
    "code",
    "way",
    "want",
    "change",
    "something",
    "simple",
    "storage",
    "one",
    "canonical",
    "place",
    "go",
    "ahead",
    "change",
    "instead",
    "change",
    "multiple",
    "different",
    "places",
    "additionally",
    "notice",
    "pragma",
    "solidity",
    "contracts",
    "two",
    "separate",
    "files",
    "actually",
    "different",
    "versions",
    "solidity",
    "right",
    "storage",
    "factory",
    "carrot",
    "zero",
    "point",
    "means",
    "anything",
    "within",
    "range",
    "contract",
    "okay",
    "simple",
    "storage",
    "sole",
    "says",
    "anything",
    "zero",
    "point",
    "range",
    "okay",
    "try",
    "change",
    "compiler",
    "version",
    "go",
    "ahead",
    "compile",
    "remix",
    "going",
    "automatically",
    "bump",
    "better",
    "version",
    "compatible",
    "case",
    "eight",
    "point",
    "example",
    "changed",
    "solidity",
    "version",
    "storage",
    "factory",
    "zero",
    "point",
    "tried",
    "compile",
    "actually",
    "end",
    "getting",
    "issue",
    "parser",
    "error",
    "source",
    "file",
    "requires",
    "different",
    "compiler",
    "version",
    "storage",
    "factory",
    "saying",
    "hey",
    "anything",
    "means",
    "okay",
    "however",
    "simple",
    "storage",
    "saying",
    "anything",
    "zero",
    "point",
    "okay",
    "two",
    "versions",
    "compatible",
    "need",
    "need",
    "make",
    "sure",
    "versions",
    "solidity",
    "indeed",
    "compatible",
    "let",
    "change",
    "version",
    "back",
    "recompile",
    "looking",
    "good",
    "since",
    "create",
    "simple",
    "storage",
    "contract",
    "every",
    "single",
    "time",
    "call",
    "right",
    "replace",
    "whatever",
    "currently",
    "public",
    "simple",
    "storage",
    "variable",
    "let",
    "go",
    "ahead",
    "update",
    "actually",
    "keep",
    "running",
    "list",
    "deployed",
    "simple",
    "storage",
    "contracts",
    "instead",
    "single",
    "variable",
    "make",
    "simple",
    "storage",
    "array",
    "list",
    "public",
    "simple",
    "storage",
    "array",
    "whenever",
    "create",
    "new",
    "simple",
    "storage",
    "contract",
    "instead",
    "saving",
    "like",
    "going",
    "going",
    "save",
    "memory",
    "variable",
    "saying",
    "simple",
    "storage",
    "simple",
    "storage",
    "equals",
    "new",
    "simple",
    "storage",
    "going",
    "add",
    "variable",
    "simple",
    "storage",
    "array",
    "way",
    "gon",
    "na",
    "simple",
    "storage",
    "array",
    "dot",
    "push",
    "simple",
    "storage",
    "spell",
    "storage",
    "right",
    "let",
    "go",
    "ahead",
    "compile",
    "looks",
    "good",
    "deploy",
    "storage",
    "factory",
    "deploy",
    "like",
    "simple",
    "storage",
    "array",
    "view",
    "button",
    "create",
    "simple",
    "storage",
    "view",
    "simple",
    "storage",
    "contract",
    "zero",
    "right",
    "nothing",
    "one",
    "create",
    "another",
    "simple",
    "storage",
    "contract",
    "see",
    "new",
    "simple",
    "storage",
    "contract",
    "address",
    "index",
    "one",
    "right",
    "great",
    "keep",
    "track",
    "simple",
    "storage",
    "deployments",
    "actually",
    "interact",
    "let",
    "say",
    "wanted",
    "able",
    "call",
    "store",
    "function",
    "simple",
    "storage",
    "dot",
    "souls",
    "storage",
    "factory",
    "think",
    "storage",
    "factory",
    "almost",
    "like",
    "manager",
    "simple",
    "storages",
    "let",
    "create",
    "new",
    "function",
    "exactly",
    "create",
    "function",
    "call",
    "f",
    "store",
    "going",
    "stand",
    "storage",
    "factory",
    "store",
    "going",
    "take",
    "256",
    "simple",
    "storage",
    "index",
    "unt",
    "256",
    "underscore",
    "simple",
    "storage",
    "number",
    "public",
    "auction",
    "well",
    "order",
    "interact",
    "contract",
    "always",
    "going",
    "need",
    "two",
    "things",
    "going",
    "refer",
    "lot",
    "always",
    "going",
    "need",
    "address",
    "contract",
    "abi",
    "contract",
    "api",
    "stands",
    "application",
    "binary",
    "interface",
    "api",
    "tell",
    "code",
    "exactly",
    "interact",
    "contract",
    "go",
    "deeper",
    "api",
    "move",
    "go",
    "compile",
    "tab",
    "hit",
    "compile",
    "things",
    "actually",
    "compiling",
    "scroll",
    "see",
    "compilation",
    "details",
    "see",
    "whole",
    "bunch",
    "information",
    "different",
    "contracts",
    "see",
    "name",
    "contract",
    "simple",
    "storage",
    "contract",
    "simple",
    "storage",
    "see",
    "whole",
    "bunch",
    "metadata",
    "like",
    "compiler",
    "language",
    "output",
    "settings",
    "stuff",
    "see",
    "exact",
    "bytecode",
    "opcodes",
    "talk",
    "much",
    "later",
    "also",
    "see",
    "api",
    "api",
    "tells",
    "different",
    "inputs",
    "outputs",
    "everything",
    "could",
    "contract",
    "example",
    "simple",
    "storage",
    "look",
    "zero",
    "index",
    "api",
    "function",
    "add",
    "person",
    "look",
    "one",
    "see",
    "name",
    "favorite",
    "number",
    "looked",
    "two",
    "see",
    "people",
    "three",
    "retrieve",
    "store",
    "tells",
    "us",
    "different",
    "ways",
    "actually",
    "interact",
    "contract",
    "different",
    "functions",
    "call",
    "know",
    "addresses",
    "storing",
    "array",
    "simple",
    "storage",
    "array",
    "also",
    "get",
    "api",
    "importing",
    "simple",
    "storage",
    "dot",
    "soul",
    "compile",
    "simple",
    "storage",
    "soul",
    "saw",
    "compilation",
    "details",
    "whenever",
    "compile",
    "comes",
    "prepackaged",
    "abi",
    "automatically",
    "get",
    "abi",
    "importing",
    "like",
    "future",
    "see",
    "ways",
    "actually",
    "get",
    "api",
    "really",
    "easily",
    "call",
    "store",
    "function",
    "one",
    "contracts",
    "first",
    "going",
    "need",
    "get",
    "contract",
    "object",
    "say",
    "simple",
    "storage",
    "variable",
    "named",
    "simple",
    "storage",
    "variable",
    "name",
    "simple",
    "storage",
    "type",
    "simple",
    "storage",
    "going",
    "equal",
    "simple",
    "storage",
    "object",
    "instead",
    "new",
    "simple",
    "storage",
    "like",
    "last",
    "time",
    "going",
    "put",
    "address",
    "simple",
    "storage",
    "object",
    "get",
    "array",
    "function",
    "passing",
    "array",
    "index",
    "say",
    "simple",
    "storage",
    "contract",
    "address",
    "simple",
    "storage",
    "array",
    "index",
    "simple",
    "storage",
    "index",
    "bracket",
    "notation",
    "access",
    "different",
    "elements",
    "arrays",
    "want",
    "zeroeth",
    "element",
    "list",
    "simple",
    "storage",
    "index",
    "would",
    "zero",
    "pass",
    "bit",
    "give",
    "us",
    "address",
    "simple",
    "storage",
    "contract",
    "pass",
    "simple",
    "storage",
    "since",
    "array",
    "simple",
    "storage",
    "contracts",
    "access",
    "simple",
    "storage",
    "contract",
    "using",
    "index",
    "would",
    "say",
    "simple",
    "store",
    "edge",
    "array",
    "index",
    "underscore",
    "simple",
    "storage",
    "index",
    "saving",
    "contract",
    "object",
    "index",
    "simple",
    "storage",
    "index",
    "simple",
    "storage",
    "variable",
    "array",
    "keeping",
    "track",
    "addresses",
    "us",
    "automatically",
    "comes",
    "abi",
    "array",
    "addresses",
    "contract",
    "objects",
    "instead",
    "would",
    "wrap",
    "address",
    "simple",
    "storage",
    "object",
    "like",
    "get",
    "much",
    "later",
    "simple",
    "storage",
    "contract",
    "object",
    "call",
    "store",
    "function",
    "simple",
    "storage",
    "contract",
    "call",
    "simple",
    "storage",
    "dot",
    "store",
    "store",
    "simple",
    "storage",
    "number",
    "perfect",
    "deploy",
    "right",
    "though",
    "would",
    "able",
    "read",
    "store",
    "function",
    "let",
    "create",
    "another",
    "function",
    "read",
    "simple",
    "storage",
    "contract",
    "storage",
    "factory",
    "create",
    "function",
    "called",
    "f",
    "get",
    "stands",
    "storage",
    "factory",
    "get",
    "take",
    "un",
    "256",
    "underscore",
    "simple",
    "storage",
    "index",
    "public",
    "view",
    "function",
    "since",
    "going",
    "reading",
    "simple",
    "storage",
    "contract",
    "going",
    "return",
    "unt",
    "say",
    "simple",
    "storage",
    "simple",
    "storage",
    "equals",
    "use",
    "syntax",
    "get",
    "contract",
    "simple",
    "storage",
    "array",
    "simple",
    "storage",
    "index",
    "going",
    "return",
    "simple",
    "retrieve",
    "get",
    "number",
    "stored",
    "spell",
    "retrieved",
    "correctly",
    "get",
    "issues",
    "perfect",
    "compile",
    "deploy",
    "java",
    "script",
    "working",
    "fake",
    "account",
    "going",
    "use",
    "storage",
    "factory",
    "go",
    "ahead",
    "delete",
    "contracts",
    "far",
    "let",
    "go",
    "ahead",
    "deploy",
    "drop",
    "rate",
    "right",
    "sf",
    "get",
    "zero",
    "going",
    "get",
    "nothing",
    "simple",
    "storage",
    "address",
    "zero",
    "going",
    "nothing",
    "let",
    "create",
    "simple",
    "storage",
    "contract",
    "simple",
    "storage",
    "list",
    "get",
    "address",
    "zero",
    "hit",
    "sf",
    "get",
    "right",
    "zero",
    "get",
    "zero",
    "let",
    "store",
    "value",
    "contract",
    "index",
    "contract",
    "zero",
    "going",
    "pass",
    "zero",
    "symbol",
    "storage",
    "index",
    "going",
    "save",
    "number",
    "seven",
    "go",
    "ahead",
    "sf",
    "store",
    "right",
    "going",
    "store",
    "value",
    "seven",
    "contract",
    "sf",
    "get",
    "zero",
    "indeed",
    "return",
    "seven",
    "sf",
    "get",
    "one",
    "going",
    "get",
    "nothing",
    "going",
    "happen",
    "actually",
    "going",
    "get",
    "revert",
    "error",
    "let",
    "create",
    "another",
    "simple",
    "storage",
    "contract",
    "sf",
    "get",
    "one",
    "get",
    "zero",
    "gon",
    "na",
    "get",
    "default",
    "value",
    "let",
    "go",
    "ahead",
    "simple",
    "storage",
    "contract",
    "index",
    "one",
    "store",
    "number",
    "16",
    "hit",
    "sf",
    "store",
    "sf",
    "get",
    "one",
    "get",
    "feel",
    "free",
    "pause",
    "right",
    "play",
    "around",
    "really",
    "understand",
    "quick",
    "recap",
    "storage",
    "factory",
    "contract",
    "allows",
    "us",
    "create",
    "simple",
    "storage",
    "contracts",
    "saves",
    "simple",
    "storage",
    "array",
    "call",
    "different",
    "functions",
    "store",
    "values",
    "storage",
    "factory",
    "contract",
    "read",
    "values",
    "storage",
    "factory",
    "contract",
    "simple",
    "storage",
    "contracts",
    "created",
    "incredibly",
    "powerful",
    "additionally",
    "make",
    "two",
    "functions",
    "even",
    "easier",
    "call",
    "retrieve",
    "function",
    "directly",
    "call",
    "simple",
    "storage",
    "array",
    "brackets",
    "add",
    "simple",
    "storage",
    "index",
    "returns",
    "simple",
    "storage",
    "object",
    "could",
    "could",
    "actually",
    "delete",
    "whole",
    "part",
    "dot",
    "retrieve",
    "right",
    "delete",
    "line",
    "say",
    "return",
    "like",
    "go",
    "ahead",
    "save",
    "hit",
    "compile",
    "get",
    "green",
    "checkmark",
    "calling",
    "retrieve",
    "function",
    "whatever",
    "whatever",
    "simple",
    "storage",
    "object",
    "perfect",
    "thing",
    "deleting",
    "part",
    "dot",
    "store",
    "underscore",
    "simple",
    "store",
    "edge",
    "number",
    "save",
    "work",
    "exactly",
    "awesome",
    "simple",
    "storage",
    "contract",
    "store",
    "variables",
    "storage",
    "factory",
    "contract",
    "almost",
    "like",
    "manager",
    "simple",
    "storage",
    "contracts",
    "deploy",
    "interact",
    "fantastic",
    "let",
    "say",
    "really",
    "liked",
    "simple",
    "storage",
    "contract",
    "everything",
    "want",
    "maybe",
    "want",
    "whenever",
    "actually",
    "store",
    "value",
    "store",
    "favorite",
    "number",
    "stores",
    "favorite",
    "number",
    "plus",
    "five",
    "reason",
    "want",
    "contract",
    "everyone",
    "favorite",
    "number",
    "five",
    "numbers",
    "bigger",
    "think",
    "really",
    "like",
    "everything",
    "else",
    "contract",
    "offer",
    "let",
    "create",
    "new",
    "contract",
    "call",
    "extra",
    "storage",
    "say",
    "extra",
    "storage",
    "dot",
    "soul",
    "create",
    "new",
    "contract",
    "going",
    "set",
    "exact",
    "way",
    "normally",
    "would",
    "spdx",
    "license",
    "identifier",
    "gon",
    "na",
    "mit",
    "give",
    "pragma",
    "solidity",
    "zero",
    "point",
    "carrot",
    "say",
    "contract",
    "extra",
    "storage",
    "like",
    "save",
    "compile",
    "get",
    "green",
    "checkmark",
    "well",
    "first",
    "thing",
    "could",
    "could",
    "copy",
    "paste",
    "code",
    "back",
    "modify",
    "extra",
    "storage",
    "contract",
    "see",
    "fit",
    "seems",
    "little",
    "bit",
    "redundant",
    "lot",
    "work",
    "though",
    "another",
    "way",
    "actually",
    "get",
    "extra",
    "storage",
    "contract",
    "like",
    "simple",
    "storage",
    "contract",
    "well",
    "something",
    "called",
    "inheritance",
    "extra",
    "storage",
    "contract",
    "called",
    "child",
    "contract",
    "simple",
    "storage",
    "contract",
    "extra",
    "storage",
    "inherit",
    "functionality",
    "simple",
    "storage",
    "two",
    "lines",
    "code",
    "first",
    "order",
    "extra",
    "storage",
    "contract",
    "know",
    "simple",
    "storage",
    "need",
    "import",
    "say",
    "import",
    "dot",
    "slash",
    "simple",
    "storage",
    "dot",
    "soul",
    "say",
    "contract",
    "extra",
    "storage",
    "simple",
    "storage",
    "save",
    "compile",
    "extra",
    "storage",
    "contract",
    "going",
    "exact",
    "simple",
    "storage",
    "going",
    "called",
    "inherit",
    "functionality",
    "simple",
    "storage",
    "actually",
    "even",
    "see",
    "let",
    "go",
    "ahead",
    "make",
    "sure",
    "compiled",
    "go",
    "deploy",
    "deployed",
    "contract",
    "see",
    "extra",
    "storage",
    "deployed",
    "functions",
    "simple",
    "storage",
    "want",
    "contract",
    "inherit",
    "functionality",
    "another",
    "contract",
    "import",
    "say",
    "contract",
    "contract",
    "add",
    "additional",
    "functions",
    "extra",
    "storage",
    "contract",
    "include",
    "functionality",
    "simple",
    "storage",
    "let",
    "say",
    "inherit",
    "simple",
    "storage",
    "extra",
    "storage",
    "however",
    "one",
    "functions",
    "simple",
    "storage",
    "really",
    "actually",
    "like",
    "go",
    "back",
    "simple",
    "storage",
    "contract",
    "store",
    "function",
    "take",
    "favorite",
    "number",
    "assigns",
    "global",
    "favorite",
    "number",
    "whatever",
    "new",
    "number",
    "give",
    "extra",
    "storage",
    "want",
    "store",
    "function",
    "something",
    "different",
    "want",
    "add",
    "five",
    "number",
    "give",
    "achieve",
    "well",
    "something",
    "called",
    "overriding",
    "functions",
    "two",
    "keywords",
    "going",
    "use",
    "virtual",
    "override",
    "right",
    "try",
    "implement",
    "store",
    "function",
    "extra",
    "storage",
    "let",
    "see",
    "happens",
    "say",
    "function",
    "store",
    "went",
    "six",
    "favorite",
    "number",
    "public",
    "function",
    "let",
    "say",
    "instead",
    "storing",
    "favorite",
    "number",
    "say",
    "favorite",
    "number",
    "equals",
    "favorite",
    "number",
    "plus",
    "five",
    "try",
    "compile",
    "right",
    "actually",
    "run",
    "two",
    "different",
    "errors",
    "first",
    "one",
    "going",
    "say",
    "overriding",
    "function",
    "missing",
    "override",
    "specifier",
    "parent",
    "contract",
    "case",
    "simple",
    "storage",
    "function",
    "need",
    "tell",
    "solidity",
    "going",
    "override",
    "store",
    "function",
    "instead",
    "going",
    "use",
    "store",
    "function",
    "additionally",
    "get",
    "error",
    "saying",
    "trying",
    "override",
    "non",
    "virtual",
    "function",
    "forget",
    "add",
    "virtual",
    "order",
    "function",
    "overridable",
    "need",
    "add",
    "virtual",
    "keyword",
    "store",
    "function",
    "overridable",
    "however",
    "save",
    "compile",
    "still",
    "issue",
    "overriding",
    "function",
    "missing",
    "override",
    "specifier",
    "need",
    "add",
    "override",
    "restore",
    "function",
    "save",
    "everything",
    "compiles",
    "correctly",
    "let",
    "go",
    "ahead",
    "deploy",
    "let",
    "delete",
    "old",
    "contracts",
    "javascript",
    "vm",
    "right",
    "account",
    "great",
    "going",
    "choose",
    "extra",
    "store",
    "reg",
    "let",
    "go",
    "ahead",
    "deploy",
    "extra",
    "storage",
    "contract",
    "right",
    "retrieve",
    "get",
    "zero",
    "previously",
    "store",
    "function",
    "would",
    "store",
    "exact",
    "number",
    "however",
    "store",
    "five",
    "store",
    "five",
    "plus",
    "five",
    "10",
    "stored",
    "let",
    "go",
    "ahead",
    "call",
    "store",
    "looks",
    "like",
    "one",
    "hit",
    "retrieved",
    "indeed",
    "see",
    "10",
    "inheritance",
    "override",
    "functions",
    "section",
    "learned",
    "ton",
    "incredibly",
    "powerful",
    "solidity",
    "multiple",
    "files",
    "let",
    "quick",
    "overview",
    "learned",
    "learned",
    "actually",
    "deploy",
    "contracts",
    "contracts",
    "using",
    "new",
    "keyword",
    "learned",
    "actually",
    "import",
    "contracts",
    "contracts",
    "code",
    "using",
    "import",
    "keyword",
    "import",
    "keyword",
    "copying",
    "pasting",
    "file",
    "location",
    "import",
    "line",
    "learned",
    "interact",
    "contracts",
    "long",
    "abi",
    "address",
    "learn",
    "much",
    "abi",
    "learn",
    "later",
    "learned",
    "want",
    "create",
    "child",
    "contract",
    "inherit",
    "functionality",
    "contract",
    "something",
    "called",
    "inheritance",
    "way",
    "inherit",
    "functionality",
    "using",
    "keyword",
    "saying",
    "contract",
    "contract",
    "however",
    "want",
    "change",
    "functionality",
    "parent",
    "contract",
    "override",
    "function",
    "additionally",
    "set",
    "function",
    "want",
    "override",
    "virtual",
    "store",
    "function",
    "whatever",
    "want",
    "end",
    "lesson",
    "give",
    "huge",
    "round",
    "applause",
    "pat",
    "back",
    "making",
    "far",
    "finishing",
    "section",
    "getting",
    "advanced",
    "facility",
    "quickly",
    "sure",
    "celebrate",
    "little",
    "wins",
    "getting",
    "ice",
    "cream",
    "maybe",
    "going",
    "walk",
    "tweeting",
    "posting",
    "reddit",
    "congratulations",
    "completed",
    "section",
    "right",
    "everybody",
    "welcome",
    "back",
    "headed",
    "lesson",
    "four",
    "remix",
    "funmi",
    "course",
    "code",
    "found",
    "github",
    "repository",
    "associated",
    "course",
    "going",
    "working",
    "two",
    "contracts",
    "one",
    "fundament",
    "outsole",
    "one",
    "price",
    "converted",
    "outsole",
    "funmi",
    "dot",
    "sol",
    "going",
    "contract",
    "allows",
    "people",
    "actually",
    "fund",
    "collective",
    "good",
    "people",
    "send",
    "aetherium",
    "send",
    "aetherium",
    "polygon",
    "avalanche",
    "phantom",
    "whatever",
    "blockchain",
    "native",
    "token",
    "contract",
    "owner",
    "contract",
    "withdraw",
    "funds",
    "whatever",
    "want",
    "deploying",
    "test",
    "net",
    "see",
    "list",
    "functions",
    "contract",
    "two",
    "red",
    "buttons",
    "used",
    "notate",
    "payable",
    "functions",
    "fund",
    "fund",
    "function",
    "withdrawal",
    "function",
    "withdraw",
    "allows",
    "users",
    "withdraw",
    "funding",
    "fund",
    "allows",
    "users",
    "send",
    "money",
    "contract",
    "send",
    "value",
    "along",
    "transaction",
    "call",
    "fund",
    "function",
    "actually",
    "fund",
    "contract",
    "certain",
    "amount",
    "eath",
    "way",
    "pasting",
    "value",
    "way",
    "value",
    "section",
    "hitting",
    "fund",
    "sent",
    "money",
    "deployed",
    "contract",
    "see",
    "list",
    "funders",
    "mapping",
    "addresses",
    "much",
    "actually",
    "sent",
    "contract",
    "withdraw",
    "funds",
    "contract",
    "special",
    "exception",
    "person",
    "deployed",
    "contract",
    "actually",
    "withdraw",
    "funds",
    "back",
    "funds",
    "withdrawn",
    "amount",
    "funds",
    "reset",
    "back",
    "zero",
    "excited",
    "well",
    "finished",
    "section",
    "completed",
    "basics",
    "solidity",
    "ready",
    "start",
    "making",
    "even",
    "powerful",
    "smart",
    "contracts",
    "using",
    "channeling",
    "price",
    "feeds",
    "actually",
    "set",
    "value",
    "much",
    "people",
    "able",
    "fund",
    "usd",
    "opposed",
    "terms",
    "ether",
    "gon",
    "na",
    "go",
    "lot",
    "advanced",
    "sections",
    "let",
    "know",
    "parts",
    "might",
    "little",
    "bit",
    "harder",
    "digest",
    "spend",
    "entire",
    "time",
    "trying",
    "figure",
    "exactly",
    "going",
    "sure",
    "use",
    "github",
    "repo",
    "advantage",
    "discussions",
    "tab",
    "stay",
    "connected",
    "people",
    "taking",
    "lesson",
    "alright",
    "let",
    "jump",
    "point",
    "remix",
    "couple",
    "contracts",
    "simple",
    "storage",
    "storage",
    "factory",
    "extra",
    "storage",
    "maybe",
    "refreshed",
    "remix",
    "gone",
    "away",
    "case",
    "make",
    "sure",
    "tabs",
    "open",
    "going",
    "create",
    "new",
    "contract",
    "called",
    "funding",
    "let",
    "go",
    "ahead",
    "start",
    "creating",
    "funding",
    "contract",
    "want",
    "able",
    "get",
    "funds",
    "users",
    "withdraw",
    "funds",
    "set",
    "minimum",
    "funding",
    "value",
    "usd",
    "going",
    "get",
    "contract",
    "first",
    "let",
    "set",
    "spdx",
    "license",
    "tend",
    "fire",
    "mit",
    "pragma",
    "solidity",
    "caret",
    "zero",
    "point",
    "contract",
    "bunbee",
    "awesome",
    "compile",
    "see",
    "things",
    "look",
    "good",
    "great",
    "let",
    "keep",
    "going",
    "actually",
    "embark",
    "creating",
    "functions",
    "let",
    "add",
    "different",
    "functions",
    "going",
    "implement",
    "want",
    "function",
    "fund",
    "people",
    "actually",
    "send",
    "money",
    "want",
    "function",
    "withdraw",
    "owner",
    "contract",
    "actually",
    "withdraw",
    "funds",
    "different",
    "funders",
    "actually",
    "give",
    "us",
    "pretty",
    "much",
    "two",
    "main",
    "functions",
    "want",
    "contract",
    "implementing",
    "functions",
    "help",
    "facilitate",
    "two",
    "functions",
    "let",
    "get",
    "started",
    "looking",
    "fund",
    "let",
    "comment",
    "withdrawal",
    "let",
    "start",
    "fun",
    "want",
    "anybody",
    "able",
    "call",
    "fun",
    "function",
    "make",
    "public",
    "mentioned",
    "want",
    "able",
    "set",
    "minimum",
    "font",
    "amount",
    "usd",
    "lot",
    "things",
    "think",
    "first",
    "thing",
    "probably",
    "want",
    "think",
    "send",
    "eath",
    "contract",
    "whenever",
    "create",
    "transaction",
    "evm",
    "blockchains",
    "value",
    "field",
    "set",
    "value",
    "represents",
    "much",
    "aetherium",
    "going",
    "sending",
    "transactions",
    "example",
    "transferred",
    "aetherium",
    "different",
    "accounts",
    "actually",
    "populating",
    "value",
    "parameter",
    "different",
    "amounts",
    "aetherium",
    "fact",
    "every",
    "single",
    "transaction",
    "send",
    "fields",
    "nonce",
    "transaction",
    "count",
    "account",
    "gas",
    "price",
    "gas",
    "limit",
    "seen",
    "ether",
    "scan",
    "aka",
    "address",
    "transaction",
    "sent",
    "value",
    "going",
    "amount",
    "talking",
    "also",
    "data",
    "going",
    "send",
    "make",
    "function",
    "call",
    "deploy",
    "contract",
    "v",
    "r",
    "components",
    "really",
    "going",
    "go",
    "v",
    "r",
    "cryptographic",
    "magic",
    "happening",
    "transaction",
    "signed",
    "know",
    "sending",
    "value",
    "populate",
    "fields",
    "gas",
    "limit",
    "example",
    "populated",
    "data",
    "going",
    "empty",
    "two",
    "going",
    "address",
    "transaction",
    "want",
    "send",
    "function",
    "call",
    "also",
    "still",
    "populate",
    "way",
    "want",
    "send",
    "call",
    "function",
    "send",
    "value",
    "time",
    "remix",
    "little",
    "drop",
    "way",
    "way",
    "feeny",
    "ether",
    "gon",
    "na",
    "ignore",
    "feeny",
    "course",
    "way",
    "great",
    "ether",
    "one",
    "ether",
    "worth",
    "much",
    "way",
    "much",
    "way",
    "first",
    "thing",
    "need",
    "order",
    "make",
    "function",
    "payable",
    "aetherium",
    "native",
    "blockchain",
    "currency",
    "need",
    "mark",
    "function",
    "payable",
    "payable",
    "keyword",
    "makes",
    "font",
    "function",
    "red",
    "opposed",
    "normal",
    "orange",
    "like",
    "wallet",
    "hold",
    "funds",
    "contract",
    "addresses",
    "hold",
    "funds",
    "well",
    "since",
    "every",
    "time",
    "deploy",
    "contract",
    "get",
    "contract",
    "address",
    "nearly",
    "exact",
    "wallet",
    "address",
    "wallets",
    "contracts",
    "hold",
    "native",
    "blockchain",
    "token",
    "like",
    "aetherium",
    "see",
    "deploy",
    "later",
    "lesson",
    "actually",
    "gain",
    "balance",
    "aetherium",
    "payable",
    "access",
    "value",
    "attribute",
    "using",
    "one",
    "global",
    "keywords",
    "solidity",
    "message",
    "dot",
    "value",
    "get",
    "much",
    "value",
    "somebody",
    "sending",
    "use",
    "message",
    "dot",
    "value",
    "function",
    "let",
    "say",
    "want",
    "set",
    "message",
    "add",
    "value",
    "certain",
    "value",
    "aetherium",
    "let",
    "say",
    "wanted",
    "let",
    "say",
    "wanted",
    "people",
    "send",
    "least",
    "one",
    "whole",
    "ether",
    "transactions",
    "put",
    "another",
    "way",
    "sent",
    "aetherium",
    "would",
    "need",
    "send",
    "least",
    "one",
    "aetherium",
    "would",
    "implement",
    "well",
    "could",
    "something",
    "called",
    "require",
    "would",
    "say",
    "want",
    "require",
    "message",
    "dot",
    "value",
    "greater",
    "one",
    "e",
    "couple",
    "things",
    "unpack",
    "one",
    "e",
    "18",
    "equal",
    "one",
    "times",
    "10",
    "raised",
    "18th",
    "also",
    "equal",
    "112345",
    "value",
    "way",
    "one",
    "aetherium",
    "much",
    "way",
    "one",
    "eath",
    "wanted",
    "message",
    "dot",
    "value",
    "least",
    "one",
    "eath",
    "one",
    "polygon",
    "whatever",
    "ranch",
    "etc",
    "would",
    "set",
    "like",
    "require",
    "message",
    "value",
    "greater",
    "one",
    "require",
    "keyword",
    "checker",
    "says",
    "hey",
    "message",
    "dot",
    "value",
    "greater",
    "one",
    "going",
    "revert",
    "going",
    "called",
    "revert",
    "error",
    "message",
    "say",
    "send",
    "enough",
    "gon",
    "na",
    "try",
    "deploying",
    "javascript",
    "vm",
    "deploy",
    "funmi",
    "hit",
    "deploy",
    "look",
    "funmi",
    "see",
    "fun",
    "button",
    "red",
    "call",
    "funmi",
    "right",
    "look",
    "console",
    "see",
    "actually",
    "get",
    "error",
    "call",
    "get",
    "error",
    "get",
    "error",
    "know",
    "air",
    "going",
    "send",
    "enough",
    "need",
    "need",
    "send",
    "least",
    "one",
    "ether",
    "fun",
    "transaction",
    "order",
    "require",
    "statement",
    "fulfilled",
    "back",
    "value",
    "section",
    "change",
    "value",
    "one",
    "gon",
    "na",
    "one",
    "ether",
    "much",
    "way",
    "much",
    "way",
    "hit",
    "fund",
    "oh",
    "actually",
    "needs",
    "greater",
    "one",
    "let",
    "send",
    "example",
    "scroll",
    "hit",
    "fund",
    "see",
    "actually",
    "passes",
    "require",
    "statement",
    "says",
    "first",
    "section",
    "false",
    "go",
    "ahead",
    "revert",
    "error",
    "reverting",
    "revert",
    "little",
    "bit",
    "confusing",
    "would",
    "let",
    "section",
    "hold",
    "back",
    "little",
    "bit",
    "confusing",
    "revert",
    "undos",
    "actions",
    "happened",
    "send",
    "remaining",
    "gas",
    "back",
    "actually",
    "look",
    "like",
    "well",
    "let",
    "say",
    "example",
    "un",
    "public",
    "number",
    "fund",
    "function",
    "said",
    "number",
    "equals",
    "five",
    "go",
    "ahead",
    "deploy",
    "let",
    "delete",
    "old",
    "contract",
    "deployed",
    "new",
    "contract",
    "number",
    "right",
    "zero",
    "call",
    "fund",
    "function",
    "number",
    "gets",
    "set",
    "five",
    "however",
    "call",
    "fund",
    "require",
    "met",
    "transaction",
    "would",
    "revert",
    "undue",
    "setting",
    "number",
    "five",
    "let",
    "go",
    "ahead",
    "look",
    "logs",
    "keep",
    "value",
    "zero",
    "fun",
    "function",
    "reverts",
    "call",
    "fund",
    "see",
    "transaction",
    "failed",
    "require",
    "end",
    "reverting",
    "number",
    "still",
    "zero",
    "question",
    "becomes",
    "actually",
    "spend",
    "gas",
    "yes",
    "spent",
    "gas",
    "change",
    "number",
    "five",
    "remaining",
    "gas",
    "would",
    "get",
    "returned",
    "require",
    "example",
    "ton",
    "computation",
    "computation",
    "would",
    "need",
    "send",
    "ton",
    "gas",
    "fun",
    "function",
    "extra",
    "gas",
    "send",
    "require",
    "gets",
    "returned",
    "original",
    "user",
    "gets",
    "reverted",
    "right",
    "reverts",
    "little",
    "bit",
    "confusing",
    "worry",
    "much",
    "go",
    "future",
    "modules",
    "need",
    "know",
    "right",
    "require",
    "statement",
    "first",
    "section",
    "met",
    "transaction",
    "canceled",
    "prior",
    "work",
    "undone",
    "send",
    "error",
    "message",
    "cool",
    "let",
    "delete",
    "number",
    "delete",
    "global",
    "scope",
    "actually",
    "another",
    "way",
    "reverts",
    "go",
    "later",
    "contract",
    "done",
    "far",
    "great",
    "however",
    "checking",
    "message",
    "dot",
    "value",
    "terms",
    "aetherium",
    "looking",
    "one",
    "whole",
    "aetherium",
    "instead",
    "50",
    "want",
    "check",
    "message",
    "add",
    "value",
    "greater",
    "number",
    "like",
    "50",
    "let",
    "go",
    "ahead",
    "first",
    "set",
    "minimum",
    "usd",
    "value",
    "want",
    "people",
    "send",
    "along",
    "fund",
    "function",
    "top",
    "contract",
    "say",
    "went",
    "56",
    "public",
    "minimum",
    "usd",
    "equals",
    "place",
    "check",
    "minimum",
    "usd",
    "going",
    "update",
    "minimum",
    "usd",
    "make",
    "gas",
    "efficient",
    "little",
    "bit",
    "set",
    "minimum",
    "usd",
    "want",
    "able",
    "require",
    "message",
    "value",
    "greater",
    "let",
    "say",
    "greater",
    "equal",
    "minimum",
    "usd",
    "minimum",
    "usd",
    "terms",
    "usd",
    "value",
    "terms",
    "aetherium",
    "convert",
    "aetherium",
    "usd",
    "oracle",
    "chainlink",
    "going",
    "come",
    "play",
    "usd",
    "value",
    "aetherium",
    "something",
    "assigned",
    "outside",
    "blockchain",
    "aetherium",
    "layer",
    "one",
    "currency",
    "native",
    "smart",
    "contract",
    "platform",
    "currency",
    "order",
    "get",
    "value",
    "outside",
    "blockchain",
    "use",
    "decentralized",
    "oracle",
    "network",
    "get",
    "price",
    "one",
    "ether",
    "terms",
    "usd",
    "continue",
    "let",
    "learn",
    "little",
    "bit",
    "architecture",
    "decentralized",
    "oracle",
    "networks",
    "different",
    "solutions",
    "create",
    "funmi",
    "contract",
    "advanced",
    "way",
    "possible",
    "talked",
    "blockchains",
    "deterministic",
    "systems",
    "means",
    "ca",
    "actually",
    "interact",
    "real",
    "world",
    "data",
    "events",
    "know",
    "value",
    "aetherium",
    "know",
    "random",
    "numbers",
    "know",
    "sunny",
    "outside",
    "know",
    "temperature",
    "know",
    "president",
    "know",
    "information",
    "blockchains",
    "also",
    "ca",
    "external",
    "computation",
    "maybe",
    "amazing",
    "artificial",
    "intelligence",
    "model",
    "want",
    "integrate",
    "smart",
    "contract",
    "smart",
    "contracts",
    "ca",
    "anything",
    "mentioned",
    "blockchains",
    "deterministic",
    "design",
    "nodes",
    "reach",
    "consensus",
    "start",
    "adding",
    "variable",
    "data",
    "random",
    "data",
    "values",
    "returned",
    "api",
    "call",
    "different",
    "nodes",
    "could",
    "get",
    "different",
    "results",
    "would",
    "never",
    "able",
    "reach",
    "consensus",
    "known",
    "smart",
    "contract",
    "connectivity",
    "problem",
    "oracle",
    "problem",
    "bad",
    "news",
    "want",
    "smart",
    "contracts",
    "able",
    "replace",
    "traditional",
    "agreements",
    "traditional",
    "agreements",
    "need",
    "data",
    "need",
    "interact",
    "real",
    "world",
    "chainlink",
    "blockchain",
    "oracle",
    "come",
    "place",
    "blockchain",
    "oracle",
    "going",
    "device",
    "interacts",
    "often",
    "world",
    "provide",
    "external",
    "data",
    "computation",
    "smart",
    "contracts",
    "however",
    "whole",
    "story",
    "even",
    "use",
    "centralized",
    "oracle",
    "reintroducing",
    "point",
    "failure",
    "done",
    "work",
    "make",
    "logic",
    "layer",
    "decentralized",
    "get",
    "data",
    "centralized",
    "node",
    "centralized",
    "api",
    "decide",
    "want",
    "make",
    "api",
    "call",
    "reintroducing",
    "trust",
    "assumptions",
    "worked",
    "hard",
    "get",
    "rid",
    "essentially",
    "ruining",
    "entire",
    "purpose",
    "building",
    "smart",
    "contract",
    "want",
    "get",
    "data",
    "external",
    "computation",
    "centralized",
    "nodes",
    "bad",
    "news",
    "chain",
    "link",
    "solution",
    "chain",
    "link",
    "decentralized",
    "oracle",
    "network",
    "bringing",
    "data",
    "external",
    "computation",
    "smart",
    "contracts",
    "mentioned",
    "gives",
    "rise",
    "hybrid",
    "smart",
    "contracts",
    "combined",
    "chain",
    "chain",
    "make",
    "incredibly",
    "feature",
    "rich",
    "powerful",
    "applications",
    "chain",
    "link",
    "modular",
    "decentralized",
    "oracle",
    "network",
    "customized",
    "deliver",
    "data",
    "external",
    "computation",
    "like",
    "example",
    "lot",
    "people",
    "say",
    "oh",
    "make",
    "https",
    "call",
    "api",
    "good",
    "go",
    "blockchain",
    "nodes",
    "ca",
    "make",
    "https",
    "calls",
    "would",
    "able",
    "reach",
    "consensus",
    "called",
    "node",
    "different",
    "times",
    "something",
    "else",
    "consensus",
    "would",
    "broken",
    "instead",
    "need",
    "decentralized",
    "network",
    "chain",
    "link",
    "oracle",
    "transaction",
    "network",
    "nodes",
    "work",
    "turn",
    "data",
    "smart",
    "contracts",
    "us",
    "chainlink",
    "networks",
    "completely",
    "customized",
    "bring",
    "data",
    "external",
    "computation",
    "want",
    "however",
    "customization",
    "little",
    "bit",
    "extra",
    "work",
    "ton",
    "chainlink",
    "features",
    "come",
    "box",
    "completely",
    "decentralized",
    "ready",
    "plug",
    "play",
    "smart",
    "contract",
    "applications",
    "features",
    "first",
    "one",
    "going",
    "channeling",
    "data",
    "feeds",
    "one",
    "actually",
    "going",
    "using",
    "application",
    "channeling",
    "data",
    "feeds",
    "currently",
    "time",
    "recording",
    "powering",
    "50",
    "billion",
    "defy",
    "world",
    "way",
    "work",
    "network",
    "chain",
    "link",
    "nodes",
    "gets",
    "data",
    "different",
    "exchanges",
    "data",
    "providers",
    "brings",
    "data",
    "network",
    "decentralized",
    "chain",
    "like",
    "notes",
    "chain",
    "link",
    "nodes",
    "use",
    "median",
    "figure",
    "actual",
    "price",
    "asset",
    "deliver",
    "single",
    "transaction",
    "called",
    "reference",
    "contract",
    "price",
    "feed",
    "contract",
    "data",
    "contract",
    "chain",
    "smart",
    "contracts",
    "use",
    "smart",
    "contracts",
    "use",
    "pricing",
    "information",
    "power",
    "defy",
    "application",
    "see",
    "example",
    "see",
    "example",
    "data",
    "dot",
    "chain",
    "dot",
    "link",
    "change",
    "networks",
    "change",
    "price",
    "feeds",
    "change",
    "whole",
    "bunch",
    "different",
    "information",
    "see",
    "popular",
    "price",
    "feeds",
    "let",
    "look",
    "eath",
    "usd",
    "example",
    "eath",
    "usd",
    "see",
    "whole",
    "network",
    "independent",
    "chain",
    "link",
    "node",
    "operators",
    "getting",
    "different",
    "answers",
    "price",
    "eth",
    "usd",
    "getting",
    "aggregated",
    "network",
    "delivered",
    "chain",
    "see",
    "often",
    "updated",
    "ones",
    "updated",
    "deviation",
    "threshold",
    "hour",
    "heartbeat",
    "whichever",
    "one",
    "hits",
    "first",
    "see",
    "last",
    "update",
    "see",
    "number",
    "oracle",
    "responses",
    "etc",
    "see",
    "contract",
    "address",
    "directly",
    "chain",
    "even",
    "look",
    "contract",
    "ether",
    "scan",
    "see",
    "history",
    "see",
    "responses",
    "different",
    "oracle",
    "bottom",
    "see",
    "different",
    "users",
    "sponsors",
    "keeping",
    "network",
    "similar",
    "transaction",
    "gas",
    "whenever",
    "node",
    "operator",
    "delivers",
    "data",
    "smart",
    "contract",
    "chain",
    "link",
    "node",
    "operators",
    "paid",
    "little",
    "bit",
    "oracle",
    "gas",
    "chain",
    "link",
    "token",
    "right",
    "users",
    "protocol",
    "sponsoring",
    "keeping",
    "feeds",
    "paying",
    "oracle",
    "gas",
    "associated",
    "delivering",
    "data",
    "chain",
    "illustration",
    "current",
    "model",
    "data",
    "feeds",
    "look",
    "like",
    "network",
    "chain",
    "link",
    "nodes",
    "reaches",
    "gets",
    "information",
    "asset",
    "signs",
    "data",
    "private",
    "key",
    "single",
    "transaction",
    "one",
    "node",
    "deliver",
    "data",
    "different",
    "signatures",
    "reference",
    "contract",
    "node",
    "deliver",
    "data",
    "another",
    "node",
    "send",
    "instead",
    "reputation",
    "incredibly",
    "important",
    "chain",
    "link",
    "node",
    "operator",
    "miss",
    "data",
    "updates",
    "forget",
    "send",
    "transactions",
    "probably",
    "quickly",
    "kicked",
    "networks",
    "chance",
    "making",
    "money",
    "future",
    "data",
    "feeds",
    "used",
    "largest",
    "protocols",
    "space",
    "synthetics",
    "sushi",
    "swap",
    "compound",
    "avi",
    "several",
    "billion",
    "dollars",
    "take",
    "look",
    "example",
    "doc",
    "dot",
    "chain",
    "dot",
    "link",
    "work",
    "evm",
    "contracts",
    "going",
    "hit",
    "evm",
    "chains",
    "scroll",
    "data",
    "feeds",
    "scroll",
    "solidity",
    "section",
    "see",
    "example",
    "entire",
    "contract",
    "uses",
    "reads",
    "one",
    "trending",
    "price",
    "feeds",
    "even",
    "open",
    "remix",
    "work",
    "remix",
    "looks",
    "like",
    "example",
    "reading",
    "price",
    "feed",
    "covid",
    "reason",
    "actually",
    "going",
    "use",
    "test",
    "net",
    "see",
    "work",
    "set",
    "chain",
    "link",
    "nodes",
    "monitoring",
    "test",
    "network",
    "show",
    "exactly",
    "works",
    "get",
    "deeper",
    "course",
    "show",
    "actually",
    "run",
    "tests",
    "work",
    "chain",
    "link",
    "nodes",
    "without",
    "actually",
    "test",
    "net",
    "make",
    "development",
    "much",
    "faster",
    "highly",
    "recommend",
    "walking",
    "section",
    "along",
    "see",
    "firsthand",
    "actually",
    "works",
    "let",
    "go",
    "ahead",
    "faucets",
    "dot",
    "chain",
    "dot",
    "link",
    "slash",
    "covid",
    "going",
    "switch",
    "covid",
    "network",
    "going",
    "get",
    "covid",
    "eath",
    "remember",
    "look",
    "network",
    "flag",
    "use",
    "whatever",
    "network",
    "documentation",
    "get",
    "covid",
    "going",
    "come",
    "faucet",
    "going",
    "turn",
    "test",
    "link",
    "stay",
    "eath",
    "robot",
    "send",
    "request",
    "covid",
    "aetherium",
    "reached",
    "wallet",
    "go",
    "ahead",
    "close",
    "take",
    "look",
    "wallet",
    "see",
    "indeed",
    "eath",
    "kelvin",
    "let",
    "go",
    "back",
    "remix",
    "compile",
    "contract",
    "go",
    "deploy",
    "injected",
    "web",
    "three",
    "reason",
    "going",
    "use",
    "injected",
    "web",
    "three",
    "instead",
    "javascript",
    "vm",
    "network",
    "chain",
    "link",
    "nodes",
    "watching",
    "little",
    "fake",
    "javascript",
    "vm",
    "network",
    "chain",
    "link",
    "nodes",
    "watching",
    "test",
    "net",
    "scroll",
    "switch",
    "contract",
    "price",
    "consumer",
    "v",
    "three",
    "hit",
    "deploy",
    "mass",
    "pop",
    "brief",
    "delay",
    "see",
    "price",
    "feed",
    "consumer",
    "hit",
    "get",
    "latest",
    "price",
    "shows",
    "us",
    "latest",
    "price",
    "aetherium",
    "terms",
    "usd",
    "may",
    "wondering",
    "number",
    "looks",
    "weird",
    "seems",
    "like",
    "really",
    "large",
    "number",
    "price",
    "aetherium",
    "terms",
    "usd",
    "decimals",
    "actually",
    "work",
    "well",
    "solidity",
    "get",
    "little",
    "bit",
    "decimals",
    "flag",
    "associated",
    "price",
    "feed",
    "address",
    "tells",
    "us",
    "many",
    "decimals",
    "include",
    "price",
    "also",
    "documentation",
    "however",
    "know",
    "one",
    "eight",
    "decimals",
    "saying",
    "value",
    "aetherium",
    "right",
    "may",
    "course",
    "different",
    "go",
    "ahead",
    "try",
    "number",
    "things",
    "happened",
    "contract",
    "explain",
    "funmi",
    "example",
    "want",
    "take",
    "look",
    "see",
    "figure",
    "going",
    "recommend",
    "price",
    "feeds",
    "one",
    "powerful",
    "box",
    "decentralized",
    "features",
    "use",
    "smart",
    "contract",
    "level",
    "especially",
    "decentralized",
    "finance",
    "looking",
    "different",
    "addresses",
    "different",
    "price",
    "feeds",
    "check",
    "contract",
    "addresses",
    "section",
    "documentation",
    "choose",
    "network",
    "want",
    "scroll",
    "look",
    "different",
    "addresses",
    "different",
    "price",
    "feeds",
    "example",
    "address",
    "give",
    "price",
    "one",
    "inch",
    "token",
    "terms",
    "aetherium",
    "address",
    "give",
    "price",
    "apple",
    "stock",
    "terms",
    "usd",
    "forth",
    "next",
    "decentralized",
    "application",
    "right",
    "box",
    "going",
    "channeling",
    "vrf",
    "channeling",
    "verifiable",
    "random",
    "dysfunction",
    "lottery",
    "example",
    "little",
    "bit",
    "later",
    "talk",
    "randomness",
    "manipulated",
    "blockchain",
    "blockchains",
    "deterministic",
    "systems",
    "definition",
    "means",
    "ca",
    "randomness",
    "determine",
    "random",
    "number",
    "really",
    "random",
    "anymore",
    "need",
    "wait",
    "get",
    "provably",
    "random",
    "number",
    "looking",
    "outside",
    "blockchain",
    "oracle",
    "perfectly",
    "positioned",
    "exactly",
    "chainlink",
    "verifiable",
    "randomness",
    "function",
    "way",
    "get",
    "provably",
    "random",
    "number",
    "smart",
    "contract",
    "guarantee",
    "fairness",
    "guarantee",
    "randomness",
    "applications",
    "many",
    "protocols",
    "like",
    "pool",
    "together",
    "x",
    "infinity",
    "ether",
    "cards",
    "avocado",
    "cheese",
    "use",
    "channeling",
    "vrf",
    "lotteries",
    "randomizing",
    "nf",
    "gaming",
    "going",
    "example",
    "channeling",
    "vrf",
    "later",
    "section",
    "get",
    "lottery",
    "section",
    "want",
    "see",
    "play",
    "randomness",
    "right",
    "recommend",
    "go",
    "doc",
    "chain",
    "link",
    "evm",
    "chains",
    "scroll",
    "get",
    "random",
    "number",
    "teach",
    "get",
    "provably",
    "random",
    "number",
    "applications",
    "next",
    "decentralized",
    "box",
    "feature",
    "chain",
    "link",
    "chain",
    "like",
    "keepers",
    "decentralized",
    "event",
    "driven",
    "execution",
    "seen",
    "order",
    "kick",
    "type",
    "transaction",
    "somebody",
    "needs",
    "spend",
    "gas",
    "somebody",
    "needs",
    "sit",
    "hit",
    "go",
    "button",
    "hit",
    "transact",
    "button",
    "hit",
    "sun",
    "obviously",
    "centralized",
    "vector",
    "decentralized",
    "application",
    "needs",
    "run",
    "specific",
    "times",
    "specific",
    "events",
    "triggered",
    "channeling",
    "keepers",
    "solution",
    "channeling",
    "keepers",
    "chain",
    "link",
    "nodes",
    "listen",
    "registration",
    "contract",
    "different",
    "events",
    "specify",
    "fire",
    "maybe",
    "say",
    "every",
    "10",
    "minutes",
    "want",
    "something",
    "week",
    "something",
    "price",
    "acid",
    "hits",
    "number",
    "maybe",
    "liquidity",
    "pool",
    "certain",
    "level",
    "whatever",
    "event",
    "want",
    "code",
    "absolutely",
    "chain",
    "link",
    "nodes",
    "constantly",
    "listen",
    "triggers",
    "happen",
    "check",
    "different",
    "contracts",
    "triggers",
    "trigger",
    "returns",
    "true",
    "chain",
    "link",
    "nodes",
    "perform",
    "whatever",
    "action",
    "tell",
    "chain",
    "link",
    "nodes",
    "also",
    "going",
    "go",
    "chain",
    "link",
    "keepers",
    "examples",
    "right",
    "going",
    "get",
    "later",
    "module",
    "however",
    "want",
    "try",
    "go",
    "doc",
    "touching",
    "link",
    "slash",
    "aetherium",
    "going",
    "go",
    "making",
    "compatible",
    "contracts",
    "feel",
    "free",
    "read",
    "documentation",
    "try",
    "last",
    "box",
    "feature",
    "chain",
    "link",
    "customizable",
    "also",
    "hardest",
    "get",
    "correct",
    "end",
    "end",
    "reliability",
    "ultimate",
    "promise",
    "smart",
    "contracts",
    "want",
    "need",
    "able",
    "anything",
    "want",
    "able",
    "take",
    "input",
    "get",
    "output",
    "making",
    "http",
    "get",
    "http",
    "post",
    "request",
    "easy",
    "way",
    "customize",
    "chain",
    "link",
    "nodes",
    "able",
    "anything",
    "remember",
    "talked",
    "making",
    "api",
    "calls",
    "blockchain",
    "nodes",
    "well",
    "chain",
    "link",
    "nodes",
    "chain",
    "link",
    "nodes",
    "make",
    "direct",
    "requests",
    "api",
    "specify",
    "order",
    "choose",
    "chain",
    "link",
    "node",
    "url",
    "slash",
    "data",
    "send",
    "request",
    "little",
    "bit",
    "trickier",
    "chain",
    "link",
    "vrf",
    "keepers",
    "price",
    "feeds",
    "responsible",
    "creating",
    "chain",
    "link",
    "network",
    "gets",
    "data",
    "many",
    "different",
    "chain",
    "link",
    "nodes",
    "many",
    "different",
    "data",
    "providers",
    "let",
    "look",
    "example",
    "remix",
    "anyways",
    "section",
    "feel",
    "free",
    "watch",
    "since",
    "working",
    "test",
    "net",
    "test",
    "nets",
    "seen",
    "take",
    "little",
    "bit",
    "time",
    "long",
    "familiar",
    "process",
    "looks",
    "like",
    "good",
    "enough",
    "actually",
    "try",
    "want",
    "open",
    "remix",
    "read",
    "looks",
    "like",
    "example",
    "covid",
    "network",
    "go",
    "ahead",
    "compile",
    "api",
    "consumer",
    "gon",
    "na",
    "go",
    "ahead",
    "deploy",
    "injected",
    "web",
    "three",
    "going",
    "make",
    "sure",
    "back",
    "covid",
    "test",
    "network",
    "going",
    "scroll",
    "going",
    "change",
    "contract",
    "api",
    "consumer",
    "going",
    "go",
    "ahead",
    "hit",
    "deploy",
    "going",
    "deploy",
    "contract",
    "covid",
    "test",
    "net",
    "call",
    "function",
    "called",
    "request",
    "volume",
    "data",
    "actually",
    "make",
    "api",
    "call",
    "like",
    "mentioned",
    "whenever",
    "request",
    "data",
    "chain",
    "link",
    "node",
    "pay",
    "little",
    "bit",
    "oracle",
    "gas",
    "link",
    "token",
    "order",
    "pay",
    "link",
    "token",
    "going",
    "need",
    "link",
    "token",
    "api",
    "consumer",
    "contract",
    "known",
    "basic",
    "request",
    "receive",
    "model",
    "get",
    "link",
    "token",
    "go",
    "back",
    "faucet",
    "time",
    "select",
    "10",
    "test",
    "link",
    "contract",
    "let",
    "go",
    "ahead",
    "verify",
    "human",
    "hit",
    "send",
    "request",
    "time",
    "instead",
    "sending",
    "us",
    "aetherium",
    "sending",
    "us",
    "10",
    "test",
    "link",
    "known",
    "erc",
    "20",
    "token",
    "accurately",
    "erc",
    "677",
    "get",
    "understanding",
    "little",
    "bit",
    "later",
    "see",
    "asset",
    "metamask",
    "importing",
    "token",
    "order",
    "get",
    "token",
    "going",
    "come",
    "back",
    "documentation",
    "going",
    "look",
    "link",
    "token",
    "contracts",
    "like",
    "going",
    "go",
    "network",
    "got",
    "tokens",
    "us",
    "covid",
    "going",
    "copy",
    "address",
    "gon",
    "na",
    "go",
    "metamask",
    "hit",
    "import",
    "tokens",
    "paste",
    "address",
    "hit",
    "add",
    "custom",
    "token",
    "import",
    "tokens",
    "see",
    "account",
    "one",
    "aetherium",
    "link",
    "link",
    "oracle",
    "gas",
    "going",
    "send",
    "api",
    "consumer",
    "going",
    "copy",
    "address",
    "api",
    "consumer",
    "open",
    "meta",
    "mask",
    "gon",
    "na",
    "hit",
    "send",
    "paste",
    "address",
    "contract",
    "switch",
    "asset",
    "link",
    "send",
    "link",
    "hit",
    "next",
    "next",
    "hit",
    "confirm",
    "wait",
    "transaction",
    "go",
    "chose",
    "link",
    "contract",
    "fee",
    "character",
    "tells",
    "us",
    "much",
    "making",
    "api",
    "call",
    "going",
    "cost",
    "one",
    "actually",
    "link",
    "send",
    "case",
    "want",
    "make",
    "api",
    "call",
    "twice",
    "everything",
    "going",
    "function",
    "explain",
    "little",
    "bit",
    "later",
    "section",
    "want",
    "show",
    "looks",
    "like",
    "send",
    "link",
    "contract",
    "first",
    "check",
    "see",
    "volume",
    "volume",
    "zero",
    "want",
    "get",
    "volume",
    "last",
    "24",
    "hours",
    "aetherium",
    "asset",
    "going",
    "calling",
    "api",
    "ton",
    "raw",
    "data",
    "including",
    "one",
    "specific",
    "called",
    "volume",
    "last",
    "24",
    "hours",
    "number",
    "right",
    "say",
    "wanted",
    "get",
    "contract",
    "api",
    "going",
    "make",
    "http",
    "get",
    "call",
    "api",
    "going",
    "happen",
    "going",
    "make",
    "request",
    "one",
    "transaction",
    "second",
    "transaction",
    "chain",
    "link",
    "node",
    "gon",
    "na",
    "return",
    "value",
    "store",
    "volume",
    "variable",
    "global",
    "scope",
    "let",
    "go",
    "ahead",
    "hit",
    "request",
    "volume",
    "data",
    "metamask",
    "gon",
    "na",
    "pop",
    "going",
    "go",
    "ahead",
    "hit",
    "confirm",
    "notice",
    "right",
    "away",
    "volume",
    "update",
    "actually",
    "need",
    "wait",
    "two",
    "transactions",
    "sending",
    "transaction",
    "request",
    "second",
    "transaction",
    "chain",
    "link",
    "node",
    "actually",
    "going",
    "respond",
    "slight",
    "delay",
    "chain",
    "link",
    "node",
    "indeed",
    "responded",
    "result",
    "making",
    "api",
    "call",
    "back",
    "contract",
    "go",
    "process",
    "little",
    "bit",
    "depth",
    "later",
    "sections",
    "reason",
    "wanted",
    "show",
    "specifically",
    "api",
    "calls",
    "going",
    "show",
    "real",
    "life",
    "example",
    "use",
    "chain",
    "link",
    "vrf",
    "chain",
    "keepers",
    "later",
    "lesson",
    "know",
    "already",
    "gone",
    "ton",
    "let",
    "quick",
    "review",
    "order",
    "send",
    "aetherium",
    "whatever",
    "native",
    "blockchain",
    "token",
    "function",
    "need",
    "mark",
    "payable",
    "need",
    "something",
    "contract",
    "happen",
    "want",
    "whole",
    "transaction",
    "fail",
    "happen",
    "use",
    "require",
    "statement",
    "get",
    "aetherium",
    "native",
    "blockchain",
    "token",
    "value",
    "transaction",
    "use",
    "global",
    "keyword",
    "message",
    "dot",
    "value",
    "chain",
    "link",
    "technology",
    "getting",
    "external",
    "data",
    "external",
    "computation",
    "decentralized",
    "context",
    "smart",
    "contracts",
    "channeling",
    "data",
    "feeds",
    "price",
    "feeds",
    "ways",
    "read",
    "pricing",
    "information",
    "pieces",
    "data",
    "real",
    "world",
    "already",
    "aggregated",
    "decentralized",
    "us",
    "channeling",
    "vrf",
    "way",
    "get",
    "provably",
    "random",
    "numbers",
    "real",
    "world",
    "smart",
    "contracts",
    "channeling",
    "keepers",
    "way",
    "decentralized",
    "event",
    "driven",
    "computation",
    "set",
    "trigger",
    "say",
    "trigger",
    "hits",
    "something",
    "get",
    "define",
    "trigger",
    "something",
    "channeling",
    "api",
    "ultimate",
    "customization",
    "channeling",
    "nodes",
    "allows",
    "us",
    "connect",
    "anything",
    "planet",
    "make",
    "one",
    "production",
    "ready",
    "work",
    "come",
    "already",
    "decentralized",
    "oracle",
    "network",
    "like",
    "chaining",
    "keepers",
    "price",
    "feeds",
    "learn",
    "channeling",
    "services",
    "continue",
    "course",
    "order",
    "us",
    "figure",
    "message",
    "dot",
    "value",
    "actually",
    "greater",
    "minimum",
    "usd",
    "set",
    "actually",
    "convert",
    "message",
    "dot",
    "value",
    "layer",
    "one",
    "slash",
    "aetherium",
    "usd",
    "equivalent",
    "actually",
    "going",
    "well",
    "first",
    "gon",
    "na",
    "need",
    "get",
    "price",
    "aetherium",
    "phantom",
    "avalanche",
    "whatever",
    "layer",
    "one",
    "blockchain",
    "working",
    "let",
    "create",
    "function",
    "get",
    "price",
    "get",
    "conversion",
    "rate",
    "function",
    "get",
    "price",
    "going",
    "function",
    "use",
    "get",
    "price",
    "room",
    "terms",
    "usd",
    "convert",
    "message",
    "dot",
    "value",
    "usd",
    "also",
    "going",
    "function",
    "called",
    "get",
    "conversion",
    "rate",
    "going",
    "public",
    "functions",
    "go",
    "ahead",
    "call",
    "test",
    "whatever",
    "want",
    "order",
    "get",
    "price",
    "going",
    "use",
    "one",
    "chain",
    "link",
    "data",
    "feeds",
    "get",
    "pricing",
    "information",
    "look",
    "right",
    "contract",
    "see",
    "using",
    "one",
    "channeling",
    "price",
    "feeds",
    "looks",
    "like",
    "actually",
    "interacting",
    "channeling",
    "price",
    "feed",
    "actually",
    "reading",
    "one",
    "contracts",
    "contract",
    "called",
    "aggregator",
    "contract",
    "function",
    "called",
    "latest",
    "round",
    "data",
    "returns",
    "whole",
    "bunch",
    "data",
    "namely",
    "int",
    "price",
    "price",
    "interested",
    "let",
    "look",
    "get",
    "price",
    "function",
    "figure",
    "actually",
    "call",
    "since",
    "instance",
    "us",
    "interacting",
    "contract",
    "outside",
    "project",
    "going",
    "need",
    "two",
    "things",
    "two",
    "things",
    "going",
    "need",
    "abi",
    "contract",
    "also",
    "address",
    "contract",
    "address",
    "contract",
    "going",
    "easy",
    "get",
    "address",
    "contract",
    "contract",
    "address",
    "section",
    "chain",
    "link",
    "data",
    "feeds",
    "let",
    "scroll",
    "bank",
    "find",
    "eath",
    "usd",
    "address",
    "rigby",
    "create",
    "contract",
    "works",
    "rinkeby",
    "going",
    "grab",
    "address",
    "going",
    "copy",
    "going",
    "move",
    "back",
    "code",
    "going",
    "paste",
    "address",
    "great",
    "address",
    "address",
    "contract",
    "want",
    "interact",
    "get",
    "abi",
    "well",
    "simple",
    "storage",
    "imported",
    "entire",
    "contract",
    "code",
    "something",
    "could",
    "actually",
    "lot",
    "code",
    "something",
    "could",
    "instead",
    "remember",
    "looking",
    "remix",
    "look",
    "one",
    "contracts",
    "compiled",
    "abi",
    "really",
    "kind",
    "list",
    "different",
    "functions",
    "interactions",
    "contract",
    "abi",
    "actually",
    "need",
    "include",
    "logic",
    "needs",
    "include",
    "hey",
    "different",
    "functions",
    "call",
    "example",
    "contract",
    "call",
    "fund",
    "get",
    "conversion",
    "rate",
    "get",
    "price",
    "implemented",
    "yet",
    "eventually",
    "technically",
    "another",
    "way",
    "interact",
    "contracts",
    "without",
    "api",
    "going",
    "ignore",
    "get",
    "api",
    "concept",
    "solidity",
    "called",
    "interface",
    "let",
    "look",
    "example",
    "interface",
    "go",
    "contract",
    "kits",
    "chainlink",
    "see",
    "number",
    "different",
    "contracts",
    "chainlink",
    "repository",
    "go",
    "contracts",
    "src",
    "v",
    "interfaces",
    "go",
    "aggregator",
    "v3",
    "interface",
    "dot",
    "soul",
    "look",
    "solidity",
    "see",
    "whole",
    "bunch",
    "function",
    "declarations",
    "none",
    "logic",
    "actually",
    "implemented",
    "known",
    "interface",
    "compile",
    "actually",
    "get",
    "abi",
    "contract",
    "defines",
    "different",
    "ways",
    "interact",
    "contract",
    "actually",
    "say",
    "functions",
    "fine",
    "though",
    "need",
    "know",
    "functions",
    "actually",
    "going",
    "stored",
    "contract",
    "grab",
    "interface",
    "code",
    "paste",
    "remix",
    "hold",
    "following",
    "along",
    "copy",
    "paste",
    "going",
    "show",
    "easier",
    "way",
    "second",
    "feel",
    "free",
    "go",
    "ahead",
    "watch",
    "interface",
    "aggregator",
    "v3",
    "interface",
    "use",
    "make",
    "api",
    "calls",
    "could",
    "say",
    "aggregator",
    "v3",
    "interface",
    "address",
    "combination",
    "two",
    "give",
    "us",
    "aggregator",
    "v3",
    "contract",
    "whatever",
    "code",
    "contract",
    "address",
    "aggregator",
    "v3",
    "interfaces",
    "valid",
    "something",
    "like",
    "dot",
    "version",
    "let",
    "look",
    "interface",
    "version",
    "function",
    "sure",
    "means",
    "call",
    "version",
    "function",
    "contract",
    "let",
    "actually",
    "go",
    "ahead",
    "copy",
    "different",
    "section",
    "going",
    "create",
    "new",
    "function",
    "called",
    "get",
    "version",
    "illustrate",
    "going",
    "public",
    "going",
    "view",
    "going",
    "return",
    "un",
    "256",
    "gon",
    "na",
    "split",
    "two",
    "steps",
    "gon",
    "na",
    "say",
    "aggregate",
    "tour",
    "v3",
    "interface",
    "price",
    "feed",
    "creating",
    "variable",
    "type",
    "aggregator",
    "v3",
    "interface",
    "equals",
    "aggregator",
    "v3",
    "interface",
    "address",
    "going",
    "return",
    "price",
    "feed",
    "version",
    "going",
    "go",
    "ahead",
    "deploy",
    "contract",
    "rigby",
    "show",
    "git",
    "version",
    "going",
    "return",
    "follow",
    "along",
    "want",
    "working",
    "test",
    "net",
    "watch",
    "like",
    "section",
    "going",
    "test",
    "little",
    "bit",
    "sparse",
    "since",
    "going",
    "mainly",
    "using",
    "test",
    "net",
    "since",
    "going",
    "working",
    "actual",
    "chain",
    "link",
    "oracle",
    "network",
    "move",
    "hard",
    "hat",
    "javascript",
    "testing",
    "locally",
    "lot",
    "easier",
    "lot",
    "faster",
    "welcome",
    "go",
    "ahead",
    "fiddle",
    "try",
    "test",
    "lot",
    "stuff",
    "go",
    "along",
    "know",
    "might",
    "take",
    "little",
    "bit",
    "longer",
    "testing",
    "test",
    "net",
    "let",
    "delete",
    "last",
    "funding",
    "contract",
    "going",
    "deploy",
    "one",
    "going",
    "scroll",
    "going",
    "switch",
    "injected",
    "web",
    "three",
    "going",
    "switch",
    "covid",
    "rink",
    "reason",
    "want",
    "make",
    "sure",
    "rink",
    "beam",
    "address",
    "specific",
    "rink",
    "b",
    "contract",
    "looking",
    "interact",
    "might",
    "address",
    "every",
    "single",
    "chain",
    "want",
    "make",
    "sure",
    "rink",
    "b",
    "chain",
    "contract",
    "different",
    "chain",
    "version",
    "function",
    "obviously",
    "wo",
    "exist",
    "function",
    "could",
    "error",
    "let",
    "go",
    "ahead",
    "gon",
    "na",
    "find",
    "going",
    "deploy",
    "rink",
    "v",
    "chain",
    "follow",
    "along",
    "watch",
    "contract",
    "deployed",
    "view",
    "function",
    "called",
    "get",
    "version",
    "see",
    "returning",
    "variable",
    "showing",
    "us",
    "fourth",
    "version",
    "price",
    "feed",
    "really",
    "easy",
    "way",
    "us",
    "interact",
    "contracts",
    "exist",
    "outside",
    "project",
    "use",
    "one",
    "interfaces",
    "get",
    "compiled",
    "api",
    "combine",
    "abi",
    "address",
    "call",
    "function",
    "work",
    "interfaces",
    "start",
    "make",
    "sense",
    "little",
    "confusing",
    "right",
    "get",
    "discouraged",
    "work",
    "easier",
    "become",
    "though",
    "know",
    "call",
    "functions",
    "start",
    "working",
    "interface",
    "however",
    "know",
    "whole",
    "bunch",
    "interfaces",
    "gon",
    "na",
    "stick",
    "whole",
    "bunch",
    "interfaces",
    "top",
    "code",
    "looks",
    "pretty",
    "ugly",
    "better",
    "way",
    "us",
    "well",
    "used",
    "import",
    "right",
    "imported",
    "simple",
    "storage",
    "one",
    "could",
    "could",
    "import",
    "array",
    "gay",
    "tore",
    "v3",
    "interface",
    "go",
    "ahead",
    "create",
    "new",
    "contract",
    "aggregator",
    "v3",
    "interface",
    "import",
    "directly",
    "github",
    "go",
    "back",
    "documentation",
    "chainlink",
    "data",
    "feeds",
    "go",
    "using",
    "data",
    "feeds",
    "scroll",
    "see",
    "top",
    "import",
    "statement",
    "import",
    "chain",
    "link",
    "slash",
    "contracts",
    "slash",
    "sfc",
    "visa",
    "right",
    "interfaces",
    "aggregator",
    "v3",
    "interface",
    "import",
    "path",
    "setup",
    "github",
    "repository",
    "chain",
    "link",
    "code",
    "instead",
    "us",
    "directly",
    "adding",
    "code",
    "right",
    "remix",
    "instead",
    "import",
    "directly",
    "github",
    "called",
    "npm",
    "package",
    "remix",
    "smart",
    "enough",
    "know",
    "chain",
    "link",
    "slash",
    "contracts",
    "referring",
    "npm",
    "package",
    "chain",
    "link",
    "slash",
    "contracts",
    "talk",
    "npm",
    "little",
    "bit",
    "future",
    "known",
    "package",
    "manager",
    "keep",
    "versions",
    "different",
    "contracts",
    "us",
    "directly",
    "import",
    "code",
    "bases",
    "chain",
    "link",
    "slash",
    "contracts",
    "created",
    "directly",
    "chainlink",
    "github",
    "repository",
    "remix",
    "downloads",
    "code",
    "npm",
    "created",
    "github",
    "know",
    "import",
    "chain",
    "link",
    "slash",
    "contracts",
    "src",
    "v",
    "interfaces",
    "aggregator",
    "v3",
    "interface",
    "dot",
    "soul",
    "stuck",
    "whole",
    "contract",
    "right",
    "top",
    "funding",
    "contract",
    "makes",
    "code",
    "look",
    "lot",
    "nicer",
    "aggregator",
    "v3",
    "interface",
    "work",
    "okay",
    "great",
    "minimalistic",
    "interface",
    "give",
    "us",
    "api",
    "actually",
    "go",
    "ahead",
    "get",
    "price",
    "well",
    "documentation",
    "good",
    "example",
    "want",
    "play",
    "try",
    "reverse",
    "engineer",
    "well",
    "going",
    "code",
    "going",
    "create",
    "aggregator",
    "v3",
    "interface",
    "object",
    "called",
    "price",
    "feed",
    "aggregator",
    "v3",
    "variable",
    "called",
    "price",
    "feed",
    "going",
    "equal",
    "aggregator",
    "v3",
    "interface",
    "contract",
    "address",
    "address",
    "exactly",
    "assuming",
    "contract",
    "address",
    "going",
    "functionality",
    "aggregator",
    "v3",
    "interface",
    "means",
    "decimals",
    "function",
    "description",
    "function",
    "version",
    "get",
    "round",
    "data",
    "important",
    "one",
    "latest",
    "round",
    "data",
    "latest",
    "price",
    "answer",
    "piece",
    "call",
    "latest",
    "round",
    "data",
    "function",
    "price",
    "feed",
    "say",
    "price",
    "feed",
    "dot",
    "latest",
    "round",
    "data",
    "look",
    "interface",
    "see",
    "latest",
    "round",
    "data",
    "actually",
    "return",
    "one",
    "variable",
    "returns",
    "whole",
    "bunch",
    "different",
    "variables",
    "going",
    "return",
    "contract",
    "going",
    "put",
    "parentheses",
    "going",
    "say",
    "went",
    "round",
    "id",
    "even",
    "look",
    "right",
    "documentation",
    "see",
    "else",
    "returns",
    "int",
    "price",
    "went",
    "went",
    "started",
    "went",
    "timestamp",
    "went",
    "ad",
    "answered",
    "round",
    "lot",
    "code",
    "since",
    "function",
    "returns",
    "many",
    "different",
    "variables",
    "set",
    "something",
    "capture",
    "however",
    "care",
    "price",
    "care",
    "round",
    "id",
    "started",
    "timestamp",
    "answered",
    "round",
    "remove",
    "leave",
    "commas",
    "int",
    "price",
    "equals",
    "price",
    "feed",
    "latest",
    "round",
    "data",
    "reason",
    "price",
    "int",
    "un",
    "256",
    "prices",
    "data",
    "feeds",
    "could",
    "negative",
    "int",
    "stay",
    "flexible",
    "price",
    "going",
    "price",
    "eath",
    "terms",
    "usd",
    "saw",
    "example",
    "around",
    "returned",
    "number",
    "solidity",
    "work",
    "decimals",
    "number",
    "reasons",
    "need",
    "know",
    "eight",
    "decimal",
    "places",
    "associated",
    "price",
    "feed",
    "want",
    "double",
    "check",
    "many",
    "decimals",
    "contract",
    "decimal",
    "function",
    "call",
    "well",
    "tell",
    "exactly",
    "many",
    "decimals",
    "price",
    "feed",
    "know",
    "message",
    "dot",
    "value",
    "going",
    "18",
    "decimal",
    "places",
    "18",
    "decimal",
    "places",
    "well",
    "one",
    "ether",
    "equal",
    "12345678",
    "massive",
    "number",
    "way",
    "18",
    "zeros",
    "equivalent",
    "want",
    "decimal",
    "places",
    "right",
    "right",
    "eight",
    "different",
    "units",
    "right",
    "get",
    "match",
    "need",
    "return",
    "price",
    "times",
    "one",
    "ie",
    "10",
    "one",
    "raised",
    "10th",
    "equal",
    "1123456789",
    "message",
    "dot",
    "value",
    "though",
    "going",
    "unt",
    "right",
    "price",
    "interval",
    "six",
    "convert",
    "value",
    "n",
    "human",
    "56",
    "well",
    "called",
    "typecasting",
    "need",
    "add",
    "wrap",
    "whole",
    "thing",
    "two",
    "parentheses",
    "ca",
    "typecast",
    "anything",
    "values",
    "like",
    "56",
    "56",
    "easily",
    "converted",
    "two",
    "course",
    "since",
    "modifying",
    "state",
    "get",
    "price",
    "function",
    "make",
    "view",
    "say",
    "returns",
    "went",
    "save",
    "compile",
    "go",
    "ahead",
    "get",
    "checkmark",
    "math",
    "little",
    "bit",
    "tricky",
    "first",
    "couple",
    "times",
    "solidity",
    "easier",
    "becomes",
    "future",
    "always",
    "reference",
    "function",
    "like",
    "figure",
    "okay",
    "easiest",
    "way",
    "get",
    "number",
    "awesome",
    "get",
    "price",
    "function",
    "going",
    "return",
    "un",
    "256",
    "going",
    "price",
    "aetherium",
    "terms",
    "usd",
    "need",
    "convert",
    "message",
    "dot",
    "value",
    "aetherium",
    "terms",
    "dollars",
    "let",
    "create",
    "get",
    "conversion",
    "rate",
    "function",
    "one",
    "going",
    "take",
    "input",
    "parameter",
    "un",
    "256",
    "eath",
    "amount",
    "going",
    "public",
    "view",
    "function",
    "going",
    "return",
    "went",
    "56",
    "going",
    "pass",
    "eath",
    "amount",
    "side",
    "going",
    "get",
    "much",
    "eath",
    "worth",
    "terms",
    "usd",
    "going",
    "u",
    "intuity",
    "six",
    "eath",
    "price",
    "equals",
    "get",
    "price",
    "first",
    "going",
    "call",
    "get",
    "price",
    "function",
    "created",
    "get",
    "price",
    "aetherium",
    "going",
    "u",
    "256",
    "eath",
    "amount",
    "usd",
    "equals",
    "eath",
    "price",
    "times",
    "eath",
    "amount",
    "going",
    "divide",
    "multiplication",
    "division",
    "math",
    "solidity",
    "always",
    "want",
    "multiply",
    "add",
    "first",
    "go",
    "ahead",
    "divide",
    "since",
    "eath",
    "price",
    "eath",
    "amount",
    "18",
    "additional",
    "decimal",
    "places",
    "let",
    "rock",
    "without",
    "would",
    "additional",
    "36",
    "zeros",
    "tax",
    "tacked",
    "onto",
    "end",
    "need",
    "divide",
    "one",
    "ea",
    "team",
    "get",
    "hard",
    "hat",
    "sections",
    "course",
    "testing",
    "math",
    "going",
    "lot",
    "easier",
    "really",
    "struggling",
    "math",
    "bits",
    "right",
    "would",
    "let",
    "slow",
    "get",
    "heart",
    "going",
    "become",
    "lot",
    "easier",
    "actually",
    "test",
    "working",
    "test",
    "net",
    "eath",
    "amount",
    "terms",
    "usd",
    "number",
    "looking",
    "go",
    "ahead",
    "return",
    "eath",
    "amount",
    "usd",
    "csb",
    "returns",
    "boom",
    "good",
    "conversion",
    "rate",
    "function",
    "walk",
    "math",
    "real",
    "quick",
    "let",
    "say",
    "eath",
    "price",
    "going",
    "going",
    "going",
    "additional",
    "18",
    "zeros",
    "tacked",
    "end",
    "matches",
    "message",
    "dot",
    "value",
    "way",
    "units",
    "let",
    "say",
    "example",
    "send",
    "one",
    "eath",
    "112345",
    "5678",
    "eath",
    "contract",
    "one",
    "eath",
    "equal",
    "get",
    "price",
    "going",
    "eath",
    "price",
    "3000",
    "times",
    "eath",
    "amount",
    "one",
    "divide",
    "one",
    "raised",
    "18th",
    "method",
    "3123",
    "12345678",
    "times",
    "1001",
    "2345678",
    "times",
    "112345678",
    "divide",
    "112345678",
    "equals",
    "mmm",
    "ii",
    "21",
    "calculator",
    "kind",
    "messed",
    "little",
    "bit",
    "ie",
    "21",
    "means",
    "21",
    "decimal",
    "places",
    "one",
    "12345678",
    "2900",
    "nine",
    "actually",
    "exactly",
    "reason",
    "decimal",
    "math",
    "solidity",
    "calculator",
    "saw",
    "massive",
    "number",
    "hard",
    "time",
    "getting",
    "ended",
    "rounding",
    "number",
    "nine",
    "work",
    "exclusively",
    "whole",
    "numbers",
    "solidity",
    "chance",
    "losing",
    "precision",
    "solidity",
    "going",
    "return",
    "exactly",
    "correct",
    "one",
    "aetherium",
    "per",
    "aetherium",
    "going",
    "like",
    "said",
    "since",
    "building",
    "contract",
    "assuming",
    "going",
    "working",
    "test",
    "net",
    "going",
    "test",
    "function",
    "test",
    "net",
    "going",
    "wait",
    "transaction",
    "go",
    "want",
    "go",
    "ahead",
    "deploy",
    "play",
    "around",
    "welcome",
    "okay",
    "great",
    "function",
    "called",
    "get",
    "conversion",
    "rate",
    "use",
    "fund",
    "function",
    "make",
    "sure",
    "sent",
    "enough",
    "message",
    "dot",
    "value",
    "fund",
    "need",
    "get",
    "conversion",
    "rate",
    "message",
    "dot",
    "value",
    "needs",
    "greater",
    "minimum",
    "usd",
    "course",
    "right",
    "minimum",
    "usd",
    "terms",
    "know",
    "conversion",
    "rate",
    "going",
    "return",
    "18",
    "zeros",
    "represent",
    "decimal",
    "places",
    "minimum",
    "usd",
    "amount",
    "needs",
    "upgraded",
    "10",
    "50",
    "times",
    "one",
    "e",
    "one",
    "times",
    "10",
    "raise",
    "18th",
    "going",
    "deploy",
    "test",
    "net",
    "demonstrate",
    "want",
    "wait",
    "gon",
    "na",
    "go",
    "ahead",
    "deploy",
    "confirm",
    "funny",
    "contract",
    "say",
    "anything",
    "value",
    "hit",
    "fun",
    "button",
    "gon",
    "na",
    "get",
    "gas",
    "estimation",
    "error",
    "failed",
    "kind",
    "blanket",
    "error",
    "basically",
    "saying",
    "hey",
    "go",
    "ahead",
    "send",
    "transaction",
    "want",
    "highly",
    "likely",
    "going",
    "work",
    "reason",
    "remix",
    "knows",
    "probably",
    "going",
    "work",
    "see",
    "require",
    "simulate",
    "transaction",
    "say",
    "hey",
    "send",
    "enough",
    "money",
    "however",
    "even",
    "send",
    "money",
    "like",
    "5000",
    "way",
    "still",
    "give",
    "us",
    "error",
    "enough",
    "let",
    "calculation",
    "right",
    "based",
    "price",
    "eath",
    "actually",
    "go",
    "data",
    "dot",
    "chain",
    "link",
    "look",
    "see",
    "approximately",
    "price",
    "looks",
    "like",
    "price",
    "aetherium",
    "right",
    "might",
    "different",
    "depending",
    "price",
    "aetherium",
    "minimum",
    "least",
    "could",
    "50",
    "divided",
    "3000",
    "eath",
    "approximately",
    "enough",
    "go",
    "aetherium",
    "converter",
    "get",
    "much",
    "way",
    "let",
    "make",
    "sure",
    "going",
    "amount",
    "paste",
    "change",
    "way",
    "hit",
    "fun",
    "button",
    "instead",
    "us",
    "getting",
    "error",
    "popping",
    "going",
    "actually",
    "go",
    "ahead",
    "let",
    "us",
    "fun",
    "function",
    "could",
    "confirm",
    "would",
    "fail",
    "going",
    "reject",
    "really",
    "feel",
    "like",
    "waiting",
    "transaction",
    "go",
    "great",
    "confirmed",
    "get",
    "conversion",
    "rate",
    "one",
    "working",
    "intended",
    "awesome",
    "great",
    "work",
    "next",
    "bit",
    "funding",
    "contract",
    "want",
    "well",
    "people",
    "actually",
    "send",
    "money",
    "contract",
    "want",
    "keep",
    "track",
    "people",
    "send",
    "us",
    "money",
    "let",
    "create",
    "data",
    "structures",
    "keep",
    "track",
    "let",
    "create",
    "array",
    "addresses",
    "called",
    "funders",
    "keep",
    "adding",
    "funders",
    "send",
    "money",
    "us",
    "say",
    "address",
    "array",
    "address",
    "list",
    "make",
    "public",
    "funders",
    "anytime",
    "somebody",
    "sends",
    "us",
    "money",
    "actually",
    "indeed",
    "go",
    "add",
    "funded",
    "server",
    "list",
    "say",
    "funders",
    "dot",
    "push",
    "message",
    "dot",
    "sender",
    "like",
    "message",
    "dot",
    "value",
    "message",
    "dot",
    "sender",
    "always",
    "available",
    "global",
    "keyword",
    "message",
    "dot",
    "value",
    "stands",
    "much",
    "aetherium",
    "much",
    "native",
    "blockchain",
    "currency",
    "sent",
    "message",
    "dot",
    "sender",
    "address",
    "whoever",
    "calls",
    "font",
    "function",
    "rigby",
    "message",
    "dot",
    "sender",
    "going",
    "equal",
    "whatever",
    "address",
    "calling",
    "function",
    "since",
    "address",
    "sending",
    "ether",
    "going",
    "add",
    "address",
    "funders",
    "list",
    "way",
    "keep",
    "track",
    "wonderful",
    "donators",
    "donating",
    "contract",
    "maybe",
    "wo",
    "even",
    "make",
    "mapping",
    "addresses",
    "250",
    "sixes",
    "addresses",
    "much",
    "money",
    "one",
    "people",
    "actually",
    "sent",
    "address",
    "256",
    "public",
    "address",
    "amount",
    "funded",
    "somebody",
    "funds",
    "contract",
    "say",
    "address",
    "amount",
    "funded",
    "message",
    "dot",
    "sender",
    "equals",
    "message",
    "dot",
    "value",
    "function",
    "people",
    "fund",
    "contract",
    "set",
    "value",
    "terms",
    "usd",
    "keep",
    "track",
    "different",
    "funders",
    "actually",
    "fund",
    "contract",
    "fantastic",
    "know",
    "gone",
    "lot",
    "really",
    "intense",
    "math",
    "intense",
    "stuff",
    "let",
    "quick",
    "refresher",
    "learned",
    "far",
    "whenever",
    "work",
    "contract",
    "always",
    "need",
    "api",
    "address",
    "compiled",
    "interface",
    "gives",
    "us",
    "minimalistic",
    "api",
    "interact",
    "contracts",
    "outside",
    "project",
    "combine",
    "compiled",
    "interfaces",
    "address",
    "call",
    "functions",
    "interface",
    "contract",
    "chain",
    "link",
    "data",
    "feeds",
    "decentralized",
    "way",
    "get",
    "information",
    "real",
    "world",
    "case",
    "getting",
    "price",
    "aetherium",
    "terms",
    "usd",
    "decentralized",
    "collective",
    "chain",
    "link",
    "nodes",
    "working",
    "math",
    "solidity",
    "decimals",
    "work",
    "need",
    "keep",
    "mind",
    "type",
    "math",
    "solidity",
    "need",
    "make",
    "sure",
    "always",
    "correct",
    "units",
    "math",
    "makes",
    "sense",
    "message",
    "dot",
    "value",
    "message",
    "dot",
    "sender",
    "globally",
    "available",
    "variables",
    "message",
    "dot",
    "sender",
    "represents",
    "sender",
    "message",
    "transaction",
    "message",
    "dot",
    "value",
    "represents",
    "number",
    "ways",
    "sent",
    "message",
    "whole",
    "bunch",
    "different",
    "special",
    "variables",
    "functions",
    "access",
    "time",
    "available",
    "solidity",
    "documentation",
    "alright",
    "great",
    "got",
    "great",
    "way",
    "actually",
    "start",
    "funding",
    "contract",
    "code",
    "looks",
    "little",
    "bit",
    "messy",
    "got",
    "couple",
    "different",
    "functions",
    "getting",
    "price",
    "working",
    "prices",
    "way",
    "make",
    "math",
    "lot",
    "easier",
    "use",
    "going",
    "introduce",
    "concept",
    "library",
    "library",
    "definitely",
    "recommend",
    "checking",
    "solidity",
    "going",
    "along",
    "course",
    "well",
    "got",
    "fantastic",
    "examples",
    "one",
    "example",
    "going",
    "libraries",
    "libraries",
    "similar",
    "contracts",
    "ca",
    "declare",
    "state",
    "variables",
    "ca",
    "send",
    "ether",
    "also",
    "use",
    "libraries",
    "add",
    "functionality",
    "different",
    "values",
    "mean",
    "well",
    "actually",
    "get",
    "conversion",
    "rate",
    "function",
    "un",
    "could",
    "something",
    "like",
    "messer",
    "dot",
    "value",
    "dot",
    "get",
    "convert",
    "john",
    "conversion",
    "rate",
    "add",
    "functions",
    "went",
    "36",
    "object",
    "struct",
    "contract",
    "actually",
    "created",
    "well",
    "let",
    "create",
    "new",
    "contract",
    "contracts",
    "folder",
    "create",
    "new",
    "file",
    "going",
    "call",
    "price",
    "converter",
    "dot",
    "salt",
    "price",
    "converted",
    "outsole",
    "going",
    "library",
    "going",
    "attach",
    "un",
    "actually",
    "create",
    "library",
    "library",
    "well",
    "library",
    "going",
    "really",
    "really",
    "similar",
    "smart",
    "contract",
    "gon",
    "na",
    "start",
    "spdx",
    "license",
    "identifier",
    "team",
    "gon",
    "na",
    "give",
    "pragma",
    "solidity",
    "zero",
    "point",
    "instead",
    "typing",
    "contract",
    "name",
    "contract",
    "going",
    "library",
    "name",
    "library",
    "going",
    "call",
    "price",
    "converter",
    "libraries",
    "ca",
    "state",
    "variables",
    "also",
    "ca",
    "send",
    "ether",
    "functions",
    "library",
    "going",
    "kernel",
    "go",
    "back",
    "fund",
    "dot",
    "soul",
    "grab",
    "get",
    "price",
    "get",
    "version",
    "get",
    "conversion",
    "rate",
    "copy",
    "delete",
    "funmi",
    "dot",
    "soul",
    "paste",
    "library",
    "course",
    "since",
    "using",
    "aggregator",
    "v3",
    "interface",
    "also",
    "copy",
    "import",
    "funmi",
    "since",
    "using",
    "aggregate",
    "three",
    "interface",
    "contract",
    "anymore",
    "using",
    "price",
    "converter",
    "paste",
    "price",
    "converter",
    "compile",
    "price",
    "converted",
    "soul",
    "see",
    "actually",
    "passes",
    "functions",
    "inside",
    "library",
    "need",
    "internal",
    "gon",
    "na",
    "make",
    "library",
    "price",
    "converter",
    "different",
    "functions",
    "call",
    "activity",
    "six",
    "example",
    "going",
    "able",
    "message",
    "dot",
    "value",
    "dot",
    "get",
    "conversion",
    "rate",
    "going",
    "directly",
    "able",
    "get",
    "conversion",
    "rate",
    "value",
    "u",
    "256",
    "function",
    "whole",
    "time",
    "first",
    "let",
    "make",
    "internal",
    "let",
    "make",
    "get",
    "conversion",
    "rate",
    "internal",
    "make",
    "good",
    "version",
    "internal",
    "library",
    "price",
    "converter",
    "back",
    "funmi",
    "import",
    "price",
    "converter",
    "attach",
    "import",
    "slash",
    "price",
    "converter",
    "dot",
    "soul",
    "funmi",
    "using",
    "price",
    "converter",
    "unt",
    "course",
    "compile",
    "funmi",
    "line",
    "getting",
    "issue",
    "saying",
    "hey",
    "get",
    "conversion",
    "rate",
    "defined",
    "library",
    "first",
    "variable",
    "gets",
    "passed",
    "function",
    "going",
    "object",
    "called",
    "funmi",
    "dot",
    "soul",
    "let",
    "go",
    "ahead",
    "comment",
    "line",
    "message",
    "dot",
    "value",
    "dot",
    "get",
    "conversion",
    "rate",
    "secretly",
    "get",
    "conversion",
    "rate",
    "message",
    "dot",
    "value",
    "price",
    "converter",
    "library",
    "message",
    "dot",
    "value",
    "going",
    "passed",
    "input",
    "parameter",
    "get",
    "conversion",
    "rate",
    "forget",
    "price",
    "get",
    "version",
    "really",
    "care",
    "number",
    "going",
    "leave",
    "blank",
    "instead",
    "require",
    "get",
    "conversion",
    "rate",
    "message",
    "dot",
    "value",
    "message",
    "dot",
    "value",
    "dot",
    "get",
    "conversion",
    "rate",
    "compile",
    "see",
    "passing",
    "variable",
    "even",
    "though",
    "get",
    "conversion",
    "rate",
    "function",
    "says",
    "hey",
    "expecting",
    "variable",
    "reason",
    "message",
    "add",
    "value",
    "considered",
    "first",
    "parameter",
    "library",
    "functions",
    "works",
    "wanted",
    "another",
    "variable",
    "like",
    "went",
    "56",
    "something",
    "else",
    "would",
    "want",
    "pass",
    "something",
    "else",
    "123",
    "would",
    "get",
    "assigned",
    "something",
    "else",
    "going",
    "delete",
    "okay",
    "great",
    "minimized",
    "funmi",
    "contract",
    "lot",
    "moving",
    "lot",
    "math",
    "price",
    "conversion",
    "stuff",
    "price",
    "converter",
    "library",
    "dot",
    "sol",
    "one",
    "common",
    "libraries",
    "used",
    "longest",
    "time",
    "library",
    "called",
    "safe",
    "math",
    "dot",
    "sol",
    "probably",
    "see",
    "lot",
    "different",
    "places",
    "gon",
    "na",
    "go",
    "quick",
    "little",
    "tangent",
    "teach",
    "safe",
    "math",
    "let",
    "close",
    "funmi",
    "close",
    "price",
    "converter",
    "let",
    "create",
    "new",
    "file",
    "called",
    "safe",
    "math",
    "tester",
    "let",
    "start",
    "basic",
    "stuff",
    "safe",
    "math",
    "place",
    "version",
    "solidity",
    "almost",
    "contracts",
    "happened",
    "safe",
    "math",
    "longer",
    "used",
    "much",
    "well",
    "let",
    "create",
    "sample",
    "contract",
    "section",
    "follow",
    "along",
    "want",
    "code",
    "along",
    "want",
    "absolutely",
    "still",
    "going",
    "contract",
    "going",
    "deploy",
    "javascript",
    "virtual",
    "machine",
    "use",
    "version",
    "solidity",
    "version",
    "solidity",
    "example",
    "use",
    "pragma",
    "carrot",
    "zero",
    "point",
    "create",
    "contract",
    "safe",
    "math",
    "tester",
    "dot",
    "sol",
    "create",
    "int",
    "eight",
    "set",
    "public",
    "big",
    "number",
    "set",
    "255",
    "oops",
    "safe",
    "math",
    "tester",
    "let",
    "go",
    "ahead",
    "compile",
    "safe",
    "math",
    "tester",
    "zero",
    "point",
    "pragma",
    "solidity",
    "maximum",
    "size",
    "yewande",
    "eight",
    "going",
    "going",
    "biggest",
    "number",
    "fit",
    "new",
    "int",
    "eight",
    "deploy",
    "javascript",
    "vm",
    "even",
    "test",
    "network",
    "safe",
    "math",
    "tester",
    "let",
    "go",
    "ahead",
    "play",
    "hit",
    "big",
    "number",
    "gon",
    "na",
    "get",
    "well",
    "happens",
    "create",
    "function",
    "called",
    "add",
    "sets",
    "big",
    "number",
    "equal",
    "big",
    "number",
    "plus",
    "one",
    "let",
    "save",
    "delete",
    "old",
    "contract",
    "deploy",
    "right",
    "big",
    "numbers",
    "255",
    "happens",
    "add",
    "one",
    "two",
    "big",
    "number",
    "255",
    "max",
    "size",
    "unt",
    "eight",
    "well",
    "let",
    "hit",
    "add",
    "let",
    "check",
    "big",
    "number",
    "big",
    "number",
    "gets",
    "reset",
    "zero",
    "going",
    "well",
    "prior",
    "version",
    "solidity",
    "unsigned",
    "integers",
    "integers",
    "ran",
    "concept",
    "unchecked",
    "means",
    "passed",
    "upper",
    "limit",
    "number",
    "would",
    "wrap",
    "around",
    "start",
    "back",
    "lowest",
    "number",
    "could",
    "call",
    "add",
    "whole",
    "bunch",
    "times",
    "hit",
    "big",
    "number",
    "let",
    "say",
    "hit",
    "add",
    "button",
    "ton",
    "times",
    "get",
    "back",
    "two",
    "would",
    "continue",
    "wrap",
    "zero",
    "one",
    "popular",
    "libraries",
    "safe",
    "math",
    "library",
    "would",
    "basically",
    "check",
    "make",
    "sure",
    "wrapping",
    "around",
    "un",
    "256",
    "intuitive",
    "six",
    "basically",
    "way",
    "say",
    "hey",
    "reached",
    "max",
    "number",
    "transaction",
    "going",
    "fail",
    "switch",
    "solidity",
    "delete",
    "old",
    "contract",
    "go",
    "switch",
    "go",
    "ahead",
    "compile",
    "deploy",
    "javascript",
    "vm",
    "hit",
    "big",
    "number",
    "get",
    "hit",
    "add",
    "actually",
    "fails",
    "still",
    "get",
    "version",
    "solidity",
    "added",
    "bit",
    "automatically",
    "checks",
    "make",
    "sure",
    "going",
    "called",
    "overflow",
    "underflow",
    "variable",
    "actually",
    "revert",
    "back",
    "unchecked",
    "version",
    "using",
    "unchecked",
    "keyword",
    "wrap",
    "big",
    "number",
    "equals",
    "big",
    "number",
    "plus",
    "one",
    "unchecked",
    "bracket",
    "let",
    "delete",
    "old",
    "contract",
    "compile",
    "redeploy",
    "big",
    "numbers",
    "hit",
    "add",
    "hit",
    "big",
    "number",
    "reverted",
    "back",
    "zero",
    "little",
    "bit",
    "safe",
    "math",
    "checked",
    "unchecked",
    "version",
    "code",
    "see",
    "front",
    "going",
    "exact",
    "code",
    "unchecked",
    "keyword",
    "might",
    "thinking",
    "newer",
    "versions",
    "solidity",
    "would",
    "use",
    "unchecked",
    "keyword",
    "well",
    "find",
    "later",
    "unchecked",
    "keyword",
    "makes",
    "code",
    "little",
    "bit",
    "gas",
    "efficient",
    "absolutely",
    "positive",
    "math",
    "never",
    "going",
    "reach",
    "top",
    "bottom",
    "limits",
    "number",
    "might",
    "make",
    "sense",
    "use",
    "unchecked",
    "keyword",
    "let",
    "head",
    "back",
    "funmi",
    "contract",
    "using",
    "price",
    "converter",
    "library",
    "created",
    "alright",
    "great",
    "got",
    "pretty",
    "minimalistic",
    "contract",
    "actually",
    "funding",
    "math",
    "getting",
    "conversion",
    "rates",
    "done",
    "library",
    "price",
    "converter",
    "going",
    "import",
    "top",
    "funmi",
    "cool",
    "point",
    "got",
    "fun",
    "method",
    "awesome",
    "allow",
    "anybody",
    "go",
    "ahead",
    "fund",
    "contract",
    "send",
    "contract",
    "aetherium",
    "native",
    "blockchain",
    "currency",
    "contract",
    "well",
    "want",
    "well",
    "funders",
    "gone",
    "ahead",
    "funded",
    "going",
    "want",
    "project",
    "able",
    "withdraw",
    "funds",
    "contract",
    "actually",
    "go",
    "ahead",
    "use",
    "funds",
    "buy",
    "things",
    "project",
    "let",
    "go",
    "ahead",
    "create",
    "withdrawal",
    "function",
    "create",
    "function",
    "withdraw",
    "make",
    "public",
    "since",
    "going",
    "withdrawing",
    "funds",
    "contract",
    "probably",
    "also",
    "want",
    "reset",
    "funders",
    "array",
    "address",
    "amount",
    "funded",
    "since",
    "withdrawing",
    "funds",
    "amounts",
    "go",
    "back",
    "zero",
    "let",
    "go",
    "ahead",
    "loop",
    "funders",
    "array",
    "update",
    "mapping",
    "object",
    "funders",
    "zero",
    "second",
    "going",
    "withdraw",
    "money",
    "going",
    "use",
    "something",
    "called",
    "loop",
    "loop",
    "loop",
    "way",
    "loop",
    "type",
    "index",
    "object",
    "loop",
    "range",
    "numbers",
    "task",
    "certain",
    "amount",
    "times",
    "repeating",
    "example",
    "let",
    "say",
    "array",
    "list",
    "list",
    "wanted",
    "get",
    "elements",
    "array",
    "list",
    "okay",
    "get",
    "elements",
    "list",
    "well",
    "would",
    "use",
    "loop",
    "loop",
    "one",
    "objects",
    "zero",
    "index",
    "would",
    "one",
    "first",
    "index",
    "would",
    "two",
    "second",
    "index",
    "would",
    "three",
    "last",
    "index",
    "would",
    "four",
    "would",
    "loop",
    "indexes",
    "zero",
    "three",
    "get",
    "elements",
    "maybe",
    "another",
    "example",
    "b",
    "c",
    "zero",
    "index",
    "b",
    "first",
    "index",
    "sees",
    "second",
    "indy",
    "third",
    "loop",
    "zero",
    "three",
    "get",
    "one",
    "elements",
    "gon",
    "na",
    "exact",
    "thing",
    "funders",
    "array",
    "actually",
    "well",
    "first",
    "start",
    "keyword",
    "keyword",
    "says",
    "okay",
    "start",
    "loop",
    "inside",
    "parentheses",
    "define",
    "want",
    "loop",
    "also",
    "backslash",
    "star",
    "star",
    "backslash",
    "sort",
    "like",
    "brackets",
    "comments",
    "anything",
    "two",
    "comment",
    "loop",
    "first",
    "give",
    "starting",
    "index",
    "give",
    "ending",
    "index",
    "give",
    "step",
    "amount",
    "example",
    "maybe",
    "want",
    "start",
    "zero",
    "want",
    "go",
    "want",
    "go",
    "one",
    "time",
    "would",
    "go",
    "01",
    "maybe",
    "start",
    "zero",
    "want",
    "end",
    "go",
    "two",
    "time",
    "go",
    "02468",
    "maybe",
    "want",
    "go",
    "zero",
    "five",
    "want",
    "go",
    "two",
    "five",
    "step",
    "one",
    "go",
    "2345",
    "etc",
    "going",
    "go",
    "inside",
    "four",
    "bit",
    "starting",
    "index",
    "let",
    "even",
    "put",
    "reference",
    "starting",
    "index",
    "going",
    "vt",
    "six",
    "variable",
    "going",
    "call",
    "funder",
    "index",
    "going",
    "start",
    "thunder",
    "index",
    "equal",
    "zero",
    "starting",
    "zero",
    "going",
    "end",
    "length",
    "funders",
    "array",
    "since",
    "want",
    "loop",
    "funders",
    "going",
    "say",
    "funder",
    "index",
    "needs",
    "less",
    "funders",
    "dot",
    "length",
    "ending",
    "index",
    "going",
    "whenever",
    "funders",
    "index",
    "longer",
    "less",
    "funders",
    "dot",
    "length",
    "finally",
    "gon",
    "na",
    "say",
    "funder",
    "index",
    "equals",
    "funder",
    "index",
    "plus",
    "one",
    "means",
    "every",
    "time",
    "code",
    "inside",
    "loop",
    "finishes",
    "going",
    "increase",
    "funder",
    "index",
    "one",
    "go",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "etc",
    "another",
    "way",
    "type",
    "funder",
    "index",
    "equals",
    "funder",
    "index",
    "plus",
    "one",
    "funder",
    "index",
    "plus",
    "plus",
    "plus",
    "plus",
    "syntax",
    "means",
    "funder",
    "index",
    "equals",
    "plus",
    "one",
    "let",
    "start",
    "looping",
    "funders",
    "array",
    "access",
    "zero",
    "element",
    "first",
    "element",
    "going",
    "say",
    "funders",
    "funder",
    "index",
    "saying",
    "want",
    "access",
    "zero",
    "element",
    "funders",
    "object",
    "going",
    "return",
    "address",
    "us",
    "use",
    "gon",
    "na",
    "go",
    "ahead",
    "say",
    "address",
    "equals",
    "funders",
    "funder",
    "index",
    "funder",
    "address",
    "want",
    "use",
    "reset",
    "mapping",
    "going",
    "say",
    "address",
    "amount",
    "funded",
    "funder",
    "key",
    "equal",
    "zero",
    "remember",
    "fund",
    "update",
    "amount",
    "whenever",
    "fund",
    "contract",
    "withdraw",
    "money",
    "contract",
    "going",
    "reset",
    "back",
    "zero",
    "let",
    "walk",
    "funder",
    "index",
    "starts",
    "zero",
    "going",
    "get",
    "zero",
    "funder",
    "going",
    "grab",
    "funder",
    "zero",
    "index",
    "going",
    "reset",
    "address",
    "male",
    "funded",
    "funder",
    "zero",
    "loop",
    "going",
    "update",
    "one",
    "going",
    "move",
    "zero",
    "one",
    "going",
    "check",
    "funder",
    "index",
    "less",
    "length",
    "let",
    "say",
    "funders",
    "10",
    "people",
    "funders",
    "10",
    "people",
    "still",
    "less",
    "funder",
    "links",
    "one",
    "address",
    "funder",
    "equal",
    "funders",
    "one",
    "instead",
    "zero",
    "grab",
    "address",
    "reset",
    "addresses",
    "funded",
    "zero",
    "continue",
    "two",
    "three",
    "four",
    "way",
    "length",
    "funders",
    "array",
    "loop",
    "objects",
    "saying",
    "middle",
    "one",
    "ending",
    "index",
    "exactly",
    "right",
    "since",
    "really",
    "checking",
    "boolean",
    "see",
    "still",
    "true",
    "hopefully",
    "get",
    "idea",
    "reset",
    "balances",
    "mapping",
    "however",
    "still",
    "done",
    "two",
    "things",
    "still",
    "need",
    "reset",
    "array",
    "make",
    "funders",
    "blank",
    "array",
    "also",
    "need",
    "actually",
    "withdraw",
    "funds",
    "since",
    "funded",
    "sent",
    "message",
    "dot",
    "value",
    "along",
    "calling",
    "fund",
    "function",
    "however",
    "actually",
    "withdraw",
    "funds",
    "reset",
    "array",
    "could",
    "loop",
    "delete",
    "objects",
    "address",
    "array",
    "could",
    "totally",
    "refresh",
    "variable",
    "instead",
    "looping",
    "array",
    "deleting",
    "objects",
    "going",
    "say",
    "funders",
    "equals",
    "new",
    "address",
    "array",
    "going",
    "completely",
    "reset",
    "array",
    "saying",
    "font",
    "variable",
    "equals",
    "brand",
    "new",
    "address",
    "array",
    "zero",
    "objects",
    "start",
    "put",
    "one",
    "would",
    "one",
    "element",
    "start",
    "array",
    "two",
    "would",
    "two",
    "three",
    "would",
    "three",
    "etc",
    "going",
    "start",
    "completely",
    "blank",
    "new",
    "array",
    "great",
    "gone",
    "ahead",
    "reset",
    "array",
    "actually",
    "draw",
    "funds",
    "contract",
    "send",
    "funds",
    "back",
    "whomever",
    "calling",
    "actually",
    "send",
    "ether",
    "send",
    "native",
    "blockchain",
    "currency",
    "actually",
    "three",
    "different",
    "ways",
    "going",
    "look",
    "three",
    "say",
    "differences",
    "three",
    "three",
    "different",
    "ways",
    "going",
    "transfer",
    "send",
    "call",
    "let",
    "go",
    "ahead",
    "start",
    "transfer",
    "since",
    "transfer",
    "simplest",
    "surface",
    "level",
    "makes",
    "sense",
    "us",
    "want",
    "transfer",
    "funds",
    "whomever",
    "calling",
    "withdrawal",
    "function",
    "would",
    "would",
    "say",
    "message",
    "dot",
    "sender",
    "dot",
    "transfer",
    "get",
    "balance",
    "contract",
    "saying",
    "address",
    "keyword",
    "refers",
    "whole",
    "contract",
    "dot",
    "balance",
    "get",
    "native",
    "blockchain",
    "currency",
    "aetherium",
    "currency",
    "balance",
    "address",
    "like",
    "thing",
    "need",
    "need",
    "cast",
    "need",
    "typecast",
    "message",
    "dot",
    "sender",
    "address",
    "type",
    "payable",
    "address",
    "type",
    "message",
    "dot",
    "sender",
    "type",
    "address",
    "whereas",
    "payable",
    "message",
    "sender",
    "type",
    "payable",
    "address",
    "solidity",
    "order",
    "send",
    "native",
    "blockchain",
    "token",
    "like",
    "aetherium",
    "work",
    "payable",
    "addresses",
    "wrap",
    "payable",
    "type",
    "caster",
    "first",
    "way",
    "actually",
    "send",
    "aetherium",
    "send",
    "tokens",
    "different",
    "contracts",
    "wrap",
    "address",
    "want",
    "send",
    "payable",
    "keyword",
    "dot",
    "transfer",
    "say",
    "exactly",
    "much",
    "want",
    "transfer",
    "issues",
    "transfer",
    "solidity",
    "example",
    "sending",
    "ether",
    "fantastic",
    "resource",
    "refer",
    "get",
    "lost",
    "method",
    "looked",
    "transfer",
    "method",
    "saw",
    "way",
    "earlier",
    "course",
    "sent",
    "aetherium",
    "one",
    "address",
    "another",
    "cost",
    "2100",
    "gas",
    "gas",
    "transfer",
    "function",
    "capped",
    "2300",
    "gas",
    "gas",
    "used",
    "throws",
    "error",
    "next",
    "one",
    "using",
    "going",
    "sent",
    "also",
    "capped",
    "2300",
    "gas",
    "fails",
    "return",
    "boolean",
    "transfer",
    "line",
    "fails",
    "air",
    "revert",
    "transaction",
    "send",
    "wo",
    "air",
    "return",
    "boolean",
    "whether",
    "successful",
    "using",
    "send",
    "payable",
    "message",
    "sender",
    "send",
    "address",
    "balance",
    "want",
    "finish",
    "call",
    "fail",
    "contract",
    "would",
    "revert",
    "transaction",
    "want",
    "get",
    "money",
    "sent",
    "want",
    "boolean",
    "send",
    "success",
    "equals",
    "whole",
    "bit",
    "want",
    "require",
    "success",
    "send",
    "fails",
    "throw",
    "error",
    "saying",
    "sin",
    "failed",
    "way",
    "fails",
    "still",
    "revert",
    "adding",
    "require",
    "statement",
    "transfer",
    "automatically",
    "reverts",
    "transfer",
    "fails",
    "send",
    "revert",
    "transaction",
    "add",
    "require",
    "statement",
    "great",
    "third",
    "way",
    "actually",
    "send",
    "etherium",
    "native",
    "currency",
    "wallets",
    "call",
    "command",
    "call",
    "going",
    "one",
    "first",
    "lower",
    "level",
    "commands",
    "actually",
    "use",
    "solidity",
    "code",
    "call",
    "function",
    "actually",
    "incredibly",
    "powerful",
    "use",
    "call",
    "virtually",
    "function",
    "aetherium",
    "without",
    "even",
    "api",
    "learn",
    "advanced",
    "ways",
    "use",
    "call",
    "much",
    "later",
    "going",
    "learn",
    "use",
    "send",
    "aetherium",
    "native",
    "blockchain",
    "currency",
    "call",
    "going",
    "look",
    "similar",
    "send",
    "going",
    "payable",
    "message",
    "dot",
    "sender",
    "dot",
    "call",
    "put",
    "function",
    "information",
    "information",
    "function",
    "want",
    "call",
    "contract",
    "actually",
    "want",
    "call",
    "function",
    "going",
    "leave",
    "blank",
    "show",
    "leaving",
    "blank",
    "putting",
    "two",
    "quotes",
    "instead",
    "want",
    "use",
    "like",
    "transaction",
    "saw",
    "deployment",
    "always",
    "message",
    "dot",
    "value",
    "bid",
    "going",
    "use",
    "call",
    "function",
    "regular",
    "transaction",
    "add",
    "stuff",
    "like",
    "message",
    "dot",
    "value",
    "going",
    "add",
    "squiggly",
    "brackets",
    "going",
    "say",
    "value",
    "address",
    "dot",
    "balance",
    "call",
    "function",
    "returns",
    "actually",
    "two",
    "variables",
    "function",
    "returns",
    "two",
    "variables",
    "show",
    "placing",
    "parentheses",
    "left",
    "hand",
    "side",
    "two",
    "variables",
    "returns",
    "going",
    "boolean",
    "going",
    "call",
    "call",
    "success",
    "also",
    "bytes",
    "object",
    "called",
    "data",
    "returned",
    "since",
    "call",
    "allows",
    "us",
    "actually",
    "call",
    "different",
    "functions",
    "function",
    "returns",
    "data",
    "returns",
    "value",
    "going",
    "save",
    "data",
    "returned",
    "variable",
    "also",
    "returns",
    "call",
    "success",
    "function",
    "successfully",
    "called",
    "true",
    "false",
    "since",
    "bytes",
    "objects",
    "arrays",
    "data",
    "returns",
    "needs",
    "memory",
    "code",
    "actually",
    "calling",
    "function",
    "really",
    "care",
    "data",
    "returned",
    "similar",
    "saw",
    "price",
    "contract",
    "go",
    "ahead",
    "delete",
    "leave",
    "comma",
    "tell",
    "solidity",
    "yeah",
    "know",
    "function",
    "returns",
    "two",
    "variables",
    "care",
    "one",
    "similar",
    "centerpiece",
    "going",
    "require",
    "cost",
    "access",
    "call",
    "failed",
    "meaning",
    "requiring",
    "cost",
    "accesses",
    "true",
    "otherwise",
    "revert",
    "error",
    "says",
    "call",
    "failed",
    "learning",
    "difference",
    "three",
    "little",
    "complicated",
    "right",
    "let",
    "slow",
    "feel",
    "free",
    "come",
    "back",
    "learned",
    "lower",
    "level",
    "functions",
    "work",
    "little",
    "bit",
    "gasworks",
    "solidity",
    "example",
    "fantastic",
    "job",
    "though",
    "saying",
    "difference",
    "three",
    "transfer",
    "maximum",
    "2300",
    "gas",
    "throws",
    "error",
    "fails",
    "send",
    "maximum",
    "2300",
    "gas",
    "returns",
    "boolean",
    "fails",
    "call",
    "forwards",
    "gas",
    "capped",
    "gas",
    "similar",
    "send",
    "returns",
    "boolean",
    "successful",
    "fails",
    "recording",
    "right",
    "using",
    "call",
    "recommended",
    "way",
    "actually",
    "send",
    "receive",
    "aetherium",
    "blockchain",
    "native",
    "token",
    "part",
    "little",
    "bit",
    "confusing",
    "look",
    "see",
    "ah",
    "send",
    "transfer",
    "aetherium",
    "native",
    "blockchain",
    "currency",
    "tokens",
    "going",
    "delete",
    "part",
    "video",
    "keep",
    "comments",
    "code",
    "repository",
    "associated",
    "course",
    "okay",
    "perfect",
    "hit",
    "compile",
    "fun",
    "meat",
    "outsole",
    "indeed",
    "see",
    "passing",
    "compliation",
    "however",
    "bit",
    "issue",
    "right",
    "anybody",
    "withdraw",
    "contract",
    "anybody",
    "fund",
    "want",
    "want",
    "anyone",
    "able",
    "withdraw",
    "want",
    "person",
    "collecting",
    "funds",
    "able",
    "actually",
    "withdraw",
    "funds",
    "set",
    "withdraw",
    "function",
    "called",
    "owner",
    "contract",
    "well",
    "going",
    "set",
    "couple",
    "new",
    "functions",
    "deploy",
    "contract",
    "want",
    "automatically",
    "set",
    "whomever",
    "deploys",
    "contract",
    "going",
    "owner",
    "contract",
    "parameters",
    "set",
    "owner",
    "contract",
    "call",
    "withdrawal",
    "function",
    "would",
    "well",
    "maybe",
    "create",
    "function",
    "called",
    "like",
    "call",
    "right",
    "away",
    "right",
    "deploy",
    "contract",
    "call",
    "call",
    "right",
    "away",
    "function",
    "set",
    "us",
    "owner",
    "going",
    "take",
    "two",
    "transactions",
    "would",
    "really",
    "annoying",
    "instead",
    "solidity",
    "something",
    "called",
    "constructor",
    "familiar",
    "programming",
    "language",
    "constructor",
    "exactly",
    "programming",
    "languages",
    "constructor",
    "going",
    "function",
    "gets",
    "called",
    "immediately",
    "whenever",
    "deploy",
    "contract",
    "deploy",
    "funmi",
    "dot",
    "sol",
    "say",
    "minimum",
    "usd",
    "equals",
    "minimum",
    "usd",
    "would",
    "longer",
    "50",
    "times",
    "one",
    "e",
    "18th",
    "would",
    "immediately",
    "updated",
    "two",
    "constructor",
    "function",
    "gets",
    "immediately",
    "called",
    "transaction",
    "create",
    "contract",
    "constructor",
    "function",
    "going",
    "incredibly",
    "helpful",
    "us",
    "allows",
    "us",
    "set",
    "contract",
    "way",
    "want",
    "example",
    "want",
    "withdrawal",
    "function",
    "able",
    "called",
    "owner",
    "contract",
    "constructor",
    "set",
    "owner",
    "contract",
    "let",
    "create",
    "global",
    "variable",
    "called",
    "address",
    "public",
    "owner",
    "constructor",
    "say",
    "owner",
    "going",
    "equal",
    "message",
    "dot",
    "sender",
    "message",
    "sender",
    "constructor",
    "function",
    "going",
    "whoever",
    "deploying",
    "contract",
    "owner",
    "going",
    "whoever",
    "deployed",
    "contract",
    "worry",
    "going",
    "demo",
    "soon",
    "show",
    "everything",
    "going",
    "ether",
    "scan",
    "everything",
    "demoing",
    "right",
    "might",
    "take",
    "little",
    "bit",
    "time",
    "using",
    "test",
    "net",
    "want",
    "test",
    "right",
    "absolutely",
    "go",
    "know",
    "take",
    "little",
    "bit",
    "longer",
    "owner",
    "setup",
    "modify",
    "withdrawal",
    "function",
    "make",
    "owner",
    "actually",
    "call",
    "withdrawal",
    "function",
    "top",
    "withdrawal",
    "function",
    "maybe",
    "want",
    "add",
    "section",
    "maybe",
    "want",
    "say",
    "require",
    "message",
    "dot",
    "sender",
    "equals",
    "owner",
    "note",
    "double",
    "equals",
    "versus",
    "equals",
    "think",
    "single",
    "equals",
    "set",
    "parameter",
    "say",
    "owner",
    "set",
    "message",
    "dot",
    "sender",
    "double",
    "equals",
    "check",
    "see",
    "two",
    "variables",
    "equivalent",
    "saying",
    "message",
    "dot",
    "sender",
    "owner",
    "checking",
    "see",
    "equivalence",
    "setting",
    "checking",
    "see",
    "equivalence",
    "setting",
    "gon",
    "na",
    "say",
    "require",
    "message",
    "dot",
    "sender",
    "equal",
    "owner",
    "otherwise",
    "gon",
    "na",
    "throw",
    "error",
    "saying",
    "sender",
    "owner",
    "perfect",
    "quick",
    "way",
    "make",
    "sure",
    "withdrawal",
    "function",
    "called",
    "owner",
    "contract",
    "let",
    "say",
    "lot",
    "functions",
    "contract",
    "going",
    "required",
    "owner",
    "maybe",
    "lot",
    "functions",
    "contract",
    "need",
    "whole",
    "lot",
    "different",
    "requires",
    "want",
    "copy",
    "paste",
    "line",
    "every",
    "single",
    "one",
    "functions",
    "well",
    "something",
    "called",
    "modifiers",
    "come",
    "gon",
    "na",
    "go",
    "ahead",
    "delete",
    "line",
    "going",
    "create",
    "something",
    "called",
    "modifier",
    "modifier",
    "going",
    "key",
    "word",
    "add",
    "right",
    "function",
    "declaration",
    "modify",
    "function",
    "functionality",
    "going",
    "create",
    "modifier",
    "call",
    "owner",
    "going",
    "paste",
    "line",
    "made",
    "withdraw",
    "underneath",
    "going",
    "put",
    "little",
    "underscore",
    "take",
    "owner",
    "modifier",
    "stick",
    "function",
    "declaration",
    "withdrawal",
    "function",
    "happening",
    "modifier",
    "owner",
    "function",
    "declaration",
    "saying",
    "hey",
    "withdrawal",
    "function",
    "read",
    "code",
    "inside",
    "look",
    "owner",
    "modifier",
    "whatever",
    "first",
    "whatever",
    "underscore",
    "underscore",
    "represents",
    "rest",
    "code",
    "go",
    "call",
    "withdraw",
    "function",
    "actually",
    "require",
    "statement",
    "first",
    "call",
    "rest",
    "code",
    "require",
    "statement",
    "underscore",
    "would",
    "tell",
    "function",
    "go",
    "ahead",
    "code",
    "first",
    "run",
    "require",
    "keyword",
    "saying",
    "great",
    "got",
    "function",
    "withdraw",
    "public",
    "oh",
    "odor",
    "modifier",
    "let",
    "look",
    "works",
    "okay",
    "tells",
    "us",
    "code",
    "original",
    "function",
    "first",
    "let",
    "go",
    "ahead",
    "okay",
    "done",
    "okay",
    "run",
    "require",
    "want",
    "go",
    "ahead",
    "put",
    "require",
    "first",
    "modifiers",
    "work",
    "use",
    "improve",
    "functionality",
    "right",
    "awesome",
    "basic",
    "functionality",
    "contract",
    "need",
    "finally",
    "actually",
    "going",
    "run",
    "everything",
    "test",
    "see",
    "everything",
    "happened",
    "live",
    "eyes",
    "ready",
    "let",
    "let",
    "go",
    "deploy",
    "tab",
    "going",
    "switch",
    "course",
    "injected",
    "web",
    "three",
    "remember",
    "using",
    "injected",
    "web",
    "three",
    "price",
    "converter",
    "dot",
    "soul",
    "using",
    "chainlink",
    "oracle",
    "actually",
    "exist",
    "actually",
    "monitoring",
    "rinkeby",
    "network",
    "us",
    "going",
    "scroll",
    "going",
    "choose",
    "funmi",
    "contract",
    "going",
    "go",
    "ahead",
    "deploy",
    "want",
    "make",
    "sure",
    "rinkeby",
    "test",
    "net",
    "little",
    "bit",
    "rinky",
    "eath",
    "wallet",
    "let",
    "go",
    "ahead",
    "deploy",
    "confirm",
    "wait",
    "little",
    "bit",
    "pull",
    "log",
    "wait",
    "little",
    "bit",
    "contract",
    "get",
    "deployed",
    "alright",
    "great",
    "looks",
    "like",
    "contract",
    "indeed",
    "deployed",
    "scroll",
    "see",
    "functionality",
    "minimum",
    "usd",
    "going",
    "50",
    "18",
    "zeros",
    "units",
    "aetherium",
    "owner",
    "contract",
    "set",
    "address",
    "instant",
    "deployed",
    "contract",
    "deployed",
    "calling",
    "constructor",
    "function",
    "address",
    "0x",
    "106",
    "x",
    "going",
    "address",
    "meta",
    "mask",
    "address",
    "course",
    "going",
    "little",
    "bit",
    "different",
    "mine",
    "funders",
    "array",
    "course",
    "going",
    "blank",
    "address",
    "array",
    "also",
    "going",
    "blank",
    "two",
    "functions",
    "use",
    "modify",
    "state",
    "blockchain",
    "withdraw",
    "going",
    "orange",
    "paying",
    "aetherium",
    "actually",
    "gaining",
    "aetherium",
    "whatever",
    "native",
    "blockchain",
    "currency",
    "fund",
    "going",
    "read",
    "fun",
    "payable",
    "function",
    "going",
    "sending",
    "aetherium",
    "sending",
    "whatever",
    "native",
    "blockchain",
    "currency",
    "working",
    "let",
    "go",
    "ahead",
    "see",
    "works",
    "first",
    "let",
    "go",
    "ahead",
    "fund",
    "contract",
    "funding",
    "got",
    "little",
    "bit",
    "math",
    "right",
    "since",
    "price",
    "eath",
    "around",
    "looking",
    "50",
    "minimum",
    "50",
    "divided",
    "3000",
    "divided",
    "50",
    "50",
    "divided",
    "know",
    "around",
    "aetherium",
    "enough",
    "contract",
    "work",
    "aetherium",
    "much",
    "way",
    "copy",
    "paste",
    "hit",
    "fund",
    "actually",
    "pass",
    "indeed",
    "see",
    "meta",
    "masks",
    "pop",
    "go",
    "ahead",
    "confirm",
    "transaction",
    "goes",
    "able",
    "see",
    "contract",
    "ether",
    "scan",
    "funds",
    "add",
    "way",
    "add",
    "value",
    "fund",
    "say",
    "gas",
    "estimation",
    "failed",
    "sending",
    "enough",
    "fact",
    "even",
    "see",
    "execution",
    "reverted",
    "send",
    "enough",
    "absolutely",
    "send",
    "transaction",
    "however",
    "going",
    "fail",
    "great",
    "transaction",
    "gone",
    "go",
    "rink",
    "ether",
    "scan",
    "wait",
    "little",
    "bit",
    "finish",
    "indexing",
    "rinkeby",
    "ether",
    "scan",
    "see",
    "transaction",
    "actually",
    "went",
    "funding",
    "actually",
    "see",
    "lot",
    "different",
    "details",
    "going",
    "transaction",
    "well",
    "scroll",
    "see",
    "information",
    "us",
    "calling",
    "fun",
    "function",
    "gas",
    "limit",
    "gas",
    "gas",
    "fees",
    "gas",
    "price",
    "see",
    "input",
    "data",
    "well",
    "see",
    "called",
    "fund",
    "function",
    "learn",
    "input",
    "data",
    "later",
    "go",
    "contract",
    "deployed",
    "see",
    "two",
    "transactions",
    "see",
    "contract",
    "created",
    "transaction",
    "also",
    "see",
    "called",
    "font",
    "method",
    "look",
    "balance",
    "contract",
    "ether",
    "makes",
    "sense",
    "since",
    "sent",
    "put",
    "eath",
    "terms",
    "way",
    "back",
    "value",
    "section",
    "call",
    "font",
    "transaction",
    "goes",
    "see",
    "number",
    "go",
    "wait",
    "brief",
    "delay",
    "indeed",
    "see",
    "balance",
    "gone",
    "exactly",
    "expect",
    "awesome",
    "funding",
    "mechanism",
    "working",
    "correctly",
    "go",
    "array",
    "mapping",
    "address",
    "array",
    "paste",
    "address",
    "see",
    "phone",
    "number",
    "show",
    "go",
    "funders",
    "zero",
    "see",
    "address",
    "go",
    "funders",
    "one",
    "also",
    "see",
    "address",
    "see",
    "see",
    "call",
    "going",
    "go",
    "funders",
    "log",
    "actually",
    "see",
    "get",
    "error",
    "optimization",
    "could",
    "make",
    "contract",
    "future",
    "check",
    "see",
    "address",
    "already",
    "funders",
    "array",
    "add",
    "already",
    "let",
    "go",
    "ahead",
    "try",
    "call",
    "withdrawal",
    "function",
    "let",
    "try",
    "call",
    "different",
    "address",
    "address",
    "originally",
    "deployed",
    "contract",
    "scroll",
    "way",
    "top",
    "going",
    "go",
    "metamask",
    "going",
    "switch",
    "second",
    "account",
    "hit",
    "connect",
    "remixes",
    "updated",
    "new",
    "account",
    "see",
    "switch",
    "back",
    "account",
    "one",
    "switches",
    "back",
    "account",
    "one",
    "long",
    "connected",
    "see",
    "accounts",
    "connected",
    "applications",
    "clicking",
    "connected",
    "button",
    "see",
    "ones",
    "connected",
    "ever",
    "want",
    "disconnect",
    "account",
    "click",
    "three",
    "little",
    "dots",
    "disconnect",
    "account",
    "see",
    "account",
    "connected",
    "however",
    "count",
    "two",
    "connected",
    "let",
    "go",
    "back",
    "account",
    "one",
    "connect",
    "account",
    "one",
    "connected",
    "switch",
    "account",
    "two",
    "let",
    "switch",
    "account",
    "two",
    "account",
    "two",
    "owner",
    "contract",
    "scroll",
    "owner",
    "see",
    "owner",
    "0x",
    "1066",
    "something",
    "something",
    "account",
    "two",
    "0x",
    "something",
    "something",
    "awesome",
    "think",
    "happen",
    "hit",
    "withdraw",
    "well",
    "modifier",
    "owner",
    "kick",
    "get",
    "notified",
    "send",
    "transaction",
    "get",
    "error",
    "sender",
    "owner",
    "let",
    "try",
    "ah",
    "gas",
    "estimation",
    "failed",
    "get",
    "error",
    "sender",
    "owner",
    "perfect",
    "exactly",
    "want",
    "could",
    "absolutely",
    "send",
    "transaction",
    "wanted",
    "would",
    "waste",
    "gas",
    "transaction",
    "going",
    "fail",
    "however",
    "switch",
    "back",
    "account",
    "one",
    "hit",
    "withdraw",
    "meta",
    "mask",
    "pop",
    "enabling",
    "us",
    "confirm",
    "withdraw",
    "ether",
    "contract",
    "address",
    "look",
    "contract",
    "address",
    "ether",
    "scan",
    "brief",
    "delay",
    "see",
    "balance",
    "go",
    "back",
    "zero",
    "see",
    "wallet",
    "balance",
    "go",
    "back",
    "plus",
    "brief",
    "delay",
    "see",
    "balance",
    "indeed",
    "back",
    "zero",
    "contract",
    "address",
    "amount",
    "wallet",
    "address",
    "funding",
    "back",
    "zero",
    "try",
    "check",
    "address",
    "funders",
    "index",
    "zero",
    "get",
    "called",
    "funders",
    "fund",
    "errored",
    "execution",
    "reverted",
    "completed",
    "basics",
    "section",
    "wanted",
    "go",
    "incredibly",
    "proud",
    "getting",
    "far",
    "deployed",
    "really",
    "advanced",
    "smart",
    "contract",
    "using",
    "library",
    "chainlink",
    "contracts",
    "build",
    "powerful",
    "applications",
    "planet",
    "learned",
    "use",
    "library",
    "type",
    "want",
    "smart",
    "contracts",
    "learned",
    "multiplication",
    "units",
    "measure",
    "solidity",
    "smart",
    "contracts",
    "learned",
    "mappings",
    "arrays",
    "constructor",
    "learned",
    "send",
    "money",
    "learned",
    "loops",
    "learned",
    "different",
    "ways",
    "actually",
    "send",
    "money",
    "least",
    "low",
    "level",
    "learned",
    "modifiers",
    "section",
    "one",
    "tougher",
    "sections",
    "course",
    "completed",
    "incredibly",
    "excited",
    "going",
    "go",
    "code",
    "going",
    "make",
    "number",
    "tweaks",
    "section",
    "going",
    "little",
    "bit",
    "advanced",
    "solidity",
    "get",
    "little",
    "bit",
    "lost",
    "sweat",
    "much",
    "feel",
    "free",
    "try",
    "stuff",
    "future",
    "going",
    "modify",
    "contract",
    "make",
    "little",
    "bit",
    "professional",
    "going",
    "end",
    "end",
    "amazing",
    "going",
    "little",
    "bit",
    "better",
    "see",
    "minute",
    "first",
    "thing",
    "going",
    "looking",
    "going",
    "look",
    "variables",
    "particular",
    "owner",
    "minimum",
    "usd",
    "owner",
    "gets",
    "set",
    "one",
    "time",
    "contract",
    "never",
    "changes",
    "minimum",
    "usd",
    "gets",
    "set",
    "one",
    "time",
    "even",
    "outside",
    "constructor",
    "variables",
    "get",
    "set",
    "one",
    "time",
    "actually",
    "use",
    "tools",
    "solidity",
    "make",
    "gas",
    "efficient",
    "let",
    "compile",
    "funmi",
    "contract",
    "deploy",
    "javascript",
    "virtual",
    "machine",
    "remember",
    "go",
    "ahead",
    "deploy",
    "right",
    "however",
    "funding",
    "withdrawing",
    "money",
    "stuff",
    "going",
    "work",
    "chain",
    "link",
    "network",
    "javascript",
    "vm",
    "going",
    "work",
    "well",
    "gon",
    "na",
    "right",
    "really",
    "care",
    "much",
    "care",
    "care",
    "much",
    "gas",
    "costs",
    "actually",
    "send",
    "care",
    "much",
    "gas",
    "costs",
    "create",
    "right",
    "creating",
    "contract",
    "costs",
    "gas",
    "going",
    "add",
    "couple",
    "tricks",
    "right",
    "bring",
    "number",
    "going",
    "add",
    "stuff",
    "back",
    "bid",
    "bring",
    "back",
    "going",
    "learn",
    "tricks",
    "bring",
    "number",
    "two",
    "tricks",
    "going",
    "learn",
    "constant",
    "keyword",
    "immutable",
    "keyword",
    "solidity",
    "two",
    "keywords",
    "make",
    "variables",
    "ca",
    "changed",
    "keywords",
    "constant",
    "immutable",
    "learn",
    "solidity",
    "documentation",
    "assign",
    "variable",
    "outside",
    "function",
    "never",
    "change",
    "assigned",
    "compile",
    "time",
    "go",
    "ahead",
    "add",
    "constant",
    "keyword",
    "learn",
    "later",
    "storage",
    "add",
    "constant",
    "keyword",
    "minimum",
    "usd",
    "longer",
    "takes",
    "storage",
    "spot",
    "much",
    "easier",
    "read",
    "recompile",
    "deploy",
    "new",
    "contract",
    "let",
    "see",
    "saved",
    "gas",
    "look",
    "transaction",
    "logs",
    "grab",
    "transaction",
    "cost",
    "much",
    "cost",
    "deploy",
    "let",
    "compare",
    "much",
    "well",
    "saved",
    "almost",
    "gas",
    "almost",
    "much",
    "gas",
    "cost",
    "send",
    "aetherium",
    "typically",
    "constant",
    "variables",
    "different",
    "naming",
    "convention",
    "typically",
    "want",
    "caps",
    "like",
    "min",
    "imaam",
    "underscore",
    "cio",
    "caps",
    "underscores",
    "let",
    "find",
    "minimum",
    "use",
    "replace",
    "caps",
    "well",
    "interaction",
    "know",
    "variable",
    "constant",
    "variable",
    "much",
    "cheaper",
    "read",
    "go",
    "ahead",
    "compile",
    "redeploy",
    "funmi",
    "contract",
    "even",
    "though",
    "view",
    "function",
    "remember",
    "view",
    "functions",
    "gas",
    "costs",
    "called",
    "contract",
    "constant",
    "variable",
    "see",
    "execution",
    "cost",
    "variable",
    "gas",
    "let",
    "put",
    "little",
    "note",
    "rather",
    "nathan",
    "remove",
    "constant",
    "variable",
    "delete",
    "contract",
    "redeploy",
    "like",
    "funmi",
    "hit",
    "minimum",
    "ust",
    "see",
    "much",
    "gas",
    "cost",
    "constant",
    "variable",
    "see",
    "gas",
    "cost",
    "indeed",
    "go",
    "chains",
    "much",
    "cheaper",
    "gas",
    "difference",
    "probably",
    "wo",
    "make",
    "much",
    "difference",
    "expensive",
    "chains",
    "like",
    "aetherium",
    "going",
    "make",
    "big",
    "difference",
    "example",
    "aetherium",
    "actually",
    "see",
    "current",
    "gas",
    "prices",
    "aetherium",
    "see",
    "current",
    "gas",
    "price",
    "aetherium",
    "141",
    "way",
    "go",
    "converter",
    "way",
    "way",
    "copy",
    "way",
    "price",
    "times",
    "get",
    "gas",
    "price",
    "calling",
    "minimum",
    "usd",
    "number",
    "put",
    "back",
    "aetherium",
    "uniconverter",
    "see",
    "cost",
    "much",
    "gas",
    "times",
    "approximate",
    "current",
    "price",
    "aetherium",
    "around",
    "calling",
    "minimum",
    "use",
    "constant",
    "going",
    "cost",
    "9",
    "inside",
    "nonconstant",
    "going",
    "cost",
    "almost",
    "entire",
    "dollar",
    "see",
    "little",
    "gas",
    "optimization",
    "tricks",
    "going",
    "make",
    "life",
    "lot",
    "better",
    "let",
    "keep",
    "constant",
    "keyword",
    "learn",
    "constant",
    "storage",
    "later",
    "sections",
    "course",
    "getting",
    "started",
    "course",
    "slip",
    "struggle",
    "worry",
    "making",
    "contracts",
    "gas",
    "efficient",
    "possible",
    "beginning",
    "especially",
    "right",
    "write",
    "contracts",
    "best",
    "get",
    "really",
    "good",
    "gas",
    "get",
    "much",
    "later",
    "course",
    "much",
    "advanced",
    "solidity",
    "start",
    "going",
    "back",
    "working",
    "gas",
    "optimizations",
    "let",
    "gas",
    "optimizations",
    "hold",
    "back",
    "start",
    "stressing",
    "let",
    "go",
    "worry",
    "write",
    "code",
    "best",
    "long",
    "story",
    "short",
    "stress",
    "gas",
    "optimizations",
    "right",
    "another",
    "variable",
    "set",
    "one",
    "time",
    "going",
    "owner",
    "variable",
    "owner",
    "equals",
    "message",
    "dot",
    "sender",
    "set",
    "one",
    "time",
    "constructor",
    "variables",
    "set",
    "one",
    "time",
    "outside",
    "line",
    "declared",
    "set",
    "example",
    "constructor",
    "mark",
    "mutable",
    "typically",
    "good",
    "convention",
    "marking",
    "immutable",
    "variables",
    "going",
    "underscore",
    "know",
    "immutable",
    "variables",
    "similar",
    "gas",
    "savings",
    "constant",
    "keyword",
    "owner",
    "course",
    "variable",
    "ca",
    "set",
    "line",
    "inside",
    "global",
    "scope",
    "function",
    "going",
    "however",
    "inside",
    "functions",
    "inside",
    "global",
    "scope",
    "going",
    "message",
    "sender",
    "going",
    "message",
    "dot",
    "sender",
    "inside",
    "function",
    "inside",
    "might",
    "say",
    "owner",
    "equals",
    "message",
    "dot",
    "sender",
    "course",
    "scroll",
    "change",
    "require",
    "owner",
    "equals",
    "owner",
    "compile",
    "deploy",
    "see",
    "much",
    "gas",
    "see",
    "much",
    "gas",
    "calling",
    "owner",
    "going",
    "immutable",
    "notice",
    "get",
    "go",
    "ahead",
    "copy",
    "put",
    "right",
    "say",
    "immutable",
    "remove",
    "immutable",
    "keyword",
    "let",
    "close",
    "redeploy",
    "scroll",
    "owner",
    "screw",
    "logs",
    "go",
    "call",
    "scroll",
    "see",
    "execution",
    "cost",
    "much",
    "backslash",
    "seven",
    "yes",
    "non",
    "immutable",
    "want",
    "keep",
    "tricks",
    "mind",
    "comes",
    "storing",
    "variables",
    "reason",
    "two",
    "save",
    "gas",
    "instead",
    "storing",
    "variables",
    "inside",
    "storage",
    "slot",
    "actually",
    "store",
    "directly",
    "bytecode",
    "contract",
    "like",
    "said",
    "worry",
    "much",
    "later",
    "course",
    "teach",
    "storage",
    "lot",
    "low",
    "level",
    "stuff",
    "comes",
    "contracts",
    "know",
    "exist",
    "nice",
    "gas",
    "savers",
    "setting",
    "variables",
    "alright",
    "great",
    "made",
    "contract",
    "little",
    "bit",
    "gas",
    "efficient",
    "little",
    "gas",
    "efficiency",
    "improvements",
    "going",
    "concept",
    "sprinkled",
    "throughout",
    "course",
    "get",
    "advanced",
    "section",
    "going",
    "break",
    "exactly",
    "going",
    "gas",
    "efficiencies",
    "exist",
    "going",
    "behind",
    "scenes",
    "gas",
    "efficiencies",
    "occur",
    "little",
    "bit",
    "weeds",
    "going",
    "gloss",
    "right",
    "confusing",
    "worry",
    "would",
    "let",
    "gas",
    "efficiencies",
    "thing",
    "slow",
    "awesome",
    "two",
    "gas",
    "optimizations",
    "else",
    "make",
    "contract",
    "little",
    "bit",
    "gas",
    "efficient",
    "well",
    "one",
    "ways",
    "make",
    "gas",
    "efficient",
    "updating",
    "requires",
    "right",
    "require",
    "statement",
    "actually",
    "store",
    "sender",
    "owner",
    "string",
    "array",
    "every",
    "single",
    "one",
    "characters",
    "errorlog",
    "needs",
    "get",
    "stored",
    "individually",
    "string",
    "may",
    "seem",
    "big",
    "lot",
    "bigger",
    "alternative",
    "zero",
    "point",
    "solidity",
    "actually",
    "custom",
    "errors",
    "reverts",
    "declare",
    "top",
    "use",
    "ifs",
    "instead",
    "require",
    "add",
    "revert",
    "statements",
    "ends",
    "saving",
    "lot",
    "gas",
    "since",
    "call",
    "error",
    "code",
    "opposed",
    "calling",
    "entire",
    "string",
    "associated",
    "air",
    "example",
    "require",
    "actually",
    "requires",
    "well",
    "could",
    "instead",
    "require",
    "could",
    "create",
    "custom",
    "error",
    "top",
    "could",
    "could",
    "say",
    "error",
    "owner",
    "notice",
    "actually",
    "outside",
    "contract",
    "take",
    "error",
    "owner",
    "scroll",
    "owner",
    "instead",
    "require",
    "statement",
    "say",
    "message",
    "dot",
    "sender",
    "owner",
    "going",
    "go",
    "ahead",
    "revert",
    "non",
    "owner",
    "error",
    "ends",
    "saving",
    "us",
    "lot",
    "gas",
    "since",
    "store",
    "emit",
    "long",
    "string",
    "lot",
    "code",
    "today",
    "still",
    "see",
    "require",
    "lot",
    "places",
    "custom",
    "errors",
    "pretty",
    "new",
    "solidity",
    "want",
    "get",
    "used",
    "writing",
    "ways",
    "would",
    "surprised",
    "future",
    "syntax",
    "errors",
    "looks",
    "like",
    "readable",
    "want",
    "gas",
    "efficient",
    "way",
    "required",
    "use",
    "something",
    "like",
    "could",
    "update",
    "requires",
    "customers",
    "going",
    "leave",
    "show",
    "differences",
    "revert",
    "keyword",
    "exact",
    "thing",
    "required",
    "us",
    "without",
    "conditional",
    "beforehand",
    "actually",
    "go",
    "ahead",
    "revert",
    "transaction",
    "function",
    "call",
    "middle",
    "function",
    "call",
    "let",
    "look",
    "one",
    "way",
    "improve",
    "contract",
    "sometimes",
    "people",
    "try",
    "interact",
    "contract",
    "takes",
    "aetherium",
    "native",
    "blockchain",
    "token",
    "without",
    "actually",
    "going",
    "required",
    "function",
    "calls",
    "needed",
    "example",
    "javascript",
    "evm",
    "could",
    "actually",
    "try",
    "send",
    "contract",
    "money",
    "without",
    "calling",
    "fund",
    "function",
    "however",
    "would",
    "happen",
    "fund",
    "function",
    "get",
    "triggered",
    "would",
    "get",
    "triggered",
    "would",
    "keep",
    "track",
    "funder",
    "would",
    "person",
    "information",
    "updated",
    "contract",
    "later",
    "want",
    "give",
    "rewards",
    "something",
    "would",
    "know",
    "funders",
    "would",
    "great",
    "people",
    "would",
    "send",
    "contract",
    "money",
    "without",
    "us",
    "ever",
    "knowing",
    "would",
    "able",
    "give",
    "credit",
    "anything",
    "additionally",
    "maybe",
    "called",
    "wrong",
    "function",
    "accident",
    "using",
    "metamask",
    "using",
    "tool",
    "tell",
    "hey",
    "transaction",
    "likely",
    "going",
    "fail",
    "case",
    "happens",
    "someone",
    "sends",
    "contract",
    "ether",
    "without",
    "calling",
    "fun",
    "function",
    "right",
    "send",
    "funmi",
    "contract",
    "ie",
    "would",
    "go",
    "contract",
    "right",
    "contract",
    "would",
    "keep",
    "track",
    "people",
    "actually",
    "way",
    "people",
    "send",
    "money",
    "contract",
    "people",
    "call",
    "function",
    "exist",
    "us",
    "still",
    "trigger",
    "code",
    "two",
    "special",
    "functions",
    "solidity",
    "one",
    "called",
    "receive",
    "one",
    "called",
    "fallback",
    "solidity",
    "actually",
    "number",
    "special",
    "functions",
    "two",
    "special",
    "functions",
    "receive",
    "special",
    "function",
    "fallback",
    "special",
    "function",
    "contract",
    "one",
    "receive",
    "function",
    "declared",
    "using",
    "received",
    "external",
    "payable",
    "without",
    "function",
    "keyword",
    "function",
    "arguments",
    "return",
    "anything",
    "must",
    "external",
    "visibility",
    "payable",
    "state",
    "mutability",
    "actually",
    "mean",
    "look",
    "like",
    "well",
    "let",
    "create",
    "separate",
    "contract",
    "go",
    "ahead",
    "play",
    "going",
    "create",
    "new",
    "file",
    "called",
    "fallback",
    "example",
    "dot",
    "soul",
    "going",
    "add",
    "basic",
    "pieces",
    "spx",
    "license",
    "identifier",
    "mit",
    "pragma",
    "solidity",
    "zero",
    "point",
    "contract",
    "fallback",
    "example",
    "like",
    "feel",
    "free",
    "pause",
    "video",
    "catch",
    "point",
    "let",
    "recreate",
    "fallback",
    "contract",
    "let",
    "create",
    "variable",
    "go",
    "ahead",
    "try",
    "test",
    "function",
    "create",
    "un",
    "256",
    "public",
    "result",
    "variable",
    "let",
    "create",
    "receive",
    "function",
    "say",
    "receive",
    "going",
    "external",
    "payable",
    "function",
    "add",
    "function",
    "keyword",
    "receive",
    "since",
    "solidity",
    "knows",
    "receive",
    "special",
    "function",
    "whenever",
    "send",
    "aetherium",
    "make",
    "transaction",
    "contract",
    "long",
    "data",
    "associated",
    "transaction",
    "receive",
    "function",
    "get",
    "triggered",
    "say",
    "result",
    "equals",
    "one",
    "let",
    "go",
    "ahead",
    "test",
    "javascript",
    "virtual",
    "machine",
    "compile",
    "gon",
    "na",
    "go",
    "ahead",
    "compile",
    "go",
    "deploy",
    "java",
    "virtual",
    "machine",
    "going",
    "deploy",
    "fallback",
    "example",
    "going",
    "see",
    "result",
    "initialized",
    "since",
    "set",
    "anything",
    "result",
    "result",
    "course",
    "initialized",
    "zero",
    "send",
    "contract",
    "aetherium",
    "well",
    "receive",
    "would",
    "go",
    "ahead",
    "triggered",
    "actually",
    "send",
    "contract",
    "material",
    "directly",
    "working",
    "low",
    "level",
    "interactions",
    "worry",
    "call",
    "data",
    "means",
    "know",
    "area",
    "way",
    "send",
    "work",
    "different",
    "functions",
    "add",
    "parameters",
    "transaction",
    "going",
    "adjusting",
    "variables",
    "keep",
    "called",
    "data",
    "blank",
    "metamask",
    "hitting",
    "send",
    "choosing",
    "contract",
    "address",
    "ca",
    "actually",
    "use",
    "metamask",
    "since",
    "virtual",
    "machine",
    "one",
    "networks",
    "working",
    "example",
    "change",
    "value",
    "one",
    "way",
    "keep",
    "everything",
    "blank",
    "go",
    "ahead",
    "hit",
    "transaction",
    "button",
    "going",
    "hitting",
    "send",
    "button",
    "sending",
    "one",
    "way",
    "think",
    "happen",
    "well",
    "let",
    "try",
    "see",
    "log",
    "area",
    "indeed",
    "send",
    "transaction",
    "look",
    "description",
    "even",
    "see",
    "says",
    "fall",
    "back",
    "example",
    "dot",
    "receive",
    "looks",
    "like",
    "called",
    "received",
    "function",
    "updated",
    "result",
    "one",
    "hit",
    "result",
    "indeed",
    "see",
    "result",
    "updated",
    "value",
    "one",
    "well",
    "let",
    "go",
    "ahead",
    "delete",
    "let",
    "deploy",
    "contract",
    "time",
    "let",
    "value",
    "zero",
    "receive",
    "get",
    "triggered",
    "time",
    "let",
    "pull",
    "let",
    "hit",
    "transact",
    "let",
    "leave",
    "call",
    "data",
    "blank",
    "leave",
    "value",
    "zero",
    "sent",
    "zero",
    "aetherium",
    "contract",
    "let",
    "hit",
    "transact",
    "looks",
    "like",
    "went",
    "think",
    "result",
    "going",
    "one",
    "zero",
    "thought",
    "one",
    "correct",
    "receive",
    "function",
    "gets",
    "triggered",
    "anytime",
    "send",
    "transaction",
    "contract",
    "specify",
    "function",
    "keep",
    "call",
    "data",
    "blank",
    "working",
    "contract",
    "like",
    "funmi",
    "example",
    "call",
    "one",
    "functions",
    "actually",
    "populating",
    "call",
    "data",
    "bit",
    "certain",
    "data",
    "points",
    "one",
    "functions",
    "send",
    "transaction",
    "add",
    "data",
    "could",
    "actually",
    "call",
    "one",
    "functions",
    "let",
    "try",
    "let",
    "delete",
    "contract",
    "redeploy",
    "open",
    "result",
    "currently",
    "zero",
    "receive",
    "like",
    "said",
    "triggered",
    "call",
    "data",
    "blank",
    "time",
    "call",
    "data",
    "transaction",
    "think",
    "receive",
    "triggered",
    "time",
    "hit",
    "transact",
    "remix",
    "actually",
    "get",
    "pop",
    "saying",
    "fallback",
    "function",
    "defined",
    "whenever",
    "data",
    "sent",
    "transaction",
    "solidity",
    "says",
    "oh",
    "well",
    "since",
    "sending",
    "data",
    "looking",
    "receive",
    "looking",
    "function",
    "let",
    "look",
    "function",
    "hmm",
    "see",
    "function",
    "matches",
    "0x",
    "going",
    "look",
    "fallback",
    "function",
    "remix",
    "smart",
    "enough",
    "know",
    "fallback",
    "function",
    "second",
    "special",
    "function",
    "solidity",
    "called",
    "fallback",
    "function",
    "similar",
    "receive",
    "function",
    "except",
    "fact",
    "work",
    "even",
    "data",
    "sent",
    "along",
    "transaction",
    "fallback",
    "look",
    "something",
    "like",
    "callback",
    "external",
    "payable",
    "result",
    "equals",
    "fallback",
    "another",
    "one",
    "functions",
    "going",
    "put",
    "function",
    "selector",
    "solidity",
    "expecting",
    "actually",
    "already",
    "familiar",
    "one",
    "special",
    "function",
    "go",
    "back",
    "funmi",
    "constructor",
    "example",
    "another",
    "type",
    "special",
    "function",
    "function",
    "keyword",
    "solidity",
    "knows",
    "constructor",
    "immediately",
    "called",
    "deploy",
    "contract",
    "fallback",
    "function",
    "let",
    "go",
    "ahead",
    "compile",
    "let",
    "delete",
    "old",
    "contract",
    "let",
    "go",
    "ahead",
    "deploy",
    "new",
    "contract",
    "like",
    "hit",
    "result",
    "indeed",
    "see",
    "set",
    "zero",
    "add",
    "0x",
    "00",
    "send",
    "hit",
    "transact",
    "equivalent",
    "calling",
    "contract",
    "without",
    "valid",
    "function",
    "contract",
    "goes",
    "huh",
    "recognize",
    "trying",
    "tell",
    "going",
    "refer",
    "fallback",
    "hit",
    "result",
    "see",
    "updated",
    "two",
    "take",
    "away",
    "solidity",
    "go",
    "hmm",
    "looks",
    "like",
    "trying",
    "send",
    "aetherium",
    "call",
    "contract",
    "without",
    "specifying",
    "want",
    "well",
    "receipt",
    "function",
    "gon",
    "na",
    "go",
    "ahead",
    "forward",
    "call",
    "transact",
    "hit",
    "result",
    "see",
    "updates",
    "back",
    "one",
    "add",
    "data",
    "hit",
    "transact",
    "see",
    "updates",
    "data",
    "updates",
    "one",
    "slowly",
    "example",
    "org",
    "wonderful",
    "little",
    "chart",
    "use",
    "figure",
    "whether",
    "receive",
    "going",
    "get",
    "triggered",
    "fallback",
    "going",
    "get",
    "triggered",
    "empty",
    "receive",
    "function",
    "call",
    "receive",
    "function",
    "data",
    "receive",
    "function",
    "go",
    "fallback",
    "function",
    "fallback",
    "function",
    "might",
    "might",
    "air",
    "lot",
    "really",
    "fantastic",
    "information",
    "apply",
    "fund",
    "mi",
    "contract",
    "funmi",
    "add",
    "fallback",
    "receive",
    "functions",
    "case",
    "somebody",
    "actually",
    "sends",
    "us",
    "contract",
    "money",
    "instead",
    "calling",
    "fund",
    "function",
    "correctly",
    "let",
    "add",
    "receive",
    "function",
    "somebody",
    "accidentally",
    "sends",
    "money",
    "still",
    "process",
    "transaction",
    "say",
    "receive",
    "going",
    "external",
    "payable",
    "receive",
    "function",
    "call",
    "fund",
    "thing",
    "fallback",
    "function",
    "fallback",
    "external",
    "payable",
    "automatically",
    "call",
    "fund",
    "somebody",
    "accidentally",
    "sends",
    "us",
    "money",
    "without",
    "calling",
    "fund",
    "function",
    "still",
    "automatically",
    "route",
    "fund",
    "function",
    "means",
    "somebody",
    "send",
    "us",
    "enough",
    "funding",
    "transaction",
    "still",
    "get",
    "reverted",
    "let",
    "go",
    "ahead",
    "let",
    "switch",
    "rink",
    "b",
    "test",
    "real",
    "test",
    "net",
    "amman",
    "rink",
    "b",
    "metamask",
    "let",
    "switch",
    "injected",
    "web",
    "three",
    "scroll",
    "choose",
    "funmi",
    "contract",
    "go",
    "ahead",
    "deploy",
    "metamask",
    "pops",
    "gon",
    "na",
    "go",
    "ahead",
    "confirm",
    "transaction",
    "see",
    "funmi",
    "contract",
    "right",
    "see",
    "owner",
    "see",
    "owner",
    "see",
    "minimum",
    "usd",
    "see",
    "course",
    "blank",
    "contract",
    "nothing",
    "funded",
    "copy",
    "address",
    "go",
    "rink",
    "ether",
    "scan",
    "paste",
    "address",
    "see",
    "ether",
    "transaction",
    "associated",
    "contract",
    "creation",
    "saw",
    "happened",
    "hit",
    "fun",
    "function",
    "contract",
    "updated",
    "new",
    "balance",
    "funder",
    "added",
    "array",
    "let",
    "see",
    "happens",
    "directly",
    "send",
    "contract",
    "money",
    "without",
    "calling",
    "fund",
    "function",
    "right",
    "receive",
    "function",
    "pick",
    "kick",
    "transaction",
    "font",
    "let",
    "copy",
    "address",
    "go",
    "meta",
    "mask",
    "hit",
    "send",
    "paste",
    "address",
    "eath",
    "minimum",
    "amount",
    "usd",
    "hit",
    "next",
    "go",
    "ahead",
    "confirm",
    "slight",
    "delay",
    "right",
    "see",
    "transaction",
    "called",
    "fund",
    "function",
    "transaction",
    "gone",
    "brief",
    "delay",
    "waiting",
    "ethers",
    "update",
    "indeed",
    "see",
    "balance",
    "updated",
    "course",
    "makes",
    "sense",
    "see",
    "transactions",
    "list",
    "see",
    "actually",
    "went",
    "transfer",
    "instead",
    "us",
    "calling",
    "fund",
    "function",
    "let",
    "go",
    "ahead",
    "remix",
    "see",
    "funders",
    "updated",
    "looks",
    "like",
    "zero",
    "position",
    "funders",
    "address",
    "take",
    "address",
    "pop",
    "address",
    "amount",
    "funded",
    "see",
    "exactly",
    "much",
    "funded",
    "means",
    "since",
    "added",
    "receive",
    "function",
    "automatically",
    "call",
    "fun",
    "function",
    "awesome",
    "work",
    "able",
    "add",
    "receive",
    "function",
    "help",
    "people",
    "accidentally",
    "call",
    "wrong",
    "function",
    "accidentally",
    "send",
    "contract",
    "money",
    "instead",
    "correctly",
    "calling",
    "fun",
    "function",
    "directly",
    "called",
    "fun",
    "function",
    "would",
    "cost",
    "little",
    "bit",
    "less",
    "gas",
    "least",
    "time",
    "gon",
    "na",
    "get",
    "credit",
    "add",
    "funders",
    "array",
    "sent",
    "funding",
    "contract",
    "money",
    "even",
    "learned",
    "advanced",
    "sections",
    "solidity",
    "going",
    "last",
    "time",
    "start",
    "projects",
    "remix",
    "going",
    "moving",
    "code",
    "editor",
    "get",
    "even",
    "advanced",
    "solidity",
    "setups",
    "part",
    "gone",
    "vast",
    "majority",
    "solidity",
    "basics",
    "number",
    "things",
    "still",
    "learned",
    "yet",
    "reason",
    "gotten",
    "get",
    "advanced",
    "understanding",
    "real",
    "use",
    "really",
    "make",
    "much",
    "sense",
    "little",
    "bit",
    "later",
    "things",
    "going",
    "go",
    "itams",
    "events",
    "try",
    "catch",
    "function",
    "selectors",
    "abi",
    "encoding",
    "hashing",
    "slash",
    "slash",
    "assembly",
    "however",
    "gotten",
    "far",
    "probably",
    "read",
    "solidity",
    "code",
    "understand",
    "going",
    "absolutely",
    "fantastic",
    "give",
    "huge",
    "round",
    "applause",
    "getting",
    "far",
    "let",
    "quick",
    "summary",
    "advanced",
    "section",
    "make",
    "sure",
    "understand",
    "learned",
    "solidity",
    "couple",
    "special",
    "functions",
    "receive",
    "fallback",
    "constructor",
    "functions",
    "need",
    "function",
    "keyword",
    "instead",
    "called",
    "like",
    "receive",
    "fallback",
    "two",
    "special",
    "functions",
    "data",
    "sent",
    "transaction",
    "function",
    "specified",
    "transaction",
    "default",
    "fallback",
    "function",
    "fallback",
    "function",
    "exists",
    "data",
    "empty",
    "receive",
    "function",
    "call",
    "receive",
    "function",
    "couple",
    "keywords",
    "help",
    "us",
    "save",
    "gas",
    "long",
    "run",
    "keywords",
    "going",
    "constant",
    "immutable",
    "constant",
    "immutable",
    "variables",
    "declared",
    "updated",
    "say",
    "minimum",
    "usd",
    "50",
    "times",
    "minimum",
    "usd",
    "never",
    "changed",
    "helps",
    "us",
    "save",
    "gas",
    "immutable",
    "also",
    "save",
    "gas",
    "similar",
    "constant",
    "however",
    "immutable",
    "variables",
    "declared",
    "one",
    "time",
    "constructor",
    "immutable",
    "variable",
    "declared",
    "ca",
    "changed",
    "later",
    "fact",
    "even",
    "tried",
    "update",
    "immutable",
    "variable",
    "constant",
    "variable",
    "compiled",
    "compiler",
    "would",
    "give",
    "us",
    "error",
    "saying",
    "ca",
    "write",
    "mutable",
    "tried",
    "change",
    "constant",
    "variable",
    "compiler",
    "would",
    "say",
    "hey",
    "ca",
    "assign",
    "constant",
    "variable",
    "sorry",
    "remix",
    "want",
    "send",
    "ether",
    "contract",
    "javascript",
    "virtual",
    "machine",
    "deploy",
    "contract",
    "contract",
    "hit",
    "transact",
    "button",
    "without",
    "call",
    "data",
    "update",
    "value",
    "send",
    "transaction",
    "call",
    "data",
    "blank",
    "trigger",
    "receive",
    "function",
    "exists",
    "data",
    "specify",
    "functions",
    "trigger",
    "fallback",
    "function",
    "awesome",
    "done",
    "fantastically",
    "get",
    "far",
    "section",
    "get",
    "started",
    "actually",
    "moving",
    "hardhead",
    "moving",
    "javascript",
    "understanding",
    "need",
    "let",
    "understand",
    "little",
    "bit",
    "getting",
    "help",
    "running",
    "problems",
    "let",
    "say",
    "funmi",
    "contract",
    "worked",
    "run",
    "error",
    "let",
    "say",
    "example",
    "forgot",
    "payable",
    "keyword",
    "right",
    "go",
    "ahead",
    "compile",
    "compile",
    "fund",
    "scroll",
    "see",
    "obviously",
    "two",
    "errors",
    "right",
    "getting",
    "errors",
    "scroll",
    "see",
    "type",
    "error",
    "message",
    "dot",
    "value",
    "call",
    "value",
    "used",
    "payable",
    "public",
    "functions",
    "make",
    "function",
    "payable",
    "using",
    "internal",
    "function",
    "avoid",
    "error",
    "goes",
    "ahead",
    "gives",
    "line",
    "airing",
    "error",
    "pretty",
    "clear",
    "error",
    "code",
    "pretty",
    "clear",
    "saying",
    "hey",
    "make",
    "function",
    "payable",
    "using",
    "internal",
    "function",
    "avoid",
    "error",
    "right",
    "pretty",
    "easy",
    "add",
    "payable",
    "recompile",
    "good",
    "go",
    "actually",
    "good",
    "example",
    "run",
    "errors",
    "run",
    "errors",
    "first",
    "thing",
    "want",
    "want",
    "try",
    "figure",
    "exactly",
    "going",
    "based",
    "error",
    "says",
    "one",
    "pretty",
    "straightforward",
    "little",
    "bit",
    "obscure",
    "step",
    "one",
    "trying",
    "get",
    "unblocked",
    "trying",
    "tinker",
    "figure",
    "errors",
    "right",
    "maybe",
    "go",
    "okay",
    "make",
    "payable",
    "right",
    "go",
    "save",
    "gives",
    "different",
    "error",
    "saying",
    "hey",
    "know",
    "payable",
    "go",
    "resave",
    "recompile",
    "goes",
    "hey",
    "still",
    "missing",
    "payable",
    "thing",
    "first",
    "step",
    "always",
    "going",
    "trying",
    "tinker",
    "figure",
    "course",
    "want",
    "limit",
    "tinkering",
    "slash",
    "triaging",
    "20",
    "minutes",
    "take",
    "20",
    "minutes",
    "tinker",
    "triage",
    "move",
    "next",
    "step",
    "also",
    "want",
    "take",
    "least",
    "15",
    "minutes",
    "100",
    "sure",
    "exhausted",
    "options",
    "completely",
    "ideas",
    "typically",
    "try",
    "tinker",
    "try",
    "stuff",
    "15",
    "minutes",
    "15",
    "minutes",
    "saying",
    "hey",
    "100",
    "certain",
    "tried",
    "everything",
    "think",
    "move",
    "next",
    "step",
    "step",
    "one",
    "run",
    "errors",
    "always",
    "going",
    "tinker",
    "try",
    "pinpoint",
    "exactly",
    "going",
    "try",
    "pinpoint",
    "exactly",
    "going",
    "wrong",
    "step",
    "two",
    "let",
    "say",
    "tinkered",
    "tried",
    "payable",
    "place",
    "could",
    "figure",
    "error",
    "debug",
    "step",
    "two",
    "always",
    "going",
    "google",
    "exact",
    "error",
    "see",
    "learn",
    "zoom",
    "little",
    "bit",
    "roll",
    "mouse",
    "grab",
    "copy",
    "quotes",
    "around",
    "exactly",
    "google",
    "search",
    "exact",
    "error",
    "take",
    "time",
    "going",
    "google",
    "going",
    "stack",
    "overflow",
    "going",
    "stack",
    "exchange",
    "eath",
    "look",
    "see",
    "somebody",
    "asked",
    "question",
    "already",
    "looks",
    "like",
    "looks",
    "like",
    "somebody",
    "type",
    "error",
    "missed",
    "value",
    "call",
    "though",
    "used",
    "paypal",
    "public",
    "functions",
    "scroll",
    "see",
    "somebody",
    "ran",
    "exactly",
    "went",
    "ahead",
    "solved",
    "go",
    "realized",
    "mistake",
    "needed",
    "add",
    "paypal",
    "keyword",
    "implementation",
    "go",
    "ahead",
    "question",
    "added",
    "payable",
    "hopefully",
    "would",
    "give",
    "insight",
    "say",
    "ah",
    "okay",
    "great",
    "need",
    "come",
    "back",
    "add",
    "payable",
    "let",
    "say",
    "stackoverflow",
    "question",
    "show",
    "right",
    "forum",
    "next",
    "step",
    "one",
    "tinker",
    "step",
    "two",
    "google",
    "exact",
    "error",
    "going",
    "step",
    "class",
    "go",
    "github",
    "repo",
    "discussions",
    "updates",
    "course",
    "specifically",
    "go",
    "github",
    "repo",
    "full",
    "blockchain",
    "solidity",
    "course",
    "jas",
    "look",
    "little",
    "bit",
    "different",
    "get",
    "come",
    "repo",
    "look",
    "chronological",
    "update",
    "section",
    "see",
    "update",
    "section",
    "obviously",
    "since",
    "recording",
    "right",
    "update",
    "get",
    "anything",
    "feel",
    "free",
    "jump",
    "discussion",
    "section",
    "ask",
    "question",
    "right",
    "going",
    "community",
    "people",
    "looking",
    "help",
    "looking",
    "make",
    "lot",
    "fun",
    "reason",
    "say",
    "real",
    "world",
    "going",
    "github",
    "repo",
    "working",
    "stuff",
    "outside",
    "course",
    "going",
    "github",
    "repo",
    "instead",
    "real",
    "world",
    "still",
    "going",
    "give",
    "keys",
    "going",
    "give",
    "takes",
    "still",
    "unblock",
    "anything",
    "okay",
    "number",
    "three",
    "going",
    "asked",
    "question",
    "forum",
    "like",
    "stack",
    "exchange",
    "eath",
    "stack",
    "overflow",
    "stack",
    "overflow",
    "question",
    "answering",
    "tech",
    "forum",
    "like",
    "right",
    "ask",
    "tech",
    "questions",
    "answer",
    "well",
    "see",
    "search",
    "issues",
    "show",
    "stack",
    "overflow",
    "general",
    "role",
    "programming",
    "questions",
    "stack",
    "exchange",
    "aetherium",
    "stack",
    "exchange",
    "eath",
    "aetherium",
    "stack",
    "exchange",
    "aetherium",
    "evm",
    "based",
    "question",
    "solidity",
    "code",
    "gon",
    "na",
    "working",
    "whether",
    "polygon",
    "whether",
    "avalanche",
    "whether",
    "whatever",
    "questions",
    "going",
    "valid",
    "ask",
    "want",
    "want",
    "sign",
    "log",
    "ask",
    "format",
    "questions",
    "forms",
    "want",
    "sign",
    "github",
    "want",
    "sign",
    "stack",
    "exchange",
    "want",
    "sign",
    "stack",
    "overflow",
    "participate",
    "forums",
    "fact",
    "already",
    "let",
    "sign",
    "github",
    "right",
    "let",
    "walk",
    "formatting",
    "one",
    "questions",
    "better",
    "format",
    "questions",
    "better",
    "chance",
    "actually",
    "getting",
    "answer",
    "remember",
    "asking",
    "questions",
    "forums",
    "asking",
    "questions",
    "discussion",
    "communities",
    "people",
    "answer",
    "questions",
    "goodness",
    "heart",
    "right",
    "get",
    "response",
    "chance",
    "maybe",
    "nobody",
    "knows",
    "maybe",
    "question",
    "formatted",
    "well",
    "etc",
    "going",
    "learn",
    "ask",
    "really",
    "good",
    "questions",
    "new",
    "blockchain",
    "skip",
    "section",
    "okay",
    "going",
    "piece",
    "going",
    "give",
    "superpower",
    "unblock",
    "coding",
    "issue",
    "run",
    "skip",
    "powerup",
    "sure",
    "follow",
    "along",
    "okay",
    "github",
    "already",
    "need",
    "email",
    "get",
    "started",
    "going",
    "go",
    "ahead",
    "sign",
    "made",
    "burner",
    "account",
    "video",
    "gon",
    "na",
    "gon",
    "na",
    "go",
    "ahead",
    "sign",
    "github",
    "enter",
    "email",
    "hit",
    "create",
    "account",
    "going",
    "send",
    "us",
    "email",
    "going",
    "come",
    "back",
    "email",
    "got",
    "launch",
    "code",
    "paste",
    "little",
    "bit",
    "information",
    "going",
    "choose",
    "free",
    "version",
    "fantastic",
    "created",
    "github",
    "profile",
    "back",
    "smart",
    "contract",
    "kid",
    "full",
    "blockchain",
    "solidity",
    "course",
    "jas",
    "going",
    "create",
    "new",
    "discussion",
    "new",
    "thread",
    "want",
    "comment",
    "make",
    "sure",
    "understand",
    "format",
    "ask",
    "questions",
    "okay",
    "general",
    "thread",
    "practicing",
    "question",
    "formatting",
    "oops",
    "let",
    "go",
    "back",
    "first",
    "going",
    "format",
    "question",
    "poorly",
    "two",
    "ways",
    "gon",
    "na",
    "format",
    "really",
    "really",
    "well",
    "first",
    "way",
    "going",
    "format",
    "poorly",
    "giving",
    "enough",
    "information",
    "going",
    "gon",
    "na",
    "copy",
    "issue",
    "going",
    "say",
    "like",
    "hey",
    "trouble",
    "remix",
    "error",
    "someone",
    "help",
    "well",
    "formatted",
    "question",
    "question",
    "nearly",
    "enough",
    "information",
    "helper",
    "idea",
    "person",
    "asking",
    "let",
    "something",
    "else",
    "going",
    "going",
    "copy",
    "entire",
    "contract",
    "fun",
    "read",
    "outsole",
    "paste",
    "go",
    "hi",
    "issues",
    "someone",
    "help",
    "gon",
    "na",
    "head",
    "start",
    "discussion",
    "want",
    "hit",
    "start",
    "discussion",
    "formats",
    "weird",
    "really",
    "enough",
    "information",
    "know",
    "issue",
    "least",
    "one",
    "code",
    "way",
    "actually",
    "debug",
    "little",
    "bit",
    "better",
    "still",
    "good",
    "let",
    "go",
    "ahead",
    "edit",
    "make",
    "even",
    "better",
    "hit",
    "three",
    "dots",
    "hit",
    "edit",
    "use",
    "something",
    "called",
    "markdown",
    "syntax",
    "highly",
    "recommend",
    "learning",
    "little",
    "bit",
    "markdown",
    "basically",
    "syntax",
    "help",
    "make",
    "discussions",
    "github",
    "also",
    "questions",
    "stack",
    "overflow",
    "stack",
    "exchange",
    "lot",
    "easier",
    "going",
    "format",
    "code",
    "adding",
    "three",
    "backticks",
    "start",
    "also",
    "end",
    "code",
    "additionally",
    "next",
    "first",
    "three",
    "backticks",
    "going",
    "type",
    "lid",
    "tells",
    "format",
    "use",
    "solidity",
    "format",
    "code",
    "update",
    "discussion",
    "notice",
    "get",
    "nice",
    "highlighting",
    "becomes",
    "much",
    "much",
    "easier",
    "read",
    "right",
    "way",
    "easier",
    "read",
    "however",
    "still",
    "specific",
    "enough",
    "given",
    "ton",
    "code",
    "given",
    "specific",
    "answer",
    "gon",
    "na",
    "really",
    "hard",
    "somebody",
    "answer",
    "let",
    "make",
    "specific",
    "let",
    "edit",
    "question",
    "let",
    "specify",
    "see",
    "issue",
    "specifically",
    "function",
    "going",
    "copy",
    "function",
    "going",
    "delete",
    "everything",
    "else",
    "code",
    "inside",
    "going",
    "make",
    "really",
    "specific",
    "going",
    "say",
    "function",
    "running",
    "error",
    "going",
    "going",
    "come",
    "back",
    "going",
    "roll",
    "going",
    "copy",
    "could",
    "pull",
    "code",
    "want",
    "going",
    "format",
    "error",
    "like",
    "gon",
    "na",
    "say",
    "someone",
    "tell",
    "going",
    "update",
    "much",
    "much",
    "easier",
    "question",
    "debug",
    "right",
    "minimalistic",
    "code",
    "error",
    "getting",
    "someone",
    "tell",
    "going",
    "obviously",
    "answer",
    "would",
    "add",
    "payable",
    "somebody",
    "would",
    "say",
    "hey",
    "like",
    "need",
    "add",
    "payable",
    "want",
    "practice",
    "formatting",
    "go",
    "ahead",
    "add",
    "comment",
    "formatted",
    "question",
    "understand",
    "actually",
    "formatting",
    "markdown",
    "format",
    "format",
    "gon",
    "na",
    "exact",
    "asking",
    "questions",
    "stack",
    "overflow",
    "stack",
    "exchange",
    "course",
    "go",
    "ahead",
    "practice",
    "want",
    "create",
    "new",
    "discussions",
    "feel",
    "free",
    "create",
    "new",
    "discussions",
    "want",
    "use",
    "stack",
    "overflow",
    "stack",
    "exchange",
    "eath",
    "actually",
    "highly",
    "recommend",
    "stack",
    "overflow",
    "stack",
    "exchange",
    "eath",
    "well",
    "gon",
    "na",
    "get",
    "indexed",
    "lot",
    "better",
    "github",
    "however",
    "feel",
    "free",
    "ask",
    "questions",
    "obviously",
    "github",
    "well",
    "given",
    "kind",
    "basics",
    "rundown",
    "going",
    "watch",
    "video",
    "made",
    "goes",
    "even",
    "deeper",
    "format",
    "questions",
    "use",
    "let",
    "go",
    "ahead",
    "watch",
    "every",
    "developer",
    "run",
    "something",
    "breaks",
    "maybe",
    "know",
    "something",
    "time",
    "let",
    "stop",
    "series",
    "steps",
    "one",
    "take",
    "maximize",
    "one",
    "chances",
    "solving",
    "coding",
    "problem",
    "surprised",
    "developers",
    "currently",
    "use",
    "superpower",
    "effectively",
    "first",
    "one",
    "spend",
    "least",
    "time",
    "tinker",
    "experiment",
    "run",
    "issue",
    "keep",
    "trying",
    "different",
    "things",
    "think",
    "might",
    "work",
    "maybe",
    "try",
    "print",
    "statements",
    "throughout",
    "file",
    "learn",
    "debugging",
    "tips",
    "cocky",
    "first",
    "step",
    "random",
    "running",
    "around",
    "trying",
    "pinpoint",
    "exactly",
    "going",
    "wrong",
    "code",
    "either",
    "ask",
    "effective",
    "question",
    "figure",
    "pinpoint",
    "exactly",
    "going",
    "wrong",
    "need",
    "next",
    "steps",
    "anyways",
    "next",
    "check",
    "documentation",
    "tools",
    "good",
    "documentation",
    "taking",
    "time",
    "explore",
    "documentation",
    "quick",
    "way",
    "find",
    "answer",
    "want",
    "learn",
    "search",
    "webpage",
    "command",
    "f",
    "control",
    "way",
    "look",
    "specific",
    "keywords",
    "page",
    "hopefully",
    "good",
    "search",
    "bar",
    "works",
    "well",
    "sometimes",
    "documentation",
    "really",
    "dense",
    "maybe",
    "move",
    "next",
    "step",
    "web",
    "search",
    "end",
    "day",
    "good",
    "software",
    "engineers",
    "secretly",
    "professional",
    "googlers",
    "one",
    "powerful",
    "tools",
    "able",
    "search",
    "web",
    "somebody",
    "else",
    "already",
    "run",
    "problem",
    "run",
    "solved",
    "search",
    "engines",
    "like",
    "google",
    "tools",
    "use",
    "get",
    "even",
    "specific",
    "looking",
    "often",
    "specific",
    "errors",
    "best",
    "thing",
    "actually",
    "copy",
    "exact",
    "error",
    "paste",
    "search",
    "bar",
    "quotes",
    "use",
    "asterix",
    "spots",
    "error",
    "might",
    "specific",
    "results",
    "get",
    "forums",
    "q",
    "sites",
    "leads",
    "us",
    "next",
    "step",
    "asking",
    "questions",
    "forums",
    "q",
    "sites",
    "make",
    "sure",
    "ask",
    "question",
    "done",
    "ample",
    "googling",
    "around",
    "beforehand",
    "way",
    "waste",
    "anybody",
    "else",
    "time",
    "asking",
    "questions",
    "swear",
    "promise",
    "point",
    "go",
    "back",
    "help",
    "people",
    "learn",
    "well",
    "got",
    "good",
    "even",
    "asking",
    "question",
    "though",
    "learn",
    "going",
    "best",
    "place",
    "ask",
    "categorized",
    "different",
    "types",
    "forums",
    "qa",
    "sites",
    "feel",
    "free",
    "pause",
    "read",
    "specific",
    "examples",
    "one",
    "index",
    "code",
    "base",
    "forms",
    "like",
    "stack",
    "overflow",
    "index",
    "repositories",
    "like",
    "github",
    "issues",
    "index",
    "technology",
    "specific",
    "forums",
    "like",
    "slash",
    "eat",
    "dev",
    "unindexed",
    "discussion",
    "platforms",
    "like",
    "chainlink",
    "discord",
    "one",
    "key",
    "differentiators",
    "categories",
    "index",
    "keyword",
    "typically",
    "want",
    "ask",
    "questions",
    "forums",
    "web",
    "crawlers",
    "gone",
    "stuck",
    "database",
    "index",
    "way",
    "three",
    "weeks",
    "look",
    "back",
    "code",
    "wrote",
    "google",
    "going",
    "forget",
    "help",
    "developers",
    "run",
    "problem",
    "turn",
    "might",
    "go",
    "ahead",
    "help",
    "later",
    "ideally",
    "questions",
    "asked",
    "one",
    "index",
    "forms",
    "reason",
    "searchability",
    "discoverability",
    "however",
    "questions",
    "better",
    "fit",
    "dms",
    "twitter",
    "discord",
    "index",
    "made",
    "little",
    "chart",
    "figure",
    "best",
    "place",
    "post",
    "questions",
    "feel",
    "free",
    "pause",
    "video",
    "take",
    "look",
    "read",
    "blog",
    "descriptions",
    "picture",
    "well",
    "take",
    "another",
    "look",
    "course",
    "actually",
    "posting",
    "one",
    "forums",
    "sure",
    "read",
    "rules",
    "might",
    "state",
    "kind",
    "questions",
    "specifically",
    "ben",
    "basically",
    "breakdown",
    "looks",
    "like",
    "theoretical",
    "big",
    "picture",
    "opinionated",
    "questions",
    "go",
    "great",
    "general",
    "q",
    "forums",
    "like",
    "quora",
    "specific",
    "technical",
    "forums",
    "like",
    "specific",
    "subreddits",
    "discord",
    "forums",
    "specific",
    "coding",
    "questions",
    "go",
    "forums",
    "well",
    "often",
    "get",
    "eyes",
    "coding",
    "forums",
    "like",
    "stack",
    "overflow",
    "stack",
    "exchange",
    "communities",
    "often",
    "question",
    "oh",
    "post",
    "stack",
    "url",
    "flow",
    "maybe",
    "stack",
    "exchange",
    "community",
    "incredibly",
    "blurry",
    "sometimes",
    "really",
    "matter",
    "one",
    "post",
    "run",
    "bug",
    "issue",
    "technology",
    "really",
    "familiar",
    "think",
    "breaking",
    "chance",
    "pop",
    "issue",
    "open",
    "source",
    "code",
    "repository",
    "potentially",
    "improve",
    "tool",
    "open",
    "source",
    "code",
    "repository",
    "throw",
    "closed",
    "source",
    "piece",
    "shit",
    "garbage",
    "kidding",
    "closed",
    "source",
    "tech",
    "place",
    "lives",
    "additionally",
    "following",
    "tutorial",
    "git",
    "repo",
    "associated",
    "like",
    "videos",
    "gon",
    "na",
    "best",
    "place",
    "leave",
    "issues",
    "much",
    "hate",
    "say",
    "putting",
    "issues",
    "onto",
    "github",
    "repositories",
    "going",
    "much",
    "effective",
    "us",
    "answering",
    "questions",
    "posting",
    "youtube",
    "comments",
    "finally",
    "discord",
    "element",
    "email",
    "text",
    "message",
    "unindexed",
    "chats",
    "still",
    "good",
    "places",
    "ask",
    "questions",
    "please",
    "try",
    "use",
    "last",
    "resort",
    "end",
    "answering",
    "one",
    "questions",
    "maybe",
    "go",
    "back",
    "add",
    "question",
    "answer",
    "one",
    "forums",
    "talking",
    "way",
    "indexed",
    "next",
    "time",
    "somebody",
    "else",
    "google",
    "quicker",
    "chat",
    "forums",
    "places",
    "community",
    "congregate",
    "quick",
    "conversations",
    "places",
    "theory",
    "craft",
    "talk",
    "new",
    "things",
    "coming",
    "new",
    "ideas",
    "events",
    "things",
    "indexed",
    "web",
    "crawlers",
    "also",
    "great",
    "places",
    "meet",
    "network",
    "people",
    "might",
    "able",
    "bounce",
    "ideas",
    "directly",
    "get",
    "know",
    "leads",
    "last",
    "section",
    "oh",
    "hear",
    "oh",
    "video",
    "inside",
    "another",
    "video",
    "alarm",
    "ringing",
    "ask",
    "question",
    "one",
    "forums",
    "better",
    "format",
    "questions",
    "better",
    "chance",
    "getting",
    "answered",
    "bad",
    "questions",
    "poorly",
    "formatted",
    "questions",
    "let",
    "teach",
    "always",
    "ask",
    "questions",
    "format",
    "best",
    "possible",
    "give",
    "highest",
    "chance",
    "making",
    "sure",
    "get",
    "answered",
    "number",
    "one",
    "asking",
    "question",
    "make",
    "sure",
    "followed",
    "steps",
    "parent",
    "video",
    "done",
    "research",
    "already",
    "make",
    "sure",
    "question",
    "already",
    "asked",
    "number",
    "two",
    "make",
    "title",
    "summarizes",
    "specifics",
    "question",
    "three",
    "introduced",
    "problem",
    "write",
    "code",
    "add",
    "minimalistic",
    "reproducible",
    "code",
    "minimalistic",
    "code",
    "means",
    "copy",
    "paste",
    "entire",
    "file",
    "problems",
    "one",
    "line",
    "maybe",
    "post",
    "one",
    "line",
    "reproducible",
    "code",
    "means",
    "others",
    "able",
    "run",
    "exact",
    "error",
    "running",
    "least",
    "post",
    "steps",
    "mean",
    "put",
    "following",
    "along",
    "patrick",
    "video",
    "five",
    "ran",
    "problem",
    "watch",
    "video",
    "get",
    "flattering",
    "reasonable",
    "everyone",
    "going",
    "watched",
    "videos",
    "even",
    "though",
    "want",
    "give",
    "technical",
    "steps",
    "reach",
    "error",
    "reached",
    "watching",
    "free",
    "code",
    "camp",
    "video",
    "kind",
    "exempt",
    "say",
    "hey",
    "five",
    "part",
    "video",
    "inside",
    "discussions",
    "tab",
    "github",
    "repo",
    "associated",
    "course",
    "github",
    "repo",
    "associated",
    "course",
    "learning",
    "markdown",
    "format",
    "code",
    "especially",
    "using",
    "three",
    "backticks",
    "labeling",
    "language",
    "critical",
    "piece",
    "formatting",
    "code",
    "drastically",
    "improve",
    "number",
    "people",
    "answer",
    "questions",
    "errors",
    "code",
    "formatted",
    "three",
    "backticks",
    "syntax",
    "finally",
    "often",
    "people",
    "care",
    "certain",
    "technologies",
    "monitor",
    "specific",
    "tags",
    "monitor",
    "specific",
    "questions",
    "asked",
    "technologies",
    "like",
    "finally",
    "sure",
    "read",
    "forum",
    "guides",
    "posting",
    "different",
    "forums",
    "different",
    "rules",
    "want",
    "want",
    "familiar",
    "increase",
    "chances",
    "getting",
    "answer",
    "right",
    "back",
    "main",
    "video",
    "note",
    "stack",
    "overflow",
    "particular",
    "stack",
    "overflow",
    "little",
    "aggressive",
    "sometimes",
    "posting",
    "specific",
    "community",
    "forums",
    "might",
    "better",
    "specific",
    "technology",
    "questions",
    "post",
    "stack",
    "overflow",
    "get",
    "ton",
    "votes",
    "questions",
    "let",
    "bother",
    "take",
    "learning",
    "opportunity",
    "learn",
    "stack",
    "overflow",
    "likes",
    "like",
    "keep",
    "going",
    "let",
    "discourage",
    "okay",
    "well",
    "know",
    "things",
    "go",
    "questions",
    "go",
    "actually",
    "format",
    "let",
    "practice",
    "let",
    "look",
    "sample",
    "questions",
    "might",
    "figure",
    "want",
    "put",
    "first",
    "one",
    "one",
    "go",
    "feel",
    "free",
    "pause",
    "guess",
    "question",
    "like",
    "going",
    "great",
    "reddit",
    "discord",
    "probably",
    "discord",
    "definitely",
    "something",
    "search",
    "right",
    "probably",
    "could",
    "search",
    "find",
    "answer",
    "go",
    "maybe",
    "want",
    "ask",
    "buddy",
    "maybe",
    "want",
    "ask",
    "specific",
    "community",
    "like",
    "slash",
    "eat",
    "dev",
    "course",
    "see",
    "question",
    "obviously",
    "want",
    "recommend",
    "patrick",
    "collins",
    "youtube",
    "channel",
    "question",
    "notice",
    "formatting",
    "right",
    "title",
    "nice",
    "big",
    "technical",
    "command",
    "formatted",
    "properly",
    "git",
    "commit",
    "formatted",
    "properly",
    "would",
    "go",
    "like",
    "would",
    "definitely",
    "well",
    "stack",
    "overflow",
    "index",
    "code",
    "based",
    "forum",
    "clearly",
    "try",
    "something",
    "technical",
    "problem",
    "laid",
    "clearly",
    "given",
    "command",
    "looking",
    "one",
    "something",
    "like",
    "could",
    "go",
    "either",
    "stackoverflow",
    "probably",
    "likely",
    "going",
    "go",
    "github",
    "issue",
    "brownie",
    "package",
    "big",
    "difference",
    "code",
    "forums",
    "git",
    "repos",
    "like",
    "github",
    "make",
    "issue",
    "github",
    "repository",
    "especially",
    "think",
    "problem",
    "want",
    "depth",
    "possible",
    "oftentimes",
    "making",
    "issue",
    "repos",
    "even",
    "ask",
    "version",
    "using",
    "post",
    "code",
    "post",
    "files",
    "much",
    "much",
    "explicit",
    "something",
    "like",
    "going",
    "really",
    "good",
    "github",
    "repo",
    "associated",
    "tutorial",
    "looks",
    "like",
    "person",
    "asking",
    "specific",
    "tutorial",
    "posting",
    "going",
    "best",
    "question",
    "tutorial",
    "github",
    "repo",
    "well",
    "probably",
    "maybe",
    "better",
    "comment",
    "section",
    "becomes",
    "little",
    "bit",
    "art",
    "science",
    "maybe",
    "specific",
    "error",
    "running",
    "generic",
    "error",
    "ton",
    "people",
    "run",
    "maybe",
    "better",
    "stackoverflow",
    "maybe",
    "issue",
    "package",
    "maybe",
    "better",
    "github",
    "maybe",
    "solution",
    "opinionated",
    "finally",
    "yep",
    "going",
    "much",
    "better",
    "discord",
    "dm",
    "buddy",
    "away",
    "last",
    "step",
    "blocking",
    "question",
    "going",
    "join",
    "strengthen",
    "community",
    "tool",
    "start",
    "going",
    "hard",
    "give",
    "back",
    "since",
    "going",
    "knowledgeable",
    "tools",
    "get",
    "better",
    "technologies",
    "want",
    "try",
    "answer",
    "new",
    "questions",
    "come",
    "reason",
    "give",
    "chance",
    "actually",
    "learn",
    "tools",
    "like",
    "strengthen",
    "community",
    "favorite",
    "tools",
    "meaning",
    "help",
    "answer",
    "questions",
    "tool",
    "actually",
    "encourage",
    "people",
    "use",
    "tool",
    "strong",
    "following",
    "likely",
    "might",
    "actually",
    "help",
    "sometime",
    "future",
    "helping",
    "people",
    "make",
    "look",
    "like",
    "good",
    "person",
    "also",
    "feel",
    "like",
    "good",
    "person",
    "additionally",
    "many",
    "forums",
    "like",
    "reddit",
    "oftentimes",
    "mods",
    "actually",
    "look",
    "often",
    "post",
    "versus",
    "often",
    "help",
    "others",
    "comments",
    "others",
    "people",
    "posts",
    "mods",
    "may",
    "actually",
    "start",
    "blocking",
    "posts",
    "abusing",
    "forums",
    "giving",
    "back",
    "community",
    "trying",
    "take",
    "knowledge",
    "community",
    "successful",
    "join",
    "help",
    "others",
    "try",
    "extract",
    "things",
    "people",
    "additionally",
    "engaging",
    "community",
    "ca",
    "tell",
    "many",
    "people",
    "met",
    "learned",
    "able",
    "brainstorm",
    "final",
    "step",
    "going",
    "iterate",
    "steps",
    "maybe",
    "get",
    "end",
    "say",
    "oh",
    "still",
    "blocked",
    "likely",
    "much",
    "much",
    "knowledgeable",
    "want",
    "go",
    "back",
    "try",
    "steps",
    "whole",
    "process",
    "little",
    "bit",
    "art",
    "science",
    "questions",
    "might",
    "discovered",
    "yet",
    "people",
    "know",
    "enough",
    "people",
    "understand",
    "importance",
    "questions",
    "maybe",
    "people",
    "understand",
    "question",
    "important",
    "go",
    "back",
    "iterate",
    "steps",
    "basic",
    "building",
    "blocks",
    "incredible",
    "superpower",
    "encourage",
    "go",
    "try",
    "let",
    "know",
    "went",
    "alright",
    "awesome",
    "know",
    "get",
    "unblocked",
    "move",
    "reason",
    "important",
    "learn",
    "get",
    "unblocked",
    "blockchain",
    "web",
    "three",
    "everybody",
    "collaborative",
    "space",
    "get",
    "better",
    "learn",
    "massive",
    "way",
    "test",
    "much",
    "learned",
    "give",
    "back",
    "community",
    "going",
    "stack",
    "overflow",
    "going",
    "stack",
    "exchange",
    "trying",
    "answer",
    "questions",
    "highly",
    "recommend",
    "go",
    "stack",
    "overflow",
    "go",
    "github",
    "repo",
    "associated",
    "scores",
    "try",
    "answer",
    "discussions",
    "try",
    "answer",
    "issues",
    "help",
    "people",
    "going",
    "help",
    "become",
    "much",
    "better",
    "software",
    "engineer",
    "reason",
    "want",
    "part",
    "install",
    "tools",
    "show",
    "sometimes",
    "installation",
    "process",
    "hardest",
    "piece",
    "get",
    "past",
    "install",
    "process",
    "generally",
    "becomes",
    "much",
    "much",
    "easier",
    "often",
    "hardest",
    "part",
    "course",
    "installing",
    "tools",
    "going",
    "give",
    "going",
    "learn",
    "right",
    "working",
    "far",
    "remix",
    "remix",
    "ide",
    "integrated",
    "development",
    "environment",
    "seen",
    "wonderful",
    "place",
    "try",
    "code",
    "try",
    "solidity",
    "compile",
    "deploy",
    "pretty",
    "much",
    "everything",
    "need",
    "web",
    "based",
    "testing",
    "debugging",
    "deploying",
    "local",
    "javascript",
    "vm",
    "quick",
    "easy",
    "create",
    "test",
    "smart",
    "contracts",
    "however",
    "limitations",
    "really",
    "deal",
    "smart",
    "contract",
    "ca",
    "really",
    "integrate",
    "parts",
    "projects",
    "limited",
    "support",
    "tests",
    "custom",
    "deployments",
    "need",
    "internet",
    "connection",
    "even",
    "work",
    "remix",
    "tricky",
    "lot",
    "advanced",
    "functionality",
    "phenomenal",
    "tool",
    "absolutely",
    "looking",
    "something",
    "quickly",
    "absolutely",
    "recommend",
    "everybody",
    "go",
    "remix",
    "go",
    "ahead",
    "try",
    "something",
    "going",
    "move",
    "professional",
    "smart",
    "contract",
    "developer",
    "setup",
    "hard",
    "hat",
    "known",
    "smart",
    "contract",
    "developer",
    "framework",
    "similar",
    "brownie",
    "foundry",
    "likes",
    "number",
    "frameworks",
    "reason",
    "going",
    "hard",
    "hat",
    "hard",
    "hat",
    "javascript",
    "based",
    "javascript",
    "based",
    "development",
    "environment",
    "got",
    "javascript",
    "based",
    "compilation",
    "environment",
    "deploying",
    "testing",
    "debugging",
    "love",
    "typescript",
    "also",
    "typescript",
    "editions",
    "every",
    "single",
    "one",
    "code",
    "examples",
    "love",
    "javascript",
    "got",
    "love",
    "typescript",
    "also",
    "got",
    "always",
    "going",
    "walk",
    "us",
    "typescript",
    "sometimes",
    "code",
    "typescript",
    "available",
    "github",
    "repo",
    "actually",
    "learn",
    "hard",
    "hat",
    "learn",
    "another",
    "package",
    "first",
    "going",
    "learn",
    "everything",
    "ethers",
    "jas",
    "javascript",
    "based",
    "library",
    "working",
    "smart",
    "contracts",
    "also",
    "powers",
    "next",
    "tool",
    "going",
    "working",
    "hard",
    "hat",
    "hood",
    "hard",
    "hat",
    "lot",
    "ethers",
    "jas",
    "important",
    "us",
    "learn",
    "ethers",
    "jas",
    "understand",
    "hard",
    "hat",
    "actually",
    "rest",
    "course",
    "going",
    "using",
    "code",
    "editor",
    "called",
    "visual",
    "studio",
    "code",
    "one",
    "powerful",
    "code",
    "editors",
    "planet",
    "already",
    "got",
    "set",
    "feel",
    "free",
    "go",
    "ahead",
    "skip",
    "part",
    "already",
    "professional",
    "coding",
    "setup",
    "gs",
    "vs",
    "code",
    "git",
    "everything",
    "feel",
    "free",
    "use",
    "timestamps",
    "github",
    "repository",
    "skip",
    "setup",
    "section",
    "often",
    "hear",
    "people",
    "refer",
    "vs",
    "code",
    "visual",
    "studio",
    "code",
    "visual",
    "studio",
    "however",
    "important",
    "note",
    "visual",
    "studio",
    "code",
    "different",
    "visual",
    "studio",
    "might",
    "see",
    "look",
    "like",
    "visual",
    "studio",
    "code",
    "want",
    "visual",
    "studio",
    "visual",
    "studio",
    "different",
    "application",
    "make",
    "sure",
    "visual",
    "studio",
    "code",
    "choose",
    "total",
    "harto",
    "absolutely",
    "work",
    "terminal",
    "powershell",
    "whatever",
    "coding",
    "environment",
    "want",
    "like",
    "atom",
    "sublime",
    "however",
    "us",
    "going",
    "working",
    "visual",
    "studio",
    "code",
    "going",
    "going",
    "setting",
    "visual",
    "studio",
    "code",
    "way",
    "like",
    "set",
    "actually",
    "set",
    "whatever",
    "way",
    "feel",
    "comfortable",
    "course",
    "lesson",
    "six",
    "link",
    "installation",
    "setup",
    "going",
    "adding",
    "links",
    "go",
    "code",
    "going",
    "working",
    "github",
    "repository",
    "says",
    "code",
    "gon",
    "na",
    "go",
    "three",
    "different",
    "installation",
    "processes",
    "pick",
    "one",
    "appropriate",
    "first",
    "one",
    "going",
    "mac",
    "linux",
    "users",
    "second",
    "one",
    "going",
    "windows",
    "users",
    "third",
    "one",
    "going",
    "last",
    "ditch",
    "effort",
    "whatever",
    "reason",
    "ca",
    "get",
    "windows",
    "linux",
    "mac",
    "instructions",
    "work",
    "going",
    "use",
    "git",
    "pod",
    "installation",
    "highly",
    "highly",
    "recommend",
    "try",
    "get",
    "everything",
    "working",
    "locally",
    "without",
    "using",
    "git",
    "pod",
    "however",
    "whatever",
    "reason",
    "ca",
    "get",
    "installation",
    "pieces",
    "work",
    "git",
    "pod",
    "instructions",
    "repos",
    "work",
    "get",
    "started",
    "start",
    "mac",
    "linux",
    "installation",
    "instructions",
    "first",
    "thing",
    "going",
    "want",
    "download",
    "mac",
    "working",
    "linux",
    "download",
    "linux",
    "installation",
    "visual",
    "studio",
    "code",
    "installed",
    "look",
    "little",
    "something",
    "like",
    "fresh",
    "installation",
    "even",
    "give",
    "tips",
    "tools",
    "actually",
    "get",
    "started",
    "never",
    "worked",
    "visual",
    "studio",
    "code",
    "highly",
    "recommend",
    "going",
    "get",
    "started",
    "getting",
    "instructions",
    "tips",
    "come",
    "opening",
    "visual",
    "studio",
    "code",
    "additionally",
    "visual",
    "studio",
    "code",
    "crash",
    "course",
    "github",
    "repo",
    "associated",
    "course",
    "visual",
    "studio",
    "code",
    "installed",
    "next",
    "thing",
    "going",
    "want",
    "install",
    "going",
    "node",
    "j",
    "links",
    "github",
    "repo",
    "associated",
    "course",
    "go",
    "ahead",
    "click",
    "download",
    "mac",
    "os",
    "download",
    "linux",
    "recommend",
    "using",
    "lts",
    "version",
    "lts",
    "stands",
    "long",
    "term",
    "support",
    "means",
    "supporting",
    "version",
    "long",
    "time",
    "go",
    "ahead",
    "download",
    "node",
    "js",
    "already",
    "downloaded",
    "gon",
    "na",
    "go",
    "ahead",
    "redownload",
    "one",
    "awesome",
    "things",
    "visual",
    "studio",
    "code",
    "thing",
    "called",
    "terminals",
    "command",
    "line",
    "prompts",
    "allow",
    "us",
    "run",
    "scripts",
    "basically",
    "going",
    "running",
    "code",
    "open",
    "terminal",
    "go",
    "ahead",
    "hit",
    "terminal",
    "select",
    "new",
    "terminal",
    "get",
    "something",
    "like",
    "might",
    "bash",
    "z",
    "ca",
    "type",
    "shell",
    "type",
    "really",
    "matter",
    "mac",
    "linux",
    "going",
    "linux",
    "based",
    "test",
    "jess",
    "installation",
    "done",
    "correctly",
    "running",
    "node",
    "dash",
    "dash",
    "version",
    "see",
    "something",
    "looks",
    "like",
    "exact",
    "version",
    "node",
    "really",
    "matter",
    "ideally",
    "least",
    "node",
    "version",
    "14",
    "higher",
    "something",
    "like",
    "show",
    "remember",
    "go",
    "ahead",
    "start",
    "looking",
    "stack",
    "overflow",
    "looking",
    "github",
    "repo",
    "discussions",
    "tab",
    "looking",
    "updated",
    "section",
    "etc",
    "like",
    "said",
    "sometimes",
    "installing",
    "hardest",
    "part",
    "entire",
    "course",
    "get",
    "discouraged",
    "please",
    "use",
    "stack",
    "overflow",
    "stack",
    "exchange",
    "etherium",
    "github",
    "repo",
    "move",
    "past",
    "issues",
    "run",
    "mac",
    "linux",
    "actually",
    "hit",
    "ctrl",
    "back",
    "tick",
    "actually",
    "toggle",
    "terminal",
    "mode",
    "pull",
    "terminal",
    "getting",
    "familiar",
    "keyboard",
    "shortcuts",
    "actually",
    "make",
    "life",
    "lot",
    "easier",
    "able",
    "move",
    "around",
    "visual",
    "studio",
    "code",
    "much",
    "effectively",
    "link",
    "list",
    "keyboard",
    "shortcuts",
    "additionally",
    "github",
    "repository",
    "associated",
    "section",
    "move",
    "along",
    "give",
    "tip",
    "different",
    "keyboard",
    "shortcuts",
    "optionally",
    "use",
    "otherwise",
    "go",
    "ahead",
    "click",
    "well",
    "click",
    "trash",
    "delete",
    "terminal",
    "go",
    "back",
    "terminal",
    "new",
    "terminal",
    "pop",
    "back",
    "next",
    "thing",
    "going",
    "need",
    "little",
    "bit",
    "later",
    "going",
    "need",
    "section",
    "good",
    "install",
    "going",
    "git",
    "jazz",
    "known",
    "javascript",
    "runtime",
    "tool",
    "going",
    "use",
    "help",
    "run",
    "javascript",
    "code",
    "visual",
    "studio",
    "code",
    "slot",
    "exactly",
    "javascript",
    "difference",
    "jas",
    "javascript",
    "little",
    "bit",
    "confusing",
    "let",
    "stop",
    "next",
    "actually",
    "going",
    "go",
    "ahead",
    "install",
    "git",
    "links",
    "installation",
    "instructions",
    "github",
    "repository",
    "installing",
    "git",
    "linux",
    "going",
    "use",
    "one",
    "two",
    "commands",
    "macos",
    "type",
    "git",
    "command",
    "line",
    "go",
    "ahead",
    "prompt",
    "install",
    "back",
    "command",
    "line",
    "type",
    "git",
    "prompt",
    "go",
    "ahead",
    "stall",
    "get",
    "dash",
    "dash",
    "version",
    "get",
    "something",
    "looks",
    "like",
    "also",
    "use",
    "mac",
    "os",
    "get",
    "installer",
    "clicking",
    "link",
    "running",
    "installation",
    "process",
    "alright",
    "js",
    "yet",
    "visual",
    "studio",
    "code",
    "installed",
    "continue",
    "next",
    "section",
    "awesome",
    "planning",
    "using",
    "windows",
    "get",
    "pod",
    "feel",
    "free",
    "skip",
    "next",
    "two",
    "sections",
    "running",
    "windows",
    "however",
    "work",
    "editions",
    "windows",
    "first",
    "thing",
    "going",
    "want",
    "install",
    "visual",
    "studio",
    "code",
    "looks",
    "something",
    "like",
    "auto",
    "detect",
    "gon",
    "na",
    "go",
    "ahead",
    "download",
    "windows",
    "walk",
    "installation",
    "process",
    "go",
    "ahead",
    "create",
    "desktop",
    "item",
    "add",
    "case",
    "want",
    "open",
    "code",
    "go",
    "ahead",
    "install",
    "go",
    "ahead",
    "finish",
    "installed",
    "visual",
    "studio",
    "code",
    "see",
    "something",
    "looks",
    "little",
    "like",
    "go",
    "ahead",
    "give",
    "get",
    "started",
    "vs",
    "code",
    "section",
    "choose",
    "themes",
    "choose",
    "kind",
    "way",
    "looks",
    "feel",
    "free",
    "customize",
    "way",
    "want",
    "want",
    "learn",
    "little",
    "bit",
    "visual",
    "studio",
    "code",
    "highly",
    "recommend",
    "walk",
    "section",
    "learn",
    "shortcuts",
    "making",
    "development",
    "experience",
    "efficient",
    "done",
    "go",
    "ahead",
    "close",
    "tabs",
    "top",
    "look",
    "little",
    "something",
    "like",
    "visual",
    "studio",
    "code",
    "installed",
    "next",
    "thing",
    "going",
    "want",
    "install",
    "node",
    "j",
    "course",
    "link",
    "installing",
    "github",
    "repository",
    "associated",
    "course",
    "going",
    "going",
    "go",
    "ahead",
    "come",
    "node",
    "j",
    "download",
    "windows",
    "node",
    "js",
    "javascript",
    "runtime",
    "environment",
    "exactly",
    "javascript",
    "distinction",
    "little",
    "bit",
    "confusing",
    "know",
    "going",
    "help",
    "us",
    "run",
    "javascript",
    "code",
    "development",
    "environment",
    "let",
    "go",
    "ahead",
    "download",
    "lts",
    "long",
    "term",
    "support",
    "edition",
    "gs",
    "go",
    "ahead",
    "run",
    "setup",
    "wizard",
    "go",
    "ahead",
    "make",
    "sure",
    "clicked",
    "case",
    "ever",
    "want",
    "use",
    "different",
    "tools",
    "setup",
    "go",
    "ahead",
    "click",
    "install",
    "get",
    "pop",
    "asking",
    "really",
    "want",
    "install",
    "device",
    "go",
    "ahead",
    "hit",
    "yes",
    "hit",
    "finish",
    "might",
    "get",
    "pop",
    "looks",
    "like",
    "go",
    "ahead",
    "click",
    "button",
    "go",
    "ahead",
    "install",
    "tools",
    "go",
    "ahead",
    "press",
    "key",
    "likely",
    "get",
    "windows",
    "powershell",
    "screen",
    "pop",
    "asking",
    "go",
    "ahead",
    "install",
    "whole",
    "bunch",
    "different",
    "projects",
    "files",
    "chose",
    "install",
    "totally",
    "okay",
    "future",
    "really",
    "helpful",
    "since",
    "going",
    "use",
    "lot",
    "tools",
    "package",
    "installs",
    "anyways",
    "might",
    "take",
    "time",
    "install",
    "go",
    "ahead",
    "patient",
    "gets",
    "stuck",
    "might",
    "waiting",
    "go",
    "ahead",
    "hit",
    "enter",
    "go",
    "ahead",
    "hit",
    "enter",
    "prompts",
    "yes",
    "please",
    "patient",
    "little",
    "bit",
    "slow",
    "go",
    "ahead",
    "install",
    "everything",
    "installed",
    "come",
    "back",
    "visual",
    "studio",
    "code",
    "going",
    "go",
    "ahead",
    "open",
    "terminal",
    "hit",
    "terminal",
    "hit",
    "new",
    "terminal",
    "terminal",
    "going",
    "command",
    "line",
    "prompt",
    "going",
    "basically",
    "run",
    "scripts",
    "work",
    "code",
    "run",
    "node",
    "dash",
    "dash",
    "version",
    "see",
    "something",
    "looks",
    "like",
    "know",
    "installed",
    "node",
    "js",
    "correctly",
    "command",
    "line",
    "known",
    "windows",
    "powershell",
    "want",
    "work",
    "windows",
    "powershell",
    "absolutely",
    "fact",
    "want",
    "total",
    "harto",
    "write",
    "code",
    "windows",
    "powershell",
    "absolutely",
    "well",
    "however",
    "actually",
    "going",
    "working",
    "powershell",
    "going",
    "using",
    "tool",
    "makes",
    "windows",
    "environments",
    "like",
    "linux",
    "reason",
    "linux",
    "standard",
    "development",
    "environments",
    "everybody",
    "work",
    "similar",
    "setup",
    "make",
    "rest",
    "course",
    "lot",
    "easier",
    "everyone",
    "interact",
    "matter",
    "coding",
    "environment",
    "working",
    "wsl",
    "stands",
    "windows",
    "subsystem",
    "linux",
    "allows",
    "linux",
    "programs",
    "run",
    "natively",
    "windows",
    "environments",
    "get",
    "setup",
    "gon",
    "na",
    "go",
    "ahead",
    "go",
    "wsl",
    "install",
    "link",
    "well",
    "github",
    "repository",
    "going",
    "must",
    "running",
    "windows",
    "10",
    "version",
    "2004",
    "higher",
    "windows",
    "using",
    "older",
    "version",
    "windows",
    "absolutely",
    "continue",
    "powershell",
    "might",
    "run",
    "issues",
    "commands",
    "work",
    "exactly",
    "highly",
    "recommend",
    "working",
    "newer",
    "version",
    "windows",
    "install",
    "back",
    "visual",
    "studio",
    "code",
    "powershell",
    "powershell",
    "app",
    "running",
    "wsl",
    "dash",
    "dash",
    "install",
    "get",
    "error",
    "requested",
    "operation",
    "requires",
    "elevation",
    "means",
    "run",
    "visual",
    "studio",
    "code",
    "powershell",
    "application",
    "administrator",
    "close",
    "visual",
    "studio",
    "code",
    "right",
    "click",
    "say",
    "run",
    "administrator",
    "get",
    "little",
    "pop",
    "saying",
    "want",
    "allow",
    "app",
    "make",
    "changes",
    "device",
    "go",
    "ahead",
    "click",
    "yes",
    "reopen",
    "terminal",
    "run",
    "wsl",
    "space",
    "dash",
    "dash",
    "install",
    "go",
    "ahead",
    "install",
    "wsl",
    "may",
    "take",
    "little",
    "bit",
    "please",
    "patient",
    "completed",
    "see",
    "something",
    "looks",
    "like",
    "going",
    "working",
    "ubuntu",
    "list",
    "different",
    "commands",
    "change",
    "linux",
    "distribution",
    "choose",
    "see",
    "request",
    "set",
    "operation",
    "successful",
    "changes",
    "effective",
    "system",
    "rebooted",
    "want",
    "go",
    "ahead",
    "restart",
    "computer",
    "also",
    "troubleshooting",
    "guide",
    "github",
    "repository",
    "run",
    "issues",
    "restart",
    "computer",
    "prompted",
    "name",
    "new",
    "system",
    "password",
    "different",
    "windows",
    "name",
    "password",
    "follow",
    "prompts",
    "done",
    "dropped",
    "ubuntu",
    "shell",
    "run",
    "linux",
    "commands",
    "ubuntu",
    "instance",
    "machine",
    "able",
    "run",
    "linux",
    "commands",
    "terminal",
    "wsl",
    "set",
    "correctly",
    "going",
    "head",
    "back",
    "visual",
    "studio",
    "code",
    "wsl",
    "want",
    "go",
    "ahead",
    "install",
    "extension",
    "visual",
    "studio",
    "code",
    "go",
    "extensions",
    "look",
    "remote",
    "development",
    "install",
    "whole",
    "thing",
    "remote",
    "wsl",
    "gon",
    "na",
    "install",
    "whole",
    "thing",
    "follow",
    "along",
    "get",
    "started",
    "remote",
    "wsl",
    "like",
    "follow",
    "along",
    "right",
    "right",
    "go",
    "terminal",
    "hit",
    "new",
    "terminal",
    "still",
    "gon",
    "na",
    "get",
    "powershell",
    "actually",
    "want",
    "linux",
    "shell",
    "couple",
    "ways",
    "open",
    "visual",
    "studio",
    "code",
    "linux",
    "environment",
    "one",
    "way",
    "gon",
    "na",
    "hit",
    "ctrl",
    "shift",
    "p",
    "type",
    "wsl",
    "click",
    "remote",
    "wsl",
    "new",
    "wsl",
    "window",
    "get",
    "new",
    "window",
    "looks",
    "like",
    "also",
    "click",
    "bottom",
    "left",
    "choose",
    "new",
    "wsl",
    "window",
    "go",
    "terminal",
    "hit",
    "new",
    "terminal",
    "dropped",
    "bash",
    "shell",
    "run",
    "linux",
    "commands",
    "awesome",
    "another",
    "way",
    "open",
    "visual",
    "studio",
    "code",
    "wsl",
    "go",
    "boon",
    "application",
    "make",
    "folder",
    "typing",
    "mk",
    "dir",
    "folder",
    "cd",
    "change",
    "directory",
    "folder",
    "type",
    "code",
    "period",
    "go",
    "ahead",
    "trust",
    "authors",
    "open",
    "visual",
    "studio",
    "code",
    "already",
    "connected",
    "folder",
    "create",
    "files",
    "folder",
    "like",
    "hi",
    "dot",
    "txt",
    "get",
    "created",
    "inside",
    "folder",
    "wsl",
    "inside",
    "wsl",
    "environment",
    "notice",
    "node",
    "dash",
    "dash",
    "version",
    "work",
    "anymore",
    "installed",
    "regular",
    "windows",
    "machine",
    "wsl",
    "linux",
    "environment",
    "reason",
    "installed",
    "windows",
    "environment",
    "first",
    "case",
    "wanted",
    "go",
    "ahead",
    "use",
    "powershell",
    "user",
    "windows",
    "environment",
    "run",
    "everything",
    "still",
    "remember",
    "use",
    "windows",
    "environment",
    "powershell",
    "commands",
    "use",
    "might",
    "work",
    "gon",
    "na",
    "go",
    "ahead",
    "install",
    "node",
    "js",
    "linux",
    "environment",
    "commands",
    "going",
    "write",
    "going",
    "github",
    "repo",
    "associated",
    "course",
    "going",
    "curl",
    "command",
    "nvm",
    "repository",
    "stands",
    "node",
    "version",
    "manager",
    "going",
    "pipe",
    "install",
    "script",
    "bash",
    "go",
    "ahead",
    "install",
    "vm",
    "running",
    "go",
    "ahead",
    "trash",
    "terminal",
    "reopen",
    "type",
    "mbm",
    "dash",
    "dash",
    "version",
    "see",
    "actually",
    "installed",
    "correctly",
    "installed",
    "nvm",
    "go",
    "ahead",
    "install",
    "gs",
    "using",
    "nvm",
    "type",
    "npm",
    "install",
    "16",
    "point",
    "long",
    "term",
    "support",
    "version",
    "installed",
    "windows",
    "machine",
    "installed",
    "type",
    "node",
    "dash",
    "version",
    "js",
    "installed",
    "know",
    "lot",
    "made",
    "far",
    "fantastic",
    "done",
    "great",
    "job",
    "push",
    "point",
    "get",
    "everything",
    "set",
    "code",
    "best",
    "environment",
    "made",
    "far",
    "huge",
    "congratulations",
    "next",
    "thing",
    "going",
    "install",
    "git",
    "going",
    "use",
    "git",
    "lesson",
    "however",
    "definitely",
    "using",
    "future",
    "see",
    "gets",
    "installed",
    "type",
    "git",
    "dash",
    "dash",
    "version",
    "sometimes",
    "linux",
    "automatically",
    "come",
    "git",
    "installed",
    "see",
    "something",
    "output",
    "like",
    "git",
    "look",
    "get",
    "install",
    "link",
    "description",
    "actually",
    "run",
    "installing",
    "linux",
    "want",
    "use",
    "powershell",
    "want",
    "everything",
    "windows",
    "absolutely",
    "follow",
    "installing",
    "windows",
    "instructions",
    "instead",
    "working",
    "wsl",
    "want",
    "use",
    "linux",
    "commands",
    "instead",
    "windows",
    "commands",
    "even",
    "though",
    "windows",
    "wsl",
    "makes",
    "basically",
    "running",
    "linux",
    "environment",
    "made",
    "far",
    "able",
    "follow",
    "along",
    "mac",
    "linux",
    "instructions",
    "running",
    "mac",
    "linux",
    "even",
    "though",
    "running",
    "windows",
    "sure",
    "whenever",
    "vs",
    "code",
    "take",
    "look",
    "bottom",
    "left",
    "make",
    "sure",
    "wsl",
    "ubuntu",
    "like",
    "said",
    "want",
    "run",
    "powershell",
    "windows",
    "environment",
    "free",
    "like",
    "said",
    "made",
    "far",
    "huge",
    "congratulations",
    "awesome",
    "work",
    "finally",
    "last",
    "setup",
    "going",
    "using",
    "tool",
    "called",
    "git",
    "pod",
    "starting",
    "lesson",
    "five",
    "lesson",
    "right",
    "ethers",
    "jazz",
    "simple",
    "storage",
    "code",
    "repos",
    "going",
    "come",
    "button",
    "repo",
    "scroll",
    "come",
    "open",
    "get",
    "pod",
    "button",
    "git",
    "pod",
    "cloud",
    "development",
    "environment",
    "actually",
    "run",
    "code",
    "remote",
    "server",
    "kind",
    "similar",
    "remix",
    "ide",
    "allows",
    "run",
    "visual",
    "studio",
    "code",
    "browser",
    "connected",
    "another",
    "server",
    "good",
    "installation",
    "anything",
    "since",
    "tools",
    "want",
    "use",
    "going",
    "running",
    "remote",
    "server",
    "downsides",
    "though",
    "obviously",
    "since",
    "able",
    "code",
    "git",
    "pod",
    "working",
    "additionally",
    "comes",
    "private",
    "keys",
    "absolutely",
    "want",
    "run",
    "code",
    "private",
    "key",
    "real",
    "money",
    "good",
    "pop",
    "well",
    "since",
    "running",
    "scripts",
    "remote",
    "server",
    "servers",
    "access",
    "private",
    "keys",
    "since",
    "pinky",
    "promise",
    "course",
    "going",
    "using",
    "meta",
    "mask",
    "private",
    "key",
    "actual",
    "money",
    "fine",
    "downside",
    "often",
    "cost",
    "money",
    "use",
    "get",
    "pot",
    "free",
    "option",
    "absolutely",
    "get",
    "installation",
    "working",
    "go",
    "ahead",
    "hit",
    "opening",
    "get",
    "pod",
    "button",
    "get",
    "welcome",
    "get",
    "pods",
    "showing",
    "gon",
    "na",
    "go",
    "ahead",
    "continue",
    "github",
    "since",
    "signed",
    "github",
    "want",
    "go",
    "ahead",
    "authorize",
    "get",
    "pod",
    "go",
    "ahead",
    "start",
    "creating",
    "workspace",
    "notice",
    "looks",
    "exactly",
    "like",
    "visual",
    "studio",
    "code",
    "since",
    "opened",
    "repo",
    "git",
    "pod",
    "came",
    "code",
    "even",
    "open",
    "workspace",
    "vs",
    "code",
    "desktop",
    "might",
    "little",
    "bit",
    "confusing",
    "basically",
    "run",
    "git",
    "pod",
    "using",
    "local",
    "visual",
    "studio",
    "code",
    "see",
    "git",
    "pod",
    "know",
    "running",
    "git",
    "pod",
    "see",
    "pop",
    "want",
    "open",
    "workspace",
    "vs",
    "code",
    "desktop",
    "hit",
    "open",
    "ask",
    "want",
    "open",
    "visual",
    "studio",
    "code",
    "going",
    "go",
    "ahead",
    "hit",
    "yes",
    "get",
    "something",
    "looks",
    "like",
    "visual",
    "studio",
    "code",
    "tell",
    "wants",
    "install",
    "git",
    "pod",
    "extension",
    "open",
    "git",
    "pod",
    "url",
    "go",
    "ahead",
    "install",
    "reload",
    "window",
    "open",
    "going",
    "go",
    "ahead",
    "start",
    "connecting",
    "git",
    "pod",
    "workspace",
    "going",
    "running",
    "git",
    "pod",
    "browser",
    "also",
    "manually",
    "hitting",
    "git",
    "pod",
    "bottom",
    "left",
    "type",
    "open",
    "vs",
    "code",
    "able",
    "run",
    "visual",
    "studio",
    "code",
    "going",
    "recommend",
    "using",
    "git",
    "pod",
    "stay",
    "browser",
    "know",
    "okay",
    "running",
    "remote",
    "server",
    "reminder",
    "actually",
    "locally",
    "developing",
    "hopefully",
    "trigger",
    "actually",
    "put",
    "special",
    "private",
    "keys",
    "anything",
    "like",
    "make",
    "workspaces",
    "make",
    "new",
    "folders",
    "able",
    "run",
    "commands",
    "running",
    "locally",
    "visual",
    "studio",
    "code",
    "open",
    "terminal",
    "hit",
    "little",
    "bar",
    "top",
    "left",
    "go",
    "terminal",
    "new",
    "terminal",
    "use",
    "ctrl",
    "tilde",
    "exact",
    "mac",
    "os",
    "linux",
    "keyboard",
    "shortcuts",
    "create",
    "new",
    "folder",
    "change",
    "directory",
    "cd",
    "dir",
    "new",
    "folder",
    "mk",
    "dir",
    "makes",
    "make",
    "directory",
    "called",
    "new",
    "folder",
    "going",
    "change",
    "directory",
    "new",
    "folder",
    "hit",
    "enter",
    "new",
    "folder",
    "section",
    "either",
    "open",
    "entire",
    "source",
    "code",
    "right",
    "github",
    "create",
    "new",
    "folder",
    "section",
    "start",
    "blank",
    "would",
    "type",
    "code",
    "period",
    "brand",
    "new",
    "folder",
    "right",
    "fantastic",
    "point",
    "set",
    "visual",
    "studio",
    "code",
    "jas",
    "get",
    "going",
    "working",
    "folder",
    "called",
    "hard",
    "hat",
    "free",
    "code",
    "camp",
    "point",
    "node",
    "dash",
    "dash",
    "version",
    "get",
    "dash",
    "dash",
    "version",
    "using",
    "windows",
    "say",
    "wsl",
    "boon",
    "something",
    "like",
    "means",
    "ready",
    "go",
    "quick",
    "note",
    "something",
    "see",
    "lot",
    "well",
    "oftentimes",
    "terminal",
    "gets",
    "really",
    "really",
    "big",
    "ton",
    "commands",
    "gets",
    "little",
    "bit",
    "overwhelming",
    "one",
    "thing",
    "type",
    "clear",
    "hit",
    "enter",
    "clear",
    "hit",
    "command",
    "k",
    "mac",
    "ctrl",
    "k",
    "linux",
    "windows",
    "one",
    "favorite",
    "keyboard",
    "shortcuts",
    "use",
    "time",
    "additionally",
    "trash",
    "x",
    "different",
    "go",
    "couple",
    "enters",
    "hit",
    "trashcan",
    "pull",
    "terminal",
    "back",
    "toggle",
    "terminal",
    "new",
    "terminal",
    "see",
    "lines",
    "still",
    "hit",
    "trashcan",
    "pull",
    "terminal",
    "back",
    "see",
    "actually",
    "refreshes",
    "mine",
    "special",
    "command",
    "prints",
    "stuff",
    "trashing",
    "terminal",
    "basically",
    "deleting",
    "whatever",
    "running",
    "x",
    "hiding",
    "hitting",
    "ctrl",
    "tilde",
    "toggling",
    "terminal",
    "whatever",
    "command",
    "environment",
    "equivalent",
    "hitting",
    "hide",
    "trash",
    "want",
    "remove",
    "start",
    "terminal",
    "hit",
    "trashcan",
    "pull",
    "back",
    "alright",
    "gon",
    "na",
    "start",
    "working",
    "ethers",
    "going",
    "start",
    "learning",
    "code",
    "transactions",
    "contract",
    "deployments",
    "everything",
    "programmatically",
    "relatively",
    "low",
    "level",
    "gon",
    "na",
    "learn",
    "deploy",
    "interact",
    "contracts",
    "using",
    "ethers",
    "js",
    "package",
    "get",
    "started",
    "going",
    "recommend",
    "create",
    "folder",
    "going",
    "put",
    "projects",
    "going",
    "create",
    "new",
    "directory",
    "called",
    "h",
    "hyphen",
    "fcc",
    "stands",
    "hard",
    "hat",
    "free",
    "code",
    "camp",
    "run",
    "command",
    "cd",
    "hh",
    "fcc",
    "create",
    "projects",
    "course",
    "moving",
    "forward",
    "one",
    "place",
    "get",
    "started",
    "whenever",
    "create",
    "new",
    "project",
    "always",
    "want",
    "create",
    "new",
    "folder",
    "create",
    "new",
    "folder",
    "going",
    "mk",
    "dir",
    "going",
    "call",
    "ethers",
    "simple",
    "storage",
    "like",
    "type",
    "ls",
    "see",
    "one",
    "folder",
    "named",
    "ethers",
    "simple",
    "storage",
    "ls",
    "list",
    "contents",
    "folder",
    "might",
    "lot",
    "folders",
    "one",
    "since",
    "created",
    "new",
    "folder",
    "type",
    "code",
    "ethers",
    "simple",
    "hit",
    "tab",
    "autocomplete",
    "enter",
    "visual",
    "studio",
    "code",
    "open",
    "new",
    "visual",
    "studio",
    "code",
    "inside",
    "either",
    "simple",
    "storage",
    "open",
    "terminal",
    "home",
    "directory",
    "workspace",
    "going",
    "simple",
    "storage",
    "pops",
    "work",
    "also",
    "hit",
    "file",
    "open",
    "folder",
    "open",
    "folder",
    "created",
    "want",
    "open",
    "open",
    "vs",
    "code",
    "open",
    "terminal",
    "see",
    "inside",
    "ether",
    "simple",
    "storage",
    "powerful",
    "create",
    "files",
    "able",
    "see",
    "files",
    "explorer",
    "button",
    "stands",
    "explorer",
    "click",
    "see",
    "different",
    "files",
    "going",
    "go",
    "ahead",
    "actually",
    "delete",
    "file",
    "dot",
    "txt",
    "actually",
    "going",
    "use",
    "part",
    "course",
    "actually",
    "going",
    "start",
    "jumping",
    "javascript",
    "since",
    "course",
    "javascript",
    "course",
    "unfamiliar",
    "javascript",
    "might",
    "little",
    "bit",
    "tricky",
    "want",
    "come",
    "better",
    "understanding",
    "javascript",
    "node",
    "js",
    "free",
    "code",
    "camp",
    "youtube",
    "video",
    "teaching",
    "jas",
    "beginners",
    "link",
    "github",
    "repo",
    "associated",
    "course",
    "also",
    "javascript",
    "free",
    "code",
    "camp",
    "video",
    "also",
    "going",
    "put",
    "description",
    "course",
    "keep",
    "mind",
    "javascript",
    "node",
    "js",
    "slightly",
    "different",
    "going",
    "go",
    "differences",
    "code",
    "along",
    "part",
    "learning",
    "one",
    "means",
    "learned",
    "majority",
    "want",
    "pause",
    "go",
    "videos",
    "continuing",
    "please",
    "feel",
    "free",
    "absolutely",
    "continue",
    "course",
    "get",
    "confused",
    "stuck",
    "javascript",
    "piece",
    "feel",
    "free",
    "pause",
    "google",
    "come",
    "back",
    "reiterate",
    "check",
    "javascript",
    "programming",
    "full",
    "course",
    "also",
    "node",
    "js",
    "full",
    "course",
    "going",
    "help",
    "like",
    "saying",
    "node",
    "js",
    "javascript",
    "runtime",
    "exactly",
    "javascript",
    "going",
    "write",
    "code",
    "javascript",
    "confusing",
    "worry",
    "right",
    "go",
    "course",
    "show",
    "differences",
    "basically",
    "think",
    "jas",
    "javascript",
    "kind",
    "thing",
    "big",
    "thing",
    "node",
    "js",
    "allows",
    "us",
    "write",
    "javascript",
    "code",
    "back",
    "end",
    "opposed",
    "running",
    "javascript",
    "front",
    "end",
    "javascript",
    "made",
    "browser",
    "run",
    "language",
    "like",
    "running",
    "inside",
    "know",
    "chrome",
    "brave",
    "firefox",
    "etc",
    "jas",
    "allows",
    "become",
    "scripting",
    "language",
    "back",
    "end",
    "language",
    "syntax",
    "front",
    "end",
    "javascript",
    "back",
    "end",
    "javascript",
    "js",
    "javascript",
    "going",
    "little",
    "bit",
    "different",
    "additionally",
    "go",
    "along",
    "code",
    "familiar",
    "typescript",
    "code",
    "going",
    "come",
    "typescript",
    "edition",
    "typescript",
    "known",
    "statically",
    "typed",
    "version",
    "javascript",
    "one",
    "typescript",
    "typescript",
    "edition",
    "go",
    "ahead",
    "fix",
    "remove",
    "one",
    "make",
    "clear",
    "typescript",
    "type",
    "safe",
    "version",
    "javascript",
    "confusing",
    "worry",
    "much",
    "going",
    "programming",
    "javascript",
    "code",
    "different",
    "enough",
    "show",
    "typescript",
    "well",
    "however",
    "going",
    "show",
    "typescript",
    "editions",
    "going",
    "really",
    "similar",
    "always",
    "refer",
    "back",
    "github",
    "repository",
    "see",
    "code",
    "typescript",
    "new",
    "space",
    "actually",
    "recommend",
    "go",
    "ahead",
    "start",
    "javascript",
    "learn",
    "typescript",
    "later",
    "typescript",
    "actually",
    "catches",
    "bugs",
    "early",
    "making",
    "lot",
    "easier",
    "code",
    "projects",
    "long",
    "run",
    "however",
    "take",
    "lot",
    "extra",
    "typing",
    "little",
    "bit",
    "frustrating",
    "learning",
    "types",
    "work",
    "beginners",
    "javascript",
    "little",
    "bit",
    "loose",
    "language",
    "lets",
    "us",
    "kind",
    "whatever",
    "want",
    "cause",
    "headache",
    "later",
    "run",
    "issues",
    "run",
    "bugs",
    "might",
    "good",
    "idea",
    "try",
    "typescript",
    "size",
    "see",
    "fares",
    "well",
    "let",
    "go",
    "ahead",
    "begin",
    "working",
    "local",
    "development",
    "environment",
    "getting",
    "set",
    "everything",
    "ethers",
    "jas",
    "javascript",
    "oops",
    "actually",
    "went",
    "renamed",
    "folder",
    "ether",
    "symbol",
    "storage",
    "dash",
    "fcc",
    "reason",
    "added",
    "dash",
    "fcc",
    "github",
    "repositories",
    "associated",
    "course",
    "github",
    "repos",
    "dash",
    "fcc",
    "know",
    "part",
    "hard",
    "hat",
    "javascript",
    "course",
    "awesome",
    "let",
    "jump",
    "let",
    "start",
    "working",
    "solidity",
    "smart",
    "contracts",
    "locally",
    "visual",
    "studio",
    "code",
    "probably",
    "tell",
    "name",
    "folder",
    "course",
    "looked",
    "code",
    "project",
    "going",
    "simple",
    "storage",
    "project",
    "developed",
    "locally",
    "using",
    "ethers",
    "first",
    "thing",
    "want",
    "want",
    "get",
    "smart",
    "contract",
    "code",
    "make",
    "sure",
    "explorer",
    "selected",
    "go",
    "ahead",
    "right",
    "click",
    "select",
    "new",
    "file",
    "simple",
    "storage",
    "close",
    "copy",
    "paste",
    "simple",
    "storage",
    "code",
    "last",
    "section",
    "vs",
    "code",
    "closed",
    "remix",
    "forgot",
    "go",
    "ethers",
    "simple",
    "storage",
    "fcc",
    "repo",
    "simple",
    "storage",
    "dot",
    "sol",
    "copy",
    "code",
    "come",
    "back",
    "select",
    "symbol",
    "storage",
    "saul",
    "paste",
    "important",
    "note",
    "visual",
    "studio",
    "code",
    "see",
    "little",
    "means",
    "file",
    "saved",
    "save",
    "git",
    "file",
    "save",
    "go",
    "away",
    "like",
    "hit",
    "command",
    "ctrl",
    "depending",
    "windows",
    "mac",
    "linux",
    "see",
    "code",
    "little",
    "bit",
    "hard",
    "read",
    "simple",
    "storage",
    "dot",
    "salt",
    "syntax",
    "highlighting",
    "saw",
    "remix",
    "want",
    "go",
    "ahead",
    "add",
    "visual",
    "studio",
    "code",
    "extension",
    "give",
    "syntax",
    "highlighting",
    "come",
    "bar",
    "looks",
    "like",
    "see",
    "left",
    "hand",
    "bar",
    "click",
    "three",
    "dots",
    "go",
    "ahead",
    "click",
    "extensions",
    "going",
    "going",
    "look",
    "solidity",
    "plus",
    "hard",
    "hat",
    "going",
    "install",
    "solidity",
    "plus",
    "hard",
    "hat",
    "extension",
    "vs",
    "code",
    "installed",
    "go",
    "back",
    "simple",
    "storage",
    "dot",
    "sole",
    "see",
    "highlighting",
    "back",
    "much",
    "easier",
    "read",
    "right",
    "good",
    "code",
    "syntax",
    "highlighting",
    "let",
    "add",
    "auto",
    "format",
    "default",
    "format",
    "right",
    "code",
    "pretty",
    "good",
    "way",
    "formatted",
    "accidentally",
    "stuff",
    "like",
    "like",
    "maybe",
    "even",
    "like",
    "add",
    "ton",
    "new",
    "lines",
    "etc",
    "code",
    "start",
    "look",
    "pretty",
    "gross",
    "even",
    "though",
    "code",
    "fine",
    "run",
    "exact",
    "way",
    "extra",
    "whitespace",
    "look",
    "good",
    "right",
    "due",
    "little",
    "bit",
    "hard",
    "read",
    "want",
    "want",
    "open",
    "settings",
    "adjust",
    "vias",
    "code",
    "auto",
    "formats",
    "whenever",
    "save",
    "whenever",
    "save",
    "whenever",
    "goes",
    "little",
    "white",
    "dot",
    "white",
    "dot",
    "whole",
    "thing",
    "gets",
    "automatically",
    "formatted",
    "looks",
    "really",
    "nice",
    "okay",
    "open",
    "command",
    "palette",
    "open",
    "command",
    "palette",
    "hit",
    "view",
    "command",
    "palette",
    "get",
    "little",
    "pop",
    "looks",
    "like",
    "another",
    "way",
    "open",
    "command",
    "palette",
    "gon",
    "na",
    "hit",
    "command",
    "shift",
    "p",
    "ctrl",
    "shift",
    "p",
    "depending",
    "mac",
    "linux",
    "windows",
    "want",
    "want",
    "type",
    "settings",
    "going",
    "open",
    "settings",
    "json",
    "want",
    "open",
    "default",
    "settings",
    "json",
    "want",
    "touch",
    "want",
    "open",
    "json",
    "settings",
    "also",
    "notice",
    "user",
    "settings",
    "workspace",
    "settings",
    "pieces",
    "adjust",
    "well",
    "going",
    "go",
    "right",
    "json",
    "settings",
    "already",
    "stuff",
    "might",
    "blank",
    "might",
    "stuff",
    "well",
    "going",
    "stuff",
    "already",
    "going",
    "add",
    "comma",
    "going",
    "quotes",
    "solidity",
    "close",
    "brackets",
    "gon",
    "na",
    "little",
    "colon",
    "something",
    "like",
    "means",
    "going",
    "apply",
    "settings",
    "visual",
    "studio",
    "code",
    "whenever",
    "working",
    "solidity",
    "one",
    "things",
    "going",
    "add",
    "going",
    "editor",
    "doc",
    "default",
    "matter",
    "might",
    "even",
    "get",
    "pop",
    "tells",
    "different",
    "things",
    "use",
    "default",
    "format",
    "default",
    "format",
    "going",
    "nanak",
    "foundation",
    "dot",
    "hard",
    "hat",
    "hyphens",
    "solidity",
    "mean",
    "time",
    "go",
    "format",
    "code",
    "use",
    "hard",
    "hat",
    "solidity",
    "plug",
    "default",
    "format",
    "hard",
    "hat",
    "solidity",
    "plugin",
    "comes",
    "formatting",
    "lot",
    "really",
    "useful",
    "tools",
    "us",
    "writing",
    "code",
    "part",
    "next",
    "thing",
    "going",
    "add",
    "format",
    "save",
    "already",
    "could",
    "add",
    "json",
    "going",
    "add",
    "json",
    "file",
    "going",
    "add",
    "overall",
    "file",
    "open",
    "command",
    "palette",
    "back",
    "type",
    "settings",
    "open",
    "user",
    "settings",
    "another",
    "really",
    "good",
    "place",
    "look",
    "add",
    "settings",
    "ui",
    "two",
    "essentially",
    "thing",
    "one",
    "dials",
    "little",
    "bit",
    "context",
    "versus",
    "settings",
    "json",
    "says",
    "okay",
    "give",
    "raw",
    "code",
    "tells",
    "us",
    "little",
    "bit",
    "use",
    "either",
    "one",
    "going",
    "look",
    "format",
    "save",
    "going",
    "want",
    "checked",
    "already",
    "means",
    "every",
    "time",
    "save",
    "vs",
    "code",
    "going",
    "try",
    "format",
    "code",
    "us",
    "checked",
    "settings",
    "dot",
    "json",
    "added",
    "remember",
    "want",
    "save",
    "remember",
    "see",
    "white",
    "dot",
    "means",
    "saved",
    "gon",
    "na",
    "want",
    "save",
    "close",
    "let",
    "close",
    "come",
    "back",
    "add",
    "bunch",
    "random",
    "new",
    "spaces",
    "whatever",
    "want",
    "make",
    "look",
    "little",
    "bit",
    "ugly",
    "save",
    "automatically",
    "reformat",
    "look",
    "much",
    "nicer",
    "right",
    "something",
    "like",
    "save",
    "reformats",
    "look",
    "much",
    "nicer",
    "one",
    "make",
    "readable",
    "readable",
    "anybody",
    "else",
    "looks",
    "code",
    "really",
    "nice",
    "line",
    "code",
    "settings",
    "dot",
    "json",
    "located",
    "full",
    "blockchain",
    "study",
    "also",
    "copy",
    "paste",
    "going",
    "end",
    "overriding",
    "default",
    "format",
    "another",
    "format",
    "called",
    "prettier",
    "pretty",
    "soon",
    "great",
    "default",
    "format",
    "feel",
    "like",
    "adding",
    "prettier",
    "code",
    "sometime",
    "future",
    "rely",
    "default",
    "formatter",
    "awesome",
    "formatting",
    "let",
    "also",
    "add",
    "default",
    "format",
    "javascript",
    "code",
    "test",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "file",
    "call",
    "deploy",
    "dot",
    "jas",
    "something",
    "like",
    "function",
    "hi",
    "console",
    "dot",
    "log",
    "hi",
    "add",
    "make",
    "look",
    "kind",
    "gross",
    "maybe",
    "something",
    "like",
    "hit",
    "save",
    "auto",
    "formatting",
    "great",
    "actually",
    "turn",
    "going",
    "back",
    "command",
    "palette",
    "saying",
    "save",
    "without",
    "formatting",
    "way",
    "saved",
    "formatted",
    "way",
    "add",
    "formatting",
    "gon",
    "na",
    "install",
    "another",
    "extension",
    "one",
    "going",
    "called",
    "prettier",
    "look",
    "prettier",
    "extensions",
    "want",
    "install",
    "prettier",
    "code",
    "formatter",
    "gon",
    "na",
    "go",
    "ahead",
    "install",
    "great",
    "installed",
    "prettier",
    "form",
    "code",
    "format",
    "works",
    "many",
    "languages",
    "like",
    "python",
    "javascript",
    "even",
    "solidity",
    "pretty",
    "soon",
    "going",
    "use",
    "prettier",
    "javascript",
    "solidity",
    "going",
    "use",
    "prettier",
    "javascript",
    "enable",
    "opening",
    "back",
    "command",
    "palette",
    "go",
    "preferences",
    "open",
    "settings",
    "way",
    "added",
    "solidity",
    "section",
    "going",
    "add",
    "javascript",
    "section",
    "going",
    "add",
    "comma",
    "quotes",
    "brackets",
    "going",
    "type",
    "javascript",
    "close",
    "colon",
    "brackets",
    "going",
    "thing",
    "door",
    "dot",
    "default",
    "matter",
    "net",
    "going",
    "going",
    "e",
    "benp",
    "prettier",
    "hyphen",
    "vs",
    "code",
    "make",
    "prettier",
    "default",
    "editor",
    "javascript",
    "like",
    "said",
    "pretty",
    "soon",
    "going",
    "prettier",
    "override",
    "solidity",
    "javascript",
    "going",
    "give",
    "prettier",
    "parameters",
    "matter",
    "uses",
    "code",
    "always",
    "exact",
    "formatting",
    "prettier",
    "default",
    "editor",
    "come",
    "back",
    "deploy",
    "dot",
    "j",
    "hit",
    "save",
    "format",
    "look",
    "little",
    "something",
    "like",
    "go",
    "ahead",
    "something",
    "like",
    "go",
    "ahead",
    "something",
    "like",
    "reformat",
    "look",
    "like",
    "look",
    "like",
    "additionally",
    "want",
    "go",
    "back",
    "command",
    "palette",
    "open",
    "user",
    "settings",
    "json",
    "mode",
    "go",
    "default",
    "format",
    "actually",
    "even",
    "select",
    "default",
    "format",
    "languages",
    "want",
    "use",
    "prettier",
    "formatters",
    "feel",
    "free",
    "go",
    "ahead",
    "alright",
    "great",
    "got",
    "javascript",
    "format",
    "well",
    "let",
    "start",
    "writing",
    "javascript",
    "code",
    "awesome",
    "code",
    "time",
    "us",
    "learn",
    "actually",
    "deploy",
    "contract",
    "using",
    "javascript",
    "going",
    "teach",
    "us",
    "lot",
    "transactions",
    "going",
    "hood",
    "even",
    "going",
    "hood",
    "remix",
    "remix",
    "usually",
    "hit",
    "compile",
    "button",
    "hit",
    "deploy",
    "button",
    "really",
    "javascript",
    "actually",
    "going",
    "create",
    "functions",
    "going",
    "help",
    "us",
    "mentioned",
    "part",
    "course",
    "going",
    "start",
    "working",
    "javascript",
    "optionally",
    "typescript",
    "like",
    "like",
    "said",
    "sections",
    "come",
    "typescript",
    "edition",
    "well",
    "let",
    "set",
    "deployed",
    "js",
    "script",
    "actually",
    "deploy",
    "simple",
    "storage",
    "dot",
    "soul",
    "get",
    "started",
    "well",
    "let",
    "first",
    "learn",
    "run",
    "script",
    "using",
    "javascript",
    "node",
    "j",
    "want",
    "print",
    "line",
    "print",
    "something",
    "terminal",
    "something",
    "called",
    "console",
    "dot",
    "log",
    "console",
    "dot",
    "log",
    "hi",
    "hit",
    "save",
    "open",
    "terminal",
    "run",
    "node",
    "print",
    "high",
    "node",
    "say",
    "hey",
    "want",
    "run",
    "javascript",
    "code",
    "using",
    "node",
    "js",
    "languages",
    "might",
    "familiar",
    "sometimes",
    "python",
    "know",
    "deployed",
    "py",
    "java",
    "c",
    "deploy",
    "dot",
    "java",
    "know",
    "etc",
    "javascript",
    "since",
    "front",
    "end",
    "back",
    "end",
    "javascript",
    "different",
    "run",
    "code",
    "back",
    "end",
    "node",
    "javascript",
    "lot",
    "things",
    "see",
    "something",
    "like",
    "solidity",
    "little",
    "bit",
    "looser",
    "structure",
    "wanted",
    "create",
    "variable",
    "could",
    "say",
    "let",
    "variable",
    "equals",
    "five",
    "kind",
    "similar",
    "solidity",
    "like",
    "256",
    "variable",
    "equals",
    "five",
    "javascript",
    "use",
    "let",
    "var",
    "const",
    "print",
    "console",
    "dot",
    "log",
    "variable",
    "saved",
    "javascript",
    "optional",
    "whether",
    "actually",
    "want",
    "semicolons",
    "think",
    "prettier",
    "defaults",
    "putting",
    "semicolons",
    "get",
    "rid",
    "near",
    "future",
    "terminal",
    "start",
    "typing",
    "name",
    "file",
    "hit",
    "tab",
    "could",
    "autocomplete",
    "rest",
    "file",
    "name",
    "node",
    "deploy",
    "hit",
    "tab",
    "autocomplete",
    "hit",
    "enter",
    "get",
    "hi",
    "get",
    "five",
    "since",
    "prints",
    "hi",
    "prints",
    "five",
    "javascript",
    "automatically",
    "starts",
    "whatever",
    "code",
    "top",
    "file",
    "console",
    "dot",
    "log",
    "first",
    "variable",
    "one",
    "well",
    "however",
    "good",
    "practice",
    "actually",
    "wrap",
    "everything",
    "want",
    "main",
    "function",
    "run",
    "main",
    "function",
    "could",
    "top",
    "say",
    "function",
    "mean",
    "add",
    "parentheses",
    "brackets",
    "closing",
    "bracket",
    "bottom",
    "hit",
    "save",
    "auto",
    "format",
    "right",
    "run",
    "nothing",
    "happen",
    "wrapped",
    "code",
    "main",
    "function",
    "run",
    "node",
    "deployed",
    "jess",
    "nothing",
    "happens",
    "need",
    "something",
    "call",
    "main",
    "function",
    "take",
    "main",
    "function",
    "call",
    "main",
    "jobs",
    "code",
    "actually",
    "going",
    "say",
    "ah",
    "first",
    "line",
    "script",
    "actually",
    "main",
    "function",
    "node",
    "deploy",
    "dot",
    "j",
    "run",
    "high",
    "five",
    "want",
    "going",
    "setup",
    "scripts",
    "moving",
    "forward",
    "including",
    "scripts",
    "write",
    "get",
    "hard",
    "hat",
    "however",
    "going",
    "one",
    "major",
    "difference",
    "instead",
    "regular",
    "functions",
    "actually",
    "going",
    "use",
    "something",
    "called",
    "async",
    "functions",
    "going",
    "something",
    "called",
    "asynchronous",
    "programming",
    "say",
    "next",
    "really",
    "confusing",
    "let",
    "slow",
    "feel",
    "free",
    "go",
    "ahead",
    "watch",
    "javascript",
    "course",
    "learn",
    "also",
    "let",
    "know",
    "hey",
    "async",
    "function",
    "need",
    "aware",
    "working",
    "okay",
    "want",
    "give",
    "quick",
    "bit",
    "background",
    "asynchronous",
    "programming",
    "far",
    "programming",
    "done",
    "synchronous",
    "solidity",
    "example",
    "programming",
    "language",
    "synchronous",
    "synchronous",
    "means",
    "goes",
    "one",
    "line",
    "another",
    "code",
    "looks",
    "like",
    "synchronous",
    "write",
    "main",
    "function",
    "first",
    "thing",
    "actually",
    "gets",
    "called",
    "console",
    "dot",
    "log",
    "variable",
    "equals",
    "five",
    "console",
    "dot",
    "log",
    "synchronous",
    "programming",
    "javascript",
    "solidity",
    "synchronously",
    "programmed",
    "exceptions",
    "working",
    "oracles",
    "everything",
    "synchronous",
    "javascript",
    "asynchronous",
    "meaning",
    "actually",
    "code",
    "running",
    "time",
    "good",
    "example",
    "like",
    "use",
    "understand",
    "difference",
    "cooking",
    "synchronous",
    "programming",
    "cooking",
    "might",
    "put",
    "popcorn",
    "microwave",
    "wait",
    "popcorn",
    "finish",
    "maybe",
    "pour",
    "drinks",
    "everyone",
    "synchronous",
    "programming",
    "might",
    "little",
    "bit",
    "weird",
    "put",
    "popcorn",
    "microwave",
    "stare",
    "waiting",
    "finish",
    "pour",
    "drinks",
    "typically",
    "pour",
    "drinks",
    "popcorn",
    "microwave",
    "asynchronous",
    "programming",
    "comes",
    "setting",
    "movie",
    "night",
    "asynchronous",
    "would",
    "put",
    "popcorn",
    "microwave",
    "popcorn",
    "microwave",
    "drinks",
    "everyone",
    "wait",
    "popcorn",
    "finish",
    "since",
    "nothing",
    "left",
    "make",
    "sense",
    "wait",
    "popcorn",
    "finish",
    "pour",
    "drinks",
    "go",
    "ahead",
    "pour",
    "drinks",
    "right",
    "away",
    "wait",
    "popcorn",
    "finish",
    "asynchronous",
    "programming",
    "way",
    "us",
    "stuff",
    "without",
    "waiting",
    "around",
    "things",
    "finish",
    "really",
    "advantageous",
    "javascript",
    "default",
    "allows",
    "us",
    "asynchronous",
    "programming",
    "however",
    "sometimes",
    "want",
    "wait",
    "popcorn",
    "finish",
    "example",
    "instead",
    "pouring",
    "drinks",
    "maybe",
    "next",
    "thing",
    "instead",
    "pouring",
    "drinks",
    "placed",
    "salt",
    "popcorn",
    "course",
    "want",
    "play",
    "salt",
    "popcorn",
    "wait",
    "popcorn",
    "get",
    "microwave",
    "even",
    "though",
    "placing",
    "popcorn",
    "microwave",
    "wait",
    "time",
    "need",
    "able",
    "tell",
    "code",
    "want",
    "actually",
    "wait",
    "good",
    "go",
    "another",
    "task",
    "kind",
    "difference",
    "leave",
    "links",
    "github",
    "repo",
    "associated",
    "course",
    "understand",
    "little",
    "bit",
    "better",
    "functions",
    "functions",
    "come",
    "waiting",
    "period",
    "return",
    "something",
    "called",
    "problem",
    "put",
    "popcorn",
    "microwave",
    "function",
    "javascript",
    "would",
    "promise",
    "based",
    "function",
    "promise",
    "either",
    "pending",
    "fulfilled",
    "rejected",
    "know",
    "popcorn",
    "done",
    "popcorn",
    "method",
    "putting",
    "popcorn",
    "microwave",
    "function",
    "javascript",
    "waiting",
    "popcorn",
    "finish",
    "pending",
    "state",
    "popcorn",
    "finished",
    "would",
    "fulfilled",
    "aborted",
    "halfway",
    "stopped",
    "waiting",
    "would",
    "rejected",
    "putting",
    "popcorn",
    "microwave",
    "returns",
    "promise",
    "promise",
    "tell",
    "code",
    "hey",
    "want",
    "wait",
    "popcorn",
    "finish",
    "go",
    "ahead",
    "keep",
    "stuff",
    "let",
    "put",
    "together",
    "javascript",
    "syntax",
    "let",
    "say",
    "going",
    "setting",
    "movie",
    "night",
    "need",
    "cook",
    "popcorn",
    "pour",
    "drinks",
    "everybody",
    "need",
    "start",
    "movie",
    "let",
    "write",
    "pseudocode",
    "pretend",
    "code",
    "would",
    "look",
    "like",
    "actually",
    "function",
    "create",
    "function",
    "called",
    "setup",
    "movie",
    "night",
    "would",
    "say",
    "okay",
    "first",
    "thing",
    "need",
    "okay",
    "need",
    "cook",
    "popcorn",
    "let",
    "say",
    "cook",
    "popcorn",
    "function",
    "say",
    "okay",
    "cook",
    "popcorn",
    "next",
    "thing",
    "gon",
    "na",
    "gon",
    "na",
    "pour",
    "drinks",
    "drink",
    "call",
    "pour",
    "drinks",
    "function",
    "thing",
    "want",
    "start",
    "movie",
    "popcorn",
    "cooked",
    "drinks",
    "poured",
    "either",
    "one",
    "returned",
    "promise",
    "either",
    "one",
    "returns",
    "promise",
    "like",
    "cook",
    "popcorn",
    "example",
    "would",
    "need",
    "tell",
    "code",
    "actually",
    "wait",
    "popcorn",
    "finish",
    "cook",
    "popcorn",
    "going",
    "function",
    "could",
    "say",
    "let",
    "status",
    "equals",
    "cook",
    "popcorn",
    "popcorn",
    "cooked",
    "status",
    "going",
    "ending",
    "popcorn",
    "gets",
    "cooked",
    "fulfilled",
    "popcorn",
    "breaks",
    "microwave",
    "explodes",
    "status",
    "would",
    "rejected",
    "want",
    "status",
    "pending",
    "situation",
    "move",
    "want",
    "start",
    "movie",
    "two",
    "functions",
    "completed",
    "let",
    "say",
    "return",
    "promises",
    "things",
    "need",
    "tell",
    "code",
    "hey",
    "wait",
    "wait",
    "cook",
    "popcorn",
    "poor",
    "drinks",
    "finish",
    "without",
    "getting",
    "deep",
    "weeds",
    "works",
    "one",
    "easiest",
    "things",
    "see",
    "us",
    "use",
    "syntax",
    "quite",
    "often",
    "turn",
    "function",
    "async",
    "function",
    "functions",
    "async",
    "get",
    "access",
    "keyword",
    "called",
    "await",
    "await",
    "keyword",
    "tells",
    "promise",
    "based",
    "function",
    "wait",
    "promise",
    "fulfilled",
    "rejected",
    "say",
    "okay",
    "want",
    "await",
    "popcorn",
    "cook",
    "want",
    "await",
    "pour",
    "drinks",
    "go",
    "ahead",
    "start",
    "movie",
    "start",
    "movie",
    "two",
    "completed",
    "throughout",
    "code",
    "see",
    "await",
    "keyword",
    "used",
    "lot",
    "used",
    "async",
    "functions",
    "basically",
    "whenever",
    "see",
    "await",
    "keyword",
    "ah",
    "okay",
    "function",
    "called",
    "promise",
    "based",
    "want",
    "move",
    "next",
    "step",
    "function",
    "completed",
    "little",
    "bit",
    "promises",
    "asynchronous",
    "programming",
    "hopefully",
    "clear",
    "like",
    "said",
    "links",
    "description",
    "learn",
    "asynchronous",
    "programming",
    "reason",
    "wanted",
    "go",
    "functions",
    "going",
    "working",
    "going",
    "asynchronous",
    "example",
    "deploy",
    "contract",
    "well",
    "wait",
    "deployed",
    "use",
    "synchronous",
    "programming",
    "leave",
    "function",
    "main",
    "like",
    "would",
    "happen",
    "would",
    "write",
    "code",
    "like",
    "contract",
    "dot",
    "deploy",
    "would",
    "wait",
    "finish",
    "obviously",
    "wait",
    "finish",
    "try",
    "run",
    "code",
    "contract",
    "finished",
    "deploying",
    "going",
    "work",
    "want",
    "want",
    "main",
    "function",
    "async",
    "function",
    "wait",
    "contracts",
    "deploy",
    "wait",
    "things",
    "happen",
    "wait",
    "popcorn",
    "finish",
    "flexibility",
    "tell",
    "code",
    "either",
    "wait",
    "popcorn",
    "finish",
    "continue",
    "main",
    "function",
    "async",
    "function",
    "going",
    "add",
    "code",
    "main",
    "function",
    "code",
    "added",
    "syntax",
    "working",
    "asynchronous",
    "functions",
    "part",
    "confusing",
    "going",
    "say",
    "absolute",
    "worry",
    "want",
    "try",
    "understand",
    "later",
    "fine",
    "following",
    "along",
    "going",
    "add",
    "add",
    "catch",
    "air",
    "air",
    "follow",
    "along",
    "typing",
    "copy",
    "paste",
    "code",
    "basically",
    "allows",
    "us",
    "main",
    "function",
    "asynchronous",
    "function",
    "call",
    "main",
    "function",
    "syntax",
    "waiting",
    "basically",
    "finish",
    "printing",
    "errors",
    "gets",
    "big",
    "lump",
    "code",
    "like",
    "going",
    "big",
    "clump",
    "code",
    "honestly",
    "copy",
    "paste",
    "great",
    "asynchronous",
    "function",
    "main",
    "code",
    "lump",
    "code",
    "basically",
    "calls",
    "main",
    "asynchronous",
    "function",
    "okay",
    "great",
    "gon",
    "na",
    "delete",
    "still",
    "find",
    "common",
    "github",
    "repo",
    "associated",
    "course",
    "awesome",
    "okay",
    "real",
    "basic",
    "setup",
    "let",
    "go",
    "ahead",
    "start",
    "coding",
    "set",
    "apart",
    "confusing",
    "async",
    "await",
    "stuff",
    "confusing",
    "worry",
    "much",
    "make",
    "sense",
    "progress",
    "code",
    "basically",
    "going",
    "inside",
    "async",
    "function",
    "main",
    "going",
    "main",
    "script",
    "deploying",
    "simple",
    "storage",
    "dot",
    "soul",
    "store",
    "deploy",
    "script",
    "going",
    "replicate",
    "exactly",
    "goes",
    "remix",
    "remix",
    "first",
    "thing",
    "always",
    "well",
    "first",
    "thing",
    "would",
    "actually",
    "compile",
    "code",
    "going",
    "want",
    "compile",
    "code",
    "javascript",
    "project",
    "well",
    "order",
    "us",
    "compile",
    "simple",
    "storage",
    "contract",
    "going",
    "use",
    "tool",
    "called",
    "silk",
    "jas",
    "javascript",
    "actually",
    "way",
    "install",
    "projects",
    "directly",
    "setups",
    "folders",
    "scroll",
    "silk",
    "jas",
    "exactly",
    "looking",
    "way",
    "compile",
    "contract",
    "imports",
    "contracts",
    "via",
    "relative",
    "paths",
    "see",
    "section",
    "readme",
    "documentation",
    "something",
    "like",
    "javascript",
    "compatible",
    "node",
    "js",
    "usage",
    "says",
    "use",
    "latest",
    "stable",
    "version",
    "solidity",
    "compiler",
    "via",
    "node",
    "js",
    "install",
    "via",
    "npm",
    "npm",
    "install",
    "npm",
    "known",
    "package",
    "manager",
    "actually",
    "installed",
    "npm",
    "installing",
    "jess",
    "right",
    "dash",
    "dash",
    "version",
    "also",
    "able",
    "npm",
    "dash",
    "dash",
    "version",
    "another",
    "tool",
    "comes",
    "something",
    "called",
    "core",
    "pack",
    "type",
    "core",
    "pack",
    "dash",
    "dash",
    "version",
    "install",
    "npm",
    "using",
    "npm",
    "install",
    "silk",
    "however",
    "like",
    "yarn",
    "package",
    "manager",
    "little",
    "bit",
    "better",
    "actually",
    "going",
    "install",
    "yarn",
    "package",
    "manager",
    "instead",
    "package",
    "management",
    "go",
    "installation",
    "page",
    "newer",
    "way",
    "install",
    "yarn",
    "running",
    "core",
    "pack",
    "enable",
    "older",
    "way",
    "install",
    "npm",
    "go",
    "ahead",
    "run",
    "core",
    "pack",
    "enable",
    "finishes",
    "able",
    "run",
    "yarn",
    "dash",
    "dash",
    "version",
    "alternatively",
    "run",
    "npm",
    "dash",
    "g",
    "core",
    "pack",
    "run",
    "core",
    "pack",
    "enable",
    "last",
    "option",
    "run",
    "npm",
    "dash",
    "g",
    "yarn",
    "install",
    "yarn",
    "globally",
    "system",
    "considered",
    "outdated",
    "way",
    "install",
    "yarn",
    "ideally",
    "run",
    "core",
    "pack",
    "enable",
    "case",
    "run",
    "run",
    "yarn",
    "dash",
    "dash",
    "version",
    "get",
    "something",
    "looks",
    "like",
    "yarn",
    "actually",
    "use",
    "yarn",
    "install",
    "projects",
    "instead",
    "npm",
    "back",
    "silk",
    "jas",
    "says",
    "npm",
    "install",
    "soak",
    "yarn",
    "equivalents",
    "npm",
    "install",
    "sock",
    "going",
    "yarn",
    "add",
    "sock",
    "actually",
    "go",
    "ahead",
    "install",
    "solc",
    "project",
    "open",
    "folders",
    "actually",
    "see",
    "added",
    "couple",
    "different",
    "folders",
    "first",
    "added",
    "package",
    "dot",
    "json",
    "package",
    "dot",
    "json",
    "file",
    "tells",
    "us",
    "lot",
    "project",
    "dependencies",
    "works",
    "example",
    "installed",
    "soap",
    "package",
    "point",
    "yarn",
    "dot",
    "lock",
    "tells",
    "us",
    "exact",
    "version",
    "different",
    "packages",
    "project",
    "example",
    "reason",
    "important",
    "solc",
    "ton",
    "dependencies",
    "well",
    "yarn",
    "dot",
    "lock",
    "tells",
    "us",
    "exactly",
    "version",
    "solc",
    "different",
    "dependencies",
    "solchen",
    "project",
    "add",
    "autogenerated",
    "file",
    "edit",
    "file",
    "directly",
    "final",
    "bit",
    "got",
    "node",
    "modules",
    "folder",
    "node",
    "modules",
    "folder",
    "going",
    "installed",
    "code",
    "downloaded",
    "example",
    "look",
    "node",
    "modules",
    "see",
    "sock",
    "folder",
    "inside",
    "sock",
    "folder",
    "code",
    "associated",
    "soap",
    "package",
    "installed",
    "since",
    "working",
    "zero",
    "point",
    "slowly",
    "actually",
    "want",
    "install",
    "specific",
    "version",
    "going",
    "yarn",
    "add",
    "solc",
    "zero",
    "point",
    "dash",
    "fixed",
    "see",
    "package",
    "dot",
    "json",
    "see",
    "zero",
    "point",
    "dash",
    "fixed",
    "dependencies",
    "section",
    "sulk",
    "normally",
    "add",
    "salt",
    "version",
    "like",
    "yarn",
    "add",
    "zero",
    "point",
    "issue",
    "zero",
    "point",
    "zero",
    "point",
    "dash",
    "fixed",
    "find",
    "different",
    "releases",
    "different",
    "versions",
    "go",
    "sulk",
    "jas",
    "releases",
    "tags",
    "alright",
    "great",
    "sold",
    "ability",
    "actually",
    "compile",
    "contracts",
    "could",
    "either",
    "compile",
    "code",
    "automatically",
    "run",
    "whenever",
    "hit",
    "deploy",
    "could",
    "compile",
    "separately",
    "want",
    "go",
    "back",
    "section",
    "example",
    "sculpt",
    "jas",
    "repository",
    "shows",
    "actually",
    "compile",
    "silk",
    "right",
    "code",
    "actually",
    "going",
    "compile",
    "separately",
    "using",
    "soap",
    "jas",
    "command",
    "yarn",
    "command",
    "used",
    "install",
    "dependencies",
    "used",
    "run",
    "scripts",
    "go",
    "sulk",
    "jas",
    "scroll",
    "says",
    "order",
    "use",
    "command",
    "line",
    "actually",
    "need",
    "install",
    "globally",
    "want",
    "install",
    "globally",
    "using",
    "yarn",
    "global",
    "add",
    "solc",
    "zero",
    "point",
    "dash",
    "fixed",
    "absolutely",
    "go",
    "ahead",
    "however",
    "since",
    "inside",
    "folder",
    "yarn",
    "dot",
    "lock",
    "package",
    "json",
    "node",
    "modules",
    "yarn",
    "smart",
    "enough",
    "know",
    "looking",
    "soak",
    "folder",
    "actually",
    "go",
    "ahead",
    "compile",
    "contract",
    "using",
    "yarn",
    "solc",
    "jess",
    "want",
    "see",
    "different",
    "commands",
    "soak",
    "jas",
    "allows",
    "run",
    "yarn",
    "jas",
    "dash",
    "dash",
    "help",
    "see",
    "spit",
    "list",
    "different",
    "options",
    "soft",
    "jas",
    "also",
    "run",
    "yarn",
    "jas",
    "dash",
    "dash",
    "version",
    "make",
    "sure",
    "correct",
    "version",
    "indeed",
    "zero",
    "point",
    "actually",
    "compile",
    "simple",
    "storage",
    "soul",
    "let",
    "run",
    "compliation",
    "command",
    "run",
    "yarn",
    "j",
    "dash",
    "dash",
    "bin",
    "since",
    "want",
    "binary",
    "dash",
    "dash",
    "abi",
    "since",
    "also",
    "want",
    "abi",
    "dash",
    "dash",
    "include",
    "path",
    "node",
    "modules",
    "since",
    "want",
    "include",
    "contracts",
    "files",
    "node",
    "modules",
    "using",
    "project",
    "future",
    "need",
    "include",
    "dash",
    "dash",
    "include",
    "path",
    "node",
    "modules",
    "dash",
    "dash",
    "base",
    "path",
    "period",
    "period",
    "means",
    "base",
    "path",
    "going",
    "folder",
    "dash",
    "period",
    "means",
    "going",
    "output",
    "compiled",
    "binary",
    "abi",
    "folder",
    "finally",
    "simple",
    "storage",
    "dot",
    "soul",
    "since",
    "contract",
    "want",
    "compile",
    "auto",
    "completed",
    "simple",
    "storage",
    "simple",
    "storage",
    "typing",
    "simple",
    "hitting",
    "tab",
    "let",
    "go",
    "ahead",
    "hit",
    "enter",
    "see",
    "running",
    "command",
    "compile",
    "contract",
    "see",
    "two",
    "files",
    "get",
    "output",
    "one",
    "called",
    "simple",
    "storage",
    "soul",
    "underscore",
    "simple",
    "storage",
    "api",
    "simple",
    "storage",
    "sol",
    "underscore",
    "simple",
    "storage",
    "dot",
    "bin",
    "abi",
    "obviously",
    "abi",
    "contract",
    "need",
    "future",
    "bin",
    "going",
    "binary",
    "really",
    "low",
    "level",
    "code",
    "back",
    "remix",
    "compile",
    "simple",
    "storage",
    "soul",
    "actually",
    "look",
    "compliation",
    "details",
    "like",
    "abi",
    "got",
    "bytecode",
    "look",
    "object",
    "60806",
    "binary",
    "alright",
    "great",
    "compiled",
    "contracts",
    "obviously",
    "hit",
    "keyboard",
    "actually",
    "cycle",
    "recent",
    "terminal",
    "commands",
    "hit",
    "enough",
    "see",
    "command",
    "ran",
    "typing",
    "hitting",
    "whole",
    "bunch",
    "every",
    "single",
    "time",
    "going",
    "really",
    "annoying",
    "anytime",
    "want",
    "recompile",
    "add",
    "script",
    "section",
    "package",
    "dot",
    "json",
    "shorten",
    "yarn",
    "scripts",
    "us",
    "back",
    "package",
    "dot",
    "json",
    "lot",
    "comma",
    "add",
    "section",
    "called",
    "scripts",
    "add",
    "colon",
    "brackets",
    "say",
    "anytime",
    "say",
    "compile",
    "run",
    "long",
    "command",
    "compile",
    "put",
    "quotes",
    "paste",
    "instead",
    "typing",
    "whole",
    "thing",
    "long",
    "folder",
    "package",
    "json",
    "run",
    "yarn",
    "compile",
    "run",
    "whole",
    "script",
    "us",
    "without",
    "us",
    "type",
    "whole",
    "thing",
    "scripts",
    "really",
    "useful",
    "way",
    "make",
    "easier",
    "us",
    "run",
    "long",
    "commands",
    "right",
    "great",
    "code",
    "compiled",
    "going",
    "equivalent",
    "us",
    "hitting",
    "compile",
    "button",
    "us",
    "actually",
    "go",
    "ahead",
    "deploy",
    "simple",
    "storage",
    "compiled",
    "let",
    "learn",
    "actually",
    "deploy",
    "thing",
    "remember",
    "remix",
    "actually",
    "deployed",
    "one",
    "two",
    "different",
    "places",
    "deployed",
    "either",
    "javascript",
    "vm",
    "injected",
    "web",
    "three",
    "metamask",
    "let",
    "learn",
    "first",
    "ad",
    "javascript",
    "vm",
    "learn",
    "use",
    "injected",
    "web",
    "three",
    "meta",
    "mask",
    "connection",
    "actual",
    "test",
    "net",
    "order",
    "deploy",
    "javascript",
    "virtual",
    "invite",
    "kind",
    "fake",
    "blockchain",
    "gon",
    "na",
    "need",
    "get",
    "fake",
    "blockchain",
    "future",
    "going",
    "using",
    "hardhead",
    "runtime",
    "environment",
    "javascript",
    "virtual",
    "machine",
    "aka",
    "fake",
    "blockchain",
    "section",
    "want",
    "us",
    "use",
    "tool",
    "called",
    "ganache",
    "link",
    "github",
    "repository",
    "ganache",
    "similar",
    "virtual",
    "machine",
    "remix",
    "fake",
    "blockchain",
    "run",
    "locally",
    "actually",
    "test",
    "deploy",
    "run",
    "code",
    "also",
    "nice",
    "way",
    "see",
    "things",
    "going",
    "blockchain",
    "let",
    "go",
    "ahead",
    "spin",
    "ganache",
    "application",
    "install",
    "ganache",
    "application",
    "look",
    "little",
    "something",
    "like",
    "spin",
    "fake",
    "blockchain",
    "really",
    "quickly",
    "go",
    "ahead",
    "click",
    "quickstart",
    "spin",
    "fake",
    "blockchain",
    "running",
    "locally",
    "computer",
    "right",
    "fantastic",
    "comes",
    "whole",
    "bunch",
    "fake",
    "accounts",
    "exactly",
    "like",
    "remix",
    "comes",
    "ton",
    "fake",
    "accounts",
    "100",
    "ether",
    "ganache",
    "comes",
    "bunch",
    "fake",
    "accounts",
    "100",
    "ether",
    "also",
    "come",
    "private",
    "keys",
    "use",
    "applications",
    "actually",
    "take",
    "control",
    "fake",
    "accounts",
    "remember",
    "use",
    "private",
    "keys",
    "public",
    "blockchain",
    "development",
    "purposes",
    "lot",
    "people",
    "know",
    "private",
    "keys",
    "code",
    "one",
    "first",
    "things",
    "going",
    "need",
    "actually",
    "connect",
    "blockchain",
    "remix",
    "little",
    "bit",
    "behind",
    "scenes",
    "choosing",
    "javascript",
    "virtual",
    "machine",
    "remix",
    "chooses",
    "fake",
    "blockchain",
    "runs",
    "choose",
    "injected",
    "web",
    "three",
    "know",
    "meta",
    "mask",
    "pops",
    "connects",
    "meta",
    "mask",
    "connection",
    "remix",
    "actually",
    "something",
    "really",
    "interesting",
    "connecting",
    "meta",
    "mask",
    "magical",
    "powers",
    "actually",
    "connecting",
    "meta",
    "mask",
    "connection",
    "blockchain",
    "behind",
    "scenes",
    "open",
    "meta",
    "mask",
    "go",
    "select",
    "networks",
    "select",
    "ad",
    "networks",
    "get",
    "popped",
    "ui",
    "looks",
    "like",
    "go",
    "back",
    "hit",
    "select",
    "networks",
    "actually",
    "see",
    "information",
    "different",
    "networks",
    "one",
    "main",
    "things",
    "see",
    "networks",
    "something",
    "called",
    "rpc",
    "url",
    "rpc",
    "stands",
    "remote",
    "procedure",
    "call",
    "url",
    "uniform",
    "resource",
    "locator",
    "rpc",
    "url",
    "stands",
    "connection",
    "blockchain",
    "node",
    "somebody",
    "running",
    "url",
    "connects",
    "us",
    "make",
    "api",
    "calls",
    "interact",
    "blockchain",
    "node",
    "blockchain",
    "nodes",
    "run",
    "software",
    "expose",
    "api",
    "call",
    "look",
    "ngo",
    "aetherium",
    "website",
    "actually",
    "instructions",
    "run",
    "blockchain",
    "node",
    "real",
    "blockchain",
    "like",
    "aetherium",
    "flags",
    "like",
    "dash",
    "http",
    "dot",
    "adr",
    "expose",
    "rpc",
    "endpoints",
    "ever",
    "want",
    "run",
    "node",
    "real",
    "blockchain",
    "node",
    "instead",
    "using",
    "meta",
    "masks",
    "providers",
    "going",
    "go",
    "use",
    "go",
    "aetherium",
    "whatever",
    "blockchain",
    "working",
    "software",
    "run",
    "notes",
    "rpc",
    "url",
    "allows",
    "us",
    "connect",
    "rinkeby",
    "rinkeby",
    "ropsten",
    "ropsten",
    "main",
    "net",
    "main",
    "net",
    "etc",
    "going",
    "way",
    "going",
    "connect",
    "ganache",
    "blockchain",
    "running",
    "inside",
    "application",
    "look",
    "top",
    "ganache",
    "section",
    "called",
    "rpc",
    "server",
    "endpoint",
    "ganache",
    "node",
    "right",
    "copy",
    "go",
    "back",
    "vs",
    "code",
    "paste",
    "see",
    "connect",
    "instead",
    "http",
    "capitals",
    "gon",
    "na",
    "b",
    "lowercase",
    "instead",
    "uppercase",
    "lowercase",
    "correct",
    "looks",
    "nicer",
    "endpoint",
    "hypothetically",
    "start",
    "making",
    "calls",
    "api",
    "calls",
    "endpoint",
    "go",
    "json",
    "rpc",
    "specification",
    "link",
    "github",
    "repo",
    "actually",
    "see",
    "different",
    "calls",
    "make",
    "directly",
    "node",
    "get",
    "different",
    "information",
    "eath",
    "get",
    "blocked",
    "hash",
    "eath",
    "get",
    "blocked",
    "number",
    "wonderful",
    "pieces",
    "making",
    "api",
    "calls",
    "directly",
    "little",
    "bit",
    "annoying",
    "want",
    "absolutely",
    "using",
    "api",
    "endpoint",
    "like",
    "axios",
    "fetch",
    "however",
    "going",
    "use",
    "rapper",
    "interact",
    "node",
    "things",
    "like",
    "deploy",
    "interact",
    "things",
    "blockchain",
    "node",
    "finally",
    "ethers",
    "comes",
    "play",
    "ethers",
    "js",
    "one",
    "popular",
    "javascript",
    "based",
    "tooling",
    "kits",
    "allows",
    "us",
    "interact",
    "different",
    "blockchains",
    "rappers",
    "make",
    "api",
    "calls",
    "things",
    "aetherium",
    "polygon",
    "avalanche",
    "evm",
    "compatible",
    "chain",
    "incredibly",
    "popular",
    "package",
    "thing",
    "going",
    "web",
    "probably",
    "heard",
    "probably",
    "see",
    "little",
    "bit",
    "throughout",
    "course",
    "throughout",
    "web",
    "three",
    "journey",
    "reason",
    "using",
    "ethers",
    "ethers",
    "main",
    "tool",
    "powers",
    "hard",
    "hat",
    "environment",
    "really",
    "enjoy",
    "remember",
    "ever",
    "get",
    "lost",
    "always",
    "come",
    "back",
    "documentation",
    "install",
    "see",
    "run",
    "npm",
    "install",
    "ethers",
    "going",
    "yarn",
    "add",
    "ethers",
    "see",
    "package",
    "json",
    "ethers",
    "added",
    "awesome",
    "back",
    "code",
    "going",
    "import",
    "ethers",
    "script",
    "use",
    "wonderful",
    "tools",
    "comes",
    "say",
    "const",
    "ethers",
    "equals",
    "require",
    "ethers",
    "typescript",
    "edition",
    "course",
    "import",
    "instead",
    "require",
    "ethers",
    "create",
    "provider",
    "object",
    "main",
    "function",
    "reason",
    "pull",
    "ethers",
    "outside",
    "main",
    "function",
    "want",
    "pull",
    "package",
    "script",
    "call",
    "main",
    "want",
    "make",
    "sure",
    "done",
    "first",
    "see",
    "kind",
    "normal",
    "setup",
    "scripts",
    "top",
    "import",
    "dependencies",
    "external",
    "packages",
    "main",
    "function",
    "call",
    "main",
    "function",
    "bottom",
    "const",
    "keyword",
    "similar",
    "let",
    "const",
    "keyword",
    "makes",
    "ethers",
    "ca",
    "changed",
    "ca",
    "change",
    "ethers",
    "variable",
    "anytime",
    "use",
    "const",
    "require",
    "function",
    "us",
    "import",
    "ethers",
    "package",
    "remix",
    "behind",
    "scenes",
    "way",
    "going",
    "code",
    "going",
    "say",
    "const",
    "provider",
    "equals",
    "new",
    "ethers",
    "dot",
    "providers",
    "dot",
    "json",
    "rpc",
    "provider",
    "going",
    "pass",
    "string",
    "provider",
    "saying",
    "hey",
    "going",
    "connect",
    "url",
    "right",
    "awesome",
    "way",
    "script",
    "going",
    "connect",
    "blockchain",
    "local",
    "blockchain",
    "let",
    "get",
    "actual",
    "wallet",
    "private",
    "key",
    "balance",
    "everything",
    "see",
    "wallets",
    "private",
    "keys",
    "ganache",
    "way",
    "get",
    "set",
    "say",
    "const",
    "wallet",
    "equals",
    "new",
    "ethers",
    "dot",
    "wallet",
    "wallet",
    "function",
    "takes",
    "couple",
    "input",
    "parameters",
    "like",
    "private",
    "key",
    "provider",
    "private",
    "key",
    "go",
    "kenosha",
    "choose",
    "one",
    "private",
    "keys",
    "going",
    "paste",
    "right",
    "code",
    "gon",
    "na",
    "comma",
    "provider",
    "save",
    "pasting",
    "private",
    "key",
    "directly",
    "code",
    "huge",
    "nono",
    "going",
    "learn",
    "avoid",
    "future",
    "okay",
    "right",
    "since",
    "using",
    "one",
    "ganache",
    "private",
    "keys",
    "risk",
    "money",
    "associated",
    "account",
    "two",
    "lines",
    "alone",
    "give",
    "us",
    "everything",
    "need",
    "interact",
    "smart",
    "contract",
    "give",
    "us",
    "connection",
    "blockchain",
    "give",
    "us",
    "wallet",
    "private",
    "key",
    "sign",
    "different",
    "transactions",
    "remember",
    "back",
    "blockchain",
    "basics",
    "section",
    "private",
    "key",
    "using",
    "sign",
    "transactions",
    "encrypt",
    "transactions",
    "provider",
    "wallet",
    "let",
    "go",
    "ahead",
    "grab",
    "contract",
    "objects",
    "two",
    "files",
    "order",
    "deploy",
    "contract",
    "gon",
    "na",
    "need",
    "abi",
    "going",
    "need",
    "binary",
    "compiled",
    "code",
    "contract",
    "going",
    "need",
    "read",
    "two",
    "files",
    "read",
    "two",
    "files",
    "going",
    "need",
    "use",
    "package",
    "called",
    "fs",
    "back",
    "top",
    "gon",
    "na",
    "const",
    "fs",
    "equals",
    "require",
    "fs",
    "extra",
    "autosave",
    "time",
    "see",
    "like",
    "something",
    "white",
    "dot",
    "go",
    "away",
    "lot",
    "fingers",
    "habit",
    "pretty",
    "much",
    "anytime",
    "stop",
    "typing",
    "save",
    "please",
    "remember",
    "save",
    "early",
    "often",
    "fs",
    "extra",
    "come",
    "directly",
    "node",
    "project",
    "always",
    "add",
    "yarn",
    "add",
    "fs",
    "extra",
    "see",
    "package",
    "dot",
    "json",
    "get",
    "abi",
    "binary",
    "say",
    "const",
    "abi",
    "equals",
    "fs",
    "dot",
    "read",
    "file",
    "sync",
    "means",
    "going",
    "synchronously",
    "read",
    "file",
    "could",
    "asynchronously",
    "want",
    "wait",
    "file",
    "get",
    "done",
    "gon",
    "na",
    "say",
    "read",
    "file",
    "sync",
    "depending",
    "vs",
    "code",
    "scroll",
    "might",
    "even",
    "get",
    "information",
    "function",
    "popup",
    "like",
    "really",
    "helpful",
    "see",
    "need",
    "path",
    "file",
    "want",
    "read",
    "options",
    "well",
    "path",
    "file",
    "want",
    "read",
    "abi",
    "located",
    "dot",
    "slash",
    "simple",
    "storage",
    "underscore",
    "soul",
    "underscore",
    "simple",
    "storage",
    "dot",
    "avi",
    "going",
    "comma",
    "u",
    "f",
    "eight",
    "utf",
    "eight",
    "encoding",
    "file",
    "worry",
    "much",
    "means",
    "need",
    "abi",
    "also",
    "need",
    "binary",
    "second",
    "file",
    "simple",
    "storage",
    "underscore",
    "soul",
    "underscore",
    "simple",
    "storage",
    "dot",
    "bin",
    "gon",
    "na",
    "say",
    "const",
    "binary",
    "equals",
    "fs",
    "dot",
    "read",
    "file",
    "sync",
    "gon",
    "na",
    "give",
    "path",
    "hear",
    "going",
    "dot",
    "slash",
    "simple",
    "storage",
    "soul",
    "simple",
    "storage",
    "dot",
    "bin",
    "encoding",
    "option",
    "going",
    "look",
    "like",
    "binary",
    "abi",
    "create",
    "something",
    "called",
    "contract",
    "factory",
    "confused",
    "factory",
    "pattern",
    "ethers",
    "contract",
    "factory",
    "object",
    "use",
    "deploy",
    "contracts",
    "gon",
    "na",
    "say",
    "const",
    "contract",
    "factory",
    "equals",
    "new",
    "ethers",
    "dot",
    "contract",
    "factory",
    "going",
    "pass",
    "api",
    "binary",
    "wallet",
    "pass",
    "abi",
    "code",
    "knows",
    "interact",
    "contract",
    "binary",
    "obviously",
    "main",
    "compiled",
    "code",
    "wallet",
    "private",
    "key",
    "use",
    "sign",
    "deploying",
    "contract",
    "usually",
    "like",
    "write",
    "little",
    "console",
    "dot",
    "log",
    "saying",
    "something",
    "like",
    "deploying",
    "wait",
    "actually",
    "deploy",
    "contract",
    "ethers",
    "const",
    "contract",
    "equals",
    "await",
    "contract",
    "factory",
    "dot",
    "deploy",
    "first",
    "time",
    "seen",
    "await",
    "keyword",
    "use",
    "await",
    "keyword",
    "inside",
    "async",
    "function",
    "reason",
    "want",
    "await",
    "keyword",
    "telling",
    "code",
    "stop",
    "wait",
    "contract",
    "deploy",
    "await",
    "keyword",
    "means",
    "resolve",
    "promise",
    "contract",
    "contract",
    "factory",
    "dot",
    "deploy",
    "await",
    "returns",
    "contract",
    "object",
    "could",
    "something",
    "like",
    "console",
    "dot",
    "log",
    "contract",
    "let",
    "see",
    "happens",
    "run",
    "code",
    "node",
    "deploy",
    "dot",
    "j",
    "scroll",
    "see",
    "deploying",
    "please",
    "wait",
    "see",
    "massive",
    "object",
    "gets",
    "printed",
    "contract",
    "object",
    "deployed",
    "fact",
    "go",
    "ganache",
    "see",
    "address",
    "used",
    "wallet",
    "little",
    "bit",
    "less",
    "balance",
    "transaction",
    "count",
    "one",
    "working",
    "truffle",
    "able",
    "see",
    "contracts",
    "working",
    "hard",
    "hat",
    "wo",
    "able",
    "see",
    "contracts",
    "go",
    "transactions",
    "indeed",
    "see",
    "transaction",
    "created",
    "similar",
    "ether",
    "scan",
    "local",
    "blockchain",
    "see",
    "sender",
    "address",
    "creation",
    "address",
    "value",
    "gas",
    "price",
    "stuff",
    "associated",
    "contract",
    "also",
    "see",
    "different",
    "blocks",
    "since",
    "made",
    "one",
    "transaction",
    "one",
    "block",
    "mined",
    "awesome",
    "stuff",
    "associated",
    "great",
    "job",
    "deployed",
    "contract",
    "local",
    "blockchain",
    "ethers",
    "jas",
    "fantastic",
    "awesome",
    "work",
    "let",
    "show",
    "happens",
    "use",
    "await",
    "keyword",
    "telling",
    "code",
    "stop",
    "saying",
    "hey",
    "deploy",
    "contract",
    "keep",
    "going",
    "never",
    "actually",
    "checked",
    "see",
    "deploy",
    "function",
    "finished",
    "let",
    "see",
    "happens",
    "run",
    "instead",
    "instead",
    "big",
    "contract",
    "object",
    "get",
    "promise",
    "pending",
    "state",
    "code",
    "actually",
    "finished",
    "contract",
    "could",
    "finish",
    "deploying",
    "see",
    "promise",
    "pending",
    "instead",
    "await",
    "keyword",
    "important",
    "saying",
    "hey",
    "wait",
    "finish",
    "await",
    "keyword",
    "also",
    "resolves",
    "promise",
    "wait",
    "promise",
    "exit",
    "pending",
    "state",
    "return",
    "whatever",
    "pending",
    "promise",
    "returns",
    "contract",
    "factory",
    "deploy",
    "returns",
    "promise",
    "returns",
    "contract",
    "fact",
    "go",
    "ethers",
    "documentation",
    "look",
    "deploy",
    "see",
    "contract",
    "factory",
    "methods",
    "contract",
    "factory",
    "dot",
    "deploy",
    "look",
    "definition",
    "function",
    "says",
    "contract",
    "factory",
    "dot",
    "deploy",
    "takes",
    "whole",
    "bunch",
    "arguments",
    "overrides",
    "arrow",
    "saying",
    "returns",
    "returns",
    "promise",
    "resolves",
    "contract",
    "need",
    "await",
    "keyword",
    "contract",
    "factory",
    "deploy",
    "returns",
    "promise",
    "await",
    "contract",
    "factory",
    "dot",
    "deploy",
    "saying",
    "returns",
    "promise",
    "resolves",
    "contract",
    "waiting",
    "finish",
    "deploying",
    "resolve",
    "contract",
    "object",
    "gon",
    "na",
    "major",
    "difference",
    "awesome",
    "work",
    "gon",
    "na",
    "await",
    "keyword",
    "important",
    "asynchronous",
    "functions",
    "need",
    "async",
    "keyword",
    "top",
    "function",
    "names",
    "awesome",
    "work",
    "deployed",
    "contract",
    "ganache",
    "shane",
    "fantastic",
    "let",
    "play",
    "little",
    "bit",
    "else",
    "remember",
    "remix",
    "metamask",
    "could",
    "add",
    "whole",
    "bunch",
    "stuff",
    "could",
    "add",
    "gas",
    "limit",
    "could",
    "add",
    "value",
    "trends",
    "could",
    "press",
    "transact",
    "button",
    "know",
    "working",
    "metamask",
    "want",
    "send",
    "money",
    "accounts",
    "actually",
    "choose",
    "gas",
    "price",
    "priority",
    "fee",
    "stuff",
    "actually",
    "ethers",
    "well",
    "wanted",
    "await",
    "contract",
    "factory",
    "deploy",
    "certain",
    "gas",
    "price",
    "add",
    "overrides",
    "deploy",
    "function",
    "another",
    "really",
    "neat",
    "trick",
    "visual",
    "studio",
    "code",
    "might",
    "click",
    "command",
    "control",
    "depending",
    "setup",
    "actually",
    "click",
    "function",
    "see",
    "defined",
    "see",
    "everything",
    "function",
    "command",
    "clicked",
    "could",
    "see",
    "node",
    "modules",
    "ethers",
    "project",
    "contract",
    "source",
    "ts",
    "stuff",
    "see",
    "exactly",
    "function",
    "definition",
    "deploy",
    "function",
    "contract",
    "factory",
    "object",
    "shows",
    "us",
    "code",
    "saw",
    "documentation",
    "see",
    "deploy",
    "function",
    "takes",
    "arguments",
    "returns",
    "little",
    "semicolon",
    "means",
    "returns",
    "promise",
    "resolves",
    "contract",
    "really",
    "nice",
    "actually",
    "list",
    "overrides",
    "specify",
    "brackets",
    "put",
    "brackets",
    "deploy",
    "function",
    "specify",
    "certain",
    "things",
    "like",
    "example",
    "specify",
    "gas",
    "price",
    "number",
    "run",
    "would",
    "deploy",
    "contract",
    "gas",
    "price",
    "could",
    "add",
    "gas",
    "limit",
    "add",
    "whole",
    "bunch",
    "different",
    "overrides",
    "deploy",
    "function",
    "well",
    "else",
    "well",
    "wait",
    "certain",
    "number",
    "blocks",
    "contract",
    "finish",
    "deployed",
    "contract",
    "maybe",
    "want",
    "wait",
    "one",
    "block",
    "make",
    "sure",
    "actually",
    "gets",
    "attached",
    "chain",
    "say",
    "const",
    "deployment",
    "received",
    "equals",
    "await",
    "contract",
    "dot",
    "deploy",
    "transaction",
    "dot",
    "wait",
    "specify",
    "number",
    "confirmations",
    "want",
    "actually",
    "wait",
    "wait",
    "one",
    "block",
    "confirmation",
    "make",
    "sure",
    "happened",
    "console",
    "dot",
    "log",
    "deployment",
    "receipt",
    "option",
    "run",
    "code",
    "see",
    "information",
    "transaction",
    "see",
    "exactly",
    "transaction",
    "looks",
    "like",
    "see",
    "two",
    "creating",
    "contract",
    "going",
    "ganache",
    "address",
    "got",
    "private",
    "key",
    "see",
    "contract",
    "address",
    "created",
    "transaction",
    "index",
    "see",
    "gas",
    "use",
    "gas",
    "use",
    "log",
    "bloom",
    "block",
    "hash",
    "transaction",
    "see",
    "information",
    "transaction",
    "something",
    "want",
    "take",
    "note",
    "deployment",
    "receipt",
    "deployment",
    "transaction",
    "want",
    "separate",
    "two",
    "going",
    "make",
    "life",
    "lot",
    "easier",
    "going",
    "quick",
    "console",
    "dot",
    "log",
    "deployment",
    "transaction",
    "console",
    "dot",
    "log",
    "contract",
    "dot",
    "deploy",
    "transaction",
    "going",
    "copy",
    "whole",
    "line",
    "typing",
    "command",
    "c",
    "ctrl",
    "c",
    "right",
    "deployment",
    "transaction",
    "receipt",
    "deployment",
    "receipt",
    "transaction",
    "receipt",
    "going",
    "rename",
    "transaction",
    "receipt",
    "make",
    "little",
    "bit",
    "clearer",
    "ones",
    "run",
    "one",
    "time",
    "get",
    "transaction",
    "receipt",
    "wait",
    "block",
    "confirmation",
    "otherwise",
    "gon",
    "na",
    "get",
    "contract",
    "object",
    "deploy",
    "transaction",
    "distinction",
    "important",
    "later",
    "wanted",
    "know",
    "difference",
    "two",
    "transaction",
    "receipt",
    "get",
    "wait",
    "block",
    "confirmation",
    "deployment",
    "transaction",
    "transaction",
    "response",
    "transaction",
    "response",
    "get",
    "create",
    "transaction",
    "transaction",
    "receipts",
    "transactional",
    "response",
    "different",
    "receipt",
    "get",
    "wait",
    "transaction",
    "finish",
    "response",
    "initially",
    "get",
    "make",
    "sense",
    "okay",
    "great",
    "gon",
    "na",
    "go",
    "ahead",
    "delete",
    "lines",
    "code",
    "associated",
    "github",
    "saw",
    "actually",
    "printed",
    "receipts",
    "got",
    "stuff",
    "deploying",
    "contract",
    "actually",
    "sending",
    "transaction",
    "said",
    "want",
    "see",
    "really",
    "going",
    "hood",
    "actually",
    "create",
    "transaction",
    "create",
    "contract",
    "specifying",
    "transaction",
    "information",
    "let",
    "deploy",
    "contract",
    "purely",
    "using",
    "transaction",
    "data",
    "console",
    "dot",
    "log",
    "let",
    "deploy",
    "transaction",
    "data",
    "going",
    "way",
    "actually",
    "deploy",
    "send",
    "transactions",
    "purely",
    "transaction",
    "data",
    "send",
    "transaction",
    "gives",
    "unlimited",
    "flux",
    "ability",
    "transactions",
    "want",
    "send",
    "say",
    "const",
    "let",
    "tx",
    "going",
    "stand",
    "transaction",
    "equals",
    "add",
    "transaction",
    "information",
    "first",
    "thing",
    "going",
    "need",
    "nuts",
    "number",
    "use",
    "go",
    "back",
    "transaction",
    "count",
    "four",
    "transactions",
    "use",
    "nonce",
    "five",
    "going",
    "nonce",
    "used",
    "every",
    "time",
    "send",
    "transaction",
    "comes",
    "one",
    "nonces",
    "right",
    "nonce",
    "bit",
    "overused",
    "term",
    "saw",
    "back",
    "blockchain",
    "basics",
    "use",
    "nonce",
    "solve",
    "hard",
    "problem",
    "nonces",
    "also",
    "used",
    "wallets",
    "signers",
    "send",
    "transactions",
    "use",
    "different",
    "nones",
    "every",
    "transaction",
    "nonce",
    "talking",
    "wallets",
    "talks",
    "number",
    "associated",
    "unique",
    "transaction",
    "nonce",
    "talking",
    "blockchain",
    "mining",
    "value",
    "used",
    "solve",
    "hard",
    "problem",
    "mean",
    "thing",
    "mean",
    "number",
    "used",
    "different",
    "different",
    "contexts",
    "going",
    "use",
    "number",
    "use",
    "unique",
    "number",
    "transaction",
    "send",
    "going",
    "say",
    "nonce",
    "going",
    "five",
    "going",
    "pick",
    "gas",
    "price",
    "right",
    "going",
    "use",
    "gas",
    "price",
    "ganache",
    "like",
    "going",
    "pick",
    "gas",
    "limit",
    "big",
    "number",
    "use",
    "1123456",
    "use",
    "gon",
    "na",
    "say",
    "two",
    "going",
    "right",
    "exactly",
    "like",
    "saw",
    "receipts",
    "responses",
    "since",
    "creating",
    "contract",
    "value",
    "going",
    "zero",
    "since",
    "creating",
    "contract",
    "want",
    "send",
    "ether",
    "polygon",
    "avalanche",
    "data",
    "going",
    "massive",
    "binary",
    "object",
    "binary",
    "bit",
    "binary",
    "section",
    "gon",
    "na",
    "copy",
    "massive",
    "binary",
    "piece",
    "going",
    "put",
    "quotes",
    "gon",
    "na",
    "0x",
    "paste",
    "massive",
    "massive",
    "data",
    "piece",
    "binary",
    "sending",
    "whenever",
    "send",
    "transaction",
    "data",
    "object",
    "fill",
    "stuff",
    "filling",
    "data",
    "object",
    "binary",
    "code",
    "tells",
    "theory",
    "tells",
    "blockchain",
    "deploy",
    "smart",
    "contract",
    "going",
    "look",
    "exactly",
    "like",
    "finally",
    "want",
    "add",
    "chain",
    "id",
    "seen",
    "metamask",
    "go",
    "back",
    "networks",
    "one",
    "evm",
    "chains",
    "different",
    "chain",
    "id",
    "etherium",
    "main",
    "net",
    "one",
    "ropsten",
    "three",
    "rinke",
    "b",
    "four",
    "covid",
    "42",
    "etc",
    "evm",
    "chains",
    "like",
    "avalanche",
    "like",
    "polygon",
    "going",
    "unique",
    "chain",
    "ids",
    "well",
    "ganache",
    "see",
    "network",
    "id",
    "appear",
    "1337",
    "people",
    "paste",
    "people",
    "run",
    "issues",
    "chain",
    "id",
    "network",
    "id",
    "different",
    "chain",
    "id",
    "actually",
    "problem",
    "try",
    "31337",
    "instead",
    "transaction",
    "information",
    "propagated",
    "awesome",
    "however",
    "transaction",
    "signed",
    "nobody",
    "sending",
    "transaction",
    "right",
    "transaction",
    "details",
    "somebody",
    "wants",
    "actually",
    "need",
    "sign",
    "transaction",
    "send",
    "blockchain",
    "cons",
    "sign",
    "tx",
    "response",
    "equals",
    "await",
    "wallet",
    "dot",
    "sign",
    "transaction",
    "pass",
    "tx",
    "object",
    "console",
    "dot",
    "log",
    "sign",
    "tx",
    "response",
    "javascript",
    "solidity",
    "type",
    "two",
    "backslashes",
    "code",
    "wo",
    "run",
    "code",
    "gon",
    "na",
    "go",
    "ahead",
    "comment",
    "three",
    "lines",
    "way",
    "highlighting",
    "sections",
    "hitting",
    "command",
    "backslash",
    "might",
    "hit",
    "ctrl",
    "backslash",
    "keyboard",
    "shortcut",
    "use",
    "quickly",
    "comment",
    "entire",
    "sections",
    "reason",
    "want",
    "show",
    "happens",
    "run",
    "scientex",
    "response",
    "wallet",
    "signed",
    "transaction",
    "back",
    "nosh",
    "see",
    "four",
    "blocks",
    "let",
    "ask",
    "sign",
    "transaction",
    "get",
    "signed",
    "transaction",
    "response",
    "propagate",
    "another",
    "block",
    "well",
    "let",
    "find",
    "run",
    "get",
    "massive",
    "thing",
    "go",
    "back",
    "ganache",
    "refresh",
    "actually",
    "see",
    "another",
    "transaction",
    "sent",
    "signing",
    "transaction",
    "actually",
    "sending",
    "signed",
    "transaction",
    "response",
    "big",
    "number",
    "represents",
    "signed",
    "transaction",
    "cent",
    "transaction",
    "different",
    "actually",
    "send",
    "one",
    "transactions",
    "changing",
    "line",
    "little",
    "bit",
    "instead",
    "scientex",
    "response",
    "change",
    "send",
    "tx",
    "response",
    "equals",
    "await",
    "wallet",
    "dot",
    "send",
    "transaction",
    "tx",
    "send",
    "transaction",
    "wait",
    "send",
    "transaction",
    "response",
    "wait",
    "one",
    "gon",
    "na",
    "wait",
    "one",
    "block",
    "confirmation",
    "make",
    "sure",
    "transaction",
    "actually",
    "goes",
    "run",
    "looks",
    "like",
    "done",
    "actually",
    "scroll",
    "actually",
    "got",
    "error",
    "huge",
    "massive",
    "thing",
    "scroll",
    "eventually",
    "see",
    "tx",
    "reject",
    "error",
    "tx",
    "correct",
    "nuts",
    "practice",
    "let",
    "go",
    "ahead",
    "type",
    "google",
    "see",
    "get",
    "actually",
    "get",
    "web",
    "three",
    "jas",
    "four",
    "years",
    "ago",
    "trying",
    "call",
    "leaf",
    "picked",
    "blah",
    "blah",
    "blah",
    "blah",
    "blah",
    "blah",
    "blah",
    "blah",
    "looks",
    "like",
    "meta",
    "mask",
    "issue",
    "ran",
    "said",
    "reset",
    "account",
    "meta",
    "mask",
    "could",
    "let",
    "make",
    "little",
    "bit",
    "specific",
    "let",
    "say",
    "ethers",
    "js",
    "looks",
    "like",
    "get",
    "looks",
    "like",
    "right",
    "recording",
    "get",
    "stack",
    "exchange",
    "eath",
    "stack",
    "overflow",
    "question",
    "trolley",
    "pretty",
    "straightforward",
    "correct",
    "nonce",
    "transaction",
    "would",
    "good",
    "time",
    "actually",
    "make",
    "question",
    "stack",
    "overflow",
    "stack",
    "exchange",
    "aetherium",
    "shows",
    "first",
    "actually",
    "get",
    "correct",
    "nuts",
    "going",
    "want",
    "make",
    "nonce",
    "four",
    "see",
    "account",
    "nonce",
    "four",
    "tx",
    "nonce",
    "five",
    "actually",
    "would",
    "want",
    "four",
    "easier",
    "way",
    "always",
    "get",
    "correct",
    "nonce",
    "going",
    "actually",
    "calling",
    "transaction",
    "count",
    "wallet",
    "back",
    "ethers",
    "documentation",
    "actually",
    "good",
    "samples",
    "assigning",
    "message",
    "actually",
    "send",
    "messages",
    "weight",
    "wallet",
    "dot",
    "get",
    "transaction",
    "count",
    "get",
    "nuts",
    "back",
    "code",
    "could",
    "const",
    "nuns",
    "equals",
    "await",
    "oops",
    "copy",
    "pasted",
    "await",
    "wallet",
    "dot",
    "get",
    "transaction",
    "count",
    "place",
    "nonce",
    "right",
    "let",
    "try",
    "running",
    "looks",
    "like",
    "one",
    "indeed",
    "go",
    "verify",
    "ganache",
    "indeed",
    "see",
    "currently",
    "block",
    "five",
    "one",
    "extra",
    "transaction",
    "could",
    "go",
    "ahead",
    "run",
    "never",
    "worry",
    "actually",
    "updating",
    "nonce",
    "since",
    "calling",
    "wallet",
    "dot",
    "get",
    "transaction",
    "count",
    "keep",
    "updating",
    "current",
    "block",
    "six",
    "additional",
    "transaction",
    "indeed",
    "gone",
    "awesome",
    "showed",
    "actually",
    "sign",
    "transaction",
    "sign",
    "transaction",
    "central",
    "injection",
    "well",
    "command",
    "click",
    "control",
    "click",
    "go",
    "documentation",
    "ethers",
    "see",
    "code",
    "send",
    "transaction",
    "first",
    "check",
    "provider",
    "stuff",
    "stuff",
    "populate",
    "transaction",
    "actually",
    "see",
    "sends",
    "transaction",
    "even",
    "ethers",
    "signs",
    "transaction",
    "first",
    "calls",
    "dot",
    "provider",
    "dot",
    "send",
    "transaction",
    "call",
    "send",
    "transaction",
    "transaction",
    "details",
    "like",
    "signing",
    "first",
    "sending",
    "provider",
    "okay",
    "great",
    "learned",
    "send",
    "transaction",
    "using",
    "pure",
    "javascript",
    "using",
    "pure",
    "ethers",
    "one",
    "main",
    "takeaways",
    "every",
    "time",
    "change",
    "blockchain",
    "every",
    "time",
    "change",
    "state",
    "every",
    "time",
    "use",
    "gas",
    "sending",
    "transaction",
    "looks",
    "pretty",
    "much",
    "exactly",
    "like",
    "data",
    "going",
    "differentiator",
    "data",
    "us",
    "data",
    "saying",
    "create",
    "new",
    "contract",
    "make",
    "transactions",
    "like",
    "adding",
    "people",
    "storing",
    "data",
    "going",
    "passing",
    "transaction",
    "going",
    "data",
    "associated",
    "calling",
    "functions",
    "actually",
    "call",
    "functions",
    "ethers",
    "hardhead",
    "going",
    "kind",
    "raw",
    "const",
    "tx",
    "list",
    "stuff",
    "like",
    "list",
    "raw",
    "data",
    "right",
    "really",
    "really",
    "hard",
    "ethers",
    "hard",
    "hat",
    "going",
    "make",
    "process",
    "lot",
    "easier",
    "let",
    "go",
    "ahead",
    "comment",
    "whole",
    "section",
    "copy",
    "whole",
    "thing",
    "hit",
    "command",
    "slash",
    "control",
    "slash",
    "whatever",
    "shortcut",
    "environment",
    "actually",
    "comment",
    "let",
    "go",
    "ahead",
    "uncomment",
    "section",
    "deploy",
    "contract",
    "using",
    "kind",
    "ether",
    "much",
    "easier",
    "read",
    "way",
    "weird",
    "tx",
    "stuff",
    "oh",
    "cool",
    "changed",
    "script",
    "back",
    "deploy",
    "contracts",
    "like",
    "actually",
    "deployed",
    "contract",
    "learn",
    "interact",
    "contract",
    "code",
    "well",
    "way",
    "click",
    "buttons",
    "remix",
    "going",
    "code",
    "look",
    "symbol",
    "storage",
    "button",
    "add",
    "person",
    "store",
    "view",
    "functions",
    "well",
    "easiest",
    "one",
    "going",
    "retrieve",
    "function",
    "grabs",
    "favorite",
    "number",
    "retrieve",
    "returns",
    "favorite",
    "number",
    "call",
    "ethers",
    "const",
    "current",
    "favorite",
    "number",
    "equals",
    "await",
    "retrieve",
    "contract",
    "object",
    "returned",
    "contract",
    "factory",
    "long",
    "awaited",
    "contract",
    "object",
    "going",
    "come",
    "functionality",
    "described",
    "api",
    "pass",
    "api",
    "contract",
    "factory",
    "look",
    "inside",
    "api",
    "piece",
    "see",
    "ton",
    "information",
    "different",
    "functions",
    "call",
    "types",
    "return",
    "types",
    "everything",
    "like",
    "example",
    "look",
    "retrieve",
    "see",
    "retrieve",
    "see",
    "name",
    "function",
    "going",
    "retrieved",
    "outputs",
    "going",
    "un",
    "256",
    "type",
    "nuun",
    "little",
    "bit",
    "difficult",
    "read",
    "formatted",
    "since",
    "call",
    "dot",
    "api",
    "going",
    "little",
    "bit",
    "hard",
    "read",
    "could",
    "change",
    "dot",
    "json",
    "see",
    "highlighted",
    "little",
    "bit",
    "even",
    "format",
    "document",
    "prettier",
    "see",
    "actually",
    "formats",
    "lot",
    "easier",
    "read",
    "go",
    "back",
    "retrieve",
    "see",
    "block",
    "code",
    "defines",
    "retrieve",
    "function",
    "ca",
    "going",
    "change",
    "back",
    "abi",
    "looks",
    "like",
    "formatting",
    "stayed",
    "great",
    "much",
    "easier",
    "read",
    "said",
    "abi",
    "application",
    "binary",
    "interface",
    "incredibly",
    "important",
    "working",
    "contracts",
    "give",
    "code",
    "huge",
    "bytecode",
    "thing",
    "gon",
    "na",
    "really",
    "hard",
    "processor",
    "decompile",
    "understand",
    "exactly",
    "functions",
    "going",
    "decompiler",
    "options",
    "like",
    "ether",
    "vm",
    "io",
    "slash",
    "decompile",
    "decompile",
    "bytecode",
    "solidity",
    "really",
    "tricky",
    "get",
    "exactly",
    "right",
    "much",
    "easier",
    "abi",
    "say",
    "hey",
    "lump",
    "code",
    "lump",
    "numbers",
    "garbled",
    "nonsense",
    "deploy",
    "bytecode",
    "blockchain",
    "call",
    "functions",
    "code",
    "automatically",
    "allow",
    "functions",
    "get",
    "called",
    "exist",
    "order",
    "code",
    "know",
    "exist",
    "much",
    "easier",
    "give",
    "api",
    "get",
    "current",
    "favorite",
    "number",
    "like",
    "let",
    "go",
    "ahead",
    "console",
    "dot",
    "log",
    "current",
    "favorite",
    "number",
    "edited",
    "code",
    "going",
    "let",
    "zoom",
    "little",
    "bit",
    "edited",
    "code",
    "going",
    "connect",
    "organ",
    "nosh",
    "instance",
    "going",
    "connect",
    "wallet",
    "private",
    "key",
    "got",
    "top",
    "ganache",
    "gon",
    "na",
    "grab",
    "abi",
    "binary",
    "contracts",
    "connect",
    "new",
    "contract",
    "factory",
    "object",
    "connected",
    "wallet",
    "wallet",
    "one",
    "actually",
    "deploy",
    "contract",
    "deploy",
    "contract",
    "const",
    "contract",
    "equals",
    "await",
    "contract",
    "factory",
    "dot",
    "deploy",
    "wait",
    "one",
    "block",
    "transaction",
    "finish",
    "fact",
    "going",
    "use",
    "transaction",
    "receipt",
    "going",
    "delete",
    "part",
    "going",
    "going",
    "delete",
    "however",
    "leave",
    "section",
    "commented",
    "github",
    "repo",
    "going",
    "call",
    "contract",
    "retrieve",
    "return",
    "current",
    "favorite",
    "number",
    "since",
    "view",
    "function",
    "contract",
    "call",
    "wo",
    "cost",
    "us",
    "gas",
    "look",
    "simple",
    "storage",
    "soul",
    "see",
    "retrieve",
    "view",
    "function",
    "remember",
    "view",
    "pure",
    "functions",
    "called",
    "outside",
    "contract",
    "function",
    "call",
    "cost",
    "gas",
    "reading",
    "blockchain",
    "changing",
    "variables",
    "chain",
    "changing",
    "state",
    "blockchain",
    "wo",
    "cost",
    "gas",
    "let",
    "go",
    "ahead",
    "run",
    "perfect",
    "get",
    "deploying",
    "please",
    "wait",
    "get",
    "big",
    "number",
    "response",
    "big",
    "number",
    "response",
    "big",
    "number",
    "library",
    "comes",
    "ethers",
    "application",
    "helps",
    "us",
    "work",
    "numbers",
    "actually",
    "scroll",
    "even",
    "section",
    "saying",
    "use",
    "numbers",
    "expect",
    "current",
    "favorite",
    "number",
    "zero",
    "returns",
    "weird",
    "hex",
    "thing",
    "says",
    "big",
    "number",
    "true",
    "weird",
    "big",
    "number",
    "thing",
    "solidity",
    "ca",
    "use",
    "decimal",
    "places",
    "javascript",
    "hard",
    "time",
    "decimal",
    "places",
    "kind",
    "specific",
    "rationale",
    "use",
    "numbers",
    "see",
    "lot",
    "time",
    "instead",
    "numbers",
    "see",
    "strings",
    "like",
    "zero",
    "see",
    "javascript",
    "use",
    "strings",
    "like",
    "big",
    "numbers",
    "try",
    "pass",
    "number",
    "like",
    "javascript",
    "number",
    "would",
    "big",
    "javascript",
    "understand",
    "want",
    "use",
    "big",
    "numbers",
    "strings",
    "working",
    "ethers",
    "make",
    "readable",
    "string",
    "end",
    "printing",
    "string",
    "version",
    "big",
    "number",
    "rerun",
    "code",
    "see",
    "get",
    "zero",
    "makes",
    "sense",
    "favorite",
    "number",
    "gets",
    "initialized",
    "zero",
    "value",
    "specified",
    "called",
    "store",
    "yet",
    "awesome",
    "working",
    "perfectly",
    "current",
    "favorite",
    "number",
    "let",
    "make",
    "console",
    "dot",
    "log",
    "little",
    "bit",
    "syntactical",
    "going",
    "use",
    "something",
    "called",
    "string",
    "interpolation",
    "interpolate",
    "string",
    "variables",
    "typically",
    "javascript",
    "working",
    "strings",
    "use",
    "double",
    "quotes",
    "however",
    "want",
    "mix",
    "variables",
    "actual",
    "strings",
    "use",
    "backticks",
    "instead",
    "going",
    "use",
    "backticks",
    "gon",
    "na",
    "say",
    "current",
    "favorite",
    "number",
    "call",
    "tell",
    "javascript",
    "variable",
    "want",
    "read",
    "put",
    "little",
    "dollar",
    "sign",
    "bracket",
    "around",
    "like",
    "run",
    "code",
    "saying",
    "deploying",
    "please",
    "wait",
    "get",
    "current",
    "favorite",
    "number",
    "zero",
    "javascript",
    "goes",
    "okay",
    "string",
    "ah",
    "dollar",
    "sign",
    "curly",
    "brace",
    "looks",
    "like",
    "going",
    "variable",
    "javascript",
    "want",
    "interpret",
    "close",
    "backtick",
    "cool",
    "current",
    "favorite",
    "number",
    "going",
    "zero",
    "great",
    "let",
    "update",
    "contract",
    "number",
    "calling",
    "store",
    "function",
    "say",
    "const",
    "transaction",
    "response",
    "equals",
    "await",
    "contract",
    "dot",
    "store",
    "add",
    "seven",
    "since",
    "seven",
    "small",
    "number",
    "pass",
    "like",
    "seven",
    "passing",
    "like",
    "seven",
    "string",
    "also",
    "works",
    "want",
    "pass",
    "crazy",
    "massive",
    "number",
    "javascript",
    "would",
    "get",
    "confused",
    "usually",
    "best",
    "practice",
    "pass",
    "variables",
    "contract",
    "functions",
    "strings",
    "even",
    "though",
    "might",
    "little",
    "bit",
    "confusing",
    "ethers",
    "smart",
    "enough",
    "know",
    "seventh",
    "string",
    "actually",
    "seven",
    "number",
    "const",
    "transaction",
    "received",
    "equals",
    "await",
    "transaction",
    "response",
    "wait",
    "one",
    "wait",
    "one",
    "block",
    "similar",
    "us",
    "contract",
    "dot",
    "deploy",
    "transaction",
    "dot",
    "wait",
    "syntax",
    "little",
    "bit",
    "different",
    "saw",
    "using",
    "contract",
    "factory",
    "calling",
    "function",
    "contract",
    "call",
    "function",
    "contract",
    "get",
    "transaction",
    "response",
    "wait",
    "transaction",
    "response",
    "finish",
    "get",
    "transaction",
    "receipt",
    "const",
    "updated",
    "favorite",
    "number",
    "two",
    "equals",
    "await",
    "track",
    "dot",
    "retrieve",
    "console",
    "dot",
    "log",
    "updated",
    "favorite",
    "number",
    "little",
    "string",
    "interpolation",
    "updated",
    "favorite",
    "number",
    "like",
    "let",
    "go",
    "ahead",
    "run",
    "process",
    "deploying",
    "contract",
    "getting",
    "initial",
    "value",
    "going",
    "update",
    "contract",
    "calling",
    "store",
    "going",
    "cost",
    "gas",
    "transaction",
    "going",
    "get",
    "transaction",
    "response",
    "gon",
    "na",
    "get",
    "transaction",
    "receipt",
    "going",
    "anything",
    "transaction",
    "receipt",
    "want",
    "ingrain",
    "two",
    "different",
    "transaction",
    "response",
    "transaction",
    "receipt",
    "see",
    "future",
    "get",
    "updated",
    "favorite",
    "number",
    "going",
    "print",
    "let",
    "boom",
    "perfect",
    "deploying",
    "please",
    "wait",
    "current",
    "favorite",
    "number",
    "zero",
    "updated",
    "favorite",
    "number",
    "seven",
    "go",
    "ganache",
    "instance",
    "go",
    "transactions",
    "see",
    "contract",
    "call",
    "top",
    "sender",
    "contract",
    "address",
    "gas",
    "price",
    "stuff",
    "see",
    "transaction",
    "data",
    "right",
    "transaction",
    "data",
    "gets",
    "sent",
    "data",
    "slot",
    "transaction",
    "object",
    "ethers",
    "back",
    "end",
    "us",
    "make",
    "big",
    "transaction",
    "object",
    "right",
    "awesome",
    "successfully",
    "deployed",
    "contract",
    "local",
    "ganache",
    "instance",
    "javascript",
    "virtual",
    "machine",
    "great",
    "let",
    "clean",
    "little",
    "bit",
    "look",
    "connection",
    "blockchain",
    "private",
    "key",
    "stored",
    "directly",
    "code",
    "push",
    "code",
    "github",
    "code",
    "repository",
    "able",
    "see",
    "code",
    "look",
    "ploy",
    "dot",
    "j",
    "code",
    "ah",
    "something",
    "else",
    "actually",
    "see",
    "private",
    "key",
    "rpc",
    "url",
    "going",
    "remember",
    "give",
    "private",
    "key",
    "whoever",
    "private",
    "key",
    "owns",
    "funds",
    "even",
    "though",
    "fake",
    "private",
    "key",
    "real",
    "money",
    "still",
    "want",
    "hard",
    "code",
    "private",
    "keys",
    "code",
    "case",
    "accidentally",
    "share",
    "code",
    "somebody",
    "well",
    "one",
    "popular",
    "methods",
    "actually",
    "creating",
    "something",
    "called",
    "dot",
    "emv",
    "file",
    "environment",
    "variable",
    "familiar",
    "environment",
    "variables",
    "actually",
    "set",
    "right",
    "terminal",
    "gon",
    "na",
    "set",
    "dot",
    "env",
    "want",
    "gon",
    "na",
    "want",
    "create",
    "dot",
    "env",
    "file",
    "going",
    "file",
    "store",
    "sensitive",
    "information",
    "going",
    "file",
    "never",
    "going",
    "share",
    "anybody",
    "dot",
    "env",
    "file",
    "stick",
    "variables",
    "choosing",
    "environment",
    "code",
    "example",
    "pull",
    "terminal",
    "echo",
    "cat",
    "going",
    "reflect",
    "cat",
    "environment",
    "variable",
    "us",
    "right",
    "cat",
    "environment",
    "variable",
    "however",
    "export",
    "cat",
    "equals",
    "dog",
    "echo",
    "dollar",
    "sign",
    "cat",
    "get",
    "dog",
    "output",
    "environment",
    "variable",
    "variable",
    "terminal",
    "scripting",
    "environment",
    "since",
    "want",
    "type",
    "export",
    "private",
    "key",
    "equals",
    "blah",
    "blah",
    "blah",
    "every",
    "time",
    "going",
    "instead",
    "going",
    "stick",
    "dot",
    "env",
    "file",
    "dot",
    "env",
    "put",
    "private",
    "key",
    "equals",
    "grab",
    "private",
    "key",
    "script",
    "paste",
    "like",
    "note",
    "tools",
    "look",
    "0x",
    "beginning",
    "private",
    "key",
    "ethers",
    "hard",
    "hat",
    "smart",
    "enough",
    "either",
    "one",
    "works",
    "run",
    "issues",
    "know",
    "sometimes",
    "might",
    "put",
    "0x",
    "front",
    "great",
    "private",
    "key",
    "environment",
    "variable",
    "well",
    "want",
    "grab",
    "environment",
    "variable",
    "stick",
    "script",
    "script",
    "stick",
    "environment",
    "going",
    "add",
    "tool",
    "called",
    "dot",
    "env",
    "make",
    "easier",
    "gon",
    "na",
    "yarn",
    "add",
    "dot",
    "env",
    "look",
    "dot",
    "env",
    "package",
    "read",
    "read",
    "add",
    "npm",
    "using",
    "yarn",
    "add",
    "call",
    "require",
    "dot",
    "e",
    "v",
    "dot",
    "config",
    "pull",
    "environment",
    "variables",
    "require",
    "dot",
    "emv",
    "config",
    "see",
    "package",
    "json",
    "excellent",
    "pulled",
    "actually",
    "get",
    "access",
    "private",
    "key",
    "environment",
    "variable",
    "access",
    "environment",
    "variables",
    "javascript",
    "using",
    "process",
    "dot",
    "emv",
    "instead",
    "putting",
    "private",
    "key",
    "gon",
    "na",
    "delete",
    "whole",
    "thing",
    "substitute",
    "process",
    "dot",
    "emv",
    "private",
    "key",
    "save",
    "reformat",
    "us",
    "make",
    "sure",
    "actually",
    "working",
    "hit",
    "save",
    "bunch",
    "go",
    "back",
    "deploy",
    "jas",
    "see",
    "get",
    "exact",
    "setup",
    "scroll",
    "back",
    "see",
    "transaction",
    "indeed",
    "gone",
    "want",
    "double",
    "check",
    "actually",
    "printing",
    "private",
    "key",
    "could",
    "console",
    "dot",
    "log",
    "press",
    "study",
    "via",
    "private",
    "key",
    "run",
    "see",
    "indeed",
    "private",
    "key",
    "coming",
    "environment",
    "variable",
    "awesome",
    "rpc",
    "url",
    "really",
    "something",
    "need",
    "secure",
    "however",
    "maybe",
    "going",
    "use",
    "certain",
    "api",
    "key",
    "maybe",
    "certain",
    "endpoint",
    "want",
    "access",
    "want",
    "anybody",
    "else",
    "using",
    "rpc",
    "endpoint",
    "going",
    "add",
    "dot",
    "env",
    "file",
    "well",
    "dot",
    "env",
    "copy",
    "gon",
    "na",
    "say",
    "rpc",
    "url",
    "equals",
    "paste",
    "like",
    "gon",
    "na",
    "delete",
    "gon",
    "na",
    "exact",
    "thing",
    "say",
    "process",
    "dot",
    "e",
    "nv",
    "dot",
    "rpc",
    "url",
    "going",
    "run",
    "going",
    "take",
    "console",
    "dot",
    "log",
    "get",
    "exact",
    "response",
    "swap",
    "rpc",
    "url",
    "environment",
    "variable",
    "going",
    "exactly",
    "go",
    "ahead",
    "run",
    "get",
    "exact",
    "response",
    "go",
    "ganache",
    "see",
    "indeed",
    "get",
    "transaction",
    "perfect",
    "awesome",
    "learned",
    "add",
    "environment",
    "variables",
    "dot",
    "env",
    "file",
    "case",
    "want",
    "share",
    "code",
    "push",
    "code",
    "github",
    "later",
    "sections",
    "accidentally",
    "expose",
    "private",
    "keys",
    "rpc",
    "urls",
    "code",
    "project",
    "push",
    "github",
    "share",
    "somebody",
    "else",
    "code",
    "get",
    "pushed",
    "including",
    "dot",
    "env",
    "file",
    "however",
    "look",
    "code",
    "samples",
    "course",
    "see",
    "dot",
    "env",
    "file",
    "possible",
    "well",
    "want",
    "whenever",
    "project",
    "create",
    "dot",
    "git",
    "ignore",
    "file",
    "want",
    "put",
    "also",
    "want",
    "put",
    "node",
    "modules",
    "means",
    "working",
    "git",
    "working",
    "version",
    "control",
    "going",
    "little",
    "bit",
    "later",
    "wo",
    "push",
    "dot",
    "env",
    "file",
    "github",
    "also",
    "wo",
    "push",
    "known",
    "modules",
    "go",
    "back",
    "example",
    "see",
    "see",
    "dot",
    "env",
    "file",
    "see",
    "dot",
    "env",
    "dot",
    "example",
    "show",
    "one",
    "would",
    "look",
    "like",
    "really",
    "matter",
    "really",
    "paranoid",
    "something",
    "else",
    "actually",
    "running",
    "scripts",
    "running",
    "commands",
    "let",
    "say",
    "want",
    "put",
    "private",
    "key",
    "dot",
    "env",
    "file",
    "nervous",
    "would",
    "accidentally",
    "push",
    "something",
    "add",
    "private",
    "key",
    "rpc",
    "url",
    "environment",
    "variables",
    "right",
    "command",
    "line",
    "run",
    "node",
    "deploy",
    "well",
    "say",
    "rpc",
    "url",
    "equals",
    "paste",
    "rpc",
    "around",
    "say",
    "private",
    "key",
    "equals",
    "paste",
    "private",
    "key",
    "node",
    "setting",
    "right",
    "run",
    "script",
    "exact",
    "set",
    "dot",
    "env",
    "hit",
    "run",
    "see",
    "exact",
    "output",
    "means",
    "rpc",
    "url",
    "private",
    "key",
    "went",
    "successfully",
    "way",
    "key",
    "management",
    "fine",
    "rights",
    "going",
    "much",
    "better",
    "still",
    "makes",
    "little",
    "bit",
    "nervous",
    "development",
    "environments",
    "fake",
    "private",
    "keys",
    "code",
    "dot",
    "env",
    "file",
    "like",
    "okay",
    "right",
    "really",
    "care",
    "key",
    "gets",
    "hacked",
    "like",
    "nobody",
    "using",
    "move",
    "professional",
    "setup",
    "little",
    "bit",
    "scary",
    "make",
    "even",
    "secure",
    "well",
    "actually",
    "encrypt",
    "private",
    "key",
    "store",
    "encrypted",
    "key",
    "locally",
    "way",
    "reason",
    "somebody",
    "get",
    "account",
    "private",
    "key",
    "sitting",
    "around",
    "plain",
    "text",
    "encrypted",
    "need",
    "know",
    "password",
    "know",
    "get",
    "add",
    "well",
    "first",
    "going",
    "create",
    "new",
    "file",
    "called",
    "encrypt",
    "code",
    "going",
    "use",
    "actually",
    "encrypt",
    "key",
    "store",
    "locally",
    "instead",
    "private",
    "key",
    "plain",
    "text",
    "make",
    "us",
    "even",
    "secure",
    "private",
    "key",
    "hanging",
    "around",
    "plain",
    "text",
    "let",
    "go",
    "ahead",
    "build",
    "script",
    "encrypt",
    "private",
    "key",
    "going",
    "use",
    "exact",
    "setup",
    "deploy",
    "script",
    "going",
    "async",
    "function",
    "main",
    "gon",
    "na",
    "go",
    "ahead",
    "copy",
    "deployed",
    "j",
    "gon",
    "na",
    "use",
    "exact",
    "setup",
    "paste",
    "okay",
    "great",
    "gon",
    "na",
    "using",
    "ethers",
    "j",
    "r",
    "dot",
    "e",
    "v",
    "going",
    "add",
    "const",
    "ethers",
    "equals",
    "require",
    "ethers",
    "const",
    "fs",
    "equals",
    "require",
    "fs",
    "extra",
    "require",
    "dot",
    "env",
    "config",
    "alright",
    "right",
    "dot",
    "env",
    "private",
    "key",
    "want",
    "private",
    "key",
    "way",
    "private",
    "key",
    "equals",
    "know",
    "node",
    "whatever",
    "script",
    "want",
    "run",
    "going",
    "set",
    "script",
    "run",
    "encrypt",
    "key",
    "one",
    "time",
    "remove",
    "private",
    "key",
    "anywhere",
    "workspace",
    "longer",
    "plain",
    "text",
    "anywhere",
    "want",
    "want",
    "say",
    "const",
    "wallet",
    "gon",
    "na",
    "create",
    "new",
    "wallet",
    "little",
    "bit",
    "differently",
    "gon",
    "na",
    "say",
    "equals",
    "new",
    "ethers",
    "dot",
    "wallet",
    "process",
    "dot",
    "e",
    "v",
    "dot",
    "private",
    "key",
    "need",
    "private",
    "key",
    "stick",
    "create",
    "wallet",
    "gon",
    "na",
    "say",
    "const",
    "encrypted",
    "json",
    "key",
    "equals",
    "await",
    "ethers",
    "dot",
    "encrypt",
    "encrypt",
    "function",
    "going",
    "return",
    "encrypted",
    "json",
    "key",
    "store",
    "locally",
    "decrypt",
    "password",
    "takes",
    "two",
    "parameters",
    "takes",
    "private",
    "key",
    "password",
    "private",
    "key",
    "dot",
    "emv",
    "right",
    "going",
    "create",
    "private",
    "key",
    "password",
    "going",
    "say",
    "password",
    "obviously",
    "terrible",
    "password",
    "never",
    "use",
    "password",
    "password",
    "going",
    "leave",
    "password",
    "since",
    "encrypting",
    "big",
    "key",
    "anyways",
    "going",
    "encrypt",
    "passing",
    "password",
    "process",
    "study",
    "v",
    "dot",
    "private",
    "key",
    "password",
    "also",
    "going",
    "pass",
    "private",
    "key",
    "going",
    "ethers",
    "going",
    "wallet",
    "dot",
    "encrypt",
    "also",
    "going",
    "pass",
    "process",
    "dot",
    "emv",
    "dot",
    "private",
    "key",
    "let",
    "go",
    "ahead",
    "run",
    "right",
    "console",
    "dot",
    "log",
    "encrypted",
    "json",
    "key",
    "see",
    "happens",
    "run",
    "run",
    "going",
    "node",
    "encrypt",
    "hit",
    "enter",
    "see",
    "happens",
    "console",
    "log",
    "json",
    "object",
    "key",
    "looks",
    "like",
    "encrypted",
    "got",
    "address",
    "id",
    "version",
    "stuff",
    "stuff",
    "encrypted",
    "version",
    "key",
    "somebody",
    "gets",
    "account",
    "see",
    "know",
    "password",
    "decrypt",
    "private",
    "key",
    "need",
    "know",
    "password",
    "decrypt",
    "json",
    "object",
    "back",
    "private",
    "key",
    "going",
    "encrypted",
    "going",
    "save",
    "fs",
    "dot",
    "write",
    "file",
    "sync",
    "going",
    "pass",
    "dot",
    "slash",
    "dot",
    "encrypted",
    "key",
    "dot",
    "json",
    "comma",
    "encrypted",
    "json",
    "key",
    "saving",
    "new",
    "file",
    "called",
    "dot",
    "encrypted",
    "key",
    "dot",
    "json",
    "passing",
    "encrypted",
    "key",
    "made",
    "open",
    "file",
    "explorer",
    "run",
    "command",
    "see",
    "get",
    "new",
    "file",
    "called",
    "dot",
    "encrypted",
    "key",
    "dot",
    "json",
    "encrypted",
    "key",
    "awesome",
    "want",
    "dot",
    "git",
    "ignore",
    "add",
    "dot",
    "encrypted",
    "key",
    "dot",
    "json",
    "accidentally",
    "push",
    "github",
    "encrypted",
    "key",
    "go",
    "private",
    "key",
    "delete",
    "dot",
    "env",
    "file",
    "also",
    "delete",
    "private",
    "key",
    "password",
    "wmv",
    "file",
    "password",
    "hanging",
    "around",
    "plain",
    "text",
    "encrypted",
    "key",
    "back",
    "deploy",
    "script",
    "change",
    "way",
    "actually",
    "get",
    "wallet",
    "top",
    "getting",
    "wallet",
    "passing",
    "private",
    "key",
    "like",
    "going",
    "going",
    "use",
    "encrypted",
    "key",
    "created",
    "going",
    "going",
    "say",
    "const",
    "encrypted",
    "json",
    "equals",
    "fs",
    "dot",
    "read",
    "file",
    "sync",
    "slash",
    "dot",
    "encrypted",
    "key",
    "dot",
    "json",
    "comma",
    "utf",
    "eight",
    "fs",
    "dot",
    "read",
    "file",
    "sync",
    "going",
    "read",
    "encrypted",
    "key",
    "dot",
    "json",
    "encrypted",
    "json",
    "variable",
    "next",
    "going",
    "create",
    "wallet",
    "encrypted",
    "key",
    "gon",
    "na",
    "say",
    "let",
    "wallet",
    "equals",
    "new",
    "ethers",
    "dot",
    "wallet",
    "dot",
    "encrypted",
    "json",
    "sync",
    "commands",
    "working",
    "ethers",
    "course",
    "find",
    "documentation",
    "encrypted",
    "json",
    "sync",
    "takes",
    "encrypted",
    "json",
    "password",
    "returns",
    "wallet",
    "object",
    "going",
    "pass",
    "encrypted",
    "json",
    "read",
    "going",
    "pass",
    "password",
    "going",
    "process",
    "dot",
    "emp",
    "dot",
    "private",
    "key",
    "password",
    "finally",
    "reason",
    "use",
    "let",
    "connect",
    "wallet",
    "back",
    "provider",
    "look",
    "connecting",
    "wallet",
    "provider",
    "make",
    "transactions",
    "contract",
    "factory",
    "need",
    "make",
    "sure",
    "wallet",
    "knows",
    "provider",
    "say",
    "wallet",
    "equals",
    "await",
    "wallet",
    "dot",
    "connect",
    "provider",
    "run",
    "deploy",
    "dot",
    "j",
    "private",
    "key",
    "password",
    "environment",
    "variable",
    "still",
    "deploy",
    "private",
    "key",
    "password",
    "equals",
    "password",
    "yes",
    "know",
    "terrible",
    "using",
    "node",
    "deploy",
    "dot",
    "j",
    "get",
    "output",
    "seeing",
    "whole",
    "time",
    "able",
    "longer",
    "private",
    "key",
    "dot",
    "env",
    "file",
    "plaintext",
    "anymore",
    "encrypted",
    "key",
    "case",
    "somebody",
    "hacks",
    "computer",
    "still",
    "wo",
    "able",
    "send",
    "new",
    "transactions",
    "unless",
    "know",
    "password",
    "awesome",
    "one",
    "thing",
    "know",
    "type",
    "history",
    "somebody",
    "got",
    "computer",
    "hacker",
    "could",
    "actually",
    "see",
    "private",
    "key",
    "password",
    "equals",
    "password",
    "bash",
    "history",
    "run",
    "history",
    "dash",
    "c",
    "actually",
    "clear",
    "history",
    "type",
    "history",
    "see",
    "recent",
    "command",
    "wrote",
    "history",
    "really",
    "bare",
    "minimum",
    "encryption",
    "keeping",
    "key",
    "safe",
    "might",
    "seem",
    "ridiculous",
    "somebody",
    "might",
    "able",
    "hack",
    "computer",
    "read",
    "encrypted",
    "private",
    "keys",
    "everything",
    "projects",
    "get",
    "bigger",
    "bigger",
    "really",
    "important",
    "know",
    "private",
    "key",
    "security",
    "private",
    "key",
    "safety",
    "course",
    "really",
    "giving",
    "bare",
    "minimum",
    "showing",
    "encrypt",
    "keys",
    "little",
    "bit",
    "safer",
    "rest",
    "course",
    "going",
    "using",
    "syntax",
    "private",
    "key",
    "dot",
    "env",
    "file",
    "reason",
    "like",
    "rest",
    "course",
    "little",
    "bit",
    "easier",
    "really",
    "hoping",
    "hardhead",
    "add",
    "additional",
    "features",
    "make",
    "private",
    "key",
    "encryption",
    "much",
    "safer",
    "also",
    "easier",
    "use",
    "future",
    "probably",
    "reason",
    "okay",
    "solemnly",
    "sworn",
    "going",
    "use",
    "account",
    "real",
    "money",
    "duration",
    "course",
    "going",
    "use",
    "private",
    "keys",
    "tests",
    "aetherium",
    "fake",
    "private",
    "keys",
    "like",
    "one",
    "got",
    "ganache",
    "fact",
    "really",
    "hone",
    "smart",
    "contract",
    "kit",
    "slash",
    "full",
    "blocked",
    "solidity",
    "course",
    "jas",
    "github",
    "repo",
    "discussions",
    "tab",
    "go",
    "announcements",
    "created",
    "one",
    "called",
    "dot",
    "end",
    "pledge",
    "recently",
    "seen",
    "many",
    "people",
    "follow",
    "tutorial",
    "tell",
    "security",
    "risks",
    "made",
    "dot",
    "emv",
    "pledge",
    "would",
    "love",
    "everyone",
    "jump",
    "read",
    "agree",
    "bottom",
    "leave",
    "comment",
    "saying",
    "safe",
    "safe",
    "make",
    "sure",
    "read",
    "understand",
    "going",
    "scare",
    "end",
    "day",
    "use",
    "metamask",
    "tests",
    "funds",
    "duration",
    "course",
    "never",
    "worried",
    "key",
    "gets",
    "compromised",
    "test",
    "cares",
    "using",
    "meta",
    "mask",
    "working",
    "meta",
    "mask",
    "real",
    "funds",
    "going",
    "read",
    "pledge",
    "really",
    "important",
    "understand",
    "working",
    "real",
    "funds",
    "like",
    "hey",
    "working",
    "real",
    "funds",
    "care",
    "great",
    "move",
    "past",
    "whatever",
    "work",
    "real",
    "funds",
    "decide",
    "hey",
    "actually",
    "want",
    "deploy",
    "real",
    "network",
    "need",
    "real",
    "money",
    "come",
    "back",
    "pledge",
    "scroll",
    "bottom",
    "say",
    "safe",
    "make",
    "sure",
    "read",
    "understand",
    "okay",
    "pledge",
    "solemnly",
    "swear",
    "never",
    "place",
    "private",
    "key",
    "secret",
    "phrase",
    "pneumonic",
    "dot",
    "env",
    "file",
    "associated",
    "real",
    "funds",
    "basically",
    "basically",
    "never",
    "private",
    "key",
    "pneumonic",
    "phrase",
    "plain",
    "text",
    "anywhere",
    "place",
    "private",
    "keys",
    "web",
    "file",
    "tested",
    "e",
    "ff",
    "link",
    "cryptocurrencies",
    "private",
    "key",
    "test",
    "net",
    "funds",
    "great",
    "care",
    "aware",
    "forget",
    "dot",
    "git",
    "ignore",
    "push",
    "key",
    "phrase",
    "github",
    "even",
    "split",
    "second",
    "even",
    "show",
    "key",
    "slash",
    "phrase",
    "internet",
    "wherever",
    "may",
    "split",
    "second",
    "considered",
    "compromised",
    "remove",
    "funds",
    "immediately",
    "even",
    "deploy",
    "private",
    "key",
    "website",
    "immediately",
    "delete",
    "website",
    "think",
    "oh",
    "nobody",
    "probably",
    "got",
    "consider",
    "private",
    "key",
    "compromised",
    "remove",
    "funds",
    "real",
    "funds",
    "private",
    "key",
    "tested",
    "funds",
    "gets",
    "compromised",
    "well",
    "cares",
    "time",
    "seeing",
    "time",
    "tested",
    "funds",
    "end",
    "course",
    "want",
    "steal",
    "tests",
    "funds",
    "mean",
    "blast",
    "would",
    "annoying",
    "worst",
    "unsure",
    "account",
    "real",
    "funds",
    "assume",
    "real",
    "funds",
    "know",
    "real",
    "funds",
    "assume",
    "real",
    "funds",
    "use",
    "developing",
    "purposes",
    "finally",
    "aware",
    "even",
    "hit",
    "add",
    "account",
    "meta",
    "mask",
    "eath",
    "wallet",
    "get",
    "new",
    "private",
    "key",
    "share",
    "secret",
    "phrase",
    "slash",
    "pneumonic",
    "accounts",
    "generated",
    "meta",
    "mask",
    "eath",
    "wallet",
    "meta",
    "mask",
    "hit",
    "create",
    "account",
    "get",
    "new",
    "private",
    "key",
    "new",
    "account",
    "however",
    "accounts",
    "created",
    "create",
    "account",
    "button",
    "exact",
    "pneumonic",
    "phrase",
    "secret",
    "phrase",
    "import",
    "account",
    "private",
    "key",
    "going",
    "different",
    "pneumonic",
    "phrase",
    "ones",
    "generate",
    "inside",
    "wallet",
    "going",
    "phrase",
    "okay",
    "great",
    "hopefully",
    "make",
    "sense",
    "pledge",
    "additions",
    "course",
    "use",
    "funds",
    "associated",
    "brand",
    "new",
    "never",
    "use",
    "meta",
    "mask",
    "eath",
    "wallet",
    "scare",
    "work",
    "brand",
    "new",
    "meta",
    "mask",
    "worry",
    "refer",
    "back",
    "start",
    "looking",
    "real",
    "money",
    "real",
    "private",
    "keys",
    "aware",
    "account",
    "associated",
    "private",
    "key",
    "test",
    "nets",
    "main",
    "nets",
    "like",
    "showing",
    "private",
    "key",
    "rinkeby",
    "going",
    "private",
    "key",
    "main",
    "net",
    "must",
    "use",
    "private",
    "key",
    "associated",
    "real",
    "funds",
    "future",
    "100",
    "sure",
    "always",
    "either",
    "use",
    "one",
    "encrypted",
    "methods",
    "patrick",
    "showed",
    "better",
    "encryption",
    "stuff",
    "show",
    "use",
    "command",
    "line",
    "way",
    "pass",
    "private",
    "keys",
    "delete",
    "command",
    "line",
    "history",
    "right",
    "never",
    "actually",
    "deploying",
    "anything",
    "make",
    "work",
    "private",
    "key",
    "real",
    "funds",
    "need",
    "concerned",
    "take",
    "look",
    "read",
    "internalize",
    "make",
    "confident",
    "saying",
    "scare",
    "saying",
    "instill",
    "confidence",
    "things",
    "want",
    "think",
    "okay",
    "great",
    "safe",
    "boom",
    "safe",
    "want",
    "copy",
    "paste",
    "twitter",
    "put",
    "huge",
    "tweet",
    "thread",
    "go",
    "people",
    "know",
    "people",
    "understand",
    "security",
    "risks",
    "wmv",
    "files",
    "private",
    "keys",
    "better",
    "thank",
    "listening",
    "know",
    "definitely",
    "belabor",
    "point",
    "really",
    "important",
    "let",
    "continue",
    "course",
    "alright",
    "done",
    "however",
    "one",
    "two",
    "things",
    "want",
    "clean",
    "right",
    "auto",
    "saving",
    "reason",
    "vs",
    "code",
    "plugin",
    "us",
    "auto",
    "format",
    "however",
    "future",
    "anybody",
    "else",
    "comes",
    "across",
    "repository",
    "might",
    "vyas",
    "code",
    "auto",
    "format",
    "want",
    "give",
    "users",
    "way",
    "format",
    "code",
    "matches",
    "styles",
    "use",
    "prettier",
    "extension",
    "installed",
    "also",
    "add",
    "prettier",
    "node",
    "js",
    "module",
    "tell",
    "users",
    "vyas",
    "code",
    "exactly",
    "format",
    "javascript",
    "solidity",
    "prettier",
    "plugin",
    "solidity",
    "located",
    "link",
    "github",
    "repo",
    "scroll",
    "see",
    "install",
    "npm",
    "install",
    "dash",
    "dash",
    "save",
    "dev",
    "going",
    "use",
    "yarn",
    "going",
    "yarn",
    "add",
    "prettier",
    "prettier",
    "plugin",
    "solidity",
    "installing",
    "prettier",
    "solidity",
    "plugin",
    "prettier",
    "check",
    "package",
    "json",
    "see",
    "two",
    "added",
    "create",
    "new",
    "file",
    "called",
    "dot",
    "prettier",
    "r",
    "file",
    "define",
    "little",
    "curly",
    "braces",
    "define",
    "want",
    "solidity",
    "javascript",
    "example",
    "simple",
    "storage",
    "tab",
    "width",
    "412344",
    "spaces",
    "maybe",
    "want",
    "change",
    "want",
    "tab",
    "width",
    "two",
    "would",
    "save",
    "come",
    "back",
    "simple",
    "storage",
    "save",
    "would",
    "get",
    "auto",
    "formatted",
    "r",
    "dot",
    "prettier",
    "rc",
    "settings",
    "default",
    "editor",
    "solidity",
    "hard",
    "hat",
    "solidity",
    "plugin",
    "default",
    "meta",
    "javascript",
    "prettier",
    "code",
    "one",
    "add",
    "prettier",
    "rc",
    "file",
    "take",
    "precedent",
    "default",
    "configuration",
    "long",
    "downloaded",
    "module",
    "node",
    "modules",
    "see",
    "right",
    "dot",
    "prettier",
    "rc",
    "file",
    "going",
    "keep",
    "tab",
    "form",
    "going",
    "update",
    "one",
    "thing",
    "currently",
    "like",
    "semicolons",
    "end",
    "going",
    "semi",
    "boss",
    "going",
    "save",
    "come",
    "back",
    "deploy",
    "save",
    "see",
    "semicolon",
    "automatically",
    "goes",
    "away",
    "also",
    "going",
    "add",
    "use",
    "tabs",
    "false",
    "since",
    "want",
    "use",
    "spaces",
    "spacing",
    "single",
    "quote",
    "false",
    "way",
    "always",
    "use",
    "double",
    "quote",
    "instead",
    "single",
    "quote",
    "javascript",
    "actually",
    "use",
    "single",
    "quote",
    "double",
    "quote",
    "define",
    "strings",
    "going",
    "make",
    "matter",
    "quote",
    "use",
    "always",
    "double",
    "quote",
    "open",
    "source",
    "repos",
    "projects",
    "make",
    "want",
    "make",
    "readme",
    "files",
    "generally",
    "people",
    "put",
    "instructions",
    "information",
    "project",
    "anything",
    "like",
    "way",
    "whenever",
    "anybody",
    "comes",
    "across",
    "project",
    "know",
    "readme",
    "dot",
    "mds",
    "markdown",
    "syntax",
    "remember",
    "made",
    "trial",
    "discussion",
    "use",
    "interesting",
    "tips",
    "format",
    "solidity",
    "code",
    "well",
    "formatting",
    "process",
    "exact",
    "files",
    "markdown",
    "going",
    "use",
    "markdown",
    "fact",
    "hit",
    "ctrl",
    "shift",
    "v",
    "enter",
    "preview",
    "mode",
    "markdown",
    "see",
    "pound",
    "sign",
    "preview",
    "hard",
    "hat",
    "ethers",
    "simple",
    "storage",
    "fcc",
    "huge",
    "looks",
    "like",
    "heading",
    "top",
    "command",
    "shift",
    "v",
    "view",
    "files",
    "mip",
    "ctrl",
    "shift",
    "v",
    "windows",
    "linux",
    "users",
    "last",
    "thing",
    "going",
    "going",
    "deploy",
    "test",
    "net",
    "interact",
    "test",
    "net",
    "going",
    "use",
    "rinkeby",
    "test",
    "net",
    "sure",
    "use",
    "whatever",
    "recommended",
    "test",
    "net",
    "github",
    "repository",
    "coerce",
    "recommends",
    "looking",
    "code",
    "might",
    "already",
    "good",
    "idea",
    "actually",
    "make",
    "slight",
    "change",
    "based",
    "last",
    "section",
    "know",
    "need",
    "rpc",
    "url",
    "private",
    "key",
    "begin",
    "making",
    "transactions",
    "blockchain",
    "probably",
    "going",
    "need",
    "rink",
    "b",
    "rpc",
    "url",
    "rinky",
    "private",
    "key",
    "find",
    "want",
    "everything",
    "full",
    "decentralized",
    "context",
    "could",
    "run",
    "rink",
    "b",
    "version",
    "geth",
    "could",
    "run",
    "locally",
    "connect",
    "guest",
    "node",
    "going",
    "showing",
    "however",
    "100",
    "something",
    "could",
    "instead",
    "gon",
    "na",
    "use",
    "third",
    "party",
    "rpc",
    "url",
    "github",
    "repo",
    "associated",
    "course",
    "go",
    "lesson",
    "five",
    "scroll",
    "get",
    "link",
    "alchemy",
    "alchemy",
    "node",
    "service",
    "allows",
    "us",
    "connect",
    "blockchain",
    "support",
    "two",
    "alternates",
    "might",
    "quick",
    "node",
    "morales",
    "infura",
    "node",
    "service",
    "options",
    "going",
    "work",
    "alchemy",
    "one",
    "liked",
    "best",
    "go",
    "ahead",
    "get",
    "started",
    "free",
    "login",
    "create",
    "new",
    "account",
    "going",
    "go",
    "ahead",
    "sign",
    "hard",
    "hat",
    "free",
    "code",
    "camp",
    "user",
    "going",
    "select",
    "ethereum",
    "blockchain",
    "ecosystem",
    "let",
    "go",
    "ahead",
    "create",
    "first",
    "app",
    "going",
    "call",
    "free",
    "code",
    "camp",
    "rt",
    "hat",
    "app",
    "name",
    "ethers",
    "simple",
    "storage",
    "fcc",
    "network",
    "going",
    "choose",
    "rink",
    "see",
    "actually",
    "choose",
    "rink",
    "b",
    "choose",
    "really",
    "kovan",
    "rink",
    "b",
    "ropsten",
    "layer",
    "twos",
    "like",
    "arbitrage",
    "optimism",
    "going",
    "using",
    "rink",
    "let",
    "go",
    "ahead",
    "create",
    "app",
    "going",
    "choose",
    "free",
    "plan",
    "hit",
    "continue",
    "going",
    "skip",
    "adding",
    "payments",
    "want",
    "tweet",
    "referral",
    "code",
    "feel",
    "free",
    "tweet",
    "referral",
    "code",
    "going",
    "skip",
    "going",
    "keep",
    "capped",
    "capacity",
    "since",
    "key",
    "hear",
    "us",
    "go",
    "ahead",
    "give",
    "shout",
    "patrick",
    "free",
    "code",
    "camp",
    "hit",
    "let",
    "go",
    "get",
    "alchemy",
    "dashboard",
    "see",
    "ton",
    "information",
    "node",
    "different",
    "ways",
    "connect",
    "nodes",
    "stuff",
    "like",
    "going",
    "really",
    "similar",
    "rpc",
    "server",
    "endpoint",
    "ganache",
    "except",
    "going",
    "connection",
    "except",
    "going",
    "connection",
    "real",
    "test",
    "net",
    "real",
    "main",
    "net",
    "select",
    "app",
    "made",
    "hit",
    "view",
    "key",
    "see",
    "get",
    "api",
    "key",
    "key",
    "add",
    "http",
    "endpoint",
    "also",
    "get",
    "websocket",
    "concerned",
    "http",
    "endpoint",
    "going",
    "rpc",
    "url",
    "connects",
    "rink",
    "copy",
    "come",
    "visual",
    "studio",
    "code",
    "dot",
    "env",
    "substitute",
    "actual",
    "tests",
    "values",
    "rpc",
    "url",
    "going",
    "delete",
    "replace",
    "rigby",
    "rpc",
    "row",
    "get",
    "private",
    "key",
    "actual",
    "test",
    "set",
    "actual",
    "rank",
    "well",
    "use",
    "meta",
    "masks",
    "back",
    "browser",
    "go",
    "meta",
    "mask",
    "select",
    "three",
    "dots",
    "go",
    "account",
    "details",
    "export",
    "private",
    "key",
    "export",
    "private",
    "key",
    "type",
    "password",
    "boom",
    "private",
    "key",
    "account",
    "meta",
    "mask",
    "remember",
    "please",
    "please",
    "please",
    "continue",
    "meta",
    "mask",
    "actual",
    "money",
    "quick",
    "way",
    "check",
    "going",
    "networks",
    "tab",
    "seeing",
    "main",
    "nets",
    "networks",
    "actual",
    "money",
    "see",
    "money",
    "money",
    "know",
    "good",
    "go",
    "tests",
    "money",
    "fine",
    "fake",
    "money",
    "anyways",
    "browsers",
    "profile",
    "mechanism",
    "create",
    "new",
    "profile",
    "use",
    "copied",
    "private",
    "key",
    "come",
    "back",
    "visual",
    "studio",
    "code",
    "paste",
    "key",
    "private",
    "key",
    "actual",
    "rink",
    "awesome",
    "remember",
    "ever",
    "get",
    "low",
    "come",
    "faucets",
    "dot",
    "chain",
    "dot",
    "link",
    "slash",
    "rigby",
    "get",
    "tests",
    "eath",
    "robot",
    "send",
    "request",
    "private",
    "key",
    "rink",
    "try",
    "run",
    "actual",
    "test",
    "net",
    "look",
    "code",
    "see",
    "grabbing",
    "rpc",
    "url",
    "going",
    "r",
    "dot",
    "end",
    "grabbing",
    "private",
    "key",
    "going",
    "daughter",
    "yun",
    "v",
    "points",
    "rink",
    "metamask",
    "rink",
    "b",
    "blockchain",
    "let",
    "add",
    "console",
    "dot",
    "log",
    "contract",
    "deployment",
    "know",
    "address",
    "console",
    "dot",
    "log",
    "string",
    "interpolation",
    "contract",
    "address",
    "contract",
    "dot",
    "address",
    "right",
    "great",
    "let",
    "go",
    "ahead",
    "run",
    "node",
    "deploy",
    "dot",
    "deploying",
    "please",
    "wait",
    "notice",
    "takes",
    "lot",
    "longer",
    "deploying",
    "test",
    "net",
    "instead",
    "fake",
    "local",
    "blockchain",
    "test",
    "nets",
    "real",
    "networks",
    "often",
    "take",
    "little",
    "bit",
    "longer",
    "need",
    "wait",
    "blocks",
    "propagate",
    "transaction",
    "go",
    "etc",
    "brief",
    "delay",
    "indeed",
    "see",
    "get",
    "contract",
    "address",
    "current",
    "favorite",
    "number",
    "little",
    "slow",
    "waiting",
    "next",
    "transaction",
    "go",
    "update",
    "number",
    "boom",
    "looks",
    "like",
    "successfully",
    "updated",
    "something",
    "important",
    "know",
    "ever",
    "run",
    "command",
    "want",
    "kill",
    "ctrl",
    "c",
    "stop",
    "command",
    "terminal",
    "want",
    "abort",
    "ctrl",
    "c",
    "get",
    "jail",
    "free",
    "card",
    "kill",
    "stop",
    "wherever",
    "use",
    "ctrl",
    "c",
    "lot",
    "future",
    "let",
    "grab",
    "contract",
    "address",
    "go",
    "frank",
    "v",
    "ether",
    "scan",
    "paste",
    "see",
    "two",
    "transactions",
    "see",
    "contract",
    "creation",
    "also",
    "see",
    "call",
    "store",
    "function",
    "awesome",
    "successfully",
    "deployed",
    "contract",
    "wrinkly",
    "chain",
    "using",
    "code",
    "congratulations",
    "massive",
    "ether",
    "scan",
    "actually",
    "verify",
    "publish",
    "contract",
    "code",
    "verifying",
    "publishing",
    "code",
    "well",
    "right",
    "code",
    "looks",
    "like",
    "huge",
    "gerbil",
    "bytecode",
    "anybody",
    "looking",
    "contract",
    "directly",
    "chain",
    "see",
    "huge",
    "jumble",
    "bytecode",
    "use",
    "decompiler",
    "try",
    "decompile",
    "bytecode",
    "looks",
    "like",
    "solidity",
    "often",
    "take",
    "long",
    "time",
    "lot",
    "processing",
    "power",
    "instead",
    "make",
    "much",
    "easier",
    "verifying",
    "publishing",
    "code",
    "ourself",
    "go",
    "ahead",
    "hit",
    "verify",
    "publish",
    "scroll",
    "add",
    "compiler",
    "information",
    "compile",
    "ether",
    "scan",
    "block",
    "explorers",
    "single",
    "file",
    "compiler",
    "version",
    "zero",
    "point",
    "open",
    "source",
    "licensed",
    "mit",
    "let",
    "go",
    "ahead",
    "continue",
    "going",
    "copy",
    "paste",
    "solidity",
    "code",
    "large",
    "section",
    "paste",
    "constructor",
    "arguments",
    "skip",
    "section",
    "libraries",
    "miscellaneous",
    "settings",
    "select",
    "robot",
    "hit",
    "verify",
    "publish",
    "might",
    "wait",
    "minutes",
    "awesome",
    "contract",
    "successfully",
    "compiled",
    "go",
    "back",
    "contract",
    "source",
    "code",
    "see",
    "code",
    "grab",
    "contract",
    "address",
    "place",
    "place",
    "search",
    "go",
    "contract",
    "get",
    "little",
    "green",
    "checkmark",
    "see",
    "anybody",
    "read",
    "source",
    "code",
    "additionally",
    "buttons",
    "saw",
    "remix",
    "reading",
    "contract",
    "writing",
    "contract",
    "read",
    "contract",
    "write",
    "contract",
    "read",
    "contract",
    "retrieve",
    "recent",
    "number",
    "indeed",
    "see",
    "seven",
    "recently",
    "stored",
    "seven",
    "awesome",
    "quick",
    "note",
    "might",
    "already",
    "verified",
    "since",
    "ether",
    "scan",
    "might",
    "get",
    "smart",
    "enough",
    "notice",
    "lot",
    "people",
    "deploying",
    "bytecode",
    "already",
    "verified",
    "go",
    "ahead",
    "walk",
    "steps",
    "anyways",
    "code",
    "verification",
    "pretty",
    "simple",
    "straightforward",
    "code",
    "pretty",
    "simple",
    "straightforward",
    "using",
    "larger",
    "complex",
    "code",
    "make",
    "verification",
    "process",
    "little",
    "bit",
    "harder",
    "additionally",
    "always",
    "want",
    "click",
    "buttons",
    "ether",
    "scan",
    "verify",
    "code",
    "want",
    "programmatically",
    "later",
    "sections",
    "learn",
    "verify",
    "code",
    "directly",
    "code",
    "editor",
    "imagine",
    "process",
    "easy",
    "deploying",
    "evm",
    "chain",
    "alchemy",
    "could",
    "easily",
    "create",
    "new",
    "app",
    "change",
    "network",
    "could",
    "see",
    "easy",
    "would",
    "switch",
    "rpc",
    "url",
    "private",
    "key",
    "work",
    "different",
    "chain",
    "process",
    "also",
    "harmony",
    "phantom",
    "avalanche",
    "etc",
    "wanted",
    "switch",
    "chains",
    "would",
    "switch",
    "rpc",
    "url",
    "switch",
    "private",
    "key",
    "everything",
    "else",
    "would",
    "stay",
    "exactly",
    "alchemy",
    "also",
    "shows",
    "us",
    "teach",
    "us",
    "lot",
    "transactions",
    "things",
    "going",
    "behind",
    "scenes",
    "including",
    "concept",
    "called",
    "mempool",
    "help",
    "us",
    "understand",
    "little",
    "bit",
    "transactions",
    "sent",
    "work",
    "alchemy",
    "see",
    "transactions",
    "albert",
    "alchemy",
    "team",
    "give",
    "us",
    "little",
    "demonstration",
    "hello",
    "albert",
    "alchemy",
    "guy",
    "tech",
    "twitter",
    "feel",
    "free",
    "follow",
    "want",
    "engage",
    "ask",
    "questions",
    "section",
    "video",
    "super",
    "excited",
    "join",
    "patrick",
    "explain",
    "little",
    "bit",
    "goes",
    "behind",
    "scenes",
    "using",
    "alchemy",
    "submit",
    "transaction",
    "ton",
    "tools",
    "actually",
    "provide",
    "window",
    "visibility",
    "going",
    "actually",
    "debug",
    "case",
    "usage",
    "errors",
    "website",
    "pending",
    "transactions",
    "stuck",
    "whatever",
    "provide",
    "window",
    "data",
    "control",
    "remember",
    "transactions",
    "submit",
    "recorded",
    "blockchain",
    "controlled",
    "alchemy",
    "controlled",
    "service",
    "provider",
    "window",
    "plumbing",
    "piping",
    "useful",
    "let",
    "show",
    "exactly",
    "means",
    "right",
    "bunch",
    "applications",
    "dashboard",
    "see",
    "different",
    "projects",
    "used",
    "time",
    "one",
    "recently",
    "active",
    "one",
    "currently",
    "set",
    "connect",
    "meta",
    "mask",
    "actually",
    "use",
    "custom",
    "rpc",
    "provider",
    "let",
    "make",
    "face",
    "little",
    "smaller",
    "see",
    "misspelled",
    "rinkeby",
    "right",
    "network",
    "actually",
    "connected",
    "rinkeby",
    "test",
    "network",
    "via",
    "alchemy",
    "actually",
    "application",
    "click",
    "dashboard",
    "see",
    "bunch",
    "really",
    "interesting",
    "statistics",
    "first",
    "thing",
    "probably",
    "use",
    "trying",
    "understand",
    "application",
    "go",
    "see",
    "many",
    "compute",
    "units",
    "per",
    "second",
    "application",
    "currently",
    "using",
    "kind",
    "great",
    "specifically",
    "alchemy",
    "usage",
    "understanding",
    "also",
    "really",
    "useful",
    "see",
    "like",
    "median",
    "response",
    "time",
    "33",
    "milliseconds",
    "pretty",
    "good",
    "starts",
    "increase",
    "might",
    "want",
    "figure",
    "know",
    "going",
    "success",
    "rate",
    "kind",
    "low",
    "clue",
    "click",
    "tab",
    "view",
    "recent",
    "invalid",
    "requests",
    "actually",
    "see",
    "oh",
    "bunch",
    "failed",
    "transactions",
    "transaction",
    "already",
    "sent",
    "nonce",
    "low",
    "whatever",
    "actually",
    "use",
    "tab",
    "debug",
    "success",
    "rate",
    "pretty",
    "useful",
    "throughput",
    "limited",
    "sending",
    "many",
    "requests",
    "website",
    "getting",
    "spammed",
    "might",
    "start",
    "getting",
    "requests",
    "blocked",
    "useful",
    "view",
    "concurrent",
    "requests",
    "success",
    "rate",
    "past",
    "24",
    "hours",
    "versus",
    "past",
    "one",
    "hour",
    "total",
    "number",
    "requests",
    "last",
    "24",
    "hours",
    "different",
    "compute",
    "units",
    "request",
    "different",
    "level",
    "computing",
    "cost",
    "computing",
    "cost",
    "measured",
    "compute",
    "units",
    "total",
    "requests",
    "actual",
    "number",
    "absolute",
    "requests",
    "course",
    "number",
    "invalid",
    "request",
    "cool",
    "one",
    "thing",
    "want",
    "show",
    "interesting",
    "submit",
    "transaction",
    "actually",
    "one",
    "right",
    "want",
    "send",
    "let",
    "transfer",
    "accounts",
    "gon",
    "na",
    "send",
    "tiny",
    "amount",
    "rinkeby",
    "eath",
    "going",
    "purposefully",
    "edit",
    "gas",
    "fees",
    "super",
    "super",
    "low",
    "node",
    "actually",
    "muck",
    "send",
    "transaction",
    "mined",
    "miners",
    "actually",
    "pick",
    "see",
    "divided",
    "priority",
    "fee",
    "max",
    "fee",
    "ton",
    "super",
    "low",
    "might",
    "confirm",
    "mme",
    "max",
    "ui",
    "see",
    "transaction",
    "pending",
    "bit",
    "go",
    "mempool",
    "tab",
    "another",
    "really",
    "useful",
    "visualization",
    "mempool",
    "kind",
    "holding",
    "ground",
    "like",
    "think",
    "waiting",
    "room",
    "restaurant",
    "transaction",
    "waiting",
    "get",
    "mined",
    "mempool",
    "kind",
    "like",
    "waiting",
    "room",
    "waiting",
    "get",
    "seated",
    "different",
    "statuses",
    "transactions",
    "ones",
    "always",
    "want",
    "see",
    "mines",
    "transactions",
    "says",
    "transaction",
    "successful",
    "part",
    "blockchain",
    "mempool",
    "every",
    "node",
    "know",
    "holding",
    "ground",
    "actually",
    "show",
    "quick",
    "visualization",
    "remember",
    "blockchains",
    "run",
    "network",
    "nodes",
    "node",
    "computer",
    "running",
    "theorem",
    "software",
    "maintains",
    "copy",
    "blockchain",
    "developer",
    "use",
    "nodes",
    "make",
    "requests",
    "blockchain",
    "use",
    "alchemy",
    "use",
    "another",
    "rpc",
    "provider",
    "spin",
    "node",
    "want",
    "regardless",
    "need",
    "use",
    "node",
    "communicate",
    "chain",
    "node",
    "beyond",
    "copy",
    "entire",
    "blockchain",
    "state",
    "also",
    "local",
    "memory",
    "transaction",
    "called",
    "mempool",
    "pending",
    "transactions",
    "waiting",
    "mined",
    "consider",
    "mempool",
    "looking",
    "right",
    "click",
    "app",
    "currently",
    "using",
    "metamask",
    "rpc",
    "see",
    "right",
    "one",
    "one",
    "right",
    "one",
    "wrinkling",
    "transactions",
    "see",
    "drop",
    "placed",
    "somewhere",
    "mind",
    "one",
    "pending",
    "pending",
    "one",
    "actually",
    "matches",
    "one",
    "pending",
    "sent",
    "0x",
    "c",
    "bb",
    "click",
    "transaction",
    "hash",
    "get",
    "information",
    "need",
    "debug",
    "see",
    "current",
    "address",
    "0x",
    "five",
    "f",
    "two",
    "0x",
    "c",
    "bb",
    "value",
    "trying",
    "send",
    "gas",
    "fee",
    "attached",
    "transaction",
    "notice",
    "super",
    "low",
    "even",
    "rinkeby",
    "test",
    "network",
    "knowing",
    "seeing",
    "wow",
    "transaction",
    "pending",
    "one",
    "minute",
    "46",
    "seconds",
    "sent",
    "time",
    "probably",
    "fix",
    "actually",
    "use",
    "metamath",
    "rpc",
    "meta",
    "meta",
    "mask",
    "api",
    "speeded",
    "going",
    "use",
    "auto",
    "high",
    "speed",
    "update",
    "gas",
    "fees",
    "go",
    "back",
    "dashboard",
    "back",
    "application",
    "see",
    "new",
    "recent",
    "invalid",
    "requests",
    "resubmitted",
    "transaction",
    "recent",
    "requests",
    "let",
    "refresh",
    "real",
    "quick",
    "see",
    "sending",
    "raw",
    "transaction",
    "one",
    "already",
    "known",
    "another",
    "one",
    "resulting",
    "get",
    "transaction",
    "receipt",
    "successful",
    "go",
    "back",
    "mempool",
    "see",
    "boom",
    "pending",
    "transactions",
    "dropped",
    "replaced",
    "mined",
    "transaction",
    "nonce",
    "number",
    "five",
    "successful",
    "way",
    "developing",
    "maintaining",
    "rest",
    "application",
    "yeah",
    "thanks",
    "hope",
    "useful",
    "let",
    "know",
    "questions",
    "typescript",
    "portion",
    "end",
    "successfully",
    "completed",
    "section",
    "wow",
    "learned",
    "ton",
    "let",
    "quick",
    "review",
    "everything",
    "learned",
    "well",
    "first",
    "learned",
    "create",
    "new",
    "projects",
    "node",
    "js",
    "learned",
    "node",
    "keyword",
    "use",
    "node",
    "keyword",
    "run",
    "javascript",
    "local",
    "development",
    "environment",
    "learned",
    "add",
    "different",
    "dependencies",
    "external",
    "packages",
    "local",
    "package",
    "using",
    "yarn",
    "npm",
    "see",
    "dependencies",
    "added",
    "package",
    "dot",
    "json",
    "know",
    "installed",
    "get",
    "installed",
    "node",
    "modules",
    "folder",
    "also",
    "create",
    "script",
    "section",
    "minimize",
    "long",
    "commands",
    "need",
    "run",
    "single",
    "keyword",
    "like",
    "compile",
    "example",
    "run",
    "yarn",
    "compile",
    "compile",
    "code",
    "learned",
    "basic",
    "setup",
    "javascript",
    "scripts",
    "import",
    "packages",
    "top",
    "main",
    "executor",
    "function",
    "bottom",
    "main",
    "function",
    "middle",
    "use",
    "async",
    "keyword",
    "function",
    "use",
    "asynchronous",
    "programming",
    "get",
    "access",
    "await",
    "keyword",
    "basically",
    "means",
    "hey",
    "wait",
    "promise",
    "finish",
    "thing",
    "able",
    "connect",
    "blockchain",
    "want",
    "using",
    "rpc",
    "url",
    "able",
    "connect",
    "provider",
    "wallet",
    "private",
    "key",
    "ethers",
    "something",
    "like",
    "speaking",
    "learned",
    "ethers",
    "package",
    "tool",
    "makes",
    "life",
    "lot",
    "easier",
    "interact",
    "blockchain",
    "javascript",
    "decide",
    "also",
    "learned",
    "encrypt",
    "private",
    "keys",
    "even",
    "computers",
    "get",
    "hacked",
    "private",
    "keys",
    "lying",
    "around",
    "plaintext",
    "learned",
    "run",
    "scripts",
    "encrypted",
    "keys",
    "learned",
    "get",
    "abi",
    "application",
    "binary",
    "interface",
    "binary",
    "code",
    "deploy",
    "blockchain",
    "learned",
    "deploy",
    "contracts",
    "blockchain",
    "programmatically",
    "learned",
    "interact",
    "contracts",
    "programmatically",
    "well",
    "additionally",
    "learned",
    "add",
    "default",
    "editor",
    "settings",
    "dot",
    "json",
    "vs",
    "code",
    "also",
    "learned",
    "override",
    "settings",
    "adding",
    "prettier",
    "using",
    "dot",
    "prettier",
    "rc",
    "file",
    "way",
    "auto",
    "format",
    "code",
    "make",
    "look",
    "lot",
    "nicer",
    "much",
    "easier",
    "read",
    "finally",
    "learned",
    "deploy",
    "one",
    "contracts",
    "real",
    "test",
    "net",
    "real",
    "network",
    "finally",
    "learned",
    "manual",
    "way",
    "verify",
    "contract",
    "source",
    "code",
    "like",
    "said",
    "going",
    "learn",
    "lot",
    "shortcuts",
    "lot",
    "ways",
    "make",
    "little",
    "bit",
    "easier",
    "coming",
    "sections",
    "oh",
    "done",
    "phenomenally",
    "reach",
    "section",
    "give",
    "pat",
    "back",
    "take",
    "break",
    "go",
    "lap",
    "feel",
    "really",
    "proud",
    "made",
    "far",
    "got",
    "lot",
    "go",
    "come",
    "phenomenally",
    "long",
    "way",
    "congratulations",
    "take",
    "five",
    "10",
    "minute",
    "break",
    "come",
    "back",
    "ready",
    "one",
    "thing",
    "left",
    "want",
    "show",
    "typescript",
    "addition",
    "however",
    "interested",
    "typescript",
    "edition",
    "done",
    "couple",
    "changes",
    "need",
    "make",
    "make",
    "typescript",
    "compatible",
    "first",
    "course",
    "going",
    "change",
    "encrypt",
    "key",
    "going",
    "change",
    "deploy",
    "encrypt",
    "key",
    "dot",
    "j",
    "also",
    "going",
    "swap",
    "requires",
    "imports",
    "going",
    "import",
    "ethers",
    "ethers",
    "going",
    "import",
    "star",
    "fs",
    "fs",
    "extra",
    "going",
    "import",
    "dot",
    "tmp",
    "slash",
    "config",
    "going",
    "copy",
    "gon",
    "na",
    "come",
    "paste",
    "deleting",
    "commenting",
    "requires",
    "okay",
    "great",
    "try",
    "run",
    "node",
    "going",
    "get",
    "use",
    "input",
    "statement",
    "outside",
    "module",
    "javascript",
    "want",
    "use",
    "import",
    "statement",
    "outside",
    "module",
    "come",
    "like",
    "type",
    "module",
    "like",
    "typescript",
    "actually",
    "even",
    "need",
    "need",
    "run",
    "typescript",
    "note",
    "add",
    "typescript",
    "going",
    "yarn",
    "add",
    "typescript",
    "also",
    "going",
    "add",
    "ts",
    "node",
    "ts",
    "node",
    "typescript",
    "edition",
    "node",
    "added",
    "try",
    "ts",
    "node",
    "still",
    "going",
    "run",
    "error",
    "scroll",
    "gon",
    "na",
    "get",
    "couple",
    "errors",
    "gon",
    "na",
    "say",
    "could",
    "find",
    "declaration",
    "file",
    "module",
    "fs",
    "extra",
    "need",
    "add",
    "typescript",
    "version",
    "gon",
    "na",
    "yarn",
    "types",
    "slash",
    "fs",
    "extra",
    "run",
    "still",
    "work",
    "different",
    "reason",
    "yes",
    "gon",
    "na",
    "get",
    "something",
    "like",
    "type",
    "undefined",
    "assignable",
    "type",
    "bytes",
    "like",
    "reason",
    "get",
    "process",
    "dot",
    "emv",
    "private",
    "key",
    "typescript",
    "technically",
    "type",
    "string",
    "undefined",
    "need",
    "tell",
    "typescript",
    "wallet",
    "objects",
    "encrypt",
    "function",
    "looking",
    "type",
    "string",
    "string",
    "undefined",
    "need",
    "tell",
    "typescript",
    "undefined",
    "put",
    "bang",
    "everywhere",
    "use",
    "process",
    "study",
    "oops",
    "got",
    "deploy",
    "well",
    "bang",
    "looks",
    "good",
    "added",
    "everything",
    "run",
    "ts",
    "node",
    "gon",
    "na",
    "see",
    "exact",
    "output",
    "saw",
    "using",
    "regular",
    "node",
    "long",
    "private",
    "key",
    "password",
    "dot",
    "env",
    "file",
    "run",
    "ts",
    "node",
    "crypt",
    "gon",
    "na",
    "get",
    "exact",
    "setup",
    "gon",
    "na",
    "get",
    "new",
    "encrypted",
    "key",
    "dot",
    "json",
    "need",
    "make",
    "typescript",
    "compatible",
    "give",
    "huge",
    "round",
    "applause",
    "getting",
    "far",
    "learning",
    "going",
    "underneath",
    "hardhat",
    "next",
    "tool",
    "going",
    "learn",
    "learning",
    "transactions",
    "interact",
    "blockchains",
    "absolutely",
    "massive",
    "huge",
    "congratulations",
    "alright",
    "learned",
    "ethers",
    "js",
    "raw",
    "javascript",
    "coding",
    "going",
    "move",
    "hardhat",
    "saw",
    "ether",
    "symbol",
    "storage",
    "deploying",
    "contract",
    "take",
    "lot",
    "code",
    "number",
    "things",
    "even",
    "like",
    "save",
    "contract",
    "deployed",
    "go",
    "remember",
    "deployed",
    "every",
    "time",
    "instead",
    "added",
    "programmatically",
    "write",
    "tests",
    "build",
    "testing",
    "infrastructure",
    "maybe",
    "want",
    "make",
    "cross",
    "chain",
    "application",
    "want",
    "one",
    "private",
    "key",
    "rpc",
    "url",
    "absolutely",
    "work",
    "smart",
    "contracts",
    "javascript",
    "purely",
    "ethers",
    "small",
    "scripts",
    "like",
    "want",
    "robust",
    "framework",
    "hard",
    "hat",
    "comes",
    "play",
    "hardhead",
    "easily",
    "one",
    "popular",
    "smart",
    "contract",
    "development",
    "framework",
    "used",
    "massive",
    "several",
    "billion",
    "dollar",
    "protocols",
    "like",
    "ave",
    "uniswap",
    "sushi",
    "swap",
    "fact",
    "recently",
    "poll",
    "twitter",
    "even",
    "though",
    "lot",
    "content",
    "brownie",
    "pythonic",
    "hardhead",
    "well",
    "beyond",
    "popular",
    "framework",
    "hardhead",
    "quickly",
    "become",
    "one",
    "advanced",
    "frameworks",
    "hardhead",
    "development",
    "environment",
    "allows",
    "javascript",
    "based",
    "development",
    "kind",
    "like",
    "saw",
    "ethers",
    "gives",
    "us",
    "even",
    "tools",
    "integrate",
    "code",
    "common",
    "things",
    "want",
    "incredibly",
    "extensible",
    "really",
    "nice",
    "debugging",
    "features",
    "well",
    "overall",
    "fantastic",
    "tool",
    "let",
    "go",
    "ahead",
    "let",
    "jump",
    "want",
    "follow",
    "along",
    "code",
    "come",
    "github",
    "repo",
    "scroll",
    "lesson",
    "six",
    "heart",
    "simple",
    "storage",
    "code",
    "located",
    "quick",
    "note",
    "future",
    "ever",
    "want",
    "download",
    "code",
    "one",
    "repositories",
    "way",
    "git",
    "clone",
    "come",
    "folder",
    "want",
    "put",
    "code",
    "run",
    "git",
    "clone",
    "grab",
    "url",
    "want",
    "clone",
    "paste",
    "cd",
    "new",
    "folder",
    "everything",
    "downloaded",
    "directly",
    "github",
    "backup",
    "download",
    "code",
    "follow",
    "along",
    "right",
    "let",
    "let",
    "create",
    "next",
    "project",
    "using",
    "hard",
    "hat",
    "project",
    "going",
    "making",
    "called",
    "hard",
    "hat",
    "simple",
    "storage",
    "dash",
    "fcc",
    "free",
    "code",
    "camp",
    "going",
    "us",
    "working",
    "simple",
    "storage",
    "contract",
    "hard",
    "hat",
    "going",
    "show",
    "ton",
    "fantastic",
    "tools",
    "use",
    "make",
    "coding",
    "life",
    "way",
    "easier",
    "brand",
    "new",
    "vs",
    "code",
    "going",
    "create",
    "new",
    "folder",
    "us",
    "run",
    "create",
    "brand",
    "new",
    "folder",
    "mk",
    "dir",
    "hard",
    "hat",
    "simple",
    "storage",
    "cc",
    "cd",
    "hard",
    "hat",
    "simple",
    "storage",
    "cd",
    "type",
    "code",
    "period",
    "open",
    "new",
    "visual",
    "studio",
    "code",
    "inside",
    "folder",
    "open",
    "terminal",
    "see",
    "indeed",
    "inside",
    "folder",
    "work",
    "still",
    "course",
    "file",
    "open",
    "folder",
    "select",
    "folder",
    "like",
    "open",
    "inside",
    "folder",
    "folder",
    "setup",
    "working",
    "hard",
    "hat",
    "begin",
    "setting",
    "environment",
    "incredibly",
    "professional",
    "using",
    "hard",
    "hat",
    "framework",
    "got",
    "link",
    "hard",
    "hat",
    "documentation",
    "inside",
    "whole",
    "blockchain",
    "solidity",
    "course",
    "yes",
    "hard",
    "hat",
    "documentation",
    "phenomenal",
    "highly",
    "recommend",
    "everybody",
    "go",
    "section",
    "going",
    "give",
    "pretty",
    "much",
    "everything",
    "need",
    "know",
    "working",
    "hard",
    "hat",
    "simply",
    "go",
    "ahead",
    "tutorial",
    "get",
    "started",
    "want",
    "pause",
    "video",
    "read",
    "tutorial",
    "recommend",
    "give",
    "lot",
    "information",
    "work",
    "hardhat",
    "hardhat",
    "however",
    "going",
    "jump",
    "right",
    "setting",
    "environment",
    "already",
    "installed",
    "gs",
    "linux",
    "mac",
    "os",
    "using",
    "windows",
    "set",
    "wsl",
    "follow",
    "linux",
    "instructions",
    "create",
    "new",
    "hard",
    "hat",
    "project",
    "actually",
    "go",
    "ahead",
    "run",
    "steps",
    "right",
    "instead",
    "npm",
    "going",
    "using",
    "yarn",
    "want",
    "use",
    "npm",
    "absolutely",
    "hard",
    "hat",
    "doc",
    "say",
    "run",
    "npm",
    "init",
    "dash",
    "dash",
    "yes",
    "going",
    "run",
    "yarn",
    "going",
    "create",
    "new",
    "project",
    "us",
    "folder",
    "let",
    "give",
    "name",
    "want",
    "set",
    "hard",
    "hat",
    "symbol",
    "storage",
    "ff",
    "fcc",
    "hit",
    "enter",
    "give",
    "version",
    "want",
    "point",
    "oh",
    "hit",
    "enter",
    "going",
    "skip",
    "description",
    "hitting",
    "enter",
    "going",
    "hit",
    "enter",
    "well",
    "well",
    "enter",
    "well",
    "well",
    "well",
    "keep",
    "blanks",
    "look",
    "package",
    "json",
    "see",
    "name",
    "hardhead",
    "symbol",
    "storage",
    "fcc",
    "version",
    "main",
    "actually",
    "going",
    "delete",
    "main",
    "license",
    "well",
    "yarn",
    "sets",
    "package",
    "json",
    "us",
    "going",
    "yarn",
    "add",
    "dash",
    "dash",
    "dash",
    "app",
    "far",
    "running",
    "yarn",
    "add",
    "whatever",
    "package",
    "name",
    "really",
    "want",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "reasons",
    "little",
    "bit",
    "nuanced",
    "see",
    "information",
    "stackoverflow",
    "question",
    "main",
    "difference",
    "dependencies",
    "required",
    "run",
    "project",
    "whereas",
    "dev",
    "dependencies",
    "required",
    "develop",
    "part",
    "going",
    "dash",
    "dash",
    "dev",
    "get",
    "front",
    "end",
    "portion",
    "course",
    "installing",
    "packages",
    "need",
    "development",
    "directory",
    "install",
    "hard",
    "hat",
    "run",
    "mpx",
    "hard",
    "hat",
    "quick",
    "note",
    "mpx",
    "yarn",
    "equivalent",
    "npm",
    "yarn",
    "yarn",
    "goes",
    "npm",
    "yarn",
    "equivalent",
    "mpx",
    "also",
    "yarn",
    "pretty",
    "much",
    "anytime",
    "see",
    "mpx",
    "something",
    "replace",
    "mpx",
    "yarn",
    "exact",
    "thing",
    "want",
    "run",
    "npm",
    "mpx",
    "absolutely",
    "well",
    "us",
    "going",
    "run",
    "yarn",
    "hardhat",
    "see",
    "get",
    "prompted",
    "actually",
    "start",
    "creating",
    "hardhat",
    "project",
    "run",
    "yarn",
    "hardhat",
    "get",
    "wonderfully",
    "cute",
    "prompt",
    "right",
    "saying",
    "welcome",
    "hardhead",
    "want",
    "create",
    "basic",
    "sample",
    "project",
    "create",
    "advanced",
    "sample",
    "project",
    "advance",
    "project",
    "uses",
    "type",
    "script",
    "create",
    "empty",
    "us",
    "going",
    "select",
    "create",
    "basic",
    "sample",
    "project",
    "going",
    "give",
    "us",
    "boilerplate",
    "really",
    "simple",
    "hardhat",
    "project",
    "hard",
    "hat",
    "project",
    "route",
    "going",
    "folder",
    "right",
    "want",
    "add",
    "git",
    "dot",
    "git",
    "ignore",
    "yes",
    "absolutely",
    "going",
    "using",
    "dot",
    "env",
    "files",
    "want",
    "install",
    "sample",
    "projects",
    "dependencies",
    "yarn",
    "nomic",
    "labs",
    "hard",
    "hat",
    "theory",
    "waffle",
    "chai",
    "going",
    "go",
    "ahead",
    "say",
    "yes",
    "explain",
    "dependencies",
    "bit",
    "let",
    "go",
    "ahead",
    "say",
    "yes",
    "going",
    "install",
    "dependencies",
    "look",
    "package",
    "json",
    "see",
    "added",
    "number",
    "dependencies",
    "like",
    "nomic",
    "labs",
    "hardhead",
    "ethers",
    "macleods",
    "hardhead",
    "waffle",
    "chai",
    "aetherium",
    "waffle",
    "ethers",
    "obviously",
    "already",
    "familiar",
    "ethers",
    "rest",
    "might",
    "little",
    "new",
    "talk",
    "later",
    "great",
    "sample",
    "hardhat",
    "boilerplate",
    "project",
    "let",
    "walk",
    "installed",
    "first",
    "thing",
    "contracts",
    "folder",
    "comes",
    "pre",
    "populated",
    "greeted",
    "outsole",
    "really",
    "minimalistic",
    "contract",
    "next",
    "see",
    "node",
    "modules",
    "course",
    "installed",
    "javascript",
    "dependencies",
    "something",
    "want",
    "know",
    "really",
    "confusing",
    "first",
    "started",
    "working",
    "node",
    "modules",
    "start",
    "add",
    "sign",
    "lot",
    "difference",
    "two",
    "outside",
    "node",
    "modules",
    "known",
    "scoped",
    "packages",
    "effectively",
    "allow",
    "npm",
    "packages",
    "namespace",
    "yarn",
    "packages",
    "allows",
    "organizations",
    "make",
    "clear",
    "packages",
    "official",
    "ones",
    "example",
    "package",
    "scope",
    "angular",
    "know",
    "published",
    "angular",
    "core",
    "team",
    "thing",
    "anything",
    "ap",
    "ens",
    "domains",
    "know",
    "ens",
    "domains",
    "team",
    "anything",
    "abnormal",
    "labs",
    "going",
    "team",
    "created",
    "hard",
    "hat",
    "nomic",
    "labs",
    "hard",
    "hat",
    "ethers",
    "nomic",
    "labs",
    "hard",
    "waffle",
    "sign",
    "know",
    "published",
    "nomic",
    "labs",
    "team",
    "scripts",
    "section",
    "going",
    "adding",
    "scripts",
    "want",
    "write",
    "like",
    "deploying",
    "contracts",
    "interacting",
    "contracts",
    "etc",
    "test",
    "folder",
    "started",
    "building",
    "tests",
    "yet",
    "tests",
    "incredibly",
    "important",
    "working",
    "smart",
    "contracts",
    "sample",
    "test",
    "folder",
    "gives",
    "us",
    "minimalistic",
    "test",
    "testing",
    "smart",
    "contracts",
    "course",
    "git",
    "ignore",
    "course",
    "comes",
    "pre",
    "populated",
    "important",
    "things",
    "ignore",
    "like",
    "dotty",
    "also",
    "node",
    "modules",
    "node",
    "modules",
    "might",
    "get",
    "huge",
    "push",
    "github",
    "one",
    "biggest",
    "changes",
    "adds",
    "hard",
    "file",
    "even",
    "though",
    "minimalistic",
    "right",
    "think",
    "entry",
    "point",
    "scripts",
    "write",
    "configuration",
    "file",
    "determines",
    "rest",
    "code",
    "going",
    "work",
    "interact",
    "blockchain",
    "course",
    "package",
    "dot",
    "json",
    "get",
    "started",
    "readme",
    "remember",
    "first",
    "time",
    "ran",
    "yarn",
    "hard",
    "hat",
    "prompted",
    "getting",
    "started",
    "piece",
    "run",
    "yarn",
    "hardhead",
    "actually",
    "going",
    "get",
    "output",
    "different",
    "options",
    "commands",
    "use",
    "running",
    "hard",
    "hat",
    "run",
    "issue",
    "run",
    "yarn",
    "hard",
    "hat",
    "pops",
    "see",
    "hard",
    "folder",
    "likely",
    "means",
    "hard",
    "hat",
    "dot",
    "config",
    "dot",
    "j",
    "higher",
    "level",
    "folder",
    "node",
    "modules",
    "hard",
    "hat",
    "higher",
    "level",
    "folder",
    "happens",
    "maybe",
    "cd",
    "directory",
    "little",
    "ls",
    "look",
    "see",
    "got",
    "hard",
    "node",
    "modules",
    "earlier",
    "folder",
    "actually",
    "seen",
    "number",
    "engineers",
    "couple",
    "different",
    "problems",
    "friend",
    "cami",
    "going",
    "explain",
    "couple",
    "different",
    "troubleshooting",
    "tips",
    "take",
    "try",
    "avoid",
    "common",
    "errors",
    "developer",
    "annoying",
    "thing",
    "deal",
    "environment",
    "set",
    "issues",
    "name",
    "camila",
    "ramos",
    "devrel",
    "engineer",
    "edge",
    "node",
    "supporting",
    "graph",
    "protocol",
    "going",
    "show",
    "solve",
    "two",
    "common",
    "problems",
    "might",
    "see",
    "working",
    "project",
    "installing",
    "hardhat",
    "running",
    "command",
    "px",
    "hard",
    "hat",
    "new",
    "project",
    "folder",
    "going",
    "expect",
    "get",
    "back",
    "menu",
    "options",
    "like",
    "sometimes",
    "going",
    "get",
    "back",
    "run",
    "error",
    "solution",
    "usually",
    "means",
    "config",
    "file",
    "somewhere",
    "deleting",
    "get",
    "rid",
    "error",
    "going",
    "order",
    "find",
    "file",
    "need",
    "delete",
    "run",
    "command",
    "mpx",
    "hardhats",
    "space",
    "hyphen",
    "hyphen",
    "verbose",
    "going",
    "spit",
    "file",
    "one",
    "going",
    "tell",
    "exactly",
    "delete",
    "deleted",
    "config",
    "file",
    "able",
    "run",
    "mpx",
    "hardhat",
    "project",
    "folder",
    "get",
    "back",
    "many",
    "expecting",
    "another",
    "problem",
    "pretty",
    "common",
    "still",
    "run",
    "time",
    "forgetting",
    "npm",
    "install",
    "whenever",
    "working",
    "repo",
    "people",
    "working",
    "github",
    "let",
    "say",
    "pulling",
    "code",
    "collaborators",
    "working",
    "together",
    "suddenly",
    "working",
    "probably",
    "need",
    "npm",
    "install",
    "terminal",
    "go",
    "ahead",
    "navigate",
    "project",
    "located",
    "run",
    "command",
    "npm",
    "install",
    "new",
    "packages",
    "installed",
    "time",
    "working",
    "code",
    "get",
    "installed",
    "locally",
    "run",
    "code",
    "able",
    "run",
    "successfully",
    "main",
    "things",
    "hardhat",
    "raw",
    "state",
    "main",
    "tasks",
    "run",
    "hardhat",
    "different",
    "tasks",
    "different",
    "commands",
    "run",
    "hardhat",
    "example",
    "yarn",
    "hardhat",
    "counts",
    "print",
    "list",
    "fake",
    "accounts",
    "use",
    "hardhead",
    "similar",
    "list",
    "fake",
    "accounts",
    "used",
    "ganache",
    "compile",
    "contracts",
    "running",
    "yarn",
    "hardhead",
    "compile",
    "similar",
    "ethers",
    "jas",
    "soap",
    "jas",
    "see",
    "run",
    "compile",
    "get",
    "cache",
    "going",
    "quick",
    "way",
    "access",
    "solidity",
    "files",
    "also",
    "get",
    "artifacts",
    "section",
    "artifacts",
    "folder",
    "contains",
    "information",
    "compiled",
    "code",
    "look",
    "example",
    "look",
    "build",
    "info",
    "see",
    "ton",
    "information",
    "compiled",
    "contract",
    "looking",
    "contracts",
    "see",
    "compiled",
    "information",
    "look",
    "hardhat",
    "slash",
    "see",
    "compiled",
    "information",
    "compliation",
    "information",
    "going",
    "artifacts",
    "folder",
    "whenever",
    "want",
    "look",
    "see",
    "going",
    "lower",
    "level",
    "compile",
    "artifacts",
    "folder",
    "everything",
    "number",
    "hard",
    "hat",
    "tasks",
    "run",
    "well",
    "get",
    "go",
    "basics",
    "hard",
    "head",
    "let",
    "go",
    "ahead",
    "try",
    "things",
    "ethers",
    "hard",
    "hat",
    "one",
    "first",
    "things",
    "want",
    "want",
    "write",
    "interact",
    "smart",
    "contracts",
    "let",
    "go",
    "ahead",
    "rename",
    "greeter",
    "dot",
    "soul",
    "simple",
    "storage",
    "dot",
    "soul",
    "click",
    "file",
    "hit",
    "enter",
    "able",
    "rename",
    "otherwise",
    "go",
    "ahead",
    "right",
    "click",
    "delete",
    "create",
    "new",
    "file",
    "call",
    "simple",
    "storage",
    "dot",
    "soul",
    "going",
    "copy",
    "paste",
    "code",
    "previous",
    "simple",
    "storage",
    "saw",
    "file",
    "make",
    "sure",
    "simple",
    "storage",
    "compiling",
    "correctly",
    "running",
    "yarn",
    "hardhat",
    "compile",
    "whoa",
    "looks",
    "like",
    "ran",
    "issue",
    "project",
    "compiled",
    "see",
    "reasons",
    "solidity",
    "pragma",
    "version",
    "file",
    "match",
    "configured",
    "compilers",
    "config",
    "hmm",
    "well",
    "going",
    "contracts",
    "slash",
    "symbol",
    "storage",
    "sol",
    "zero",
    "point",
    "ah",
    "okay",
    "let",
    "go",
    "ahead",
    "fix",
    "open",
    "hard",
    "hat",
    "dot",
    "config",
    "dot",
    "j",
    "quick",
    "note",
    "opening",
    "files",
    "mac",
    "hit",
    "command",
    "p",
    "actually",
    "start",
    "typing",
    "names",
    "files",
    "get",
    "quicker",
    "linux",
    "windows",
    "type",
    "ctrl",
    "p",
    "bring",
    "interestingly",
    "type",
    "man",
    "p",
    "ctrl",
    "p",
    "hit",
    "greater",
    "key",
    "drop",
    "command",
    "palette",
    "know",
    "command",
    "palette",
    "command",
    "palette",
    "search",
    "files",
    "search",
    "commands",
    "hardhead",
    "dot",
    "config",
    "jas",
    "gon",
    "na",
    "scroll",
    "module",
    "dot",
    "exports",
    "change",
    "zero",
    "point",
    "version",
    "going",
    "compile",
    "simple",
    "storage",
    "gon",
    "na",
    "version",
    "hard",
    "hat",
    "looking",
    "let",
    "run",
    "command",
    "hitting",
    "yarn",
    "hardhead",
    "compile",
    "awesome",
    "see",
    "compiled",
    "one",
    "solidity",
    "file",
    "successfully",
    "see",
    "artifacts",
    "go",
    "artifacts",
    "contracts",
    "see",
    "two",
    "contracts",
    "greater",
    "simple",
    "storage",
    "see",
    "ton",
    "information",
    "simple",
    "storage",
    "also",
    "see",
    "lower",
    "level",
    "information",
    "build",
    "info",
    "alright",
    "simple",
    "storage",
    "contract",
    "next",
    "thing",
    "probably",
    "want",
    "learn",
    "deploy",
    "going",
    "write",
    "deploy",
    "script",
    "section",
    "going",
    "showing",
    "write",
    "deploy",
    "script",
    "next",
    "section",
    "going",
    "little",
    "bit",
    "differently",
    "still",
    "going",
    "teach",
    "write",
    "scripts",
    "worked",
    "scripts",
    "heart",
    "app",
    "going",
    "come",
    "sample",
    "script",
    "dot",
    "j",
    "gon",
    "na",
    "go",
    "ahead",
    "hit",
    "enter",
    "renamed",
    "deploy",
    "dot",
    "j",
    "want",
    "read",
    "comments",
    "absolutely",
    "gon",
    "na",
    "go",
    "ahead",
    "delete",
    "quick",
    "keyboard",
    "shortcut",
    "hit",
    "command",
    "ctrl",
    "highlight",
    "text",
    "file",
    "going",
    "go",
    "ahead",
    "delete",
    "going",
    "start",
    "scratch",
    "setup",
    "deploy",
    "script",
    "going",
    "look",
    "really",
    "similar",
    "setup",
    "deploy",
    "script",
    "previous",
    "section",
    "going",
    "imports",
    "top",
    "going",
    "async",
    "main",
    "function",
    "going",
    "call",
    "main",
    "function",
    "let",
    "go",
    "ahead",
    "define",
    "main",
    "function",
    "call",
    "async",
    "function",
    "main",
    "like",
    "call",
    "main",
    "function",
    "want",
    "copy",
    "paste",
    "last",
    "section",
    "absolutely",
    "domain",
    "boom",
    "like",
    "semicolons",
    "going",
    "drive",
    "absolutely",
    "insane",
    "also",
    "going",
    "add",
    "prettier",
    "solidity",
    "prettier",
    "plugins",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "prettier",
    "prettier",
    "plug",
    "solidity",
    "go",
    "ahead",
    "create",
    "dot",
    "prettier",
    "rc",
    "file",
    "going",
    "add",
    "tab",
    "four",
    "use",
    "tabs",
    "false",
    "semi",
    "false",
    "single",
    "quote",
    "also",
    "false",
    "going",
    "using",
    "prettier",
    "rc",
    "file",
    "setup",
    "lot",
    "future",
    "sections",
    "want",
    "copy",
    "paste",
    "absolutely",
    "well",
    "also",
    "going",
    "add",
    "dot",
    "prettier",
    "ignore",
    "tells",
    "prettier",
    "format",
    "files",
    "want",
    "want",
    "prettier",
    "spend",
    "ton",
    "time",
    "formatting",
    "files",
    "going",
    "copy",
    "paste",
    "github",
    "repo",
    "feel",
    "free",
    "copy",
    "paste",
    "github",
    "repo",
    "well",
    "find",
    "code",
    "section",
    "like",
    "said",
    "github",
    "repo",
    "associated",
    "course",
    "unlike",
    "last",
    "section",
    "grab",
    "contract",
    "code",
    "little",
    "bit",
    "manually",
    "hard",
    "hat",
    "actually",
    "number",
    "different",
    "ways",
    "grab",
    "compiled",
    "contracts",
    "first",
    "way",
    "going",
    "actually",
    "going",
    "use",
    "ethers",
    "one",
    "first",
    "confusing",
    "changes",
    "actually",
    "comes",
    "previously",
    "const",
    "ethers",
    "equals",
    "require",
    "ethers",
    "went",
    "ahead",
    "worked",
    "ethers",
    "however",
    "notice",
    "dev",
    "dependencies",
    "dependency",
    "called",
    "hard",
    "hat",
    "ethers",
    "hard",
    "hat",
    "ethers",
    "package",
    "actually",
    "wraps",
    "hard",
    "hat",
    "built",
    "ethers",
    "really",
    "advantageous",
    "allows",
    "hard",
    "hat",
    "keep",
    "track",
    "different",
    "deployments",
    "different",
    "scripts",
    "things",
    "us",
    "instead",
    "importing",
    "ethers",
    "directly",
    "ethers",
    "actually",
    "going",
    "import",
    "ethers",
    "directly",
    "hard",
    "hat",
    "instead",
    "might",
    "seem",
    "little",
    "confusing",
    "first",
    "know",
    "want",
    "work",
    "ethers",
    "heart",
    "usually",
    "much",
    "better",
    "pull",
    "heart",
    "still",
    "ethers",
    "still",
    "work",
    "hard",
    "hat",
    "wo",
    "necessarily",
    "know",
    "different",
    "contract",
    "factories",
    "different",
    "pieces",
    "see",
    "action",
    "second",
    "pulling",
    "ethers",
    "actually",
    "immediately",
    "grab",
    "contract",
    "factory",
    "using",
    "ethers",
    "say",
    "const",
    "simple",
    "storage",
    "factory",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "factory",
    "simple",
    "storage",
    "order",
    "get",
    "simple",
    "storage",
    "contract",
    "factory",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "factory",
    "pulled",
    "right",
    "ethers",
    "package",
    "ethers",
    "know",
    "contracts",
    "folder",
    "ethers",
    "know",
    "already",
    "compiled",
    "simple",
    "storage",
    "dot",
    "soul",
    "artifacts",
    "hard",
    "hat",
    "hand",
    "know",
    "contracts",
    "folder",
    "know",
    "already",
    "compiled",
    "simple",
    "storage",
    "factory",
    "grabbing",
    "work",
    "well",
    "factory",
    "thing",
    "previous",
    "section",
    "deploy",
    "contract",
    "quick",
    "console",
    "dot",
    "log",
    "deploy",
    "flooring",
    "contract",
    "done",
    "kant",
    "simple",
    "storage",
    "equals",
    "await",
    "simple",
    "store",
    "edge",
    "factory",
    "dot",
    "deploy",
    "boom",
    "little",
    "bit",
    "code",
    "already",
    "able",
    "deploy",
    "simple",
    "storage",
    "contract",
    "wait",
    "make",
    "sure",
    "gets",
    "deployed",
    "await",
    "simple",
    "storage",
    "deployed",
    "let",
    "see",
    "happens",
    "go",
    "ahead",
    "run",
    "deploy",
    "script",
    "know",
    "last",
    "section",
    "put",
    "private",
    "key",
    "put",
    "rpc",
    "url",
    "right",
    "either",
    "one",
    "defined",
    "think",
    "script",
    "actually",
    "work",
    "think",
    "break",
    "define",
    "blockchain",
    "going",
    "deploy",
    "also",
    "find",
    "private",
    "key",
    "well",
    "let",
    "go",
    "ahead",
    "try",
    "run",
    "script",
    "terminal",
    "running",
    "yarn",
    "hard",
    "hat",
    "run",
    "scripts",
    "slash",
    "deploy",
    "dot",
    "j",
    "hitting",
    "tab",
    "little",
    "auto",
    "completion",
    "see",
    "happens",
    "well",
    "got",
    "deploying",
    "contract",
    "says",
    "done",
    "really",
    "really",
    "happened",
    "well",
    "let",
    "add",
    "one",
    "line",
    "let",
    "console",
    "dot",
    "log",
    "string",
    "interpolation",
    "deployed",
    "contract",
    "add",
    "simple",
    "storage",
    "address",
    "let",
    "run",
    "get",
    "deployed",
    "contract",
    "get",
    "deployed",
    "contract",
    "get",
    "contract",
    "address",
    "hmm",
    "going",
    "hardhead",
    "fantastic",
    "tool",
    "built",
    "called",
    "hard",
    "hat",
    "network",
    "hard",
    "hat",
    "comes",
    "built",
    "hard",
    "hat",
    "network",
    "local",
    "aetherium",
    "network",
    "node",
    "designed",
    "development",
    "akin",
    "ganache",
    "allows",
    "deploy",
    "contracts",
    "run",
    "tests",
    "debug",
    "code",
    "whenever",
    "run",
    "command",
    "hard",
    "hat",
    "script",
    "hard",
    "hat",
    "task",
    "hard",
    "hat",
    "default",
    "deploy",
    "fake",
    "hard",
    "hat",
    "network",
    "hard",
    "hat",
    "network",
    "similar",
    "ganache",
    "except",
    "instead",
    "ui",
    "runs",
    "background",
    "scripts",
    "fact",
    "go",
    "hard",
    "scroll",
    "bottom",
    "module",
    "exports",
    "section",
    "add",
    "information",
    "default",
    "networks",
    "right",
    "anything",
    "module",
    "export",
    "default",
    "adds",
    "piece",
    "called",
    "default",
    "network",
    "hardhat",
    "anytime",
    "run",
    "script",
    "without",
    "specifying",
    "network",
    "automatically",
    "uses",
    "fake",
    "hard",
    "hat",
    "network",
    "fake",
    "hard",
    "hat",
    "network",
    "comes",
    "automatically",
    "rpc",
    "url",
    "private",
    "key",
    "even",
    "add",
    "one",
    "one",
    "major",
    "advantages",
    "working",
    "hardhead",
    "automatically",
    "gives",
    "fake",
    "blockchain",
    "fake",
    "private",
    "keys",
    "want",
    "little",
    "bit",
    "explicit",
    "always",
    "recommend",
    "explicit",
    "add",
    "default",
    "network",
    "module",
    "experts",
    "default",
    "network",
    "explicitly",
    "stated",
    "hard",
    "hat",
    "however",
    "script",
    "run",
    "choose",
    "whatever",
    "network",
    "want",
    "work",
    "want",
    "explicitly",
    "say",
    "want",
    "run",
    "deploy",
    "script",
    "fake",
    "hard",
    "hat",
    "network",
    "yarn",
    "hard",
    "hat",
    "run",
    "scripts",
    "deploy",
    "dot",
    "j",
    "dash",
    "dash",
    "network",
    "hard",
    "hat",
    "us",
    "telling",
    "hey",
    "want",
    "run",
    "script",
    "hard",
    "hat",
    "network",
    "hopefully",
    "might",
    "able",
    "see",
    "going",
    "network",
    "flag",
    "makes",
    "incredibly",
    "easy",
    "switch",
    "across",
    "different",
    "chains",
    "different",
    "block",
    "chains",
    "different",
    "private",
    "keys",
    "etc",
    "default",
    "network",
    "set",
    "hard",
    "hat",
    "add",
    "networks",
    "well",
    "way",
    "going",
    "add",
    "networks",
    "section",
    "going",
    "define",
    "network",
    "sections",
    "want",
    "remember",
    "put",
    "comment",
    "visual",
    "studio",
    "code",
    "get",
    "mad",
    "recently",
    "worked",
    "rigby",
    "let",
    "go",
    "ahead",
    "add",
    "rinkeby",
    "network",
    "gon",
    "na",
    "say",
    "another",
    "network",
    "gon",
    "na",
    "really",
    "cool",
    "able",
    "change",
    "network",
    "flag",
    "rigby",
    "right",
    "well",
    "quite",
    "try",
    "run",
    "gon",
    "na",
    "get",
    "invalid",
    "value",
    "undefined",
    "hardhat",
    "config",
    "networks",
    "rigby",
    "url",
    "expecting",
    "tell",
    "hey",
    "url",
    "since",
    "hard",
    "hat",
    "network",
    "need",
    "tell",
    "hard",
    "hat",
    "exactly",
    "going",
    "connect",
    "rink",
    "lot",
    "learned",
    "going",
    "come",
    "handy",
    "exactly",
    "going",
    "create",
    "new",
    "dotty",
    "v",
    "file",
    "going",
    "add",
    "rigby",
    "url",
    "dot",
    "env",
    "file",
    "remember",
    "dot",
    "env",
    "r",
    "dot",
    "get",
    "ignore",
    "case",
    "dotty",
    "env",
    "going",
    "add",
    "rpc",
    "url",
    "alcmi",
    "back",
    "said",
    "rpc",
    "url",
    "since",
    "might",
    "want",
    "work",
    "across",
    "multiple",
    "networks",
    "usually",
    "good",
    "specify",
    "exactly",
    "network",
    "url",
    "stands",
    "gon",
    "na",
    "say",
    "rynkeby",
    "rpc",
    "url",
    "equals",
    "paste",
    "url",
    "probably",
    "guessed",
    "add",
    "url",
    "rinkeby",
    "network",
    "readability",
    "usually",
    "like",
    "add",
    "variables",
    "right",
    "module",
    "experts",
    "say",
    "const",
    "rynkeby",
    "rpc",
    "url",
    "equals",
    "process",
    "dot",
    "e",
    "v",
    "dot",
    "rynkeby",
    "rpc",
    "url",
    "going",
    "pulling",
    "rinckey",
    "rpc",
    "url",
    "environment",
    "variable",
    "course",
    "order",
    "pull",
    "environment",
    "variable",
    "going",
    "need",
    "use",
    "dot",
    "env",
    "package",
    "add",
    "going",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "dot",
    "emv",
    "top",
    "hardhead",
    "config",
    "going",
    "add",
    "require",
    "dot",
    "emv",
    "dot",
    "config",
    "enable",
    "config",
    "means",
    "able",
    "pull",
    "rink",
    "rpc",
    "url",
    "dot",
    "env",
    "rinkeby",
    "network",
    "add",
    "url",
    "rinckey",
    "rpc",
    "url",
    "awesome",
    "rpc",
    "url",
    "different",
    "network",
    "else",
    "usually",
    "need",
    "well",
    "usually",
    "need",
    "private",
    "key",
    "work",
    "actual",
    "network",
    "automatically",
    "give",
    "us",
    "private",
    "key",
    "rugby",
    "hardhead",
    "ca",
    "give",
    "us",
    "test",
    "etherium",
    "need",
    "actual",
    "account",
    "actual",
    "test",
    "nets",
    "hardhead",
    "control",
    "actually",
    "give",
    "real",
    "url",
    "real",
    "private",
    "key",
    "add",
    "private",
    "keys",
    "actually",
    "add",
    "something",
    "called",
    "accounts",
    "add",
    "list",
    "accounts",
    "want",
    "give",
    "hard",
    "hat",
    "us",
    "going",
    "add",
    "one",
    "going",
    "private",
    "key",
    "private",
    "key",
    "going",
    "exact",
    "thing",
    "gon",
    "na",
    "say",
    "const",
    "private",
    "key",
    "equals",
    "process",
    "dot",
    "e",
    "nv",
    "dot",
    "private",
    "key",
    "since",
    "private",
    "key",
    "going",
    "real",
    "private",
    "key",
    "real",
    "test",
    "net",
    "going",
    "grab",
    "meta",
    "mask",
    "go",
    "meta",
    "mask",
    "three",
    "dots",
    "account",
    "details",
    "export",
    "private",
    "key",
    "add",
    "password",
    "dot",
    "env",
    "add",
    "private",
    "key",
    "equals",
    "add",
    "private",
    "key",
    "know",
    "said",
    "100",
    "times",
    "please",
    "please",
    "please",
    "learning",
    "use",
    "real",
    "key",
    "connected",
    "real",
    "money",
    "case",
    "please",
    "use",
    "new",
    "meta",
    "mask",
    "know",
    "said",
    "bunch",
    "people",
    "go",
    "going",
    "okay",
    "safe",
    "super",
    "super",
    "safe",
    "please",
    "use",
    "brand",
    "new",
    "meta",
    "mask",
    "private",
    "key",
    "going",
    "add",
    "account",
    "private",
    "key",
    "account",
    "one",
    "thing",
    "like",
    "like",
    "give",
    "chain",
    "id",
    "network",
    "rigby",
    "going",
    "every",
    "single",
    "evm",
    "base",
    "network",
    "new",
    "chain",
    "id",
    "evm",
    "network",
    "basically",
    "means",
    "solidity",
    "works",
    "includes",
    "test",
    "nets",
    "good",
    "site",
    "called",
    "may",
    "may",
    "going",
    "point",
    "list",
    "different",
    "networks",
    "example",
    "see",
    "theory",
    "main",
    "net",
    "chain",
    "id",
    "one",
    "byte",
    "smart",
    "chain",
    "56",
    "avalanches",
    "4311",
    "phantom",
    "opera",
    "250",
    "polygon",
    "137",
    "etc",
    "one",
    "evm",
    "compatible",
    "chains",
    "chain",
    "id",
    "rank",
    "v",
    "chain",
    "id",
    "adding",
    "chain",
    "id",
    "helpful",
    "later",
    "get",
    "future",
    "go",
    "ahead",
    "make",
    "sure",
    "add",
    "chain",
    "ids",
    "okay",
    "rpc",
    "url",
    "private",
    "key",
    "go",
    "ahead",
    "test",
    "deploying",
    "actual",
    "test",
    "net",
    "actually",
    "something",
    "incorrect",
    "gon",
    "na",
    "get",
    "error",
    "want",
    "go",
    "ahead",
    "try",
    "figure",
    "debug",
    "error",
    "ready",
    "alright",
    "let",
    "yarn",
    "hard",
    "hat",
    "run",
    "scripts",
    "deploy",
    "dot",
    "j",
    "dash",
    "dash",
    "network",
    "rinkeby",
    "get",
    "wonderfully",
    "weird",
    "error",
    "see",
    "deployed",
    "contract",
    "know",
    "deploy",
    "script",
    "get",
    "least",
    "line",
    "getting",
    "error",
    "highly",
    "likely",
    "hear",
    "going",
    "saying",
    "read",
    "properties",
    "reading",
    "send",
    "transaction",
    "want",
    "absolutely",
    "go",
    "spot",
    "basically",
    "looks",
    "like",
    "hard",
    "time",
    "understanding",
    "private",
    "key",
    "account",
    "think",
    "going",
    "recommend",
    "well",
    "clear",
    "little",
    "bit",
    "triaging",
    "debugging",
    "going",
    "copy",
    "air",
    "going",
    "come",
    "google",
    "paste",
    "right",
    "looks",
    "like",
    "get",
    "question",
    "stackexchange",
    "etherium",
    "looks",
    "like",
    "really",
    "similar",
    "scroll",
    "running",
    "nearly",
    "exact",
    "script",
    "running",
    "using",
    "mpx",
    "instead",
    "yarn",
    "got",
    "pretty",
    "minimalistic",
    "deploy",
    "file",
    "let",
    "scroll",
    "see",
    "answers",
    "say",
    "seen",
    "error",
    "private",
    "key",
    "properly",
    "populated",
    "would",
    "also",
    "use",
    "environment",
    "variable",
    "pretty",
    "sure",
    "environment",
    "variables",
    "good",
    "second",
    "one",
    "saying",
    "heart",
    "head",
    "think",
    "jas",
    "accounts",
    "instead",
    "account",
    "works",
    "let",
    "go",
    "back",
    "head",
    "config",
    "see",
    "going",
    "uh",
    "huh",
    "put",
    "account",
    "accounts",
    "let",
    "swap",
    "accounts",
    "clear",
    "terminal",
    "run",
    "uh",
    "huh",
    "reading",
    "little",
    "bit",
    "longer",
    "good",
    "means",
    "probably",
    "deploying",
    "rink",
    "b",
    "want",
    "see",
    "awesome",
    "see",
    "deployed",
    "contract",
    "contract",
    "address",
    "grab",
    "contract",
    "pop",
    "bring",
    "ether",
    "scan",
    "numbering",
    "ether",
    "scan",
    "go",
    "ahead",
    "paste",
    "awesome",
    "see",
    "contract",
    "created",
    "26",
    "seconds",
    "ago",
    "perfect",
    "part",
    "deploy",
    "rink",
    "follow",
    "along",
    "good",
    "enough",
    "remember",
    "flying",
    "test",
    "take",
    "long",
    "time",
    "one",
    "deploy",
    "alright",
    "great",
    "deployed",
    "rink",
    "using",
    "hard",
    "hat",
    "fantastic",
    "something",
    "notice",
    "oof",
    "contract",
    "verified",
    "go",
    "back",
    "verify",
    "publish",
    "stuff",
    "luckily",
    "us",
    "actually",
    "need",
    "well",
    "back",
    "deploy",
    "script",
    "add",
    "code",
    "automatically",
    "verify",
    "right",
    "deploy",
    "let",
    "go",
    "ahead",
    "right",
    "main",
    "function",
    "gon",
    "na",
    "create",
    "new",
    "function",
    "called",
    "verify",
    "gon",
    "na",
    "say",
    "async",
    "function",
    "verify",
    "gon",
    "na",
    "function",
    "get",
    "past",
    "arguments",
    "gon",
    "na",
    "get",
    "past",
    "contract",
    "address",
    "arguments",
    "contract",
    "since",
    "simple",
    "storage",
    "constructor",
    "arguments",
    "simple",
    "storage",
    "gon",
    "na",
    "blank",
    "future",
    "contracts",
    "constructors",
    "arguments",
    "going",
    "populated",
    "get",
    "see",
    "mean",
    "need",
    "least",
    "contract",
    "address",
    "going",
    "add",
    "code",
    "automatically",
    "verify",
    "contracts",
    "deployed",
    "auto",
    "verification",
    "process",
    "works",
    "block",
    "explorers",
    "like",
    "ether",
    "scan",
    "might",
    "work",
    "block",
    "explorers",
    "like",
    "eath",
    "pler",
    "block",
    "explorers",
    "want",
    "verify",
    "block",
    "explorers",
    "sure",
    "api",
    "allow",
    "well",
    "ether",
    "scan",
    "block",
    "explorers",
    "section",
    "website",
    "called",
    "api",
    "documentation",
    "something",
    "api",
    "ways",
    "us",
    "programmatically",
    "interact",
    "ether",
    "scan",
    "stuff",
    "one",
    "main",
    "things",
    "actually",
    "verify",
    "contracts",
    "api",
    "ether",
    "scan",
    "even",
    "tutorial",
    "called",
    "verifying",
    "contracts",
    "programmatically",
    "link",
    "github",
    "repo",
    "api",
    "endpoint",
    "make",
    "requests",
    "go",
    "ahead",
    "verify",
    "contracts",
    "could",
    "absolutely",
    "make",
    "raw",
    "api",
    "calls",
    "follow",
    "tutorial",
    "actually",
    "easier",
    "way",
    "even",
    "going",
    "tutorial",
    "hardhead",
    "extensible",
    "framework",
    "meaning",
    "add",
    "something",
    "called",
    "plugins",
    "even",
    "advanced",
    "section",
    "documentation",
    "called",
    "building",
    "plugins",
    "scroll",
    "bottom",
    "see",
    "popular",
    "plugins",
    "nomic",
    "labs",
    "team",
    "hardhead",
    "team",
    "created",
    "also",
    "number",
    "community",
    "plugins",
    "well",
    "one",
    "used",
    "hardhead",
    "plugins",
    "going",
    "hard",
    "hat",
    "ether",
    "scan",
    "plugin",
    "makes",
    "verification",
    "process",
    "much",
    "much",
    "easier",
    "install",
    "run",
    "npm",
    "install",
    "bash",
    "save",
    "dev",
    "nomic",
    "labs",
    "harden",
    "ether",
    "scan",
    "add",
    "hard",
    "hat",
    "dot",
    "config",
    "since",
    "using",
    "yarn",
    "going",
    "go",
    "ahead",
    "use",
    "yarn",
    "back",
    "code",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "nomic",
    "labs",
    "slash",
    "hard",
    "hat",
    "slash",
    "hyphen",
    "ether",
    "scan",
    "plugin",
    "go",
    "hard",
    "hat",
    "dot",
    "config",
    "scroll",
    "top",
    "add",
    "plugin",
    "require",
    "nomic",
    "labs",
    "slash",
    "hard",
    "hat",
    "ether",
    "scan",
    "plugin",
    "hard",
    "hat",
    "documentation",
    "information",
    "usage",
    "actually",
    "use",
    "plugin",
    "run",
    "different",
    "commands",
    "order",
    "us",
    "use",
    "verification",
    "actually",
    "need",
    "api",
    "key",
    "ether",
    "scan",
    "basically",
    "password",
    "allowing",
    "us",
    "use",
    "ether",
    "scan",
    "api",
    "going",
    "come",
    "ether",
    "scan",
    "going",
    "go",
    "ahead",
    "sign",
    "actually",
    "going",
    "click",
    "sign",
    "create",
    "account",
    "go",
    "ahead",
    "create",
    "account",
    "go",
    "ahead",
    "verify",
    "registration",
    "clicking",
    "verification",
    "link",
    "click",
    "login",
    "logged",
    "left",
    "hand",
    "side",
    "scroll",
    "api",
    "keys",
    "go",
    "ahead",
    "create",
    "new",
    "api",
    "key",
    "call",
    "h",
    "h",
    "hyphen",
    "sec",
    "stands",
    "hardhat",
    "free",
    "code",
    "camp",
    "great",
    "new",
    "api",
    "key",
    "copy",
    "go",
    "back",
    "code",
    "add",
    "somewhere",
    "since",
    "api",
    "keys",
    "basically",
    "considered",
    "password",
    "think",
    "add",
    "right",
    "dot",
    "env",
    "dot",
    "env",
    "going",
    "add",
    "new",
    "entry",
    "called",
    "ether",
    "scan",
    "api",
    "key",
    "going",
    "add",
    "api",
    "key",
    "got",
    "api",
    "key",
    "back",
    "hardhead",
    "config",
    "going",
    "create",
    "new",
    "section",
    "module",
    "dot",
    "exports",
    "tell",
    "hardhat",
    "ether",
    "scan",
    "api",
    "key",
    "new",
    "section",
    "going",
    "called",
    "ether",
    "scan",
    "gon",
    "na",
    "say",
    "api",
    "key",
    "going",
    "ether",
    "scan",
    "api",
    "key",
    "going",
    "define",
    "way",
    "define",
    "keys",
    "say",
    "const",
    "ether",
    "scan",
    "api",
    "key",
    "equals",
    "process",
    "dot",
    "e",
    "nv",
    "dot",
    "ether",
    "scan",
    "api",
    "key",
    "something",
    "like",
    "pops",
    "generally",
    "hit",
    "enter",
    "autocomplete",
    "awesome",
    "great",
    "ether",
    "scan",
    "api",
    "key",
    "back",
    "heart",
    "documentation",
    "tells",
    "us",
    "adding",
    "actually",
    "get",
    "new",
    "task",
    "called",
    "verify",
    "let",
    "try",
    "open",
    "terminal",
    "back",
    "yarn",
    "rt",
    "hat",
    "let",
    "see",
    "pops",
    "wow",
    "get",
    "new",
    "verification",
    "run",
    "yarn",
    "hard",
    "hat",
    "harder",
    "actually",
    "looks",
    "hard",
    "checks",
    "plugins",
    "new",
    "plugins",
    "add",
    "new",
    "task",
    "manually",
    "verify",
    "contract",
    "yarn",
    "mpx",
    "harnett",
    "verify",
    "dash",
    "dash",
    "network",
    "deployed",
    "contract",
    "address",
    "constructor",
    "arguments",
    "want",
    "little",
    "bit",
    "programmatic",
    "going",
    "going",
    "go",
    "back",
    "create",
    "verification",
    "function",
    "good",
    "know",
    "via",
    "command",
    "line",
    "want",
    "verify",
    "something",
    "future",
    "manually",
    "let",
    "build",
    "verify",
    "function",
    "though",
    "going",
    "take",
    "contract",
    "address",
    "arguments",
    "sake",
    "going",
    "console",
    "dot",
    "log",
    "verifying",
    "contract",
    "know",
    "might",
    "wait",
    "little",
    "bit",
    "code",
    "actually",
    "run",
    "task",
    "hard",
    "hat",
    "using",
    "run",
    "package",
    "top",
    "actually",
    "going",
    "import",
    "run",
    "hard",
    "hat",
    "well",
    "run",
    "allows",
    "us",
    "run",
    "hard",
    "hat",
    "task",
    "code",
    "going",
    "wait",
    "run",
    "thought",
    "part",
    "allows",
    "add",
    "different",
    "parameters",
    "well",
    "run",
    "usually",
    "best",
    "go",
    "ahead",
    "add",
    "really",
    "specific",
    "yarn",
    "hardhat",
    "verify",
    "dash",
    "dash",
    "help",
    "see",
    "parameters",
    "actually",
    "pass",
    "well",
    "looks",
    "like",
    "pass",
    "verify",
    "parameter",
    "colon",
    "verify",
    "go",
    "actual",
    "github",
    "verification",
    "tasks",
    "actually",
    "see",
    "verify",
    "verify",
    "get",
    "minimum",
    "build",
    "verify",
    "get",
    "constructor",
    "arguments",
    "verify",
    "verify",
    "going",
    "working",
    "couple",
    "subtasks",
    "well",
    "second",
    "parameter",
    "goes",
    "inside",
    "run",
    "going",
    "list",
    "actual",
    "parameters",
    "second",
    "parameter",
    "kind",
    "sub",
    "task",
    "verify",
    "task",
    "going",
    "object",
    "contains",
    "actual",
    "parameters",
    "pass",
    "address",
    "going",
    "contract",
    "address",
    "construct",
    "arguments",
    "going",
    "arcs",
    "normally",
    "right",
    "enough",
    "us",
    "go",
    "ahead",
    "use",
    "verify",
    "contract",
    "main",
    "function",
    "going",
    "add",
    "one",
    "additional",
    "thing",
    "practice",
    "sometimes",
    "errors",
    "come",
    "one",
    "errors",
    "often",
    "comes",
    "running",
    "wait",
    "contract",
    "already",
    "verified",
    "actually",
    "likely",
    "run",
    "ether",
    "scan",
    "get",
    "smart",
    "enough",
    "seeing",
    "enough",
    "bytecode",
    "exactly",
    "simple",
    "storage",
    "start",
    "automatically",
    "verify",
    "bytecode",
    "looks",
    "like",
    "simple",
    "storage",
    "await",
    "throw",
    "error",
    "want",
    "avoid",
    "add",
    "try",
    "catch",
    "onto",
    "await",
    "outside",
    "way",
    "going",
    "add",
    "try",
    "going",
    "add",
    "little",
    "brackets",
    "wrap",
    "around",
    "weight",
    "going",
    "put",
    "catch",
    "known",
    "try",
    "catch",
    "solidity",
    "also",
    "tried",
    "catches",
    "basically",
    "e",
    "going",
    "error",
    "section",
    "throws",
    "going",
    "going",
    "say",
    "message",
    "already",
    "verified",
    "going",
    "continue",
    "gon",
    "na",
    "say",
    "lowercase",
    "going",
    "make",
    "sure",
    "lowercase",
    "includes",
    "already",
    "five",
    "going",
    "console",
    "dot",
    "log",
    "already",
    "verified",
    "like",
    "otherwise",
    "going",
    "console",
    "dot",
    "log",
    "reason",
    "errors",
    "verification",
    "function",
    "break",
    "whole",
    "script",
    "end",
    "want",
    "whole",
    "script",
    "end",
    "want",
    "script",
    "keep",
    "continuing",
    "verification",
    "work",
    "really",
    "big",
    "deal",
    "know",
    "might",
    "seem",
    "like",
    "lot",
    "code",
    "feel",
    "free",
    "copy",
    "paste",
    "github",
    "repo",
    "move",
    "along",
    "awesome",
    "verify",
    "function",
    "using",
    "verify",
    "task",
    "hardhat",
    "let",
    "go",
    "ahead",
    "use",
    "main",
    "function",
    "right",
    "deploy",
    "console",
    "dot",
    "log",
    "deployed",
    "contract",
    "two",
    "contract",
    "address",
    "call",
    "main",
    "function",
    "let",
    "think",
    "quick",
    "second",
    "happens",
    "deploy",
    "rt",
    "hat",
    "network",
    "well",
    "remember",
    "deploy",
    "hard",
    "hat",
    "network",
    "contract",
    "need",
    "verified",
    "need",
    "scan",
    "well",
    "know",
    "know",
    "rink",
    "ether",
    "scan",
    "know",
    "covid",
    "ether",
    "scan",
    "know",
    "main",
    "net",
    "easy",
    "scan",
    "hardhead",
    "ether",
    "scan",
    "course",
    "right",
    "hard",
    "runtime",
    "environment",
    "network",
    "local",
    "machine",
    "make",
    "sense",
    "us",
    "verify",
    "hard",
    "hat",
    "network",
    "deployed",
    "contract",
    "ether",
    "scan",
    "actually",
    "want",
    "call",
    "verify",
    "function",
    "working",
    "local",
    "network",
    "chain",
    "ids",
    "going",
    "come",
    "quite",
    "useful",
    "check",
    "see",
    "network",
    "running",
    "live",
    "network",
    "test",
    "net",
    "network",
    "actually",
    "verified",
    "actually",
    "get",
    "network",
    "configuration",
    "information",
    "importing",
    "network",
    "like",
    "something",
    "like",
    "console",
    "dot",
    "log",
    "network",
    "dot",
    "config",
    "run",
    "yarn",
    "art",
    "hit",
    "run",
    "scripts",
    "hard",
    "hat",
    "network",
    "since",
    "passing",
    "network",
    "flag",
    "get",
    "massive",
    "output",
    "looks",
    "like",
    "network",
    "dot",
    "config",
    "contains",
    "ton",
    "information",
    "current",
    "network",
    "see",
    "chain",
    "id",
    "hardhead",
    "network",
    "actually",
    "31337",
    "gas",
    "price",
    "gets",
    "set",
    "auto",
    "block",
    "gas",
    "limit",
    "current",
    "fork",
    "aetherium",
    "working",
    "pieces",
    "chain",
    "id",
    "really",
    "important",
    "use",
    "chain",
    "id",
    "figure",
    "one",
    "test",
    "net",
    "one",
    "live",
    "network",
    "remember",
    "running",
    "script",
    "going",
    "dash",
    "dash",
    "network",
    "hard",
    "hat",
    "see",
    "channel",
    "id",
    "still",
    "default",
    "network",
    "heart",
    "config",
    "hard",
    "hat",
    "saying",
    "every",
    "single",
    "time",
    "run",
    "script",
    "secretly",
    "running",
    "dash",
    "dash",
    "network",
    "hard",
    "hat",
    "want",
    "verify",
    "test",
    "net",
    "say",
    "network",
    "dot",
    "config",
    "chain",
    "id",
    "equals",
    "equals",
    "equals",
    "four",
    "going",
    "rank",
    "b",
    "ad",
    "javascript",
    "equals",
    "equals",
    "equals",
    "nearly",
    "equals",
    "equals",
    "except",
    "type",
    "conversion",
    "done",
    "means",
    "javascript",
    "four",
    "equals",
    "four",
    "four",
    "equals",
    "equals",
    "string",
    "four",
    "four",
    "use",
    "four",
    "equals",
    "equals",
    "equals",
    "four",
    "false",
    "true",
    "equals",
    "equals",
    "four",
    "equals",
    "equals",
    "would",
    "true",
    "four",
    "equals",
    "equals",
    "string",
    "four",
    "would",
    "also",
    "true",
    "four",
    "equals",
    "equals",
    "equals",
    "string",
    "four",
    "going",
    "false",
    "kind",
    "whatever",
    "want",
    "equals",
    "equals",
    "equals",
    "equals",
    "equals",
    "want",
    "say",
    "network",
    "dot",
    "config",
    "dot",
    "trinity",
    "four",
    "rinkeby",
    "go",
    "ahead",
    "actually",
    "verify",
    "also",
    "want",
    "make",
    "sure",
    "verify",
    "ether",
    "scan",
    "api",
    "key",
    "exists",
    "also",
    "site",
    "double",
    "ampersand",
    "means",
    "say",
    "process",
    "dot",
    "e",
    "nv",
    "dot",
    "ether",
    "scan",
    "api",
    "key",
    "boolean",
    "tricks",
    "basically",
    "first",
    "conditional",
    "saying",
    "network",
    "dot",
    "config",
    "chinati",
    "equals",
    "equals",
    "equals",
    "four",
    "section",
    "true",
    "false",
    "obviously",
    "right",
    "chain",
    "id",
    "running",
    "hardest",
    "network",
    "would",
    "mean",
    "equal",
    "four",
    "would",
    "rinckey",
    "means",
    "equal",
    "four",
    "conditional",
    "side",
    "side",
    "work",
    "javascript",
    "object",
    "exists",
    "try",
    "cast",
    "boolean",
    "converted",
    "true",
    "exist",
    "converted",
    "false",
    "javascript",
    "basically",
    "either",
    "scan",
    "api",
    "key",
    "exists",
    "data",
    "vi",
    "true",
    "false",
    "another",
    "way",
    "read",
    "line",
    "saying",
    "network",
    "dot",
    "config",
    "trinity",
    "aka",
    "rink",
    "b",
    "ether",
    "scan",
    "api",
    "key",
    "exists",
    "stuff",
    "going",
    "want",
    "run",
    "verify",
    "verify",
    "function",
    "pass",
    "contract",
    "address",
    "going",
    "simple",
    "storage",
    "dot",
    "address",
    "constructor",
    "arguments",
    "know",
    "going",
    "blank",
    "since",
    "verify",
    "function",
    "async",
    "function",
    "deals",
    "promises",
    "stuff",
    "want",
    "add",
    "await",
    "keyword",
    "awesome",
    "added",
    "way",
    "actually",
    "verify",
    "contract",
    "quite",
    "done",
    "see",
    "ether",
    "scan",
    "block",
    "explorers",
    "instant",
    "deploy",
    "contract",
    "instant",
    "send",
    "contract",
    "ether",
    "scan",
    "might",
    "know",
    "transaction",
    "yet",
    "might",
    "take",
    "hot",
    "second",
    "ether",
    "scan",
    "speed",
    "blockchain",
    "usually",
    "best",
    "practice",
    "wait",
    "blocks",
    "mined",
    "actually",
    "run",
    "verification",
    "process",
    "actually",
    "learned",
    "already",
    "deploy",
    "transaction",
    "actually",
    "verify",
    "run",
    "want",
    "run",
    "weight",
    "simple",
    "storage",
    "deploy",
    "transaction",
    "wait",
    "six",
    "wait",
    "six",
    "blocks",
    "run",
    "verification",
    "process",
    "want",
    "go",
    "test",
    "right",
    "absolutely",
    "going",
    "keep",
    "going",
    "though",
    "testing",
    "test",
    "net",
    "takes",
    "little",
    "bit",
    "extra",
    "time",
    "going",
    "finish",
    "rest",
    "main",
    "function",
    "going",
    "run",
    "everything",
    "together",
    "okay",
    "cool",
    "deployed",
    "contract",
    "automatically",
    "programmatically",
    "verified",
    "contract",
    "next",
    "well",
    "last",
    "time",
    "started",
    "interacting",
    "contract",
    "let",
    "const",
    "current",
    "value",
    "equals",
    "await",
    "simple",
    "storage",
    "dot",
    "retrieve",
    "get",
    "current",
    "value",
    "simple",
    "storage",
    "retrieve",
    "function",
    "returns",
    "favorite",
    "number",
    "let",
    "get",
    "current",
    "value",
    "console",
    "dot",
    "log",
    "current",
    "value",
    "string",
    "interpolation",
    "current",
    "value",
    "go",
    "ahead",
    "update",
    "current",
    "value",
    "cons",
    "transaction",
    "response",
    "equals",
    "await",
    "simple",
    "storage",
    "store",
    "store",
    "number",
    "seven",
    "await",
    "transaction",
    "response",
    "dot",
    "wait",
    "wait",
    "one",
    "block",
    "transaction",
    "go",
    "grab",
    "updated",
    "value",
    "saying",
    "const",
    "updated",
    "value",
    "equals",
    "await",
    "simple",
    "storage",
    "dot",
    "retrieve",
    "console",
    "log",
    "added",
    "value",
    "updated",
    "value",
    "awesome",
    "going",
    "whole",
    "script",
    "zoom",
    "little",
    "bit",
    "know",
    "little",
    "bit",
    "small",
    "got",
    "huge",
    "main",
    "function",
    "well",
    "deploys",
    "contract",
    "test",
    "net",
    "verifies",
    "contract",
    "updates",
    "value",
    "seven",
    "verify",
    "function",
    "section",
    "code",
    "calls",
    "main",
    "function",
    "run",
    "hard",
    "hat",
    "network",
    "think",
    "happen",
    "well",
    "let",
    "try",
    "yarn",
    "net",
    "run",
    "scripts",
    "deploy",
    "dot",
    "j",
    "alright",
    "awesome",
    "get",
    "exactly",
    "saw",
    "get",
    "deploying",
    "contract",
    "deployed",
    "contract",
    "current",
    "value",
    "zero",
    "update",
    "value",
    "seven",
    "nothing",
    "verification",
    "exactly",
    "want",
    "moment",
    "truth",
    "let",
    "try",
    "rinkeby",
    "yarn",
    "rt",
    "hat",
    "run",
    "scripts",
    "deploy",
    "dot",
    "j",
    "dash",
    "dash",
    "network",
    "rinkeby",
    "gon",
    "na",
    "go",
    "lot",
    "slower",
    "obviously",
    "deploying",
    "actual",
    "test",
    "net",
    "blocks",
    "actually",
    "need",
    "mined",
    "see",
    "deployed",
    "contract",
    "contract",
    "deployed",
    "know",
    "currently",
    "waiting",
    "six",
    "block",
    "confirmations",
    "us",
    "go",
    "ahead",
    "verify",
    "actually",
    "add",
    "console",
    "dot",
    "log",
    "waiting",
    "block",
    "x",
    "get",
    "campus",
    "weird",
    "oh",
    "wait",
    "looks",
    "like",
    "ran",
    "error",
    "file",
    "directory",
    "looks",
    "like",
    "code",
    "might",
    "compiled",
    "correctly",
    "gon",
    "na",
    "gon",
    "na",
    "go",
    "ahead",
    "delete",
    "artifacts",
    "trash",
    "gon",
    "na",
    "delete",
    "cache",
    "well",
    "going",
    "try",
    "rerunning",
    "whenever",
    "run",
    "script",
    "hard",
    "drive",
    "command",
    "hardhead",
    "automatically",
    "recompile",
    "especially",
    "artifacts",
    "folder",
    "going",
    "rerun",
    "command",
    "heartbeat",
    "going",
    "compile",
    "first",
    "see",
    "exactly",
    "going",
    "go",
    "ahead",
    "redeploy",
    "hopefully",
    "time",
    "able",
    "find",
    "contract",
    "compiled",
    "looks",
    "like",
    "time",
    "deleted",
    "artifacts",
    "folder",
    "actually",
    "indeed",
    "get",
    "successful",
    "compilation",
    "see",
    "successfully",
    "submitted",
    "source",
    "code",
    "contract",
    "verification",
    "block",
    "explore",
    "waiting",
    "verification",
    "results",
    "successfully",
    "verified",
    "contracts",
    "simple",
    "storage",
    "ether",
    "scan",
    "even",
    "gives",
    "us",
    "link",
    "go",
    "ahead",
    "command",
    "click",
    "control",
    "click",
    "see",
    "contract",
    "indeed",
    "verified",
    "awesome",
    "perfect",
    "got",
    "successful",
    "deploy",
    "dot",
    "j",
    "script",
    "deploy",
    "verify",
    "interact",
    "code",
    "fantastic",
    "hard",
    "hat",
    "thing",
    "seems",
    "pretty",
    "cool",
    "else",
    "hard",
    "hat",
    "like",
    "showed",
    "hard",
    "hat",
    "comes",
    "tasks",
    "number",
    "tasks",
    "hardhead",
    "come",
    "extended",
    "us",
    "writing",
    "plugins",
    "actually",
    "write",
    "tasks",
    "hardhat",
    "hardhead",
    "dot",
    "config",
    "defaulted",
    "task",
    "account",
    "see",
    "task",
    "accounts",
    "prints",
    "list",
    "accounts",
    "prints",
    "list",
    "accounts",
    "actually",
    "go",
    "heart",
    "documentation",
    "learn",
    "creating",
    "tasks",
    "one",
    "ways",
    "define",
    "tasks",
    "directly",
    "heart",
    "typically",
    "people",
    "new",
    "folder",
    "called",
    "tasks",
    "put",
    "tasks",
    "gon",
    "na",
    "go",
    "ahead",
    "delete",
    "section",
    "going",
    "create",
    "task",
    "notice",
    "deleted",
    "section",
    "run",
    "yarn",
    "rdap",
    "longer",
    "see",
    "accounts",
    "task",
    "deleted",
    "task",
    "let",
    "create",
    "new",
    "task",
    "call",
    "block",
    "use",
    "get",
    "current",
    "block",
    "number",
    "whatever",
    "blockchain",
    "working",
    "let",
    "create",
    "task",
    "first",
    "need",
    "import",
    "task",
    "function",
    "get",
    "saying",
    "const",
    "task",
    "equals",
    "require",
    "arhat",
    "slash",
    "config",
    "hard",
    "hat",
    "slash",
    "config",
    "task",
    "function",
    "define",
    "task",
    "say",
    "task",
    "give",
    "name",
    "description",
    "name",
    "going",
    "blocked",
    "number",
    "description",
    "going",
    "prints",
    "current",
    "block",
    "number",
    "task",
    "couple",
    "things",
    "actually",
    "add",
    "different",
    "parameters",
    "using",
    "dot",
    "add",
    "command",
    "allow",
    "us",
    "pass",
    "parameters",
    "task",
    "could",
    "also",
    "set",
    "actions",
    "define",
    "task",
    "actually",
    "us",
    "going",
    "dot",
    "set",
    "action",
    "define",
    "want",
    "function",
    "going",
    "make",
    "async",
    "function",
    "going",
    "take",
    "input",
    "task",
    "arguments",
    "going",
    "blank",
    "us",
    "hr",
    "e",
    "define",
    "second",
    "let",
    "explain",
    "syntax",
    "really",
    "quickly",
    "might",
    "look",
    "little",
    "bit",
    "weird",
    "known",
    "javascript",
    "arrow",
    "function",
    "javascript",
    "actually",
    "define",
    "functions",
    "without",
    "even",
    "using",
    "function",
    "keyword",
    "example",
    "go",
    "back",
    "deploy",
    "function",
    "async",
    "function",
    "verify",
    "however",
    "another",
    "way",
    "could",
    "defined",
    "without",
    "using",
    "function",
    "word",
    "actually",
    "turning",
    "whole",
    "thing",
    "variable",
    "could",
    "said",
    "instead",
    "could",
    "say",
    "const",
    "verify",
    "going",
    "async",
    "function",
    "takes",
    "contract",
    "addresses",
    "arguments",
    "function",
    "definition",
    "two",
    "lines",
    "essentially",
    "equivalent",
    "slight",
    "differences",
    "using",
    "function",
    "keyword",
    "function",
    "variable",
    "purposes",
    "course",
    "basically",
    "means",
    "though",
    "function",
    "assigned",
    "variable",
    "essentially",
    "two",
    "exactly",
    "syntax",
    "imagine",
    "sort",
    "like",
    "const",
    "block",
    "task",
    "equals",
    "async",
    "function",
    "takes",
    "params",
    "runs",
    "arrow",
    "function",
    "think",
    "async",
    "function",
    "block",
    "task",
    "parameters",
    "function",
    "definition",
    "essentially",
    "major",
    "difference",
    "never",
    "giving",
    "function",
    "name",
    "never",
    "give",
    "block",
    "task",
    "variable",
    "known",
    "anonymous",
    "function",
    "javascript",
    "name",
    "function",
    "call",
    "function",
    "get",
    "block",
    "number",
    "well",
    "get",
    "block",
    "number",
    "run",
    "tasks",
    "automatically",
    "pass",
    "anonymous",
    "functions",
    "task",
    "arguments",
    "one",
    "also",
    "pass",
    "hr",
    "ii",
    "object",
    "hrv",
    "heart",
    "hat",
    "runtime",
    "environment",
    "back",
    "deploy",
    "script",
    "basically",
    "require",
    "hard",
    "hat",
    "hrv",
    "access",
    "lot",
    "hrv",
    "access",
    "lot",
    "packages",
    "hard",
    "hat",
    "package",
    "hae",
    "dot",
    "ethers",
    "like",
    "import",
    "ethers",
    "hard",
    "hat",
    "ethers",
    "package",
    "actually",
    "number",
    "functions",
    "use",
    "like",
    "dot",
    "pro",
    "biter",
    "dot",
    "get",
    "block",
    "number",
    "let",
    "save",
    "variable",
    "const",
    "blocked",
    "number",
    "equals",
    "going",
    "synchronous",
    "going",
    "want",
    "add",
    "weight",
    "let",
    "console",
    "dot",
    "log",
    "block",
    "number",
    "better",
    "yet",
    "string",
    "interpolate",
    "say",
    "current",
    "block",
    "number",
    "like",
    "though",
    "try",
    "run",
    "task",
    "notice",
    "show",
    "heart",
    "atlas",
    "tasks",
    "let",
    "yarn",
    "art",
    "app",
    "hmm",
    "see",
    "block",
    "number",
    "well",
    "need",
    "add",
    "config",
    "dot",
    "config",
    "add",
    "require",
    "dot",
    "slash",
    "tasks",
    "slash",
    "block",
    "number",
    "order",
    "us",
    "import",
    "let",
    "add",
    "module",
    "exports",
    "explain",
    "little",
    "bit",
    "later",
    "required",
    "run",
    "yarn",
    "hard",
    "hat",
    "see",
    "blocked",
    "one",
    "tasks",
    "use",
    "run",
    "yarn",
    "art",
    "hat",
    "block",
    "number",
    "get",
    "current",
    "block",
    "number",
    "zero",
    "makes",
    "sense",
    "defaulting",
    "hard",
    "hat",
    "network",
    "gets",
    "reset",
    "every",
    "time",
    "run",
    "run",
    "yarn",
    "hard",
    "hat",
    "block",
    "number",
    "dash",
    "dash",
    "network",
    "rinkeby",
    "think",
    "gon",
    "na",
    "get",
    "much",
    "larger",
    "number",
    "current",
    "block",
    "number",
    "right",
    "actual",
    "block",
    "number",
    "rigby",
    "versus",
    "block",
    "number",
    "heart",
    "ad",
    "network",
    "going",
    "zero",
    "gets",
    "reset",
    "every",
    "single",
    "time",
    "run",
    "one",
    "scripts",
    "scripts",
    "tasks",
    "basically",
    "thing",
    "interact",
    "contracts",
    "deploy",
    "smart",
    "contracts",
    "pretty",
    "much",
    "everything",
    "prefer",
    "scripts",
    "general",
    "rule",
    "thumb",
    "always",
    "think",
    "adding",
    "special",
    "thing",
    "command",
    "line",
    "makes",
    "sense",
    "prefer",
    "scripts",
    "see",
    "ton",
    "tasks",
    "examples",
    "well",
    "think",
    "tasks",
    "really",
    "nice",
    "specific",
    "use",
    "cases",
    "part",
    "pretty",
    "much",
    "going",
    "use",
    "exclusively",
    "scripts",
    "good",
    "know",
    "task",
    "looks",
    "like",
    "use",
    "think",
    "tasks",
    "better",
    "plugins",
    "scripts",
    "better",
    "local",
    "development",
    "environment",
    "want",
    "everything",
    "tasks",
    "absolutely",
    "starting",
    "see",
    "config",
    "piece",
    "pretty",
    "powerful",
    "use",
    "modify",
    "entire",
    "code",
    "base",
    "entire",
    "project",
    "give",
    "project",
    "functionality",
    "else",
    "well",
    "right",
    "see",
    "every",
    "time",
    "work",
    "hard",
    "hat",
    "network",
    "every",
    "time",
    "run",
    "script",
    "run",
    "script",
    "hard",
    "hat",
    "network",
    "deleted",
    "right",
    "ca",
    "interact",
    "contracts",
    "anymore",
    "well",
    "actually",
    "way",
    "us",
    "run",
    "hard",
    "hat",
    "network",
    "similar",
    "ran",
    "ganache",
    "network",
    "user",
    "interface",
    "hard",
    "hat",
    "run",
    "yarn",
    "rt",
    "hat",
    "node",
    "spin",
    "node",
    "local",
    "network",
    "exactly",
    "ganache",
    "terminal",
    "see",
    "started",
    "http",
    "websocket",
    "json",
    "rpc",
    "server",
    "address",
    "like",
    "nosh",
    "comes",
    "packed",
    "different",
    "accounts",
    "private",
    "keys",
    "awesome",
    "notice",
    "though",
    "interestingly",
    "enough",
    "node",
    "running",
    "hard",
    "hat",
    "network",
    "well",
    "actually",
    "create",
    "new",
    "terminal",
    "try",
    "interact",
    "hitting",
    "little",
    "plus",
    "button",
    "creating",
    "new",
    "terminal",
    "using",
    "bash",
    "based",
    "whatever",
    "operating",
    "system",
    "using",
    "different",
    "shell",
    "let",
    "go",
    "ahead",
    "run",
    "yarn",
    "arhat",
    "run",
    "scripts",
    "deploy",
    "dot",
    "j",
    "see",
    "happens",
    "well",
    "typical",
    "setup",
    "happens",
    "deploy",
    "contract",
    "get",
    "contract",
    "address",
    "update",
    "value",
    "look",
    "node",
    "look",
    "like",
    "transactions",
    "went",
    "see",
    "locking",
    "going",
    "well",
    "hard",
    "hat",
    "network",
    "actually",
    "different",
    "locally",
    "running",
    "network",
    "locally",
    "running",
    "network",
    "often",
    "want",
    "refer",
    "local",
    "host",
    "slightly",
    "different",
    "hard",
    "hat",
    "network",
    "still",
    "using",
    "hard",
    "hat",
    "runtime",
    "environment",
    "default",
    "hard",
    "hat",
    "network",
    "considered",
    "separate",
    "network",
    "running",
    "node",
    "going",
    "live",
    "past",
    "duration",
    "script",
    "actually",
    "interact",
    "adding",
    "new",
    "network",
    "create",
    "new",
    "network",
    "call",
    "local",
    "host",
    "exactly",
    "give",
    "url",
    "accounts",
    "chain",
    "id",
    "url",
    "get",
    "url",
    "right",
    "terminal",
    "put",
    "running",
    "yarn",
    "hard",
    "hat",
    "node",
    "copying",
    "pasting",
    "comma",
    "give",
    "chain",
    "id",
    "even",
    "though",
    "considered",
    "different",
    "network",
    "actually",
    "chain",
    "id",
    "hard",
    "hat",
    "interestingly",
    "enough",
    "know",
    "said",
    "going",
    "give",
    "accounts",
    "actually",
    "need",
    "give",
    "accounts",
    "run",
    "localhost",
    "hard",
    "hat",
    "automatically",
    "give",
    "us",
    "10",
    "fake",
    "accounts",
    "us",
    "kind",
    "think",
    "accounts",
    "localhost",
    "hard",
    "already",
    "placing",
    "thanks",
    "hard",
    "hat",
    "go",
    "back",
    "bash",
    "let",
    "clear",
    "terminal",
    "let",
    "rerun",
    "script",
    "dash",
    "dash",
    "network",
    "local",
    "host",
    "pointing",
    "node",
    "run",
    "script",
    "see",
    "logging",
    "output",
    "end",
    "node",
    "let",
    "go",
    "ahead",
    "hit",
    "enter",
    "well",
    "see",
    "normal",
    "stuff",
    "deploy",
    "script",
    "flip",
    "back",
    "node",
    "wow",
    "see",
    "ton",
    "logging",
    "similar",
    "ganache",
    "see",
    "whole",
    "bunch",
    "different",
    "logs",
    "happened",
    "see",
    "contract",
    "deployed",
    "see",
    "address",
    "transaction",
    "hash",
    "value",
    "gas",
    "block",
    "number",
    "everything",
    "also",
    "see",
    "contract",
    "call",
    "calling",
    "store",
    "function",
    "update",
    "value",
    "favorite",
    "number",
    "incredibly",
    "powerful",
    "quickly",
    "testing",
    "working",
    "things",
    "local",
    "javascript",
    "vm",
    "hard",
    "hat",
    "network",
    "able",
    "see",
    "contracts",
    "interact",
    "real",
    "test",
    "net",
    "much",
    "quicker",
    "working",
    "real",
    "test",
    "net",
    "additionally",
    "said",
    "process",
    "running",
    "terminal",
    "kill",
    "ctrl",
    "want",
    "stop",
    "node",
    "restart",
    "hit",
    "ctrl",
    "c",
    "stop",
    "rerun",
    "command",
    "spin",
    "node",
    "ctrl",
    "c",
    "stops",
    "start",
    "another",
    "way",
    "stop",
    "course",
    "hit",
    "trashcan",
    "deletes",
    "whole",
    "terminal",
    "pulled",
    "terminal",
    "back",
    "run",
    "remember",
    "hit",
    "x",
    "actually",
    "delete",
    "terminal",
    "hides",
    "hard",
    "hat",
    "node",
    "right",
    "still",
    "running",
    "hit",
    "pull",
    "back",
    "see",
    "indeed",
    "still",
    "running",
    "trashed",
    "candidate",
    "pulled",
    "terminal",
    "back",
    "see",
    "longer",
    "running",
    "running",
    "scripts",
    "great",
    "want",
    "code",
    "entire",
    "script",
    "things",
    "want",
    "tinker",
    "around",
    "blockchain",
    "well",
    "hard",
    "hat",
    "comes",
    "packed",
    "thing",
    "called",
    "console",
    "console",
    "javascript",
    "environment",
    "us",
    "run",
    "javascript",
    "commands",
    "interact",
    "blockchain",
    "jump",
    "console",
    "running",
    "yarn",
    "hardhat",
    "console",
    "whatever",
    "network",
    "flag",
    "want",
    "work",
    "rink",
    "b",
    "main",
    "net",
    "polygon",
    "avalanche",
    "etc",
    "network",
    "local",
    "host",
    "dropped",
    "shell",
    "shell",
    "everything",
    "deploy",
    "script",
    "even",
    "run",
    "imports",
    "everything",
    "hard",
    "hat",
    "automatically",
    "imported",
    "console",
    "example",
    "let",
    "say",
    "wanted",
    "get",
    "simple",
    "storage",
    "contract",
    "factory",
    "well",
    "could",
    "run",
    "exactly",
    "line",
    "could",
    "say",
    "const",
    "simple",
    "storage",
    "factory",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "factory",
    "simple",
    "storage",
    "go",
    "ahead",
    "even",
    "deploy",
    "even",
    "copy",
    "line",
    "paste",
    "flip",
    "back",
    "node",
    "see",
    "deployed",
    "nother",
    "simple",
    "storage",
    "things",
    "like",
    "await",
    "simple",
    "storage",
    "dot",
    "retrieve",
    "get",
    "return",
    "value",
    "going",
    "big",
    "number",
    "value",
    "zero",
    "also",
    "make",
    "transactions",
    "weight",
    "simple",
    "storage",
    "store",
    "let",
    "55",
    "hit",
    "twice",
    "go",
    "back",
    "simple",
    "storage",
    "dot",
    "retrieve",
    "call",
    "function",
    "see",
    "big",
    "number",
    "value",
    "great",
    "way",
    "quickly",
    "interact",
    "blockchain",
    "want",
    "exit",
    "shell",
    "hitting",
    "ctrl",
    "c",
    "twice",
    "get",
    "also",
    "also",
    "trash",
    "terminal",
    "get",
    "confused",
    "console",
    "works",
    "network",
    "even",
    "yarn",
    "hard",
    "hat",
    "console",
    "dash",
    "dash",
    "network",
    "hard",
    "hat",
    "get",
    "dropped",
    "hard",
    "hat",
    "network",
    "going",
    "node",
    "running",
    "going",
    "one",
    "runs",
    "duration",
    "command",
    "whenever",
    "cancel",
    "command",
    "hard",
    "hat",
    "network",
    "gets",
    "cancelled",
    "close",
    "also",
    "yarn",
    "hard",
    "hat",
    "console",
    "dash",
    "dash",
    "network",
    "rinkeby",
    "rigby",
    "polygon",
    "test",
    "net",
    "main",
    "net",
    "whatever",
    "want",
    "things",
    "like",
    "ethers",
    "dot",
    "provider",
    "things",
    "like",
    "await",
    "ethers",
    "dot",
    "provider",
    "dot",
    "get",
    "block",
    "number",
    "see",
    "block",
    "number",
    "rigby",
    "also",
    "deploy",
    "contracts",
    "update",
    "contracts",
    "anything",
    "want",
    "anything",
    "consoles",
    "great",
    "ways",
    "quickly",
    "test",
    "tinker",
    "interact",
    "contracts",
    "couple",
    "tasks",
    "really",
    "helpful",
    "see",
    "went",
    "ahead",
    "deleted",
    "artifacts",
    "deleted",
    "cache",
    "manually",
    "well",
    "also",
    "run",
    "yarn",
    "hardhead",
    "clean",
    "delete",
    "artifacts",
    "folder",
    "clear",
    "cache",
    "already",
    "know",
    "compiled",
    "one",
    "biggest",
    "things",
    "hardhead",
    "fantastic",
    "especially",
    "running",
    "tests",
    "run",
    "tests",
    "yet",
    "far",
    "however",
    "running",
    "tests",
    "absolutely",
    "critical",
    "smart",
    "contract",
    "development",
    "journey",
    "going",
    "spend",
    "lot",
    "time",
    "future",
    "writing",
    "really",
    "good",
    "tests",
    "reason",
    "writing",
    "tests",
    "important",
    "want",
    "make",
    "sure",
    "code",
    "exactly",
    "want",
    "especially",
    "defy",
    "decentralized",
    "smart",
    "contract",
    "world",
    "code",
    "going",
    "open",
    "source",
    "anybody",
    "interact",
    "potentially",
    "exploit",
    "sites",
    "like",
    "req",
    "dot",
    "news",
    "go",
    "ton",
    "previous",
    "hacks",
    "actually",
    "got",
    "hacked",
    "happened",
    "smart",
    "contract",
    "enable",
    "hacks",
    "occur",
    "testing",
    "writing",
    "really",
    "strong",
    "tests",
    "always",
    "going",
    "first",
    "line",
    "defense",
    "sample",
    "comes",
    "default",
    "basic",
    "package",
    "hardhat",
    "probably",
    "already",
    "know",
    "going",
    "rename",
    "change",
    "going",
    "rename",
    "test",
    "deploy",
    "dot",
    "j",
    "going",
    "delete",
    "everything",
    "start",
    "scratch",
    "want",
    "able",
    "test",
    "solidity",
    "code",
    "locally",
    "know",
    "exactly",
    "programmatic",
    "way",
    "make",
    "sure",
    "code",
    "want",
    "let",
    "write",
    "basic",
    "test",
    "simple",
    "storage",
    "contract",
    "sure",
    "exactly",
    "want",
    "hard",
    "hat",
    "testing",
    "works",
    "mocha",
    "framework",
    "javascript",
    "based",
    "framework",
    "running",
    "tests",
    "actually",
    "write",
    "tests",
    "directly",
    "solidity",
    "like",
    "bit",
    "back",
    "forth",
    "whether",
    "testing",
    "pure",
    "solidity",
    "better",
    "testing",
    "modern",
    "programming",
    "language",
    "argument",
    "goes",
    "testing",
    "modern",
    "programming",
    "language",
    "flexibility",
    "stuff",
    "interact",
    "test",
    "smart",
    "contracts",
    "argument",
    "testing",
    "us",
    "solidity",
    "want",
    "close",
    "code",
    "possible",
    "time",
    "recording",
    "projects",
    "vast",
    "majority",
    "testing",
    "modern",
    "programming",
    "language",
    "like",
    "javascript",
    "going",
    "using",
    "get",
    "started",
    "mocha",
    "tests",
    "going",
    "write",
    "describe",
    "function",
    "describe",
    "keyword",
    "hardheaded",
    "mocha",
    "recognize",
    "takes",
    "two",
    "parameters",
    "takes",
    "string",
    "going",
    "write",
    "simple",
    "storage",
    "also",
    "takes",
    "function",
    "could",
    "make",
    "function",
    "test",
    "func",
    "write",
    "stuff",
    "pass",
    "describe",
    "common",
    "convention",
    "going",
    "make",
    "anonymous",
    "function",
    "create",
    "typing",
    "function",
    "putting",
    "empty",
    "parameter",
    "brackets",
    "like",
    "describe",
    "function",
    "takes",
    "name",
    "string",
    "function",
    "another",
    "way",
    "often",
    "see",
    "functions",
    "describe",
    "using",
    "anonymous",
    "function",
    "syntax",
    "might",
    "see",
    "parentheses",
    "arrow",
    "brackets",
    "two",
    "going",
    "basically",
    "differences",
    "second",
    "one",
    "actually",
    "best",
    "practice",
    "know",
    "might",
    "see",
    "arrow",
    "syntax",
    "tests",
    "well",
    "described",
    "sample",
    "storage",
    "function",
    "going",
    "tests",
    "inside",
    "one",
    "describe",
    "blocks",
    "gon",
    "na",
    "something",
    "called",
    "bunch",
    "function",
    "going",
    "tell",
    "us",
    "hits",
    "going",
    "ton",
    "going",
    "ids",
    "going",
    "actually",
    "write",
    "code",
    "running",
    "tests",
    "going",
    "code",
    "tells",
    "us",
    "one",
    "hits",
    "also",
    "actually",
    "describes",
    "inside",
    "describes",
    "nested",
    "describes",
    "really",
    "helpful",
    "separating",
    "modularizing",
    "tests",
    "one",
    "going",
    "setup",
    "looks",
    "like",
    "demo",
    "going",
    "one",
    "order",
    "test",
    "smart",
    "contracts",
    "actually",
    "run",
    "tests",
    "probably",
    "going",
    "need",
    "deploy",
    "smart",
    "contracts",
    "first",
    "inside",
    "going",
    "pass",
    "function",
    "going",
    "tell",
    "testing",
    "framework",
    "test",
    "going",
    "pass",
    "async",
    "function",
    "like",
    "want",
    "deploy",
    "simple",
    "storage",
    "contract",
    "going",
    "need",
    "get",
    "ethers",
    "framework",
    "exactly",
    "deploy",
    "script",
    "top",
    "gon",
    "na",
    "say",
    "const",
    "ethers",
    "equals",
    "require",
    "art",
    "import",
    "ethers",
    "hard",
    "hat",
    "function",
    "say",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "factory",
    "simple",
    "storage",
    "assign",
    "const",
    "simple",
    "storage",
    "factory",
    "run",
    "away",
    "simple",
    "storage",
    "factory",
    "dot",
    "deploy",
    "cool",
    "let",
    "also",
    "assign",
    "variable",
    "cost",
    "simple",
    "since",
    "right",
    "simple",
    "storage",
    "simple",
    "storage",
    "factory",
    "scoped",
    "inside",
    "actually",
    "need",
    "stick",
    "variables",
    "outside",
    "events",
    "interact",
    "instead",
    "simple",
    "storage",
    "factory",
    "simple",
    "storage",
    "constant",
    "variables",
    "going",
    "define",
    "outside",
    "let",
    "keyword",
    "gon",
    "na",
    "say",
    "let",
    "simple",
    "storage",
    "factory",
    "going",
    "initialize",
    "nothing",
    "say",
    "led",
    "simple",
    "storage",
    "whole",
    "bunch",
    "let",
    "initializing",
    "another",
    "way",
    "write",
    "javascript",
    "let",
    "simple",
    "storage",
    "factory",
    "comma",
    "simple",
    "storage",
    "works",
    "exactly",
    "get",
    "rid",
    "const",
    "keyword",
    "constant",
    "since",
    "assigning",
    "simple",
    "storage",
    "factory",
    "simple",
    "storage",
    "use",
    "inside",
    "init",
    "function",
    "section",
    "one",
    "tests",
    "going",
    "deploy",
    "simple",
    "storage",
    "contract",
    "brand",
    "new",
    "contract",
    "interact",
    "one",
    "tests",
    "inside",
    "id",
    "going",
    "say",
    "want",
    "specific",
    "test",
    "describe",
    "code",
    "going",
    "actually",
    "going",
    "say",
    "start",
    "favorite",
    "number",
    "zero",
    "saying",
    "test",
    "going",
    "add",
    "async",
    "function",
    "actually",
    "say",
    "async",
    "function",
    "actually",
    "write",
    "code",
    "make",
    "sure",
    "contract",
    "exactly",
    "say",
    "const",
    "current",
    "value",
    "equals",
    "await",
    "simple",
    "retrieve",
    "test",
    "want",
    "say",
    "okay",
    "check",
    "see",
    "current",
    "value",
    "indeed",
    "zero",
    "well",
    "say",
    "const",
    "expected",
    "value",
    "going",
    "equal",
    "zero",
    "either",
    "use",
    "either",
    "assert",
    "keyword",
    "expect",
    "keyword",
    "going",
    "import",
    "package",
    "called",
    "chai",
    "actually",
    "installed",
    "chai",
    "automatically",
    "downloaded",
    "basic",
    "parameters",
    "downloaded",
    "basic",
    "packages",
    "hardhats",
    "top",
    "gon",
    "na",
    "say",
    "const",
    "expect",
    "assert",
    "equals",
    "require",
    "chai",
    "big",
    "fan",
    "using",
    "assert",
    "much",
    "possible",
    "think",
    "syntax",
    "makes",
    "little",
    "bit",
    "sense",
    "scenarios",
    "need",
    "use",
    "expect",
    "instead",
    "assert",
    "ton",
    "functions",
    "built",
    "help",
    "us",
    "make",
    "sure",
    "expect",
    "assert",
    "dot",
    "equal",
    "current",
    "string",
    "remember",
    "actually",
    "going",
    "big",
    "number",
    "comma",
    "expected",
    "value",
    "saying",
    "asserting",
    "retrieve",
    "return",
    "zero",
    "going",
    "expected",
    "value",
    "actually",
    "run",
    "going",
    "run",
    "yarn",
    "art",
    "hat",
    "test",
    "see",
    "get",
    "output",
    "looks",
    "like",
    "start",
    "favorite",
    "number",
    "zero",
    "indeed",
    "passing",
    "notice",
    "change",
    "one",
    "correct",
    "would",
    "break",
    "would",
    "say",
    "art",
    "pass",
    "passing",
    "assertion",
    "error",
    "expected",
    "zero",
    "equal",
    "one",
    "expected",
    "zero",
    "equal",
    "one",
    "want",
    "want",
    "zero",
    "equal",
    "zero",
    "let",
    "run",
    "tada",
    "start",
    "favorite",
    "number",
    "zero",
    "passing",
    "alright",
    "fantastic",
    "wrote",
    "one",
    "tests",
    "let",
    "write",
    "one",
    "test",
    "make",
    "sure",
    "things",
    "good",
    "let",
    "say",
    "update",
    "call",
    "store",
    "call",
    "store",
    "function",
    "want",
    "favorite",
    "number",
    "update",
    "make",
    "async",
    "function",
    "well",
    "let",
    "add",
    "stuff",
    "say",
    "const",
    "expected",
    "value",
    "equals",
    "seven",
    "expecting",
    "call",
    "store",
    "updates",
    "seven",
    "say",
    "const",
    "transaction",
    "response",
    "equals",
    "await",
    "simple",
    "storage",
    "dot",
    "store",
    "even",
    "pass",
    "expected",
    "value",
    "weight",
    "transaction",
    "response",
    "weight",
    "one",
    "let",
    "get",
    "current",
    "value",
    "say",
    "const",
    "current",
    "value",
    "equals",
    "weight",
    "simple",
    "storage",
    "retrieve",
    "going",
    "assert",
    "dot",
    "equal",
    "current",
    "string",
    "comma",
    "expected",
    "value",
    "run",
    "tests",
    "running",
    "yarn",
    "hardhead",
    "test",
    "see",
    "ran",
    "tests",
    "tests",
    "finagling",
    "one",
    "test",
    "actually",
    "run",
    "one",
    "test",
    "running",
    "yarn",
    "art",
    "app",
    "test",
    "dash",
    "dash",
    "grep",
    "search",
    "keywords",
    "text",
    "going",
    "grep",
    "store",
    "function",
    "store",
    "keyword",
    "tax",
    "text",
    "grep",
    "store",
    "run",
    "second",
    "test",
    "indeed",
    "one",
    "way",
    "run",
    "specific",
    "tests",
    "keyword",
    "type",
    "dot",
    "like",
    "run",
    "yarn",
    "art",
    "hat",
    "test",
    "run",
    "update",
    "call",
    "store",
    "indeed",
    "go",
    "ahead",
    "delete",
    "save",
    "run",
    "run",
    "fantastic",
    "way",
    "see",
    "tests",
    "written",
    "instead",
    "assert",
    "use",
    "expect",
    "keyword",
    "see",
    "something",
    "like",
    "expect",
    "current",
    "dot",
    "equal",
    "expected",
    "value",
    "two",
    "lines",
    "exactly",
    "thing",
    "sort",
    "one",
    "want",
    "use",
    "going",
    "testing",
    "fantastic",
    "great",
    "job",
    "tests",
    "actually",
    "start",
    "testing",
    "see",
    "much",
    "gas",
    "one",
    "functions",
    "actually",
    "costs",
    "one",
    "popular",
    "extensions",
    "hard",
    "hat",
    "hard",
    "hat",
    "gas",
    "reporter",
    "extension",
    "gets",
    "attached",
    "tests",
    "automatically",
    "gives",
    "us",
    "output",
    "looks",
    "like",
    "tells",
    "us",
    "approximately",
    "much",
    "gas",
    "one",
    "functions",
    "cost",
    "scroll",
    "read",
    "instructions",
    "actually",
    "install",
    "npm",
    "install",
    "hardhead",
    "gas",
    "reporter",
    "going",
    "use",
    "yarn",
    "gon",
    "na",
    "say",
    "yarn",
    "add",
    "hard",
    "hat",
    "gas",
    "reporter",
    "dash",
    "dash",
    "dev",
    "package",
    "installed",
    "go",
    "config",
    "add",
    "parameters",
    "work",
    "gas",
    "pit",
    "neath",
    "ether",
    "scan",
    "section",
    "going",
    "add",
    "new",
    "section",
    "called",
    "gas",
    "reporter",
    "run",
    "whenever",
    "run",
    "tests",
    "going",
    "enabled",
    "going",
    "true",
    "top",
    "add",
    "adding",
    "require",
    "hardhat",
    "gas",
    "reporter",
    "yarn",
    "hardhat",
    "test",
    "run",
    "tests",
    "automatically",
    "run",
    "gas",
    "reporter",
    "see",
    "tests",
    "go",
    "ahead",
    "run",
    "get",
    "output",
    "looks",
    "like",
    "tells",
    "us",
    "approximately",
    "much",
    "contracts",
    "methods",
    "cost",
    "store",
    "function",
    "looks",
    "like",
    "costs",
    "approximately",
    "much",
    "gas",
    "simple",
    "storage",
    "costs",
    "approximately",
    "much",
    "gas",
    "incredibly",
    "helpful",
    "figuring",
    "optimize",
    "gas",
    "best",
    "possible",
    "usually",
    "like",
    "take",
    "step",
    "though",
    "gas",
    "output",
    "like",
    "nice",
    "make",
    "even",
    "better",
    "like",
    "output",
    "file",
    "output",
    "file",
    "yes",
    "report",
    "dot",
    "txt",
    "dot",
    "get",
    "ignore",
    "like",
    "add",
    "gas",
    "report",
    "dot",
    "txt",
    "sentence",
    "really",
    "important",
    "gas",
    "report",
    "get",
    "pushed",
    "github",
    "colors",
    "true",
    "reason",
    "add",
    "output",
    "file",
    "colors",
    "get",
    "messed",
    "basically",
    "biggest",
    "addition",
    "could",
    "add",
    "currency",
    "get",
    "cost",
    "function",
    "usd",
    "blockchain",
    "like",
    "aetherium",
    "order",
    "get",
    "currency",
    "actually",
    "need",
    "get",
    "api",
    "key",
    "corn",
    "market",
    "cap",
    "like",
    "ether",
    "scan",
    "go",
    "coin",
    "market",
    "cap",
    "corn",
    "market",
    "cap",
    "api",
    "get",
    "api",
    "key",
    "go",
    "ahead",
    "sign",
    "choose",
    "basic",
    "plan",
    "agree",
    "create",
    "account",
    "get",
    "email",
    "verification",
    "go",
    "ahead",
    "verify",
    "coin",
    "market",
    "cap",
    "dashboard",
    "copy",
    "key",
    "yep",
    "guessed",
    "exactly",
    "going",
    "key",
    "going",
    "drop",
    "dot",
    "env",
    "file",
    "say",
    "coin",
    "market",
    "cap",
    "api",
    "key",
    "equals",
    "paste",
    "like",
    "corn",
    "market",
    "cap",
    "api",
    "key",
    "go",
    "back",
    "header",
    "dot",
    "config",
    "add",
    "corn",
    "market",
    "cap",
    "parameter",
    "gon",
    "na",
    "exact",
    "way",
    "const",
    "coin",
    "market",
    "cap",
    "api",
    "key",
    "equals",
    "process",
    "dot",
    "emv",
    "coin",
    "market",
    "cap",
    "api",
    "key",
    "take",
    "sticking",
    "going",
    "actually",
    "going",
    "make",
    "api",
    "call",
    "corn",
    "market",
    "cap",
    "whenever",
    "run",
    "gas",
    "reporter",
    "sometimes",
    "see",
    "comment",
    "uncomment",
    "always",
    "want",
    "make",
    "api",
    "calls",
    "enabled",
    "output",
    "file",
    "see",
    "currency",
    "api",
    "key",
    "run",
    "yarn",
    "hardhat",
    "test",
    "tests",
    "pass",
    "going",
    "see",
    "gas",
    "go",
    "ahead",
    "read",
    "gas",
    "report",
    "actually",
    "usd",
    "price",
    "one",
    "transactions",
    "looks",
    "like",
    "current",
    "prices",
    "aetherium",
    "per",
    "eath",
    "gas",
    "price",
    "43",
    "gwei",
    "store",
    "function",
    "would",
    "cost",
    "6",
    "simple",
    "storage",
    "function",
    "would",
    "cost",
    "64",
    "current",
    "hardhead",
    "gas",
    "reporter",
    "actually",
    "comes",
    "different",
    "options",
    "though",
    "going",
    "deploying",
    "different",
    "network",
    "example",
    "binance",
    "polygon",
    "avalanche",
    "hecho",
    "example",
    "let",
    "say",
    "wanted",
    "deploy",
    "polygon",
    "let",
    "see",
    "much",
    "deploying",
    "polygon",
    "would",
    "cost",
    "well",
    "wmv",
    "uhd",
    "ad",
    "token",
    "matic",
    "rerun",
    "test",
    "look",
    "gas",
    "report",
    "takes",
    "see",
    "gas",
    "price",
    "polygon",
    "right",
    "around",
    "37",
    "gray",
    "per",
    "gas",
    "cost",
    "matic",
    "147",
    "automatic",
    "usd",
    "see",
    "cost",
    "calling",
    "simple",
    "storage",
    "method",
    "going",
    "course",
    "rounded",
    "going",
    "really",
    "really",
    "cheap",
    "call",
    "store",
    "versus",
    "deploying",
    "contract",
    "going",
    "cost",
    "three",
    "cents",
    "make",
    "habit",
    "select",
    "false",
    "gas",
    "reporter",
    "whenever",
    "want",
    "actually",
    "work",
    "gas",
    "awesome",
    "sometimes",
    "working",
    "code",
    "environment",
    "variables",
    "specified",
    "hardhead",
    "might",
    "get",
    "little",
    "bit",
    "upset",
    "us",
    "oftentimes",
    "add",
    "code",
    "variables",
    "always",
    "populated",
    "specify",
    "rink",
    "prpc",
    "url",
    "ring",
    "p",
    "rpc",
    "url",
    "going",
    "undefined",
    "might",
    "throw",
    "errors",
    "blow",
    "oftentimes",
    "add",
    "parameter",
    "double",
    "pipes",
    "mean",
    "javascript",
    "say",
    "variable",
    "equals",
    "something",
    "something",
    "else",
    "really",
    "happening",
    "gon",
    "na",
    "say",
    "okay",
    "rink",
    "rpc",
    "url",
    "going",
    "equal",
    "process",
    "dot",
    "e",
    "v",
    "dot",
    "rink",
    "rpc",
    "url",
    "rink",
    "rpc",
    "url",
    "exist",
    "going",
    "whatever",
    "else",
    "might",
    "write",
    "something",
    "like",
    "https",
    "eath",
    "rinkeby",
    "example",
    "something",
    "like",
    "make",
    "hard",
    "hat",
    "mad",
    "use",
    "rank",
    "something",
    "like",
    "see",
    "syntax",
    "oftentimes",
    "lot",
    "code",
    "setups",
    "last",
    "thing",
    "going",
    "show",
    "going",
    "typescript",
    "edition",
    "test",
    "coverage",
    "progressed",
    "course",
    "going",
    "show",
    "tools",
    "use",
    "make",
    "sure",
    "simple",
    "storage",
    "contract",
    "safe",
    "secure",
    "take",
    "steps",
    "prevent",
    "hacks",
    "happening",
    "deploy",
    "real",
    "life",
    "one",
    "tools",
    "tool",
    "called",
    "solidity",
    "coverage",
    "also",
    "hardhat",
    "plugin",
    "use",
    "code",
    "solidity",
    "coverage",
    "project",
    "goes",
    "tests",
    "sees",
    "exactly",
    "many",
    "lines",
    "code",
    "sample",
    "store",
    "dot",
    "sol",
    "actually",
    "covered",
    "good",
    "tip",
    "cover",
    "line",
    "code",
    "solidity",
    "coverage",
    "say",
    "hey",
    "tests",
    "line",
    "maybe",
    "write",
    "tests",
    "add",
    "solidity",
    "coverage",
    "way",
    "adding",
    "packages",
    "npm",
    "install",
    "dash",
    "save",
    "dev",
    "since",
    "using",
    "yarn",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "solidity",
    "coverage",
    "add",
    "config",
    "way",
    "adding",
    "everything",
    "config",
    "go",
    "config",
    "write",
    "require",
    "solidity",
    "coverage",
    "configuration",
    "pieces",
    "add",
    "going",
    "use",
    "default",
    "run",
    "yarn",
    "rt",
    "hat",
    "coverage",
    "going",
    "go",
    "tests",
    "print",
    "file",
    "looks",
    "like",
    "also",
    "get",
    "file",
    "called",
    "coverage",
    "dot",
    "json",
    "basically",
    "chart",
    "broken",
    "little",
    "bit",
    "often",
    "put",
    "coverage",
    "dot",
    "json",
    "dot",
    "get",
    "ignore",
    "know",
    "actually",
    "seen",
    "dot",
    "git",
    "ignore",
    "supposed",
    "soon",
    "see",
    "50",
    "code",
    "50",
    "statements",
    "simple",
    "storage",
    "dot",
    "soul",
    "covered",
    "two",
    "thirds",
    "functions",
    "50",
    "lines",
    "even",
    "give",
    "us",
    "exactly",
    "lines",
    "tested",
    "right",
    "see",
    "exactly",
    "31",
    "32",
    "simple",
    "swords",
    "outsole",
    "covered",
    "makes",
    "lot",
    "sense",
    "31",
    "32",
    "add",
    "person",
    "function",
    "call",
    "add",
    "tests",
    "want",
    "take",
    "time",
    "pause",
    "try",
    "make",
    "solidity",
    "coverage",
    "100",
    "across",
    "board",
    "writing",
    "tests",
    "highly",
    "recommend",
    "great",
    "learning",
    "exercise",
    "also",
    "add",
    "coverage",
    "folder",
    "covered",
    "adjacent",
    "coverage",
    "folder",
    "explain",
    "dot",
    "get",
    "ignore",
    "folder",
    "little",
    "bit",
    "later",
    "last",
    "thing",
    "talk",
    "nomic",
    "labs",
    "hard",
    "hat",
    "waffle",
    "talked",
    "daddy",
    "v",
    "heart",
    "ether",
    "scan",
    "tasks",
    "gas",
    "reports",
    "today",
    "well",
    "actually",
    "google",
    "search",
    "find",
    "exactly",
    "hardhead",
    "waffle",
    "actually",
    "plugin",
    "work",
    "waffle",
    "testing",
    "framework",
    "waffle",
    "one",
    "frameworks",
    "allow",
    "us",
    "really",
    "advanced",
    "testing",
    "going",
    "working",
    "syntax",
    "looks",
    "really",
    "similar",
    "really",
    "soon",
    "showing",
    "waffle",
    "tool",
    "continue",
    "alright",
    "next",
    "part",
    "section",
    "actually",
    "going",
    "go",
    "typescript",
    "edition",
    "intents",
    "purposes",
    "successfully",
    "created",
    "first",
    "hardhead",
    "project",
    "done",
    "ton",
    "amazing",
    "things",
    "lesson",
    "let",
    "quick",
    "refresher",
    "learned",
    "far",
    "learned",
    "spin",
    "hard",
    "hat",
    "projects",
    "run",
    "yarn",
    "hard",
    "hat",
    "see",
    "list",
    "tasks",
    "different",
    "things",
    "hard",
    "hat",
    "learned",
    "hard",
    "hat",
    "looks",
    "hard",
    "sort",
    "entry",
    "point",
    "task",
    "run",
    "starts",
    "hard",
    "hat",
    "learned",
    "add",
    "contracts",
    "contracts",
    "folder",
    "compile",
    "running",
    "yarn",
    "art",
    "half",
    "compile",
    "learned",
    "compliation",
    "goes",
    "artifacts",
    "cache",
    "well",
    "want",
    "clean",
    "reset",
    "either",
    "delete",
    "two",
    "files",
    "run",
    "yarn",
    "hard",
    "hat",
    "clean",
    "learned",
    "use",
    "scripts",
    "tasks",
    "actually",
    "deploy",
    "interact",
    "things",
    "smart",
    "contracts",
    "also",
    "learned",
    "going",
    "using",
    "scripts",
    "rest",
    "course",
    "want",
    "could",
    "absolutely",
    "use",
    "tasks",
    "well",
    "asked",
    "question",
    "million",
    "times",
    "difference",
    "nobody",
    "really",
    "seems",
    "know",
    "main",
    "difference",
    "think",
    "main",
    "difference",
    "tasks",
    "plugins",
    "scripts",
    "local",
    "development",
    "mart",
    "mind",
    "limiter",
    "learned",
    "import",
    "whole",
    "bunch",
    "things",
    "including",
    "tasks",
    "hard",
    "hat",
    "scripts",
    "work",
    "async",
    "functions",
    "grab",
    "contracts",
    "deploy",
    "actually",
    "programmatically",
    "verify",
    "using",
    "hard",
    "hat",
    "using",
    "hard",
    "hat",
    "plugins",
    "additionally",
    "interact",
    "contracts",
    "similar",
    "ethers",
    "wrote",
    "wonderful",
    "verification",
    "script",
    "also",
    "wrote",
    "task",
    "wrote",
    "first",
    "test",
    "whole",
    "space",
    "showed",
    "tests",
    "going",
    "look",
    "like",
    "moving",
    "forward",
    "talked",
    "little",
    "bit",
    "importance",
    "really",
    "stress",
    "writing",
    "good",
    "tests",
    "going",
    "difference",
    "really",
    "professional",
    "environment",
    "kind",
    "side",
    "project",
    "whenever",
    "audit",
    "smart",
    "contracts",
    "whenever",
    "given",
    "project",
    "someone",
    "tell",
    "take",
    "look",
    "first",
    "thing",
    "look",
    "readme",
    "course",
    "second",
    "thing",
    "look",
    "tests",
    "tests",
    "good",
    "usually",
    "tell",
    "hey",
    "need",
    "go",
    "back",
    "drawing",
    "board",
    "need",
    "level",
    "tests",
    "tests",
    "really",
    "really",
    "important",
    "especially",
    "space",
    "learned",
    "couple",
    "environment",
    "variables",
    "use",
    "learned",
    "couple",
    "tools",
    "see",
    "good",
    "tests",
    "one",
    "coverage",
    "also",
    "learn",
    "gas",
    "reporter",
    "see",
    "much",
    "going",
    "cost",
    "us",
    "actually",
    "deploy",
    "real",
    "network",
    "learned",
    "ton",
    "hard",
    "hat",
    "config",
    "multiple",
    "networks",
    "add",
    "add",
    "hard",
    "heads",
    "make",
    "project",
    "evm",
    "code",
    "work",
    "network",
    "started",
    "working",
    "dev",
    "dependencies",
    "instead",
    "regular",
    "dependencies",
    "readmes",
    "something",
    "really",
    "going",
    "go",
    "deeply",
    "readmes",
    "sort",
    "like",
    "welcome",
    "page",
    "github",
    "repository",
    "really",
    "give",
    "understanding",
    "code",
    "part",
    "web",
    "space",
    "part",
    "blockchain",
    "ecosystem",
    "really",
    "coding",
    "stuff",
    "want",
    "people",
    "interact",
    "engage",
    "code",
    "engage",
    "projects",
    "showed",
    "use",
    "github",
    "yet",
    "worry",
    "going",
    "look",
    "heart",
    "simple",
    "storage",
    "readme",
    "scroll",
    "usually",
    "really",
    "want",
    "getting",
    "started",
    "section",
    "define",
    "set",
    "code",
    "set",
    "everything",
    "quickstart",
    "section",
    "maybe",
    "usage",
    "section",
    "testing",
    "section",
    "teaches",
    "people",
    "actually",
    "use",
    "interact",
    "code",
    "since",
    "learning",
    "code",
    "part",
    "much",
    "readme",
    "part",
    "going",
    "go",
    "make",
    "fantastic",
    "readme",
    "however",
    "leave",
    "link",
    "github",
    "repository",
    "associated",
    "course",
    "link",
    "best",
    "readme",
    "template",
    "really",
    "fantastic",
    "readme",
    "template",
    "copy",
    "projects",
    "make",
    "look",
    "really",
    "good",
    "give",
    "really",
    "good",
    "setup",
    "developers",
    "come",
    "project",
    "learn",
    "participate",
    "coding",
    "right",
    "learned",
    "absolute",
    "ton",
    "incredibly",
    "proud",
    "incredibly",
    "excited",
    "made",
    "far",
    "going",
    "jump",
    "typescript",
    "section",
    "coding",
    "along",
    "typescript",
    "feel",
    "free",
    "follow",
    "along",
    "finished",
    "basic",
    "section",
    "hard",
    "hit",
    "stick",
    "around",
    "next",
    "heart",
    "sections",
    "going",
    "ones",
    "really",
    "fine",
    "grain",
    "hone",
    "skills",
    "give",
    "fundamentals",
    "working",
    "frameworks",
    "sure",
    "follow",
    "along",
    "next",
    "two",
    "sections",
    "got",
    "ton",
    "fantastic",
    "content",
    "beginning",
    "get",
    "deeper",
    "smart",
    "contract",
    "ecosystem",
    "take",
    "lap",
    "get",
    "coffee",
    "see",
    "soon",
    "alright",
    "also",
    "let",
    "typescript",
    "going",
    "go",
    "ahead",
    "start",
    "javascript",
    "section",
    "however",
    "future",
    "want",
    "start",
    "new",
    "hardhead",
    "project",
    "actually",
    "start",
    "new",
    "project",
    "yarn",
    "hard",
    "hat",
    "great",
    "advanced",
    "sample",
    "project",
    "uses",
    "typescript",
    "add",
    "ton",
    "plugins",
    "wait",
    "everything",
    "get",
    "uploaded",
    "wait",
    "wait",
    "little",
    "bit",
    "everything",
    "get",
    "downloaded",
    "going",
    "though",
    "going",
    "show",
    "convert",
    "javascript",
    "anyways",
    "future",
    "hearted",
    "sections",
    "coding",
    "along",
    "javascript",
    "want",
    "code",
    "along",
    "typescript",
    "absolutely",
    "100",
    "let",
    "go",
    "ahead",
    "show",
    "main",
    "differences",
    "advanced",
    "typescript",
    "thing",
    "going",
    "add",
    "whole",
    "bunch",
    "packages",
    "may",
    "may",
    "want",
    "talk",
    "next",
    "lesson",
    "going",
    "absolutely",
    "need",
    "going",
    "type",
    "chain",
    "slash",
    "ethers",
    "dash",
    "v",
    "five",
    "type",
    "chain",
    "slash",
    "hard",
    "hat",
    "typescript",
    "types",
    "slash",
    "chai",
    "types",
    "slash",
    "node",
    "types",
    "slash",
    "moko",
    "ts",
    "node",
    "type",
    "chain",
    "typescript",
    "link",
    "github",
    "repo",
    "associated",
    "course",
    "got",
    "yarn",
    "ad",
    "copy",
    "paste",
    "want",
    "copy",
    "paste",
    "project",
    "run",
    "oops",
    "added",
    "dev",
    "dependencies",
    "going",
    "actually",
    "make",
    "dev",
    "dependencies",
    "real",
    "quick",
    "deleting",
    "two",
    "lines",
    "adding",
    "comma",
    "awesome",
    "looks",
    "much",
    "better",
    "course",
    "going",
    "going",
    "convert",
    "javascript",
    "typescript",
    "anywhere",
    "j",
    "going",
    "put",
    "ts",
    "obviously",
    "coding",
    "scratch",
    "typescript",
    "would",
    "get",
    "go",
    "includes",
    "hard",
    "hat",
    "dot",
    "config",
    "also",
    "going",
    "typescript",
    "additionally",
    "going",
    "add",
    "ts",
    "config",
    "dot",
    "json",
    "going",
    "typescript",
    "configuration",
    "typically",
    "setup",
    "gon",
    "na",
    "go",
    "something",
    "like",
    "copy",
    "github",
    "repo",
    "associated",
    "course",
    "basically",
    "telling",
    "typescript",
    "versions",
    "typescript",
    "files",
    "include",
    "working",
    "typescript",
    "let",
    "go",
    "ahead",
    "start",
    "deploy",
    "dot",
    "typescript",
    "usual",
    "instead",
    "using",
    "require",
    "gon",
    "na",
    "go",
    "ahead",
    "use",
    "import",
    "gon",
    "na",
    "exact",
    "thing",
    "gon",
    "na",
    "import",
    "ethers",
    "run",
    "network",
    "hard",
    "hat",
    "verify",
    "function",
    "going",
    "add",
    "gon",
    "na",
    "add",
    "types",
    "arguments",
    "contract",
    "address",
    "going",
    "string",
    "args",
    "going",
    "array",
    "arguments",
    "gon",
    "na",
    "say",
    "gon",
    "na",
    "array",
    "could",
    "string",
    "could",
    "numbers",
    "could",
    "balloons",
    "could",
    "anything",
    "also",
    "going",
    "say",
    "ie",
    "could",
    "even",
    "though",
    "technically",
    "error",
    "type",
    "going",
    "put",
    "simplicity",
    "typescript",
    "scripts",
    "included",
    "ts",
    "config",
    "typescript",
    "files",
    "manually",
    "added",
    "entire",
    "scripts",
    "folder",
    "good",
    "need",
    "add",
    "ethers",
    "well",
    "look",
    "using",
    "require",
    "still",
    "need",
    "swap",
    "import",
    "donnie",
    "v",
    "use",
    "dot",
    "env",
    "slash",
    "config",
    "grab",
    "dot",
    "env",
    "file",
    "imported",
    "everything",
    "go",
    "back",
    "see",
    "linting",
    "gone",
    "away",
    "want",
    "even",
    "explicit",
    "go",
    "ahead",
    "add",
    "import",
    "nomic",
    "labs",
    "slash",
    "hard",
    "hat",
    "ethers",
    "like",
    "reason",
    "need",
    "import",
    "two",
    "packages",
    "also",
    "work",
    "hardhead",
    "ethers",
    "automatically",
    "import",
    "want",
    "super",
    "explicit",
    "go",
    "ahead",
    "add",
    "like",
    "almost",
    "good",
    "go",
    "remember",
    "harnett",
    "dot",
    "config",
    "also",
    "importing",
    "tasks",
    "going",
    "need",
    "update",
    "tasks",
    "block",
    "number",
    "typescript",
    "fide",
    "course",
    "instead",
    "const",
    "require",
    "going",
    "import",
    "task",
    "slash",
    "config",
    "going",
    "sure",
    "export",
    "task",
    "lock",
    "number",
    "default",
    "going",
    "export",
    "default",
    "task",
    "like",
    "good",
    "run",
    "scripts",
    "yarn",
    "art",
    "hat",
    "run",
    "scripts",
    "network",
    "hard",
    "hat",
    "choose",
    "awesome",
    "get",
    "testing",
    "things",
    "get",
    "little",
    "bit",
    "different",
    "let",
    "go",
    "ahead",
    "change",
    "required",
    "import",
    "make",
    "happy",
    "let",
    "try",
    "run",
    "yarn",
    "art",
    "head",
    "test",
    "get",
    "whole",
    "bunch",
    "errors",
    "vs",
    "code",
    "actually",
    "go",
    "ahead",
    "get",
    "errors",
    "right",
    "linter",
    "one",
    "trickiest",
    "things",
    "run",
    "developer",
    "space",
    "calling",
    "functions",
    "contracts",
    "functions",
    "exist",
    "vice",
    "versa",
    "calling",
    "functions",
    "contracts",
    "exist",
    "right",
    "typing",
    "contracts",
    "type",
    "contract",
    "super",
    "helpful",
    "type",
    "contract",
    "necessarily",
    "functions",
    "want",
    "want",
    "contracts",
    "type",
    "contract",
    "want",
    "type",
    "contract",
    "type",
    "contract",
    "functions",
    "want",
    "give",
    "contracts",
    "correct",
    "typing",
    "actually",
    "use",
    "tool",
    "called",
    "type",
    "chain",
    "gives",
    "contracts",
    "correct",
    "typing",
    "type",
    "chain",
    "hardened",
    "plugin",
    "allows",
    "us",
    "use",
    "type",
    "chain",
    "typescript",
    "natively",
    "together",
    "type",
    "chain",
    "slash",
    "hard",
    "hat",
    "one",
    "things",
    "already",
    "installed",
    "add",
    "hard",
    "hat",
    "got",
    "go",
    "hard",
    "hat",
    "config",
    "add",
    "import",
    "type",
    "chain",
    "slash",
    "arhat",
    "import",
    "config",
    "run",
    "yarn",
    "hardhat",
    "get",
    "new",
    "task",
    "called",
    "type",
    "chain",
    "read",
    "description",
    "says",
    "generate",
    "type",
    "chain",
    "typings",
    "compiled",
    "contracts",
    "enable",
    "contracts",
    "typing",
    "simple",
    "storage",
    "variable",
    "type",
    "simple",
    "storage",
    "contract",
    "much",
    "better",
    "always",
    "going",
    "know",
    "exactly",
    "contract",
    "create",
    "run",
    "yarn",
    "arhat",
    "type",
    "chain",
    "going",
    "create",
    "new",
    "folder",
    "called",
    "type",
    "chain",
    "slash",
    "types",
    "types",
    "contracts",
    "even",
    "go",
    "simple",
    "storage",
    "sub",
    "ts",
    "going",
    "different",
    "functions",
    "everything",
    "simple",
    "storage",
    "contract",
    "automatically",
    "coded",
    "typescript",
    "javascript",
    "us",
    "incredibly",
    "helpful",
    "shown",
    "yet",
    "dot",
    "git",
    "ignore",
    "usually",
    "want",
    "add",
    "type",
    "chain",
    "type",
    "chain",
    "dash",
    "types",
    "dot",
    "git",
    "ignore",
    "push",
    "github",
    "back",
    "test",
    "going",
    "add",
    "exact",
    "types",
    "different",
    "objects",
    "going",
    "import",
    "folder",
    "created",
    "import",
    "simple",
    "storage",
    "comma",
    "simple",
    "storage",
    "underscore",
    "underscore",
    "factory",
    "dot",
    "dot",
    "slash",
    "types",
    "slash",
    "types",
    "simple",
    "storage",
    "factory",
    "going",
    "simple",
    "storage",
    "factory",
    "civil",
    "storage",
    "course",
    "going",
    "simple",
    "storage",
    "let",
    "simple",
    "storage",
    "factory",
    "going",
    "type",
    "simple",
    "storage",
    "underscore",
    "underscore",
    "factory",
    "simple",
    "storage",
    "going",
    "type",
    "simple",
    "storage",
    "contract",
    "command",
    "clicked",
    "simple",
    "storage",
    "see",
    "contract",
    "functions",
    "know",
    "love",
    "addition",
    "functions",
    "actual",
    "contract",
    "pretty",
    "much",
    "good",
    "go",
    "need",
    "couple",
    "new",
    "things",
    "get",
    "contract",
    "factory",
    "returns",
    "type",
    "ethers",
    "dot",
    "contract",
    "factory",
    "need",
    "need",
    "wrap",
    "simple",
    "storage",
    "factory",
    "type",
    "little",
    "wrap",
    "like",
    "say",
    "simple",
    "storage",
    "going",
    "sort",
    "factory",
    "good",
    "go",
    "added",
    "run",
    "yarn",
    "hardhead",
    "test",
    "boom",
    "test",
    "run",
    "normal",
    "typescript",
    "additional",
    "typing",
    "makes",
    "lives",
    "substantially",
    "substantially",
    "better",
    "going",
    "need",
    "know",
    "typescript",
    "reusable",
    "branches",
    "optional",
    "typescript",
    "branch",
    "use",
    "reference",
    "work",
    "typescript",
    "learned",
    "really",
    "basics",
    "different",
    "things",
    "hardhat",
    "next",
    "lessons",
    "hardhead",
    "fun",
    "meme",
    "hard",
    "hat",
    "smart",
    "contract",
    "lottery",
    "really",
    "going",
    "basics",
    "fundamentals",
    "tools",
    "going",
    "learn",
    "hardhat",
    "lesson",
    "eight",
    "going",
    "introduction",
    "full",
    "stack",
    "working",
    "front",
    "end",
    "building",
    "full",
    "stack",
    "applications",
    "getting",
    "way",
    "course",
    "give",
    "tools",
    "start",
    "web",
    "three",
    "journey",
    "looking",
    "learn",
    "basics",
    "make",
    "sure",
    "absolutely",
    "get",
    "way",
    "lesson",
    "nine",
    "get",
    "way",
    "lesson",
    "18",
    "going",
    "know",
    "cutting",
    "edge",
    "tools",
    "space",
    "going",
    "knowledge",
    "become",
    "easily",
    "one",
    "best",
    "developers",
    "space",
    "hope",
    "make",
    "way",
    "end",
    "one",
    "important",
    "parts",
    "section",
    "lesson",
    "going",
    "pushing",
    "code",
    "github",
    "sending",
    "tweet",
    "celebrating",
    "pushed",
    "first",
    "smart",
    "contract",
    "first",
    "web",
    "three",
    "github",
    "repository",
    "github",
    "moving",
    "next",
    "lesson",
    "absolutely",
    "sure",
    "get",
    "end",
    "push",
    "code",
    "github",
    "optionally",
    "want",
    "celebrate",
    "sending",
    "tweet",
    "absolutely",
    "sure",
    "get",
    "github",
    "section",
    "said",
    "many",
    "times",
    "web",
    "three",
    "space",
    "incredibly",
    "collaborative",
    "community",
    "working",
    "github",
    "gitlab",
    "version",
    "control",
    "tool",
    "going",
    "essential",
    "success",
    "space",
    "sure",
    "get",
    "part",
    "right",
    "welcome",
    "back",
    "hard",
    "hat",
    "fund",
    "section",
    "course",
    "section",
    "actually",
    "going",
    "upload",
    "first",
    "code",
    "repository",
    "github",
    "never",
    "done",
    "going",
    "section",
    "going",
    "learn",
    "even",
    "hardhat",
    "using",
    "familiar",
    "contract",
    "base",
    "already",
    "worked",
    "fund",
    "contract",
    "using",
    "github",
    "repo",
    "associated",
    "course",
    "scroll",
    "hardhead",
    "funmi",
    "code",
    "located",
    "repo",
    "like",
    "quickstart",
    "go",
    "ahead",
    "get",
    "clone",
    "cvu",
    "run",
    "yarn",
    "run",
    "yarn",
    "hardhat",
    "deploy",
    "going",
    "briefly",
    "show",
    "looks",
    "like",
    "vs",
    "code",
    "git",
    "clone",
    "grab",
    "package",
    "cd",
    "type",
    "code",
    "period",
    "open",
    "new",
    "vs",
    "code",
    "folder",
    "go",
    "ahead",
    "run",
    "yarn",
    "install",
    "dependencies",
    "working",
    "project",
    "plan",
    "working",
    "test",
    "net",
    "working",
    "ether",
    "scan",
    "coin",
    "market",
    "cap",
    "feel",
    "free",
    "fill",
    "dotty",
    "v",
    "private",
    "key",
    "rpc",
    "url",
    "corn",
    "market",
    "cap",
    "key",
    "ether",
    "scan",
    "key",
    "follow",
    "along",
    "readme",
    "use",
    "repo",
    "run",
    "yarn",
    "hard",
    "hat",
    "deploy",
    "show",
    "deploying",
    "contracts",
    "mocks",
    "etc",
    "let",
    "get",
    "building",
    "though",
    "gon",
    "na",
    "make",
    "new",
    "directory",
    "project",
    "gon",
    "na",
    "setup",
    "seen",
    "mk",
    "dir",
    "hard",
    "hat",
    "fcc",
    "gon",
    "na",
    "cd",
    "heart",
    "funmi",
    "fcc",
    "type",
    "code",
    "period",
    "code",
    "period",
    "work",
    "absolutely",
    "open",
    "hitting",
    "file",
    "open",
    "folder",
    "like",
    "showed",
    "brand",
    "new",
    "folder",
    "gon",
    "na",
    "go",
    "ahead",
    "add",
    "hard",
    "hat",
    "gon",
    "na",
    "run",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "hard",
    "hat",
    "hard",
    "hat",
    "package",
    "json",
    "node",
    "modules",
    "go",
    "ahead",
    "run",
    "yarn",
    "start",
    "app",
    "say",
    "want",
    "going",
    "choose",
    "advanced",
    "sample",
    "project",
    "show",
    "going",
    "going",
    "set",
    "way",
    "think",
    "works",
    "best",
    "go",
    "ahead",
    "advanced",
    "sample",
    "project",
    "yes",
    "going",
    "root",
    "yes",
    "want",
    "add",
    "git",
    "ignore",
    "lot",
    "sample",
    "project",
    "dependencies",
    "wants",
    "us",
    "add",
    "gon",
    "na",
    "go",
    "ahead",
    "hit",
    "yes",
    "going",
    "end",
    "using",
    "show",
    "ones",
    "going",
    "use",
    "let",
    "go",
    "ahead",
    "hit",
    "yes",
    "right",
    "awesome",
    "advanced",
    "project",
    "let",
    "walk",
    "additional",
    "things",
    "traditional",
    "contract",
    "node",
    "modules",
    "going",
    "scripts",
    "going",
    "test",
    "going",
    "comes",
    "dot",
    "e",
    "v",
    "dot",
    "example",
    "already",
    "packed",
    "us",
    "also",
    "comes",
    "lint",
    "lint",
    "rc",
    "dot",
    "j",
    "lint",
    "ignore",
    "es",
    "lint",
    "known",
    "javascript",
    "linter",
    "helps",
    "find",
    "automatically",
    "fix",
    "problems",
    "code",
    "javascript",
    "work",
    "big",
    "fan",
    "es",
    "lint",
    "typically",
    "use",
    "going",
    "go",
    "ahead",
    "delete",
    "two",
    "want",
    "keep",
    "absolutely",
    "dot",
    "git",
    "ignore",
    "going",
    "finally",
    "understand",
    "file",
    "lesson",
    "npm",
    "ignore",
    "helps",
    "ignore",
    "files",
    "want",
    "push",
    "project",
    "npm",
    "package",
    "going",
    "want",
    "delete",
    "well",
    "pretty",
    "ignore",
    "pretty",
    "drc",
    "already",
    "know",
    "small",
    "hint",
    "hint",
    "ignore",
    "going",
    "talk",
    "minute",
    "hardhead",
    "config",
    "comes",
    "already",
    "ropsten",
    "network",
    "gas",
    "reporter",
    "ether",
    "scan",
    "package",
    "dot",
    "json",
    "additional",
    "packages",
    "readme",
    "little",
    "bit",
    "robust",
    "course",
    "yarn",
    "dot",
    "lock",
    "advanced",
    "project",
    "looks",
    "pretty",
    "similar",
    "going",
    "working",
    "anyways",
    "want",
    "talk",
    "soul",
    "hint",
    "though",
    "solvent",
    "solvent",
    "known",
    "solidity",
    "linter",
    "use",
    "lint",
    "code",
    "linting",
    "process",
    "running",
    "program",
    "analyze",
    "code",
    "potential",
    "errors",
    "also",
    "little",
    "bit",
    "formatting",
    "oftentimes",
    "es",
    "lint",
    "way",
    "lint",
    "javascript",
    "code",
    "hint",
    "way",
    "lint",
    "solidity",
    "code",
    "use",
    "prettier",
    "format",
    "code",
    "use",
    "soul",
    "hint",
    "lint",
    "code",
    "often",
    "used",
    "little",
    "bit",
    "interchangeably",
    "even",
    "though",
    "exactly",
    "correct",
    "little",
    "bit",
    "different",
    "run",
    "linter",
    "code",
    "running",
    "yarn",
    "sole",
    "hint",
    "type",
    "name",
    "files",
    "want",
    "lint",
    "contracts",
    "slash",
    "start",
    "everything",
    "looks",
    "okay",
    "nothing",
    "happen",
    "well",
    "let",
    "say",
    "variable",
    "explicitly",
    "say",
    "visibility",
    "best",
    "practice",
    "ideally",
    "always",
    "say",
    "exactly",
    "visibility",
    "variable",
    "obviously",
    "gets",
    "defaulted",
    "usually",
    "better",
    "explicit",
    "run",
    "yarn",
    "hint",
    "contracts",
    "start",
    "give",
    "us",
    "warning",
    "saying",
    "explicitly",
    "mark",
    "visibility",
    "state",
    "linter",
    "good",
    "way",
    "check",
    "best",
    "practices",
    "running",
    "code",
    "definitely",
    "going",
    "keep",
    "small",
    "hint",
    "around",
    "got",
    "repo",
    "let",
    "add",
    "couple",
    "common",
    "setup",
    "pieces",
    "going",
    "swap",
    "using",
    "far",
    "tab",
    "form",
    "us",
    "tab",
    "false",
    "semi",
    "false",
    "single",
    "quote",
    "also",
    "false",
    "going",
    "update",
    "prettier",
    "dot",
    "ignore",
    "node",
    "modules",
    "package",
    "dot",
    "json",
    "image",
    "artifacts",
    "cache",
    "coverage",
    "id",
    "v",
    "dot",
    "star",
    "readme",
    "coverage",
    "anything",
    "else",
    "want",
    "add",
    "going",
    "scroll",
    "contracts",
    "folder",
    "going",
    "swap",
    "greeter",
    "dot",
    "soul",
    "fund",
    "dot",
    "soul",
    "let",
    "go",
    "ahead",
    "add",
    "contracts",
    "following",
    "along",
    "repo",
    "go",
    "contracts",
    "folder",
    "actually",
    "another",
    "folder",
    "contracts",
    "look",
    "little",
    "bit",
    "different",
    "contracts",
    "steal",
    "remix",
    "let",
    "actually",
    "grab",
    "remix",
    "going",
    "make",
    "couple",
    "changes",
    "remix",
    "anymore",
    "probably",
    "taking",
    "breaks",
    "jump",
    "back",
    "lesson",
    "four",
    "remix",
    "funmi",
    "jump",
    "repo",
    "grab",
    "contracts",
    "inside",
    "go",
    "fun",
    "v",
    "dash",
    "free",
    "code",
    "camp",
    "tutorial",
    "grab",
    "code",
    "gon",
    "na",
    "grab",
    "fun",
    "price",
    "converter",
    "dot",
    "soul",
    "go",
    "ahead",
    "delete",
    "old",
    "file",
    "create",
    "new",
    "one",
    "call",
    "fund",
    "dot",
    "song",
    "paste",
    "going",
    "create",
    "price",
    "converter",
    "funmi",
    "price",
    "converter",
    "contracts",
    "one",
    "first",
    "things",
    "want",
    "one",
    "first",
    "things",
    "last",
    "time",
    "ran",
    "yarn",
    "compile",
    "make",
    "sure",
    "code",
    "actually",
    "working",
    "way",
    "want",
    "actually",
    "hit",
    "compile",
    "one",
    "things",
    "going",
    "need",
    "come",
    "hardhead",
    "dot",
    "config",
    "going",
    "make",
    "sure",
    "correct",
    "solidity",
    "version",
    "going",
    "zero",
    "point",
    "let",
    "go",
    "ahead",
    "try",
    "compile",
    "run",
    "yarn",
    "hardhead",
    "compile",
    "see",
    "actually",
    "get",
    "error",
    "library",
    "chain",
    "link",
    "slash",
    "contracts",
    "imported",
    "contracts",
    "slash",
    "fund",
    "dot",
    "soul",
    "installed",
    "try",
    "installing",
    "using",
    "npm",
    "remix",
    "went",
    "ahead",
    "imported",
    "chainlink",
    "slash",
    "contracts",
    "right",
    "npm",
    "github",
    "local",
    "code",
    "tell",
    "hardhead",
    "specifically",
    "get",
    "want",
    "download",
    "specifically",
    "npm",
    "package",
    "manager",
    "chainlink",
    "slash",
    "contracts",
    "download",
    "simply",
    "running",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "chainlink",
    "slash",
    "contracts",
    "downloaded",
    "file",
    "able",
    "see",
    "node",
    "modules",
    "hardhead",
    "smart",
    "enough",
    "know",
    "chain",
    "link",
    "slash",
    "contracts",
    "going",
    "point",
    "node",
    "module",
    "run",
    "yarn",
    "hardhead",
    "compile",
    "boom",
    "see",
    "compiled",
    "three",
    "solidity",
    "files",
    "successfully",
    "contracts",
    "code",
    "compiling",
    "successfully",
    "probably",
    "going",
    "want",
    "deploy",
    "code",
    "last",
    "section",
    "know",
    "use",
    "scripts",
    "module",
    "made",
    "manual",
    "deploy",
    "script",
    "however",
    "something",
    "notice",
    "work",
    "raw",
    "ethers",
    "even",
    "hard",
    "hat",
    "keeping",
    "track",
    "deployments",
    "get",
    "little",
    "bit",
    "tricky",
    "use",
    "deploy",
    "script",
    "saving",
    "deployments",
    "file",
    "additionally",
    "everything",
    "deploy",
    "script",
    "deploying",
    "make",
    "tests",
    "deploy",
    "scripts",
    "maybe",
    "work",
    "exactly",
    "hand",
    "hand",
    "couple",
    "things",
    "might",
    "little",
    "bit",
    "tricky",
    "work",
    "actually",
    "going",
    "work",
    "package",
    "makes",
    "everything",
    "mentioned",
    "couple",
    "things",
    "way",
    "easier",
    "package",
    "talking",
    "going",
    "hard",
    "hat",
    "deploy",
    "package",
    "link",
    "package",
    "github",
    "repository",
    "associated",
    "course",
    "hardhat",
    "plugin",
    "replicable",
    "deployments",
    "easy",
    "testing",
    "scroll",
    "installation",
    "see",
    "install",
    "basically",
    "normal",
    "way",
    "using",
    "npm",
    "gon",
    "na",
    "go",
    "ahead",
    "use",
    "yarn",
    "us",
    "add",
    "yarn",
    "add",
    "hardhat",
    "dash",
    "deploy",
    "course",
    "gon",
    "na",
    "dash",
    "dash",
    "dev",
    "done",
    "deploying",
    "require",
    "statement",
    "hard",
    "basically",
    "config",
    "entry",
    "point",
    "gon",
    "na",
    "get",
    "started",
    "go",
    "ahead",
    "delete",
    "script",
    "run",
    "yarn",
    "hardhat",
    "see",
    "bunch",
    "new",
    "tasks",
    "one",
    "deploy",
    "task",
    "deploy",
    "task",
    "going",
    "main",
    "task",
    "use",
    "deploy",
    "contracts",
    "instead",
    "writing",
    "deploy",
    "scripts",
    "scripts",
    "folder",
    "actually",
    "going",
    "create",
    "new",
    "folder",
    "create",
    "new",
    "folder",
    "mk",
    "dir",
    "deploy",
    "always",
    "right",
    "click",
    "hit",
    "new",
    "folder",
    "deploy",
    "folder",
    "going",
    "lot",
    "hard",
    "hat",
    "deploy",
    "module",
    "looks",
    "deploy",
    "code",
    "going",
    "writing",
    "scripts",
    "write",
    "scripts",
    "usually",
    "need",
    "add",
    "one",
    "thing",
    "since",
    "going",
    "using",
    "ethers",
    "js",
    "scripts",
    "want",
    "add",
    "hardhead",
    "deploy",
    "ethers",
    "package",
    "instead",
    "yarn",
    "add",
    "dash",
    "dev",
    "hard",
    "deploy",
    "ethers",
    "going",
    "something",
    "little",
    "bit",
    "weird",
    "going",
    "yarn",
    "add",
    "npm",
    "install",
    "dash",
    "dash",
    "dev",
    "going",
    "install",
    "like",
    "let",
    "copy",
    "copy",
    "repo",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "paste",
    "taking",
    "nomic",
    "labs",
    "hard",
    "hat",
    "ethers",
    "used",
    "overriding",
    "hard",
    "hat",
    "deploy",
    "ethers",
    "remember",
    "last",
    "project",
    "used",
    "hard",
    "hat",
    "ethers",
    "hard",
    "hat",
    "could",
    "override",
    "ethers",
    "use",
    "hard",
    "hat",
    "deploy",
    "use",
    "hard",
    "hat",
    "deploy",
    "ethers",
    "hard",
    "hat",
    "deploy",
    "override",
    "hardhead",
    "overrides",
    "ethers",
    "kind",
    "funny",
    "say",
    "like",
    "enable",
    "ethers",
    "keep",
    "track",
    "remember",
    "different",
    "deployments",
    "actually",
    "make",
    "contract",
    "look",
    "package",
    "json",
    "see",
    "nomic",
    "labs",
    "dashboard",
    "ethers",
    "version",
    "going",
    "mpm",
    "hardhead",
    "deploy",
    "ethers",
    "package",
    "dot",
    "json",
    "basically",
    "saying",
    "hard",
    "hat",
    "ethers",
    "package",
    "overwritten",
    "hard",
    "hat",
    "deploy",
    "ethers",
    "package",
    "want",
    "alright",
    "great",
    "setup",
    "start",
    "writing",
    "deploy",
    "scripts",
    "way",
    "hart",
    "play",
    "works",
    "scripts",
    "get",
    "added",
    "deploy",
    "folder",
    "get",
    "run",
    "run",
    "yarn",
    "hard",
    "hat",
    "deploy",
    "good",
    "practice",
    "usually",
    "number",
    "run",
    "order",
    "want",
    "run",
    "since",
    "one",
    "contract",
    "want",
    "deploy",
    "funmi",
    "contract",
    "going",
    "01",
    "deploy",
    "funmi",
    "jas",
    "script",
    "going",
    "define",
    "deploy",
    "fundament",
    "contract",
    "alright",
    "deploy",
    "funmi",
    "scripts",
    "traditionally",
    "imports",
    "main",
    "function",
    "calling",
    "main",
    "function",
    "hardhead",
    "deploy",
    "little",
    "bit",
    "different",
    "still",
    "going",
    "import",
    "libraries",
    "packages",
    "going",
    "main",
    "function",
    "also",
    "going",
    "call",
    "main",
    "function",
    "run",
    "hardhead",
    "deploy",
    "harnett",
    "deploy",
    "actually",
    "going",
    "call",
    "function",
    "specify",
    "script",
    "going",
    "gon",
    "na",
    "create",
    "function",
    "call",
    "deploy",
    "funk",
    "going",
    "export",
    "deploy",
    "function",
    "default",
    "function",
    "hardhead",
    "deploy",
    "look",
    "could",
    "say",
    "module",
    "exports",
    "dot",
    "default",
    "equals",
    "deploy",
    "funk",
    "test",
    "go",
    "ahead",
    "console",
    "dot",
    "log",
    "hi",
    "terminal",
    "run",
    "yarn",
    "hard",
    "hat",
    "deploy",
    "oops",
    "get",
    "rid",
    "parentheses",
    "sorry",
    "run",
    "see",
    "went",
    "ran",
    "deploy",
    "func",
    "syntax",
    "easier",
    "understand",
    "go",
    "ahead",
    "use",
    "syntax",
    "going",
    "passing",
    "heart",
    "runtime",
    "environment",
    "parameter",
    "function",
    "however",
    "go",
    "heart",
    "hat",
    "deploy",
    "documentation",
    "scroll",
    "example",
    "script",
    "syntax",
    "looks",
    "little",
    "bit",
    "different",
    "let",
    "explain",
    "going",
    "going",
    "writing",
    "instead",
    "kind",
    "defining",
    "everything",
    "like",
    "defining",
    "function",
    "name",
    "similar",
    "actually",
    "going",
    "using",
    "nameless",
    "synchronous",
    "function",
    "going",
    "make",
    "anonymous",
    "function",
    "similar",
    "seen",
    "instead",
    "going",
    "say",
    "async",
    "parameters",
    "like",
    "going",
    "pass",
    "parameters",
    "heart",
    "runtime",
    "environment",
    "going",
    "arrow",
    "function",
    "going",
    "wrap",
    "whole",
    "thing",
    "module",
    "dot",
    "exports",
    "gon",
    "na",
    "say",
    "module",
    "dot",
    "exports",
    "equals",
    "async",
    "function",
    "like",
    "syntax",
    "nearly",
    "identical",
    "name",
    "async",
    "function",
    "going",
    "set",
    "instead",
    "syntax",
    "little",
    "bit",
    "confusing",
    "feel",
    "free",
    "use",
    "two",
    "going",
    "next",
    "thing",
    "documentation",
    "pulls",
    "variables",
    "functions",
    "hrv",
    "going",
    "use",
    "hrv",
    "heart",
    "hat",
    "runtime",
    "environment",
    "whenever",
    "run",
    "deploy",
    "script",
    "heart",
    "hat",
    "deploy",
    "automatically",
    "calls",
    "function",
    "passes",
    "hard",
    "hat",
    "object",
    "similar",
    "back",
    "hard",
    "hat",
    "simple",
    "storage",
    "deploy",
    "script",
    "ethers",
    "run",
    "network",
    "come",
    "hard",
    "hat",
    "instead",
    "coming",
    "hard",
    "hat",
    "coming",
    "hrv",
    "basically",
    "thing",
    "hard",
    "hat",
    "script",
    "going",
    "use",
    "two",
    "variables",
    "jury",
    "use",
    "const",
    "get",
    "named",
    "accounts",
    "deployments",
    "syntax",
    "might",
    "look",
    "little",
    "bit",
    "weird",
    "way",
    "pull",
    "exact",
    "variables",
    "tree",
    "kind",
    "thing",
    "tree",
    "dot",
    "get",
    "named",
    "accounts",
    "hra",
    "dot",
    "deployments",
    "pulling",
    "like",
    "means",
    "add",
    "tree",
    "beginning",
    "anymore",
    "additionally",
    "additionally",
    "javascript",
    "something",
    "called",
    "syntactic",
    "sugar",
    "instead",
    "two",
    "lines",
    "like",
    "actually",
    "whole",
    "bit",
    "one",
    "line",
    "instead",
    "extrapolate",
    "two",
    "variables",
    "right",
    "function",
    "declaration",
    "line",
    "exact",
    "thing",
    "line",
    "asynchronous",
    "nameless",
    "function",
    "using",
    "arrow",
    "notation",
    "working",
    "deploy",
    "scripts",
    "default",
    "exporting",
    "module",
    "dot",
    "exports",
    "know",
    "lot",
    "another",
    "kind",
    "lot",
    "syntactic",
    "sugar",
    "really",
    "confusing",
    "feel",
    "free",
    "use",
    "whenever",
    "refer",
    "get",
    "named",
    "accounts",
    "also",
    "three",
    "dot",
    "get",
    "named",
    "accounts",
    "three",
    "dot",
    "deployments",
    "hopefully",
    "clear",
    "top",
    "part",
    "gon",
    "na",
    "bottom",
    "part",
    "right",
    "whichever",
    "one",
    "feel",
    "comfortable",
    "working",
    "alright",
    "gotten",
    "way",
    "let",
    "continue",
    "script",
    "using",
    "deployments",
    "object",
    "reason",
    "deployments",
    "object",
    "get",
    "two",
    "functions",
    "two",
    "functions",
    "going",
    "deploy",
    "function",
    "log",
    "function",
    "gon",
    "na",
    "say",
    "const",
    "deploy",
    "log",
    "equals",
    "deployments",
    "going",
    "pull",
    "two",
    "functions",
    "deployments",
    "also",
    "going",
    "const",
    "deployer",
    "equals",
    "await",
    "get",
    "named",
    "accounts",
    "grabbing",
    "new",
    "deploy",
    "function",
    "new",
    "log",
    "function",
    "grabbing",
    "deployer",
    "account",
    "weird",
    "get",
    "named",
    "accounts",
    "function",
    "get",
    "named",
    "accounts",
    "function",
    "get",
    "named",
    "accounts",
    "way",
    "us",
    "get",
    "named",
    "accounts",
    "working",
    "ethers",
    "saw",
    "working",
    "ethers",
    "actually",
    "get",
    "accounts",
    "based",
    "number",
    "account",
    "section",
    "network",
    "example",
    "list",
    "private",
    "keys",
    "private",
    "keys",
    "zero",
    "private",
    "key",
    "one",
    "private",
    "key",
    "two",
    "might",
    "get",
    "little",
    "confusing",
    "remember",
    "ones",
    "instead",
    "working",
    "like",
    "add",
    "section",
    "bottom",
    "called",
    "named",
    "accounts",
    "name",
    "one",
    "spots",
    "accounts",
    "array",
    "named",
    "accounts",
    "say",
    "one",
    "accounts",
    "name",
    "going",
    "named",
    "deployer",
    "gon",
    "na",
    "say",
    "default",
    "zero",
    "account",
    "going",
    "deployer",
    "also",
    "specify",
    "number",
    "going",
    "deployer",
    "account",
    "across",
    "different",
    "chains",
    "example",
    "rigby",
    "wanted",
    "deployer",
    "account",
    "first",
    "position",
    "could",
    "something",
    "like",
    "hard",
    "hat",
    "could",
    "like",
    "create",
    "multiple",
    "users",
    "like",
    "example",
    "wanted",
    "user",
    "test",
    "something",
    "say",
    "default",
    "one",
    "whatever",
    "wanted",
    "back",
    "deploy",
    "fun",
    "going",
    "say",
    "going",
    "grab",
    "deployer",
    "account",
    "named",
    "accounts",
    "finally",
    "going",
    "grab",
    "chain",
    "id",
    "reasons",
    "come",
    "clear",
    "pretty",
    "soon",
    "const",
    "chain",
    "id",
    "equals",
    "network",
    "dot",
    "config",
    "dot",
    "chain",
    "id",
    "actually",
    "deploy",
    "fund",
    "contract",
    "well",
    "let",
    "think",
    "little",
    "bit",
    "working",
    "remix",
    "pretty",
    "easy",
    "right",
    "deployed",
    "test",
    "net",
    "ah",
    "kind",
    "issue",
    "deploying",
    "rink",
    "test",
    "net",
    "little",
    "bit",
    "slow",
    "always",
    "want",
    "deploy",
    "one",
    "slow",
    "test",
    "nets",
    "even",
    "main",
    "net",
    "tinkering",
    "fiddling",
    "contracts",
    "know",
    "gon",
    "na",
    "really",
    "bad",
    "really",
    "want",
    "deploy",
    "test",
    "net",
    "last",
    "stop",
    "done",
    "testing",
    "locally",
    "deploy",
    "test",
    "see",
    "specific",
    "code",
    "work",
    "like",
    "example",
    "chain",
    "link",
    "documentation",
    "ideally",
    "deploy",
    "local",
    "network",
    "first",
    "well",
    "look",
    "price",
    "converter",
    "dot",
    "seoul",
    "hard",
    "coded",
    "address",
    "0x",
    "address",
    "go",
    "doc",
    "dot",
    "chain",
    "link",
    "evm",
    "chains",
    "contract",
    "addresses",
    "aetherium",
    "data",
    "feeds",
    "address",
    "eth",
    "usd",
    "specifically",
    "rinkeby",
    "work",
    "hard",
    "hat",
    "network",
    "example",
    "default",
    "network",
    "hard",
    "hat",
    "like",
    "said",
    "write",
    "part",
    "automatically",
    "default",
    "network",
    "point",
    "hard",
    "hat",
    "network",
    "harder",
    "network",
    "blank",
    "blockchain",
    "gets",
    "destroyed",
    "every",
    "time",
    "scripts",
    "finish",
    "even",
    "working",
    "local",
    "node",
    "price",
    "feed",
    "contract",
    "wo",
    "exist",
    "one",
    "code",
    "wo",
    "updated",
    "data",
    "test",
    "interact",
    "code",
    "locally",
    "way",
    "well",
    "one",
    "ways",
    "learn",
    "little",
    "bit",
    "later",
    "actually",
    "forking",
    "blockchain",
    "keep",
    "stuff",
    "hard",
    "coded",
    "usually",
    "still",
    "better",
    "figure",
    "everything",
    "something",
    "called",
    "mocks",
    "great",
    "stack",
    "overflow",
    "question",
    "says",
    "mocking",
    "mocking",
    "primarily",
    "used",
    "unit",
    "testing",
    "talk",
    "little",
    "bit",
    "object",
    "test",
    "may",
    "dependencies",
    "complex",
    "objects",
    "isolate",
    "behavior",
    "object",
    "want",
    "replace",
    "objects",
    "mocks",
    "simulate",
    "behavior",
    "real",
    "objects",
    "short",
    "mocking",
    "creating",
    "objects",
    "simulate",
    "behavior",
    "real",
    "objects",
    "might",
    "seem",
    "like",
    "lot",
    "words",
    "basically",
    "want",
    "want",
    "make",
    "fake",
    "price",
    "feed",
    "contract",
    "use",
    "control",
    "working",
    "locally",
    "back",
    "going",
    "leave",
    "note",
    "saying",
    "going",
    "local",
    "host",
    "hard",
    "hat",
    "network",
    "want",
    "use",
    "mock",
    "okay",
    "great",
    "well",
    "use",
    "mock",
    "learn",
    "make",
    "one",
    "little",
    "bit",
    "well",
    "happens",
    "want",
    "change",
    "chains",
    "example",
    "back",
    "dots",
    "dot",
    "chain",
    "link",
    "evm",
    "chains",
    "contract",
    "addresses",
    "ton",
    "different",
    "block",
    "chains",
    "price",
    "feeds",
    "one",
    "blockchains",
    "eth",
    "usd",
    "price",
    "feed",
    "going",
    "little",
    "bit",
    "different",
    "example",
    "looking",
    "eth",
    "usd",
    "address",
    "eth",
    "usd",
    "aetherium",
    "main",
    "net",
    "different",
    "address",
    "eth",
    "usd",
    "rigby",
    "makes",
    "sense",
    "totally",
    "different",
    "contracts",
    "different",
    "chains",
    "similar",
    "functionality",
    "nearly",
    "exact",
    "thing",
    "still",
    "different",
    "also",
    "going",
    "need",
    "way",
    "us",
    "modularize",
    "parameterize",
    "address",
    "matter",
    "chain",
    "deploy",
    "change",
    "code",
    "always",
    "code",
    "exactly",
    "come",
    "like",
    "flip",
    "values",
    "flip",
    "variables",
    "stuff",
    "let",
    "keep",
    "mind",
    "write",
    "rest",
    "order",
    "parameterize",
    "actually",
    "want",
    "prioritize",
    "little",
    "refactoring",
    "fundamental",
    "soul",
    "refactoring",
    "basically",
    "means",
    "going",
    "back",
    "changing",
    "way",
    "code",
    "works",
    "right",
    "constructor",
    "function",
    "right",
    "constructor",
    "function",
    "function",
    "automatically",
    "gets",
    "called",
    "whenever",
    "deploy",
    "contract",
    "right",
    "whole",
    "lot",
    "right",
    "updating",
    "owner",
    "variable",
    "whoever",
    "sent",
    "contract",
    "actually",
    "much",
    "since",
    "constructor",
    "function",
    "like",
    "every",
    "function",
    "actually",
    "take",
    "parameters",
    "one",
    "parameters",
    "might",
    "like",
    "going",
    "address",
    "price",
    "feed",
    "let",
    "go",
    "ahead",
    "add",
    "figure",
    "refactor",
    "code",
    "going",
    "add",
    "constructor",
    "address",
    "price",
    "feed",
    "constructor",
    "deploy",
    "contract",
    "going",
    "pass",
    "eth",
    "usd",
    "price",
    "feed",
    "address",
    "depending",
    "chain",
    "rink",
    "b",
    "use",
    "address",
    "one",
    "polygon",
    "use",
    "different",
    "one",
    "b",
    "b",
    "different",
    "one",
    "gnosis",
    "hecho",
    "avalanche",
    "etc",
    "get",
    "picture",
    "going",
    "marginalize",
    "like",
    "constructor",
    "takes",
    "parameter",
    "price",
    "feed",
    "actually",
    "save",
    "aggregator",
    "v3",
    "interface",
    "object",
    "global",
    "variable",
    "price",
    "converter",
    "create",
    "price",
    "feed",
    "variable",
    "type",
    "aggregator",
    "v3",
    "interface",
    "importing",
    "chainlink",
    "repo",
    "interface",
    "object",
    "gets",
    "compiled",
    "abi",
    "match",
    "abi",
    "address",
    "get",
    "contract",
    "interact",
    "going",
    "thing",
    "gon",
    "na",
    "say",
    "aggregate",
    "tor",
    "v3",
    "interface",
    "public",
    "price",
    "feed",
    "ration",
    "call",
    "price",
    "feed",
    "address",
    "name",
    "constructor",
    "going",
    "say",
    "price",
    "feed",
    "equals",
    "going",
    "exact",
    "thing",
    "price",
    "converter",
    "equals",
    "aggregate",
    "tore",
    "three",
    "interface",
    "price",
    "feed",
    "address",
    "like",
    "price",
    "feed",
    "address",
    "variable",
    "modularized",
    "depending",
    "whatever",
    "chain",
    "grab",
    "price",
    "feed",
    "address",
    "use",
    "price",
    "converter",
    "using",
    "price",
    "converter",
    "well",
    "quick",
    "reminder",
    "using",
    "using",
    "price",
    "converter",
    "using",
    "library",
    "top",
    "unit",
    "256",
    "type",
    "calling",
    "message",
    "dot",
    "value",
    "dot",
    "get",
    "conversion",
    "rate",
    "look",
    "price",
    "converter",
    "function",
    "get",
    "conversion",
    "rate",
    "takes",
    "fml",
    "initial",
    "parameter",
    "since",
    "library",
    "automatically",
    "passes",
    "message",
    "dot",
    "value",
    "get",
    "conversion",
    "rate",
    "function",
    "could",
    "also",
    "pass",
    "price",
    "feed",
    "therefore",
    "would",
    "need",
    "hard",
    "code",
    "get",
    "price",
    "anymore",
    "let",
    "go",
    "ahead",
    "figure",
    "well",
    "message",
    "dot",
    "value",
    "dot",
    "get",
    "conversion",
    "rate",
    "stick",
    "price",
    "feed",
    "update",
    "get",
    "conversion",
    "rate",
    "comma",
    "takes",
    "second",
    "parameter",
    "remember",
    "initial",
    "parameter",
    "going",
    "message",
    "dot",
    "value",
    "second",
    "parameter",
    "going",
    "define",
    "amount",
    "comma",
    "ag",
    "reg",
    "gate",
    "tor",
    "v3",
    "interface",
    "call",
    "price",
    "feed",
    "call",
    "get",
    "price",
    "function",
    "pass",
    "price",
    "feed",
    "get",
    "price",
    "function",
    "get",
    "price",
    "take",
    "guessed",
    "aggregate",
    "three",
    "interface",
    "called",
    "price",
    "feed",
    "longer",
    "need",
    "hard",
    "code",
    "price",
    "feed",
    "delete",
    "lines",
    "compile",
    "like",
    "awesome",
    "quick",
    "refresher",
    "parameterizing",
    "price",
    "feed",
    "address",
    "passing",
    "constructor",
    "gets",
    "saved",
    "global",
    "variable",
    "aggregator",
    "v3",
    "interface",
    "type",
    "passing",
    "get",
    "conversion",
    "rate",
    "function",
    "passes",
    "get",
    "price",
    "function",
    "calls",
    "latest",
    "round",
    "data",
    "probably",
    "could",
    "made",
    "even",
    "easier",
    "probably",
    "could",
    "got",
    "rid",
    "get",
    "price",
    "function",
    "stuck",
    "code",
    "get",
    "conversion",
    "rate",
    "leave",
    "done",
    "refactoring",
    "let",
    "make",
    "sure",
    "works",
    "yarn",
    "hardhead",
    "compile",
    "invalid",
    "value",
    "undefined",
    "hardhat",
    "dot",
    "config",
    "dot",
    "networks",
    "let",
    "go",
    "let",
    "go",
    "config",
    "real",
    "quick",
    "default",
    "network",
    "needs",
    "outside",
    "networks",
    "mistake",
    "let",
    "try",
    "spelled",
    "interface",
    "wrong",
    "price",
    "converter",
    "quick",
    "note",
    "gives",
    "error",
    "like",
    "oftentimes",
    "command",
    "click",
    "control",
    "click",
    "open",
    "file",
    "right",
    "editor",
    "saves",
    "time",
    "going",
    "defined",
    "line",
    "find",
    "file",
    "yeah",
    "let",
    "spell",
    "correctly",
    "let",
    "try",
    "awesome",
    "looks",
    "like",
    "compiling",
    "correctly",
    "warnings",
    "looks",
    "like",
    "warnings",
    "git",
    "version",
    "shadowing",
    "creating",
    "new",
    "price",
    "variable",
    "created",
    "global",
    "price",
    "free",
    "variable",
    "let",
    "go",
    "ahead",
    "delete",
    "get",
    "version",
    "function",
    "altogether",
    "since",
    "even",
    "going",
    "really",
    "need",
    "use",
    "git",
    "version",
    "show",
    "actually",
    "start",
    "working",
    "interfaces",
    "compile",
    "one",
    "time",
    "good",
    "measure",
    "boom",
    "compiled",
    "successfully",
    "awesome",
    "refactored",
    "code",
    "pass",
    "price",
    "feed",
    "address",
    "depending",
    "network",
    "okay",
    "great",
    "said",
    "let",
    "come",
    "back",
    "deploy",
    "funmi",
    "script",
    "let",
    "learn",
    "actually",
    "deploy",
    "rest",
    "order",
    "us",
    "deploy",
    "contract",
    "remember",
    "last",
    "sections",
    "use",
    "contract",
    "factories",
    "heart",
    "hit",
    "deploy",
    "use",
    "deploy",
    "function",
    "use",
    "deploy",
    "function",
    "say",
    "const",
    "funmi",
    "going",
    "name",
    "contract",
    "equals",
    "await",
    "call",
    "deploy",
    "function",
    "name",
    "contract",
    "deploying",
    "right",
    "list",
    "overrides",
    "want",
    "add",
    "gon",
    "na",
    "say",
    "actually",
    "deploying",
    "saying",
    "gon",
    "na",
    "say",
    "deployer",
    "gon",
    "na",
    "pass",
    "arguments",
    "constructor",
    "args",
    "piece",
    "added",
    "single",
    "argh",
    "brackets",
    "going",
    "make",
    "list",
    "arguments",
    "going",
    "put",
    "price",
    "feed",
    "address",
    "show",
    "second",
    "put",
    "price",
    "feed",
    "address",
    "also",
    "going",
    "custom",
    "logging",
    "console",
    "dot",
    "log",
    "stuff",
    "whole",
    "time",
    "need",
    "put",
    "something",
    "need",
    "put",
    "address",
    "use",
    "backslash",
    "star",
    "put",
    "like",
    "common",
    "code",
    "ca",
    "const",
    "address",
    "equals",
    "know",
    "address",
    "stick",
    "well",
    "mean",
    "could",
    "really",
    "prioritizing",
    "right",
    "kind",
    "back",
    "hard",
    "coding",
    "instead",
    "well",
    "actually",
    "use",
    "chain",
    "id",
    "something",
    "like",
    "chain",
    "id",
    "x",
    "use",
    "address",
    "chain",
    "id",
    "z",
    "use",
    "address",
    "something",
    "looks",
    "like",
    "enable",
    "functionality",
    "actually",
    "take",
    "page",
    "ave",
    "github",
    "ave",
    "another",
    "protocol",
    "multiple",
    "chains",
    "deploy",
    "code",
    "multiple",
    "chains",
    "work",
    "multiple",
    "different",
    "addresses",
    "use",
    "number",
    "different",
    "useful",
    "tricks",
    "one",
    "main",
    "ones",
    "using",
    "helper",
    "hardhat",
    "config",
    "using",
    "typescript",
    "javascript",
    "gon",
    "na",
    "thing",
    "config",
    "different",
    "variables",
    "depending",
    "network",
    "actually",
    "depending",
    "network",
    "use",
    "different",
    "variables",
    "use",
    "network",
    "config",
    "almost",
    "exactly",
    "trying",
    "want",
    "going",
    "create",
    "new",
    "file",
    "root",
    "directory",
    "click",
    "new",
    "file",
    "going",
    "call",
    "helper",
    "hard",
    "hat",
    "config",
    "dot",
    "j",
    "going",
    "define",
    "network",
    "config",
    "going",
    "say",
    "hey",
    "network",
    "use",
    "address",
    "network",
    "use",
    "address",
    "etc",
    "going",
    "create",
    "object",
    "called",
    "const",
    "network",
    "config",
    "equals",
    "going",
    "add",
    "bunch",
    "stuff",
    "main",
    "network",
    "working",
    "right",
    "rinky",
    "dinky",
    "chain",
    "id",
    "four",
    "say",
    "chain",
    "id",
    "four",
    "going",
    "named",
    "rinkeby",
    "eth",
    "usd",
    "price",
    "feed",
    "address",
    "going",
    "price",
    "feed",
    "address",
    "rank",
    "b",
    "eth",
    "usd",
    "price",
    "feed",
    "going",
    "copied",
    "documentation",
    "github",
    "whatever",
    "want",
    "paste",
    "simple",
    "methodology",
    "keeping",
    "track",
    "different",
    "price",
    "feeds",
    "different",
    "contract",
    "addresses",
    "across",
    "different",
    "chains",
    "let",
    "say",
    "example",
    "wanted",
    "deploy",
    "polygon",
    "well",
    "well",
    "first",
    "going",
    "need",
    "well",
    "going",
    "need",
    "chain",
    "id",
    "polygon",
    "quick",
    "little",
    "google",
    "search",
    "brings",
    "us",
    "polygon",
    "documentation",
    "see",
    "chain",
    "id",
    "little",
    "brackets",
    "say",
    "name",
    "polygon",
    "comma",
    "eth",
    "usd",
    "price",
    "feed",
    "add",
    "price",
    "feed",
    "eth",
    "usd",
    "polygon",
    "docstoc",
    "chain",
    "link",
    "polygon",
    "matic",
    "look",
    "eth",
    "usd",
    "boom",
    "see",
    "right",
    "grabbed",
    "address",
    "paste",
    "well",
    "hardhead",
    "network",
    "get",
    "second",
    "worry",
    "bottom",
    "need",
    "export",
    "network",
    "config",
    "scripts",
    "actually",
    "work",
    "module",
    "dot",
    "exports",
    "equals",
    "network",
    "config",
    "going",
    "actually",
    "export",
    "couple",
    "things",
    "file",
    "like",
    "instead",
    "default",
    "way",
    "showed",
    "back",
    "script",
    "well",
    "first",
    "want",
    "go",
    "ahead",
    "import",
    "network",
    "config",
    "say",
    "const",
    "network",
    "config",
    "equals",
    "require",
    "import",
    "go",
    "directory",
    "help",
    "hardhead",
    "config",
    "save",
    "want",
    "mention",
    "one",
    "time",
    "confuse",
    "anybody",
    "syntax",
    "constant",
    "network",
    "config",
    "little",
    "curly",
    "braces",
    "around",
    "went",
    "const",
    "helper",
    "config",
    "equals",
    "thing",
    "helper",
    "config",
    "kind",
    "whole",
    "file",
    "const",
    "network",
    "config",
    "equals",
    "hopper",
    "config",
    "dot",
    "network",
    "config",
    "index",
    "kind",
    "easy",
    "way",
    "extrapolate",
    "pull",
    "network",
    "config",
    "file",
    "works",
    "export",
    "bottom",
    "please",
    "use",
    "github",
    "repository",
    "ask",
    "questions",
    "discussions",
    "especially",
    "javascript",
    "stuff",
    "alright",
    "great",
    "network",
    "configured",
    "part",
    "say",
    "china",
    "z",
    "use",
    "chain",
    "id",
    "x",
    "use",
    "since",
    "helper",
    "config",
    "nicely",
    "kind",
    "dictionary",
    "key",
    "value",
    "pair",
    "style",
    "say",
    "const",
    "eth",
    "usd",
    "price",
    "feed",
    "address",
    "equals",
    "network",
    "config",
    "chain",
    "id",
    "francina",
    "object",
    "french",
    "entity",
    "polygon",
    "object",
    "eth",
    "usd",
    "price",
    "feed",
    "going",
    "save",
    "eth",
    "usd",
    "price",
    "feed",
    "address",
    "matter",
    "chain",
    "whenever",
    "run",
    "hard",
    "hat",
    "deploy",
    "run",
    "yarn",
    "hard",
    "hat",
    "deploy",
    "dash",
    "dash",
    "network",
    "rinkeby",
    "chain",
    "id",
    "going",
    "four",
    "going",
    "use",
    "price",
    "feed",
    "address",
    "dash",
    "test",
    "network",
    "polygon",
    "remember",
    "add",
    "ring",
    "p",
    "polygon",
    "networks",
    "like",
    "channel",
    "going",
    "going",
    "use",
    "price",
    "feed",
    "address",
    "awesome",
    "exactly",
    "want",
    "everything",
    "want",
    "questioning",
    "coding",
    "talking",
    "might",
    "thinking",
    "okay",
    "well",
    "talked",
    "marking",
    "thing",
    "talked",
    "localhost",
    "hard",
    "hat",
    "test",
    "locally",
    "like",
    "go",
    "test",
    "net",
    "main",
    "net",
    "local",
    "network",
    "exactly",
    "going",
    "talk",
    "modularized",
    "code",
    "parameterize",
    "code",
    "going",
    "use",
    "address",
    "based",
    "chain",
    "use",
    "chain",
    "even",
    "price",
    "feed",
    "address",
    "actually",
    "create",
    "mock",
    "contracts",
    "idea",
    "mock",
    "contracts",
    "contract",
    "exist",
    "deploy",
    "minimal",
    "version",
    "local",
    "testing",
    "local",
    "testing",
    "deploying",
    "mocks",
    "technically",
    "deploy",
    "script",
    "actually",
    "back",
    "deploy",
    "folder",
    "going",
    "create",
    "new",
    "file",
    "going",
    "call",
    "00",
    "dash",
    "deploy",
    "mocks",
    "dot",
    "j",
    "started",
    "almost",
    "like",
    "pre",
    "deploy",
    "stuff",
    "sometimes",
    "always",
    "deploy",
    "mocks",
    "right",
    "need",
    "deploy",
    "mocks",
    "rinkeby",
    "polygon",
    "aetherium",
    "main",
    "net",
    "already",
    "price",
    "feeds",
    "actually",
    "going",
    "deploy",
    "mock",
    "price",
    "feed",
    "contracts",
    "deploy",
    "funmi",
    "script",
    "going",
    "use",
    "contracts",
    "instead",
    "already",
    "established",
    "contracts",
    "network",
    "price",
    "contracts",
    "like",
    "hard",
    "hat",
    "locos",
    "example",
    "let",
    "write",
    "deploy",
    "mock",
    "script",
    "setup",
    "going",
    "look",
    "nearly",
    "identical",
    "deploy",
    "funmi",
    "want",
    "set",
    "like",
    "absolutely",
    "actually",
    "going",
    "copy",
    "part",
    "paste",
    "initial",
    "part",
    "going",
    "exactly",
    "oh",
    "realized",
    "calling",
    "network",
    "thing",
    "without",
    "defined",
    "javascript",
    "kind",
    "smart",
    "enough",
    "know",
    "network",
    "thing",
    "coming",
    "little",
    "bit",
    "confusing",
    "better",
    "really",
    "explicit",
    "say",
    "const",
    "network",
    "equals",
    "require",
    "hard",
    "hat",
    "network",
    "thing",
    "coming",
    "hard",
    "hat",
    "going",
    "grab",
    "line",
    "also",
    "going",
    "use",
    "top",
    "script",
    "top",
    "section",
    "going",
    "look",
    "exactly",
    "well",
    "going",
    "grab",
    "three",
    "lines",
    "paste",
    "deploy",
    "deployer",
    "chain",
    "id",
    "boom",
    "going",
    "setting",
    "deploy",
    "stuff",
    "want",
    "deploy",
    "new",
    "contract",
    "look",
    "contracts",
    "folder",
    "right",
    "going",
    "need",
    "add",
    "mock",
    "fake",
    "contract",
    "contracts",
    "folder",
    "contracts",
    "folder",
    "want",
    "separate",
    "file",
    "rest",
    "file",
    "know",
    "okay",
    "part",
    "project",
    "part",
    "testing",
    "going",
    "right",
    "click",
    "create",
    "new",
    "folder",
    "either",
    "call",
    "mocks",
    "test",
    "like",
    "call",
    "mine",
    "test",
    "inside",
    "folder",
    "go",
    "ahead",
    "right",
    "click",
    "create",
    "new",
    "file",
    "going",
    "create",
    "new",
    "file",
    "call",
    "mock",
    "v3",
    "aggregate",
    "tore",
    "soul",
    "going",
    "define",
    "mock",
    "price",
    "feed",
    "aggregator",
    "create",
    "fake",
    "price",
    "feed",
    "contract",
    "test",
    "everything",
    "locally",
    "well",
    "one",
    "thing",
    "could",
    "go",
    "chain",
    "link",
    "github",
    "repo",
    "go",
    "contracts",
    "find",
    "one",
    "price",
    "feed",
    "addresses",
    "source",
    "eight",
    "maybe",
    "go",
    "back",
    "source",
    "maybe",
    "check",
    "v",
    "six",
    "looks",
    "like",
    "could",
    "find",
    "stuff",
    "look",
    "around",
    "probably",
    "copy",
    "paste",
    "code",
    "really",
    "seems",
    "like",
    "kind",
    "huge",
    "pain",
    "butt",
    "copy",
    "code",
    "absolutely",
    "could",
    "copy",
    "paste",
    "code",
    "gon",
    "na",
    "something",
    "little",
    "bit",
    "clever",
    "chainlink",
    "repo",
    "actually",
    "comes",
    "mocks",
    "go",
    "contracts",
    "src",
    "v",
    "tests",
    "actually",
    "mock",
    "v3",
    "aggregator",
    "dot",
    "soul",
    "use",
    "mock",
    "copy",
    "paste",
    "everything",
    "revamp",
    "little",
    "bit",
    "dot",
    "dot",
    "stuff",
    "talking",
    "contracts",
    "locally",
    "file",
    "structure",
    "going",
    "file",
    "structure",
    "instead",
    "though",
    "use",
    "node",
    "modules",
    "package",
    "advantage",
    "say",
    "pragma",
    "solidity",
    "carrot",
    "zero",
    "point",
    "use",
    "version",
    "package",
    "import",
    "chain",
    "link",
    "slash",
    "contracts",
    "slash",
    "src",
    "slash",
    "v",
    "slash",
    "tests",
    "slash",
    "mock",
    "b",
    "three",
    "egg",
    "reg",
    "gay",
    "tore",
    "soul",
    "add",
    "course",
    "add",
    "spdx",
    "license",
    "identifier",
    "mit",
    "boom",
    "actually",
    "need",
    "import",
    "code",
    "like",
    "remember",
    "exactly",
    "copy",
    "pasting",
    "contract",
    "project",
    "course",
    "path",
    "resolve",
    "actually",
    "node",
    "modules",
    "actually",
    "run",
    "yarn",
    "hardhat",
    "compile",
    "also",
    "compile",
    "contract",
    "except",
    "course",
    "issue",
    "hey",
    "compiler",
    "versions",
    "match",
    "right",
    "going",
    "get",
    "situations",
    "working",
    "contracts",
    "version",
    "solidity",
    "well",
    "contracts",
    "keep",
    "deployed",
    "time",
    "ton",
    "contracts",
    "version",
    "solidity",
    "probably",
    "910",
    "15",
    "billion",
    "however",
    "many",
    "solidity",
    "versions",
    "come",
    "config",
    "hard",
    "hat",
    "dot",
    "config",
    "scroll",
    "bottom",
    "scroll",
    "defining",
    "solidity",
    "version",
    "actually",
    "add",
    "multiple",
    "solidity",
    "versions",
    "compiler",
    "compile",
    "multiple",
    "versions",
    "solidity",
    "say",
    "lyd",
    "turn",
    "object",
    "make",
    "sure",
    "put",
    "comma",
    "inside",
    "solidity",
    "object",
    "put",
    "compilers",
    "list",
    "compilers",
    "first",
    "one",
    "say",
    "version",
    "zero",
    "point",
    "say",
    "second",
    "one",
    "going",
    "version",
    "point",
    "six",
    "go",
    "ahead",
    "save",
    "looks",
    "like",
    "mine",
    "wanted",
    "format",
    "like",
    "fine",
    "go",
    "ahead",
    "rerun",
    "yarn",
    "hardhead",
    "compile",
    "boom",
    "compiled",
    "five",
    "solidity",
    "files",
    "successfully",
    "means",
    "mark",
    "v",
    "aggregator",
    "also",
    "compiled",
    "look",
    "artifacts",
    "chain",
    "link",
    "indeed",
    "see",
    "chain",
    "link",
    "slash",
    "contract",
    "slash",
    "src",
    "bid",
    "v",
    "tests",
    "see",
    "mock",
    "aggregator",
    "dot",
    "soul",
    "compiled",
    "awesome",
    "mock",
    "contract",
    "compiled",
    "contract",
    "use",
    "deploy",
    "fake",
    "price",
    "feed",
    "blockchain",
    "actually",
    "well",
    "going",
    "exact",
    "way",
    "deployed",
    "funmi",
    "contract",
    "going",
    "add",
    "little",
    "statement",
    "want",
    "deploy",
    "mock",
    "contract",
    "test",
    "net",
    "network",
    "actually",
    "price",
    "feed",
    "could",
    "something",
    "like",
    "chain",
    "id",
    "equal",
    "know",
    "chain",
    "id",
    "deploy",
    "marks",
    "right",
    "kind",
    "pseudocode",
    "obviously",
    "code",
    "wo",
    "actually",
    "work",
    "instead",
    "like",
    "actually",
    "like",
    "specify",
    "chains",
    "going",
    "development",
    "chains",
    "chains",
    "going",
    "one",
    "deploy",
    "mocks",
    "helper",
    "hard",
    "hat",
    "config",
    "define",
    "chains",
    "say",
    "const",
    "development",
    "chains",
    "equals",
    "say",
    "hard",
    "hat",
    "local",
    "host",
    "export",
    "back",
    "deploy",
    "mocks",
    "import",
    "const",
    "development",
    "chains",
    "equals",
    "require",
    "dot",
    "dot",
    "slash",
    "helper",
    "hardhead",
    "config",
    "say",
    "development",
    "chains",
    "dot",
    "includes",
    "chain",
    "id",
    "includes",
    "keyword",
    "basically",
    "function",
    "checks",
    "see",
    "variable",
    "inside",
    "array",
    "gon",
    "na",
    "go",
    "ahead",
    "deploy",
    "max",
    "want",
    "log",
    "getting",
    "deployments",
    "basically",
    "console",
    "dot",
    "log",
    "say",
    "local",
    "network",
    "detected",
    "deploying",
    "mocks",
    "weight",
    "ploy",
    "deploy",
    "new",
    "mock",
    "v3",
    "aggregator",
    "mock",
    "v3",
    "aggregator",
    "comma",
    "little",
    "colons",
    "want",
    "get",
    "really",
    "specific",
    "say",
    "contract",
    "v3",
    "aggregator",
    "kind",
    "already",
    "saying",
    "say",
    "deployer",
    "say",
    "logging",
    "going",
    "true",
    "need",
    "pass",
    "arguments",
    "need",
    "pass",
    "constructor",
    "parameters",
    "mock",
    "v3",
    "aggregator",
    "well",
    "let",
    "go",
    "docs",
    "chain",
    "link",
    "find",
    "also",
    "go",
    "node",
    "modules",
    "chainlink",
    "src",
    "v",
    "06",
    "tests",
    "way",
    "mock",
    "v",
    "three",
    "aggregated",
    "could",
    "also",
    "find",
    "constructor",
    "whatever",
    "one",
    "like",
    "better",
    "sometimes",
    "find",
    "easier",
    "read",
    "github",
    "ctrl",
    "plus",
    "f",
    "command",
    "plus",
    "f",
    "constructor",
    "see",
    "takes",
    "decimals",
    "initial",
    "answer",
    "read",
    "code",
    "learn",
    "decimals",
    "object",
    "going",
    "equivalent",
    "decimals",
    "parameter",
    "going",
    "equivalent",
    "decimals",
    "function",
    "initial",
    "answer",
    "initial",
    "answer",
    "basically",
    "going",
    "price",
    "feed",
    "starting",
    "actually",
    "get",
    "pick",
    "price",
    "price",
    "feed",
    "works",
    "really",
    "well",
    "works",
    "great",
    "testing",
    "usually",
    "like",
    "define",
    "decimals",
    "initial",
    "answers",
    "somewhere",
    "outside",
    "function",
    "access",
    "later",
    "one",
    "good",
    "place",
    "add",
    "helper",
    "hardhead",
    "might",
    "const",
    "decimals",
    "equals",
    "eight",
    "const",
    "initial",
    "answer",
    "answer",
    "equals",
    "since",
    "decimals",
    "2000",
    "123456788",
    "decimal",
    "places",
    "export",
    "well",
    "export",
    "decimals",
    "export",
    "initial",
    "answer",
    "could",
    "course",
    "know",
    "const",
    "decimals",
    "equals",
    "eight",
    "top",
    "initial",
    "answer",
    "use",
    "like",
    "like",
    "conce",
    "import",
    "const",
    "development",
    "chains",
    "also",
    "grabbed",
    "decimals",
    "also",
    "grabbed",
    "initial",
    "answer",
    "save",
    "take",
    "look",
    "back",
    "constructor",
    "looks",
    "like",
    "decimals",
    "first",
    "initial",
    "answers",
    "second",
    "arguments",
    "decimals",
    "first",
    "initial",
    "answers",
    "second",
    "tada",
    "done",
    "quick",
    "log",
    "box",
    "deployed",
    "also",
    "like",
    "kind",
    "like",
    "big",
    "line",
    "end",
    "deploy",
    "scripts",
    "like",
    "hey",
    "end",
    "deploy",
    "script",
    "anything",
    "else",
    "going",
    "different",
    "deploy",
    "script",
    "right",
    "great",
    "deployed",
    "mocks",
    "script",
    "actually",
    "done",
    "deploy",
    "funmi",
    "script",
    "quite",
    "done",
    "way",
    "could",
    "run",
    "deploy",
    "mock",
    "script",
    "well",
    "yes",
    "great",
    "thanks",
    "asking",
    "bottom",
    "deploy",
    "mock",
    "script",
    "add",
    "module",
    "exports",
    "dot",
    "tags",
    "equals",
    "say",
    "marks",
    "run",
    "yarn",
    "hard",
    "hat",
    "deploy",
    "add",
    "flag",
    "dash",
    "dash",
    "tags",
    "run",
    "deploy",
    "scripts",
    "special",
    "tag",
    "run",
    "mocks",
    "tag",
    "means",
    "run",
    "deploy",
    "mock",
    "script",
    "oops",
    "actually",
    "helper",
    "config",
    "development",
    "chains",
    "actually",
    "hard",
    "hat",
    "localhost",
    "said",
    "going",
    "try",
    "chain",
    "id",
    "sorry",
    "going",
    "gon",
    "na",
    "development",
    "chains",
    "dot",
    "includes",
    "network",
    "dot",
    "name",
    "helper",
    "config",
    "using",
    "names",
    "chain",
    "ids",
    "development",
    "chains",
    "includes",
    "network",
    "names",
    "gon",
    "na",
    "go",
    "ahead",
    "deploy",
    "mocks",
    "let",
    "go",
    "ahead",
    "run",
    "yarn",
    "hit",
    "deploy",
    "dash",
    "dash",
    "tags",
    "mocks",
    "perfect",
    "indeed",
    "see",
    "mocks",
    "getting",
    "deployed",
    "log",
    "true",
    "means",
    "going",
    "spit",
    "stuff",
    "like",
    "say",
    "contract",
    "deploying",
    "say",
    "transaction",
    "say",
    "deployed",
    "much",
    "gas",
    "awesome",
    "means",
    "deployed",
    "mach",
    "script",
    "working",
    "perfectly",
    "deploy",
    "mocks",
    "script",
    "working",
    "perfectly",
    "apply",
    "back",
    "deploy",
    "funmi",
    "script",
    "well",
    "gon",
    "na",
    "exact",
    "thing",
    "instead",
    "making",
    "eth",
    "usd",
    "price",
    "feed",
    "address",
    "constant",
    "variable",
    "gon",
    "na",
    "say",
    "let",
    "usd",
    "price",
    "variable",
    "actually",
    "update",
    "say",
    "development",
    "chains",
    "dot",
    "includes",
    "network",
    "dot",
    "name",
    "hard",
    "hat",
    "deploy",
    "get",
    "recent",
    "deployment",
    "using",
    "command",
    "called",
    "literally",
    "get",
    "say",
    "const",
    "eth",
    "usd",
    "aggregator",
    "equals",
    "await",
    "deployments",
    "dot",
    "get",
    "name",
    "contract",
    "deployed",
    "mach",
    "v3",
    "aggregator",
    "wanted",
    "get",
    "instead",
    "deployments",
    "dot",
    "get",
    "absolutely",
    "could",
    "like",
    "exactly",
    "get",
    "address",
    "like",
    "say",
    "eth",
    "usd",
    "price",
    "feed",
    "address",
    "equals",
    "eth",
    "usd",
    "aggregator",
    "contract",
    "dot",
    "address",
    "development",
    "chain",
    "deploy",
    "mock",
    "going",
    "exactly",
    "using",
    "network",
    "config",
    "oh",
    "goodness",
    "done",
    "steps",
    "let",
    "add",
    "little",
    "log",
    "thing",
    "bottom",
    "bunch",
    "hyphens",
    "robust",
    "script",
    "flip",
    "local",
    "development",
    "chain",
    "test",
    "net",
    "chain",
    "main",
    "net",
    "chain",
    "allow",
    "us",
    "deploy",
    "literally",
    "everywhere",
    "without",
    "changing",
    "solidity",
    "take",
    "eth",
    "usd",
    "price",
    "feed",
    "address",
    "stick",
    "logs",
    "bottom",
    "module",
    "dot",
    "exports",
    "dot",
    "tags",
    "equals",
    "call",
    "one",
    "funmi",
    "oh",
    "moment",
    "truth",
    "right",
    "able",
    "run",
    "yarn",
    "hard",
    "hat",
    "deploy",
    "work",
    "local",
    "chain",
    "hard",
    "hat",
    "chain",
    "also",
    "work",
    "test",
    "net",
    "give",
    "let",
    "give",
    "try",
    "yarn",
    "hardhead",
    "deploy",
    "let",
    "see",
    "works",
    "awesome",
    "got",
    "deploy",
    "locally",
    "hard",
    "hat",
    "network",
    "see",
    "went",
    "ahead",
    "deployed",
    "mocks",
    "little",
    "underline",
    "deployed",
    "funmi",
    "deployed",
    "address",
    "much",
    "gas",
    "awesome",
    "things",
    "hard",
    "hat",
    "deploy",
    "run",
    "local",
    "blockchain",
    "blockchain",
    "node",
    "hard",
    "hat",
    "deploy",
    "automatically",
    "run",
    "deploy",
    "scripts",
    "add",
    "node",
    "run",
    "yarn",
    "hard",
    "hat",
    "node",
    "going",
    "spin",
    "new",
    "blockchain",
    "node",
    "already",
    "going",
    "deployed",
    "contracts",
    "every",
    "time",
    "spin",
    "local",
    "node",
    "going",
    "come",
    "automatically",
    "packed",
    "contracts",
    "want",
    "going",
    "show",
    "us",
    "test",
    "net",
    "rinkeby",
    "actually",
    "test",
    "rinkeby",
    "going",
    "add",
    "little",
    "bit",
    "auto",
    "verification",
    "piece",
    "well",
    "last",
    "lesson",
    "wanted",
    "show",
    "hard",
    "hat",
    "deploy",
    "well",
    "right",
    "deploy",
    "funmi",
    "something",
    "similar",
    "say",
    "developer",
    "chains",
    "includes",
    "network",
    "dot",
    "name",
    "say",
    "developer",
    "chains",
    "include",
    "network",
    "dot",
    "name",
    "want",
    "verify",
    "local",
    "network",
    "say",
    "development",
    "chains",
    "dot",
    "includes",
    "network",
    "dot",
    "name",
    "exclamation",
    "mark",
    "aka",
    "bang",
    "means",
    "talking",
    "booleans",
    "saying",
    "name",
    "network",
    "development",
    "chain",
    "want",
    "go",
    "ahead",
    "verify",
    "last",
    "time",
    "process",
    "dot",
    "e",
    "nv",
    "dot",
    "ether",
    "scan",
    "api",
    "key",
    "going",
    "go",
    "ahead",
    "verify",
    "verify",
    "code",
    "right",
    "deploy",
    "code",
    "gon",
    "na",
    "something",
    "little",
    "bit",
    "different",
    "instead",
    "verify",
    "code",
    "deploy",
    "scripts",
    "actually",
    "going",
    "create",
    "new",
    "folder",
    "called",
    "utils",
    "stands",
    "utilities",
    "going",
    "add",
    "different",
    "scripts",
    "use",
    "across",
    "different",
    "deployments",
    "let",
    "say",
    "50",
    "deploy",
    "scripts",
    "going",
    "make",
    "50",
    "deploy",
    "functions",
    "going",
    "add",
    "utils",
    "folder",
    "utils",
    "folder",
    "create",
    "new",
    "file",
    "called",
    "verify",
    "dot",
    "j",
    "going",
    "add",
    "code",
    "last",
    "project",
    "want",
    "go",
    "ahead",
    "copy",
    "paste",
    "last",
    "project",
    "one",
    "pause",
    "video",
    "type",
    "since",
    "using",
    "run",
    "command",
    "gon",
    "na",
    "const",
    "run",
    "equals",
    "require",
    "rt",
    "hat",
    "bottom",
    "going",
    "module",
    "exports",
    "exports",
    "equals",
    "verify",
    "verify",
    "script",
    "utils",
    "folder",
    "back",
    "deploy",
    "funmi",
    "going",
    "say",
    "const",
    "verify",
    "equals",
    "require",
    "dot",
    "dot",
    "slash",
    "utils",
    "slash",
    "verify",
    "since",
    "verified",
    "jas",
    "lot",
    "trycatch",
    "stuff",
    "wait",
    "verify",
    "verify",
    "takes",
    "contract",
    "address",
    "list",
    "arguments",
    "say",
    "await",
    "verify",
    "fund",
    "dot",
    "address",
    "list",
    "arguments",
    "make",
    "list",
    "arguments",
    "easier",
    "put",
    "go",
    "const",
    "args",
    "equals",
    "stick",
    "eth",
    "usd",
    "price",
    "feed",
    "replace",
    "args",
    "take",
    "args",
    "pop",
    "second",
    "parameter",
    "right",
    "great",
    "let",
    "go",
    "ahead",
    "deploy",
    "rinkeby",
    "test",
    "net",
    "need",
    "deploy",
    "rinkeby",
    "test",
    "net",
    "well",
    "let",
    "jump",
    "hard",
    "hat",
    "config",
    "first",
    "let",
    "clean",
    "really",
    "need",
    "accounts",
    "task",
    "going",
    "delete",
    "really",
    "need",
    "comment",
    "going",
    "delete",
    "let",
    "jump",
    "network",
    "section",
    "going",
    "working",
    "ropsten",
    "gon",
    "na",
    "go",
    "ahead",
    "dump",
    "however",
    "going",
    "working",
    "rink",
    "b",
    "url",
    "going",
    "rinkeby",
    "rpc",
    "url",
    "going",
    "define",
    "like",
    "want",
    "copy",
    "paste",
    "last",
    "project",
    "feel",
    "free",
    "also",
    "follow",
    "along",
    "fastforward",
    "counts",
    "going",
    "going",
    "go",
    "ahead",
    "copy",
    "paste",
    "gas",
    "reporter",
    "going",
    "add",
    "constant",
    "corn",
    "market",
    "cap",
    "api",
    "key",
    "equals",
    "process",
    "dot",
    "emv",
    "dot",
    "corn",
    "market",
    "cap",
    "api",
    "key",
    "thing",
    "ether",
    "scan",
    "api",
    "key",
    "licious",
    "add",
    "everything",
    "ether",
    "scan",
    "section",
    "already",
    "gon",
    "na",
    "gas",
    "reporter",
    "false",
    "really",
    "feel",
    "like",
    "using",
    "right",
    "finally",
    "going",
    "add",
    "one",
    "thing",
    "remember",
    "last",
    "project",
    "actually",
    "verified",
    "waited",
    "block",
    "confirmations",
    "way",
    "ether",
    "scan",
    "could",
    "make",
    "sure",
    "catch",
    "well",
    "exact",
    "thing",
    "hard",
    "hat",
    "dot",
    "config",
    "add",
    "section",
    "test",
    "net",
    "many",
    "blocks",
    "want",
    "wait",
    "going",
    "add",
    "block",
    "confirmations",
    "six",
    "back",
    "deploy",
    "funmi",
    "new",
    "section",
    "add",
    "wait",
    "confirmations",
    "network",
    "dot",
    "config",
    "block",
    "motions",
    "one",
    "one",
    "means",
    "block",
    "confirmations",
    "given",
    "hardhead",
    "dot",
    "config",
    "wait",
    "one",
    "block",
    "reason",
    "want",
    "wait",
    "approximately",
    "six",
    "block",
    "confirmations",
    "want",
    "give",
    "ether",
    "scan",
    "chance",
    "index",
    "transaction",
    "added",
    "chain",
    "id",
    "42",
    "mistake",
    "course",
    "going",
    "need",
    "dot",
    "env",
    "file",
    "add",
    "stuff",
    "last",
    "session",
    "rip",
    "erp",
    "crl",
    "private",
    "key",
    "ether",
    "scan",
    "api",
    "coin",
    "market",
    "cap",
    "api",
    "right",
    "moment",
    "truth",
    "let",
    "try",
    "run",
    "yarn",
    "hardhead",
    "deploy",
    "dash",
    "dash",
    "network",
    "rinkeby",
    "deploy",
    "marks",
    "statement",
    "mock",
    "deployment",
    "deploy",
    "funmi",
    "contract",
    "using",
    "correct",
    "price",
    "feed",
    "address",
    "go",
    "ahead",
    "verify",
    "since",
    "waiting",
    "six",
    "block",
    "confirmations",
    "even",
    "super",
    "secure",
    "adding",
    "dash",
    "dash",
    "tags",
    "running",
    "funding",
    "tag",
    "going",
    "yarn",
    "hearted",
    "deploy",
    "network",
    "rigby",
    "let",
    "see",
    "happens",
    "right",
    "deploying",
    "funding",
    "see",
    "transaction",
    "fun",
    "logging",
    "feature",
    "log",
    "true",
    "deploying",
    "funmi",
    "gives",
    "us",
    "transaction",
    "transaction",
    "give",
    "us",
    "address",
    "address",
    "going",
    "wait",
    "six",
    "block",
    "confirmations",
    "transaction",
    "finish",
    "going",
    "see",
    "deployed",
    "contract",
    "address",
    "x",
    "amount",
    "gas",
    "running",
    "verification",
    "process",
    "verification",
    "process",
    "running",
    "pull",
    "rinkeby",
    "ether",
    "scan",
    "paste",
    "address",
    "see",
    "indeed",
    "created",
    "contract",
    "looks",
    "like",
    "successfully",
    "verified",
    "contract",
    "ether",
    "scan",
    "hit",
    "refresh",
    "indeed",
    "see",
    "contract",
    "verified",
    "awesome",
    "right",
    "fantastic",
    "deploy",
    "script",
    "looking",
    "great",
    "able",
    "deploy",
    "local",
    "chain",
    "able",
    "deploy",
    "test",
    "wanted",
    "could",
    "deploy",
    "network",
    "wanted",
    "simply",
    "updating",
    "hard",
    "hat",
    "config",
    "updating",
    "helper",
    "config",
    "fantastic",
    "great",
    "work",
    "far",
    "jump",
    "level",
    "tests",
    "going",
    "clean",
    "funmi",
    "contract",
    "little",
    "bit",
    "make",
    "look",
    "little",
    "bit",
    "professional",
    "going",
    "talk",
    "syntax",
    "reasons",
    "conventions",
    "exist",
    "going",
    "full",
    "force",
    "projects",
    "moving",
    "forward",
    "good",
    "know",
    "good",
    "keep",
    "mind",
    "moving",
    "forward",
    "working",
    "contracts",
    "go",
    "going",
    "learn",
    "conventions",
    "exist",
    "including",
    "learning",
    "little",
    "bit",
    "low",
    "level",
    "solidity",
    "skip",
    "part",
    "get",
    "later",
    "sections",
    "going",
    "little",
    "bit",
    "looser",
    "strict",
    "code",
    "style",
    "guides",
    "basically",
    "gon",
    "na",
    "go",
    "might",
    "see",
    "event",
    "funded",
    "thing",
    "please",
    "ignore",
    "earlier",
    "take",
    "introduced",
    "events",
    "much",
    "earlier",
    "actually",
    "going",
    "learn",
    "events",
    "little",
    "bit",
    "later",
    "course",
    "please",
    "ignore",
    "event",
    "funded",
    "let",
    "go",
    "ahead",
    "tweak",
    "little",
    "bit",
    "contracts",
    "talking",
    "tweaking",
    "make",
    "look",
    "professional",
    "little",
    "bit",
    "professional",
    "talking",
    "solidity",
    "style",
    "guide",
    "conventions",
    "naming",
    "ordering",
    "follow",
    "make",
    "code",
    "look",
    "little",
    "bit",
    "better",
    "like",
    "said",
    "going",
    "little",
    "bit",
    "optional",
    "little",
    "bit",
    "verbose",
    "really",
    "make",
    "big",
    "difference",
    "increase",
    "readability",
    "contracts",
    "lot",
    "make",
    "code",
    "look",
    "lot",
    "nicer",
    "want",
    "go",
    "style",
    "guide",
    "learn",
    "kind",
    "makes",
    "solidity",
    "look",
    "nice",
    "makes",
    "look",
    "nice",
    "well",
    "style",
    "guides",
    "going",
    "follow",
    "style",
    "guide",
    "exactly",
    "tee",
    "going",
    "make",
    "best",
    "efforts",
    "make",
    "code",
    "follow",
    "style",
    "guide",
    "got",
    "link",
    "style",
    "guide",
    "github",
    "repository",
    "section",
    "read",
    "layout",
    "main",
    "thing",
    "want",
    "look",
    "order",
    "layout",
    "want",
    "start",
    "imports",
    "pragma",
    "statement",
    "imports",
    "interfaces",
    "libraries",
    "contracts",
    "inside",
    "contract",
    "type",
    "declarations",
    "state",
    "variables",
    "events",
    "modifiers",
    "functions",
    "let",
    "go",
    "back",
    "make",
    "sure",
    "speed",
    "want",
    "pragma",
    "first",
    "alright",
    "awesome",
    "exactly",
    "want",
    "imports",
    "okay",
    "awesome",
    "something",
    "style",
    "guide",
    "going",
    "error",
    "codes",
    "definitely",
    "want",
    "next",
    "next",
    "going",
    "error",
    "codes",
    "going",
    "bump",
    "one",
    "first",
    "updates",
    "recent",
    "sort",
    "becoming",
    "best",
    "practice",
    "add",
    "name",
    "contract",
    "underscores",
    "name",
    "error",
    "whenever",
    "running",
    "error",
    "makes",
    "lot",
    "easier",
    "understand",
    "contract",
    "throwing",
    "error",
    "going",
    "say",
    "error",
    "funmi",
    "two",
    "underscores",
    "owner",
    "going",
    "scroll",
    "revert",
    "set",
    "like",
    "way",
    "ever",
    "run",
    "error",
    "know",
    "error",
    "coming",
    "funmi",
    "contract",
    "aggregator",
    "v3",
    "interface",
    "price",
    "converter",
    "contract",
    "want",
    "write",
    "error",
    "codes",
    "interfaces",
    "libraries",
    "imported",
    "would",
    "add",
    "finally",
    "add",
    "contracts",
    "file",
    "one",
    "contract",
    "funmi",
    "contract",
    "awesome",
    "next",
    "thing",
    "want",
    "learn",
    "far",
    "style",
    "guides",
    "go",
    "thing",
    "called",
    "natspec",
    "natspec",
    "stands",
    "etherium",
    "natural",
    "language",
    "specification",
    "format",
    "basically",
    "way",
    "documenting",
    "code",
    "inspired",
    "doxygen",
    "uses",
    "doxygen",
    "style",
    "comments",
    "tags",
    "help",
    "document",
    "code",
    "click",
    "link",
    "solidity",
    "documentation",
    "learn",
    "doxygen",
    "scroll",
    "documentation",
    "see",
    "example",
    "using",
    "natspec",
    "whenever",
    "contract",
    "function",
    "needs",
    "documentation",
    "add",
    "syntax",
    "looks",
    "like",
    "example",
    "wanted",
    "add",
    "code",
    "could",
    "add",
    "comment",
    "explaining",
    "funding",
    "contract",
    "start",
    "piece",
    "natspec",
    "three",
    "backslashes",
    "one",
    "backslash",
    "two",
    "stars",
    "another",
    "ending",
    "star",
    "everything",
    "put",
    "inside",
    "comment",
    "section",
    "basically",
    "gets",
    "turned",
    "comment",
    "start",
    "contract",
    "add",
    "sign",
    "title",
    "explain",
    "basically",
    "contract",
    "fun",
    "contract",
    "going",
    "contract",
    "crowdfunding",
    "add",
    "another",
    "star",
    "add",
    "author",
    "going",
    "name",
    "going",
    "put",
    "patrick",
    "collins",
    "course",
    "add",
    "notice",
    "kind",
    "note",
    "people",
    "say",
    "contract",
    "demo",
    "sample",
    "funding",
    "contract",
    "also",
    "add",
    "apt",
    "dev",
    "note",
    "specifically",
    "developers",
    "say",
    "implements",
    "price",
    "feeds",
    "library",
    "reason",
    "want",
    "add",
    "tags",
    "actually",
    "use",
    "natspec",
    "automatically",
    "create",
    "documentation",
    "us",
    "download",
    "actually",
    "run",
    "solc",
    "dash",
    "user",
    "doc",
    "dash",
    "dash",
    "dev",
    "doc",
    "name",
    "file",
    "automatically",
    "generate",
    "documentation",
    "also",
    "really",
    "helpful",
    "automatically",
    "creating",
    "documentation",
    "developers",
    "interact",
    "protocol",
    "later",
    "use",
    "natspec",
    "many",
    "functions",
    "like",
    "us",
    "probably",
    "going",
    "making",
    "documentation",
    "really",
    "want",
    "follow",
    "guidelines",
    "think",
    "function",
    "section",
    "code",
    "little",
    "bit",
    "tricky",
    "developers",
    "inside",
    "contract",
    "follow",
    "order",
    "contract",
    "first",
    "going",
    "start",
    "type",
    "declarations",
    "really",
    "except",
    "fact",
    "using",
    "price",
    "converter",
    "un",
    "256",
    "type",
    "okay",
    "great",
    "next",
    "type",
    "declarations",
    "going",
    "state",
    "variables",
    "state",
    "variables",
    "section",
    "actually",
    "going",
    "change",
    "name",
    "state",
    "variables",
    "little",
    "common",
    "state",
    "variables",
    "solidity",
    "style",
    "guide",
    "kind",
    "adhere",
    "naming",
    "styles",
    "use",
    "upper",
    "lowercase",
    "use",
    "total",
    "caps",
    "underscores",
    "however",
    "naming",
    "variables",
    "going",
    "change",
    "future",
    "section",
    "following",
    "along",
    "github",
    "repo",
    "associated",
    "course",
    "going",
    "actually",
    "little",
    "bit",
    "different",
    "see",
    "however",
    "going",
    "leave",
    "reason",
    "going",
    "change",
    "going",
    "quite",
    "clear",
    "yet",
    "worry",
    "names",
    "going",
    "change",
    "soon",
    "yet",
    "alright",
    "state",
    "variables",
    "comes",
    "events",
    "modifiers",
    "events",
    "modifier",
    "copy",
    "actually",
    "delete",
    "comment",
    "paste",
    "modifier",
    "oh",
    "looks",
    "like",
    "looks",
    "like",
    "auto",
    "formatting",
    "going",
    "uncomment",
    "immutable",
    "actually",
    "automatically",
    "auto",
    "formats",
    "okay",
    "great",
    "formatting",
    "cool",
    "alright",
    "modifiers",
    "next",
    "right",
    "functions",
    "great",
    "actually",
    "want",
    "group",
    "functions",
    "order",
    "print",
    "want",
    "constructor",
    "received",
    "fall",
    "back",
    "fall",
    "back",
    "receive",
    "going",
    "actually",
    "copy",
    "delete",
    "comment",
    "gon",
    "na",
    "stick",
    "veterans",
    "heath",
    "looks",
    "like",
    "receive",
    "goes",
    "first",
    "put",
    "external",
    "functions",
    "public",
    "internal",
    "private",
    "public",
    "public",
    "delete",
    "part",
    "okay",
    "cool",
    "want",
    "syntax",
    "net",
    "spec",
    "functions",
    "example",
    "fund",
    "could",
    "even",
    "copy",
    "paste",
    "would",
    "remove",
    "title",
    "would",
    "remove",
    "author",
    "say",
    "add",
    "notice",
    "function",
    "funds",
    "contract",
    "even",
    "leave",
    "little",
    "dev",
    "thing",
    "talk",
    "parameters",
    "apt",
    "puram",
    "say",
    "like",
    "parameter",
    "returns",
    "say",
    "returns",
    "returns",
    "returns",
    "documentation",
    "since",
    "parameters",
    "return",
    "anything",
    "leave",
    "like",
    "great",
    "revamped",
    "contract",
    "make",
    "little",
    "bit",
    "nicely",
    "formatted",
    "great",
    "job",
    "like",
    "said",
    "actually",
    "going",
    "change",
    "names",
    "state",
    "variables",
    "going",
    "add",
    "functions",
    "little",
    "bit",
    "following",
    "github",
    "repo",
    "state",
    "contract",
    "right",
    "going",
    "look",
    "little",
    "bit",
    "different",
    "make",
    "sense",
    "change",
    "little",
    "bit",
    "alright",
    "cleaned",
    "got",
    "deploy",
    "marks",
    "deploy",
    "funmi",
    "let",
    "go",
    "ahead",
    "start",
    "writing",
    "tests",
    "write",
    "tests",
    "actually",
    "going",
    "run",
    "gas",
    "estimator",
    "using",
    "gas",
    "estimator",
    "gon",
    "na",
    "go",
    "back",
    "going",
    "update",
    "contract",
    "one",
    "time",
    "make",
    "even",
    "cheaper",
    "use",
    "work",
    "remember",
    "going",
    "one",
    "advantages",
    "writing",
    "tests",
    "optimize",
    "contracts",
    "even",
    "faster",
    "gas",
    "efficient",
    "etc",
    "want",
    "make",
    "sure",
    "write",
    "really",
    "good",
    "tests",
    "going",
    "one",
    "first",
    "jumps",
    "professional",
    "test",
    "setups",
    "going",
    "jump",
    "test",
    "folder",
    "going",
    "delete",
    "sample",
    "last",
    "section",
    "went",
    "really",
    "minimalistic",
    "test",
    "great",
    "however",
    "get",
    "bigger",
    "bigger",
    "projects",
    "going",
    "want",
    "start",
    "testing",
    "different",
    "things",
    "going",
    "get",
    "least",
    "two",
    "different",
    "types",
    "testing",
    "cd",
    "test",
    "folder",
    "going",
    "make",
    "one",
    "directory",
    "called",
    "staging",
    "going",
    "make",
    "another",
    "directory",
    "called",
    "unit",
    "look",
    "test",
    "folder",
    "staging",
    "folder",
    "unit",
    "test",
    "folder",
    "going",
    "talk",
    "two",
    "different",
    "types",
    "tests",
    "first",
    "one",
    "going",
    "something",
    "called",
    "unit",
    "test",
    "unit",
    "test",
    "unit",
    "testing",
    "software",
    "testing",
    "method",
    "individual",
    "units",
    "source",
    "code",
    "tested",
    "basically",
    "want",
    "contracts",
    "want",
    "test",
    "minimal",
    "portions",
    "code",
    "make",
    "sure",
    "work",
    "correctly",
    "small",
    "pieces",
    "test",
    "work",
    "want",
    "staging",
    "test",
    "maybe",
    "integration",
    "test",
    "might",
    "run",
    "code",
    "test",
    "net",
    "actual",
    "network",
    "think",
    "staging",
    "test",
    "kind",
    "last",
    "stop",
    "deploy",
    "main",
    "net",
    "always",
    "100",
    "necessary",
    "really",
    "really",
    "helpful",
    "remember",
    "want",
    "conscientious",
    "much",
    "use",
    "test",
    "nets",
    "absolutely",
    "would",
    "100",
    "want",
    "make",
    "sure",
    "everything",
    "works",
    "locally",
    "unit",
    "test",
    "run",
    "code",
    "locally",
    "use",
    "staging",
    "tests",
    "actual",
    "test",
    "net",
    "make",
    "sure",
    "code",
    "work",
    "actual",
    "contracts",
    "unit",
    "tests",
    "done",
    "local",
    "hard",
    "hat",
    "network",
    "forked",
    "hard",
    "hat",
    "network",
    "talk",
    "tar",
    "hat",
    "network",
    "soon",
    "right",
    "let",
    "build",
    "unit",
    "tests",
    "unit",
    "tests",
    "going",
    "basically",
    "saw",
    "last",
    "section",
    "let",
    "go",
    "let",
    "jump",
    "write",
    "unit",
    "tests",
    "let",
    "create",
    "new",
    "test",
    "call",
    "dot",
    "test",
    "dot",
    "j",
    "start",
    "making",
    "tests",
    "test",
    "previously",
    "last",
    "section",
    "tests",
    "going",
    "look",
    "little",
    "bit",
    "differently",
    "actually",
    "going",
    "use",
    "hardhat",
    "deploy",
    "automatically",
    "set",
    "tests",
    "deployed",
    "functions",
    "run",
    "let",
    "go",
    "ahead",
    "get",
    "started",
    "still",
    "going",
    "setup",
    "gon",
    "na",
    "describe",
    "gon",
    "na",
    "say",
    "fund",
    "going",
    "async",
    "function",
    "like",
    "going",
    "going",
    "hits",
    "describes",
    "everything",
    "since",
    "want",
    "unit",
    "test",
    "gon",
    "na",
    "go",
    "little",
    "bit",
    "heavier",
    "test",
    "last",
    "project",
    "future",
    "go",
    "little",
    "bit",
    "lighter",
    "tests",
    "let",
    "get",
    "started",
    "run",
    "yarn",
    "hardhead",
    "test",
    "right",
    "gon",
    "na",
    "get",
    "zero",
    "passing",
    "run",
    "yarn",
    "hardhat",
    "coverage",
    "gon",
    "na",
    "get",
    "something",
    "looks",
    "like",
    "saying",
    "hey",
    "missing",
    "lot",
    "stuff",
    "let",
    "try",
    "cover",
    "lines",
    "tests",
    "one",
    "way",
    "actually",
    "group",
    "tests",
    "based",
    "different",
    "functions",
    "let",
    "first",
    "set",
    "tests",
    "around",
    "constructor",
    "inside",
    "first",
    "describe",
    "add",
    "another",
    "describe",
    "describe",
    "constructor",
    "larger",
    "scope",
    "entire",
    "funmi",
    "contract",
    "everything",
    "inside",
    "one",
    "constructor",
    "also",
    "async",
    "function",
    "tasks",
    "constructor",
    "even",
    "work",
    "describe",
    "probably",
    "want",
    "deploy",
    "funmi",
    "contract",
    "let",
    "learn",
    "async",
    "function",
    "going",
    "deploy",
    "funmi",
    "contract",
    "using",
    "hard",
    "hat",
    "deploy",
    "since",
    "use",
    "hard",
    "hat",
    "deploy",
    "funmi",
    "contract",
    "come",
    "even",
    "mocks",
    "everything",
    "let",
    "let",
    "hdmi",
    "going",
    "deploy",
    "funmi",
    "going",
    "deploy",
    "funmi",
    "contract",
    "first",
    "pulling",
    "deployments",
    "object",
    "harnett",
    "deploy",
    "const",
    "deployments",
    "equals",
    "require",
    "hardhat",
    "deployments",
    "object",
    "function",
    "called",
    "fixture",
    "fixture",
    "allows",
    "us",
    "basically",
    "run",
    "entire",
    "deploy",
    "folder",
    "many",
    "tags",
    "want",
    "notice",
    "added",
    "alt",
    "tag",
    "scripts",
    "means",
    "deployment",
    "stuff",
    "fixtures",
    "gon",
    "na",
    "wait",
    "deployment",
    "fixtures",
    "run",
    "away",
    "deployments",
    "dot",
    "fixture",
    "run",
    "deploy",
    "scripts",
    "local",
    "network",
    "deploy",
    "contracts",
    "use",
    "scripts",
    "testing",
    "deploy",
    "everything",
    "deploy",
    "folder",
    "one",
    "line",
    "helpful",
    "contracts",
    "deployed",
    "start",
    "getting",
    "say",
    "fund",
    "equals",
    "await",
    "ethers",
    "pull",
    "ether",
    "hard",
    "hat",
    "well",
    "dot",
    "hard",
    "hat",
    "deploy",
    "helpful",
    "hard",
    "deploy",
    "rapt",
    "ether",
    "function",
    "called",
    "get",
    "contract",
    "get",
    "contract",
    "function",
    "going",
    "get",
    "recent",
    "deployment",
    "whatever",
    "contract",
    "tell",
    "say",
    "get",
    "contract",
    "fun",
    "give",
    "us",
    "recent",
    "lee",
    "deployed",
    "funmi",
    "contract",
    "one",
    "line",
    "funmi",
    "equal",
    "line",
    "going",
    "make",
    "bunch",
    "transactions",
    "funmi",
    "test",
    "course",
    "also",
    "tell",
    "ethers",
    "account",
    "want",
    "connected",
    "fund",
    "say",
    "const",
    "deployer",
    "equals",
    "goes",
    "away",
    "get",
    "named",
    "accounts",
    "exactly",
    "like",
    "deploy",
    "scripts",
    "need",
    "import",
    "tap",
    "deploy",
    "scripts",
    "imported",
    "get",
    "named",
    "accounts",
    "inside",
    "input",
    "parameters",
    "deploy",
    "function",
    "remember",
    "getting",
    "named",
    "accounts",
    "deployments",
    "abstracted",
    "look",
    "hard",
    "hat",
    "runtime",
    "environment",
    "like",
    "said",
    "hard",
    "hat",
    "runtime",
    "environment",
    "basically",
    "thing",
    "hard",
    "hat",
    "go",
    "ahead",
    "import",
    "like",
    "actually",
    "like",
    "actually",
    "need",
    "abstract",
    "deployer",
    "getting",
    "named",
    "accounts",
    "connect",
    "deployer",
    "fund",
    "account",
    "whenever",
    "call",
    "function",
    "fund",
    "automatically",
    "player",
    "account",
    "great",
    "another",
    "way",
    "get",
    "different",
    "accounts",
    "directly",
    "heart",
    "config",
    "could",
    "take",
    "const",
    "accounts",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "signers",
    "ethers",
    "dot",
    "get",
    "signers",
    "going",
    "return",
    "whatever",
    "account",
    "section",
    "network",
    "default",
    "network",
    "hard",
    "hat",
    "going",
    "give",
    "list",
    "10",
    "fake",
    "accounts",
    "work",
    "course",
    "something",
    "like",
    "const",
    "account",
    "one",
    "equals",
    "accounts",
    "correctly",
    "would",
    "account",
    "zero",
    "equals",
    "account",
    "zero",
    "work",
    "like",
    "leave",
    "comment",
    "case",
    "need",
    "reference",
    "future",
    "okay",
    "great",
    "funmi",
    "contract",
    "let",
    "go",
    "ahead",
    "write",
    "tests",
    "testing",
    "constructor",
    "probably",
    "going",
    "want",
    "use",
    "deployer",
    "object",
    "let",
    "deployer",
    "something",
    "little",
    "finicky",
    "say",
    "deployer",
    "equals",
    "wait",
    "get",
    "named",
    "accounts",
    "dot",
    "deployer",
    "wrap",
    "grab",
    "deployer",
    "object",
    "assign",
    "declare",
    "like",
    "create",
    "first",
    "test",
    "say",
    "say",
    "sets",
    "agra",
    "gator",
    "addresses",
    "correctly",
    "comma",
    "async",
    "function",
    "say",
    "const",
    "response",
    "equals",
    "await",
    "fund",
    "dot",
    "let",
    "get",
    "price",
    "feed",
    "fund",
    "dot",
    "price",
    "feed",
    "want",
    "make",
    "sure",
    "price",
    "feed",
    "going",
    "mk",
    "v",
    "three",
    "aggregator",
    "since",
    "going",
    "running",
    "tests",
    "locally",
    "get",
    "mark",
    "three",
    "v",
    "three",
    "aggregator",
    "top",
    "let",
    "let",
    "mock",
    "v3",
    "aggregate",
    "store",
    "grab",
    "address",
    "way",
    "mockbee",
    "three",
    "aggregator",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "mockbee",
    "three",
    "aggregator",
    "comma",
    "connect",
    "one",
    "deployer",
    "well",
    "want",
    "say",
    "cert",
    "dot",
    "equals",
    "cert",
    "dot",
    "equal",
    "response",
    "comma",
    "lock",
    "v3",
    "aggregator",
    "dot",
    "address",
    "course",
    "want",
    "say",
    "const",
    "assert",
    "equals",
    "require",
    "gy",
    "import",
    "dji",
    "okay",
    "cool",
    "let",
    "go",
    "ahead",
    "try",
    "yarn",
    "hardhat",
    "test",
    "oops",
    "spelled",
    "response",
    "wrong",
    "let",
    "try",
    "awesome",
    "means",
    "indeed",
    "assigning",
    "price",
    "feed",
    "address",
    "correctly",
    "mach",
    "v3",
    "aggregator",
    "okay",
    "great",
    "awesome",
    "think",
    "really",
    "want",
    "constructor",
    "two",
    "kind",
    "nice",
    "showed",
    "kind",
    "demo",
    "look",
    "like",
    "going",
    "skip",
    "writing",
    "tests",
    "actually",
    "going",
    "go",
    "ahead",
    "delete",
    "directly",
    "contract",
    "want",
    "go",
    "ahead",
    "write",
    "tests",
    "leave",
    "examples",
    "learnings",
    "absolutely",
    "pause",
    "video",
    "write",
    "tests",
    "choose",
    "going",
    "skip",
    "next",
    "though",
    "going",
    "move",
    "fund",
    "running",
    "tests",
    "fun",
    "let",
    "go",
    "ahead",
    "write",
    "describe",
    "fund",
    "async",
    "function",
    "going",
    "number",
    "tests",
    "going",
    "go",
    "line",
    "line",
    "first",
    "thing",
    "look",
    "well",
    "look",
    "require",
    "line",
    "write",
    "test",
    "see",
    "contract",
    "actually",
    "fail",
    "enough",
    "eath",
    "sent",
    "let",
    "go",
    "ahead",
    "say",
    "fails",
    "send",
    "enough",
    "eath",
    "async",
    "function",
    "test",
    "see",
    "something",
    "fails",
    "right",
    "done",
    "assert",
    "equals",
    "something",
    "fails",
    "might",
    "run",
    "issue",
    "example",
    "run",
    "await",
    "fund",
    "dot",
    "fund",
    "pass",
    "value",
    "transaction",
    "let",
    "see",
    "happens",
    "run",
    "yarn",
    "hardhead",
    "test",
    "well",
    "test",
    "actually",
    "going",
    "break",
    "vm",
    "exception",
    "processing",
    "transaction",
    "reverted",
    "reason",
    "string",
    "need",
    "spend",
    "eath",
    "tests",
    "going",
    "break",
    "good",
    "want",
    "break",
    "want",
    "tell",
    "test",
    "okay",
    "right",
    "want",
    "tell",
    "okay",
    "way",
    "waffle",
    "testing",
    "comes",
    "play",
    "waffle",
    "testing",
    "actually",
    "use",
    "expect",
    "keyword",
    "expect",
    "transactions",
    "reverted",
    "transactions",
    "fail",
    "instead",
    "using",
    "assert",
    "actually",
    "going",
    "run",
    "wait",
    "expect",
    "fund",
    "dot",
    "fun",
    "dot",
    "b",
    "reverted",
    "actually",
    "even",
    "specific",
    "saying",
    "reverted",
    "exact",
    "reverted",
    "error",
    "need",
    "spend",
    "eath",
    "run",
    "tests",
    "oops",
    "expect",
    "defined",
    "need",
    "import",
    "chai",
    "chai",
    "overwritten",
    "waffle",
    "see",
    "indeed",
    "pass",
    "perfect",
    "way",
    "assert",
    "things",
    "expect",
    "things",
    "fail",
    "awesome",
    "even",
    "specific",
    "failure",
    "codes",
    "perfect",
    "let",
    "write",
    "tests",
    "well",
    "probably",
    "want",
    "correctly",
    "update",
    "data",
    "structure",
    "could",
    "say",
    "updates",
    "amount",
    "funded",
    "data",
    "structure",
    "going",
    "async",
    "function",
    "going",
    "need",
    "call",
    "fund",
    "v",
    "dot",
    "fund",
    "however",
    "going",
    "need",
    "actually",
    "pass",
    "value",
    "transaction",
    "hard",
    "code",
    "value",
    "going",
    "send",
    "say",
    "const",
    "send",
    "value",
    "going",
    "112345",
    "5678",
    "going",
    "one",
    "eath",
    "another",
    "way",
    "write",
    "though",
    "use",
    "ethers",
    "utility",
    "make",
    "little",
    "bit",
    "easier",
    "read",
    "zeros",
    "kind",
    "confusing",
    "hard",
    "tell",
    "first",
    "glance",
    "actually",
    "gon",
    "na",
    "actually",
    "use",
    "ethers",
    "dot",
    "utils",
    "dot",
    "parse",
    "ether",
    "one",
    "parse",
    "ethers",
    "utility",
    "converts",
    "one",
    "one",
    "18",
    "zeros",
    "makes",
    "life",
    "lot",
    "easier",
    "go",
    "ethers",
    "documentation",
    "also",
    "parts",
    "units",
    "function",
    "actually",
    "convert",
    "unit",
    "either",
    "ethers",
    "gwei",
    "really",
    "whatever",
    "want",
    "could",
    "convert",
    "number",
    "aetherium",
    "type",
    "set",
    "value",
    "going",
    "use",
    "fund",
    "definitely",
    "going",
    "minimum",
    "usd",
    "call",
    "fun",
    "function",
    "say",
    "const",
    "response",
    "going",
    "equal",
    "weight",
    "fund",
    "dot",
    "address",
    "mt",
    "funded",
    "address",
    "mt",
    "funded",
    "deployer",
    "dot",
    "address",
    "remember",
    "mapping",
    "address",
    "much",
    "actually",
    "funded",
    "use",
    "deployer",
    "address",
    "give",
    "us",
    "amount",
    "actually",
    "sent",
    "run",
    "assert",
    "dot",
    "equal",
    "string",
    "right",
    "response",
    "going",
    "big",
    "number",
    "version",
    "much",
    "funded",
    "account",
    "send",
    "string",
    "since",
    "send",
    "value",
    "one",
    "exact",
    "amount",
    "funded",
    "run",
    "one",
    "test",
    "running",
    "yarn",
    "art",
    "hat",
    "test",
    "dash",
    "dash",
    "grep",
    "put",
    "quotes",
    "allow",
    "funded",
    "amount",
    "funded",
    "line",
    "looks",
    "like",
    "ran",
    "issue",
    "need",
    "deployed",
    "address",
    "deploy",
    "great",
    "looks",
    "like",
    "indeed",
    "passing",
    "even",
    "run",
    "yarn",
    "hardhead",
    "coverage",
    "see",
    "got",
    "least",
    "little",
    "bit",
    "coverage",
    "still",
    "going",
    "great",
    "much",
    "better",
    "coverage",
    "statements",
    "branches",
    "least",
    "functions",
    "covered",
    "awesome",
    "let",
    "keep",
    "going",
    "done",
    "testing",
    "fun",
    "function",
    "well",
    "probably",
    "else",
    "fun",
    "function",
    "well",
    "also",
    "adding",
    "funders",
    "funders",
    "array",
    "let",
    "go",
    "ahead",
    "test",
    "adds",
    "funder",
    "array",
    "funders",
    "async",
    "function",
    "say",
    "await",
    "fund",
    "mean",
    "fund",
    "value",
    "going",
    "send",
    "value",
    "say",
    "const",
    "response",
    "equals",
    "await",
    "fund",
    "dot",
    "calling",
    "funders",
    "array",
    "index",
    "zero",
    "funder",
    "equals",
    "await",
    "fund",
    "dot",
    "funders",
    "zero",
    "say",
    "assert",
    "dot",
    "equal",
    "funder",
    "deployer",
    "let",
    "go",
    "ahead",
    "run",
    "test",
    "hit",
    "couple",
    "times",
    "change",
    "grep",
    "array",
    "looks",
    "line",
    "perfect",
    "looks",
    "like",
    "one",
    "also",
    "passing",
    "great",
    "money",
    "coming",
    "minimum",
    "amount",
    "coming",
    "data",
    "structures",
    "updated",
    "awesome",
    "could",
    "little",
    "bit",
    "verbose",
    "even",
    "testing",
    "fun",
    "function",
    "think",
    "part",
    "got",
    "gist",
    "right",
    "let",
    "go",
    "ahead",
    "move",
    "withdrawal",
    "function",
    "going",
    "create",
    "new",
    "describe",
    "withdraw",
    "going",
    "async",
    "function",
    "let",
    "see",
    "withdrawal",
    "function",
    "owner",
    "contract",
    "going",
    "able",
    "get",
    "balance",
    "get",
    "money",
    "back",
    "also",
    "going",
    "reset",
    "amounts",
    "one",
    "users",
    "done",
    "let",
    "go",
    "ahead",
    "withdrawing",
    "order",
    "us",
    "test",
    "withdraw",
    "probably",
    "first",
    "want",
    "contract",
    "actually",
    "money",
    "actually",
    "add",
    "another",
    "describe",
    "automatically",
    "fund",
    "contract",
    "run",
    "tests",
    "say",
    "async",
    "function",
    "say",
    "await",
    "fund",
    "dot",
    "fund",
    "value",
    "send",
    "value",
    "tests",
    "withdrawal",
    "scope",
    "first",
    "going",
    "fund",
    "eath",
    "let",
    "say",
    "withdraw",
    "withdraw",
    "eath",
    "single",
    "founder",
    "would",
    "async",
    "function",
    "going",
    "little",
    "bit",
    "longer",
    "test",
    "going",
    "set",
    "arrange",
    "act",
    "assert",
    "test",
    "arrange",
    "act",
    "assert",
    "sort",
    "way",
    "think",
    "writing",
    "tests",
    "want",
    "arrange",
    "test",
    "want",
    "act",
    "want",
    "run",
    "asserts",
    "see",
    "mean",
    "second",
    "going",
    "arrange",
    "test",
    "going",
    "set",
    "test",
    "want",
    "actually",
    "check",
    "correctly",
    "withdrawing",
    "ether",
    "single",
    "founder",
    "first",
    "going",
    "get",
    "starting",
    "balance",
    "fundraising",
    "contract",
    "starting",
    "balance",
    "deployer",
    "say",
    "const",
    "starting",
    "balance",
    "equals",
    "await",
    "fund",
    "dot",
    "provider",
    "dot",
    "get",
    "balance",
    "fund",
    "dot",
    "address",
    "gon",
    "na",
    "start",
    "balance",
    "fund",
    "v",
    "contract",
    "funded",
    "eath",
    "also",
    "gon",
    "na",
    "get",
    "costs",
    "start",
    "starting",
    "deploy",
    "balance",
    "goes",
    "await",
    "fund",
    "dot",
    "provider",
    "dot",
    "get",
    "balance",
    "deployed",
    "employer",
    "getting",
    "starting",
    "balance",
    "funmi",
    "getting",
    "starting",
    "balance",
    "employer",
    "test",
    "later",
    "much",
    "numbers",
    "changed",
    "based",
    "happens",
    "call",
    "withdrawal",
    "function",
    "done",
    "little",
    "bit",
    "setup",
    "actually",
    "run",
    "withdrawal",
    "function",
    "act",
    "gon",
    "na",
    "say",
    "const",
    "trans",
    "action",
    "response",
    "equals",
    "await",
    "fund",
    "dot",
    "withdraw",
    "say",
    "const",
    "transaction",
    "receipt",
    "equals",
    "await",
    "transaction",
    "response",
    "wait",
    "one",
    "able",
    "check",
    "see",
    "entire",
    "fund",
    "rebalance",
    "added",
    "deployer",
    "balance",
    "say",
    "const",
    "ending",
    "fund",
    "balance",
    "equals",
    "weight",
    "provider",
    "dot",
    "get",
    "balance",
    "unreal",
    "dot",
    "address",
    "say",
    "const",
    "ending",
    "deployer",
    "balance",
    "equals",
    "await",
    "fund",
    "dot",
    "provider",
    "dot",
    "get",
    "balance",
    "deployer",
    "check",
    "see",
    "numbers",
    "work",
    "say",
    "assert",
    "dot",
    "equal",
    "ending",
    "fund",
    "balance",
    "going",
    "zero",
    "right",
    "withdrew",
    "money",
    "ending",
    "funding",
    "balance",
    "zero",
    "say",
    "assert",
    "dot",
    "equal",
    "starting",
    "fund",
    "balance",
    "plus",
    "starting",
    "deployer",
    "balance",
    "starting",
    "funds",
    "balance",
    "plus",
    "starting",
    "employer",
    "balance",
    "equal",
    "ending",
    "employer",
    "balance",
    "since",
    "grabbing",
    "whatever",
    "starting",
    "deployer",
    "balance",
    "started",
    "plus",
    "starting",
    "fund",
    "balanced",
    "withdrew",
    "starting",
    "fund",
    "balance",
    "equal",
    "ending",
    "deployer",
    "bots",
    "couple",
    "notes",
    "since",
    "starting",
    "funmi",
    "balance",
    "calling",
    "blockchain",
    "going",
    "type",
    "big",
    "number",
    "want",
    "use",
    "big",
    "number",
    "dot",
    "add",
    "actually",
    "instead",
    "plus",
    "sign",
    "make",
    "working",
    "big",
    "numbers",
    "little",
    "bit",
    "easier",
    "instead",
    "starting",
    "funmi",
    "balance",
    "plus",
    "gon",
    "na",
    "starting",
    "balance",
    "dot",
    "add",
    "like",
    "good",
    "one",
    "thing",
    "though",
    "called",
    "withdraw",
    "deployer",
    "deployer",
    "spent",
    "little",
    "bit",
    "gas",
    "actually",
    "accurate",
    "actually",
    "also",
    "need",
    "calculate",
    "gas",
    "cost",
    "would",
    "need",
    "dot",
    "add",
    "gas",
    "cost",
    "also",
    "string",
    "big",
    "numbers",
    "objects",
    "identities",
    "little",
    "bit",
    "weird",
    "test",
    "see",
    "equal",
    "make",
    "strings",
    "gas",
    "costs",
    "let",
    "figure",
    "get",
    "gas",
    "cost",
    "transaction",
    "add",
    "deployer",
    "bounce",
    "run",
    "assertion",
    "actually",
    "find",
    "gas",
    "costs",
    "transaction",
    "receipt",
    "going",
    "show",
    "couple",
    "phenomenal",
    "tricks",
    "use",
    "vs",
    "code",
    "using",
    "different",
    "editor",
    "worry",
    "much",
    "vs",
    "code",
    "actually",
    "create",
    "something",
    "called",
    "breakpoints",
    "unverified",
    "breakpoint",
    "file",
    "modified",
    "please",
    "restart",
    "bug",
    "session",
    "let",
    "put",
    "right",
    "put",
    "right",
    "line",
    "transaction",
    "receipt",
    "created",
    "ending",
    "funmi",
    "belts",
    "breakpoint",
    "stops",
    "script",
    "line",
    "allows",
    "us",
    "drop",
    "something",
    "called",
    "debug",
    "console",
    "see",
    "variables",
    "happening",
    "time",
    "want",
    "look",
    "transaction",
    "receipt",
    "see",
    "total",
    "gas",
    "cost",
    "also",
    "incredibly",
    "helpful",
    "dropping",
    "tests",
    "dropping",
    "scripts",
    "seeing",
    "exactly",
    "going",
    "wrong",
    "move",
    "run",
    "bug",
    "section",
    "hit",
    "additional",
    "views",
    "click",
    "javascript",
    "debug",
    "terminal",
    "create",
    "new",
    "terminal",
    "terminal",
    "section",
    "happens",
    "run",
    "yarn",
    "hard",
    "hat",
    "test",
    "run",
    "testing",
    "everything",
    "hits",
    "breakpoint",
    "stop",
    "currently",
    "gas",
    "cost",
    "going",
    "delete",
    "compile",
    "work",
    "everything",
    "run",
    "yarn",
    "hardhead",
    "test",
    "see",
    "gon",
    "na",
    "say",
    "debugger",
    "attached",
    "start",
    "running",
    "tests",
    "going",
    "stop",
    "line",
    "look",
    "variable",
    "section",
    "left",
    "hand",
    "side",
    "actually",
    "see",
    "ton",
    "variables",
    "read",
    "little",
    "bit",
    "going",
    "go",
    "debug",
    "console",
    "type",
    "things",
    "like",
    "transaction",
    "receipt",
    "see",
    "ton",
    "information",
    "transaction",
    "receipt",
    "object",
    "looking",
    "looking",
    "see",
    "transaction",
    "receipt",
    "could",
    "look",
    "debug",
    "console",
    "anything",
    "gas",
    "looks",
    "like",
    "gas",
    "used",
    "big",
    "number",
    "also",
    "effective",
    "gas",
    "price",
    "amount",
    "gas",
    "used",
    "times",
    "gas",
    "price",
    "going",
    "give",
    "us",
    "money",
    "paid",
    "gas",
    "figured",
    "gas",
    "used",
    "effective",
    "gas",
    "price",
    "variables",
    "transaction",
    "receipt",
    "could",
    "also",
    "found",
    "documentation",
    "however",
    "sometimes",
    "even",
    "quicker",
    "find",
    "exit",
    "debugger",
    "clicking",
    "little",
    "thing",
    "go",
    "back",
    "terminal",
    "trash",
    "javascript",
    "debugger",
    "remove",
    "breakpoint",
    "grab",
    "two",
    "variables",
    "pull",
    "right",
    "transaction",
    "receipt",
    "object",
    "typing",
    "const",
    "yes",
    "used",
    "comma",
    "effective",
    "gas",
    "price",
    "equals",
    "transaction",
    "receipt",
    "curly",
    "bracket",
    "syntax",
    "use",
    "pull",
    "objects",
    "another",
    "object",
    "two",
    "objects",
    "create",
    "const",
    "gas",
    "cost",
    "total",
    "gas",
    "cost",
    "going",
    "equal",
    "gas",
    "used",
    "times",
    "effective",
    "gas",
    "price",
    "since",
    "big",
    "numbers",
    "use",
    "big",
    "number",
    "function",
    "called",
    "dot",
    "mol",
    "multiply",
    "together",
    "total",
    "gas",
    "cost",
    "come",
    "say",
    "ending",
    "deployer",
    "balance",
    "plus",
    "gas",
    "cost",
    "string",
    "two",
    "equivalent",
    "know",
    "lot",
    "math",
    "section",
    "lot",
    "new",
    "things",
    "want",
    "quickly",
    "rego",
    "learned",
    "first",
    "font",
    "contract",
    "comes",
    "provider",
    "could",
    "also",
    "done",
    "ethers",
    "dot",
    "provider",
    "dot",
    "get",
    "balance",
    "using",
    "fun",
    "v",
    "dot",
    "provider",
    "using",
    "provider",
    "funmi",
    "contract",
    "really",
    "matter",
    "use",
    "wanted",
    "use",
    "get",
    "balanced",
    "function",
    "provider",
    "object",
    "gets",
    "us",
    "balance",
    "contract",
    "thing",
    "starting",
    "deplore",
    "balance",
    "reason",
    "needed",
    "starting",
    "balances",
    "wanted",
    "compare",
    "ending",
    "balances",
    "see",
    "money",
    "went",
    "right",
    "places",
    "call",
    "withdrawal",
    "function",
    "transaction",
    "receipt",
    "grabbed",
    "gas",
    "used",
    "gas",
    "price",
    "want",
    "debug",
    "javascript",
    "code",
    "add",
    "breakpoint",
    "like",
    "go",
    "run",
    "bug",
    "open",
    "debug",
    "javascript",
    "terminal",
    "different",
    "regular",
    "bash",
    "terminals",
    "run",
    "javascript",
    "commands",
    "stop",
    "breakpoints",
    "read",
    "different",
    "variables",
    "see",
    "different",
    "things",
    "using",
    "knowledge",
    "pulled",
    "gas",
    "use",
    "effective",
    "gas",
    "price",
    "transaction",
    "receipt",
    "used",
    "get",
    "total",
    "gas",
    "cost",
    "transaction",
    "got",
    "ending",
    "fund",
    "balanced",
    "ending",
    "deployer",
    "balance",
    "used",
    "variables",
    "make",
    "sure",
    "money",
    "went",
    "right",
    "places",
    "check",
    "running",
    "yarn",
    "hardhead",
    "test",
    "dash",
    "dash",
    "grep",
    "withdraw",
    "eath",
    "quotes",
    "since",
    "space",
    "see",
    "test",
    "indeed",
    "pass",
    "great",
    "job",
    "add",
    "gas",
    "cost",
    "string",
    "would",
    "see",
    "something",
    "like",
    "would",
    "see",
    "numbers",
    "ever",
    "slightly",
    "anticipating",
    "calculating",
    "gas",
    "always",
    "want",
    "make",
    "sure",
    "using",
    "gas",
    "calculations",
    "like",
    "another",
    "incredibly",
    "powerful",
    "debugging",
    "tool",
    "really",
    "going",
    "go",
    "important",
    "know",
    "really",
    "helpful",
    "actually",
    "use",
    "console",
    "dot",
    "log",
    "solidity",
    "hard",
    "hat",
    "inside",
    "heart",
    "hat",
    "project",
    "import",
    "hard",
    "hat",
    "slash",
    "console",
    "dot",
    "soul",
    "right",
    "solidity",
    "console",
    "dot",
    "log",
    "type",
    "pretty",
    "much",
    "whatever",
    "want",
    "execute",
    "functions",
    "similar",
    "console",
    "dot",
    "log",
    "javascript",
    "actually",
    "console",
    "dot",
    "log",
    "terminal",
    "example",
    "run",
    "yarn",
    "hard",
    "hat",
    "test",
    "console",
    "dot",
    "logs",
    "see",
    "stuff",
    "like",
    "get",
    "printed",
    "addition",
    "visual",
    "studio",
    "code",
    "debugger",
    "importing",
    "hard",
    "hat",
    "slash",
    "console",
    "dot",
    "sol",
    "using",
    "console",
    "dot",
    "logs",
    "solidity",
    "also",
    "effective",
    "debugging",
    "strategy",
    "feel",
    "free",
    "give",
    "video",
    "pause",
    "implement",
    "contracts",
    "try",
    "tests",
    "tested",
    "withdrawing",
    "eath",
    "single",
    "funder",
    "works",
    "perfectly",
    "let",
    "test",
    "withdrawing",
    "eath",
    "multiple",
    "funders",
    "let",
    "say",
    "allows",
    "us",
    "withdraw",
    "multiple",
    "funders",
    "would",
    "async",
    "function",
    "let",
    "await",
    "funmi",
    "fun",
    "number",
    "different",
    "accounts",
    "create",
    "whole",
    "bunch",
    "different",
    "accounts",
    "course",
    "saying",
    "const",
    "accounts",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "signers",
    "loop",
    "accounts",
    "one",
    "accounts",
    "call",
    "fund",
    "function",
    "going",
    "loop",
    "going",
    "say",
    "let",
    "equals",
    "start",
    "first",
    "index",
    "accounts",
    "zero",
    "index",
    "going",
    "deployer",
    "say",
    "let",
    "equals",
    "one",
    "going",
    "less",
    "let",
    "say",
    "six",
    "plus",
    "plus",
    "say",
    "const",
    "contract",
    "funmi",
    "connected",
    "contract",
    "equals",
    "await",
    "dot",
    "connect",
    "two",
    "accounts",
    "need",
    "call",
    "connect",
    "function",
    "right",
    "scroll",
    "back",
    "top",
    "funmi",
    "contract",
    "connected",
    "deployer",
    "account",
    "anytime",
    "call",
    "transaction",
    "funmi",
    "deployer",
    "account",
    "calling",
    "transaction",
    "need",
    "create",
    "new",
    "objects",
    "connect",
    "different",
    "accounts",
    "gon",
    "na",
    "say",
    "fund",
    "connected",
    "contract",
    "connected",
    "one",
    "different",
    "accounts",
    "dot",
    "fund",
    "value",
    "send",
    "value",
    "excuse",
    "await",
    "great",
    "going",
    "range",
    "section",
    "need",
    "grab",
    "starting",
    "balances",
    "copy",
    "two",
    "lines",
    "paste",
    "going",
    "move",
    "act",
    "going",
    "call",
    "withdrawal",
    "function",
    "let",
    "say",
    "const",
    "transaction",
    "action",
    "response",
    "equals",
    "await",
    "mi",
    "dot",
    "withdraw",
    "going",
    "exact",
    "thing",
    "getting",
    "transaction",
    "receipt",
    "gas",
    "costs",
    "get",
    "everything",
    "correct",
    "done",
    "act",
    "move",
    "assert",
    "going",
    "similar",
    "things",
    "like",
    "example",
    "whole",
    "first",
    "part",
    "going",
    "exactly",
    "also",
    "want",
    "make",
    "sure",
    "funders",
    "reset",
    "properly",
    "make",
    "sure",
    "funders",
    "array",
    "reset",
    "properly",
    "actually",
    "check",
    "see",
    "looking",
    "zero",
    "position",
    "throws",
    "error",
    "run",
    "wait",
    "expect",
    "fund",
    "dot",
    "get",
    "dot",
    "funder",
    "dot",
    "funders",
    "zero",
    "revert",
    "say",
    "await",
    "expect",
    "funmi",
    "dot",
    "funders",
    "dot",
    "two",
    "dot",
    "b",
    "dot",
    "reverted",
    "want",
    "loop",
    "accounts",
    "make",
    "sure",
    "makes",
    "sure",
    "mapping",
    "amounts",
    "zero",
    "say",
    "equals",
    "one",
    "less",
    "six",
    "plus",
    "plus",
    "say",
    "assert",
    "dot",
    "equal",
    "wait",
    "fund",
    "dot",
    "address",
    "amount",
    "funded",
    "accounts",
    "got",
    "address",
    "zero",
    "making",
    "sure",
    "mappings",
    "correctly",
    "updated",
    "zero",
    "let",
    "go",
    "test",
    "withdrawing",
    "multiple",
    "founders",
    "going",
    "go",
    "back",
    "terminal",
    "going",
    "hit",
    "going",
    "change",
    "grep",
    "one",
    "see",
    "passes",
    "indeed",
    "means",
    "withdraw",
    "function",
    "works",
    "really",
    "well",
    "even",
    "multiple",
    "funders",
    "happy",
    "go",
    "sleep",
    "knowing",
    "thing",
    "absolutely",
    "want",
    "100",
    "want",
    "test",
    "owner",
    "modifier",
    "working",
    "want",
    "owner",
    "able",
    "withdraw",
    "funds",
    "create",
    "new",
    "session",
    "say",
    "allows",
    "owner",
    "withdraw",
    "allows",
    "withdraw",
    "async",
    "function",
    "say",
    "const",
    "accounts",
    "equals",
    "ethers",
    "dot",
    "get",
    "signers",
    "say",
    "const",
    "attacker",
    "equals",
    "accounts",
    "one",
    "say",
    "first",
    "account",
    "random",
    "attacker",
    "connect",
    "attacker",
    "new",
    "contract",
    "say",
    "const",
    "attacker",
    "connected",
    "contract",
    "equals",
    "await",
    "db",
    "dot",
    "connect",
    "attacker",
    "dot",
    "address",
    "excuse",
    "dot",
    "connect",
    "attacker",
    "since",
    "connecting",
    "address",
    "connecting",
    "account",
    "attacker",
    "account",
    "object",
    "wait",
    "expect",
    "attacker",
    "connected",
    "contract",
    "dot",
    "withdraw",
    "dot",
    "two",
    "dot",
    "b",
    "dot",
    "reverted",
    "able",
    "withdraw",
    "let",
    "go",
    "ahead",
    "even",
    "copy",
    "whole",
    "thing",
    "want",
    "hit",
    "delete",
    "section",
    "paste",
    "boom",
    "means",
    "account",
    "tries",
    "call",
    "withdraw",
    "automatically",
    "gets",
    "reverted",
    "want",
    "explicit",
    "make",
    "sure",
    "correct",
    "error",
    "code",
    "thrown",
    "reverted",
    "right",
    "reverted",
    "sent",
    "ether",
    "something",
    "weird",
    "want",
    "make",
    "sure",
    "reverted",
    "specific",
    "error",
    "code",
    "right",
    "owner",
    "error",
    "code",
    "actually",
    "best",
    "practice",
    "put",
    "contract",
    "name",
    "underscores",
    "custom",
    "error",
    "makes",
    "lot",
    "easier",
    "future",
    "ton",
    "different",
    "contracts",
    "sure",
    "error",
    "coming",
    "going",
    "update",
    "really",
    "quickly",
    "fund",
    "underscore",
    "underscore",
    "owner",
    "custom",
    "error",
    "say",
    "withdraw",
    "reverted",
    "add",
    "custom",
    "error",
    "rerun",
    "test",
    "allows",
    "owner",
    "withdraw",
    "oops",
    "need",
    "wait",
    "mistake",
    "wait",
    "thursday",
    "get",
    "signers",
    "let",
    "try",
    "indeed",
    "passing",
    "perfect",
    "okay",
    "great",
    "basic",
    "unit",
    "tests",
    "going",
    "write",
    "staging",
    "tests",
    "pretty",
    "soon",
    "actually",
    "let",
    "go",
    "ahead",
    "add",
    "gas",
    "estimator",
    "see",
    "much",
    "gas",
    "contracts",
    "functions",
    "taking",
    "looks",
    "like",
    "hardhead",
    "gas",
    "reporter",
    "already",
    "let",
    "scroll",
    "gas",
    "reporter",
    "true",
    "wo",
    "coin",
    "market",
    "cap",
    "look",
    "purely",
    "gui",
    "comment",
    "like",
    "rerun",
    "tests",
    "say",
    "yarn",
    "test",
    "gon",
    "na",
    "get",
    "gas",
    "output",
    "gas",
    "report",
    "dash",
    "text",
    "looks",
    "like",
    "tests",
    "passing",
    "perfect",
    "look",
    "gas",
    "report",
    "see",
    "going",
    "well",
    "looks",
    "like",
    "fundraising",
    "function",
    "taking",
    "decent",
    "chunk",
    "gas",
    "withdrawal",
    "function",
    "take",
    "guests",
    "see",
    "min",
    "max",
    "average",
    "course",
    "see",
    "much",
    "one",
    "contracts",
    "cost",
    "actually",
    "output",
    "really",
    "care",
    "moq",
    "aggregator",
    "course",
    "never",
    "actually",
    "going",
    "use",
    "let",
    "say",
    "look",
    "average",
    "gas",
    "go",
    "hmm",
    "looks",
    "like",
    "actually",
    "lot",
    "originally",
    "expected",
    "way",
    "us",
    "make",
    "little",
    "bit",
    "cheap",
    "go",
    "back",
    "funding",
    "contract",
    "look",
    "withdrawal",
    "function",
    "noticed",
    "something",
    "oh",
    "actually",
    "way",
    "make",
    "lot",
    "cheaper",
    "something",
    "called",
    "storage",
    "variables",
    "global",
    "variables",
    "working",
    "whole",
    "time",
    "let",
    "let",
    "paint",
    "little",
    "picture",
    "gon",
    "na",
    "look",
    "one",
    "first",
    "gas",
    "optimization",
    "techniques",
    "take",
    "drop",
    "r",
    "funmi",
    "contract",
    "state",
    "variables",
    "actually",
    "stored",
    "contract",
    "actually",
    "keeps",
    "track",
    "stuff",
    "section",
    "going",
    "little",
    "bit",
    "advanced",
    "note",
    "saying",
    "advanced",
    "section",
    "want",
    "skip",
    "getting",
    "gas",
    "optimizations",
    "information",
    "still",
    "really",
    "good",
    "know",
    "want",
    "skip",
    "come",
    "back",
    "later",
    "absolutely",
    "let",
    "talk",
    "happens",
    "actually",
    "save",
    "store",
    "global",
    "variables",
    "okay",
    "storage",
    "variables",
    "everything",
    "go",
    "documentation",
    "link",
    "course",
    "github",
    "repo",
    "associated",
    "course",
    "whenever",
    "one",
    "global",
    "variables",
    "variables",
    "stay",
    "permanently",
    "stuck",
    "something",
    "called",
    "storage",
    "think",
    "storage",
    "big",
    "giant",
    "array",
    "giant",
    "list",
    "variables",
    "actually",
    "create",
    "say",
    "contract",
    "called",
    "son",
    "storage",
    "variable",
    "called",
    "favorite",
    "number",
    "basically",
    "saying",
    "want",
    "favorite",
    "number",
    "variable",
    "persist",
    "right",
    "saw",
    "lot",
    "examples",
    "favorite",
    "number",
    "variable",
    "always",
    "call",
    "see",
    "contracts",
    "favorite",
    "number",
    "well",
    "way",
    "persists",
    "gets",
    "stored",
    "place",
    "called",
    "storage",
    "storage",
    "box",
    "giant",
    "list",
    "associated",
    "contract",
    "every",
    "single",
    "variable",
    "every",
    "single",
    "value",
    "storage",
    "section",
    "slotted",
    "32",
    "byte",
    "long",
    "slot",
    "storage",
    "array",
    "example",
    "number",
    "25",
    "bytes",
    "implementation",
    "000",
    "ton",
    "zeros",
    "hex",
    "version",
    "yuan",
    "much",
    "hex",
    "translation",
    "bytes",
    "implementation",
    "yuan",
    "store",
    "saw",
    "increments",
    "like",
    "array",
    "starting",
    "zero",
    "example",
    "next",
    "global",
    "variable",
    "next",
    "storage",
    "variable",
    "gets",
    "slotted",
    "next",
    "slot",
    "available",
    "bullions",
    "example",
    "get",
    "transformed",
    "bull",
    "version",
    "two",
    "hex",
    "modified",
    "bool",
    "variable",
    "true",
    "x",
    "edition",
    "true",
    "boolean",
    "0x",
    "every",
    "time",
    "save",
    "additional",
    "global",
    "variable",
    "correctly",
    "one",
    "storage",
    "variables",
    "takes",
    "additional",
    "storage",
    "slot",
    "variables",
    "dynamic",
    "length",
    "change",
    "length",
    "something",
    "dynamic",
    "well",
    "dynamic",
    "values",
    "like",
    "dynamic",
    "array",
    "mapping",
    "elements",
    "inside",
    "array",
    "inside",
    "mapping",
    "actually",
    "stored",
    "using",
    "type",
    "hashing",
    "function",
    "see",
    "specific",
    "functions",
    "documentation",
    "object",
    "take",
    "storage",
    "slot",
    "going",
    "entire",
    "array",
    "example",
    "array",
    "variable",
    "storage",
    "slot",
    "two",
    "entire",
    "array",
    "storage",
    "slot",
    "two",
    "actually",
    "array",
    "length",
    "length",
    "array",
    "stored",
    "storage",
    "slot",
    "two",
    "example",
    "array",
    "dot",
    "push",
    "222",
    "hashing",
    "function",
    "see",
    "documentation",
    "store",
    "number",
    "location",
    "storage",
    "hex",
    "222",
    "0x",
    "0000",
    "gets",
    "stored",
    "crazy",
    "spot",
    "good",
    "intentional",
    "32",
    "bytes",
    "may",
    "nearly",
    "big",
    "enough",
    "store",
    "array",
    "array",
    "gets",
    "massive",
    "would",
    "make",
    "sense",
    "put",
    "elements",
    "inside",
    "array",
    "subsequent",
    "numbers",
    "size",
    "array",
    "change",
    "never",
    "going",
    "sure",
    "many",
    "subsequence",
    "need",
    "array",
    "storage",
    "slot",
    "length",
    "mappings",
    "storage",
    "spot",
    "well",
    "similar",
    "array",
    "blank",
    "blank",
    "intentionally",
    "solidity",
    "knows",
    "okay",
    "mapping",
    "needs",
    "storage",
    "slot",
    "attaching",
    "functional",
    "work",
    "correctly",
    "interestingly",
    "constant",
    "variables",
    "immutable",
    "variables",
    "take",
    "spots",
    "storage",
    "reason",
    "constant",
    "variables",
    "actually",
    "part",
    "contracts",
    "byte",
    "code",
    "sounds",
    "little",
    "bit",
    "weird",
    "imagine",
    "solidity",
    "anytime",
    "sees",
    "constant",
    "variables",
    "name",
    "automatically",
    "swaps",
    "whatever",
    "number",
    "actually",
    "kind",
    "think",
    "storage",
    "pointer",
    "123",
    "take",
    "storage",
    "slot",
    "well",
    "variables",
    "inside",
    "function",
    "variables",
    "exist",
    "duration",
    "function",
    "stay",
    "inside",
    "contract",
    "persist",
    "permanent",
    "variables",
    "inside",
    "functions",
    "like",
    "new",
    "var",
    "var",
    "get",
    "added",
    "storage",
    "get",
    "added",
    "memory",
    "data",
    "structure",
    "gets",
    "deleted",
    "function",
    "finished",
    "running",
    "might",
    "asking",
    "okay",
    "well",
    "need",
    "memory",
    "keyword",
    "especially",
    "comes",
    "strings",
    "saw",
    "say",
    "string",
    "memory",
    "reason",
    "need",
    "strings",
    "strings",
    "technically",
    "dynamically",
    "sized",
    "array",
    "need",
    "tell",
    "solidity",
    "hey",
    "going",
    "storage",
    "location",
    "going",
    "memory",
    "location",
    "wipe",
    "arrays",
    "mappings",
    "take",
    "lot",
    "space",
    "slowly",
    "wants",
    "make",
    "sure",
    "okay",
    "working",
    "storage",
    "memory",
    "tell",
    "need",
    "know",
    "need",
    "allocate",
    "space",
    "storage",
    "data",
    "structure",
    "everything",
    "read",
    "solidity",
    "documentation",
    "github",
    "repo",
    "associated",
    "course",
    "go",
    "contracts",
    "actually",
    "got",
    "example",
    "contract",
    "section",
    "called",
    "fun",
    "storage",
    "play",
    "look",
    "lot",
    "stuff",
    "even",
    "wrote",
    "little",
    "script",
    "called",
    "deploy",
    "storage",
    "fun",
    "print",
    "storage",
    "location",
    "different",
    "variables",
    "feel",
    "free",
    "give",
    "run",
    "want",
    "try",
    "challenge",
    "anybody",
    "write",
    "functions",
    "find",
    "storage",
    "slots",
    "elements",
    "arrays",
    "mappings",
    "find",
    "data",
    "inside",
    "well",
    "use",
    "function",
    "called",
    "get",
    "storage",
    "app",
    "allows",
    "us",
    "get",
    "storage",
    "one",
    "slots",
    "reinforce",
    "even",
    "function",
    "private",
    "internal",
    "anybody",
    "still",
    "read",
    "anybody",
    "read",
    "anything",
    "blockchain",
    "test",
    "exactly",
    "go",
    "ahead",
    "get",
    "clone",
    "copy",
    "paste",
    "code",
    "run",
    "yarn",
    "part",
    "deploy",
    "dash",
    "test",
    "tags",
    "storage",
    "run",
    "deploy",
    "script",
    "storage",
    "see",
    "printing",
    "location",
    "storage",
    "storage",
    "slot",
    "fun",
    "contract",
    "made",
    "example",
    "might",
    "course",
    "asking",
    "okay",
    "patrick",
    "telling",
    "trying",
    "get",
    "gas",
    "price",
    "telling",
    "storage",
    "thing",
    "well",
    "reason",
    "telling",
    "storage",
    "thing",
    "anytime",
    "read",
    "write",
    "storage",
    "spend",
    "ton",
    "gas",
    "remember",
    "said",
    "compile",
    "code",
    "compile",
    "crazy",
    "weird",
    "bytecode",
    "well",
    "let",
    "show",
    "remix",
    "looks",
    "like",
    "go",
    "compliation",
    "details",
    "go",
    "bytecode",
    "see",
    "weird",
    "hex",
    "object",
    "zero",
    "blah",
    "blah",
    "blah",
    "also",
    "see",
    "things",
    "called",
    "op",
    "codes",
    "bytecode",
    "represents",
    "op",
    "codes",
    "one",
    "op",
    "codes",
    "represents",
    "small",
    "piece",
    "everything",
    "bytecode",
    "fact",
    "heart",
    "hat",
    "go",
    "artifacts",
    "build",
    "info",
    "see",
    "see",
    "op",
    "codes",
    "build",
    "info",
    "command",
    "f",
    "control",
    "f",
    "opcodes",
    "see",
    "op",
    "codes",
    "different",
    "contracts",
    "op",
    "codes",
    "represent",
    "machine",
    "code",
    "represent",
    "much",
    "computational",
    "work",
    "takes",
    "actually",
    "run",
    "code",
    "stuff",
    "code",
    "way",
    "gas",
    "actually",
    "calculated",
    "opcodes",
    "couple",
    "lists",
    "one",
    "going",
    "use",
    "evm",
    "opcodes",
    "link",
    "github",
    "repo",
    "associated",
    "lesson",
    "well",
    "scroll",
    "see",
    "exactly",
    "much",
    "costs",
    "one",
    "op",
    "codes",
    "example",
    "anytime",
    "add",
    "costs",
    "three",
    "gas",
    "anytime",
    "multiply",
    "five",
    "gas",
    "subtracting",
    "three",
    "gas",
    "op",
    "codes",
    "cost",
    "different",
    "amounts",
    "gas",
    "functions",
    "kind",
    "sample",
    "contract",
    "adding",
    "anytime",
    "add",
    "going",
    "cost",
    "three",
    "gas",
    "anytime",
    "save",
    "memory",
    "going",
    "cost",
    "gas",
    "opcodes",
    "op",
    "codes",
    "combined",
    "show",
    "us",
    "much",
    "gas",
    "actually",
    "use",
    "let",
    "look",
    "lot",
    "op",
    "codes",
    "much",
    "cost",
    "three",
    "510",
    "three",
    "three",
    "balance",
    "getting",
    "balance",
    "ton",
    "gas",
    "let",
    "keep",
    "going",
    "getting",
    "sides",
    "accounts",
    "code",
    "lot",
    "gas",
    "copying",
    "accounts",
    "code",
    "memory",
    "oh",
    "goodness",
    "save",
    "word",
    "storage",
    "costs",
    "ton",
    "gas",
    "gas",
    "load",
    "load",
    "word",
    "storage",
    "cost",
    "800",
    "gas",
    "two",
    "important",
    "opcodes",
    "load",
    "store",
    "stands",
    "storage",
    "load",
    "storage",
    "store",
    "anytime",
    "one",
    "op",
    "codes",
    "fires",
    "spending",
    "800",
    "know",
    "big",
    "asterisk",
    "change",
    "lot",
    "spending",
    "ton",
    "gas",
    "anytime",
    "work",
    "storage",
    "developers",
    "anytime",
    "work",
    "stuff",
    "storage",
    "want",
    "go",
    "boy",
    "cost",
    "lot",
    "gas",
    "best",
    "convention",
    "making",
    "sure",
    "know",
    "working",
    "stored",
    "variable",
    "spend",
    "lot",
    "gas",
    "append",
    "underscore",
    "right",
    "stands",
    "storage",
    "right",
    "saying",
    "address",
    "amount",
    "funded",
    "going",
    "storage",
    "variable",
    "wonders",
    "going",
    "storage",
    "variable",
    "owner",
    "going",
    "storage",
    "variable",
    "immutable",
    "best",
    "practice",
    "immutable",
    "variables",
    "prefixing",
    "underscore",
    "constant",
    "values",
    "also",
    "storage",
    "constant",
    "values",
    "want",
    "keep",
    "capslock",
    "like",
    "aggregator",
    "v3",
    "interface",
    "public",
    "price",
    "feed",
    "yep",
    "know",
    "going",
    "storage",
    "variable",
    "want",
    "append",
    "underscore",
    "going",
    "little",
    "bit",
    "refactor",
    "appended",
    "appropriately",
    "update",
    "everything",
    "instead",
    "owner",
    "going",
    "underscore",
    "owner",
    "developer",
    "read",
    "go",
    "ah",
    "going",
    "much",
    "cheaper",
    "regular",
    "variable",
    "okay",
    "great",
    "going",
    "work",
    "underscore",
    "owner",
    "modifier",
    "awesome",
    "owner",
    "anywhere",
    "else",
    "okay",
    "right",
    "constructor",
    "underscore",
    "owner",
    "message",
    "dot",
    "sender",
    "price",
    "feed",
    "storage",
    "variable",
    "developers",
    "see",
    "underscore",
    "reading",
    "go",
    "okay",
    "spending",
    "lot",
    "gas",
    "store",
    "perfect",
    "okay",
    "great",
    "let",
    "keep",
    "going",
    "great",
    "updated",
    "owners",
    "okay",
    "well",
    "address",
    "amount",
    "funded",
    "vs",
    "code",
    "command",
    "f",
    "ctrl",
    "f",
    "hit",
    "little",
    "arrow",
    "actually",
    "find",
    "replace",
    "address",
    "amount",
    "funded",
    "underscore",
    "address",
    "mt",
    "funded",
    "hit",
    "like",
    "since",
    "updated",
    "one",
    "got",
    "backspace",
    "one",
    "updated",
    "let",
    "thing",
    "funders",
    "let",
    "update",
    "everywhere",
    "funders",
    "funders",
    "probably",
    "doubled",
    "yep",
    "let",
    "undo",
    "already",
    "updated",
    "ai",
    "owners",
    "updated",
    "price",
    "feeds",
    "let",
    "look",
    "price",
    "feed",
    "update",
    "es",
    "price",
    "feed",
    "probably",
    "doubled",
    "right",
    "undo",
    "okay",
    "great",
    "updated",
    "everything",
    "scroll",
    "oops",
    "sorry",
    "doubled",
    "sorry",
    "green",
    "code",
    "go",
    "okay",
    "reading",
    "writing",
    "storage",
    "way",
    "often",
    "probably",
    "need",
    "get",
    "withdrawal",
    "function",
    "seems",
    "rather",
    "suspect",
    "reading",
    "writing",
    "storage",
    "lot",
    "let",
    "take",
    "look",
    "okay",
    "first",
    "see",
    "loop",
    "every",
    "time",
    "loop",
    "constantly",
    "looping",
    "code",
    "every",
    "single",
    "time",
    "little",
    "compare",
    "option",
    "saying",
    "okay",
    "funder",
    "index",
    "less",
    "funders",
    "dot",
    "length",
    "funders",
    "dot",
    "length",
    "means",
    "longer",
    "funders",
    "array",
    "times",
    "going",
    "reading",
    "storage",
    "incredibly",
    "expensive",
    "also",
    "recalling",
    "oh",
    "goodness",
    "reading",
    "storage",
    "lot",
    "saving",
    "memory",
    "variable",
    "updating",
    "storage",
    "variable",
    "wow",
    "reading",
    "storage",
    "ton",
    "reading",
    "storage",
    "ton",
    "okay",
    "reset",
    "funders",
    "array",
    "really",
    "way",
    "around",
    "pretty",
    "much",
    "reading",
    "writing",
    "storage",
    "could",
    "probably",
    "create",
    "withdrawal",
    "function",
    "lot",
    "cheaper",
    "let",
    "go",
    "ahead",
    "create",
    "function",
    "called",
    "cheaper",
    "withdraw",
    "function",
    "cheaper",
    "withdraw",
    "going",
    "take",
    "learned",
    "make",
    "cheaper",
    "withdraw",
    "much",
    "gas",
    "efficient",
    "keep",
    "public",
    "payable",
    "owner",
    "going",
    "change",
    "anything",
    "least",
    "part",
    "want",
    "keep",
    "reading",
    "storage",
    "want",
    "always",
    "keep",
    "reading",
    "storage",
    "like",
    "doubling",
    "amount",
    "storage",
    "reading",
    "instead",
    "read",
    "entire",
    "array",
    "memory",
    "one",
    "time",
    "read",
    "memory",
    "instead",
    "constantly",
    "reading",
    "storage",
    "going",
    "make",
    "lives",
    "lot",
    "cheaper",
    "create",
    "address",
    "array",
    "memory",
    "funders",
    "equals",
    "underscore",
    "funders",
    "going",
    "start",
    "making",
    "sense",
    "arrays",
    "strings",
    "functions",
    "makes",
    "us",
    "say",
    "hey",
    "memory",
    "storage",
    "telling",
    "want",
    "memory",
    "memory",
    "going",
    "lot",
    "cheaper",
    "saving",
    "funders",
    "oh",
    "quick",
    "note",
    "mappings",
    "ca",
    "memory",
    "sorry",
    "weird",
    "wacky",
    "flooding",
    "let",
    "right",
    "saved",
    "storage",
    "variable",
    "memory",
    "variable",
    "read",
    "write",
    "memory",
    "variable",
    "much",
    "much",
    "cheaper",
    "update",
    "storage",
    "done",
    "going",
    "gon",
    "na",
    "say",
    "v",
    "six",
    "fund",
    "index",
    "equals",
    "zero",
    "going",
    "basically",
    "rewrite",
    "everything",
    "using",
    "memory",
    "array",
    "instead",
    "gon",
    "na",
    "say",
    "funder",
    "index",
    "less",
    "funders",
    "dot",
    "length",
    "instead",
    "funders",
    "dot",
    "length",
    "gon",
    "na",
    "say",
    "funder",
    "index",
    "plus",
    "plus",
    "gon",
    "na",
    "nearly",
    "exactly",
    "thing",
    "except",
    "gon",
    "na",
    "say",
    "address",
    "funder",
    "equals",
    "funders",
    "using",
    "memory",
    "array",
    "funders",
    "funder",
    "index",
    "gon",
    "na",
    "say",
    "address",
    "amount",
    "funded",
    "funder",
    "equals",
    "zero",
    "resetting",
    "funders",
    "mapping",
    "using",
    "memory",
    "variables",
    "instead",
    "going",
    "thing",
    "underscore",
    "funders",
    "equals",
    "new",
    "address",
    "array",
    "zero",
    "gon",
    "na",
    "thing",
    "bool",
    "success",
    "comma",
    "equals",
    "owner",
    "dot",
    "call",
    "value",
    "address",
    "balance",
    "going",
    "send",
    "nothing",
    "require",
    "success",
    "like",
    "actually",
    "sorry",
    "iona",
    "sonar",
    "function",
    "think",
    "cheaper",
    "let",
    "go",
    "back",
    "test",
    "let",
    "run",
    "multi",
    "test",
    "cheaper",
    "function",
    "know",
    "little",
    "bit",
    "tricky",
    "copy",
    "paste",
    "let",
    "copy",
    "entire",
    "massive",
    "test",
    "let",
    "come",
    "paste",
    "change",
    "name",
    "saying",
    "cheaper",
    "withdraw",
    "testing",
    "dot",
    "done",
    "giant",
    "going",
    "change",
    "going",
    "change",
    "withdraw",
    "cheaper",
    "withdraw",
    "rest",
    "test",
    "going",
    "exactly",
    "let",
    "see",
    "successful",
    "making",
    "withdraw",
    "function",
    "cheaper",
    "cheaper",
    "withdraw",
    "gon",
    "na",
    "pull",
    "apart",
    "terminal",
    "yarn",
    "art",
    "hat",
    "test",
    "going",
    "run",
    "gas",
    "estimator",
    "enabled",
    "right",
    "course",
    "functions",
    "broken",
    "renamed",
    "everything",
    "quick",
    "final",
    "replace",
    "funders",
    "change",
    "funders",
    "ask",
    "funders",
    "gon",
    "na",
    "change",
    "price",
    "feed",
    "ask",
    "price",
    "feed",
    "owner",
    "anywhere",
    "owner",
    "anywhere",
    "need",
    "change",
    "one",
    "address",
    "amount",
    "funded",
    "let",
    "come",
    "address",
    "amount",
    "funded",
    "adderstone",
    "well",
    "funded",
    "else",
    "need",
    "change",
    "price",
    "price",
    "feed",
    "funders",
    "okay",
    "think",
    "changed",
    "everything",
    "alright",
    "let",
    "try",
    "test",
    "yarn",
    "hardhead",
    "test",
    "right",
    "great",
    "everything",
    "passing",
    "ran",
    "cheaper",
    "withdraw",
    "testing",
    "go",
    "gas",
    "output",
    "gas",
    "report",
    "zoom",
    "hair",
    "see",
    "difference",
    "cheaper",
    "withdraw",
    "withdraw",
    "see",
    "something",
    "really",
    "interesting",
    "see",
    "cheaper",
    "withdraw",
    "average",
    "actually",
    "expensive",
    "regular",
    "withdraw",
    "reason",
    "actually",
    "go",
    "tests",
    "cheaper",
    "withdrawal",
    "tested",
    "multi",
    "withdraw",
    "reset",
    "many",
    "many",
    "accounts",
    "also",
    "technically",
    "maximum",
    "well",
    "compare",
    "maximum",
    "cheaper",
    "withdrawal",
    "maximum",
    "withdraw",
    "looks",
    "like",
    "cheaper",
    "withdrawal",
    "indeed",
    "cheaper",
    "go",
    "hard",
    "hat",
    "dot",
    "config",
    "add",
    "api",
    "key",
    "back",
    "could",
    "even",
    "test",
    "could",
    "copy",
    "withdraw",
    "eath",
    "single",
    "funder",
    "copy",
    "paste",
    "change",
    "withdraw",
    "cheaper",
    "withdrawal",
    "rerun",
    "key",
    "yarn",
    "hardhead",
    "test",
    "see",
    "exactly",
    "many",
    "dollars",
    "would",
    "save",
    "ran",
    "matic",
    "blockchain",
    "let",
    "go",
    "back",
    "reopen",
    "gas",
    "report",
    "see",
    "minimum",
    "cheaper",
    "withdrawal",
    "actually",
    "little",
    "bit",
    "expensive",
    "actually",
    "make",
    "sense",
    "look",
    "funding",
    "withdraw",
    "one",
    "funder",
    "well",
    "loop",
    "runs",
    "one",
    "time",
    "cheaper",
    "withdraw",
    "exact",
    "extra",
    "thing",
    "loading",
    "see",
    "savings",
    "people",
    "funders",
    "contracts",
    "automatic",
    "see",
    "pretty",
    "much",
    "save",
    "anything",
    "change",
    "one",
    "time",
    "eath",
    "run",
    "test",
    "see",
    "people",
    "withdraw",
    "saved",
    "cents",
    "start",
    "optimizing",
    "contracts",
    "cheaper",
    "cheaper",
    "two",
    "cents",
    "average",
    "even",
    "comparing",
    "max",
    "max",
    "lot",
    "gas",
    "averages",
    "learned",
    "absolute",
    "ton",
    "next",
    "part",
    "going",
    "make",
    "mad",
    "going",
    "refactor",
    "code",
    "one",
    "time",
    "want",
    "refactor",
    "want",
    "leave",
    "tests",
    "underscores",
    "absolutely",
    "users",
    "using",
    "application",
    "dealing",
    "underscore",
    "little",
    "little",
    "bit",
    "gross",
    "actually",
    "make",
    "code",
    "little",
    "bit",
    "confusing",
    "use",
    "additionally",
    "right",
    "state",
    "variables",
    "public",
    "actually",
    "internal",
    "variables",
    "private",
    "variables",
    "also",
    "cheaper",
    "gas",
    "wise",
    "need",
    "make",
    "every",
    "single",
    "one",
    "variables",
    "public",
    "anybody",
    "read",
    "chain",
    "anyways",
    "one",
    "refactoring",
    "going",
    "actually",
    "going",
    "set",
    "visibility",
    "private",
    "internal",
    "based",
    "whether",
    "need",
    "private",
    "internal",
    "create",
    "getters",
    "bottom",
    "function",
    "minimum",
    "usd",
    "keep",
    "public",
    "want",
    "people",
    "know",
    "minimum",
    "usd",
    "contract",
    "without",
    "go",
    "right",
    "storage",
    "owner",
    "contract",
    "important",
    "others",
    "know",
    "contracts",
    "know",
    "go",
    "ahead",
    "make",
    "private",
    "bottom",
    "function",
    "get",
    "owner",
    "public",
    "view",
    "returns",
    "owner",
    "turns",
    "address",
    "funders",
    "funders",
    "private",
    "well",
    "bottom",
    "gon",
    "na",
    "say",
    "function",
    "get",
    "funder",
    "going",
    "pass",
    "un",
    "236",
    "index",
    "public",
    "u",
    "turns",
    "address",
    "return",
    "funders",
    "index",
    "address",
    "mt",
    "funded",
    "also",
    "private",
    "bottom",
    "going",
    "create",
    "function",
    "get",
    "address",
    "amount",
    "funded",
    "going",
    "take",
    "address",
    "public",
    "view",
    "returns",
    "went",
    "going",
    "return",
    "amount",
    "funded",
    "funder",
    "one",
    "one",
    "one",
    "price",
    "feed",
    "function",
    "get",
    "price",
    "feed",
    "going",
    "public",
    "view",
    "well",
    "returns",
    "aggregate",
    "tour",
    "three",
    "interface",
    "going",
    "return",
    "gon",
    "na",
    "price",
    "feed",
    "oh",
    "okay",
    "reason",
    "want",
    "underscore",
    "developers",
    "know",
    "okay",
    "storage",
    "variable",
    "want",
    "careful",
    "interact",
    "want",
    "people",
    "interact",
    "code",
    "deal",
    "stuff",
    "want",
    "give",
    "api",
    "makes",
    "sense",
    "easy",
    "readable",
    "add",
    "getter",
    "functions",
    "bottom",
    "also",
    "changing",
    "visibility",
    "save",
    "us",
    "gas",
    "long",
    "run",
    "well",
    "gon",
    "na",
    "calling",
    "private",
    "variables",
    "internal",
    "variables",
    "cheaper",
    "gas",
    "wise",
    "course",
    "need",
    "upgrade",
    "test",
    "one",
    "time",
    "like",
    "said",
    "want",
    "leave",
    "underscores",
    "absolutely",
    "fine",
    "underscore",
    "price",
    "feed",
    "going",
    "replaced",
    "get",
    "price",
    "feed",
    "underscore",
    "amount",
    "fund",
    "going",
    "replaced",
    "get",
    "address",
    "amount",
    "funded",
    "going",
    "change",
    "sw",
    "underscore",
    "funders",
    "get",
    "funder",
    "going",
    "change",
    "iona",
    "nowhere",
    "else",
    "mind",
    "need",
    "change",
    "think",
    "everything",
    "let",
    "look",
    "underscore",
    "see",
    "underscore",
    "see",
    "either",
    "let",
    "run",
    "tests",
    "one",
    "time",
    "make",
    "sure",
    "refactor",
    "correctly",
    "looks",
    "like",
    "awesome",
    "okay",
    "learned",
    "ton",
    "refactored",
    "code",
    "ton",
    "everything",
    "starting",
    "look",
    "really",
    "really",
    "good",
    "one",
    "gas",
    "optimization",
    "could",
    "make",
    "optimization",
    "errors",
    "well",
    "could",
    "update",
    "requires",
    "instead",
    "instead",
    "reverts",
    "without",
    "requires",
    "actually",
    "storing",
    "massive",
    "string",
    "massive",
    "array",
    "text",
    "chain",
    "error",
    "codes",
    "much",
    "cheaper",
    "optional",
    "want",
    "whole",
    "reason",
    "going",
    "style",
    "guide",
    "updating",
    "things",
    "public",
    "internal",
    "private",
    "bottom",
    "going",
    "view",
    "slash",
    "pure",
    "functions",
    "getters",
    "added",
    "style",
    "looks",
    "good",
    "learned",
    "lot",
    "gas",
    "learned",
    "lot",
    "storage",
    "fantastic",
    "let",
    "quick",
    "refresher",
    "everything",
    "learned",
    "went",
    "lot",
    "right",
    "like",
    "said",
    "one",
    "harder",
    "parts",
    "course",
    "variable",
    "changeable",
    "want",
    "persist",
    "across",
    "contract",
    "executions",
    "transactions",
    "save",
    "giant",
    "array",
    "called",
    "storage",
    "array",
    "sequentially",
    "indexed",
    "starting",
    "zero",
    "first",
    "variable",
    "first",
    "value",
    "contract",
    "gets",
    "stored",
    "zero",
    "index",
    "next",
    "one",
    "gets",
    "stored",
    "one",
    "forth",
    "dynamic",
    "arrays",
    "mappings",
    "dynamically",
    "sized",
    "objects",
    "use",
    "specific",
    "hashing",
    "function",
    "find",
    "documentation",
    "determine",
    "elements",
    "dynamic",
    "data",
    "structures",
    "go",
    "memory",
    "variables",
    "constant",
    "variables",
    "immutable",
    "variables",
    "go",
    "storage",
    "one",
    "main",
    "reasons",
    "talking",
    "storage",
    "important",
    "op",
    "codes",
    "loading",
    "storage",
    "reading",
    "storage",
    "writing",
    "storage",
    "incredibly",
    "gas",
    "expensive",
    "everywhere",
    "want",
    "reduce",
    "amount",
    "read",
    "load",
    "storage",
    "one",
    "easiest",
    "ways",
    "save",
    "gas",
    "try",
    "optimize",
    "code",
    "gas",
    "efficient",
    "like",
    "said",
    "gas",
    "stuff",
    "little",
    "tricky",
    "little",
    "bit",
    "confusing",
    "get",
    "right",
    "away",
    "okay",
    "totally",
    "fine",
    "little",
    "bit",
    "confused",
    "like",
    "talking",
    "like",
    "said",
    "advanced",
    "stuff",
    "come",
    "work",
    "solidity",
    "work",
    "everything",
    "let",
    "stress",
    "let",
    "stop",
    "continuing",
    "fantastic",
    "far",
    "written",
    "really",
    "good",
    "unit",
    "tests",
    "let",
    "write",
    "staging",
    "tests",
    "tests",
    "use",
    "actual",
    "test",
    "net",
    "test",
    "basically",
    "going",
    "run",
    "deployed",
    "code",
    "see",
    "everything",
    "working",
    "approximately",
    "way",
    "want",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "file",
    "call",
    "fund",
    "dot",
    "staging",
    "dot",
    "test",
    "dot",
    "j",
    "going",
    "look",
    "really",
    "similar",
    "unit",
    "tests",
    "going",
    "assume",
    "test",
    "net",
    "tests",
    "going",
    "run",
    "right",
    "deploy",
    "main",
    "net",
    "last",
    "step",
    "development",
    "journey",
    "want",
    "make",
    "sure",
    "everything",
    "working",
    "approximately",
    "correctly",
    "actual",
    "test",
    "net",
    "gon",
    "na",
    "gon",
    "na",
    "thing",
    "describe",
    "fund",
    "gon",
    "na",
    "go",
    "little",
    "quick",
    "tests",
    "basically",
    "written",
    "type",
    "test",
    "gon",
    "na",
    "say",
    "gon",
    "na",
    "async",
    "function",
    "gon",
    "na",
    "thing",
    "unit",
    "tests",
    "gon",
    "na",
    "funmi",
    "variable",
    "gon",
    "na",
    "let",
    "deployer",
    "gon",
    "na",
    "constant",
    "send",
    "value",
    "equals",
    "ether",
    "one",
    "going",
    "const",
    "get",
    "named",
    "accounts",
    "equals",
    "require",
    "hardhats",
    "going",
    "say",
    "deployer",
    "equals",
    "weight",
    "get",
    "named",
    "accounts",
    "going",
    "wrap",
    "dot",
    "deployer",
    "gon",
    "na",
    "say",
    "fun",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "comma",
    "going",
    "connect",
    "deployer",
    "going",
    "deploy",
    "going",
    "fixtures",
    "like",
    "unit",
    "tests",
    "staging",
    "tests",
    "assuming",
    "already",
    "deployed",
    "also",
    "need",
    "mock",
    "staging",
    "assuming",
    "test",
    "net",
    "actually",
    "wrap",
    "whole",
    "thing",
    "make",
    "sure",
    "test",
    "net",
    "using",
    "helper",
    "config",
    "looking",
    "development",
    "chains",
    "say",
    "want",
    "run",
    "describe",
    "bit",
    "development",
    "chain",
    "first",
    "say",
    "const",
    "development",
    "chains",
    "equals",
    "require",
    "pull",
    "helper",
    "config",
    "say",
    "development",
    "chains",
    "dot",
    "includes",
    "network",
    "dot",
    "name",
    "basically",
    "say",
    "developer",
    "chains",
    "includes",
    "network",
    "dot",
    "name",
    "going",
    "skip",
    "actually",
    "skip",
    "using",
    "going",
    "use",
    "something",
    "called",
    "ternary",
    "operator",
    "basically",
    "like",
    "one",
    "liner",
    "statement",
    "think",
    "special",
    "type",
    "got",
    "link",
    "github",
    "repo",
    "associated",
    "course",
    "javascript",
    "documentation",
    "showing",
    "action",
    "say",
    "okay",
    "return",
    "member",
    "true",
    "2",
    "otherwise",
    "b",
    "10",
    "pretty",
    "much",
    "another",
    "way",
    "thinking",
    "like",
    "say",
    "let",
    "variable",
    "equals",
    "true",
    "could",
    "say",
    "let",
    "var",
    "equals",
    "variable",
    "question",
    "yes",
    "var",
    "end",
    "yes",
    "variable",
    "true",
    "variable",
    "false",
    "var",
    "would",
    "literally",
    "saying",
    "variable",
    "variable",
    "var",
    "equals",
    "yes",
    "else",
    "var",
    "equals",
    "lines",
    "literally",
    "exact",
    "thing",
    "one",
    "little",
    "bit",
    "succinct",
    "really",
    "operator",
    "gon",
    "na",
    "say",
    "development",
    "chains",
    "includes",
    "network",
    "dot",
    "name",
    "network",
    "development",
    "chain",
    "going",
    "import",
    "network",
    "well",
    "hard",
    "hat",
    "ethers",
    "well",
    "going",
    "describe",
    "skipped",
    "tells",
    "test",
    "skip",
    "whole",
    "describe",
    "going",
    "put",
    "little",
    "colon",
    "thing",
    "save",
    "boom",
    "going",
    "run",
    "development",
    "chain",
    "want",
    "take",
    "exact",
    "syntax",
    "go",
    "unit",
    "testing",
    "exact",
    "thing",
    "paste",
    "opposite",
    "putting",
    "little",
    "knot",
    "sticking",
    "colon",
    "unit",
    "tests",
    "run",
    "development",
    "chains",
    "staging",
    "tests",
    "run",
    "test",
    "nets",
    "perfect",
    "want",
    "allows",
    "people",
    "fund",
    "withdraw",
    "async",
    "function",
    "course",
    "probably",
    "make",
    "pretty",
    "robust",
    "say",
    "await",
    "fund",
    "dot",
    "fund",
    "going",
    "send",
    "value",
    "say",
    "weight",
    "dot",
    "withdraw",
    "cert",
    "equals",
    "require",
    "try",
    "kind",
    "lame",
    "final",
    "one",
    "say",
    "const",
    "ending",
    "balance",
    "equals",
    "weight",
    "dot",
    "provider",
    "dot",
    "get",
    "balance",
    "fund",
    "dot",
    "address",
    "say",
    "assert",
    "dot",
    "equals",
    "ending",
    "string",
    "comma",
    "zero",
    "string",
    "going",
    "run",
    "test",
    "net",
    "going",
    "give",
    "one",
    "run",
    "show",
    "action",
    "feel",
    "free",
    "skip",
    "part",
    "going",
    "working",
    "test",
    "net",
    "going",
    "run",
    "yarn",
    "hard",
    "hat",
    "deploy",
    "dash",
    "test",
    "network",
    "rinkeby",
    "going",
    "run",
    "deploy",
    "deployed",
    "going",
    "run",
    "staging",
    "tests",
    "make",
    "sure",
    "everything",
    "works",
    "even",
    "price",
    "feed",
    "real",
    "test",
    "net",
    "need",
    "const",
    "development",
    "chains",
    "equals",
    "require",
    "dot",
    "dot",
    "slash",
    "dot",
    "dot",
    "slash",
    "helper",
    "heart",
    "config",
    "run",
    "yarn",
    "hard",
    "hat",
    "test",
    "see",
    "unit",
    "tests",
    "get",
    "run",
    "run",
    "yarn",
    "hard",
    "test",
    "dash",
    "dash",
    "network",
    "rinkeby",
    "going",
    "run",
    "nine",
    "tests",
    "going",
    "run",
    "singular",
    "staging",
    "test",
    "course",
    "going",
    "lot",
    "slower",
    "test",
    "net",
    "net",
    "write",
    "written",
    "tests",
    "write",
    "couple",
    "scripts",
    "going",
    "finish",
    "pushing",
    "github",
    "making",
    "first",
    "smart",
    "contract",
    "github",
    "repository",
    "comes",
    "blockchain",
    "comes",
    "smart",
    "contracts",
    "interacting",
    "community",
    "interacting",
    "open",
    "source",
    "part",
    "github",
    "git",
    "labs",
    "whatever",
    "git",
    "hosting",
    "service",
    "using",
    "essential",
    "successful",
    "let",
    "write",
    "scripts",
    "upload",
    "github",
    "start",
    "building",
    "portfolio",
    "first",
    "going",
    "create",
    "script",
    "interact",
    "code",
    "called",
    "fund",
    "dot",
    "j",
    "going",
    "really",
    "similar",
    "tests",
    "way",
    "future",
    "want",
    "fund",
    "one",
    "contracts",
    "quickly",
    "run",
    "gon",
    "na",
    "thing",
    "gon",
    "na",
    "async",
    "function",
    "main",
    "going",
    "copy",
    "paste",
    "going",
    "copy",
    "pasting",
    "lot",
    "going",
    "paste",
    "little",
    "syntax",
    "let",
    "write",
    "script",
    "allows",
    "us",
    "fund",
    "contracts",
    "first",
    "going",
    "need",
    "const",
    "get",
    "named",
    "accounts",
    "like",
    "tests",
    "equals",
    "require",
    "arhat",
    "gon",
    "na",
    "say",
    "const",
    "deployer",
    "equals",
    "await",
    "yet",
    "named",
    "accounts",
    "like",
    "gon",
    "na",
    "say",
    "const",
    "fund",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "funding",
    "comm",
    "deployer",
    "literally",
    "almost",
    "exactly",
    "tests",
    "little",
    "console",
    "dot",
    "log",
    "funding",
    "contract",
    "const",
    "transaction",
    "response",
    "equals",
    "await",
    "funding",
    "dot",
    "fund",
    "value",
    "something",
    "like",
    "ethers",
    "dot",
    "utils",
    "parse",
    "ether",
    "something",
    "whatever",
    "want",
    "course",
    "need",
    "import",
    "ethers",
    "looks",
    "like",
    "already",
    "await",
    "transaction",
    "response",
    "dot",
    "wait",
    "one",
    "transaction",
    "console",
    "dot",
    "log",
    "funded",
    "run",
    "little",
    "script",
    "running",
    "yarn",
    "rt",
    "head",
    "node",
    "run",
    "local",
    "node",
    "contracts",
    "deployed",
    "see",
    "script",
    "looks",
    "okay",
    "running",
    "yarn",
    "hard",
    "hat",
    "run",
    "scripts",
    "fund",
    "dot",
    "j",
    "dash",
    "dash",
    "network",
    "localhost",
    "looks",
    "like",
    "funding",
    "great",
    "let",
    "write",
    "withdraw",
    "script",
    "withdraw",
    "j",
    "even",
    "leave",
    "localhost",
    "node",
    "running",
    "going",
    "withdraw",
    "funds",
    "funded",
    "going",
    "exact",
    "setup",
    "even",
    "copy",
    "main",
    "bit",
    "withdraw",
    "ah",
    "top",
    "async",
    "function",
    "main",
    "say",
    "const",
    "deployer",
    "equals",
    "await",
    "get",
    "named",
    "accounts",
    "wow",
    "hit",
    "enter",
    "vs",
    "code",
    "auto",
    "imported",
    "pretty",
    "nice",
    "maybe",
    "maybe",
    "wo",
    "wo",
    "got",
    "ta",
    "write",
    "copy",
    "paste",
    "one",
    "cars",
    "funmi",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "course",
    "going",
    "exact",
    "going",
    "console",
    "dot",
    "log",
    "funding",
    "data",
    "dot",
    "say",
    "const",
    "transaction",
    "response",
    "equals",
    "await",
    "v",
    "dot",
    "withdraw",
    "await",
    "transaction",
    "response",
    "dot",
    "wait",
    "one",
    "console",
    "dot",
    "log",
    "got",
    "back",
    "test",
    "running",
    "yarn",
    "hard",
    "hit",
    "run",
    "scripts",
    "withdraw",
    "dash",
    "dash",
    "network",
    "localhost",
    "see",
    "works",
    "cool",
    "script",
    "working",
    "fantastic",
    "crushed",
    "two",
    "scripts",
    "incredibly",
    "quickly",
    "way",
    "easily",
    "interact",
    "code",
    "contracts",
    "want",
    "via",
    "script",
    "actually",
    "one",
    "thing",
    "want",
    "show",
    "actually",
    "work",
    "push",
    "wonderful",
    "code",
    "github",
    "package",
    "dot",
    "json",
    "shown",
    "little",
    "bit",
    "add",
    "scripts",
    "section",
    "make",
    "lives",
    "lot",
    "easier",
    "condense",
    "long",
    "tests",
    "yarn",
    "script",
    "us",
    "usually",
    "see",
    "common",
    "package",
    "dot",
    "json",
    "see",
    "list",
    "people",
    "look",
    "automatically",
    "run",
    "one",
    "common",
    "ones",
    "going",
    "test",
    "run",
    "test",
    "going",
    "yarn",
    "hard",
    "hat",
    "test",
    "instead",
    "running",
    "yarn",
    "hardhead",
    "test",
    "someone",
    "come",
    "package",
    "saved",
    "run",
    "yarn",
    "test",
    "grab",
    "test",
    "script",
    "section",
    "run",
    "yarn",
    "heart",
    "test",
    "bada",
    "bing",
    "bada",
    "boom",
    "okay",
    "cool",
    "else",
    "probably",
    "probably",
    "want",
    "well",
    "probably",
    "want",
    "test",
    "staging",
    "section",
    "run",
    "yarn",
    "hardhead",
    "test",
    "dash",
    "dash",
    "network",
    "rinkeby",
    "going",
    "run",
    "probably",
    "something",
    "want",
    "probably",
    "going",
    "want",
    "linting",
    "showed",
    "briefly",
    "linting",
    "thing",
    "yarn",
    "lint",
    "run",
    "yarn",
    "sole",
    "hint",
    "hence",
    "contracts",
    "folder",
    "anything",
    "starts",
    "soul",
    "run",
    "yarn",
    "lint",
    "run",
    "soul",
    "hint",
    "code",
    "give",
    "us",
    "warnings",
    "pretty",
    "much",
    "ignore",
    "solon",
    "actually",
    "auto",
    "fix",
    "auto",
    "fix",
    "add",
    "yarn",
    "lint",
    "fix",
    "say",
    "yarn",
    "hint",
    "contracts",
    "slash",
    "start",
    "dash",
    "dash",
    "fix",
    "run",
    "yarn",
    "lint",
    "fix",
    "auto",
    "fix",
    "nothing",
    "auto",
    "fix",
    "nothing",
    "happens",
    "good",
    "anyways",
    "formatter",
    "going",
    "format",
    "code",
    "format",
    "yarn",
    "prettier",
    "dash",
    "dash",
    "write",
    "period",
    "everything",
    "yarn",
    "format",
    "gon",
    "na",
    "fix",
    "going",
    "fix",
    "everything",
    "us",
    "great",
    "finally",
    "coverage",
    "running",
    "yarn",
    "hardhat",
    "coverage",
    "run",
    "yarn",
    "coverage",
    "give",
    "us",
    "wonderful",
    "little",
    "coverage",
    "report",
    "awesome",
    "packages",
    "looking",
    "fantastic",
    "maybe",
    "even",
    "come",
    "package",
    "json",
    "give",
    "name",
    "call",
    "hard",
    "hat",
    "give",
    "author",
    "going",
    "name",
    "gon",
    "na",
    "say",
    "patrick",
    "collins",
    "give",
    "version",
    "point",
    "oh",
    "oops",
    "let",
    "icons",
    "instead",
    "spaces",
    "oh",
    "one",
    "thing",
    "using",
    "es",
    "lint",
    "es",
    "lint",
    "stuff",
    "dump",
    "could",
    "delete",
    "yarn",
    "dot",
    "lock",
    "reinstall",
    "yeah",
    "whatever",
    "readme",
    "okay",
    "want",
    "go",
    "back",
    "like",
    "said",
    "go",
    "check",
    "best",
    "readme",
    "template",
    "go",
    "update",
    "readmes",
    "make",
    "look",
    "awesome",
    "well",
    "got",
    "awesome",
    "code",
    "repo",
    "want",
    "well",
    "playing",
    "around",
    "github",
    "much",
    "looking",
    "good",
    "hubs",
    "time",
    "us",
    "join",
    "github",
    "first",
    "repository",
    "let",
    "go",
    "ahead",
    "let",
    "make",
    "happen",
    "lesson",
    "seven",
    "full",
    "blockchain",
    "solidity",
    "course",
    "yes",
    "link",
    "github",
    "quickstart",
    "going",
    "follow",
    "set",
    "first",
    "repository",
    "going",
    "moment",
    "starting",
    "build",
    "portfolio",
    "building",
    "github",
    "borderline",
    "crucial",
    "development",
    "journey",
    "going",
    "portal",
    "folio",
    "going",
    "say",
    "hey",
    "look",
    "cool",
    "products",
    "engaging",
    "working",
    "participating",
    "already",
    "made",
    "github",
    "highly",
    "recommend",
    "still",
    "push",
    "github",
    "proof",
    "done",
    "also",
    "tweet",
    "saying",
    "hey",
    "look",
    "far",
    "gotten",
    "look",
    "done",
    "look",
    "fantastic",
    "learning",
    "smart",
    "contracts",
    "incredibly",
    "excited",
    "quickstart",
    "walk",
    "creating",
    "repository",
    "creating",
    "branch",
    "teaching",
    "stuff",
    "going",
    "follow",
    "instructions",
    "github",
    "documentation",
    "adding",
    "locally",
    "hosted",
    "code",
    "github",
    "already",
    "project",
    "pushing",
    "since",
    "windows",
    "users",
    "using",
    "wsl",
    "follow",
    "mac",
    "linux",
    "instructions",
    "first",
    "thing",
    "going",
    "github",
    "profile",
    "github",
    "login",
    "gon",
    "na",
    "hit",
    "little",
    "plus",
    "thing",
    "hit",
    "new",
    "repository",
    "call",
    "whatever",
    "want",
    "let",
    "call",
    "hard",
    "hat",
    "fund",
    "b",
    "code",
    "camp",
    "put",
    "description",
    "want",
    "learning",
    "recode",
    "camp",
    "patrick",
    "smart",
    "contracts",
    "make",
    "public",
    "want",
    "people",
    "see",
    "fantastic",
    "learning",
    "smart",
    "contracts",
    "leave",
    "blank",
    "hit",
    "create",
    "repository",
    "public",
    "code",
    "repository",
    "first",
    "one",
    "done",
    "already",
    "first",
    "smart",
    "contract",
    "one",
    "even",
    "instructions",
    "teaches",
    "us",
    "create",
    "new",
    "repository",
    "command",
    "line",
    "follow",
    "want",
    "follow",
    "like",
    "first",
    "thing",
    "going",
    "going",
    "initialize",
    "git",
    "branch",
    "way",
    "back",
    "already",
    "git",
    "installed",
    "remember",
    "check",
    "running",
    "git",
    "dash",
    "dash",
    "version",
    "like",
    "git",
    "little",
    "different",
    "github",
    "git",
    "known",
    "version",
    "control",
    "allows",
    "us",
    "make",
    "changes",
    "code",
    "keep",
    "history",
    "code",
    "changes",
    "made",
    "github",
    "place",
    "push",
    "changes",
    "keep",
    "track",
    "code",
    "first",
    "thing",
    "going",
    "going",
    "create",
    "new",
    "branch",
    "going",
    "explain",
    "git",
    "working",
    "git",
    "deeply",
    "want",
    "learn",
    "git",
    "free",
    "code",
    "camp",
    "course",
    "video",
    "git",
    "github",
    "beginners",
    "going",
    "create",
    "new",
    "branch",
    "git",
    "init",
    "dash",
    "b",
    "main",
    "visual",
    "studio",
    "code",
    "might",
    "automatically",
    "start",
    "formatting",
    "stuff",
    "great",
    "worry",
    "see",
    "left",
    "see",
    "stuff",
    "green",
    "stuff",
    "gray",
    "open",
    "back",
    "dot",
    "git",
    "ignore",
    "see",
    "gray",
    "stuff",
    "stuff",
    "dot",
    "git",
    "ignore",
    "intentional",
    "want",
    "highlighting",
    "saying",
    "hey",
    "green",
    "stuff",
    "working",
    "github",
    "gray",
    "stuff",
    "working",
    "github",
    "want",
    "need",
    "push",
    "artifacts",
    "cash",
    "coverage",
    "node",
    "modules",
    "people",
    "install",
    "compile",
    "machines",
    "definitely",
    "want",
    "push",
    "dotty",
    "v",
    "using",
    "dotty",
    "really",
    "need",
    "push",
    "coverage",
    "dot",
    "json",
    "either",
    "rest",
    "next",
    "initialize",
    "main",
    "branch",
    "able",
    "run",
    "git",
    "status",
    "terminal",
    "see",
    "huge",
    "red",
    "output",
    "things",
    "untracked",
    "commits",
    "stage",
    "code",
    "git",
    "add",
    "period",
    "commit",
    "git",
    "commit",
    "going",
    "run",
    "one",
    "time",
    "instead",
    "together",
    "run",
    "git",
    "add",
    "going",
    "add",
    "deployments",
    "list",
    "github",
    "really",
    "need",
    "know",
    "different",
    "deployments",
    "make",
    "especially",
    "make",
    "ton",
    "deployments",
    "local",
    "hosts",
    "need",
    "know",
    "going",
    "add",
    "going",
    "run",
    "git",
    "add",
    "dot",
    "git",
    "status",
    "see",
    "code",
    "staged",
    "committed",
    "part",
    "history",
    "code",
    "take",
    "quick",
    "look",
    "files",
    "make",
    "sure",
    "dot",
    "e",
    "v",
    "file",
    "never",
    "going",
    "run",
    "git",
    "commit",
    "dash",
    "message",
    "commit",
    "okay",
    "run",
    "git",
    "commit",
    "dash",
    "say",
    "initial",
    "commit",
    "whatever",
    "want",
    "message",
    "first",
    "commit",
    "initial",
    "commit",
    "cares",
    "gon",
    "na",
    "say",
    "create",
    "mode",
    "blah",
    "blah",
    "blah",
    "files",
    "git",
    "status",
    "blank",
    "branch",
    "main",
    "nothing",
    "commit",
    "might",
    "get",
    "something",
    "like",
    "never",
    "worked",
    "git",
    "name",
    "email",
    "added",
    "automatically",
    "little",
    "bit",
    "confused",
    "talk",
    "second",
    "next",
    "actually",
    "going",
    "copy",
    "url",
    "github",
    "repo",
    "grab",
    "copying",
    "right",
    "top",
    "url",
    "right",
    "going",
    "going",
    "add",
    "remote",
    "repo",
    "git",
    "remote",
    "add",
    "give",
    "remote",
    "repo",
    "name",
    "us",
    "say",
    "origin",
    "paste",
    "url",
    "saying",
    "origin",
    "remote",
    "repo",
    "good",
    "gon",
    "na",
    "url",
    "run",
    "git",
    "remote",
    "dash",
    "v",
    "see",
    "origin",
    "repo",
    "fetching",
    "branch",
    "origin",
    "repo",
    "pushing",
    "also",
    "branch",
    "want",
    "get",
    "new",
    "code",
    "fetch",
    "code",
    "fetch",
    "want",
    "push",
    "code",
    "want",
    "give",
    "code",
    "github",
    "also",
    "get",
    "set",
    "new",
    "remote",
    "remote",
    "url",
    "going",
    "actually",
    "push",
    "changes",
    "way",
    "git",
    "push",
    "pick",
    "remote",
    "want",
    "push",
    "going",
    "push",
    "origin",
    "branch",
    "want",
    "push",
    "going",
    "push",
    "maine",
    "probably",
    "prompt",
    "username",
    "password",
    "maybe",
    "email",
    "everything",
    "authentication",
    "work",
    "reason",
    "come",
    "settings",
    "scroll",
    "developer",
    "settings",
    "personal",
    "access",
    "tokens",
    "create",
    "generate",
    "new",
    "token",
    "token",
    "give",
    "repo",
    "access",
    "write",
    "access",
    "hit",
    "generate",
    "token",
    "try",
    "use",
    "token",
    "password",
    "instead",
    "sure",
    "use",
    "github",
    "documentation",
    "github",
    "discussion",
    "associated",
    "course",
    "get",
    "lost",
    "something",
    "work",
    "shown",
    "done",
    "add",
    "information",
    "correctly",
    "come",
    "back",
    "get",
    "first",
    "github",
    "repo",
    "code",
    "everything",
    "like",
    "complete",
    "step",
    "absolutely",
    "celebrate",
    "like",
    "shoot",
    "tweet",
    "web",
    "three",
    "community",
    "blockchain",
    "community",
    "absolutely",
    "collaborative",
    "space",
    "twitter",
    "crypto",
    "lot",
    "people",
    "congregate",
    "share",
    "ideas",
    "definitely",
    "sure",
    "celebrate",
    "share",
    "really",
    "really",
    "excited",
    "shoot",
    "tweet",
    "like",
    "give",
    "friends",
    "high",
    "five",
    "share",
    "twitter",
    "share",
    "discord",
    "shared",
    "reddit",
    "excited",
    "far",
    "gotten",
    "got",
    "lot",
    "go",
    "completing",
    "part",
    "done",
    "fantastically",
    "excited",
    "start",
    "next",
    "section",
    "going",
    "go",
    "typescript",
    "addition",
    "nothing",
    "really",
    "new",
    "however",
    "want",
    "see",
    "typescript",
    "feel",
    "free",
    "jump",
    "github",
    "repository",
    "associated",
    "course",
    "alright",
    "awesome",
    "completed",
    "lesson",
    "seven",
    "heart",
    "fun",
    "time",
    "move",
    "lesson",
    "eight",
    "going",
    "html",
    "slash",
    "javascript",
    "fund",
    "find",
    "code",
    "go",
    "course",
    "github",
    "repo",
    "section",
    "going",
    "start",
    "see",
    "differences",
    "node",
    "js",
    "back",
    "end",
    "javascript",
    "javascript",
    "browser",
    "front",
    "end",
    "javascript",
    "come",
    "github",
    "repo",
    "associated",
    "lesson",
    "main",
    "version",
    "using",
    "considered",
    "better",
    "front",
    "end",
    "javascript",
    "also",
    "js",
    "addition",
    "well",
    "front",
    "end",
    "javascript",
    "really",
    "confusing",
    "see",
    "mean",
    "differences",
    "soon",
    "people",
    "programmatically",
    "interact",
    "smart",
    "contracts",
    "time",
    "however",
    "users",
    "compete",
    "developers",
    "need",
    "create",
    "website",
    "need",
    "create",
    "user",
    "interface",
    "interact",
    "smart",
    "contracts",
    "interact",
    "protocols",
    "section",
    "going",
    "teach",
    "us",
    "going",
    "introduction",
    "building",
    "fullstack",
    "building",
    "front",
    "ends",
    "top",
    "smart",
    "contracts",
    "wanted",
    "show",
    "actually",
    "going",
    "look",
    "like",
    "finish",
    "actually",
    "going",
    "make",
    "first",
    "front",
    "end",
    "first",
    "website",
    "using",
    "blockchain",
    "using",
    "web",
    "three",
    "going",
    "incredibly",
    "minimalistic",
    "website",
    "see",
    "right",
    "going",
    "styling",
    "going",
    "show",
    "get",
    "functionality",
    "additionally",
    "going",
    "couple",
    "things",
    "really",
    "recommended",
    "definitely",
    "best",
    "practices",
    "reason",
    "going",
    "like",
    "reason",
    "math",
    "class",
    "learn",
    "tricks",
    "derivatives",
    "learn",
    "derivative",
    "actually",
    "teaching",
    "like",
    "first",
    "understand",
    "going",
    "websites",
    "interact",
    "work",
    "saw",
    "already",
    "foston",
    "touching",
    "link",
    "connect",
    "wallets",
    "work",
    "faucets",
    "decentralized",
    "applications",
    "website",
    "setup",
    "connect",
    "wallet",
    "interact",
    "clicking",
    "buttons",
    "make",
    "function",
    "calls",
    "blockchain",
    "going",
    "minimalistic",
    "website",
    "exactly",
    "section",
    "going",
    "teach",
    "going",
    "hood",
    "really",
    "understand",
    "build",
    "applications",
    "professional",
    "level",
    "section",
    "want",
    "code",
    "along",
    "definitely",
    "however",
    "coding",
    "along",
    "definitely",
    "ingrain",
    "everything",
    "memory",
    "application",
    "going",
    "look",
    "like",
    "website",
    "connected",
    "hard",
    "hat",
    "local",
    "blockchain",
    "gon",
    "na",
    "run",
    "exactly",
    "real",
    "test",
    "net",
    "first",
    "thing",
    "notice",
    "meta",
    "mask",
    "connected",
    "go",
    "ahead",
    "hit",
    "connect",
    "meta",
    "masks",
    "pop",
    "asking",
    "us",
    "want",
    "connect",
    "go",
    "ahead",
    "connect",
    "able",
    "interact",
    "heart",
    "funmi",
    "notice",
    "two",
    "buttons",
    "functions",
    "familiar",
    "withdrawal",
    "function",
    "going",
    "withdrawal",
    "function",
    "created",
    "course",
    "also",
    "fund",
    "function",
    "push",
    "send",
    "aetherium",
    "matic",
    "whatever",
    "native",
    "blockchain",
    "token",
    "smart",
    "contract",
    "user",
    "interface",
    "connected",
    "want",
    "see",
    "balance",
    "actually",
    "right",
    "click",
    "hit",
    "inspect",
    "come",
    "console",
    "print",
    "javascript",
    "console",
    "current",
    "balance",
    "smart",
    "contract",
    "nobody",
    "funded",
    "yet",
    "come",
    "choose",
    "amount",
    "want",
    "fund",
    "example",
    "maybe",
    "eath",
    "go",
    "ahead",
    "hit",
    "fund",
    "meta",
    "masks",
    "pop",
    "get",
    "little",
    "council",
    "saying",
    "funding",
    "give",
    "us",
    "transaction",
    "details",
    "need",
    "send",
    "eath",
    "smart",
    "contract",
    "go",
    "ahead",
    "hit",
    "confirm",
    "confirmed",
    "mined",
    "local",
    "blockchain",
    "get",
    "balance",
    "see",
    "could",
    "call",
    "fund",
    "could",
    "multiple",
    "funders",
    "could",
    "switch",
    "different",
    "accounts",
    "fund",
    "different",
    "amounts",
    "see",
    "funding",
    "amount",
    "increase",
    "call",
    "withdrawal",
    "function",
    "long",
    "owner",
    "confirm",
    "pull",
    "money",
    "funding",
    "contract",
    "get",
    "balance",
    "see",
    "balance",
    "reset",
    "zero",
    "going",
    "building",
    "ready",
    "sure",
    "let",
    "get",
    "introduction",
    "building",
    "websites",
    "web",
    "three",
    "information",
    "available",
    "github",
    "repo",
    "feel",
    "free",
    "follow",
    "along",
    "alright",
    "heart",
    "head",
    "funmi",
    "dash",
    "free",
    "code",
    "camp",
    "repo",
    "still",
    "going",
    "want",
    "open",
    "well",
    "also",
    "going",
    "want",
    "create",
    "new",
    "visual",
    "studio",
    "code",
    "working",
    "new",
    "repo",
    "let",
    "go",
    "ahead",
    "cd",
    "directory",
    "type",
    "mk",
    "dir",
    "call",
    "html",
    "fund",
    "free",
    "code",
    "camp",
    "cd",
    "open",
    "typing",
    "code",
    "period",
    "also",
    "file",
    "open",
    "folder",
    "want",
    "open",
    "new",
    "visual",
    "studio",
    "code",
    "new",
    "vs",
    "code",
    "pop",
    "flip",
    "want",
    "cd",
    "cd",
    "back",
    "hard",
    "hat",
    "fun",
    "free",
    "code",
    "camp",
    "still",
    "going",
    "use",
    "everything",
    "still",
    "going",
    "deploy",
    "smart",
    "contract",
    "using",
    "folder",
    "using",
    "repo",
    "building",
    "daps",
    "websites",
    "connected",
    "blockchain",
    "usually",
    "two",
    "repositories",
    "repos",
    "one",
    "going",
    "smart",
    "contracts",
    "like",
    "see",
    "repo",
    "code",
    "smart",
    "contracts",
    "also",
    "one",
    "front",
    "end",
    "slash",
    "website",
    "going",
    "combination",
    "two",
    "repos",
    "makes",
    "full",
    "stack",
    "people",
    "talking",
    "full",
    "stack",
    "talking",
    "smart",
    "contracts",
    "going",
    "back",
    "end",
    "plus",
    "plus",
    "html",
    "slash",
    "javascript",
    "slash",
    "website",
    "stuff",
    "going",
    "front",
    "end",
    "smart",
    "contracts",
    "back",
    "end",
    "html",
    "slash",
    "javascript",
    "slash",
    "website",
    "stuff",
    "going",
    "front",
    "end",
    "back",
    "end",
    "already",
    "going",
    "build",
    "front",
    "end",
    "want",
    "keep",
    "going",
    "need",
    "test",
    "interact",
    "front",
    "end",
    "awesome",
    "new",
    "folder",
    "html",
    "funmi",
    "free",
    "code",
    "camp",
    "course",
    "learn",
    "front",
    "end",
    "course",
    "going",
    "teach",
    "number",
    "front",
    "end",
    "concepts",
    "want",
    "learn",
    "full",
    "traditional",
    "front",
    "end",
    "course",
    "check",
    "free",
    "code",
    "camp",
    "got",
    "ton",
    "fantastic",
    "tutorials",
    "teaching",
    "front",
    "end",
    "go",
    "ahead",
    "follow",
    "along",
    "though",
    "definitely",
    "get",
    "basic",
    "understanding",
    "front",
    "end",
    "well",
    "front",
    "ends",
    "relates",
    "smart",
    "contracts",
    "additionally",
    "front",
    "end",
    "parts",
    "full",
    "stack",
    "parts",
    "want",
    "take",
    "course",
    "learn",
    "back",
    "end",
    "learn",
    "javascript",
    "learn",
    "solidity",
    "learn",
    "smart",
    "contracts",
    "programmatically",
    "absolutely",
    "skip",
    "front",
    "end",
    "parts",
    "however",
    "want",
    "learn",
    "build",
    "exciting",
    "websites",
    "want",
    "people",
    "developers",
    "interact",
    "protocols",
    "definitely",
    "want",
    "watch",
    "part",
    "actually",
    "jump",
    "start",
    "writing",
    "code",
    "need",
    "understand",
    "exactly",
    "going",
    "work",
    "one",
    "websites",
    "use",
    "blockchain",
    "actually",
    "made",
    "video",
    "recently",
    "let",
    "watch",
    "segment",
    "really",
    "quick",
    "get",
    "speed",
    "exactly",
    "going",
    "behind",
    "scenes",
    "websites",
    "interact",
    "blockchain",
    "right",
    "website",
    "front",
    "end",
    "top",
    "smart",
    "contracts",
    "deployed",
    "really",
    "matter",
    "right",
    "typically",
    "interface",
    "see",
    "boiled",
    "really",
    "really",
    "minimalistic",
    "level",
    "typically",
    "see",
    "something",
    "like",
    "connect",
    "function",
    "right",
    "metamask",
    "wallet",
    "connector",
    "thing",
    "pop",
    "hit",
    "next",
    "connect",
    "might",
    "even",
    "say",
    "something",
    "like",
    "connected",
    "also",
    "execute",
    "functions",
    "interact",
    "smart",
    "contracts",
    "confirm",
    "etc",
    "right",
    "something",
    "might",
    "see",
    "something",
    "like",
    "avi",
    "right",
    "hit",
    "connect",
    "application",
    "say",
    "hey",
    "would",
    "like",
    "connect",
    "choose",
    "metamask",
    "going",
    "change",
    "metamask",
    "main",
    "net",
    "get",
    "picture",
    "right",
    "simple",
    "example",
    "would",
    "look",
    "like",
    "actually",
    "going",
    "browser",
    "connect",
    "actually",
    "going",
    "actually",
    "need",
    "going",
    "right",
    "click",
    "hit",
    "inspect",
    "right",
    "side",
    "gon",
    "na",
    "see",
    "debugger",
    "go",
    "sources",
    "top",
    "browser",
    "see",
    "things",
    "look",
    "right",
    "see",
    "url",
    "right",
    "right",
    "going",
    "localhost",
    "also",
    "see",
    "meta",
    "mask",
    "phantom",
    "whole",
    "bunch",
    "stuff",
    "things",
    "see",
    "going",
    "injected",
    "browser",
    "extensions",
    "reason",
    "see",
    "meta",
    "mask",
    "thing",
    "meta",
    "mask",
    "installed",
    "right",
    "reason",
    "see",
    "phantom",
    "phantom",
    "app",
    "installed",
    "meta",
    "masks",
    "course",
    "evm",
    "wallet",
    "phantom",
    "solana",
    "based",
    "wallet",
    "happens",
    "extensions",
    "installed",
    "automatically",
    "get",
    "injected",
    "window",
    "object",
    "javascript",
    "fact",
    "scroll",
    "console",
    "find",
    "console",
    "click",
    "click",
    "anything",
    "type",
    "window",
    "see",
    "big",
    "window",
    "object",
    "stuff",
    "right",
    "window",
    "object",
    "represents",
    "window",
    "basically",
    "right",
    "scroll",
    "way",
    "bottom",
    "window",
    "dot",
    "aetherium",
    "also",
    "see",
    "object",
    "window",
    "dot",
    "aetherium",
    "object",
    "exists",
    "meta",
    "mask",
    "meta",
    "mask",
    "like",
    "browser",
    "want",
    "look",
    "web",
    "three",
    "wallet",
    "window",
    "dot",
    "solana",
    "alana",
    "right",
    "see",
    "window",
    "dot",
    "solana",
    "let",
    "look",
    "browser",
    "metamask",
    "phantom",
    "installed",
    "think",
    "going",
    "happen",
    "window",
    "let",
    "go",
    "ahead",
    "right",
    "click",
    "hit",
    "inspect",
    "go",
    "console",
    "let",
    "see",
    "going",
    "go",
    "sources",
    "first",
    "see",
    "metamask",
    "solana",
    "source",
    "go",
    "console",
    "still",
    "see",
    "window",
    "let",
    "zoom",
    "little",
    "bit",
    "still",
    "see",
    "window",
    "window",
    "dot",
    "aetherium",
    "get",
    "nothing",
    "window",
    "dot",
    "solana",
    "also",
    "get",
    "nothing",
    "order",
    "browsers",
    "know",
    "metamask",
    "phantom",
    "extensions",
    "automatically",
    "add",
    "window",
    "objects",
    "something",
    "check",
    "javascript",
    "reason",
    "wallets",
    "important",
    "built",
    "underneath",
    "hood",
    "blockchain",
    "node",
    "connected",
    "order",
    "interact",
    "blockchain",
    "always",
    "need",
    "note",
    "might",
    "seen",
    "urls",
    "alchemy",
    "fira",
    "need",
    "interact",
    "blockchain",
    "alchemy",
    "infura",
    "examples",
    "third",
    "party",
    "blockchains",
    "interact",
    "basically",
    "rent",
    "right",
    "need",
    "create",
    "provider",
    "node",
    "send",
    "transactions",
    "could",
    "javascript",
    "like",
    "something",
    "like",
    "alchemy",
    "documentation",
    "take",
    "alchemy",
    "url",
    "stick",
    "object",
    "use",
    "send",
    "transaction",
    "way",
    "could",
    "back",
    "end",
    "front",
    "end",
    "normally",
    "want",
    "use",
    "want",
    "use",
    "user",
    "metamask",
    "solana",
    "wallet",
    "main",
    "wallet",
    "ton",
    "different",
    "types",
    "wallets",
    "connect",
    "like",
    "ledger",
    "mu",
    "coinbase",
    "wallet",
    "connect",
    "etc",
    "different",
    "ways",
    "set",
    "thing",
    "expose",
    "url",
    "expose",
    "node",
    "hood",
    "give",
    "us",
    "url",
    "give",
    "us",
    "provider",
    "way",
    "metamath",
    "window",
    "dot",
    "aetherium",
    "boom",
    "url",
    "connection",
    "fact",
    "go",
    "metamask",
    "hit",
    "little",
    "three",
    "dots",
    "expand",
    "view",
    "hit",
    "add",
    "network",
    "hit",
    "x",
    "get",
    "networks",
    "see",
    "blockchains",
    "rpc",
    "url",
    "http",
    "rpc",
    "url",
    "connection",
    "blockchain",
    "running",
    "happen",
    "one",
    "running",
    "locally",
    "right",
    "also",
    "node",
    "rpc",
    "url",
    "actually",
    "see",
    "right",
    "meta",
    "mask",
    "right",
    "connected",
    "fira",
    "connected",
    "fira",
    "exact",
    "thing",
    "meta",
    "mask",
    "really",
    "nice",
    "way",
    "taking",
    "url",
    "sticking",
    "browser",
    "us",
    "window",
    "dot",
    "aetherium",
    "window",
    "dot",
    "solana",
    "know",
    "whatever",
    "main",
    "thing",
    "need",
    "know",
    "need",
    "always",
    "need",
    "connection",
    "blockchain",
    "browser",
    "wallets",
    "easy",
    "way",
    "make",
    "sense",
    "great",
    "let",
    "take",
    "knowledge",
    "let",
    "apply",
    "let",
    "make",
    "quick",
    "talk",
    "going",
    "making",
    "section",
    "gon",
    "na",
    "using",
    "raw",
    "html",
    "slash",
    "javascript",
    "conjunction",
    "smart",
    "contracts",
    "build",
    "website",
    "later",
    "use",
    "next",
    "jas",
    "slash",
    "react",
    "modern",
    "stack",
    "build",
    "websites",
    "learning",
    "understanding",
    "everything",
    "html",
    "javascript",
    "first",
    "going",
    "make",
    "lives",
    "lot",
    "easier",
    "come",
    "later",
    "road",
    "know",
    "websites",
    "use",
    "html",
    "kind",
    "scaffolding",
    "look",
    "like",
    "let",
    "go",
    "ahead",
    "create",
    "html",
    "website",
    "call",
    "index",
    "dot",
    "html",
    "going",
    "basic",
    "scaffolding",
    "basic",
    "bones",
    "website",
    "going",
    "look",
    "like",
    "vs",
    "code",
    "go",
    "ahead",
    "type",
    "exclamation",
    "mark",
    "index",
    "dot",
    "html",
    "click",
    "first",
    "thing",
    "pops",
    "automatically",
    "populate",
    "code",
    "file",
    "basic",
    "html",
    "setup",
    "feel",
    "free",
    "copy",
    "paste",
    "basic",
    "setup",
    "github",
    "repository",
    "associated",
    "course",
    "doctype",
    "html",
    "html",
    "tags",
    "telling",
    "us",
    "everything",
    "going",
    "html",
    "great",
    "however",
    "simplicity",
    "need",
    "going",
    "make",
    "little",
    "bit",
    "easier",
    "going",
    "delete",
    "line",
    "line",
    "line",
    "going",
    "change",
    "title",
    "fund",
    "app",
    "inside",
    "body",
    "something",
    "like",
    "hello",
    "bare",
    "bones",
    "create",
    "website",
    "show",
    "website",
    "one",
    "two",
    "things",
    "using",
    "visual",
    "studio",
    "code",
    "going",
    "recommend",
    "install",
    "extension",
    "live",
    "server",
    "looks",
    "like",
    "extension",
    "id",
    "extension",
    "github",
    "repository",
    "associated",
    "course",
    "going",
    "allow",
    "us",
    "easily",
    "spin",
    "html",
    "website",
    "go",
    "ahead",
    "install",
    "using",
    "visual",
    "studio",
    "code",
    "show",
    "different",
    "way",
    "second",
    "installed",
    "little",
    "go",
    "live",
    "button",
    "bottom",
    "always",
    "open",
    "command",
    "palette",
    "open",
    "hitting",
    "view",
    "command",
    "palette",
    "type",
    "live",
    "server",
    "say",
    "open",
    "live",
    "server",
    "going",
    "click",
    "go",
    "live",
    "button",
    "going",
    "say",
    "starting",
    "actually",
    "going",
    "open",
    "browser",
    "index",
    "dot",
    "html",
    "actually",
    "see",
    "website",
    "called",
    "save",
    "120",
    "point",
    "known",
    "loopback",
    "local",
    "host",
    "endpoint",
    "port",
    "familiar",
    "ports",
    "worry",
    "index",
    "dot",
    "html",
    "change",
    "something",
    "like",
    "good",
    "hit",
    "save",
    "automatically",
    "refresh",
    "come",
    "refresh",
    "see",
    "reflected",
    "never",
    "created",
    "website",
    "essentially",
    "done",
    "congratulations",
    "might",
    "get",
    "code",
    "folder",
    "code",
    "folder",
    "allows",
    "make",
    "settings",
    "specifically",
    "repo",
    "working",
    "code",
    "editor",
    "vs",
    "code",
    "going",
    "mostly",
    "ignore",
    "using",
    "visual",
    "studio",
    "code",
    "run",
    "browser",
    "one",
    "thing",
    "could",
    "could",
    "right",
    "click",
    "using",
    "mac",
    "going",
    "hit",
    "reveal",
    "finder",
    "aka",
    "reveal",
    "located",
    "double",
    "click",
    "boom",
    "running",
    "right",
    "browser",
    "instead",
    "pointing",
    "localhost",
    "going",
    "pointing",
    "directly",
    "local",
    "file",
    "path",
    "one",
    "final",
    "version",
    "could",
    "going",
    "highly",
    "recommend",
    "another",
    "option",
    "actually",
    "going",
    "download",
    "package",
    "using",
    "jas",
    "allows",
    "us",
    "serve",
    "http",
    "gon",
    "na",
    "install",
    "exact",
    "way",
    "installed",
    "packages",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "http",
    "hyphen",
    "server",
    "may",
    "still",
    "want",
    "add",
    "anyways",
    "get",
    "node",
    "modules",
    "http",
    "server",
    "package",
    "get",
    "package",
    "json",
    "course",
    "yarn",
    "dot",
    "lock",
    "well",
    "stop",
    "stop",
    "live",
    "server",
    "go",
    "back",
    "website",
    "refresh",
    "blank",
    "run",
    "yarn",
    "http",
    "server",
    "exact",
    "thing",
    "get",
    "come",
    "refresh",
    "see",
    "good",
    "one",
    "little",
    "bit",
    "finicky",
    "make",
    "change",
    "like",
    "hey",
    "good",
    "might",
    "close",
    "reopen",
    "refresh",
    "recommend",
    "visual",
    "studio",
    "code",
    "definitely",
    "use",
    "little",
    "go",
    "live",
    "button",
    "reflect",
    "changes",
    "lot",
    "nicer",
    "let",
    "go",
    "ahead",
    "hit",
    "go",
    "live",
    "button",
    "hey",
    "good",
    "pops",
    "okay",
    "cool",
    "html",
    "working",
    "perfectly",
    "title",
    "course",
    "going",
    "funmi",
    "app",
    "see",
    "title",
    "section",
    "let",
    "update",
    "html",
    "buttons",
    "actually",
    "connect",
    "work",
    "blockchain",
    "work",
    "blockchain",
    "something",
    "else",
    "html",
    "actually",
    "write",
    "javascript",
    "inside",
    "html",
    "way",
    "script",
    "tag",
    "closing",
    "script",
    "tag",
    "anything",
    "inside",
    "inside",
    "script",
    "tags",
    "going",
    "javascript",
    "could",
    "something",
    "like",
    "console",
    "dot",
    "log",
    "hi",
    "bunch",
    "exclamation",
    "marks",
    "going",
    "save",
    "go",
    "back",
    "front",
    "end",
    "going",
    "right",
    "click",
    "hit",
    "inspect",
    "go",
    "console",
    "see",
    "hi",
    "prints",
    "refresh",
    "see",
    "hi",
    "consistently",
    "printed",
    "hi",
    "script",
    "tag",
    "save",
    "move",
    "back",
    "see",
    "hi",
    "script",
    "tag",
    "printed",
    "know",
    "little",
    "bit",
    "small",
    "let",
    "zoom",
    "alright",
    "great",
    "type",
    "javascript",
    "inside",
    "script",
    "tag",
    "going",
    "write",
    "javascript",
    "write",
    "functions",
    "front",
    "end",
    "going",
    "interact",
    "saw",
    "little",
    "console",
    "check",
    "window",
    "dot",
    "etherium",
    "see",
    "metamask",
    "installed",
    "lot",
    "working",
    "actually",
    "right",
    "metamask",
    "documentation",
    "go",
    "basic",
    "section",
    "talk",
    "little",
    "bit",
    "provider",
    "window",
    "dot",
    "aetherium",
    "read",
    "actually",
    "interact",
    "directly",
    "meta",
    "mask",
    "meta",
    "mask",
    "documentation",
    "well",
    "using",
    "window",
    "dot",
    "aetherium",
    "one",
    "ways",
    "actually",
    "going",
    "connect",
    "blockchain",
    "actually",
    "multiple",
    "ways",
    "multiple",
    "different",
    "kinds",
    "wallets",
    "going",
    "pretend",
    "window",
    "dot",
    "aetherium",
    "meta",
    "mask",
    "extension",
    "want",
    "want",
    "check",
    "see",
    "wind",
    "aetherium",
    "exists",
    "first",
    "thing",
    "exist",
    "means",
    "ca",
    "connect",
    "blockchain",
    "one",
    "first",
    "things",
    "going",
    "want",
    "going",
    "want",
    "check",
    "see",
    "exists",
    "something",
    "like",
    "say",
    "type",
    "window",
    "aetherium",
    "equal",
    "undefined",
    "console",
    "dot",
    "log",
    "see",
    "meta",
    "mask",
    "save",
    "come",
    "back",
    "front",
    "end",
    "see",
    "see",
    "metamask",
    "got",
    "google",
    "chrome",
    "without",
    "metamask",
    "look",
    "console",
    "hit",
    "refresh",
    "url",
    "live",
    "server",
    "running",
    "see",
    "see",
    "meta",
    "mask",
    "see",
    "meta",
    "mask",
    "else",
    "console",
    "dot",
    "log",
    "metamask",
    "refresh",
    "still",
    "see",
    "icd",
    "meta",
    "mask",
    "meta",
    "mask",
    "open",
    "browser",
    "without",
    "one",
    "see",
    "meta",
    "mask",
    "chrome",
    "see",
    "meta",
    "mask",
    "could",
    "automatically",
    "try",
    "connect",
    "meta",
    "mask",
    "see",
    "meta",
    "mask",
    "right",
    "remember",
    "hit",
    "connect",
    "button",
    "meta",
    "mask",
    "popped",
    "said",
    "sure",
    "want",
    "connect",
    "find",
    "meta",
    "mask",
    "docs",
    "run",
    "eath",
    "request",
    "accounts",
    "method",
    "basically",
    "going",
    "connect",
    "metamask",
    "specified",
    "new",
    "eip",
    "older",
    "documentations",
    "older",
    "tutorials",
    "might",
    "see",
    "aetherium",
    "dot",
    "enable",
    "essentially",
    "exact",
    "thing",
    "could",
    "could",
    "say",
    "cerium",
    "excuse",
    "window",
    "dot",
    "aetherium",
    "dot",
    "request",
    "could",
    "put",
    "method",
    "f",
    "request",
    "accounts",
    "save",
    "go",
    "back",
    "browser",
    "actually",
    "see",
    "actually",
    "see",
    "metamask",
    "go",
    "ahead",
    "pop",
    "say",
    "let",
    "connect",
    "choose",
    "account",
    "hit",
    "connect",
    "automatically",
    "connect",
    "meta",
    "mask",
    "website",
    "look",
    "meta",
    "mask",
    "see",
    "little",
    "connected",
    "thing",
    "saying",
    "account",
    "one",
    "connected",
    "website",
    "means",
    "website",
    "make",
    "api",
    "calls",
    "meta",
    "mask",
    "still",
    "ones",
    "approve",
    "go",
    "ahead",
    "connect",
    "try",
    "run",
    "transactions",
    "awesome",
    "want",
    "want",
    "disconnect",
    "go",
    "ahead",
    "click",
    "little",
    "button",
    "hit",
    "disconnect",
    "account",
    "well",
    "code",
    "currently",
    "anytime",
    "hit",
    "refresh",
    "going",
    "pop",
    "going",
    "really",
    "annoying",
    "going",
    "instead",
    "going",
    "wrap",
    "asynchronous",
    "function",
    "exact",
    "create",
    "async",
    "function",
    "called",
    "connect",
    "wrap",
    "curly",
    "braces",
    "format",
    "little",
    "bit",
    "make",
    "look",
    "nicer",
    "save",
    "go",
    "back",
    "website",
    "refresh",
    "go",
    "ahead",
    "disconnect",
    "refresh",
    "metamask",
    "wo",
    "keep",
    "asking",
    "us",
    "hey",
    "want",
    "connect",
    "hey",
    "want",
    "connect",
    "want",
    "connect",
    "need",
    "call",
    "connect",
    "function",
    "add",
    "little",
    "button",
    "right",
    "underneath",
    "script",
    "tag",
    "going",
    "add",
    "button",
    "tag",
    "opening",
    "button",
    "tag",
    "closing",
    "button",
    "tag",
    "inside",
    "opening",
    "button",
    "tag",
    "declaration",
    "give",
    "id",
    "connect",
    "button",
    "say",
    "click",
    "equals",
    "connect",
    "connects",
    "function",
    "call",
    "button",
    "connect",
    "little",
    "button",
    "tags",
    "call",
    "connect",
    "say",
    "click",
    "call",
    "connect",
    "function",
    "save",
    "go",
    "back",
    "front",
    "end",
    "see",
    "little",
    "connect",
    "button",
    "press",
    "connect",
    "metamask",
    "going",
    "pop",
    "hit",
    "next",
    "connect",
    "like",
    "boom",
    "connected",
    "even",
    "little",
    "await",
    "wait",
    "finish",
    "moving",
    "connect",
    "say",
    "console",
    "dot",
    "log",
    "connected",
    "let",
    "actually",
    "go",
    "ahead",
    "test",
    "go",
    "back",
    "metamask",
    "disconnect",
    "try",
    "never",
    "main",
    "net",
    "let",
    "go",
    "ahead",
    "run",
    "connect",
    "hit",
    "next",
    "connect",
    "see",
    "little",
    "console",
    "dot",
    "log",
    "come",
    "saying",
    "connected",
    "okay",
    "great",
    "also",
    "update",
    "website",
    "accordingly",
    "let",
    "users",
    "know",
    "connected",
    "grab",
    "connect",
    "button",
    "element",
    "id",
    "say",
    "connected",
    "connected",
    "await",
    "connected",
    "go",
    "ahead",
    "document",
    "dot",
    "get",
    "element",
    "id",
    "connect",
    "button",
    "say",
    "dot",
    "inner",
    "html",
    "equals",
    "connected",
    "like",
    "instead",
    "saying",
    "minimize",
    "opposite",
    "copy",
    "line",
    "instead",
    "connected",
    "say",
    "please",
    "install",
    "meta",
    "mask",
    "save",
    "go",
    "back",
    "front",
    "end",
    "hit",
    "connect",
    "already",
    "connected",
    "automatically",
    "go",
    "connected",
    "connected",
    "pop",
    "get",
    "connected",
    "button",
    "says",
    "connected",
    "great",
    "already",
    "know",
    "connected",
    "connected",
    "metamask",
    "front",
    "end",
    "want",
    "actually",
    "go",
    "ahead",
    "functions",
    "want",
    "create",
    "functions",
    "buttons",
    "going",
    "use",
    "ethers",
    "package",
    "become",
    "familiar",
    "code",
    "script",
    "section",
    "going",
    "get",
    "bigger",
    "bigger",
    "bigger",
    "oftentimes",
    "actually",
    "want",
    "put",
    "code",
    "javascript",
    "file",
    "gon",
    "na",
    "go",
    "ahead",
    "come",
    "going",
    "create",
    "new",
    "file",
    "call",
    "index",
    "dot",
    "j",
    "instead",
    "putting",
    "javascript",
    "script",
    "tags",
    "going",
    "put",
    "index",
    "import",
    "index",
    "file",
    "html",
    "way",
    "going",
    "actually",
    "going",
    "grab",
    "function",
    "going",
    "copy",
    "delete",
    "everything",
    "going",
    "paste",
    "end",
    "ext",
    "dot",
    "j",
    "index",
    "dot",
    "html",
    "going",
    "tell",
    "script",
    "tag",
    "use",
    "going",
    "say",
    "source",
    "going",
    "equal",
    "dot",
    "slash",
    "index",
    "dot",
    "j",
    "going",
    "say",
    "type",
    "going",
    "text",
    "slash",
    "javascript",
    "save",
    "save",
    "index",
    "dot",
    "html",
    "come",
    "back",
    "front",
    "end",
    "little",
    "refresh",
    "make",
    "sure",
    "go",
    "ahead",
    "disconnect",
    "another",
    "refresh",
    "see",
    "even",
    "different",
    "file",
    "src",
    "equals",
    "importing",
    "html",
    "hit",
    "connect",
    "still",
    "calls",
    "connect",
    "function",
    "kind",
    "separate",
    "javascript",
    "js",
    "file",
    "little",
    "bit",
    "familiar",
    "look",
    "github",
    "repo",
    "associated",
    "course",
    "look",
    "index",
    "dot",
    "j",
    "see",
    "connect",
    "function",
    "added",
    "quality",
    "life",
    "stuff",
    "added",
    "try",
    "catches",
    "make",
    "handling",
    "errors",
    "little",
    "bit",
    "better",
    "go",
    "ahead",
    "add",
    "try",
    "catches",
    "like",
    "going",
    "demo",
    "video",
    "want",
    "create",
    "fun",
    "function",
    "later",
    "going",
    "create",
    "withdrawal",
    "function",
    "front",
    "end",
    "javascript",
    "code",
    "gs",
    "little",
    "bit",
    "different",
    "js",
    "using",
    "require",
    "keyword",
    "import",
    "dependencies",
    "front",
    "end",
    "javascript",
    "ca",
    "use",
    "require",
    "wo",
    "exactly",
    "work",
    "later",
    "going",
    "use",
    "import",
    "keyword",
    "really",
    "better",
    "way",
    "first",
    "differences",
    "going",
    "using",
    "import",
    "keyword",
    "front",
    "end",
    "much",
    "better",
    "require",
    "keyword",
    "especially",
    "since",
    "require",
    "keyword",
    "actually",
    "work",
    "might",
    "struggle",
    "disconnect",
    "change",
    "github",
    "repo",
    "associated",
    "node",
    "js",
    "edition",
    "use",
    "require",
    "keyword",
    "go",
    "readme",
    "download",
    "packages",
    "run",
    "scripts",
    "basically",
    "transform",
    "code",
    "uses",
    "require",
    "code",
    "works",
    "imports",
    "going",
    "teach",
    "way",
    "work",
    "front",
    "end",
    "code",
    "using",
    "imports",
    "see",
    "get",
    "next",
    "jas",
    "still",
    "download",
    "code",
    "node",
    "modules",
    "using",
    "yarn",
    "lock",
    "package",
    "json",
    "etc",
    "summary",
    "future",
    "seconds",
    "still",
    "going",
    "yarn",
    "add",
    "outside",
    "framework",
    "using",
    "raw",
    "javascript",
    "raw",
    "html",
    "setup",
    "like",
    "working",
    "going",
    "yarn",
    "add",
    "node",
    "modules",
    "add",
    "node",
    "modules",
    "framework",
    "like",
    "next",
    "react",
    "raw",
    "javascript",
    "using",
    "different",
    "syntax",
    "show",
    "soon",
    "let",
    "go",
    "ahead",
    "start",
    "building",
    "fund",
    "function",
    "make",
    "fun",
    "functions",
    "would",
    "normally",
    "well",
    "create",
    "async",
    "function",
    "called",
    "fund",
    "function",
    "probably",
    "would",
    "want",
    "take",
    "ether",
    "mount",
    "parameter",
    "going",
    "want",
    "fund",
    "amount",
    "aetherium",
    "call",
    "function",
    "might",
    "want",
    "run",
    "console",
    "dot",
    "log",
    "little",
    "string",
    "interpolation",
    "funding",
    "eth",
    "amount",
    "dot",
    "dot",
    "dot",
    "semicolons",
    "going",
    "drive",
    "absolutely",
    "insane",
    "going",
    "add",
    "dot",
    "prettier",
    "dot",
    "rc",
    "file",
    "going",
    "go",
    "ahead",
    "add",
    "prettier",
    "otherwise",
    "going",
    "lose",
    "mind",
    "gon",
    "na",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "prettier",
    "format",
    "javascript",
    "prettier",
    "come",
    "back",
    "gon",
    "na",
    "hit",
    "command",
    "looks",
    "like",
    "indeed",
    "auto",
    "format",
    "prettier",
    "yay",
    "matter",
    "semicolons",
    "call",
    "fun",
    "function",
    "way",
    "call",
    "connect",
    "index",
    "dot",
    "html",
    "maybe",
    "create",
    "new",
    "button",
    "button",
    "give",
    "id",
    "fund",
    "say",
    "click",
    "equals",
    "fund",
    "say",
    "fund",
    "button",
    "save",
    "looking",
    "front",
    "end",
    "fund",
    "button",
    "call",
    "say",
    "funding",
    "undefined",
    "passing",
    "amount",
    "back",
    "index",
    "console",
    "dot",
    "log",
    "funding",
    "want",
    "make",
    "sure",
    "actually",
    "call",
    "funmi",
    "function",
    "copy",
    "line",
    "say",
    "type",
    "window",
    "dot",
    "aetherium",
    "equal",
    "undefined",
    "go",
    "ahead",
    "try",
    "fund",
    "send",
    "transaction",
    "things",
    "absolutely",
    "100",
    "always",
    "need",
    "well",
    "need",
    "provider",
    "slash",
    "connection",
    "blockchain",
    "need",
    "signer",
    "slash",
    "wallet",
    "slash",
    "someone",
    "gas",
    "actually",
    "send",
    "probably",
    "going",
    "need",
    "contract",
    "interacting",
    "get",
    "contract",
    "going",
    "need",
    "abi",
    "address",
    "together",
    "send",
    "transaction",
    "get",
    "provider",
    "going",
    "actually",
    "go",
    "ahead",
    "work",
    "ethers",
    "going",
    "little",
    "bit",
    "differently",
    "though",
    "way",
    "worked",
    "ethers",
    "said",
    "const",
    "ethers",
    "equals",
    "require",
    "ethers",
    "right",
    "pulled",
    "ethers",
    "like",
    "said",
    "though",
    "require",
    "work",
    "front",
    "end",
    "actually",
    "want",
    "install",
    "ethers",
    "node",
    "modules",
    "package",
    "actually",
    "instead",
    "let",
    "go",
    "ethers",
    "documentation",
    "go",
    "getting",
    "started",
    "section",
    "scroll",
    "section",
    "importing",
    "using",
    "node",
    "js",
    "uses",
    "require",
    "imports",
    "also",
    "documentation",
    "working",
    "web",
    "browser",
    "instead",
    "us",
    "node",
    "module",
    "copy",
    "ethers",
    "library",
    "directories",
    "serve",
    "come",
    "copy",
    "massive",
    "file",
    "ethers",
    "front",
    "end",
    "addition",
    "come",
    "back",
    "file",
    "make",
    "new",
    "file",
    "called",
    "ethers",
    "point",
    "paste",
    "massive",
    "thing",
    "since",
    "prettier",
    "save",
    "going",
    "auto",
    "format",
    "huge",
    "file",
    "everything",
    "ethers",
    "front",
    "end",
    "defied",
    "import",
    "instead",
    "using",
    "require",
    "say",
    "import",
    "ethers",
    "refer",
    "file",
    "got",
    "ethers",
    "dash",
    "point",
    "need",
    "weird",
    "copy",
    "pasting",
    "file",
    "import",
    "thing",
    "html",
    "javascript",
    "lesson",
    "future",
    "lessons",
    "node",
    "js",
    "going",
    "yarn",
    "add",
    "ethers",
    "kinda",
    "like",
    "normally",
    "seen",
    "frameworks",
    "like",
    "react",
    "next",
    "jas",
    "going",
    "use",
    "going",
    "automatically",
    "convert",
    "yarn",
    "added",
    "packages",
    "front",
    "end",
    "five",
    "versions",
    "section",
    "going",
    "actually",
    "import",
    "ethers",
    "package",
    "thing",
    "front",
    "end",
    "change",
    "type",
    "text",
    "slash",
    "javascript",
    "type",
    "module",
    "changes",
    "type",
    "module",
    "allows",
    "us",
    "import",
    "modules",
    "code",
    "going",
    "importing",
    "going",
    "import",
    "another",
    "module",
    "well",
    "awesome",
    "though",
    "go",
    "back",
    "front",
    "end",
    "little",
    "refresh",
    "connect",
    "button",
    "get",
    "connect",
    "defined",
    "html",
    "click",
    "instead",
    "calling",
    "connect",
    "button",
    "front",
    "end",
    "going",
    "remove",
    "clicks",
    "index",
    "dot",
    "html",
    "go",
    "add",
    "connect",
    "buttons",
    "say",
    "const",
    "connect",
    "button",
    "equals",
    "document",
    "dot",
    "get",
    "element",
    "id",
    "connect",
    "button",
    "say",
    "const",
    "one",
    "button",
    "equals",
    "doc",
    "meant",
    "dot",
    "get",
    "element",
    "id",
    "one",
    "button",
    "idea",
    "connect",
    "button",
    "connect",
    "button",
    "idea",
    "fun",
    "button",
    "fun",
    "button",
    "say",
    "connect",
    "click",
    "equals",
    "connect",
    "one",
    "click",
    "equals",
    "fond",
    "go",
    "back",
    "front",
    "end",
    "little",
    "refresh",
    "hit",
    "connect",
    "actually",
    "working",
    "go",
    "metamask",
    "disconnect",
    "refresh",
    "hit",
    "connect",
    "boom",
    "popping",
    "due",
    "type",
    "module",
    "text",
    "slash",
    "javascript",
    "click",
    "button",
    "adding",
    "since",
    "module",
    "going",
    "add",
    "clicks",
    "right",
    "javascript",
    "got",
    "ethers",
    "even",
    "like",
    "little",
    "console",
    "dot",
    "log",
    "paste",
    "ethers",
    "actually",
    "better",
    "yet",
    "add",
    "right",
    "connect",
    "button",
    "go",
    "back",
    "front",
    "end",
    "refresh",
    "see",
    "entire",
    "ethers",
    "object",
    "right",
    "front",
    "end",
    "perfect",
    "exactly",
    "want",
    "since",
    "got",
    "two",
    "variables",
    "might",
    "well",
    "update",
    "say",
    "connect",
    "button",
    "dot",
    "innerhtml",
    "equals",
    "connected",
    "well",
    "connects",
    "button",
    "dot",
    "innerhtml",
    "equals",
    "please",
    "install",
    "meta",
    "mask",
    "connect",
    "button",
    "going",
    "running",
    "document",
    "dot",
    "get",
    "element",
    "id",
    "right",
    "great",
    "let",
    "go",
    "back",
    "continuing",
    "font",
    "function",
    "say",
    "const",
    "provider",
    "equals",
    "new",
    "ethers",
    "dot",
    "providers",
    "dot",
    "web",
    "three",
    "provider",
    "window",
    "dot",
    "aetherium",
    "web",
    "three",
    "provider",
    "object",
    "ethers",
    "allows",
    "us",
    "basically",
    "wrap",
    "around",
    "stuff",
    "like",
    "metamask",
    "web",
    "three",
    "provider",
    "really",
    "similar",
    "json",
    "rpc",
    "provider",
    "use",
    "put",
    "exactly",
    "endpoint",
    "alchemy",
    "endpoint",
    "working",
    "metamask",
    "whatever",
    "endpoint",
    "network",
    "section",
    "web",
    "three",
    "provider",
    "takes",
    "http",
    "endpoint",
    "automatically",
    "sticks",
    "ethers",
    "us",
    "line",
    "code",
    "basically",
    "looks",
    "metamask",
    "goes",
    "ah",
    "okay",
    "found",
    "http",
    "endpoint",
    "inside",
    "metamask",
    "going",
    "going",
    "use",
    "provider",
    "since",
    "provider",
    "connected",
    "metamask",
    "get",
    "signer",
    "get",
    "wallet",
    "running",
    "const",
    "signer",
    "equals",
    "provider",
    "dot",
    "get",
    "signer",
    "going",
    "return",
    "whichever",
    "wallet",
    "connected",
    "provider",
    "provider",
    "metamask",
    "connected",
    "account",
    "one",
    "going",
    "return",
    "account",
    "one",
    "signer",
    "connected",
    "account",
    "two",
    "return",
    "account",
    "two",
    "etc",
    "going",
    "add",
    "console",
    "dot",
    "log",
    "signer",
    "flip",
    "front",
    "end",
    "show",
    "happens",
    "hit",
    "fund",
    "button",
    "see",
    "json",
    "rpc",
    "signer",
    "signer",
    "going",
    "account",
    "connected",
    "front",
    "end",
    "provider",
    "signer",
    "going",
    "need",
    "contract",
    "getting",
    "api",
    "address",
    "gon",
    "na",
    "need",
    "say",
    "const",
    "contract",
    "equals",
    "going",
    "get",
    "contract",
    "well",
    "going",
    "need",
    "know",
    "abi",
    "address",
    "working",
    "typically",
    "see",
    "lot",
    "projects",
    "since",
    "contract",
    "deployed",
    "addresses",
    "going",
    "change",
    "going",
    "type",
    "constants",
    "file",
    "create",
    "new",
    "file",
    "called",
    "constants",
    "dot",
    "j",
    "add",
    "addresses",
    "api",
    "anything",
    "like",
    "us",
    "use",
    "fund",
    "piece",
    "developing",
    "building",
    "backend",
    "front",
    "end",
    "team",
    "gon",
    "na",
    "interact",
    "little",
    "bit",
    "full",
    "stack",
    "gon",
    "na",
    "interact",
    "back",
    "end",
    "important",
    "front",
    "end",
    "back",
    "end",
    "code",
    "nearby",
    "go",
    "back",
    "hardhead",
    "fund",
    "project",
    "made",
    "find",
    "abi",
    "go",
    "artifacts",
    "go",
    "contracts",
    "go",
    "fund",
    "dot",
    "soul",
    "fund",
    "dot",
    "json",
    "find",
    "abi",
    "right",
    "going",
    "massive",
    "thing",
    "right",
    "go",
    "ahead",
    "even",
    "copy",
    "whole",
    "thing",
    "little",
    "non",
    "squiggly",
    "bracket",
    "little",
    "bracket",
    "copy",
    "come",
    "back",
    "save",
    "variable",
    "say",
    "export",
    "const",
    "avi",
    "e",
    "equals",
    "paste",
    "back",
    "index",
    "dot",
    "j",
    "import",
    "import",
    "api",
    "constants",
    "oops",
    "okay",
    "great",
    "api",
    "well",
    "address",
    "since",
    "going",
    "running",
    "locally",
    "want",
    "get",
    "contract",
    "address",
    "locally",
    "run",
    "contract",
    "couple",
    "ways",
    "one",
    "way",
    "two",
    "windows",
    "open",
    "one",
    "front",
    "end",
    "code",
    "one",
    "back",
    "end",
    "code",
    "one",
    "back",
    "end",
    "code",
    "run",
    "yarn",
    "hard",
    "hat",
    "node",
    "spin",
    "blockchain",
    "node",
    "us",
    "give",
    "us",
    "address",
    "probably",
    "little",
    "bit",
    "easier",
    "window",
    "front",
    "end",
    "code",
    "create",
    "new",
    "terminal",
    "two",
    "terminals",
    "running",
    "second",
    "one",
    "going",
    "cd",
    "cd",
    "dot",
    "dot",
    "cd",
    "hard",
    "hat",
    "free",
    "code",
    "camp",
    "going",
    "run",
    "yarn",
    "art",
    "head",
    "node",
    "going",
    "spin",
    "local",
    "blockchain",
    "second",
    "terminal",
    "deploying",
    "fund",
    "deploy",
    "address",
    "blah",
    "blah",
    "blah",
    "right",
    "reminder",
    "hit",
    "x",
    "hides",
    "terminal",
    "always",
    "pull",
    "back",
    "terminal",
    "new",
    "terminal",
    "always",
    "hide",
    "still",
    "running",
    "inside",
    "terminal",
    "going",
    "hide",
    "come",
    "back",
    "constants",
    "folder",
    "top",
    "export",
    "const",
    "contract",
    "address",
    "equals",
    "pull",
    "terminal",
    "back",
    "go",
    "grab",
    "says",
    "pulling",
    "fund",
    "deployed",
    "right",
    "copy",
    "address",
    "put",
    "quotes",
    "paste",
    "also",
    "exporting",
    "contract",
    "address",
    "import",
    "contract",
    "address",
    "comma",
    "contract",
    "address",
    "abi",
    "contract",
    "address",
    "say",
    "const",
    "contract",
    "equals",
    "new",
    "ethers",
    "dot",
    "contract",
    "pass",
    "contract",
    "address",
    "pass",
    "api",
    "pass",
    "signer",
    "ethers",
    "contract",
    "object",
    "connected",
    "signer",
    "contract",
    "address",
    "contract",
    "abi",
    "contract",
    "object",
    "go",
    "ahead",
    "start",
    "making",
    "transactions",
    "exact",
    "way",
    "made",
    "transactions",
    "run",
    "const",
    "transaction",
    "response",
    "equals",
    "weight",
    "contract",
    "dot",
    "fund",
    "pass",
    "value",
    "ethers",
    "dot",
    "utils",
    "dot",
    "parse",
    "ether",
    "ether",
    "mount",
    "going",
    "going",
    "go",
    "ahead",
    "create",
    "transaction",
    "take",
    "right",
    "go",
    "front",
    "give",
    "little",
    "refresh",
    "make",
    "sure",
    "connected",
    "hit",
    "fund",
    "gon",
    "na",
    "get",
    "error",
    "value",
    "must",
    "string",
    "mount",
    "right",
    "passed",
    "nothing",
    "normally",
    "pass",
    "parameters",
    "directly",
    "functions",
    "going",
    "going",
    "hard",
    "code",
    "say",
    "const",
    "mount",
    "equals",
    "like",
    "77",
    "something",
    "fun",
    "think",
    "gon",
    "na",
    "happen",
    "well",
    "get",
    "air",
    "insufficient",
    "funds",
    "intrinsic",
    "transaction",
    "cost",
    "might",
    "get",
    "error",
    "gon",
    "na",
    "get",
    "weird",
    "error",
    "actually",
    "connected",
    "local",
    "hard",
    "head",
    "node",
    "right",
    "well",
    "look",
    "metamask",
    "currently",
    "connected",
    "right",
    "blockchain",
    "connected",
    "rink",
    "b",
    "main",
    "net",
    "whatever",
    "need",
    "get",
    "connected",
    "local",
    "host",
    "look",
    "networks",
    "actually",
    "local",
    "host",
    "object",
    "already",
    "let",
    "super",
    "specific",
    "add",
    "new",
    "network",
    "going",
    "add",
    "something",
    "called",
    "hard",
    "hat",
    "local",
    "host",
    "hit",
    "add",
    "network",
    "add",
    "hardhead",
    "local",
    "host",
    "rpc",
    "url",
    "find",
    "node",
    "area",
    "scroll",
    "node",
    "running",
    "copy",
    "url",
    "paste",
    "new",
    "rpc",
    "url",
    "chain",
    "id",
    "going",
    "31337",
    "currency",
    "symbol",
    "going",
    "go",
    "ether",
    "even",
    "though",
    "pop",
    "says",
    "might",
    "different",
    "currency",
    "symbol",
    "go",
    "going",
    "put",
    "eath",
    "block",
    "explorer",
    "right",
    "local",
    "blockchain",
    "going",
    "block",
    "explorer",
    "go",
    "ahead",
    "hit",
    "save",
    "account",
    "great",
    "connected",
    "local",
    "blockchain",
    "switch",
    "meta",
    "mask",
    "see",
    "local",
    "hard",
    "hat",
    "connected",
    "awesome",
    "let",
    "refresh",
    "let",
    "run",
    "fund",
    "one",
    "time",
    "see",
    "transaction",
    "indeed",
    "pop",
    "great",
    "account",
    "money",
    "broke",
    "local",
    "hardhead",
    "aetherium",
    "actually",
    "going",
    "need",
    "import",
    "one",
    "accounts",
    "hard",
    "hat",
    "meta",
    "mask",
    "actually",
    "account",
    "private",
    "key",
    "hard",
    "gives",
    "us",
    "accounts",
    "going",
    "import",
    "private",
    "key",
    "count",
    "zero",
    "meta",
    "mask",
    "going",
    "copy",
    "private",
    "key",
    "going",
    "come",
    "back",
    "front",
    "end",
    "click",
    "meta",
    "mask",
    "gon",
    "na",
    "hit",
    "big",
    "button",
    "gon",
    "na",
    "hit",
    "import",
    "account",
    "like",
    "type",
    "private",
    "key",
    "gon",
    "na",
    "paste",
    "private",
    "key",
    "quick",
    "note",
    "choose",
    "json",
    "file",
    "remember",
    "back",
    "ether",
    "section",
    "encrypted",
    "key",
    "json",
    "file",
    "password",
    "actually",
    "import",
    "accounts",
    "json",
    "file",
    "password",
    "encrypt",
    "key",
    "want",
    "add",
    "meta",
    "mask",
    "go",
    "ahead",
    "add",
    "like",
    "going",
    "use",
    "private",
    "key",
    "paste",
    "private",
    "key",
    "hit",
    "import",
    "see",
    "account",
    "new",
    "account",
    "account",
    "three",
    "ton",
    "eath",
    "local",
    "blockchain",
    "refresh",
    "one",
    "time",
    "go",
    "ahead",
    "connect",
    "make",
    "sure",
    "account",
    "three",
    "connected",
    "go",
    "ahead",
    "hit",
    "connect",
    "button",
    "account",
    "three",
    "connected",
    "go",
    "ahead",
    "hit",
    "fund",
    "see",
    "fund",
    "contract",
    "go",
    "ahead",
    "hit",
    "confirm",
    "look",
    "nothing",
    "going",
    "happen",
    "front",
    "end",
    "tell",
    "front",
    "end",
    "anything",
    "confirm",
    "go",
    "blockchain",
    "see",
    "fun",
    "function",
    "called",
    "made",
    "first",
    "transaction",
    "blockchain",
    "front",
    "end",
    "awesome",
    "great",
    "work",
    "probably",
    "little",
    "confusing",
    "user",
    "nothing",
    "happens",
    "going",
    "hit",
    "fun",
    "function",
    "going",
    "like",
    "oh",
    "okay",
    "cool",
    "happens",
    "probably",
    "want",
    "make",
    "little",
    "bit",
    "obvious",
    "something",
    "happened",
    "one",
    "thing",
    "want",
    "show",
    "follow",
    "along",
    "hit",
    "fund",
    "hit",
    "reject",
    "gon",
    "na",
    "freak",
    "us",
    "like",
    "hey",
    "like",
    "hit",
    "reject",
    "know",
    "going",
    "make",
    "code",
    "little",
    "bit",
    "robust",
    "adding",
    "try",
    "catch",
    "tell",
    "javascript",
    "try",
    "running",
    "transaction",
    "catches",
    "error",
    "console",
    "dot",
    "log",
    "error",
    "hit",
    "fund",
    "hit",
    "reject",
    "gon",
    "na",
    "still",
    "little",
    "bit",
    "mad",
    "least",
    "catching",
    "going",
    "break",
    "destroy",
    "everything",
    "okay",
    "cool",
    "got",
    "transaction",
    "response",
    "hit",
    "fund",
    "front",
    "end",
    "goes",
    "great",
    "funded",
    "super",
    "confused",
    "oh",
    "one",
    "point",
    "something",
    "probably",
    "run",
    "multiple",
    "times",
    "get",
    "error",
    "looks",
    "like",
    "eath",
    "js",
    "query",
    "formatting",
    "outputs",
    "rpc",
    "nonce",
    "high",
    "expected",
    "got",
    "form",
    "definitely",
    "see",
    "whole",
    "lot",
    "fix",
    "reason",
    "happens",
    "closed",
    "hardhat",
    "node",
    "restarted",
    "heart",
    "node",
    "goes",
    "okay",
    "well",
    "starting",
    "fresh",
    "starting",
    "zero",
    "metamask",
    "smart",
    "enough",
    "know",
    "want",
    "want",
    "come",
    "metamask",
    "hit",
    "big",
    "button",
    "go",
    "settings",
    "go",
    "advanced",
    "go",
    "reset",
    "account",
    "yes",
    "going",
    "reset",
    "something",
    "ideally",
    "like",
    "actual",
    "account",
    "actual",
    "money",
    "local",
    "network",
    "fine",
    "reset",
    "account",
    "reset",
    "node",
    "go",
    "ahead",
    "hit",
    "confirm",
    "give",
    "us",
    "error",
    "anymore",
    "kind",
    "tip",
    "want",
    "reset",
    "nuts",
    "metamask",
    "blockchain",
    "sync",
    "nonce",
    "number",
    "transaction",
    "response",
    "probably",
    "want",
    "front",
    "end",
    "give",
    "user",
    "indication",
    "hey",
    "transaction",
    "went",
    "want",
    "want",
    "listen",
    "blockchain",
    "finish",
    "either",
    "listen",
    "tx",
    "mined",
    "listen",
    "event",
    "learned",
    "events",
    "yet",
    "since",
    "learned",
    "events",
    "yet",
    "going",
    "listen",
    "tx",
    "mined",
    "listen",
    "transaction",
    "mined",
    "actually",
    "going",
    "create",
    "new",
    "function",
    "called",
    "function",
    "listen",
    "transaction",
    "mine",
    "going",
    "take",
    "input",
    "transaction",
    "response",
    "provider",
    "notice",
    "async",
    "function",
    "section",
    "intentional",
    "want",
    "async",
    "function",
    "see",
    "second",
    "going",
    "using",
    "javascript",
    "promise",
    "javascript",
    "async",
    "functionality",
    "massive",
    "advantage",
    "javascript",
    "actually",
    "works",
    "well",
    "front",
    "end",
    "asynchronous",
    "going",
    "create",
    "function",
    "listen",
    "transaction",
    "mined",
    "going",
    "await",
    "fund",
    "function",
    "going",
    "return",
    "promise",
    "let",
    "go",
    "ahead",
    "let",
    "learn",
    "build",
    "gon",
    "na",
    "say",
    "console",
    "dot",
    "log",
    "string",
    "interpolation",
    "say",
    "mining",
    "say",
    "transaction",
    "response",
    "dot",
    "hash",
    "transaction",
    "response",
    "objects",
    "hash",
    "represent",
    "hash",
    "couple",
    "data",
    "dot",
    "put",
    "console",
    "waiting",
    "transaction",
    "mined",
    "going",
    "going",
    "return",
    "new",
    "promise",
    "reason",
    "going",
    "return",
    "promise",
    "need",
    "create",
    "listener",
    "blockchain",
    "want",
    "listen",
    "event",
    "happen",
    "want",
    "tell",
    "javascript",
    "hey",
    "wait",
    "thing",
    "finish",
    "looking",
    "wait",
    "thing",
    "finish",
    "looking",
    "gets",
    "little",
    "bit",
    "tricky",
    "fund",
    "function",
    "create",
    "transaction",
    "basically",
    "want",
    "tell",
    "javascript",
    "hey",
    "wait",
    "tx",
    "finish",
    "code",
    "going",
    "look",
    "simple",
    "await",
    "listen",
    "transaction",
    "mine",
    "going",
    "pass",
    "trans",
    "action",
    "response",
    "provider",
    "saying",
    "hey",
    "listen",
    "transaction",
    "finish",
    "using",
    "await",
    "keyword",
    "await",
    "keyword",
    "says",
    "okay",
    "gon",
    "na",
    "stop",
    "right",
    "gon",
    "na",
    "stop",
    "function",
    "completely",
    "done",
    "listen",
    "transaction",
    "mind",
    "define",
    "actually",
    "going",
    "listen",
    "going",
    "say",
    "listen",
    "transaction",
    "finish",
    "ethers",
    "actually",
    "comes",
    "way",
    "us",
    "listen",
    "transactions",
    "listen",
    "events",
    "learned",
    "worry",
    "yet",
    "go",
    "ethers",
    "docs",
    "look",
    "contract",
    "dot",
    "whole",
    "bunch",
    "listeners",
    "use",
    "listen",
    "events",
    "listen",
    "different",
    "things",
    "happen",
    "thing",
    "called",
    "provider",
    "dot",
    "listen",
    "event",
    "event",
    "fires",
    "call",
    "function",
    "defined",
    "talked",
    "events",
    "yet",
    "worry",
    "quite",
    "yet",
    "one",
    "events",
    "wait",
    "wait",
    "transaction",
    "receipt",
    "finish",
    "right",
    "get",
    "transaction",
    "receipt",
    "means",
    "transaction",
    "actually",
    "finished",
    "going",
    "going",
    "use",
    "provider",
    "dot",
    "syntax",
    "wait",
    "transaction",
    "receipt",
    "going",
    "event",
    "really",
    "event",
    "worry",
    "yet",
    "going",
    "call",
    "listener",
    "function",
    "defined",
    "also",
    "trigger",
    "anytime",
    "event",
    "fires",
    "provider",
    "triggers",
    "one",
    "time",
    "care",
    "transaction",
    "going",
    "one",
    "time",
    "passing",
    "provider",
    "object",
    "gon",
    "na",
    "say",
    "provider",
    "dot",
    "event",
    "going",
    "transaction",
    "response",
    "hash",
    "provided",
    "transaction",
    "response",
    "dot",
    "hash",
    "get",
    "hash",
    "pretty",
    "much",
    "get",
    "right",
    "away",
    "going",
    "call",
    "listener",
    "function",
    "create",
    "function",
    "listener",
    "like",
    "pass",
    "listener",
    "going",
    "anonymous",
    "function",
    "typically",
    "see",
    "syntax",
    "loops",
    "far",
    "provider",
    "dot",
    "anonymous",
    "function",
    "going",
    "two",
    "little",
    "parentheses",
    "arrow",
    "notation",
    "represents",
    "anonymous",
    "function",
    "saying",
    "hey",
    "function",
    "take",
    "parameters",
    "code",
    "arrow",
    "function",
    "whole",
    "thing",
    "saying",
    "anonymous",
    "function",
    "saying",
    "provided",
    "transaction",
    "hash",
    "happens",
    "function",
    "want",
    "execute",
    "anything",
    "right",
    "let",
    "something",
    "transaction",
    "dot",
    "response",
    "finishes",
    "going",
    "take",
    "trans",
    "transaction",
    "received",
    "input",
    "parameter",
    "callback",
    "function",
    "listener",
    "function",
    "going",
    "gon",
    "na",
    "say",
    "console",
    "dot",
    "log",
    "completed",
    "little",
    "string",
    "interpolation",
    "transaction",
    "receipt",
    "confirmations",
    "confirmations",
    "completed",
    "transaction",
    "receipt",
    "confirmations",
    "confirmations",
    "provider",
    "dot",
    "sees",
    "transaction",
    "hash",
    "going",
    "give",
    "input",
    "rammer",
    "listener",
    "function",
    "transaction",
    "receipt",
    "kind",
    "syntax",
    "seeing",
    "whole",
    "time",
    "transaction",
    "response",
    "finishes",
    "get",
    "transaction",
    "receipt",
    "stuff",
    "see",
    "many",
    "block",
    "confirmations",
    "us",
    "pretty",
    "much",
    "always",
    "one",
    "save",
    "go",
    "back",
    "front",
    "end",
    "hit",
    "fund",
    "going",
    "work",
    "going",
    "give",
    "user",
    "indication",
    "worked",
    "great",
    "really",
    "going",
    "work",
    "way",
    "want",
    "work",
    "console",
    "dot",
    "log",
    "done",
    "right",
    "await",
    "listen",
    "transaction",
    "mine",
    "come",
    "back",
    "hit",
    "fund",
    "hit",
    "confirm",
    "actually",
    "go",
    "order",
    "want",
    "go",
    "goes",
    "mining",
    "thing",
    "says",
    "done",
    "says",
    "completed",
    "one",
    "trip",
    "confirmation",
    "going",
    "write",
    "completed",
    "write",
    "done",
    "order",
    "looks",
    "like",
    "words",
    "going",
    "order",
    "going",
    "going",
    "happen",
    "call",
    "listen",
    "transaction",
    "mine",
    "listen",
    "transaction",
    "mine",
    "function",
    "going",
    "kick",
    "going",
    "kick",
    "provided",
    "process",
    "await",
    "listen",
    "transaction",
    "mine",
    "kick",
    "listener",
    "wait",
    "listener",
    "find",
    "transaction",
    "response",
    "function",
    "actually",
    "finish",
    "provider",
    "dot",
    "finishes",
    "kicks",
    "listener",
    "run",
    "next",
    "line",
    "code",
    "console",
    "dot",
    "log",
    "done",
    "front",
    "end",
    "go",
    "oh",
    "oh",
    "kicked",
    "listener",
    "earlier",
    "let",
    "go",
    "back",
    "let",
    "recheck",
    "see",
    "finished",
    "finished",
    "go",
    "told",
    "known",
    "event",
    "loop",
    "kicks",
    "actually",
    "wait",
    "provider",
    "wants",
    "finish",
    "add",
    "provided",
    "onto",
    "queue",
    "called",
    "event",
    "loop",
    "front",
    "end",
    "going",
    "periodically",
    "check",
    "back",
    "see",
    "finished",
    "want",
    "adjust",
    "code",
    "wait",
    "listener",
    "finish",
    "listening",
    "going",
    "get",
    "promises",
    "want",
    "want",
    "adjust",
    "function",
    "return",
    "promise",
    "going",
    "use",
    "syntax",
    "couple",
    "times",
    "future",
    "going",
    "going",
    "say",
    "hey",
    "want",
    "wait",
    "listener",
    "finish",
    "listening",
    "going",
    "wrap",
    "whole",
    "thing",
    "promise",
    "going",
    "say",
    "return",
    "new",
    "promise",
    "promise",
    "takes",
    "function",
    "input",
    "parameter",
    "use",
    "kind",
    "anonymous",
    "function",
    "notation",
    "take",
    "two",
    "input",
    "parameters",
    "resolve",
    "reject",
    "resolve",
    "says",
    "hey",
    "promise",
    "works",
    "correctly",
    "call",
    "resolve",
    "function",
    "us",
    "promise",
    "going",
    "done",
    "listener",
    "finishes",
    "listening",
    "would",
    "reject",
    "type",
    "timeout",
    "going",
    "write",
    "reject",
    "function",
    "future",
    "production",
    "add",
    "timeout",
    "reject",
    "parameter",
    "basically",
    "saying",
    "hey",
    "listener",
    "finishes",
    "listening",
    "going",
    "resolve",
    "takes",
    "long",
    "gon",
    "na",
    "say",
    "ask",
    "took",
    "long",
    "instead",
    "closing",
    "going",
    "close",
    "around",
    "provider",
    "thing",
    "gon",
    "na",
    "say",
    "return",
    "new",
    "promise",
    "resolve",
    "reject",
    "transaction",
    "gets",
    "fired",
    "going",
    "resolve",
    "promise",
    "like",
    "happening",
    "going",
    "put",
    "resolve",
    "inside",
    "provider",
    "saying",
    "transaction",
    "hash",
    "found",
    "going",
    "call",
    "function",
    "gon",
    "na",
    "say",
    "console",
    "dot",
    "log",
    "going",
    "resolve",
    "promise",
    "returns",
    "resolve",
    "reject",
    "called",
    "telling",
    "resolve",
    "finish",
    "function",
    "transaction",
    "response",
    "dot",
    "hash",
    "found",
    "going",
    "inside",
    "little",
    "squiggly",
    "parentheses",
    "provider",
    "dot",
    "promise",
    "right",
    "resolves",
    "fired",
    "event",
    "really",
    "confusing",
    "copy",
    "paste",
    "move",
    "getting",
    "little",
    "bit",
    "deeper",
    "front",
    "end",
    "stuff",
    "hopefully",
    "clear",
    "definitely",
    "jump",
    "github",
    "discussions",
    "start",
    "asking",
    "stuff",
    "updated",
    "come",
    "back",
    "front",
    "end",
    "hit",
    "fund",
    "button",
    "hopefully",
    "time",
    "everything",
    "go",
    "order",
    "hit",
    "confirm",
    "see",
    "mining",
    "completed",
    "see",
    "done",
    "reason",
    "await",
    "keyword",
    "waiting",
    "says",
    "oh",
    "returning",
    "promise",
    "need",
    "await",
    "need",
    "wait",
    "resolve",
    "reject",
    "resolve",
    "promise",
    "provider",
    "finds",
    "transaction",
    "hash",
    "transaction",
    "receipt",
    "listen",
    "transaction",
    "mine",
    "future",
    "sections",
    "going",
    "abstracted",
    "away",
    "us",
    "life",
    "going",
    "much",
    "easier",
    "important",
    "understand",
    "actually",
    "going",
    "awesome",
    "giving",
    "front",
    "end",
    "indication",
    "going",
    "fun",
    "function",
    "done",
    "well",
    "really",
    "well",
    "right",
    "hard",
    "coding",
    "eath",
    "amount",
    "front",
    "end",
    "probably",
    "want",
    "hard",
    "code",
    "probably",
    "want",
    "allow",
    "users",
    "fund",
    "much",
    "little",
    "want",
    "actually",
    "need",
    "change",
    "button",
    "input",
    "form",
    "gon",
    "na",
    "go",
    "back",
    "html",
    "go",
    "back",
    "index",
    "dot",
    "html",
    "going",
    "change",
    "fun",
    "section",
    "going",
    "add",
    "form",
    "information",
    "going",
    "keep",
    "button",
    "going",
    "add",
    "like",
    "little",
    "text",
    "box",
    "input",
    "much",
    "eath",
    "want",
    "going",
    "create",
    "label",
    "gon",
    "na",
    "say",
    "going",
    "fund",
    "label",
    "gon",
    "na",
    "say",
    "eath",
    "amount",
    "gon",
    "na",
    "close",
    "label",
    "basically",
    "going",
    "create",
    "label",
    "go",
    "back",
    "front",
    "end",
    "etham",
    "label",
    "labeling",
    "anything",
    "going",
    "create",
    "input",
    "going",
    "give",
    "id",
    "eath",
    "amount",
    "going",
    "give",
    "placeholder",
    "gon",
    "na",
    "close",
    "input",
    "flip",
    "front",
    "end",
    "eath",
    "amount",
    "labeling",
    "little",
    "text",
    "box",
    "placeholder",
    "add",
    "stuff",
    "know",
    "blah",
    "blah",
    "whatever",
    "one",
    "thing",
    "tags",
    "put",
    "anything",
    "actually",
    "shorten",
    "putting",
    "little",
    "closing",
    "thing",
    "back",
    "like",
    "anything",
    "tags",
    "close",
    "like",
    "two",
    "equivalent",
    "boom",
    "boom",
    "boom",
    "boom",
    "thing",
    "great",
    "called",
    "fund",
    "right",
    "calling",
    "fund",
    "passing",
    "parameters",
    "let",
    "update",
    "fund",
    "longer",
    "hardcoding",
    "eath",
    "amount",
    "fund",
    "function",
    "populated",
    "whatever",
    "put",
    "eath",
    "amount",
    "input",
    "box",
    "fund",
    "function",
    "instead",
    "saying",
    "const",
    "eath",
    "amount",
    "equals",
    "grab",
    "eath",
    "amount",
    "id",
    "say",
    "document",
    "dot",
    "get",
    "element",
    "id",
    "eath",
    "amount",
    "dot",
    "value",
    "going",
    "grab",
    "whatever",
    "value",
    "input",
    "box",
    "console",
    "dot",
    "log",
    "funding",
    "eath",
    "amount",
    "front",
    "end",
    "hit",
    "fund",
    "see",
    "console",
    "dot",
    "log",
    "says",
    "funding",
    "get",
    "little",
    "fun",
    "section",
    "confirm",
    "mine",
    "complete",
    "say",
    "done",
    "awesome",
    "added",
    "little",
    "text",
    "box",
    "people",
    "fund",
    "much",
    "little",
    "want",
    "perfect",
    "whole",
    "thing",
    "kind",
    "considered",
    "form",
    "also",
    "form",
    "tag",
    "going",
    "use",
    "right",
    "great",
    "lot",
    "funding",
    "right",
    "keep",
    "funding",
    "contract",
    "ethan",
    "keep",
    "adding",
    "stuff",
    "probably",
    "want",
    "button",
    "keep",
    "track",
    "much",
    "actually",
    "let",
    "add",
    "really",
    "simple",
    "balance",
    "button",
    "let",
    "actually",
    "move",
    "bottom",
    "much",
    "better",
    "say",
    "button",
    "id",
    "equals",
    "balance",
    "button",
    "call",
    "get",
    "balance",
    "get",
    "balanced",
    "button",
    "going",
    "anything",
    "get",
    "balanced",
    "function",
    "let",
    "go",
    "back",
    "create",
    "get",
    "bounced",
    "function",
    "async",
    "function",
    "get",
    "bounce",
    "far",
    "type",
    "window",
    "dot",
    "aetherium",
    "equal",
    "undefined",
    "going",
    "const",
    "provider",
    "equals",
    "new",
    "ethers",
    "ethers",
    "dot",
    "providers",
    "dot",
    "web",
    "three",
    "provider",
    "window",
    "aetherium",
    "const",
    "balance",
    "equals",
    "awaits",
    "provider",
    "dot",
    "get",
    "balance",
    "contract",
    "address",
    "importing",
    "way",
    "top",
    "console",
    "dot",
    "log",
    "ethers",
    "dot",
    "utils",
    "dot",
    "format",
    "ether",
    "bounce",
    "format",
    "ether",
    "function",
    "ethers",
    "utils",
    "find",
    "documentation",
    "make",
    "reading",
    "ethers",
    "formatted",
    "numbers",
    "much",
    "easier",
    "read",
    "going",
    "go",
    "going",
    "copy",
    "fun",
    "button",
    "line",
    "paste",
    "say",
    "balance",
    "button",
    "equals",
    "document",
    "dot",
    "get",
    "element",
    "id",
    "balance",
    "button",
    "say",
    "balance",
    "button",
    "click",
    "equals",
    "get",
    "balance",
    "gon",
    "na",
    "come",
    "back",
    "front",
    "end",
    "quick",
    "refresh",
    "get",
    "balance",
    "see",
    "balance",
    "console",
    "fund",
    "like",
    "hit",
    "fund",
    "metamath",
    "pops",
    "go",
    "ahead",
    "confirm",
    "mining",
    "completed",
    "done",
    "hit",
    "get",
    "balanced",
    "fantastic",
    "alright",
    "let",
    "keep",
    "going",
    "need",
    "next",
    "gon",
    "na",
    "go",
    "ahead",
    "eat",
    "withdrawal",
    "function",
    "let",
    "create",
    "gon",
    "na",
    "look",
    "really",
    "similar",
    "everything",
    "done",
    "far",
    "index",
    "dot",
    "html",
    "let",
    "create",
    "new",
    "button",
    "copying",
    "whole",
    "line",
    "paste",
    "underneath",
    "call",
    "withdraw",
    "button",
    "call",
    "withdraw",
    "call",
    "withdraw",
    "index",
    "thing",
    "copy",
    "paste",
    "drop",
    "button",
    "document",
    "get",
    "element",
    "id",
    "withdraw",
    "button",
    "withdraw",
    "click",
    "equals",
    "withdraw",
    "let",
    "make",
    "withdrawal",
    "function",
    "bottom",
    "go",
    "ahead",
    "say",
    "async",
    "function",
    "withdraw",
    "exact",
    "done",
    "even",
    "copy",
    "everything",
    "get",
    "balance",
    "remove",
    "balance",
    "section",
    "type",
    "window",
    "dot",
    "aetherium",
    "equal",
    "undefined",
    "grab",
    "provider",
    "fund",
    "contract",
    "grab",
    "signer",
    "contract",
    "let",
    "grab",
    "two",
    "lines",
    "paste",
    "called",
    "signer",
    "equals",
    "provider",
    "dot",
    "get",
    "signer",
    "contract",
    "equals",
    "new",
    "contract",
    "blah",
    "blah",
    "blah",
    "okay",
    "cool",
    "gon",
    "na",
    "exact",
    "fun",
    "function",
    "gon",
    "na",
    "little",
    "try",
    "catch",
    "even",
    "add",
    "catch",
    "catch",
    "error",
    "console",
    "dot",
    "log",
    "error",
    "inside",
    "try",
    "const",
    "transaction",
    "response",
    "equals",
    "await",
    "contracts",
    "dot",
    "withdraw",
    "need",
    "put",
    "parameters",
    "oh",
    "actually",
    "let",
    "little",
    "console",
    "dot",
    "log",
    "withdrawing",
    "get",
    "transaction",
    "response",
    "listen",
    "transaction",
    "get",
    "mined",
    "well",
    "running",
    "wait",
    "listen",
    "transaction",
    "mine",
    "transaction",
    "response",
    "comma",
    "provider",
    "since",
    "reuse",
    "functionality",
    "listen",
    "transaction",
    "mine",
    "refresh",
    "make",
    "sure",
    "connected",
    "check",
    "current",
    "balance",
    "go",
    "ahead",
    "withdraw",
    "see",
    "little",
    "withdrawing",
    "console",
    "dot",
    "log",
    "hit",
    "confirm",
    "looks",
    "like",
    "completed",
    "look",
    "metamask",
    "bounced",
    "increased",
    "amount",
    "added",
    "hit",
    "balance",
    "indeed",
    "see",
    "zero",
    "even",
    "double",
    "check",
    "actually",
    "working",
    "see",
    "balance",
    "let",
    "go",
    "ahead",
    "even",
    "fund",
    "99",
    "eath",
    "good",
    "confirm",
    "looks",
    "like",
    "completed",
    "meta",
    "mask",
    "shows",
    "go",
    "ahead",
    "withdraw",
    "confirm",
    "withdrawal",
    "gone",
    "see",
    "balance",
    "back",
    "let",
    "go",
    "back",
    "change",
    "hey",
    "good",
    "refresh",
    "front",
    "end",
    "see",
    "done",
    "created",
    "minimalistic",
    "website",
    "allows",
    "us",
    "connect",
    "blockchain",
    "call",
    "functions",
    "front",
    "end",
    "website",
    "absolutely",
    "massive",
    "incredibly",
    "proud",
    "incredibly",
    "excited",
    "definitely",
    "minimalistic",
    "version",
    "going",
    "work",
    "powerful",
    "modern",
    "front",
    "end",
    "frameworks",
    "give",
    "idea",
    "exactly",
    "going",
    "behind",
    "scenes",
    "working",
    "advanced",
    "front",
    "ends",
    "style",
    "look",
    "little",
    "bit",
    "better",
    "said",
    "learned",
    "basics",
    "front",
    "ends",
    "work",
    "know",
    "push",
    "things",
    "get",
    "highly",
    "recommend",
    "start",
    "pushing",
    "projects",
    "github",
    "record",
    "actually",
    "done",
    "work",
    "built",
    "smart",
    "contracts",
    "looking",
    "get",
    "internship",
    "line",
    "looking",
    "help",
    "github",
    "projects",
    "record",
    "hey",
    "build",
    "look",
    "know",
    "congratulations",
    "first",
    "full",
    "stack",
    "first",
    "front",
    "end",
    "application",
    "move",
    "let",
    "quick",
    "refresher",
    "everything",
    "learned",
    "number",
    "one",
    "typically",
    "want",
    "repository",
    "code",
    "base",
    "back",
    "end",
    "smart",
    "contracts",
    "different",
    "repository",
    "front",
    "end",
    "front",
    "end",
    "code",
    "going",
    "combination",
    "html",
    "javascript",
    "wallet",
    "like",
    "meta",
    "mask",
    "injecting",
    "browser",
    "based",
    "wallets",
    "window",
    "object",
    "browsers",
    "like",
    "window",
    "dot",
    "aetherium",
    "browser",
    "different",
    "extension",
    "reason",
    "want",
    "connect",
    "rpc",
    "url",
    "built",
    "meta",
    "masks",
    "way",
    "making",
    "api",
    "calls",
    "rpc",
    "url",
    "hard",
    "hat",
    "remix",
    "ethers",
    "etc",
    "created",
    "first",
    "promise",
    "based",
    "function",
    "listener",
    "kickoff",
    "wrapped",
    "promise",
    "say",
    "hey",
    "want",
    "wait",
    "listener",
    "finish",
    "since",
    "promise",
    "based",
    "function",
    "set",
    "weight",
    "listen",
    "transaction",
    "mind",
    "waited",
    "transaction",
    "finish",
    "front",
    "end",
    "transaction",
    "finished",
    "going",
    "tell",
    "user",
    "finished",
    "going",
    "continue",
    "stuff",
    "give",
    "round",
    "applause",
    "let",
    "move",
    "next",
    "section",
    "right",
    "welcome",
    "next",
    "section",
    "lesson",
    "nine",
    "hardhat",
    "smart",
    "contract",
    "lottery",
    "code",
    "section",
    "going",
    "available",
    "github",
    "repo",
    "associated",
    "course",
    "alright",
    "let",
    "show",
    "build",
    "going",
    "show",
    "front",
    "end",
    "login",
    "front",
    "end",
    "want",
    "front",
    "end",
    "give",
    "us",
    "nice",
    "way",
    "visualize",
    "lottery",
    "building",
    "building",
    "application",
    "allows",
    "users",
    "completely",
    "decentralized",
    "allow",
    "us",
    "engage",
    "fair",
    "verifiably",
    "random",
    "lottery",
    "application",
    "would",
    "actually",
    "fix",
    "mcdonald",
    "issue",
    "talked",
    "much",
    "earlier",
    "first",
    "got",
    "kinect",
    "wallet",
    "button",
    "going",
    "click",
    "connect",
    "meta",
    "mask",
    "actually",
    "going",
    "show",
    "connect",
    "metamask",
    "wallet",
    "connect",
    "trust",
    "wallet",
    "math",
    "wallet",
    "wallets",
    "show",
    "customize",
    "even",
    "going",
    "connect",
    "metamask",
    "choose",
    "account",
    "imported",
    "hardhead",
    "choose",
    "next",
    "gon",
    "na",
    "choose",
    "connect",
    "remember",
    "front",
    "end",
    "bit",
    "gon",
    "na",
    "go",
    "settings",
    "advanced",
    "reset",
    "account",
    "working",
    "brand",
    "new",
    "hard",
    "hat",
    "blockchain",
    "front",
    "end",
    "look",
    "super",
    "nice",
    "enter",
    "raffle",
    "button",
    "little",
    "bit",
    "ui",
    "talking",
    "current",
    "number",
    "players",
    "previous",
    "winner",
    "raffle",
    "go",
    "ahead",
    "enter",
    "raffle",
    "allow",
    "anybody",
    "pay",
    "eath",
    "enter",
    "smart",
    "contract",
    "get",
    "little",
    "transaction",
    "saying",
    "transaction",
    "complete",
    "get",
    "current",
    "number",
    "players",
    "one",
    "continue",
    "enter",
    "raffle",
    "anybody",
    "enter",
    "raffle",
    "smart",
    "contract",
    "keep",
    "track",
    "players",
    "going",
    "run",
    "timer",
    "lottery",
    "going",
    "automatically",
    "trigger",
    "somebody",
    "win",
    "get",
    "pure",
    "verifiable",
    "random",
    "number",
    "going",
    "using",
    "chain",
    "link",
    "vrf",
    "get",
    "pure",
    "verifiably",
    "random",
    "number",
    "gon",
    "na",
    "use",
    "chain",
    "link",
    "keepers",
    "trigger",
    "automation",
    "automatically",
    "one",
    "winners",
    "get",
    "picked",
    "every",
    "time",
    "one",
    "time",
    "intervals",
    "keepers",
    "kick",
    "pick",
    "winner",
    "decentralized",
    "lottery",
    "say",
    "previous",
    "winner",
    "get",
    "money",
    "lottery",
    "making",
    "perfectly",
    "fair",
    "decentralized",
    "lottery",
    "going",
    "call",
    "contract",
    "raffle",
    "dot",
    "soul",
    "call",
    "lottery",
    "dot",
    "soul",
    "really",
    "whatever",
    "want",
    "going",
    "make",
    "look",
    "really",
    "really",
    "nice",
    "back",
    "visual",
    "studio",
    "code",
    "going",
    "project",
    "learn",
    "skills",
    "learn",
    "rest",
    "smart",
    "contract",
    "concepts",
    "going",
    "able",
    "great",
    "things",
    "space",
    "going",
    "flagship",
    "project",
    "going",
    "one",
    "excited",
    "proud",
    "tutorial",
    "let",
    "go",
    "ahead",
    "let",
    "create",
    "new",
    "folder",
    "gon",
    "na",
    "mk",
    "dir",
    "hardhat",
    "smart",
    "contract",
    "lottery",
    "fcc",
    "smart",
    "contract",
    "raffle",
    "whatever",
    "want",
    "call",
    "going",
    "cd",
    "hard",
    "hat",
    "smart",
    "contract",
    "lottery",
    "free",
    "code",
    "camp",
    "going",
    "type",
    "code",
    "period",
    "going",
    "open",
    "new",
    "folder",
    "however",
    "choose",
    "new",
    "folder",
    "going",
    "create",
    "new",
    "hard",
    "hat",
    "project",
    "going",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "hard",
    "hat",
    "get",
    "node",
    "modules",
    "package",
    "dot",
    "json",
    "yarn",
    "dot",
    "lock",
    "yarn",
    "hardhat",
    "get",
    "started",
    "new",
    "project",
    "going",
    "select",
    "create",
    "empty",
    "hard",
    "hat",
    "dot",
    "config",
    "dot",
    "j",
    "know",
    "basic",
    "project",
    "looks",
    "like",
    "gon",
    "na",
    "give",
    "project",
    "customizations",
    "want",
    "see",
    "going",
    "create",
    "empty",
    "hard",
    "hat",
    "dot",
    "config",
    "blank",
    "almost",
    "nothing",
    "starting",
    "completely",
    "scratch",
    "going",
    "add",
    "dependencies",
    "oftentimes",
    "add",
    "sequentially",
    "build",
    "going",
    "add",
    "one",
    "line",
    "lot",
    "left",
    "copy",
    "paste",
    "whole",
    "section",
    "full",
    "blockchain",
    "solidity",
    "course",
    "j",
    "copy",
    "paste",
    "install",
    "everything",
    "one",
    "go",
    "grab",
    "line",
    "going",
    "everything",
    "talking",
    "hit",
    "enter",
    "install",
    "create",
    "projects",
    "get",
    "feel",
    "like",
    "dependencies",
    "tools",
    "like",
    "use",
    "remember",
    "end",
    "day",
    "tool",
    "best",
    "best",
    "job",
    "tool",
    "like",
    "never",
    "really",
    "one",
    "tool",
    "fits",
    "almost",
    "always",
    "going",
    "trade",
    "offs",
    "alright",
    "dependencies",
    "installed",
    "look",
    "package",
    "json",
    "massive",
    "dev",
    "dependencies",
    "everything",
    "node",
    "modules",
    "everything",
    "yarn",
    "dot",
    "lock",
    "course",
    "know",
    "order",
    "actually",
    "work",
    "need",
    "add",
    "hardhead",
    "config",
    "lot",
    "stuff",
    "add",
    "well",
    "like",
    "want",
    "come",
    "heart",
    "smart",
    "contract",
    "lottery",
    "fcc",
    "go",
    "hardhead",
    "config",
    "copy",
    "paste",
    "everything",
    "place",
    "project",
    "always",
    "type",
    "everything",
    "meclabs",
    "hardhead",
    "waffle",
    "anomic",
    "labs",
    "started",
    "ether",
    "scan",
    "harder",
    "deploy",
    "slitted",
    "coverage",
    "gas",
    "reporter",
    "heart",
    "contract",
    "sizer",
    "talked",
    "yet",
    "worry",
    "require",
    "dot",
    "env",
    "dot",
    "config",
    "know",
    "little",
    "semicolons",
    "popping",
    "going",
    "drive",
    "absolutely",
    "crazy",
    "create",
    "dot",
    "prettier",
    "rc",
    "want",
    "copy",
    "well",
    "one",
    "previous",
    "projects",
    "free",
    "one",
    "thing",
    "added",
    "print",
    "width",
    "changes",
    "long",
    "line",
    "goes",
    "new",
    "line",
    "difference",
    "go",
    "config",
    "hit",
    "save",
    "go",
    "away",
    "thank",
    "goodness",
    "look",
    "solidity",
    "version",
    "currently",
    "using",
    "zero",
    "point",
    "let",
    "go",
    "ahead",
    "update",
    "whatever",
    "want",
    "use",
    "basic",
    "setup",
    "begin",
    "coding",
    "smart",
    "contracts",
    "first",
    "need",
    "create",
    "new",
    "folder",
    "called",
    "contracts",
    "going",
    "store",
    "contracts",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "file",
    "called",
    "lottery",
    "dot",
    "soul",
    "raffle",
    "dot",
    "soul",
    "whatever",
    "want",
    "call",
    "going",
    "call",
    "mine",
    "raffle",
    "dot",
    "soul",
    "might",
    "see",
    "indexing",
    "thing",
    "happened",
    "time",
    "time",
    "hard",
    "hat",
    "solidity",
    "extension",
    "indexing",
    "node",
    "modules",
    "knows",
    "highlight",
    "things",
    "knows",
    "work",
    "everything",
    "solidity",
    "files",
    "happens",
    "pops",
    "jump",
    "create",
    "let",
    "figure",
    "going",
    "going",
    "create",
    "raffle",
    "contract",
    "want",
    "people",
    "able",
    "well",
    "probably",
    "want",
    "people",
    "able",
    "enter",
    "lottery",
    "know",
    "paying",
    "amount",
    "probably",
    "going",
    "want",
    "able",
    "pick",
    "random",
    "winner",
    "want",
    "verifiably",
    "random",
    "want",
    "untampered",
    "bowl",
    "also",
    "want",
    "winner",
    "selected",
    "every",
    "x",
    "minutes",
    "years",
    "months",
    "aka",
    "want",
    "completely",
    "automated",
    "want",
    "deploy",
    "smart",
    "contract",
    "almost",
    "maintenance",
    "almost",
    "nobody",
    "ever",
    "touch",
    "automatically",
    "run",
    "forever",
    "power",
    "smart",
    "contracts",
    "know",
    "since",
    "picking",
    "random",
    "number",
    "event",
    "driven",
    "execution",
    "know",
    "going",
    "need",
    "use",
    "chain",
    "link",
    "oracle",
    "since",
    "going",
    "need",
    "get",
    "randomness",
    "outside",
    "blockchain",
    "going",
    "need",
    "automated",
    "execution",
    "smart",
    "contract",
    "execute",
    "need",
    "somebody",
    "automatically",
    "trigger",
    "trigger",
    "selecting",
    "winner",
    "gon",
    "na",
    "use",
    "chain",
    "link",
    "keepers",
    "pretty",
    "much",
    "going",
    "entire",
    "code",
    "usually",
    "like",
    "start",
    "project",
    "reason",
    "little",
    "bit",
    "brainstorming",
    "want",
    "jump",
    "really",
    "anything",
    "want",
    "good",
    "idea",
    "trying",
    "build",
    "write",
    "tests",
    "know",
    "going",
    "right",
    "direction",
    "etc",
    "good",
    "idea",
    "going",
    "let",
    "build",
    "per",
    "usual",
    "let",
    "spdx",
    "license",
    "identifier",
    "team",
    "pragma",
    "solidity",
    "little",
    "caret",
    "zero",
    "point",
    "even",
    "zoom",
    "hair",
    "trash",
    "say",
    "contract",
    "raffle",
    "even",
    "make",
    "sure",
    "going",
    "crazy",
    "little",
    "yarn",
    "hardhead",
    "compile",
    "compiled",
    "successfully",
    "want",
    "able",
    "enter",
    "lottery",
    "want",
    "us",
    "able",
    "enter",
    "maybe",
    "create",
    "function",
    "called",
    "enter",
    "raffle",
    "else",
    "want",
    "want",
    "able",
    "pick",
    "random",
    "winner",
    "maybe",
    "create",
    "function",
    "called",
    "pick",
    "random",
    "winner",
    "boom",
    "let",
    "comment",
    "pick",
    "random",
    "winner",
    "let",
    "work",
    "enter",
    "raffle",
    "thing",
    "past",
    "created",
    "projects",
    "like",
    "funmi",
    "people",
    "send",
    "ether",
    "contracts",
    "send",
    "whatever",
    "native",
    "blockchain",
    "token",
    "smart",
    "contracts",
    "using",
    "message",
    "dot",
    "value",
    "based",
    "usd",
    "value",
    "one",
    "going",
    "entrance",
    "fee",
    "instead",
    "usd",
    "based",
    "going",
    "native",
    "asset",
    "enter",
    "raffle",
    "set",
    "usd",
    "price",
    "set",
    "minimum",
    "eath",
    "price",
    "top",
    "let",
    "pick",
    "minimum",
    "price",
    "un",
    "256",
    "entrance",
    "fee",
    "learnings",
    "last",
    "section",
    "come",
    "know",
    "entrance",
    "fee",
    "going",
    "going",
    "storage",
    "variable",
    "let",
    "prepend",
    "underscore",
    "let",
    "make",
    "private",
    "variable",
    "always",
    "want",
    "set",
    "visibility",
    "let",
    "entrance",
    "fee",
    "configurable",
    "well",
    "let",
    "create",
    "constructor",
    "entrance",
    "fee",
    "settable",
    "constructor",
    "constructor",
    "take",
    "unt",
    "two",
    "sixth",
    "entrance",
    "fee",
    "underscore",
    "entrance",
    "fee",
    "equals",
    "entrance",
    "fee",
    "well",
    "gon",
    "na",
    "set",
    "one",
    "time",
    "might",
    "well",
    "make",
    "constant",
    "immutable",
    "variable",
    "let",
    "make",
    "immutable",
    "variable",
    "save",
    "gas",
    "change",
    "saying",
    "interviewed",
    "six",
    "private",
    "immutable",
    "entrance",
    "fee",
    "equals",
    "entrance",
    "fee",
    "probably",
    "going",
    "want",
    "users",
    "see",
    "entrance",
    "fee",
    "create",
    "function",
    "get",
    "entrance",
    "fee",
    "public",
    "view",
    "function",
    "returns",
    "un",
    "set",
    "next",
    "say",
    "return",
    "entrance",
    "fee",
    "function",
    "users",
    "call",
    "get",
    "entrance",
    "fee",
    "developers",
    "use",
    "ai",
    "entrance",
    "fee",
    "know",
    "immutable",
    "variable",
    "pretty",
    "cheap",
    "gas",
    "wise",
    "us",
    "read",
    "enter",
    "raffle",
    "done",
    "ton",
    "need",
    "need",
    "require",
    "message",
    "dot",
    "value",
    "greater",
    "underscore",
    "entrance",
    "fee",
    "learned",
    "error",
    "codes",
    "could",
    "use",
    "require",
    "message",
    "dot",
    "value",
    "could",
    "one",
    "customers",
    "going",
    "lot",
    "gas",
    "efficient",
    "instead",
    "storing",
    "string",
    "going",
    "store",
    "error",
    "code",
    "smart",
    "contract",
    "let",
    "instead",
    "say",
    "message",
    "dot",
    "value",
    "less",
    "eye",
    "entrance",
    "fee",
    "going",
    "revert",
    "whole",
    "transaction",
    "error",
    "code",
    "use",
    "best",
    "practice",
    "naming",
    "raffle",
    "underscore",
    "underscore",
    "enough",
    "eath",
    "entered",
    "grab",
    "arrow",
    "code",
    "user",
    "send",
    "enough",
    "value",
    "revert",
    "enough",
    "eath",
    "entered",
    "know",
    "calling",
    "raffle",
    "enough",
    "value",
    "probably",
    "going",
    "want",
    "keep",
    "track",
    "users",
    "actually",
    "enter",
    "raffle",
    "way",
    "pick",
    "winner",
    "know",
    "running",
    "let",
    "create",
    "array",
    "players",
    "top",
    "error",
    "make",
    "look",
    "even",
    "nicer",
    "little",
    "comment",
    "say",
    "state",
    "variables",
    "combine",
    "storage",
    "storage",
    "variables",
    "state",
    "variable",
    "section",
    "address",
    "array",
    "players",
    "players",
    "course",
    "going",
    "storage",
    "going",
    "modify",
    "lot",
    "going",
    "adding",
    "subtracting",
    "players",
    "time",
    "going",
    "players",
    "make",
    "private",
    "well",
    "going",
    "make",
    "address",
    "payable",
    "players",
    "one",
    "players",
    "wins",
    "going",
    "need",
    "pay",
    "make",
    "address",
    "payable",
    "private",
    "players",
    "since",
    "going",
    "make",
    "private",
    "probably",
    "good",
    "know",
    "players",
    "array",
    "even",
    "function",
    "player",
    "public",
    "view",
    "returns",
    "address",
    "one",
    "players",
    "return",
    "players",
    "index",
    "function",
    "take",
    "un",
    "256",
    "index",
    "input",
    "parameter",
    "know",
    "players",
    "going",
    "storage",
    "variable",
    "going",
    "add",
    "enter",
    "raffle",
    "oh",
    "definitely",
    "want",
    "inter",
    "raffle",
    "public",
    "payable",
    "since",
    "people",
    "send",
    "message",
    "dot",
    "value",
    "want",
    "anyone",
    "able",
    "enter",
    "raffle",
    "public",
    "payable",
    "perfect",
    "array",
    "someone",
    "entered",
    "raffle",
    "players",
    "dot",
    "push",
    "message",
    "dot",
    "sender",
    "actually",
    "work",
    "message",
    "dot",
    "sender",
    "payable",
    "address",
    "need",
    "typecast",
    "payable",
    "address",
    "wrapping",
    "payable",
    "way",
    "keep",
    "track",
    "players",
    "entering",
    "raffle",
    "one",
    "concepts",
    "gone",
    "yet",
    "actually",
    "going",
    "events",
    "events",
    "really",
    "important",
    "smart",
    "contracts",
    "whenever",
    "update",
    "dynamic",
    "object",
    "like",
    "array",
    "mapping",
    "always",
    "want",
    "omit",
    "event",
    "get",
    "less",
    "especially",
    "less",
    "15",
    "next",
    "jas",
    "marketplace",
    "events",
    "make",
    "ton",
    "sense",
    "especially",
    "front",
    "end",
    "developers",
    "right",
    "events",
    "might",
    "little",
    "bit",
    "weird",
    "thing",
    "explain",
    "continue",
    "start",
    "make",
    "sense",
    "going",
    "start",
    "adding",
    "events",
    "smart",
    "contracts",
    "whenever",
    "update",
    "one",
    "dynamically",
    "sized",
    "data",
    "structures",
    "learn",
    "events",
    "use",
    "gon",
    "na",
    "watch",
    "another",
    "video",
    "explains",
    "events",
    "actually",
    "follow",
    "along",
    "video",
    "side",
    "project",
    "let",
    "learn",
    "events",
    "worked",
    "solidity",
    "probably",
    "seen",
    "things",
    "called",
    "events",
    "maybe",
    "seen",
    "something",
    "like",
    "events",
    "always",
    "wondered",
    "chain",
    "link",
    "graph",
    "chain",
    "protocols",
    "work",
    "hood",
    "video",
    "gon",
    "na",
    "learn",
    "logging",
    "events",
    "solidity",
    "viewing",
    "events",
    "ether",
    "scan",
    "working",
    "hard",
    "hat",
    "ethereum",
    "virtual",
    "machine",
    "evm",
    "makes",
    "lot",
    "block",
    "chains",
    "tick",
    "like",
    "aetherium",
    "evm",
    "functionality",
    "called",
    "logging",
    "functionality",
    "things",
    "happen",
    "blockchain",
    "evm",
    "writes",
    "things",
    "specific",
    "data",
    "structure",
    "called",
    "log",
    "actually",
    "read",
    "logs",
    "blockchain",
    "nodes",
    "run",
    "fact",
    "run",
    "node",
    "connect",
    "node",
    "make",
    "f",
    "get",
    "logs",
    "call",
    "get",
    "logs",
    "inside",
    "logs",
    "important",
    "piece",
    "logging",
    "called",
    "events",
    "main",
    "piece",
    "gon",
    "na",
    "talking",
    "today",
    "events",
    "allow",
    "print",
    "information",
    "logging",
    "structure",
    "way",
    "gas",
    "efficient",
    "actually",
    "saving",
    "something",
    "like",
    "storage",
    "variable",
    "events",
    "logs",
    "live",
    "special",
    "data",
    "structure",
    "accessible",
    "smart",
    "contracts",
    "cheaper",
    "smart",
    "contracts",
    "access",
    "trade",
    "still",
    "print",
    "information",
    "important",
    "us",
    "without",
    "save",
    "storage",
    "variable",
    "going",
    "take",
    "much",
    "gas",
    "one",
    "events",
    "tied",
    "smart",
    "contract",
    "account",
    "address",
    "emitted",
    "event",
    "transactions",
    "listening",
    "events",
    "incredibly",
    "helpful",
    "let",
    "say",
    "example",
    "want",
    "something",
    "every",
    "time",
    "somebody",
    "calls",
    "transfer",
    "function",
    "instead",
    "always",
    "reading",
    "variables",
    "looking",
    "something",
    "flip",
    "switch",
    "say",
    "listen",
    "event",
    "transaction",
    "happened",
    "event",
    "emitted",
    "listen",
    "events",
    "lot",
    "chain",
    "infrastructure",
    "works",
    "website",
    "website",
    "reloads",
    "transaction",
    "completes",
    "actually",
    "listening",
    "transaction",
    "finish",
    "listening",
    "event",
    "emitted",
    "could",
    "reload",
    "could",
    "something",
    "else",
    "incredibly",
    "important",
    "front",
    "ends",
    "also",
    "incredibly",
    "important",
    "things",
    "like",
    "chain",
    "link",
    "graph",
    "chain",
    "link",
    "network",
    "chain",
    "link",
    "node",
    "actually",
    "listening",
    "request",
    "data",
    "events",
    "get",
    "random",
    "number",
    "make",
    "api",
    "call",
    "etc",
    "sometimes",
    "way",
    "many",
    "events",
    "need",
    "index",
    "way",
    "makes",
    "sense",
    "query",
    "events",
    "happen",
    "later",
    "date",
    "graph",
    "listens",
    "events",
    "stores",
    "graph",
    "easy",
    "query",
    "later",
    "events",
    "incredibly",
    "powerful",
    "wide",
    "range",
    "uses",
    "also",
    "good",
    "testing",
    "stuff",
    "get",
    "picture",
    "really",
    "sick",
    "know",
    "events",
    "let",
    "look",
    "look",
    "like",
    "use",
    "might",
    "use",
    "smart",
    "contract",
    "development",
    "suite",
    "event",
    "going",
    "look",
    "like",
    "event",
    "called",
    "stored",
    "number",
    "basically",
    "new",
    "type",
    "event",
    "called",
    "stored",
    "number",
    "saying",
    "hey",
    "solidity",
    "hey",
    "smart",
    "contract",
    "new",
    "event",
    "thing",
    "going",
    "omitting",
    "things",
    "typed",
    "stored",
    "number",
    "future",
    "emit",
    "event",
    "going",
    "four",
    "parameters",
    "going",
    "unique",
    "called",
    "old",
    "number",
    "interested",
    "called",
    "new",
    "number",
    "intimidated",
    "six",
    "called",
    "add",
    "number",
    "address",
    "called",
    "center",
    "astute",
    "people",
    "might",
    "noticed",
    "another",
    "keyword",
    "index",
    "keyword",
    "really",
    "important",
    "keyword",
    "omit",
    "one",
    "events",
    "two",
    "kinds",
    "parameters",
    "index",
    "parameters",
    "non",
    "indexed",
    "parameters",
    "three",
    "index",
    "parameters",
    "also",
    "known",
    "topics",
    "see",
    "topic",
    "know",
    "going",
    "indexed",
    "parameter",
    "index",
    "parameters",
    "parameters",
    "much",
    "easier",
    "search",
    "much",
    "easier",
    "query",
    "non",
    "index",
    "parameters",
    "fact",
    "recommend",
    "f",
    "get",
    "logs",
    "function",
    "even",
    "parameter",
    "allows",
    "us",
    "search",
    "specific",
    "topics",
    "much",
    "searchable",
    "non",
    "indexed",
    "ones",
    "non",
    "indexed",
    "ones",
    "harder",
    "search",
    "get",
    "abi",
    "encoded",
    "know",
    "api",
    "order",
    "decode",
    "told",
    "smart",
    "contract",
    "new",
    "type",
    "stored",
    "number",
    "new",
    "kind",
    "event",
    "need",
    "actually",
    "emit",
    "event",
    "order",
    "store",
    "data",
    "logging",
    "data",
    "structure",
    "evm",
    "need",
    "something",
    "looks",
    "like",
    "looks",
    "like",
    "emit",
    "event",
    "looks",
    "similar",
    "calling",
    "function",
    "call",
    "mitt",
    "name",
    "event",
    "add",
    "parameters",
    "like",
    "full",
    "example",
    "smart",
    "contract",
    "event",
    "going",
    "example",
    "walked",
    "hard",
    "hat",
    "smart",
    "contract",
    "whenever",
    "anybody",
    "calls",
    "store",
    "function",
    "going",
    "omit",
    "event",
    "example",
    "transaction",
    "call",
    "store",
    "function",
    "value",
    "one",
    "let",
    "look",
    "logs",
    "see",
    "event",
    "actually",
    "going",
    "look",
    "like",
    "event",
    "going",
    "broken",
    "like",
    "address",
    "contract",
    "account",
    "event",
    "emitted",
    "topics",
    "index",
    "parameters",
    "event",
    "data",
    "abi",
    "encoded",
    "non",
    "index",
    "parameters",
    "event",
    "mean",
    "means",
    "took",
    "parameters",
    "non",
    "indexed",
    "match",
    "together",
    "api",
    "application",
    "binary",
    "interface",
    "pumped",
    "encoding",
    "algorithm",
    "boom",
    "got",
    "api",
    "easy",
    "decode",
    "abi",
    "hard",
    "decode",
    "non",
    "indexed",
    "parameters",
    "cost",
    "less",
    "gas",
    "pump",
    "logs",
    "particular",
    "contract",
    "since",
    "verified",
    "code",
    "verified",
    "contract",
    "ether",
    "scan",
    "knows",
    "abi",
    "view",
    "deke",
    "decoded",
    "mode",
    "hex",
    "mode",
    "obviously",
    "non",
    "decoded",
    "mode",
    "raw",
    "hex",
    "hexadecimal",
    "encoded",
    "mode",
    "read",
    "layout",
    "events",
    "solidity",
    "docs",
    "basic",
    "introduction",
    "events",
    "want",
    "watch",
    "rest",
    "video",
    "wants",
    "actually",
    "practice",
    "using",
    "events",
    "link",
    "videos",
    "code",
    "repository",
    "associated",
    "video",
    "want",
    "play",
    "want",
    "learn",
    "feel",
    "free",
    "ready",
    "refer",
    "back",
    "full",
    "blockchain",
    "solidity",
    "course",
    "jas",
    "want",
    "go",
    "deeper",
    "events",
    "back",
    "learned",
    "little",
    "bit",
    "events",
    "let",
    "add",
    "events",
    "contract",
    "remember",
    "events",
    "get",
    "emitted",
    "data",
    "storage",
    "outside",
    "smart",
    "contract",
    "let",
    "create",
    "event",
    "called",
    "raffle",
    "enter",
    "good",
    "syntax",
    "naming",
    "events",
    "name",
    "events",
    "function",
    "name",
    "reversed",
    "enter",
    "raffle",
    "gon",
    "na",
    "say",
    "raffle",
    "entered",
    "top",
    "state",
    "variables",
    "constructor",
    "create",
    "new",
    "section",
    "called",
    "events",
    "create",
    "first",
    "event",
    "event",
    "raffle",
    "enter",
    "raffle",
    "enter",
    "take",
    "one",
    "index",
    "parameter",
    "address",
    "indexed",
    "player",
    "inter",
    "raffle",
    "going",
    "say",
    "omit",
    "raffle",
    "enter",
    "going",
    "pass",
    "message",
    "dot",
    "sender",
    "going",
    "remove",
    "comments",
    "feel",
    "free",
    "leave",
    "code",
    "along",
    "part",
    "raffle",
    "coding",
    "lottery",
    "coding",
    "process",
    "probably",
    "would",
    "start",
    "already",
    "writing",
    "tests",
    "already",
    "writing",
    "deploy",
    "scripts",
    "reason",
    "good",
    "test",
    "functionality",
    "progress",
    "oftentimes",
    "writing",
    "smart",
    "contracts",
    "constantly",
    "flipping",
    "back",
    "forth",
    "deploy",
    "scripts",
    "contracts",
    "tests",
    "make",
    "sure",
    "everything",
    "exactly",
    "want",
    "purpose",
    "course",
    "make",
    "easy",
    "learn",
    "follow",
    "along",
    "going",
    "going",
    "keep",
    "writing",
    "smart",
    "contract",
    "almost",
    "complete",
    "move",
    "deploy",
    "scripts",
    "tests",
    "minimalistic",
    "sense",
    "essentially",
    "way",
    "people",
    "enter",
    "raffle",
    "need",
    "way",
    "pick",
    "random",
    "winner",
    "going",
    "need",
    "chain",
    "link",
    "vrf",
    "chain",
    "link",
    "keepers",
    "let",
    "watch",
    "sub",
    "lessons",
    "learning",
    "chain",
    "link",
    "vrf",
    "learning",
    "chain",
    "link",
    "keepers",
    "made",
    "videos",
    "going",
    "play",
    "videos",
    "learn",
    "taling",
    "vrf",
    "version",
    "two",
    "works",
    "also",
    "chain",
    "link",
    "keepers",
    "works",
    "going",
    "come",
    "back",
    "going",
    "add",
    "contracts",
    "already",
    "familiar",
    "already",
    "played",
    "feel",
    "free",
    "skip",
    "sections",
    "get",
    "building",
    "hi",
    "name",
    "steven",
    "fluid",
    "today",
    "going",
    "taking",
    "look",
    "chain",
    "links",
    "vrf",
    "version",
    "two",
    "version",
    "two",
    "different",
    "mental",
    "models",
    "aware",
    "want",
    "show",
    "feels",
    "like",
    "using",
    "big",
    "important",
    "thing",
    "know",
    "vera",
    "version",
    "two",
    "instead",
    "vera",
    "one",
    "model",
    "funding",
    "contract",
    "link",
    "instead",
    "going",
    "funding",
    "subscription",
    "basically",
    "account",
    "allows",
    "fund",
    "maintain",
    "balance",
    "multiple",
    "consumer",
    "contracts",
    "let",
    "dive",
    "docs",
    "see",
    "using",
    "vera",
    "fie",
    "two",
    "looks",
    "feels",
    "like",
    "order",
    "show",
    "little",
    "bit",
    "going",
    "dive",
    "right",
    "get",
    "random",
    "number",
    "guide",
    "chain",
    "link",
    "documentation",
    "going",
    "go",
    "requirements",
    "technology",
    "going",
    "use",
    "today",
    "first",
    "thing",
    "going",
    "ask",
    "us",
    "make",
    "sure",
    "rinkeby",
    "test",
    "net",
    "let",
    "go",
    "ahead",
    "jump",
    "rinkeby",
    "make",
    "sure",
    "meta",
    "mask",
    "unlocked",
    "rinkeby",
    "great",
    "able",
    "use",
    "vip",
    "version",
    "test",
    "net",
    "going",
    "jump",
    "subscription",
    "manager",
    "subscription",
    "manager",
    "going",
    "manage",
    "subscription",
    "account",
    "basically",
    "place",
    "put",
    "funds",
    "order",
    "able",
    "use",
    "across",
    "bunch",
    "different",
    "chains",
    "going",
    "go",
    "ahead",
    "connect",
    "wallet",
    "order",
    "use",
    "subscription",
    "app",
    "going",
    "go",
    "ahead",
    "create",
    "new",
    "subscription",
    "use",
    "address",
    "subscription",
    "address",
    "approve",
    "creation",
    "soon",
    "transaction",
    "confirmed",
    "subscription",
    "created",
    "alright",
    "subscription",
    "basically",
    "account",
    "going",
    "fund",
    "use",
    "account",
    "random",
    "miss",
    "requests",
    "gon",
    "na",
    "go",
    "ahead",
    "put",
    "10",
    "link",
    "put",
    "however",
    "much",
    "want",
    "price",
    "link",
    "every",
    "random",
    "number",
    "request",
    "going",
    "based",
    "current",
    "gas",
    "rates",
    "given",
    "chain",
    "well",
    "gasoline",
    "chosen",
    "funds",
    "added",
    "let",
    "go",
    "ahead",
    "add",
    "consumer",
    "contract",
    "asking",
    "us",
    "consumer",
    "address",
    "actually",
    "consumer",
    "address",
    "yet",
    "let",
    "go",
    "ahead",
    "jump",
    "documentation",
    "create",
    "contract",
    "going",
    "request",
    "number",
    "scroll",
    "going",
    "see",
    "vera",
    "fee",
    "consumer",
    "soul",
    "contract",
    "open",
    "remix",
    "let",
    "jump",
    "right",
    "gon",
    "na",
    "notice",
    "different",
    "things",
    "contract",
    "top",
    "got",
    "input",
    "got",
    "vrf",
    "consumer",
    "base",
    "version",
    "two",
    "got",
    "interface",
    "vrf",
    "coordinator",
    "also",
    "reference",
    "link",
    "token",
    "interface",
    "specified",
    "rinkeby",
    "network",
    "example",
    "code",
    "refer",
    "documentation",
    "whatever",
    "chain",
    "going",
    "deploying",
    "going",
    "see",
    "new",
    "options",
    "key",
    "hash",
    "option",
    "way",
    "specify",
    "gasoline",
    "described",
    "documentation",
    "depending",
    "key",
    "hash",
    "choose",
    "given",
    "chain",
    "gas",
    "limit",
    "set",
    "differently",
    "random",
    "number",
    "requests",
    "example",
    "theory",
    "main",
    "net",
    "200",
    "way",
    "key",
    "hash",
    "500",
    "wiki",
    "hash",
    "1000",
    "graykey",
    "hash",
    "also",
    "see",
    "contract",
    "hear",
    "callback",
    "estimate",
    "charge",
    "depending",
    "much",
    "gas",
    "willing",
    "spend",
    "fulfill",
    "random",
    "number",
    "set",
    "value",
    "appropriately",
    "next",
    "request",
    "confirmations",
    "something",
    "verify",
    "would",
    "one",
    "could",
    "control",
    "depending",
    "chain",
    "depending",
    "request",
    "type",
    "nature",
    "request",
    "want",
    "make",
    "actually",
    "change",
    "number",
    "one",
    "important",
    "useful",
    "features",
    "gives",
    "lot",
    "flexibility",
    "control",
    "vrf",
    "actually",
    "specify",
    "number",
    "random",
    "numbers",
    "want",
    "specify",
    "number",
    "words",
    "specify",
    "many",
    "random",
    "went",
    "56",
    "get",
    "back",
    "network",
    "right",
    "constructor",
    "gon",
    "na",
    "see",
    "address",
    "coordinator",
    "address",
    "link",
    "token",
    "see",
    "subscription",
    "id",
    "going",
    "created",
    "deploy",
    "contract",
    "gon",
    "na",
    "go",
    "ahead",
    "get",
    "remember",
    "created",
    "subscription",
    "found",
    "see",
    "subscription",
    "id",
    "deploy",
    "going",
    "use",
    "subscription",
    "id",
    "got",
    "two",
    "methods",
    "look",
    "familiar",
    "got",
    "fulfill",
    "randomness",
    "method",
    "takes",
    "randomness",
    "going",
    "fulfilled",
    "bureau",
    "oracle",
    "well",
    "got",
    "request",
    "random",
    "words",
    "actually",
    "going",
    "initiate",
    "request",
    "oracle",
    "think",
    "actually",
    "already",
    "ready",
    "go",
    "ahead",
    "deploy",
    "let",
    "jump",
    "deploy",
    "screen",
    "select",
    "right",
    "contract",
    "case",
    "fb",
    "consumer",
    "going",
    "make",
    "sure",
    "injected",
    "web",
    "three",
    "actually",
    "deploy",
    "rinkeby",
    "network",
    "going",
    "paste",
    "subscription",
    "id",
    "going",
    "deploy",
    "let",
    "go",
    "ahead",
    "pay",
    "transaction",
    "soon",
    "confirmed",
    "network",
    "show",
    "able",
    "copy",
    "address",
    "add",
    "consumer",
    "authorize",
    "contract",
    "use",
    "subscription",
    "account",
    "let",
    "go",
    "ahead",
    "authorize",
    "another",
    "metamask",
    "transaction",
    "alright",
    "subscription",
    "see",
    "much",
    "link",
    "funded",
    "see",
    "consumer",
    "contract",
    "authorized",
    "consumer",
    "contract",
    "make",
    "requests",
    "randomness",
    "let",
    "go",
    "ahead",
    "make",
    "request",
    "randomness",
    "gon",
    "na",
    "go",
    "back",
    "contract",
    "deployed",
    "gon",
    "na",
    "use",
    "remix",
    "interface",
    "keep",
    "things",
    "simple",
    "going",
    "request",
    "randomness",
    "obviously",
    "going",
    "use",
    "configuration",
    "specified",
    "contract",
    "kind",
    "hard",
    "coded",
    "gon",
    "na",
    "get",
    "words",
    "random",
    "gon",
    "na",
    "hit",
    "request",
    "randomness",
    "confirm",
    "rigby",
    "transaction",
    "soon",
    "transaction",
    "comes",
    "back",
    "notice",
    "actually",
    "request",
    "waiting",
    "oracle",
    "call",
    "fulfill",
    "random",
    "words",
    "contract",
    "storing",
    "random",
    "words",
    "random",
    "words",
    "storage",
    "variable",
    "let",
    "go",
    "ahead",
    "check",
    "see",
    "random",
    "numbers",
    "come",
    "back",
    "oracle",
    "go",
    "random",
    "words",
    "let",
    "request",
    "zeroeth",
    "item",
    "array",
    "looks",
    "like",
    "got",
    "random",
    "number",
    "requested",
    "two",
    "random",
    "numbers",
    "also",
    "item",
    "index",
    "one",
    "right",
    "got",
    "randomness",
    "go",
    "back",
    "subscription",
    "manager",
    "app",
    "going",
    "see",
    "actually",
    "event",
    "history",
    "item",
    "see",
    "spent",
    "point",
    "three",
    "three",
    "link",
    "get",
    "two",
    "random",
    "numbers",
    "taken",
    "journey",
    "see",
    "looks",
    "like",
    "feels",
    "like",
    "use",
    "veera",
    "version",
    "two",
    "learned",
    "little",
    "bit",
    "chainlink",
    "vrf",
    "hope",
    "took",
    "time",
    "go",
    "doxa",
    "chain",
    "link",
    "play",
    "around",
    "little",
    "bit",
    "understand",
    "really",
    "going",
    "going",
    "use",
    "sample",
    "contract",
    "create",
    "function",
    "going",
    "pick",
    "random",
    "winner",
    "chain",
    "contract",
    "coordinates",
    "verifiably",
    "random",
    "chain",
    "link",
    "node",
    "give",
    "us",
    "random",
    "number",
    "could",
    "look",
    "code",
    "directly",
    "chain",
    "come",
    "right",
    "chain",
    "link",
    "github",
    "look",
    "code",
    "actually",
    "happening",
    "provably",
    "randomly",
    "link",
    "github",
    "repo",
    "associated",
    "course",
    "going",
    "create",
    "function",
    "called",
    "pick",
    "random",
    "winner",
    "function",
    "going",
    "called",
    "chain",
    "link",
    "keepers",
    "network",
    "automatically",
    "run",
    "without",
    "us",
    "interact",
    "actually",
    "updating",
    "want",
    "add",
    "stars",
    "saying",
    "view",
    "slash",
    "pure",
    "functions",
    "pick",
    "random",
    "winner",
    "function",
    "actually",
    "going",
    "make",
    "public",
    "going",
    "make",
    "external",
    "external",
    "functions",
    "little",
    "bit",
    "cheaper",
    "public",
    "functions",
    "solidity",
    "knows",
    "contract",
    "call",
    "actually",
    "going",
    "change",
    "name",
    "function",
    "well",
    "soon",
    "get",
    "little",
    "bit",
    "order",
    "us",
    "pick",
    "random",
    "winner",
    "actually",
    "two",
    "things",
    "first",
    "request",
    "random",
    "number",
    "get",
    "something",
    "chainlink",
    "vrf",
    "two",
    "transaction",
    "process",
    "actually",
    "intentional",
    "random",
    "numbers",
    "two",
    "transactions",
    "actually",
    "also",
    "much",
    "better",
    "one",
    "one",
    "transaction",
    "people",
    "could",
    "brute",
    "force",
    "tries",
    "simulating",
    "calling",
    "transaction",
    "learn",
    "simulate",
    "calls",
    "soon",
    "simulate",
    "calling",
    "transactions",
    "see",
    "manipulate",
    "make",
    "sure",
    "winner",
    "want",
    "make",
    "sure",
    "absolutely",
    "fair",
    "nobody",
    "manipulate",
    "smart",
    "contract",
    "winner",
    "lottery",
    "function",
    "actually",
    "going",
    "request",
    "second",
    "func",
    "random",
    "number",
    "going",
    "returned",
    "transaction",
    "actually",
    "get",
    "random",
    "number",
    "chain",
    "link",
    "network",
    "going",
    "actually",
    "send",
    "money",
    "winner",
    "go",
    "chain",
    "link",
    "documentation",
    "function",
    "chain",
    "link",
    "node",
    "calls",
    "function",
    "called",
    "fulfill",
    "random",
    "words",
    "going",
    "requesting",
    "one",
    "could",
    "even",
    "change",
    "request",
    "random",
    "winner",
    "make",
    "clear",
    "make",
    "function",
    "fulfill",
    "random",
    "words",
    "going",
    "internal",
    "override",
    "explain",
    "little",
    "bit",
    "fulfill",
    "fulfill",
    "random",
    "words",
    "basically",
    "means",
    "fulfilling",
    "random",
    "numbers",
    "word",
    "comes",
    "computer",
    "science",
    "terminology",
    "basically",
    "think",
    "fulfill",
    "random",
    "numbers",
    "get",
    "multiple",
    "random",
    "numbers",
    "order",
    "make",
    "raffle",
    "contract",
    "vrf",
    "bowl",
    "import",
    "chain",
    "link",
    "code",
    "go",
    "back",
    "documentation",
    "going",
    "grab",
    "bottom",
    "line",
    "grab",
    "top",
    "line",
    "second",
    "going",
    "import",
    "going",
    "write",
    "want",
    "copy",
    "paste",
    "chain",
    "link",
    "slash",
    "contracts",
    "slash",
    "src",
    "slash",
    "v",
    "slash",
    "v",
    "rf",
    "consumer",
    "base",
    "b",
    "two",
    "dot",
    "sol",
    "since",
    "importing",
    "chainlink",
    "slash",
    "contracts",
    "gon",
    "na",
    "need",
    "add",
    "running",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "chainlink",
    "slash",
    "contracts",
    "able",
    "import",
    "like",
    "going",
    "need",
    "make",
    "raffle",
    "vrf",
    "consumer",
    "base",
    "double",
    "gon",
    "na",
    "need",
    "inherit",
    "vrf",
    "consumer",
    "base",
    "go",
    "node",
    "modules",
    "chain",
    "link",
    "src",
    "v",
    "08",
    "vrf",
    "consumer",
    "base",
    "v",
    "two",
    "comes",
    "function",
    "fulfill",
    "random",
    "words",
    "see",
    "internal",
    "virtual",
    "function",
    "virtual",
    "means",
    "expecting",
    "overwritten",
    "reason",
    "sphere",
    "consumer",
    "base",
    "v",
    "two",
    "vrf",
    "coordinator",
    "use",
    "bit",
    "knows",
    "call",
    "fulfill",
    "random",
    "words",
    "function",
    "function",
    "overriding",
    "back",
    "raffle",
    "dot",
    "salt",
    "going",
    "inherit",
    "vrf",
    "consumer",
    "base",
    "v",
    "two",
    "scroll",
    "fulfill",
    "random",
    "words",
    "add",
    "input",
    "parameters",
    "fulfilled",
    "pill",
    "random",
    "words",
    "going",
    "un",
    "256",
    "request",
    "id",
    "un",
    "256",
    "memory",
    "array",
    "random",
    "words",
    "hit",
    "save",
    "linter",
    "notice",
    "okay",
    "expecting",
    "expecting",
    "us",
    "override",
    "fill",
    "random",
    "words",
    "takes",
    "parameters",
    "look",
    "docs",
    "constructor",
    "need",
    "pass",
    "vrf",
    "consumer",
    "base",
    "v",
    "tos",
    "constructor",
    "pass",
    "vrf",
    "coordinator",
    "v",
    "rf",
    "coordinator",
    "address",
    "contract",
    "random",
    "number",
    "verification",
    "right",
    "next",
    "constructor",
    "add",
    "vrf",
    "consumer",
    "base",
    "v",
    "constructor",
    "need",
    "pass",
    "vrf",
    "coordinator",
    "v2",
    "address",
    "main",
    "constructor",
    "add",
    "parameter",
    "well",
    "say",
    "address",
    "vrf",
    "core",
    "nate",
    "torre",
    "v",
    "two",
    "pass",
    "parameter",
    "vrf",
    "consumer",
    "basically",
    "till",
    "see",
    "little",
    "underscore",
    "anymore",
    "able",
    "run",
    "yarn",
    "compiled",
    "awesome",
    "see",
    "compiled",
    "two",
    "files",
    "successfully",
    "code",
    "working",
    "great",
    "something",
    "often",
    "actually",
    "hate",
    "running",
    "yarn",
    "hard",
    "hat",
    "time",
    "many",
    "keys",
    "little",
    "brain",
    "work",
    "would",
    "prefer",
    "write",
    "little",
    "keys",
    "possible",
    "hard",
    "hat",
    "also",
    "would",
    "like",
    "us",
    "write",
    "little",
    "keys",
    "possible",
    "hard",
    "hat",
    "comes",
    "shorthand",
    "autocomplete",
    "hard",
    "hat",
    "shorthand",
    "npm",
    "package",
    "installs",
    "globally",
    "accessible",
    "binary",
    "called",
    "h",
    "h",
    "runs",
    "project",
    "locally",
    "installed",
    "hard",
    "hat",
    "supports",
    "shell",
    "auto",
    "completion",
    "tasks",
    "going",
    "start",
    "npm",
    "like",
    "gon",
    "na",
    "install",
    "yarn",
    "going",
    "run",
    "yarn",
    "global",
    "add",
    "hardhat",
    "shorthand",
    "going",
    "see",
    "installed",
    "hard",
    "hat",
    "shorthand",
    "binaries",
    "h",
    "h",
    "hardhead",
    "completion",
    "instead",
    "running",
    "yarn",
    "hardhead",
    "compile",
    "still",
    "run",
    "run",
    "h",
    "h",
    "compile",
    "running",
    "h",
    "h",
    "going",
    "thing",
    "run",
    "hardhead",
    "command",
    "local",
    "directory",
    "need",
    "actually",
    "request",
    "random",
    "winner",
    "function",
    "requests",
    "random",
    "winner",
    "let",
    "go",
    "back",
    "documentation",
    "see",
    "look",
    "function",
    "request",
    "random",
    "words",
    "see",
    "exactly",
    "works",
    "vera",
    "coordinator",
    "address",
    "go",
    "ahead",
    "call",
    "request",
    "random",
    "words",
    "function",
    "going",
    "need",
    "call",
    "function",
    "coordinator",
    "contract",
    "get",
    "coordinator",
    "contract",
    "going",
    "use",
    "vera",
    "v2",
    "coordinator",
    "interface",
    "vir",
    "coordinator",
    "address",
    "going",
    "want",
    "keep",
    "track",
    "arkansas",
    "factor",
    "address",
    "passed",
    "bureau",
    "consumer",
    "base",
    "let",
    "also",
    "keep",
    "state",
    "variable",
    "us",
    "first",
    "let",
    "get",
    "interface",
    "interact",
    "contract",
    "import",
    "chain",
    "link",
    "well",
    "import",
    "chain",
    "link",
    "slash",
    "contracts",
    "slash",
    "src",
    "slash",
    "fees",
    "slash",
    "inter",
    "faces",
    "slash",
    "vrf",
    "cord",
    "mentor",
    "v",
    "interface",
    "dot",
    "sol",
    "import",
    "interface",
    "price",
    "feeds",
    "vrf",
    "coordinator",
    "v2",
    "interface",
    "vrf",
    "coordinator",
    "save",
    "sphere",
    "coordinator",
    "using",
    "address",
    "say",
    "vrf",
    "coordinator",
    "equals",
    "address",
    "vrf",
    "coordinator",
    "veto",
    "going",
    "wrap",
    "address",
    "around",
    "interface",
    "work",
    "vrf",
    "coordinator",
    "contract",
    "going",
    "set",
    "vrf",
    "coordinator",
    "one",
    "time",
    "right",
    "constructor",
    "best",
    "thing",
    "private",
    "immutable",
    "gosh",
    "darn",
    "right",
    "let",
    "private",
    "immutable",
    "coordinator",
    "change",
    "name",
    "underscore",
    "ref",
    "coordinator",
    "know",
    "coordinator",
    "indeed",
    "immutable",
    "variable",
    "order",
    "request",
    "random",
    "word",
    "need",
    "give",
    "number",
    "parameters",
    "gon",
    "na",
    "go",
    "ahead",
    "copy",
    "line",
    "contract",
    "talk",
    "exactly",
    "going",
    "need",
    "aes",
    "request",
    "id",
    "instead",
    "coordinator",
    "going",
    "underscore",
    "fear",
    "coordinator",
    "going",
    "call",
    "request",
    "random",
    "words",
    "vrf",
    "coordinator",
    "contract",
    "need",
    "pass",
    "key",
    "hash",
    "gasoline",
    "prefer",
    "calling",
    "gas",
    "lane",
    "go",
    "chain",
    "link",
    "doc",
    "go",
    "contract",
    "addresses",
    "scroll",
    "see",
    "different",
    "gas",
    "lanes",
    "different",
    "configuration",
    "parameters",
    "different",
    "networks",
    "key",
    "hash",
    "going",
    "gasoline",
    "key",
    "hash",
    "tells",
    "chain",
    "link",
    "node",
    "maximum",
    "price",
    "willing",
    "pay",
    "guests",
    "way",
    "example",
    "gas",
    "prices",
    "skyrocket",
    "going",
    "cost",
    "ton",
    "money",
    "get",
    "random",
    "number",
    "setting",
    "ceiling",
    "make",
    "random",
    "number",
    "come",
    "back",
    "us",
    "pick",
    "gas",
    "lane",
    "probably",
    "going",
    "want",
    "gas",
    "lane",
    "key",
    "hash",
    "stored",
    "somewhere",
    "let",
    "go",
    "ahead",
    "make",
    "parameter",
    "constructor",
    "well",
    "save",
    "state",
    "variable",
    "comma",
    "bytes",
    "32",
    "gasoline",
    "key",
    "hash",
    "whatever",
    "want",
    "call",
    "make",
    "new",
    "state",
    "variable",
    "going",
    "set",
    "make",
    "private",
    "immutable",
    "underscore",
    "gasoline",
    "say",
    "gasoline",
    "equals",
    "gasoline",
    "swap",
    "underscore",
    "gasoline",
    "okay",
    "next",
    "need",
    "subscription",
    "id",
    "subscription",
    "id",
    "going",
    "subscription",
    "need",
    "funding",
    "requests",
    "actually",
    "contract",
    "chain",
    "use",
    "fund",
    "subscription",
    "external",
    "data",
    "external",
    "computation",
    "bits",
    "contract",
    "list",
    "subscriptions",
    "people",
    "make",
    "requests",
    "need",
    "id",
    "subscription",
    "using",
    "request",
    "random",
    "numbers",
    "pay",
    "link",
    "oracle",
    "gas",
    "subscription",
    "id",
    "probably",
    "also",
    "going",
    "something",
    "going",
    "pass",
    "parameter",
    "lottery",
    "let",
    "scroll",
    "constructor",
    "add",
    "new",
    "parameter",
    "subscription",
    "id",
    "actually",
    "need",
    "un",
    "256",
    "actually",
    "little",
    "bit",
    "smaller",
    "un",
    "pass",
    "un",
    "64",
    "sub",
    "scription",
    "id",
    "make",
    "unt",
    "since",
    "going",
    "set",
    "make",
    "private",
    "immutable",
    "underscore",
    "sub",
    "scription",
    "id",
    "say",
    "subscription",
    "id",
    "equals",
    "sub",
    "subscription",
    "id",
    "alright",
    "awesome",
    "change",
    "subscription",
    "id",
    "okay",
    "next",
    "request",
    "confirmations",
    "request",
    "confirmations",
    "un",
    "16",
    "says",
    "many",
    "confirmations",
    "chain",
    "link",
    "node",
    "wait",
    "responding",
    "make",
    "request",
    "one",
    "block",
    "confirmation",
    "maybe",
    "actually",
    "send",
    "afraid",
    "type",
    "blockchain",
    "reorganization",
    "something",
    "going",
    "worry",
    "much",
    "actually",
    "going",
    "make",
    "constant",
    "three",
    "even",
    "going",
    "per",
    "amortizable",
    "gon",
    "na",
    "one",
    "constant",
    "say",
    "int",
    "16",
    "private",
    "constant",
    "request",
    "confirmations",
    "equals",
    "three",
    "using",
    "capslock",
    "underscores",
    "constant",
    "variables",
    "grab",
    "request",
    "confirmations",
    "stick",
    "right",
    "next",
    "callback",
    "gas",
    "limit",
    "callback",
    "gas",
    "limit",
    "going",
    "limit",
    "much",
    "gas",
    "use",
    "callback",
    "request",
    "contracts",
    "fulfill",
    "random",
    "words",
    "sets",
    "limit",
    "much",
    "computation",
    "fulfilled",
    "random",
    "words",
    "good",
    "way",
    "protect",
    "spending",
    "way",
    "much",
    "gas",
    "example",
    "accidentally",
    "code",
    "contract",
    "way",
    "fulfill",
    "random",
    "words",
    "incredibly",
    "gas",
    "expensive",
    "block",
    "random",
    "number",
    "responding",
    "going",
    "make",
    "parameter",
    "sizable",
    "want",
    "change",
    "depending",
    "code",
    "fulfill",
    "random",
    "word",
    "constructor",
    "let",
    "add",
    "one",
    "add",
    "int",
    "since",
    "size",
    "un",
    "32",
    "callback",
    "gas",
    "limit",
    "save",
    "sub",
    "top",
    "unt",
    "32",
    "private",
    "immutable",
    "underscore",
    "call",
    "back",
    "yes",
    "limit",
    "save",
    "call",
    "back",
    "gas",
    "limit",
    "equals",
    "call",
    "back",
    "yes",
    "limit",
    "take",
    "stick",
    "right",
    "got",
    "one",
    "number",
    "words",
    "going",
    "many",
    "random",
    "numbers",
    "want",
    "get",
    "want",
    "one",
    "gon",
    "na",
    "go",
    "back",
    "top",
    "going",
    "create",
    "int",
    "make",
    "also",
    "private",
    "constant",
    "num",
    "words",
    "equals",
    "one",
    "want",
    "one",
    "random",
    "number",
    "last",
    "thing",
    "need",
    "add",
    "ivf",
    "coordinator",
    "dot",
    "request",
    "random",
    "words",
    "request",
    "random",
    "words",
    "function",
    "returns",
    "request",
    "id",
    "un",
    "256",
    "request",
    "id",
    "unique",
    "id",
    "defines",
    "requesting",
    "information",
    "want",
    "save",
    "u",
    "request",
    "id",
    "ivf",
    "coordinator",
    "requests",
    "random",
    "words",
    "going",
    "emit",
    "event",
    "request",
    "id",
    "go",
    "going",
    "little",
    "bit",
    "later",
    "create",
    "new",
    "event",
    "top",
    "going",
    "follow",
    "naming",
    "convention",
    "going",
    "change",
    "name",
    "functions",
    "little",
    "bit",
    "going",
    "call",
    "requested",
    "raffle",
    "winner",
    "going",
    "take",
    "un",
    "256",
    "indexed",
    "request",
    "id",
    "gon",
    "na",
    "omit",
    "requested",
    "raffle",
    "winner",
    "request",
    "id",
    "function",
    "use",
    "request",
    "random",
    "winner",
    "using",
    "chain",
    "link",
    "vrf",
    "going",
    "set",
    "chain",
    "link",
    "keepers",
    "call",
    "interval",
    "little",
    "bit",
    "let",
    "figure",
    "get",
    "random",
    "number",
    "get",
    "random",
    "number",
    "going",
    "want",
    "pick",
    "random",
    "winner",
    "array",
    "players",
    "well",
    "let",
    "go",
    "let",
    "pick",
    "random",
    "winner",
    "using",
    "something",
    "called",
    "module",
    "function",
    "gon",
    "na",
    "get",
    "array",
    "back",
    "random",
    "words",
    "random",
    "numbers",
    "since",
    "requesting",
    "one",
    "random",
    "word",
    "random",
    "words",
    "array",
    "going",
    "size",
    "one",
    "one",
    "random",
    "word",
    "random",
    "word",
    "un",
    "random",
    "word",
    "could",
    "something",
    "like",
    "well",
    "obviously",
    "without",
    "hyphens",
    "could",
    "something",
    "absolutely",
    "massive",
    "like",
    "players",
    "array",
    "going",
    "big",
    "get",
    "random",
    "winner",
    "potentially",
    "massive",
    "random",
    "number",
    "use",
    "something",
    "called",
    "modulo",
    "function",
    "module",
    "operation",
    "mod",
    "n",
    "yields",
    "remainder",
    "division",
    "operand",
    "blah",
    "blah",
    "blah",
    "blah",
    "blah",
    "mean",
    "well",
    "use",
    "mod",
    "function",
    "get",
    "random",
    "number",
    "players",
    "array",
    "let",
    "say",
    "players",
    "array",
    "excuse",
    "players",
    "array",
    "size",
    "random",
    "number",
    "pick",
    "random",
    "person",
    "players",
    "array",
    "let",
    "say",
    "random",
    "number",
    "202",
    "random",
    "number",
    "mod",
    "10",
    "gon",
    "na",
    "basically",
    "202",
    "divided",
    "instead",
    "decimals",
    "going",
    "say",
    "okay",
    "many",
    "times",
    "10",
    "evenly",
    "divide",
    "remainder",
    "divide",
    "evenly",
    "202",
    "well",
    "20",
    "times",
    "10",
    "equals",
    "200",
    "two",
    "leftover",
    "two",
    "evenly",
    "divide",
    "multiply",
    "means",
    "202",
    "mod",
    "10",
    "going",
    "equal",
    "two",
    "module",
    "function",
    "works",
    "use",
    "always",
    "going",
    "get",
    "number",
    "always",
    "going",
    "get",
    "number",
    "zero",
    "nine",
    "works",
    "perfectly",
    "works",
    "perfectly",
    "indexes",
    "10",
    "people",
    "array",
    "let",
    "use",
    "say",
    "un",
    "256",
    "index",
    "winner",
    "going",
    "equal",
    "random",
    "words",
    "index",
    "zero",
    "getting",
    "one",
    "random",
    "word",
    "module",
    "underscore",
    "players",
    "dot",
    "length",
    "give",
    "us",
    "index",
    "random",
    "winner",
    "get",
    "address",
    "winner",
    "address",
    "payable",
    "recent",
    "winner",
    "equals",
    "players",
    "index",
    "winner",
    "awesome",
    "address",
    "person",
    "got",
    "random",
    "number",
    "person",
    "going",
    "verifiably",
    "random",
    "winner",
    "might",
    "kind",
    "cool",
    "brag",
    "people",
    "recent",
    "winner",
    "let",
    "go",
    "ahead",
    "top",
    "create",
    "new",
    "state",
    "variable",
    "recent",
    "winner",
    "make",
    "state",
    "variable",
    "new",
    "section",
    "called",
    "lottery",
    "variables",
    "say",
    "address",
    "private",
    "underscore",
    "recent",
    "winner",
    "start",
    "nobody",
    "get",
    "winners",
    "update",
    "recent",
    "winner",
    "equals",
    "recent",
    "winner",
    "probably",
    "want",
    "people",
    "know",
    "winter",
    "function",
    "get",
    "recent",
    "winner",
    "going",
    "public",
    "view",
    "going",
    "return",
    "address",
    "say",
    "return",
    "underscore",
    "recent",
    "winner",
    "since",
    "recent",
    "winner",
    "going",
    "storage",
    "variable",
    "recent",
    "winner",
    "else",
    "gon",
    "na",
    "well",
    "probably",
    "going",
    "want",
    "send",
    "money",
    "contract",
    "going",
    "exactly",
    "sending",
    "money",
    "going",
    "bull",
    "success",
    "comma",
    "blank",
    "equals",
    "recent",
    "winner",
    "call",
    "gon",
    "na",
    "say",
    "value",
    "going",
    "address",
    "dot",
    "balance",
    "going",
    "send",
    "money",
    "contract",
    "going",
    "pass",
    "data",
    "could",
    "say",
    "require",
    "know",
    "success",
    "whatever",
    "going",
    "little",
    "bit",
    "gas",
    "efficient",
    "gon",
    "na",
    "say",
    "success",
    "going",
    "revert",
    "new",
    "transfer",
    "failed",
    "error",
    "gon",
    "na",
    "go",
    "top",
    "say",
    "error",
    "name",
    "contract",
    "raffle",
    "underscore",
    "underscore",
    "transfer",
    "failed",
    "like",
    "go",
    "back",
    "revert",
    "raffle",
    "transfer",
    "failed",
    "like",
    "picked",
    "winner",
    "right",
    "way",
    "actually",
    "keep",
    "track",
    "list",
    "previous",
    "winners",
    "going",
    "omit",
    "event",
    "always",
    "going",
    "easily",
    "query",
    "double",
    "history",
    "event",
    "winners",
    "going",
    "create",
    "new",
    "event",
    "events",
    "section",
    "called",
    "event",
    "winner",
    "picked",
    "going",
    "address",
    "indexed",
    "winner",
    "scroll",
    "mit",
    "winner",
    "picked",
    "address",
    "recent",
    "winner",
    "looks",
    "pretty",
    "good",
    "looks",
    "pretty",
    "good",
    "notice",
    "request",
    "id",
    "little",
    "underscore",
    "saying",
    "hey",
    "unused",
    "function",
    "parameter",
    "since",
    "use",
    "still",
    "need",
    "fulfill",
    "random",
    "words",
    "take",
    "request",
    "id",
    "random",
    "words",
    "array",
    "use",
    "request",
    "id",
    "comment",
    "request",
    "id",
    "part",
    "like",
    "tells",
    "function",
    "hey",
    "yes",
    "know",
    "need",
    "un",
    "going",
    "use",
    "request",
    "id",
    "leave",
    "leave",
    "blank",
    "let",
    "run",
    "little",
    "compile",
    "use",
    "yarn",
    "hard",
    "hat",
    "compile",
    "hh",
    "compile",
    "see",
    "coding",
    "things",
    "correctly",
    "indeed",
    "see",
    "errors",
    "perfect",
    "continue",
    "added",
    "chain",
    "link",
    "vrf",
    "way",
    "verifiably",
    "get",
    "random",
    "winner",
    "fantastic",
    "let",
    "update",
    "contract",
    "pick",
    "verifiable",
    "winner",
    "also",
    "programmatically",
    "automatically",
    "trigger",
    "picking",
    "random",
    "winner",
    "based",
    "time",
    "interval",
    "without",
    "us",
    "interact",
    "decentralized",
    "context",
    "order",
    "us",
    "automatically",
    "trigger",
    "smart",
    "contracts",
    "based",
    "parameter",
    "time",
    "parameter",
    "maybe",
    "price",
    "asset",
    "number",
    "maybe",
    "certain",
    "amount",
    "money",
    "liquidity",
    "pool",
    "really",
    "whatever",
    "trigger",
    "want",
    "use",
    "chain",
    "link",
    "keepers",
    "steven",
    "fluid",
    "done",
    "amazing",
    "introduction",
    "chain",
    "keepers",
    "going",
    "follow",
    "along",
    "another",
    "sub",
    "video",
    "section",
    "steven",
    "explaining",
    "chain",
    "link",
    "keeper",
    "sauce",
    "going",
    "using",
    "covid",
    "test",
    "net",
    "sure",
    "use",
    "whatever",
    "test",
    "net",
    "documentation",
    "play",
    "try",
    "name",
    "steven",
    "foon",
    "today",
    "want",
    "show",
    "use",
    "chain",
    "link",
    "keeper",
    "network",
    "order",
    "automate",
    "contracts",
    "give",
    "access",
    "chain",
    "computation",
    "let",
    "go",
    "ahead",
    "dive",
    "going",
    "look",
    "today",
    "going",
    "start",
    "chain",
    "link",
    "documentation",
    "webpage",
    "scroll",
    "little",
    "bit",
    "going",
    "find",
    "using",
    "chain",
    "link",
    "keepers",
    "really",
    "two",
    "parts",
    "building",
    "chain",
    "link",
    "keeper",
    "kept",
    "smart",
    "contract",
    "first",
    "thing",
    "need",
    "write",
    "smart",
    "contract",
    "compatible",
    "implementing",
    "two",
    "methods",
    "second",
    "want",
    "register",
    "smart",
    "contract",
    "upkeep",
    "channeling",
    "keeper",
    "network",
    "let",
    "go",
    "ahead",
    "things",
    "let",
    "start",
    "copying",
    "deploying",
    "sample",
    "code",
    "got",
    "one",
    "click",
    "remix",
    "gon",
    "na",
    "see",
    "simple",
    "contract",
    "simple",
    "counter",
    "see",
    "got",
    "counter",
    "got",
    "simple",
    "number",
    "able",
    "specify",
    "create",
    "contract",
    "update",
    "interval",
    "contract",
    "going",
    "verify",
    "hey",
    "enough",
    "time",
    "passed",
    "let",
    "update",
    "counter",
    "going",
    "notice",
    "chinley",
    "compatible",
    "timekeeper",
    "network",
    "compatible",
    "contracts",
    "use",
    "two",
    "really",
    "important",
    "methods",
    "part",
    "keeper",
    "compatible",
    "interface",
    "first",
    "check",
    "upkeep",
    "check",
    "upkeep",
    "special",
    "chain",
    "computation",
    "happens",
    "method",
    "actually",
    "run",
    "chain",
    "run",
    "chain",
    "node",
    "channeling",
    "keeper",
    "network",
    "really",
    "nice",
    "gas",
    "used",
    "actually",
    "gas",
    "chains",
    "run",
    "chain",
    "link",
    "node",
    "happens",
    "check",
    "upkeep",
    "method",
    "returns",
    "upkeep",
    "needed",
    "going",
    "go",
    "ahead",
    "perform",
    "upkeep",
    "chain",
    "actually",
    "generate",
    "data",
    "chain",
    "pass",
    "called",
    "check",
    "data",
    "becomes",
    "performed",
    "data",
    "passed",
    "perform",
    "upkeep",
    "perform",
    "upkeep",
    "method",
    "going",
    "want",
    "verify",
    "things",
    "correct",
    "things",
    "actually",
    "modified",
    "run",
    "chain",
    "actually",
    "make",
    "state",
    "change",
    "let",
    "go",
    "ahead",
    "compile",
    "contract",
    "deploy",
    "covid",
    "network",
    "let",
    "go",
    "ahead",
    "within",
    "remix",
    "compilation",
    "going",
    "compile",
    "deploy",
    "directly",
    "covid",
    "zookeeper",
    "network",
    "currently",
    "filming",
    "available",
    "covid",
    "well",
    "theory",
    "main",
    "net",
    "let",
    "go",
    "ahead",
    "play",
    "counter",
    "contract",
    "let",
    "see",
    "updating",
    "every",
    "30",
    "seconds",
    "let",
    "go",
    "ahead",
    "deploy",
    "meta",
    "masks",
    "ask",
    "little",
    "bit",
    "payment",
    "order",
    "deploy",
    "contract",
    "covid",
    "network",
    "looks",
    "like",
    "live",
    "going",
    "going",
    "able",
    "take",
    "keeper",
    "contract",
    "copy",
    "address",
    "going",
    "register",
    "contract",
    "upkeep",
    "going",
    "jump",
    "application",
    "powers",
    "champion",
    "keeper",
    "network",
    "different",
    "ways",
    "use",
    "interact",
    "directly",
    "registry",
    "contract",
    "nice",
    "interface",
    "lets",
    "let",
    "go",
    "ahead",
    "register",
    "new",
    "upkeep",
    "giving",
    "error",
    "says",
    "need",
    "connect",
    "wallet",
    "let",
    "go",
    "ahead",
    "going",
    "connect",
    "wallet",
    "gon",
    "na",
    "give",
    "access",
    "account",
    "actually",
    "able",
    "register",
    "going",
    "use",
    "email",
    "address",
    "give",
    "contract",
    "simple",
    "name",
    "paste",
    "address",
    "deployed",
    "contract",
    "give",
    "gas",
    "limit",
    "check",
    "data",
    "special",
    "thing",
    "actually",
    "register",
    "multiple",
    "upkeeps",
    "contract",
    "passing",
    "data",
    "specify",
    "want",
    "checkup",
    "keep",
    "run",
    "going",
    "ignore",
    "optional",
    "one",
    "give",
    "starting",
    "balance",
    "around",
    "10",
    "link",
    "gon",
    "na",
    "go",
    "ahead",
    "use",
    "metamask",
    "register",
    "transaction",
    "network",
    "confirmed",
    "upkeep",
    "registered",
    "network",
    "funded",
    "10",
    "link",
    "kick",
    "things",
    "alright",
    "go",
    "ahead",
    "view",
    "upkeep",
    "see",
    "registered",
    "soon",
    "next",
    "round",
    "keeper",
    "nodes",
    "executes",
    "roughly",
    "every",
    "block",
    "see",
    "check",
    "upkeep",
    "method",
    "going",
    "return",
    "hey",
    "upkeep",
    "actually",
    "needed",
    "timestamp",
    "30",
    "seconds",
    "ago",
    "go",
    "ahead",
    "perform",
    "upkeep",
    "soon",
    "take",
    "look",
    "remix",
    "actually",
    "make",
    "bigger",
    "going",
    "able",
    "see",
    "methods",
    "contract",
    "check",
    "counter",
    "going",
    "start",
    "zero",
    "soon",
    "30",
    "seconds",
    "passed",
    "able",
    "hit",
    "counter",
    "see",
    "channeling",
    "keeper",
    "network",
    "performed",
    "upkeep",
    "contract",
    "alright",
    "refresh",
    "see",
    "balance",
    "upkeep",
    "decreased",
    "point",
    "01",
    "link",
    "also",
    "see",
    "within",
    "contract",
    "counter",
    "updated",
    "via",
    "proof",
    "perform",
    "upkeep",
    "method",
    "call",
    "counter",
    "one",
    "showing",
    "us",
    "contract",
    "approved",
    "chainlink",
    "keeper",
    "network",
    "everything",
    "working",
    "exactly",
    "expect",
    "see",
    "easy",
    "create",
    "contract",
    "compatible",
    "keeper",
    "network",
    "easy",
    "register",
    "upkeep",
    "start",
    "seeing",
    "contract",
    "automation",
    "option",
    "computation",
    "working",
    "flawlessly",
    "learned",
    "little",
    "bit",
    "chainlink",
    "keepers",
    "work",
    "want",
    "take",
    "time",
    "go",
    "documentation",
    "open",
    "way",
    "open",
    "remix",
    "button",
    "actually",
    "work",
    "one",
    "see",
    "action",
    "test",
    "net",
    "feel",
    "free",
    "gon",
    "na",
    "using",
    "setup",
    "similar",
    "keepers",
    "counter",
    "setup",
    "chain",
    "link",
    "documentation",
    "let",
    "update",
    "code",
    "request",
    "random",
    "numbers",
    "automatically",
    "happens",
    "using",
    "chain",
    "link",
    "keepers",
    "look",
    "example",
    "contract",
    "actually",
    "read",
    "really",
    "important",
    "work",
    "need",
    "check",
    "upkeep",
    "perform",
    "upkeep",
    "function",
    "code",
    "instead",
    "request",
    "random",
    "winner",
    "going",
    "perform",
    "upkeep",
    "going",
    "change",
    "first",
    "let",
    "make",
    "check",
    "upkeep",
    "checkup",
    "keep",
    "function",
    "basically",
    "going",
    "checking",
    "see",
    "time",
    "us",
    "get",
    "random",
    "number",
    "update",
    "recent",
    "winner",
    "send",
    "funds",
    "let",
    "go",
    "ahead",
    "make",
    "function",
    "going",
    "add",
    "notes",
    "clear",
    "going",
    "maybe",
    "even",
    "natspec",
    "tell",
    "developers",
    "going",
    "function",
    "going",
    "create",
    "function",
    "check",
    "upkeep",
    "look",
    "needs",
    "needs",
    "external",
    "override",
    "external",
    "override",
    "see",
    "override",
    "keyword",
    "means",
    "okay",
    "probably",
    "perform",
    "upkeep",
    "somewhere",
    "else",
    "scroll",
    "top",
    "going",
    "import",
    "keeper",
    "compatible",
    "interface",
    "make",
    "sure",
    "implement",
    "check",
    "upkeep",
    "perform",
    "upkeep",
    "code",
    "want",
    "import",
    "keeper",
    "compatible",
    "keeper",
    "compatible",
    "interface",
    "code",
    "going",
    "import",
    "chain",
    "link",
    "slash",
    "contracts",
    "slash",
    "src",
    "slash",
    "v",
    "point",
    "two",
    "interfaces",
    "slash",
    "keeper",
    "compatible",
    "interface",
    "soul",
    "gon",
    "na",
    "say",
    "contract",
    "raffle",
    "veera",
    "consumer",
    "base",
    "v",
    "two",
    "keeper",
    "compatible",
    "interface",
    "keeper",
    "compatible",
    "interface",
    "inheritance",
    "make",
    "sure",
    "add",
    "checkup",
    "keep",
    "perform",
    "upkeep",
    "going",
    "add",
    "little",
    "bit",
    "look",
    "back",
    "docs",
    "see",
    "checkup",
    "keep",
    "takes",
    "bytes",
    "called",
    "data",
    "check",
    "data",
    "input",
    "parameter",
    "bytes",
    "called",
    "data",
    "check",
    "data",
    "parameter",
    "check",
    "upkeep",
    "bytes",
    "call",
    "data",
    "allows",
    "us",
    "specify",
    "really",
    "anything",
    "want",
    "call",
    "check",
    "upkeep",
    "function",
    "check",
    "data",
    "type",
    "bytes",
    "means",
    "even",
    "specify",
    "call",
    "functions",
    "lot",
    "advanced",
    "things",
    "input",
    "parameter",
    "type",
    "bytes",
    "us",
    "though",
    "going",
    "keep",
    "little",
    "bit",
    "simple",
    "actually",
    "going",
    "use",
    "check",
    "data",
    "piece",
    "similar",
    "using",
    "request",
    "id",
    "comment",
    "however",
    "still",
    "need",
    "make",
    "sure",
    "parameter",
    "type",
    "bytes",
    "called",
    "data",
    "anyways",
    "let",
    "go",
    "ahead",
    "annotate",
    "check",
    "upkeep",
    "function",
    "say",
    "function",
    "chain",
    "link",
    "keeper",
    "nodes",
    "call",
    "look",
    "return",
    "true",
    "look",
    "back",
    "documentation",
    "see",
    "check",
    "upkeep",
    "returns",
    "upkeep",
    "needed",
    "perform",
    "data",
    "going",
    "ignore",
    "upkeep",
    "needed",
    "going",
    "true",
    "false",
    "true",
    "means",
    "time",
    "get",
    "new",
    "random",
    "number",
    "following",
    "true",
    "order",
    "return",
    "true",
    "order",
    "time",
    "request",
    "random",
    "winner",
    "happen",
    "time",
    "interval",
    "passed",
    "defined",
    "yet",
    "lottery",
    "least",
    "one",
    "player",
    "eath",
    "subscription",
    "funded",
    "link",
    "similar",
    "channeling",
    "vir",
    "f",
    "subscription",
    "needs",
    "funded",
    "link",
    "thing",
    "needs",
    "happen",
    "check",
    "upkeep",
    "keepers",
    "run",
    "subscription",
    "needs",
    "funded",
    "link",
    "going",
    "add",
    "one",
    "additional",
    "piece",
    "going",
    "say",
    "lottery",
    "open",
    "state",
    "something",
    "want",
    "avoid",
    "waiting",
    "random",
    "number",
    "return",
    "requested",
    "random",
    "winner",
    "technically",
    "weird",
    "limbo",
    "state",
    "waiting",
    "random",
    "number",
    "returned",
    "really",
    "allow",
    "new",
    "players",
    "join",
    "actually",
    "want",
    "create",
    "state",
    "variable",
    "telling",
    "us",
    "whether",
    "lottery",
    "open",
    "waiting",
    "random",
    "number",
    "get",
    "back",
    "closed",
    "calculating",
    "state",
    "could",
    "top",
    "contract",
    "say",
    "boolean",
    "private",
    "underscore",
    "open",
    "set",
    "true",
    "open",
    "otherwise",
    "false",
    "well",
    "ton",
    "different",
    "states",
    "want",
    "like",
    "pending",
    "open",
    "closed",
    "calculating",
    "etc",
    "ton",
    "different",
    "states",
    "well",
    "could",
    "make",
    "u",
    "private",
    "underscore",
    "state",
    "could",
    "keep",
    "track",
    "state",
    "like",
    "zero",
    "b",
    "pending",
    "one",
    "reopen",
    "closed",
    "three",
    "calculating",
    "etc",
    "little",
    "tricky",
    "keep",
    "track",
    "better",
    "way",
    "actually",
    "keep",
    "track",
    "code",
    "use",
    "enum",
    "enums",
    "used",
    "create",
    "custom",
    "types",
    "finite",
    "set",
    "constant",
    "values",
    "create",
    "example",
    "state",
    "created",
    "locked",
    "inactive",
    "basically",
    "new",
    "type",
    "smart",
    "contract",
    "us",
    "going",
    "create",
    "new",
    "type",
    "go",
    "back",
    "layout",
    "variables",
    "smart",
    "contract",
    "types",
    "actually",
    "first",
    "thing",
    "contract",
    "going",
    "create",
    "e",
    "new",
    "called",
    "raffle",
    "state",
    "going",
    "open",
    "gon",
    "na",
    "open",
    "calculating",
    "create",
    "enum",
    "like",
    "kind",
    "secretly",
    "creating",
    "un",
    "256",
    "zero",
    "equals",
    "open",
    "one",
    "equals",
    "calculating",
    "however",
    "much",
    "explicit",
    "know",
    "one",
    "numbers",
    "actually",
    "means",
    "created",
    "new",
    "type",
    "called",
    "raffle",
    "state",
    "create",
    "new",
    "lottery",
    "state",
    "variable",
    "type",
    "raffle",
    "state",
    "exact",
    "way",
    "declare",
    "variable",
    "name",
    "type",
    "going",
    "raffle",
    "state",
    "going",
    "storage",
    "variable",
    "go",
    "ahead",
    "private",
    "underscore",
    "raffle",
    "state",
    "constructor",
    "right",
    "launched",
    "contract",
    "open",
    "raffle",
    "say",
    "raffle",
    "state",
    "equals",
    "could",
    "use",
    "un",
    "wrapped",
    "type",
    "raffle",
    "state",
    "like",
    "explicit",
    "say",
    "raffle",
    "state",
    "dot",
    "open",
    "know",
    "raffle",
    "state",
    "open",
    "state",
    "want",
    "checkup",
    "keep",
    "work",
    "lottery",
    "actually",
    "open",
    "additionally",
    "probably",
    "want",
    "people",
    "able",
    "enter",
    "law",
    "battery",
    "open",
    "let",
    "go",
    "ahead",
    "create",
    "another",
    "statement",
    "revert",
    "lottery",
    "open",
    "say",
    "underscore",
    "raffle",
    "state",
    "equal",
    "raffle",
    "state",
    "dot",
    "open",
    "going",
    "revert",
    "new",
    "error",
    "going",
    "create",
    "raffle",
    "underscore",
    "underscore",
    "open",
    "course",
    "top",
    "create",
    "error",
    "raffle",
    "open",
    "additionally",
    "let",
    "go",
    "requesting",
    "random",
    "word",
    "let",
    "update",
    "state",
    "calculating",
    "people",
    "ca",
    "jump",
    "right",
    "vrf",
    "coordinator",
    "dot",
    "request",
    "random",
    "words",
    "underscore",
    "raffle",
    "state",
    "equals",
    "raffle",
    "state",
    "dot",
    "calculating",
    "nobody",
    "enter",
    "lottery",
    "nobody",
    "trigger",
    "new",
    "update",
    "fulfill",
    "pick",
    "winner",
    "say",
    "raffle",
    "state",
    "equals",
    "raffle",
    "state",
    "dot",
    "open",
    "something",
    "else",
    "forgot",
    "pick",
    "winner",
    "players",
    "need",
    "reset",
    "players",
    "array",
    "let",
    "add",
    "well",
    "players",
    "equals",
    "new",
    "address",
    "payable",
    "array",
    "size",
    "zero",
    "reset",
    "raffle",
    "state",
    "reset",
    "players",
    "array",
    "alright",
    "great",
    "learned",
    "enum",
    "let",
    "add",
    "checkup",
    "keep",
    "going",
    "check",
    "four",
    "things",
    "pass",
    "checkup",
    "keys",
    "true",
    "trigger",
    "chain",
    "keepers",
    "request",
    "new",
    "random",
    "winner",
    "first",
    "say",
    "bool",
    "open",
    "going",
    "equal",
    "raffle",
    "state",
    "open",
    "equals",
    "equals",
    "underscore",
    "raffle",
    "state",
    "think",
    "boolean",
    "open",
    "going",
    "true",
    "raffle",
    "state",
    "open",
    "state",
    "false",
    "raffle",
    "state",
    "state",
    "great",
    "open",
    "boolean",
    "check",
    "later",
    "else",
    "need",
    "well",
    "need",
    "check",
    "make",
    "sure",
    "time",
    "interval",
    "past",
    "well",
    "time",
    "interval",
    "yet",
    "let",
    "create",
    "time",
    "interval",
    "order",
    "check",
    "time",
    "use",
    "another",
    "one",
    "solidity",
    "globally",
    "available",
    "variables",
    "block",
    "dot",
    "timestamp",
    "block",
    "timestamp",
    "returns",
    "current",
    "timestamp",
    "blockchain",
    "get",
    "current",
    "timestamp",
    "gon",
    "na",
    "need",
    "block",
    "dot",
    "timestamp",
    "get",
    "enough",
    "time",
    "passed",
    "going",
    "need",
    "get",
    "current",
    "block",
    "dot",
    "timestamp",
    "minus",
    "last",
    "block",
    "timestamp",
    "yet",
    "let",
    "go",
    "ahead",
    "create",
    "state",
    "variable",
    "keep",
    "track",
    "previous",
    "block",
    "timestamp",
    "going",
    "new",
    "state",
    "variable",
    "going",
    "make",
    "gon",
    "na",
    "say",
    "u",
    "private",
    "underscore",
    "last",
    "timestamp",
    "right",
    "deploy",
    "contract",
    "update",
    "current",
    "timestamp",
    "last",
    "timestamp",
    "equals",
    "block",
    "dot",
    "timestamp",
    "alright",
    "awesome",
    "last",
    "block",
    "timestamp",
    "going",
    "need",
    "check",
    "difference",
    "current",
    "timestamp",
    "last",
    "timestamp",
    "greater",
    "interval",
    "also",
    "need",
    "create",
    "interval",
    "going",
    "interval",
    "going",
    "number",
    "seconds",
    "long",
    "want",
    "wait",
    "lottery",
    "runs",
    "let",
    "go",
    "ahead",
    "add",
    "constructor",
    "well",
    "comma",
    "u",
    "interval",
    "going",
    "create",
    "another",
    "global",
    "variable",
    "u",
    "256",
    "private",
    "underscore",
    "interval",
    "constructor",
    "say",
    "interval",
    "equals",
    "interval",
    "interval",
    "going",
    "change",
    "set",
    "instead",
    "making",
    "storage",
    "variable",
    "let",
    "make",
    "immutable",
    "variable",
    "save",
    "gas",
    "okay",
    "perfect",
    "actually",
    "create",
    "boolean",
    "check",
    "see",
    "enough",
    "time",
    "passed",
    "say",
    "boolean",
    "time",
    "passed",
    "equals",
    "current",
    "block",
    "timestamp",
    "minus",
    "underscore",
    "last",
    "timestamp",
    "check",
    "see",
    "actually",
    "greater",
    "underscore",
    "interval",
    "boolean",
    "check",
    "see",
    "open",
    "true",
    "open",
    "boolean",
    "see",
    "enough",
    "time",
    "passed",
    "true",
    "enough",
    "time",
    "passed",
    "else",
    "check",
    "check",
    "see",
    "enough",
    "players",
    "boolean",
    "players",
    "equals",
    "check",
    "see",
    "underscore",
    "players",
    "dot",
    "length",
    "greater",
    "zero",
    "players",
    "dot",
    "length",
    "greater",
    "zero",
    "players",
    "true",
    "otherwise",
    "false",
    "also",
    "see",
    "balance",
    "boolean",
    "balance",
    "equals",
    "address",
    "dot",
    "balance",
    "greater",
    "zero",
    "finally",
    "going",
    "take",
    "booleans",
    "turn",
    "return",
    "variable",
    "looking",
    "gon",
    "na",
    "say",
    "boolean",
    "keep",
    "needed",
    "equals",
    "open",
    "time",
    "passed",
    "players",
    "balance",
    "like",
    "combined",
    "gon",
    "na",
    "boolean",
    "upkeep",
    "needed",
    "returns",
    "true",
    "time",
    "request",
    "new",
    "random",
    "number",
    "time",
    "end",
    "lottery",
    "false",
    "time",
    "yet",
    "time",
    "end",
    "lottery",
    "go",
    "chainlink",
    "documentation",
    "upkeep",
    "needed",
    "actually",
    "needs",
    "return",
    "boolean",
    "upkeep",
    "needed",
    "bytes",
    "memory",
    "perform",
    "data",
    "need",
    "update",
    "need",
    "update",
    "function",
    "say",
    "returns",
    "full",
    "upkeep",
    "needed",
    "comma",
    "bytes",
    "memory",
    "perform",
    "data",
    "star",
    "slash",
    "since",
    "initialized",
    "boolean",
    "keep",
    "needed",
    "need",
    "say",
    "type",
    "upkeep",
    "needed",
    "since",
    "automatically",
    "get",
    "returned",
    "performed",
    "data",
    "something",
    "use",
    "want",
    "checkup",
    "keep",
    "stuff",
    "depending",
    "checkup",
    "keep",
    "went",
    "really",
    "need",
    "anything",
    "else",
    "leave",
    "right",
    "check",
    "upkeep",
    "way",
    "check",
    "see",
    "time",
    "trigger",
    "picking",
    "random",
    "winner",
    "lottery",
    "raffle",
    "learned",
    "actually",
    "trigger",
    "let",
    "write",
    "function",
    "gets",
    "executed",
    "returns",
    "true",
    "going",
    "perform",
    "upkeep",
    "function",
    "see",
    "example",
    "chainlink",
    "documentation",
    "time",
    "pick",
    "random",
    "winner",
    "actually",
    "going",
    "going",
    "call",
    "request",
    "random",
    "winner",
    "function",
    "instead",
    "extra",
    "function",
    "let",
    "transform",
    "request",
    "random",
    "winner",
    "function",
    "perform",
    "upkeep",
    "since",
    "check",
    "upkeep",
    "returns",
    "true",
    "chain",
    "link",
    "nodes",
    "automatically",
    "call",
    "perform",
    "upkeep",
    "function",
    "function",
    "request",
    "random",
    "winner",
    "let",
    "rename",
    "perform",
    "upkeep",
    "take",
    "input",
    "parameter",
    "bytes",
    "called",
    "data",
    "perform",
    "data",
    "bytes",
    "called",
    "data",
    "perform",
    "data",
    "checkup",
    "keep",
    "perform",
    "data",
    "would",
    "automatically",
    "pass",
    "performance",
    "keep",
    "going",
    "pass",
    "anything",
    "perform",
    "upkeep",
    "leave",
    "commented",
    "like",
    "since",
    "perform",
    "upkeep",
    "actually",
    "identified",
    "keeper",
    "compatible",
    "interface",
    "going",
    "override",
    "function",
    "want",
    "little",
    "bit",
    "validation",
    "continue",
    "right",
    "anybody",
    "call",
    "perform",
    "upkeep",
    "function",
    "want",
    "make",
    "sure",
    "gets",
    "called",
    "checkup",
    "keep",
    "true",
    "easy",
    "way",
    "us",
    "actually",
    "call",
    "checkup",
    "keep",
    "function",
    "right",
    "checkup",
    "keep",
    "external",
    "actually",
    "ca",
    "call",
    "checkup",
    "keep",
    "function",
    "let",
    "change",
    "public",
    "even",
    "smart",
    "contracts",
    "call",
    "checkup",
    "keep",
    "function",
    "made",
    "public",
    "perform",
    "upkeep",
    "call",
    "checkup",
    "keep",
    "passing",
    "nothing",
    "return",
    "upkeep",
    "needed",
    "perform",
    "data",
    "really",
    "care",
    "get",
    "get",
    "ball",
    "keep",
    "needed",
    "care",
    "perform",
    "data",
    "leave",
    "blank",
    "equals",
    "check",
    "keep",
    "pass",
    "blank",
    "called",
    "data",
    "want",
    "make",
    "sure",
    "true",
    "order",
    "keep",
    "going",
    "function",
    "could",
    "write",
    "require",
    "going",
    "keep",
    "needed",
    "going",
    "revert",
    "new",
    "error",
    "create",
    "raffle",
    "upkeep",
    "needed",
    "going",
    "pass",
    "variables",
    "error",
    "whoever",
    "running",
    "bug",
    "hopefully",
    "see",
    "getting",
    "error",
    "pass",
    "balance",
    "contract",
    "case",
    "ether",
    "add",
    "players",
    "dot",
    "length",
    "case",
    "players",
    "add",
    "un",
    "256",
    "underscore",
    "raffle",
    "state",
    "make",
    "sure",
    "raffles",
    "actually",
    "open",
    "course",
    "need",
    "create",
    "air",
    "top",
    "air",
    "raffle",
    "upkeep",
    "needed",
    "going",
    "take",
    "un",
    "256",
    "current",
    "balance",
    "un",
    "256",
    "non",
    "players",
    "went",
    "fit",
    "six",
    "raffle",
    "state",
    "code",
    "starting",
    "look",
    "really",
    "professional",
    "awesome",
    "something",
    "forgot",
    "back",
    "fulfill",
    "random",
    "words",
    "actually",
    "forgot",
    "reset",
    "timestamp",
    "every",
    "time",
    "winner",
    "picked",
    "want",
    "reset",
    "timestamp",
    "well",
    "wait",
    "another",
    "interval",
    "let",
    "people",
    "participate",
    "lottery",
    "interval",
    "scroll",
    "fulfill",
    "random",
    "words",
    "right",
    "reset",
    "players",
    "also",
    "reset",
    "timestamp",
    "okay",
    "great",
    "think",
    "done",
    "let",
    "add",
    "little",
    "bit",
    "natspec",
    "make",
    "look",
    "even",
    "professional",
    "give",
    "people",
    "reading",
    "contract",
    "even",
    "information",
    "let",
    "add",
    "title",
    "title",
    "say",
    "sample",
    "raffle",
    "contract",
    "say",
    "author",
    "going",
    "patrick",
    "collins",
    "put",
    "name",
    "well",
    "notice",
    "contract",
    "creating",
    "untampered",
    "orrible",
    "decentralized",
    "smart",
    "contract",
    "add",
    "dev",
    "implements",
    "chain",
    "link",
    "vrf",
    "v",
    "two",
    "chain",
    "link",
    "keepers",
    "alright",
    "awesome",
    "got",
    "type",
    "declarations",
    "got",
    "state",
    "variables",
    "got",
    "lottery",
    "variables",
    "still",
    "state",
    "variables",
    "got",
    "events",
    "time",
    "functions",
    "afterwards",
    "done",
    "little",
    "bit",
    "natspec",
    "least",
    "check",
    "upkeep",
    "want",
    "add",
    "natspec",
    "things",
    "like",
    "enter",
    "raffle",
    "perform",
    "upkeep",
    "etc",
    "absolutely",
    "bottom",
    "views",
    "slash",
    "pure",
    "getter",
    "functions",
    "let",
    "see",
    "want",
    "getter",
    "functions",
    "well",
    "probably",
    "want",
    "give",
    "people",
    "chance",
    "get",
    "raffle",
    "state",
    "function",
    "get",
    "raffle",
    "state",
    "public",
    "returns",
    "raffle",
    "state",
    "say",
    "return",
    "underscore",
    "raffle",
    "state",
    "probably",
    "want",
    "give",
    "people",
    "chance",
    "get",
    "number",
    "words",
    "going",
    "little",
    "bit",
    "interesting",
    "running",
    "function",
    "get",
    "num",
    "words",
    "public",
    "view",
    "returns",
    "went",
    "six",
    "return",
    "num",
    "words",
    "see",
    "something",
    "interesting",
    "happened",
    "pull",
    "compiler",
    "run",
    "hh",
    "compile",
    "hopefully",
    "everything",
    "works",
    "oh",
    "everything",
    "work",
    "import",
    "correctly",
    "let",
    "fix",
    "let",
    "try",
    "oh",
    "couple",
    "things",
    "missed",
    "let",
    "fix",
    "es",
    "players",
    "good",
    "compile",
    "code",
    "players",
    "dot",
    "length",
    "let",
    "try",
    "spelt",
    "interval",
    "wrong",
    "underscore",
    "inter",
    "vol",
    "strike",
    "compile",
    "see",
    "many",
    "spelling",
    "mistakes",
    "made",
    "underscore",
    "error",
    "go",
    "paste",
    "get",
    "another",
    "error",
    "invalid",
    "type",
    "argument",
    "function",
    "call",
    "invalid",
    "implicit",
    "conversion",
    "literal",
    "string",
    "bytes",
    "called",
    "data",
    "requested",
    "since",
    "passing",
    "empty",
    "string",
    "checkup",
    "keep",
    "needs",
    "call",
    "data",
    "called",
    "data",
    "actually",
    "work",
    "strings",
    "need",
    "make",
    "bytes",
    "memory",
    "instead",
    "compiler",
    "happy",
    "us",
    "spell",
    "timestamp",
    "wrong",
    "lowercase",
    "might",
    "see",
    "squiggles",
    "check",
    "upkeep",
    "could",
    "make",
    "view",
    "function",
    "since",
    "actually",
    "modifying",
    "state",
    "want",
    "keep",
    "public",
    "reasons",
    "show",
    "little",
    "bit",
    "later",
    "finally",
    "get",
    "yellow",
    "squiggly",
    "looking",
    "run",
    "hh",
    "compile",
    "see",
    "warning",
    "compiler",
    "well",
    "okay",
    "see",
    "yellow",
    "squigglies",
    "unnamed",
    "return",
    "variable",
    "remain",
    "unassigned",
    "need",
    "bytes",
    "memory",
    "keepers",
    "looking",
    "morning",
    "function",
    "state",
    "mutability",
    "restricted",
    "view",
    "function",
    "checkup",
    "key",
    "make",
    "view",
    "want",
    "going",
    "keep",
    "public",
    "reasons",
    "show",
    "little",
    "bit",
    "later",
    "finally",
    "function",
    "state",
    "mutability",
    "restricted",
    "pure",
    "wanted",
    "show",
    "since",
    "num",
    "words",
    "actually",
    "bytecode",
    "since",
    "constant",
    "variable",
    "technically",
    "reading",
    "storage",
    "therefore",
    "pure",
    "function",
    "returning",
    "num",
    "words",
    "actually",
    "read",
    "storage",
    "literally",
    "go",
    "read",
    "number",
    "one",
    "get",
    "num",
    "words",
    "solidity",
    "num",
    "words",
    "constant",
    "variable",
    "going",
    "literally",
    "exact",
    "saying",
    "get",
    "one",
    "would",
    "return",
    "one",
    "might",
    "also",
    "want",
    "get",
    "number",
    "players",
    "create",
    "function",
    "get",
    "number",
    "players",
    "public",
    "view",
    "returns",
    "un",
    "turn",
    "underscore",
    "players",
    "dot",
    "length",
    "also",
    "probably",
    "going",
    "want",
    "latest",
    "timestamp",
    "function",
    "get",
    "latest",
    "timestamp",
    "public",
    "view",
    "returns",
    "going",
    "return",
    "underscore",
    "last",
    "timestamp",
    "maybe",
    "want",
    "request",
    "confirmation",
    "function",
    "get",
    "request",
    "confirmations",
    "public",
    "pure",
    "since",
    "request",
    "confirmations",
    "also",
    "constant",
    "function",
    "returns",
    "went",
    "went",
    "56",
    "turn",
    "request",
    "confirmations",
    "right",
    "got",
    "wonderful",
    "getters",
    "views",
    "slash",
    "pure",
    "functions",
    "way",
    "get",
    "random",
    "number",
    "way",
    "decentralized",
    "context",
    "automatic",
    "automatically",
    "execute",
    "picking",
    "random",
    "winner",
    "way",
    "people",
    "enter",
    "raffle",
    "enter",
    "lottery",
    "bullet",
    "proof",
    "way",
    "solve",
    "creating",
    "truly",
    "fair",
    "decentralized",
    "lottery",
    "oh",
    "goodness",
    "let",
    "one",
    "compile",
    "good",
    "measure",
    "h",
    "h",
    "compile",
    "warnings",
    "good",
    "go",
    "code",
    "compiling",
    "successfully",
    "like",
    "said",
    "normally",
    "definitely",
    "going",
    "way",
    "going",
    "write",
    "smart",
    "contracts",
    "almost",
    "impossible",
    "write",
    "full",
    "smart",
    "contract",
    "without",
    "making",
    "mistakes",
    "without",
    "flipping",
    "back",
    "forth",
    "documentation",
    "already",
    "written",
    "contract",
    "many",
    "times",
    "still",
    "made",
    "whole",
    "bunch",
    "mistakes",
    "totally",
    "reasonable",
    "totally",
    "rational",
    "anybody",
    "everybody",
    "make",
    "mistakes",
    "going",
    "use",
    "resources",
    "write",
    "tests",
    "along",
    "way",
    "raffle",
    "dot",
    "seoul",
    "created",
    "time",
    "add",
    "everything",
    "else",
    "going",
    "come",
    "gon",
    "na",
    "create",
    "new",
    "folder",
    "add",
    "deploy",
    "folder",
    "per",
    "usual",
    "going",
    "exactly",
    "already",
    "done",
    "couple",
    "times",
    "going",
    "create",
    "scripts",
    "deploy",
    "raffle",
    "contract",
    "raffle",
    "contract",
    "couple",
    "things",
    "want",
    "make",
    "note",
    "first",
    "thing",
    "constructor",
    "right",
    "absolutely",
    "massive",
    "ton",
    "parameters",
    "need",
    "account",
    "let",
    "take",
    "look",
    "constructors",
    "see",
    "contracts",
    "already",
    "interacting",
    "okay",
    "vrf",
    "coordinator",
    "v2",
    "contract",
    "address",
    "entrance",
    "fee",
    "gasline",
    "subscription",
    "id",
    "callback",
    "guestimate",
    "interval",
    "knowing",
    "address",
    "tip",
    "ah",
    "okay",
    "probably",
    "going",
    "need",
    "deploy",
    "mocks",
    "since",
    "going",
    "need",
    "interact",
    "vrf",
    "coordinator",
    "contract",
    "outside",
    "project",
    "let",
    "go",
    "ahead",
    "start",
    "working",
    "raffle",
    "deployment",
    "script",
    "first",
    "know",
    "going",
    "deploy",
    "mocks",
    "keep",
    "mind",
    "let",
    "create",
    "new",
    "file",
    "oh",
    "one",
    "deploy",
    "let",
    "get",
    "started",
    "deploying",
    "raffle",
    "contract",
    "going",
    "look",
    "really",
    "similar",
    "done",
    "going",
    "want",
    "use",
    "previous",
    "deploy",
    "scripts",
    "reference",
    "absolutely",
    "recommend",
    "let",
    "get",
    "started",
    "module",
    "exports",
    "equals",
    "async",
    "function",
    "going",
    "take",
    "get",
    "named",
    "accounts",
    "deployments",
    "input",
    "parameters",
    "going",
    "const",
    "deploy",
    "log",
    "equals",
    "deployments",
    "gon",
    "na",
    "say",
    "const",
    "deployer",
    "equals",
    "await",
    "get",
    "named",
    "accounts",
    "let",
    "go",
    "config",
    "update",
    "module",
    "exports",
    "going",
    "copy",
    "paste",
    "employer",
    "going",
    "defaulted",
    "account",
    "zero",
    "player",
    "going",
    "defaulted",
    "account",
    "one",
    "want",
    "go",
    "ahead",
    "write",
    "feel",
    "free",
    "pause",
    "write",
    "name",
    "accounts",
    "right",
    "gon",
    "na",
    "lot",
    "boilerplate",
    "heart",
    "feel",
    "free",
    "github",
    "repo",
    "lesson",
    "previous",
    "scripts",
    "already",
    "written",
    "reference",
    "named",
    "accounts",
    "deployer",
    "also",
    "going",
    "player",
    "named",
    "account",
    "separate",
    "different",
    "users",
    "different",
    "players",
    "interacting",
    "contracts",
    "gon",
    "na",
    "grab",
    "deployer",
    "gon",
    "na",
    "get",
    "started",
    "similar",
    "last",
    "time",
    "would",
    "const",
    "raffle",
    "equals",
    "await",
    "ploy",
    "raffle",
    "comma",
    "add",
    "stuff",
    "right",
    "would",
    "deployer",
    "args",
    "going",
    "ton",
    "args",
    "going",
    "come",
    "back",
    "log",
    "going",
    "true",
    "going",
    "wait",
    "confirmations",
    "little",
    "bit",
    "boilerplate",
    "need",
    "work",
    "hardhead",
    "config",
    "network",
    "let",
    "add",
    "network",
    "information",
    "get",
    "block",
    "confirmations",
    "specific",
    "well",
    "say",
    "default",
    "network",
    "going",
    "hard",
    "hat",
    "say",
    "networks",
    "add",
    "network",
    "information",
    "going",
    "working",
    "heart",
    "hub",
    "chain",
    "id",
    "31337",
    "miles",
    "put",
    "well",
    "block",
    "confirmations",
    "set",
    "one",
    "lot",
    "column",
    "also",
    "gon",
    "na",
    "running",
    "staging",
    "tests",
    "rinkeby",
    "network",
    "add",
    "rink",
    "b",
    "chain",
    "id",
    "four",
    "block",
    "confirmations",
    "six",
    "need",
    "add",
    "url",
    "also",
    "accounts",
    "url",
    "done",
    "100",
    "times",
    "const",
    "rinky",
    "dink",
    "could",
    "rpc",
    "url",
    "equals",
    "process",
    "study",
    "v",
    "dot",
    "rake",
    "rpc",
    "url",
    "private",
    "key",
    "blah",
    "blah",
    "blah",
    "going",
    "add",
    "variables",
    "last",
    "projects",
    "going",
    "ask",
    "pause",
    "copy",
    "paste",
    "variables",
    "last",
    "project",
    "boom",
    "like",
    "since",
    "running",
    "rink",
    "prpc",
    "url",
    "private",
    "key",
    "corn",
    "market",
    "cap",
    "ether",
    "scan",
    "also",
    "going",
    "want",
    "make",
    "sure",
    "folder",
    "excuse",
    "new",
    "file",
    "dot",
    "env",
    "going",
    "drop",
    "information",
    "rink",
    "prpc",
    "url",
    "private",
    "key",
    "ether",
    "scan",
    "api",
    "key",
    "coin",
    "market",
    "cap",
    "api",
    "key",
    "well",
    "private",
    "key",
    "ring",
    "prpc",
    "url",
    "url",
    "b",
    "rpc",
    "url",
    "accounts",
    "going",
    "add",
    "single",
    "private",
    "key",
    "weight",
    "confirmations",
    "going",
    "equal",
    "network",
    "config",
    "dot",
    "block",
    "con",
    "formations",
    "one",
    "gon",
    "na",
    "import",
    "network",
    "hardhead",
    "looks",
    "like",
    "vs",
    "code",
    "automatically",
    "thanks",
    "vs",
    "code",
    "going",
    "deploy",
    "raffle",
    "obviously",
    "ton",
    "arguments",
    "need",
    "account",
    "let",
    "get",
    "let",
    "look",
    "raffle",
    "constructor",
    "see",
    "need",
    "get",
    "okay",
    "well",
    "first",
    "thing",
    "need",
    "get",
    "via",
    "coordinator",
    "v2",
    "gon",
    "na",
    "use",
    "strategy",
    "used",
    "funmi",
    "project",
    "using",
    "mocks",
    "development",
    "chain",
    "using",
    "actual",
    "contract",
    "address",
    "test",
    "net",
    "live",
    "network",
    "let",
    "get",
    "let",
    "go",
    "ahead",
    "recreate",
    "helper",
    "hard",
    "hat",
    "config",
    "dot",
    "j",
    "create",
    "const",
    "network",
    "config",
    "say",
    "equals",
    "hard",
    "hat",
    "going",
    "use",
    "mock",
    "need",
    "put",
    "rink",
    "b",
    "let",
    "go",
    "ahead",
    "foreign",
    "name",
    "going",
    "rinkeby",
    "going",
    "need",
    "go",
    "chain",
    "link",
    "documentation",
    "vrf",
    "contracts",
    "going",
    "need",
    "grab",
    "rf",
    "coordinator",
    "rinkeby",
    "test",
    "net",
    "going",
    "grab",
    "address",
    "plop",
    "say",
    "v",
    "rf",
    "core",
    "eight",
    "tour",
    "v",
    "two",
    "bam",
    "right",
    "like",
    "back",
    "deploy",
    "raffle",
    "gon",
    "na",
    "pick",
    "whether",
    "use",
    "v",
    "rf",
    "coordinator",
    "v",
    "two",
    "network",
    "config",
    "mock",
    "deployed",
    "course",
    "leads",
    "us",
    "us",
    "deploy",
    "mock",
    "let",
    "create",
    "new",
    "file",
    "deploy",
    "thing",
    "module",
    "exports",
    "equals",
    "async",
    "function",
    "taking",
    "get",
    "named",
    "accounts",
    "deployments",
    "input",
    "variables",
    "heart",
    "runtime",
    "environment",
    "const",
    "deploy",
    "comm",
    "log",
    "equals",
    "deployments",
    "const",
    "deployer",
    "equals",
    "await",
    "get",
    "named",
    "accounts",
    "excel",
    "going",
    "grab",
    "chain",
    "id",
    "well",
    "going",
    "wants",
    "deploy",
    "development",
    "chain",
    "const",
    "chain",
    "id",
    "equals",
    "network",
    "dot",
    "config",
    "dot",
    "chain",
    "id",
    "going",
    "want",
    "deploy",
    "mocks",
    "development",
    "chain",
    "going",
    "go",
    "helper",
    "config",
    "going",
    "add",
    "development",
    "chains",
    "say",
    "const",
    "development",
    "chains",
    "equals",
    "hard",
    "hat",
    "localhost",
    "gon",
    "na",
    "want",
    "export",
    "module",
    "dot",
    "exports",
    "equals",
    "network",
    "config",
    "development",
    "chance",
    "deploy",
    "mocks",
    "gon",
    "na",
    "want",
    "grab",
    "saying",
    "const",
    "development",
    "chains",
    "equals",
    "require",
    "dot",
    "dot",
    "slash",
    "helper",
    "helper",
    "hardhat",
    "config",
    "check",
    "see",
    "development",
    "chains",
    "dot",
    "includes",
    "network",
    "dot",
    "name",
    "currently",
    "development",
    "chain",
    "gon",
    "na",
    "go",
    "ahead",
    "log",
    "local",
    "network",
    "protected",
    "deploying",
    "box",
    "deploy",
    "mock",
    "vrf",
    "coordinator",
    "get",
    "mock",
    "vrf",
    "coordinator",
    "well",
    "let",
    "go",
    "ahead",
    "create",
    "one",
    "go",
    "chainlink",
    "github",
    "go",
    "contracts",
    "c",
    "actually",
    "mocks",
    "folder",
    "vf",
    "coordinator",
    "v2",
    "mach",
    "dot",
    "sol",
    "going",
    "use",
    "mock",
    "contracts",
    "folder",
    "gon",
    "na",
    "create",
    "new",
    "file",
    "called",
    "test",
    "new",
    "file",
    "called",
    "v",
    "rf",
    "core",
    "core",
    "two",
    "mock",
    "dot",
    "sol",
    "going",
    "import",
    "mock",
    "mock",
    "spdx",
    "pragma",
    "solidity",
    "carrot",
    "zero",
    "point",
    "seven",
    "whatever",
    "want",
    "import",
    "chainlink",
    "slash",
    "contracts",
    "slash",
    "src",
    "slash",
    "v",
    "slash",
    "mocks",
    "slash",
    "vrf",
    "pour",
    "tour",
    "b",
    "mock",
    "soul",
    "check",
    "see",
    "compiles",
    "hardhead",
    "compile",
    "looks",
    "like",
    "compiling",
    "well",
    "awesome",
    "mock",
    "contract",
    "actually",
    "go",
    "ahead",
    "deploy",
    "weight",
    "loi",
    "rf",
    "core",
    "de",
    "ne",
    "tor",
    "v",
    "mach",
    "comma",
    "give",
    "parameters",
    "say",
    "deployer",
    "log",
    "going",
    "true",
    "going",
    "arguments",
    "arguments",
    "vrf",
    "coordinator",
    "v2",
    "mk",
    "well",
    "open",
    "vrf",
    "coordinator",
    "v2",
    "mock",
    "right",
    "vs",
    "code",
    "github",
    "actually",
    "see",
    "roll",
    "constructor",
    "takes",
    "two",
    "things",
    "takes",
    "base",
    "fee",
    "gas",
    "price",
    "link",
    "first",
    "one",
    "well",
    "first",
    "one",
    "const",
    "base",
    "fee",
    "go",
    "back",
    "documentation",
    "see",
    "premium",
    "section",
    "link",
    "rink",
    "b",
    "means",
    "request",
    "base",
    "fee",
    "link",
    "every",
    "request",
    "anytime",
    "want",
    "request",
    "random",
    "number",
    "rinckey",
    "going",
    "cost",
    "us",
    "link",
    "think",
    "oracle",
    "gas",
    "make",
    "request",
    "back",
    "deploy",
    "mocks",
    "say",
    "base",
    "v",
    "equals",
    "could",
    "resemble",
    "rinckey",
    "25",
    "blah",
    "blah",
    "blah",
    "could",
    "ethers",
    "dot",
    "utils",
    "dot",
    "parse",
    "eath",
    "even",
    "put",
    "little",
    "comment",
    "say",
    "premium",
    "costs",
    "link",
    "per",
    "request",
    "remember",
    "reason",
    "cost",
    "link",
    "per",
    "request",
    "versus",
    "price",
    "feeds",
    "cost",
    "anything",
    "price",
    "feeds",
    "look",
    "back",
    "chain",
    "link",
    "one",
    "price",
    "feeds",
    "sponsored",
    "group",
    "protocols",
    "paying",
    "requests",
    "already",
    "since",
    "sponsor",
    "ones",
    "requesting",
    "randomness",
    "get",
    "ones",
    "actually",
    "sponsor",
    "getting",
    "random",
    "number",
    "second",
    "thing",
    "going",
    "gas",
    "price",
    "link",
    "let",
    "create",
    "another",
    "const",
    "const",
    "gas",
    "price",
    "link",
    "actually",
    "calculated",
    "value",
    "calculated",
    "value",
    "based",
    "gas",
    "price",
    "chain",
    "example",
    "request",
    "random",
    "number",
    "aetherium",
    "eath",
    "price",
    "skyrocketed",
    "like",
    "like",
    "billion",
    "dollars",
    "gas",
    "would",
    "incredibly",
    "incredibly",
    "expensive",
    "chain",
    "link",
    "nodes",
    "respond",
    "chain",
    "link",
    "nodes",
    "pay",
    "gas",
    "fees",
    "give",
    "us",
    "randomness",
    "external",
    "execution",
    "chain",
    "link",
    "nodes",
    "actually",
    "ones",
    "pay",
    "gas",
    "returning",
    "randomness",
    "executing",
    "upkeep",
    "etc",
    "go",
    "raffle",
    "dot",
    "soul",
    "scroll",
    "perform",
    "upkeep",
    "fulfill",
    "random",
    "words",
    "actually",
    "chain",
    "link",
    "nodes",
    "calling",
    "two",
    "functions",
    "paying",
    "gas",
    "get",
    "paid",
    "oracle",
    "gas",
    "offset",
    "costs",
    "price",
    "eath",
    "native",
    "blockchain",
    "skyrocketed",
    "chain",
    "nodes",
    "pay",
    "gas",
    "fee",
    "chain",
    "link",
    "nodes",
    "calculated",
    "price",
    "calculated",
    "variable",
    "called",
    "gas",
    "price",
    "per",
    "link",
    "fluctuates",
    "based",
    "price",
    "actual",
    "chain",
    "never",
    "go",
    "bankrupt",
    "basically",
    "price",
    "request",
    "changes",
    "based",
    "price",
    "gas",
    "blockchain",
    "kind",
    "think",
    "link",
    "per",
    "gas",
    "kind",
    "set",
    "whatever",
    "want",
    "set",
    "one",
    "e",
    "nine",
    "going",
    "equivalent",
    "base",
    "fee",
    "gas",
    "price",
    "link",
    "grab",
    "base",
    "fee",
    "arguments",
    "vr",
    "chord",
    "enter",
    "v",
    "mock",
    "say",
    "actually",
    "delete",
    "say",
    "const",
    "args",
    "equals",
    "base",
    "fee",
    "gas",
    "price",
    "link",
    "take",
    "args",
    "variable",
    "plop",
    "log",
    "mocks",
    "deployed",
    "log",
    "little",
    "line",
    "like",
    "let",
    "people",
    "know",
    "deploy",
    "script",
    "done",
    "module",
    "exports",
    "dot",
    "tags",
    "equals",
    "mocks",
    "view",
    "coordinator",
    "v2",
    "mock",
    "deployed",
    "come",
    "back",
    "raffle",
    "make",
    "code",
    "around",
    "similar",
    "deploy",
    "mocks",
    "say",
    "development",
    "chains",
    "includes",
    "network",
    "dot",
    "name",
    "stuff",
    "need",
    "import",
    "development",
    "chains",
    "helper",
    "hardhead",
    "config",
    "need",
    "import",
    "network",
    "hard",
    "hat",
    "vs",
    "code",
    "automatically",
    "added",
    "wow",
    "thanks",
    "vs",
    "code",
    "let",
    "even",
    "const",
    "args",
    "make",
    "variable",
    "stick",
    "args",
    "first",
    "argument",
    "going",
    "need",
    "vera",
    "fi",
    "coordinator",
    "let",
    "make",
    "variable",
    "say",
    "let",
    "vrf",
    "core",
    "need",
    "torby",
    "address",
    "development",
    "chain",
    "going",
    "grab",
    "mock",
    "contract",
    "say",
    "const",
    "prf",
    "cor",
    "de",
    "atar",
    "v",
    "mock",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "rf",
    "cord",
    "cord",
    "nato",
    "tor",
    "v",
    "two",
    "mk",
    "set",
    "rf",
    "coordinator",
    "v",
    "two",
    "address",
    "equals",
    "vrf",
    "core",
    "denater",
    "v",
    "two",
    "mach",
    "dot",
    "address",
    "cool",
    "address",
    "else",
    "local",
    "network",
    "vrf",
    "v2",
    "coordinator",
    "address",
    "simply",
    "going",
    "derived",
    "network",
    "config",
    "let",
    "import",
    "network",
    "config",
    "well",
    "helper",
    "hardhead",
    "config",
    "say",
    "else",
    "vrf",
    "coordinator",
    "v2",
    "address",
    "equals",
    "network",
    "config",
    "chain",
    "id",
    "let",
    "actually",
    "sorry",
    "need",
    "chain",
    "id",
    "cons",
    "chain",
    "id",
    "equals",
    "network",
    "dot",
    "config",
    "dot",
    "chain",
    "id",
    "chain",
    "id",
    "vr",
    "coordinator",
    "v",
    "chain",
    "id",
    "coordinator",
    "v2",
    "alright",
    "perfect",
    "got",
    "setup",
    "work",
    "vrf",
    "coordinator",
    "v2",
    "address",
    "else",
    "need",
    "raffle",
    "well",
    "need",
    "entrance",
    "fee",
    "probably",
    "want",
    "change",
    "entrance",
    "fee",
    "depending",
    "chain",
    "expensive",
    "chain",
    "might",
    "want",
    "make",
    "higher",
    "others",
    "let",
    "go",
    "ahead",
    "back",
    "helper",
    "hardhead",
    "config",
    "make",
    "entrance",
    "fee",
    "based",
    "blockchain",
    "np",
    "maybe",
    "want",
    "make",
    "eath",
    "could",
    "say",
    "ethers",
    "dot",
    "utils",
    "parse",
    "ether",
    "thank",
    "vs",
    "code",
    "automatically",
    "dropping",
    "also",
    "going",
    "want",
    "entrance",
    "fee",
    "heart",
    "app",
    "also",
    "set",
    "default",
    "let",
    "little",
    "explicit",
    "say",
    "name",
    "art",
    "app",
    "need",
    "give",
    "veneer",
    "coordinator",
    "v2",
    "address",
    "going",
    "deploy",
    "mock",
    "want",
    "entrance",
    "fee",
    "let",
    "give",
    "exact",
    "entrance",
    "fee",
    "say",
    "ethers",
    "dot",
    "utils",
    "dot",
    "parse",
    "ether",
    "alright",
    "great",
    "deploy",
    "say",
    "const",
    "entrance",
    "fee",
    "equals",
    "network",
    "config",
    "chain",
    "id",
    "entrance",
    "fee",
    "let",
    "start",
    "populating",
    "arcs",
    "first",
    "one",
    "going",
    "fe",
    "two",
    "coordinator",
    "address",
    "next",
    "one",
    "going",
    "entrance",
    "fee",
    "got",
    "got",
    "need",
    "gas",
    "lane",
    "rigby",
    "networks",
    "different",
    "gas",
    "lanes",
    "choose",
    "let",
    "grab",
    "gas",
    "lane",
    "rinckey",
    "30",
    "gray",
    "key",
    "hash",
    "let",
    "drop",
    "course",
    "network",
    "config",
    "gasoline",
    "pop",
    "hard",
    "hat",
    "mock",
    "actually",
    "care",
    "gas",
    "line",
    "working",
    "going",
    "mocking",
    "gasoline",
    "anyways",
    "say",
    "gas",
    "lane",
    "go",
    "ahead",
    "use",
    "one",
    "really",
    "anything",
    "really",
    "matter",
    "say",
    "const",
    "gasoline",
    "equals",
    "network",
    "config",
    "chain",
    "id",
    "gasoline",
    "grab",
    "gas",
    "lane",
    "stick",
    "argument",
    "array",
    "got",
    "one",
    "got",
    "one",
    "got",
    "one",
    "time",
    "subscription",
    "id",
    "run",
    "docstoc",
    "chain",
    "link",
    "chain",
    "link",
    "vrf",
    "highly",
    "recommend",
    "understand",
    "subscription",
    "id",
    "know",
    "actually",
    "make",
    "subscription",
    "id",
    "using",
    "front",
    "end",
    "using",
    "website",
    "vrf",
    "dot",
    "chain",
    "dot",
    "link",
    "great",
    "local",
    "chains",
    "get",
    "subscription",
    "id",
    "problem",
    "little",
    "bit",
    "harder",
    "local",
    "network",
    "actually",
    "going",
    "teach",
    "create",
    "fund",
    "subscription",
    "completely",
    "programmatically",
    "even",
    "need",
    "use",
    "ui",
    "want",
    "however",
    "purpose",
    "course",
    "still",
    "going",
    "use",
    "user",
    "interface",
    "still",
    "going",
    "use",
    "website",
    "us",
    "get",
    "subscription",
    "ids",
    "could",
    "100",
    "automate",
    "process",
    "creating",
    "subscription",
    "id",
    "funding",
    "subscription",
    "id",
    "create",
    "fund",
    "subscription",
    "ids",
    "calling",
    "create",
    "subscription",
    "fund",
    "subscription",
    "smart",
    "contract",
    "development",
    "chain",
    "v",
    "rf",
    "coordinator",
    "v2",
    "mock",
    "going",
    "development",
    "chain",
    "going",
    "create",
    "subscription",
    "gon",
    "na",
    "say",
    "const",
    "transaction",
    "response",
    "equals",
    "await",
    "vrf",
    "coordinator",
    "v2",
    "mock",
    "dot",
    "create",
    "sub",
    "scription",
    "run",
    "const",
    "transaction",
    "receipt",
    "equals",
    "weight",
    "trends",
    "action",
    "response",
    "dot",
    "wait",
    "wait",
    "one",
    "block",
    "confirmation",
    "inside",
    "transaction",
    "receipt",
    "actually",
    "event",
    "emitted",
    "subscription",
    "get",
    "another",
    "place",
    "emitting",
    "events",
    "incredibly",
    "helpful",
    "fact",
    "open",
    "back",
    "vera",
    "v2",
    "coordinator",
    "mark",
    "look",
    "create",
    "subscription",
    "see",
    "emit",
    "subscription",
    "created",
    "subscription",
    "id",
    "actually",
    "get",
    "event",
    "emitted",
    "transaction",
    "receipt",
    "assign",
    "let",
    "go",
    "ahead",
    "create",
    "sub",
    "subscription",
    "id",
    "say",
    "subscription",
    "id",
    "equals",
    "transaction",
    "receipt",
    "events",
    "zero",
    "dot",
    "args",
    "dot",
    "sub",
    "id",
    "sure",
    "watch",
    "events",
    "video",
    "want",
    "learn",
    "work",
    "events",
    "hardware",
    "subscription",
    "need",
    "fund",
    "subscription",
    "real",
    "network",
    "need",
    "link",
    "token",
    "actually",
    "fund",
    "subscription",
    "current",
    "iteration",
    "mock",
    "allows",
    "fund",
    "subscription",
    "without",
    "link",
    "token",
    "run",
    "wait",
    "f",
    "corps",
    "inator",
    "mark",
    "coordinator",
    "b",
    "mach",
    "dot",
    "fund",
    "subscription",
    "give",
    "subscription",
    "id",
    "need",
    "fundamental",
    "create",
    "variable",
    "say",
    "const",
    "vrf",
    "subscription",
    "fund",
    "amount",
    "equals",
    "ethers",
    "dot",
    "utils",
    "dot",
    "parse",
    "ether",
    "say",
    "30",
    "vrf",
    "subscription",
    "fundament",
    "paste",
    "could",
    "well",
    "real",
    "test",
    "net",
    "live",
    "networks",
    "become",
    "familiar",
    "user",
    "interface",
    "going",
    "test",
    "net",
    "programmatically",
    "test",
    "net",
    "going",
    "use",
    "exactly",
    "far",
    "put",
    "subscription",
    "id",
    "helper",
    "config",
    "say",
    "subscription",
    "id",
    "put",
    "something",
    "right",
    "leave",
    "zero",
    "later",
    "actually",
    "create",
    "subscription",
    "update",
    "subscription",
    "id",
    "say",
    "subscription",
    "id",
    "equals",
    "network",
    "config",
    "change",
    "id",
    "subscription",
    "id",
    "perfect",
    "add",
    "arguments",
    "array",
    "else",
    "need",
    "subscription",
    "id",
    "need",
    "callback",
    "gas",
    "limit",
    "callback",
    "gas",
    "limit",
    "going",
    "vary",
    "network",
    "network",
    "gon",
    "na",
    "go",
    "helper",
    "configure",
    "callback",
    "gas",
    "limit",
    "us",
    "set",
    "pretty",
    "high",
    "limit",
    "gas",
    "say",
    "call",
    "gas",
    "limit",
    "gas",
    "hard",
    "hat",
    "thing",
    "say",
    "const",
    "callback",
    "gas",
    "limit",
    "equals",
    "network",
    "config",
    "chain",
    "id",
    "callback",
    "gas",
    "limit",
    "grab",
    "put",
    "argument",
    "array",
    "else",
    "need",
    "need",
    "interval",
    "change",
    "network",
    "network",
    "well",
    "rigby",
    "say",
    "interval",
    "ever",
    "30",
    "seconds",
    "hard",
    "hat",
    "rigby",
    "thing",
    "say",
    "const",
    "interval",
    "equals",
    "network",
    "config",
    "chain",
    "id",
    "interval",
    "grab",
    "pop",
    "end",
    "array",
    "right",
    "awesome",
    "argument",
    "array",
    "drop",
    "right",
    "perfect",
    "everything",
    "constructor",
    "raffle",
    "contract",
    "great",
    "looking",
    "fantastic",
    "got",
    "wait",
    "confirmations",
    "got",
    "logging",
    "arguments",
    "deployer",
    "okay",
    "well",
    "next",
    "well",
    "let",
    "go",
    "ahead",
    "add",
    "verification",
    "piece",
    "create",
    "new",
    "folder",
    "utils",
    "new",
    "file",
    "either",
    "copy",
    "paste",
    "last",
    "project",
    "grab",
    "github",
    "repo",
    "associated",
    "course",
    "verify",
    "script",
    "going",
    "import",
    "saying",
    "const",
    "verify",
    "equals",
    "require",
    "dot",
    "dot",
    "slash",
    "helper",
    "hardhead",
    "config",
    "add",
    "bit",
    "code",
    "verify",
    "contract",
    "say",
    "development",
    "chain",
    "process",
    "studying",
    "v",
    "dot",
    "ether",
    "scan",
    "api",
    "key",
    "going",
    "log",
    "verifying",
    "dot",
    "dot",
    "await",
    "verify",
    "raffle",
    "dot",
    "address",
    "arcs",
    "log",
    "whole",
    "bunch",
    "hyphens",
    "say",
    "script",
    "done",
    "module",
    "dot",
    "exports",
    "dot",
    "tags",
    "equals",
    "say",
    "raffle",
    "right",
    "let",
    "test",
    "hardhat",
    "deploy",
    "yarn",
    "hard",
    "hat",
    "deploy",
    "see",
    "script",
    "works",
    "correctly",
    "looks",
    "like",
    "ran",
    "error",
    "network",
    "config",
    "defined",
    "let",
    "spell",
    "right",
    "network",
    "config",
    "go",
    "looks",
    "much",
    "better",
    "let",
    "try",
    "looks",
    "like",
    "deploy",
    "scripts",
    "working",
    "well",
    "local",
    "networks",
    "protected",
    "deploying",
    "mocks",
    "deployed",
    "vrf",
    "coordinator",
    "v2",
    "mock",
    "mocks",
    "deployed",
    "went",
    "ahead",
    "deployed",
    "raffle",
    "awesome",
    "massive",
    "going",
    "test",
    "deploying",
    "test",
    "net",
    "quite",
    "yet",
    "well",
    "unit",
    "tests",
    "yet",
    "need",
    "write",
    "unit",
    "tests",
    "want",
    "ever",
    "test",
    "running",
    "test",
    "net",
    "deploy",
    "script",
    "contracts",
    "means",
    "time",
    "us",
    "write",
    "tests",
    "come",
    "create",
    "new",
    "folder",
    "called",
    "test",
    "make",
    "unit",
    "tests",
    "unit",
    "tests",
    "create",
    "new",
    "file",
    "called",
    "let",
    "write",
    "unit",
    "tests",
    "unit",
    "tests",
    "going",
    "little",
    "bit",
    "verbose",
    "going",
    "make",
    "coverage",
    "really",
    "really",
    "good",
    "gon",
    "na",
    "perfect",
    "going",
    "pretty",
    "verbose",
    "gon",
    "na",
    "go",
    "pretty",
    "quickly",
    "feel",
    "free",
    "pause",
    "slow",
    "speed",
    "whatever",
    "need",
    "learn",
    "section",
    "really",
    "good",
    "muscle",
    "memory",
    "go",
    "writing",
    "tests",
    "understand",
    "thinking",
    "writing",
    "tests",
    "feel",
    "free",
    "speed",
    "parts",
    "already",
    "know",
    "slow",
    "new",
    "parts",
    "going",
    "go",
    "new",
    "information",
    "writing",
    "tests",
    "may",
    "seem",
    "like",
    "tedious",
    "process",
    "promise",
    "get",
    "better",
    "writing",
    "tests",
    "realize",
    "things",
    "rely",
    "stuff",
    "work",
    "sure",
    "code",
    "something",
    "getting",
    "muscle",
    "memory",
    "writing",
    "tests",
    "going",
    "make",
    "fantastic",
    "engineer",
    "let",
    "go",
    "write",
    "verbose",
    "tests",
    "try",
    "make",
    "really",
    "good",
    "really",
    "good",
    "coverage",
    "want",
    "go",
    "back",
    "later",
    "see",
    "give",
    "even",
    "coverage",
    "even",
    "better",
    "tests",
    "please",
    "feel",
    "free",
    "let",
    "get",
    "started",
    "let",
    "write",
    "tests",
    "going",
    "start",
    "pretty",
    "much",
    "way",
    "starting",
    "everything",
    "going",
    "grab",
    "development",
    "chains",
    "run",
    "unit",
    "tests",
    "development",
    "chain",
    "const",
    "development",
    "chains",
    "equals",
    "require",
    "dot",
    "dot",
    "slash",
    "dot",
    "dot",
    "slash",
    "helper",
    "rd",
    "hard",
    "hat",
    "config",
    "say",
    "development",
    "chains",
    "includes",
    "network",
    "dot",
    "name",
    "describe",
    "skip",
    "otherwise",
    "describe",
    "first",
    "describe",
    "going",
    "raffle",
    "unit",
    "tests",
    "going",
    "async",
    "function",
    "raffle",
    "unit",
    "tests",
    "comes",
    "next",
    "line",
    "looks",
    "little",
    "bit",
    "better",
    "alright",
    "great",
    "main",
    "things",
    "going",
    "need",
    "deploy",
    "well",
    "gon",
    "na",
    "need",
    "deploy",
    "raffle",
    "probably",
    "going",
    "want",
    "vrf",
    "core",
    "tour",
    "mock",
    "graded",
    "going",
    "async",
    "function",
    "go",
    "ahead",
    "get",
    "say",
    "const",
    "employer",
    "equals",
    "await",
    "get",
    "named",
    "accounts",
    "gon",
    "na",
    "need",
    "import",
    "get",
    "named",
    "accounts",
    "require",
    "get",
    "name",
    "accounts",
    "hard",
    "hat",
    "going",
    "want",
    "deploy",
    "using",
    "fixtures",
    "say",
    "await",
    "deployments",
    "going",
    "import",
    "deployments",
    "well",
    "hardhat",
    "dot",
    "fixture",
    "going",
    "call",
    "going",
    "deploy",
    "everything",
    "look",
    "one",
    "raffle",
    "alt",
    "tag",
    "oh",
    "mocks",
    "also",
    "alt",
    "tag",
    "okay",
    "perfect",
    "deploy",
    "everything",
    "say",
    "raffle",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "got",
    "import",
    "ethers",
    "hard",
    "hat",
    "like",
    "say",
    "get",
    "raffle",
    "contract",
    "connect",
    "deployer",
    "going",
    "thing",
    "vrf",
    "coordinator",
    "v2",
    "mock",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "rf",
    "coordinator",
    "b",
    "mk",
    "connect",
    "deployer",
    "well",
    "alright",
    "great",
    "first",
    "set",
    "tests",
    "describe",
    "going",
    "constructor",
    "going",
    "async",
    "function",
    "let",
    "let",
    "create",
    "initial",
    "initializes",
    "raffle",
    "correctly",
    "going",
    "async",
    "function",
    "want",
    "make",
    "note",
    "ideally",
    "make",
    "tests",
    "one",
    "assert",
    "keep",
    "mind",
    "ideally",
    "want",
    "one",
    "assert",
    "going",
    "bunch",
    "like",
    "said",
    "little",
    "bit",
    "loose",
    "want",
    "make",
    "sure",
    "raffle",
    "initialized",
    "correctly",
    "say",
    "const",
    "raffle",
    "state",
    "get",
    "raffle",
    "state",
    "want",
    "make",
    "sure",
    "start",
    "open",
    "raffle",
    "state",
    "say",
    "const",
    "raffle",
    "state",
    "equals",
    "await",
    "raffle",
    "dot",
    "get",
    "raffle",
    "state",
    "want",
    "say",
    "assert",
    "dot",
    "equal",
    "ope",
    "need",
    "import",
    "assert",
    "chai",
    "assert",
    "equals",
    "require",
    "chai",
    "assert",
    "dot",
    "equal",
    "raffle",
    "string",
    "raffle",
    "state",
    "going",
    "big",
    "number",
    "even",
    "though",
    "raffle",
    "state",
    "type",
    "raffle",
    "state",
    "return",
    "zero",
    "open",
    "one",
    "calculating",
    "gets",
    "transformed",
    "un",
    "call",
    "like",
    "raffle",
    "state",
    "variable",
    "big",
    "number",
    "want",
    "string",
    "file",
    "assert",
    "dot",
    "equal",
    "raffle",
    "state",
    "dot",
    "two",
    "string",
    "zero",
    "also",
    "make",
    "sure",
    "interval",
    "gets",
    "set",
    "correctly",
    "const",
    "interval",
    "equals",
    "await",
    "raffle",
    "dot",
    "get",
    "interval",
    "know",
    "one",
    "actually",
    "c",
    "inter",
    "ball",
    "see",
    "one",
    "good",
    "interval",
    "let",
    "go",
    "ahead",
    "add",
    "interval",
    "function",
    "function",
    "get",
    "trouble",
    "public",
    "view",
    "returns",
    "went",
    "six",
    "return",
    "underscore",
    "interval",
    "good",
    "interval",
    "say",
    "raffle",
    "dot",
    "get",
    "interval",
    "also",
    "say",
    "assert",
    "dot",
    "equal",
    "string",
    "equal",
    "one",
    "ever",
    "helper",
    "config",
    "right",
    "using",
    "interval",
    "helper",
    "config",
    "say",
    "string",
    "equal",
    "import",
    "well",
    "network",
    "config",
    "say",
    "interval",
    "equal",
    "network",
    "config",
    "let",
    "also",
    "make",
    "get",
    "chain",
    "id",
    "chain",
    "id",
    "say",
    "const",
    "chain",
    "id",
    "equals",
    "network",
    "dot",
    "config",
    "chain",
    "id",
    "network",
    "config",
    "chain",
    "id",
    "interval",
    "alright",
    "cool",
    "let",
    "test",
    "far",
    "hh",
    "test",
    "yarn",
    "hard",
    "hat",
    "test",
    "cool",
    "looks",
    "like",
    "passed",
    "little",
    "gas",
    "output",
    "awesome",
    "let",
    "go",
    "hardhead",
    "config",
    "always",
    "print",
    "gas",
    "going",
    "copy",
    "paste",
    "gas",
    "reporter",
    "section",
    "last",
    "project",
    "like",
    "going",
    "enabled",
    "gas",
    "false",
    "run",
    "hardhead",
    "test",
    "gas",
    "bid",
    "printed",
    "see",
    "tests",
    "perfect",
    "see",
    "constructor",
    "test",
    "passes",
    "yay",
    "next",
    "got",
    "constructor",
    "probably",
    "could",
    "written",
    "tests",
    "rest",
    "let",
    "move",
    "alright",
    "enter",
    "raffle",
    "going",
    "next",
    "describe",
    "block",
    "describe",
    "enter",
    "raffle",
    "going",
    "async",
    "function",
    "say",
    "reverts",
    "pay",
    "enough",
    "right",
    "one",
    "first",
    "things",
    "check",
    "paying",
    "enough",
    "want",
    "make",
    "sure",
    "actually",
    "reverts",
    "pay",
    "enough",
    "async",
    "function",
    "going",
    "expect",
    "await",
    "thing",
    "going",
    "import",
    "expect",
    "chai",
    "comes",
    "waffle",
    "matchers",
    "gon",
    "na",
    "say",
    "await",
    "expect",
    "raffle",
    "dot",
    "enter",
    "raffle",
    "going",
    "pass",
    "value",
    "going",
    "expect",
    "dot",
    "b",
    "dot",
    "reverted",
    "look",
    "want",
    "reverted",
    "raffle",
    "enough",
    "eath",
    "entered",
    "put",
    "quotes",
    "raffle",
    "enough",
    "eath",
    "entered",
    "try",
    "make",
    "sure",
    "actually",
    "works",
    "ah",
    "ah",
    "test",
    "dash",
    "dash",
    "grep",
    "put",
    "quotes",
    "pay",
    "enough",
    "awesome",
    "passing",
    "else",
    "want",
    "test",
    "well",
    "want",
    "test",
    "raffle",
    "open",
    "also",
    "revert",
    "test",
    "little",
    "bit",
    "kind",
    "test",
    "rest",
    "functionality",
    "want",
    "see",
    "records",
    "players",
    "enter",
    "async",
    "function",
    "enter",
    "raffle",
    "first",
    "going",
    "need",
    "raffle",
    "entrance",
    "fee",
    "let",
    "go",
    "ahead",
    "save",
    "top",
    "say",
    "let",
    "raffle",
    "vrf",
    "coordinator",
    "mock",
    "raffle",
    "entrance",
    "fee",
    "say",
    "raffle",
    "entrance",
    "fee",
    "equals",
    "weight",
    "ethers",
    "dot",
    "get",
    "entrance",
    "fee",
    "raffle",
    "dot",
    "get",
    "entrance",
    "fee",
    "raffle",
    "entrance",
    "fee",
    "use",
    "enter",
    "raffle",
    "say",
    "weight",
    "raffle",
    "dot",
    "enter",
    "raffle",
    "value",
    "raffle",
    "entrance",
    "fee",
    "make",
    "sure",
    "deployer",
    "correctly",
    "recorded",
    "since",
    "right",
    "connected",
    "deployer",
    "make",
    "sure",
    "deployer",
    "actually",
    "contract",
    "say",
    "const",
    "player",
    "contract",
    "equals",
    "await",
    "raffle",
    "dot",
    "get",
    "player",
    "zero",
    "record",
    "players",
    "array",
    "get",
    "players",
    "function",
    "pulls",
    "say",
    "assert",
    "dot",
    "equal",
    "player",
    "player",
    "contract",
    "deployer",
    "grep",
    "hard",
    "head",
    "test",
    "make",
    "sure",
    "works",
    "hh",
    "test",
    "dash",
    "dash",
    "grep",
    "deployer",
    "defined",
    "got",
    "actually",
    "save",
    "globally",
    "got",
    "let",
    "common",
    "deployer",
    "say",
    "deployer",
    "equals",
    "await",
    "get",
    "named",
    "accounts",
    "wrap",
    "like",
    "get",
    "deployer",
    "awesome",
    "let",
    "try",
    "awesome",
    "else",
    "well",
    "also",
    "emitting",
    "event",
    "let",
    "make",
    "sure",
    "emits",
    "event",
    "say",
    "emits",
    "event",
    "enter",
    "async",
    "function",
    "well",
    "first",
    "time",
    "testing",
    "make",
    "sure",
    "function",
    "emits",
    "event",
    "syntax",
    "going",
    "look",
    "really",
    "similar",
    "test",
    "check",
    "see",
    "error",
    "fired",
    "gon",
    "na",
    "say",
    "await",
    "expect",
    "raffle",
    "dot",
    "enter",
    "raffle",
    "value",
    "raffle",
    "entrance",
    "fee",
    "dot",
    "two",
    "dot",
    "omit",
    "dot",
    "emit",
    "get",
    "woful",
    "chime",
    "matches",
    "emitting",
    "events",
    "wait",
    "expect",
    "emit",
    "event",
    "expecting",
    "emit",
    "saying",
    "omit",
    "raffle",
    "contract",
    "emit",
    "raffle",
    "enter",
    "event",
    "copy",
    "try",
    "test",
    "terminal",
    "say",
    "hard",
    "hat",
    "test",
    "dash",
    "dash",
    "grep",
    "put",
    "quotes",
    "passes",
    "well",
    "great",
    "let",
    "go",
    "ahead",
    "test",
    "make",
    "sure",
    "ca",
    "enter",
    "raffle",
    "whenever",
    "raffle",
    "open",
    "calculating",
    "say",
    "allow",
    "entrance",
    "raffle",
    "cal",
    "cumulating",
    "async",
    "function",
    "first",
    "enter",
    "say",
    "await",
    "raffle",
    "dot",
    "enter",
    "raffle",
    "value",
    "raffle",
    "entrance",
    "fee",
    "want",
    "want",
    "get",
    "raffle",
    "closed",
    "state",
    "want",
    "get",
    "open",
    "state",
    "well",
    "move",
    "raffle",
    "raffle",
    "dot",
    "open",
    "raffle",
    "dot",
    "closed",
    "perform",
    "upkeep",
    "remove",
    "raffle",
    "raffle",
    "open",
    "raffle",
    "dot",
    "calculating",
    "perform",
    "upkeep",
    "called",
    "check",
    "upkeep",
    "returns",
    "true",
    "otherwise",
    "revert",
    "raffle",
    "upkeep",
    "needed",
    "need",
    "need",
    "make",
    "check",
    "upkeep",
    "return",
    "true",
    "pretend",
    "channeling",
    "keeper",
    "network",
    "keep",
    "calling",
    "checkup",
    "keep",
    "waiting",
    "true",
    "make",
    "true",
    "pretend",
    "channeling",
    "keepers",
    "call",
    "perform",
    "upkeep",
    "put",
    "contract",
    "state",
    "calculating",
    "actually",
    "well",
    "order",
    "checkup",
    "keep",
    "true",
    "first",
    "need",
    "see",
    "indeed",
    "open",
    "next",
    "thing",
    "need",
    "though",
    "need",
    "time",
    "passed",
    "bit",
    "need",
    "actually",
    "wait",
    "30",
    "seconds",
    "time",
    "pass",
    "kind",
    "sounds",
    "awful",
    "wait",
    "30",
    "seconds",
    "tests",
    "interval",
    "10",
    "days",
    "wait",
    "10",
    "days",
    "run",
    "tests",
    "sounds",
    "ridiculous",
    "well",
    "hard",
    "hat",
    "actually",
    "comes",
    "built",
    "ton",
    "functions",
    "us",
    "manipulate",
    "blockchain",
    "literally",
    "whatever",
    "want",
    "hard",
    "hat",
    "documentation",
    "section",
    "called",
    "hard",
    "hat",
    "network",
    "reference",
    "inside",
    "hard",
    "hat",
    "network",
    "section",
    "ton",
    "information",
    "hard",
    "hat",
    "network",
    "actually",
    "works",
    "different",
    "configs",
    "scroll",
    "low",
    "enough",
    "see",
    "json",
    "rpc",
    "methods",
    "use",
    "blockchain",
    "eath",
    "accounts",
    "block",
    "number",
    "call",
    "chinetti",
    "rpc",
    "methods",
    "normal",
    "blockchain",
    "additionally",
    "even",
    "use",
    "things",
    "called",
    "hard",
    "hat",
    "network",
    "methods",
    "since",
    "local",
    "hard",
    "hat",
    "network",
    "using",
    "testing",
    "want",
    "able",
    "test",
    "scenario",
    "methods",
    "give",
    "us",
    "ability",
    "go",
    "play",
    "around",
    "see",
    "different",
    "things",
    "one",
    "particular",
    "going",
    "set",
    "storage",
    "set",
    "set",
    "storage",
    "place",
    "really",
    "fun",
    "special",
    "testing",
    "debugging",
    "methods",
    "going",
    "evm",
    "increase",
    "time",
    "evm",
    "mine",
    "increased",
    "time",
    "allows",
    "us",
    "automatically",
    "increase",
    "time",
    "blockchain",
    "evm",
    "mine",
    "allows",
    "us",
    "mine",
    "create",
    "new",
    "blocks",
    "increase",
    "time",
    "anything",
    "unless",
    "new",
    "block",
    "mined",
    "run",
    "wait",
    "network",
    "import",
    "network",
    "hard",
    "hat",
    "network",
    "await",
    "network",
    "dot",
    "provider",
    "send",
    "evm",
    "crease",
    "time",
    "comma",
    "send",
    "list",
    "parameters",
    "send",
    "us",
    "going",
    "number",
    "plus",
    "one",
    "right",
    "interval",
    "stored",
    "globally",
    "probably",
    "going",
    "want",
    "let",
    "go",
    "ahead",
    "interval",
    "interval",
    "equals",
    "await",
    "raffle",
    "dot",
    "raffle",
    "dot",
    "get",
    "interval",
    "going",
    "copy",
    "going",
    "delete",
    "whole",
    "line",
    "wait",
    "raffle",
    "dot",
    "get",
    "interval",
    "since",
    "going",
    "call",
    "interval",
    "global",
    "level",
    "since",
    "going",
    "use",
    "lot",
    "gon",
    "na",
    "say",
    "interval",
    "number",
    "plus",
    "one",
    "want",
    "increase",
    "time",
    "whatever",
    "interval",
    "make",
    "sure",
    "actually",
    "get",
    "checkup",
    "keep",
    "return",
    "true",
    "additionally",
    "going",
    "want",
    "weight",
    "network",
    "dot",
    "provider",
    "dot",
    "send",
    "evm",
    "mine",
    "empty",
    "array",
    "want",
    "mine",
    "one",
    "extra",
    "block",
    "also",
    "network",
    "dot",
    "provider",
    "request",
    "await",
    "two",
    "would",
    "basically",
    "one",
    "little",
    "quicker",
    "right",
    "increased",
    "time",
    "blockchain",
    "mined",
    "block",
    "move",
    "forward",
    "open",
    "time",
    "passed",
    "player",
    "indeed",
    "entered",
    "raffle",
    "balance",
    "entered",
    "right",
    "apple",
    "check",
    "upkeep",
    "return",
    "true",
    "able",
    "call",
    "perform",
    "upkeep",
    "pretend",
    "chain",
    "lock",
    "keeper",
    "going",
    "pretend",
    "chain",
    "keeper",
    "call",
    "await",
    "raffle",
    "dot",
    "perform",
    "upkeep",
    "going",
    "pass",
    "empty",
    "call",
    "data",
    "passing",
    "blank",
    "array",
    "like",
    "calculating",
    "state",
    "calculating",
    "state",
    "say",
    "enter",
    "raffle",
    "reverts",
    "correctly",
    "raffle",
    "open",
    "say",
    "await",
    "expect",
    "raffle",
    "dot",
    "enter",
    "raffle",
    "send",
    "value",
    "raffle",
    "entrance",
    "fee",
    "expecting",
    "dot",
    "b",
    "dot",
    "reverted",
    "raffle",
    "underscore",
    "underscore",
    "open",
    "error",
    "okay",
    "let",
    "try",
    "tests",
    "run",
    "hardhead",
    "test",
    "dash",
    "dash",
    "grep",
    "put",
    "quotes",
    "perfect",
    "passes",
    "well",
    "run",
    "hardhead",
    "test",
    "let",
    "test",
    "everything",
    "together",
    "right",
    "everything",
    "passing",
    "oh",
    "wonderful",
    "awesome",
    "let",
    "keep",
    "going",
    "run",
    "hardhead",
    "coverage",
    "see",
    "coverage",
    "bumping",
    "already",
    "drastically",
    "better",
    "let",
    "keep",
    "going",
    "well",
    "let",
    "go",
    "ahead",
    "test",
    "check",
    "upkeep",
    "describe",
    "check",
    "upkeep",
    "async",
    "function",
    "say",
    "returns",
    "false",
    "people",
    "sent",
    "e",
    "e",
    "sync",
    "function",
    "everything",
    "true",
    "except",
    "fact",
    "nobody",
    "entered",
    "yet",
    "weight",
    "network",
    "dot",
    "provider",
    "dot",
    "send",
    "evm",
    "increase",
    "time",
    "comma",
    "number",
    "plus",
    "one",
    "weight",
    "network",
    "dot",
    "provider",
    "send",
    "uvm",
    "mine",
    "parameters",
    "going",
    "call",
    "check",
    "upkeep",
    "thing",
    "check",
    "upkeep",
    "public",
    "function",
    "run",
    "await",
    "raffle",
    "dot",
    "check",
    "upkeep",
    "pass",
    "nothing",
    "going",
    "kick",
    "transaction",
    "hard",
    "knows",
    "oh",
    "okay",
    "public",
    "function",
    "clearly",
    "trying",
    "send",
    "transaction",
    "public",
    "view",
    "function",
    "would",
    "would",
    "return",
    "view",
    "thing",
    "really",
    "want",
    "send",
    "transaction",
    "want",
    "simulate",
    "sending",
    "transaction",
    "seeing",
    "upkeep",
    "needed",
    "would",
    "return",
    "well",
    "actually",
    "get",
    "using",
    "something",
    "called",
    "call",
    "static",
    "simulate",
    "calling",
    "transaction",
    "seeing",
    "respond",
    "instead",
    "raffle",
    "dot",
    "check",
    "upkeep",
    "raffle",
    "dot",
    "cost",
    "static",
    "check",
    "upkeep",
    "give",
    "return",
    "upkeep",
    "needed",
    "bytes",
    "perform",
    "data",
    "extrapolate",
    "upkeep",
    "needed",
    "return",
    "writing",
    "const",
    "upkeep",
    "needed",
    "equals",
    "assert",
    "upkeep",
    "needed",
    "right",
    "upkeep",
    "needed",
    "return",
    "false",
    "say",
    "assert",
    "false",
    "true",
    "upkeep",
    "needed",
    "true",
    "would",
    "false",
    "would",
    "break",
    "want",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "worked",
    "hat",
    "test",
    "dash",
    "dash",
    "grep",
    "passing",
    "business",
    "awesome",
    "working",
    "perfectly",
    "well",
    "let",
    "also",
    "test",
    "returns",
    "false",
    "raffle",
    "open",
    "async",
    "function",
    "everything",
    "except",
    "everything",
    "make",
    "raffle",
    "calculating",
    "state",
    "weight",
    "raffle",
    "dot",
    "enter",
    "raffle",
    "value",
    "raffle",
    "entrance",
    "fee",
    "await",
    "network",
    "dot",
    "provider",
    "send",
    "going",
    "copy",
    "two",
    "lines",
    "going",
    "go",
    "ahead",
    "also",
    "going",
    "weight",
    "raffle",
    "dot",
    "perform",
    "upkeep",
    "another",
    "way",
    "send",
    "blank",
    "bytes",
    "object",
    "string",
    "like",
    "0x",
    "hardhat",
    "smart",
    "enough",
    "know",
    "transformed",
    "kind",
    "blank",
    "bytes",
    "object",
    "either",
    "one",
    "work",
    "const",
    "raffle",
    "state",
    "equals",
    "await",
    "raffle",
    "dot",
    "get",
    "raffle",
    "state",
    "get",
    "upkeep",
    "needed",
    "say",
    "const",
    "upkeep",
    "needed",
    "exactly",
    "raffle",
    "dot",
    "call",
    "static",
    "dot",
    "check",
    "upkeep",
    "let",
    "say",
    "excuse",
    "weight",
    "raffle",
    "dot",
    "call",
    "static",
    "assert",
    "dot",
    "equal",
    "say",
    "raffle",
    "state",
    "going",
    "excuse",
    "raffle",
    "string",
    "going",
    "calculating",
    "started",
    "dot",
    "equal",
    "upkeep",
    "needed",
    "going",
    "false",
    "let",
    "run",
    "grep",
    "perfect",
    "also",
    "working",
    "correctly",
    "great",
    "going",
    "skip",
    "next",
    "two",
    "tests",
    "really",
    "learned",
    "anything",
    "going",
    "copy",
    "paste",
    "github",
    "going",
    "return",
    "false",
    "enough",
    "time",
    "passed",
    "going",
    "return",
    "true",
    "enough",
    "time",
    "passed",
    "players",
    "eve",
    "open",
    "asserting",
    "true",
    "starting",
    "true",
    "want",
    "pause",
    "video",
    "copy",
    "paste",
    "write",
    "absolutely",
    "copy",
    "paste",
    "github",
    "repo",
    "absolutely",
    "ca",
    "like",
    "said",
    "going",
    "making",
    "write",
    "making",
    "understand",
    "tests",
    "going",
    "make",
    "substantially",
    "better",
    "coder",
    "let",
    "test",
    "looks",
    "good",
    "hh",
    "test",
    "recording",
    "realized",
    "describe",
    "blocks",
    "making",
    "async",
    "functions",
    "describe",
    "blocks",
    "actually",
    "realize",
    "ca",
    "recognize",
    "ca",
    "work",
    "promises",
    "async",
    "actually",
    "anything",
    "describe",
    "block",
    "want",
    "get",
    "rid",
    "async",
    "word",
    "actually",
    "helping",
    "us",
    "fact",
    "extra",
    "word",
    "looks",
    "kind",
    "gross",
    "describe",
    "blocks",
    "gon",
    "na",
    "get",
    "rid",
    "async",
    "keyword",
    "functions",
    "course",
    "though",
    "going",
    "using",
    "asynchronous",
    "functions",
    "want",
    "written",
    "tests",
    "checkup",
    "keep",
    "let",
    "go",
    "ahead",
    "perform",
    "upkeep",
    "let",
    "create",
    "new",
    "describe",
    "block",
    "ascribe",
    "perform",
    "upkeep",
    "going",
    "regular",
    "function",
    "going",
    "start",
    "say",
    "run",
    "check",
    "upkeep",
    "true",
    "async",
    "function",
    "want",
    "perform",
    "keep",
    "work",
    "checkup",
    "keep",
    "indeed",
    "true",
    "say",
    "await",
    "raffle",
    "dot",
    "enter",
    "raffle",
    "send",
    "value",
    "raffle",
    "entrance",
    "fee",
    "sorry",
    "curly",
    "braces",
    "instead",
    "weight",
    "network",
    "dot",
    "provider",
    "send",
    "evm",
    "increase",
    "time",
    "inter",
    "number",
    "plus",
    "one",
    "await",
    "network",
    "dot",
    "provider",
    "send",
    "uvm",
    "mine",
    "empty",
    "array",
    "reason",
    "moving",
    "time",
    "forward",
    "moving",
    "block",
    "forward",
    "course",
    "gon",
    "na",
    "thing",
    "want",
    "check",
    "upkeep",
    "return",
    "true",
    "gon",
    "na",
    "say",
    "const",
    "x",
    "transaction",
    "equals",
    "await",
    "raffel",
    "dot",
    "perform",
    "upkeep",
    "either",
    "blank",
    "array",
    "could",
    "0x",
    "matter",
    "assert",
    "tx",
    "work",
    "error",
    "something",
    "fail",
    "right",
    "know",
    "actually",
    "work",
    "let",
    "test",
    "want",
    "work",
    "checkup",
    "keep",
    "true",
    "made",
    "checkup",
    "keep",
    "true",
    "stuff",
    "yarn",
    "hardhat",
    "test",
    "dash",
    "dash",
    "grep",
    "block",
    "spelled",
    "perform",
    "upkeep",
    "wrong",
    "perform",
    "upkeep",
    "let",
    "try",
    "spelling",
    "things",
    "correctly",
    "let",
    "run",
    "test",
    "great",
    "working",
    "else",
    "want",
    "want",
    "revert",
    "raffel",
    "upkeep",
    "needed",
    "checkup",
    "keep",
    "false",
    "gon",
    "na",
    "say",
    "reverts",
    "check",
    "keep",
    "false",
    "async",
    "function",
    "going",
    "syntax",
    "await",
    "expect",
    "raffle",
    "dot",
    "perform",
    "upkeep",
    "empty",
    "bytes",
    "object",
    "reverted",
    "want",
    "reverted",
    "hoping",
    "reverted",
    "run",
    "test",
    "hardhead",
    "test",
    "dash",
    "dash",
    "grep",
    "paste",
    "see",
    "indeed",
    "passing",
    "something",
    "notice",
    "revert",
    "actually",
    "goes",
    "ahead",
    "reverts",
    "extra",
    "stuff",
    "well",
    "test",
    "smart",
    "enough",
    "know",
    "put",
    "name",
    "error",
    "getting",
    "reverted",
    "good",
    "enough",
    "want",
    "super",
    "specific",
    "actually",
    "go",
    "ahead",
    "make",
    "string",
    "interpolation",
    "add",
    "add",
    "balance",
    "expect",
    "add",
    "players",
    "expect",
    "add",
    "raffle",
    "statement",
    "going",
    "keep",
    "expecting",
    "want",
    "super",
    "specific",
    "tests",
    "expect",
    "exactly",
    "specific",
    "values",
    "looking",
    "alright",
    "last",
    "thing",
    "expect",
    "form",
    "well",
    "check",
    "see",
    "actually",
    "gets",
    "called",
    "raffle",
    "state",
    "gets",
    "changed",
    "admit",
    "event",
    "let",
    "go",
    "ahead",
    "add",
    "say",
    "updates",
    "raffle",
    "state",
    "admits",
    "event",
    "calls",
    "vrf",
    "coordinator",
    "async",
    "function",
    "well",
    "let",
    "let",
    "go",
    "ahead",
    "let",
    "make",
    "checkup",
    "keep",
    "true",
    "going",
    "copy",
    "paste",
    "first",
    "three",
    "lines",
    "since",
    "going",
    "exactly",
    "going",
    "enter",
    "raffle",
    "going",
    "increase",
    "time",
    "going",
    "mind",
    "new",
    "block",
    "going",
    "call",
    "perform",
    "upkeep",
    "going",
    "say",
    "const",
    "tx",
    "response",
    "equals",
    "await",
    "raffle",
    "dot",
    "perform",
    "upkeep",
    "empty",
    "bytes",
    "object",
    "going",
    "const",
    "tx",
    "receipt",
    "equals",
    "await",
    "tx",
    "response",
    "dot",
    "wait",
    "one",
    "block",
    "receipt",
    "gon",
    "na",
    "get",
    "request",
    "id",
    "gon",
    "na",
    "say",
    "const",
    "request",
    "id",
    "equals",
    "get",
    "request",
    "id",
    "omitted",
    "event",
    "however",
    "look",
    "vrf",
    "coordinator",
    "mock",
    "call",
    "request",
    "random",
    "words",
    "mock",
    "actual",
    "contract",
    "notice",
    "also",
    "emits",
    "event",
    "random",
    "words",
    "requested",
    "look",
    "second",
    "parameter",
    "indeed",
    "request",
    "id",
    "reality",
    "us",
    "omitting",
    "request",
    "id",
    "redundant",
    "use",
    "admitted",
    "request",
    "id",
    "vrf",
    "coordinator",
    "purpose",
    "course",
    "showing",
    "event",
    "looks",
    "like",
    "going",
    "leave",
    "want",
    "go",
    "back",
    "refactor",
    "would",
    "definitely",
    "want",
    "remove",
    "omit",
    "test",
    "let",
    "tx",
    "receipt",
    "dot",
    "events",
    "going",
    "first",
    "event",
    "instead",
    "zero",
    "event",
    "event",
    "gets",
    "emitted",
    "function",
    "going",
    "emit",
    "event",
    "instead",
    "zero",
    "event",
    "first",
    "event",
    "gets",
    "emitted",
    "one",
    "tax",
    "receipts",
    "dot",
    "events",
    "one",
    "dot",
    "args",
    "dot",
    "request",
    "id",
    "gon",
    "na",
    "say",
    "cert",
    "request",
    "number",
    "greater",
    "zero",
    "also",
    "assert",
    "raffle",
    "state",
    "equals",
    "equals",
    "one",
    "gon",
    "na",
    "const",
    "raffle",
    "state",
    "equals",
    "await",
    "raffle",
    "dot",
    "get",
    "raffle",
    "state",
    "actually",
    "raffle",
    "number",
    "string",
    "know",
    "whatever",
    "want",
    "big",
    "going",
    "copy",
    "whole",
    "thing",
    "anyways",
    "hh",
    "test",
    "dash",
    "dash",
    "grep",
    "paste",
    "run",
    "excuse",
    "string",
    "equals",
    "equals",
    "one",
    "transformer",
    "time",
    "perfect",
    "passing",
    "great",
    "time",
    "fulfill",
    "random",
    "words",
    "going",
    "learn",
    "lot",
    "fantastic",
    "stuff",
    "gon",
    "na",
    "make",
    "new",
    "describe",
    "block",
    "zoomed",
    "little",
    "bit",
    "going",
    "fulfill",
    "random",
    "words",
    "going",
    "function",
    "course",
    "actually",
    "going",
    "add",
    "another",
    "want",
    "somebody",
    "entered",
    "raffle",
    "run",
    "tests",
    "going",
    "async",
    "function",
    "going",
    "run",
    "await",
    "raffle",
    "enter",
    "raffle",
    "value",
    "raffle",
    "entrance",
    "fee",
    "going",
    "wait",
    "network",
    "dot",
    "provider",
    "dot",
    "send",
    "evm",
    "increase",
    "time",
    "interval",
    "number",
    "plus",
    "one",
    "wait",
    "network",
    "dot",
    "provider",
    "dot",
    "send",
    "evm",
    "mine",
    "comma",
    "tried",
    "testing",
    "fulfilled",
    "random",
    "words",
    "gon",
    "na",
    "somebody",
    "enter",
    "lottery",
    "going",
    "increased",
    "time",
    "mined",
    "new",
    "block",
    "okay",
    "cool",
    "first",
    "thing",
    "want",
    "want",
    "see",
    "fulfill",
    "random",
    "words",
    "called",
    "long",
    "request",
    "flight",
    "long",
    "requested",
    "long",
    "request",
    "random",
    "words",
    "called",
    "actually",
    "check",
    "running",
    "called",
    "perform",
    "async",
    "function",
    "going",
    "revert",
    "requests",
    "exist",
    "await",
    "expect",
    "rf",
    "core",
    "tour",
    "mock",
    "dot",
    "fulfill",
    "random",
    "words",
    "look",
    "v",
    "rf",
    "coordinator",
    "v2",
    "mark",
    "fulfill",
    "random",
    "words",
    "function",
    "chain",
    "link",
    "node",
    "actually",
    "calls",
    "inside",
    "add",
    "function",
    "actual",
    "contract",
    "calls",
    "another",
    "contract",
    "random",
    "number",
    "verification",
    "basically",
    "checking",
    "part",
    "right",
    "request",
    "exist",
    "going",
    "get",
    "non",
    "existent",
    "request",
    "see",
    "needs",
    "request",
    "id",
    "consumer",
    "address",
    "going",
    "guess",
    "zero",
    "consumer",
    "addresses",
    "course",
    "gon",
    "na",
    "raffled",
    "address",
    "going",
    "expect",
    "reverted",
    "non",
    "existent",
    "request",
    "going",
    "exact",
    "thing",
    "different",
    "request",
    "id",
    "request",
    "id",
    "one",
    "hopefully",
    "also",
    "going",
    "get",
    "non",
    "existent",
    "requests",
    "ideally",
    "request",
    "would",
    "ever",
    "allow",
    "fulfill",
    "random",
    "words",
    "go",
    "obviously",
    "would",
    "really",
    "hard",
    "us",
    "test",
    "every",
    "single",
    "possible",
    "request",
    "id",
    "going",
    "see",
    "way",
    "future",
    "actually",
    "test",
    "ton",
    "variables",
    "something",
    "called",
    "fuzz",
    "testing",
    "get",
    "future",
    "spelt",
    "scribe",
    "wrong",
    "let",
    "let",
    "actually",
    "spelled",
    "scribe",
    "correctly",
    "go",
    "ahead",
    "run",
    "hh",
    "test",
    "dash",
    "dash",
    "grep",
    "great",
    "passed",
    "going",
    "make",
    "one",
    "test",
    "gon",
    "na",
    "way",
    "big",
    "right",
    "test",
    "write",
    "going",
    "going",
    "really",
    "big",
    "test",
    "probably",
    "want",
    "split",
    "different",
    "sections",
    "actually",
    "figured",
    "actually",
    "best",
    "way",
    "show",
    "section",
    "going",
    "exactly",
    "going",
    "get",
    "staging",
    "test",
    "going",
    "write",
    "test",
    "literally",
    "almost",
    "exactly",
    "let",
    "write",
    "basically",
    "going",
    "test",
    "puts",
    "everything",
    "together",
    "going",
    "test",
    "indeed",
    "winner",
    "resets",
    "lottery",
    "sends",
    "money",
    "kind",
    "lot",
    "single",
    "probably",
    "would",
    "want",
    "split",
    "pieces",
    "going",
    "put",
    "one",
    "going",
    "async",
    "function",
    "going",
    "learn",
    "couple",
    "new",
    "tricks",
    "definitely",
    "sure",
    "follow",
    "along",
    "one",
    "also",
    "going",
    "add",
    "additional",
    "entrances",
    "additional",
    "people",
    "entering",
    "lottery",
    "say",
    "const",
    "additional",
    "trance",
    "equals",
    "great",
    "gon",
    "na",
    "fake",
    "accounts",
    "ethers",
    "enter",
    "lottery",
    "gon",
    "na",
    "say",
    "const",
    "starting",
    "account",
    "index",
    "equals",
    "since",
    "deployer",
    "equals",
    "zero",
    "excuse",
    "equals",
    "one",
    "since",
    "player",
    "zero",
    "going",
    "new",
    "accounts",
    "start",
    "index",
    "one",
    "going",
    "little",
    "loop",
    "let",
    "equals",
    "starting",
    "count",
    "index",
    "less",
    "starting",
    "count",
    "index",
    "plus",
    "additional",
    "trend",
    "sees",
    "gon",
    "na",
    "entrance",
    "plus",
    "plus",
    "gon",
    "na",
    "little",
    "loop",
    "connect",
    "raffle",
    "contract",
    "new",
    "accounts",
    "going",
    "new",
    "accounts",
    "enter",
    "raffle",
    "contest",
    "count",
    "connected",
    "raffle",
    "equals",
    "raffle",
    "dot",
    "connect",
    "accounts",
    "accounts",
    "defined",
    "somewhere",
    "let",
    "get",
    "accounts",
    "find",
    "somewhere",
    "say",
    "const",
    "accounts",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "signers",
    "going",
    "weight",
    "account",
    "connected",
    "raffle",
    "dot",
    "enter",
    "raffle",
    "value",
    "course",
    "raffle",
    "entrance",
    "fee",
    "going",
    "connect",
    "three",
    "additional",
    "entrance",
    "raffle",
    "going",
    "total",
    "four",
    "people",
    "connect",
    "raffle",
    "going",
    "keep",
    "note",
    "starting",
    "timestamp",
    "gon",
    "na",
    "const",
    "starting",
    "timestamp",
    "equals",
    "await",
    "raffle",
    "dot",
    "get",
    "last",
    "timestamp",
    "going",
    "get",
    "little",
    "bit",
    "tricky",
    "want",
    "couple",
    "things",
    "want",
    "want",
    "perform",
    "upkeep",
    "going",
    "mock",
    "chainlink",
    "keepers",
    "kick",
    "chain",
    "link",
    "kick",
    "calling",
    "fulfill",
    "random",
    "words",
    "going",
    "mock",
    "well",
    "mock",
    "chain",
    "link",
    "vrf",
    "course",
    "check",
    "see",
    "okay",
    "recent",
    "winner",
    "get",
    "recorded",
    "raffle",
    "get",
    "reset",
    "play",
    "said",
    "timestamp",
    "everything",
    "reset",
    "want",
    "specific",
    "way",
    "test",
    "net",
    "call",
    "fulfill",
    "random",
    "words",
    "wait",
    "fulfill",
    "random",
    "words",
    "called",
    "since",
    "working",
    "hardhat",
    "local",
    "chain",
    "really",
    "need",
    "wait",
    "anything",
    "right",
    "say",
    "okay",
    "boom",
    "snap",
    "fingers",
    "adjust",
    "blockchain",
    "whatever",
    "want",
    "going",
    "simulate",
    "need",
    "wait",
    "event",
    "called",
    "order",
    "us",
    "simulate",
    "waiting",
    "event",
    "need",
    "set",
    "listener",
    "set",
    "listener",
    "want",
    "finish",
    "listener",
    "done",
    "listening",
    "need",
    "create",
    "new",
    "promise",
    "going",
    "incredibly",
    "important",
    "especially",
    "staging",
    "tests",
    "going",
    "await",
    "new",
    "promise",
    "going",
    "exactly",
    "set",
    "going",
    "async",
    "function",
    "going",
    "take",
    "resolve",
    "reject",
    "parameters",
    "going",
    "use",
    "little",
    "arrow",
    "syntax",
    "saying",
    "async",
    "function",
    "basically",
    "going",
    "set",
    "syntax",
    "gon",
    "na",
    "say",
    "raffle",
    "event",
    "name",
    "winner",
    "picked",
    "gon",
    "na",
    "say",
    "listen",
    "winner",
    "picked",
    "event",
    "gon",
    "na",
    "say",
    "raffle",
    "dot",
    "winner",
    "picks",
    "happens",
    "stuff",
    "anonymous",
    "function",
    "gon",
    "na",
    "say",
    "raffle",
    "dot",
    "winner",
    "picked",
    "event",
    "gets",
    "emitted",
    "stuff",
    "setting",
    "function",
    "going",
    "add",
    "certs",
    "everything",
    "want",
    "wait",
    "winter",
    "get",
    "picked",
    "event",
    "gets",
    "fired",
    "though",
    "course",
    "need",
    "actually",
    "call",
    "perform",
    "call",
    "fulfill",
    "random",
    "words",
    "going",
    "seem",
    "like",
    "little",
    "bit",
    "backwards",
    "want",
    "set",
    "listeners",
    "fire",
    "methods",
    "fire",
    "event",
    "listener",
    "activated",
    "waiting",
    "going",
    "put",
    "code",
    "inside",
    "promise",
    "put",
    "outside",
    "promise",
    "put",
    "code",
    "outside",
    "promise",
    "promise",
    "never",
    "get",
    "resolved",
    "listener",
    "never",
    "fire",
    "vent",
    "know",
    "call",
    "fulfill",
    "random",
    "words",
    "something",
    "know",
    "spelling",
    "bad",
    "let",
    "say",
    "call",
    "piece",
    "code",
    "never",
    "reach",
    "fulfill",
    "random",
    "words",
    "always",
    "going",
    "waiting",
    "wants",
    "get",
    "resolved",
    "need",
    "add",
    "code",
    "inside",
    "promise",
    "outside",
    "raffle",
    "dot",
    "want",
    "wait",
    "forever",
    "right",
    "maybe",
    "issue",
    "want",
    "able",
    "reject",
    "issue",
    "heart",
    "hat",
    "dot",
    "config",
    "add",
    "timeout",
    "add",
    "mocha",
    "section",
    "give",
    "timeout",
    "milliseconds",
    "going",
    "200",
    "seconds",
    "max",
    "event",
    "get",
    "fired",
    "200",
    "seconds",
    "considered",
    "failure",
    "test",
    "fail",
    "want",
    "typically",
    "like",
    "wrap",
    "try",
    "catch",
    "something",
    "fails",
    "cause",
    "whole",
    "bunch",
    "headache",
    "catch",
    "anything",
    "fails",
    "also",
    "reject",
    "issue",
    "us",
    "calling",
    "function",
    "say",
    "hey",
    "okay",
    "failure",
    "fail",
    "way",
    "promise",
    "get",
    "resolved",
    "timely",
    "manner",
    "going",
    "add",
    "code",
    "little",
    "bit",
    "let",
    "keep",
    "going",
    "let",
    "keep",
    "going",
    "excuse",
    "trycatch",
    "ones",
    "ones",
    "results",
    "excuse",
    "listener",
    "sorry",
    "want",
    "trycatch",
    "inside",
    "ones",
    "takes",
    "long",
    "want",
    "go",
    "ahead",
    "throw",
    "error",
    "otherwise",
    "going",
    "resolve",
    "outside",
    "listener",
    "inside",
    "promise",
    "going",
    "bit",
    "go",
    "const",
    "tx",
    "equals",
    "await",
    "raffle",
    "dot",
    "perform",
    "upkeep",
    "pass",
    "empty",
    "bytes",
    "object",
    "get",
    "const",
    "tx",
    "receipt",
    "equals",
    "await",
    "tx",
    "dot",
    "weight",
    "one",
    "block",
    "going",
    "weight",
    "vrf",
    "core",
    "tour",
    "mock",
    "dot",
    "fulfill",
    "random",
    "words",
    "cx",
    "receipt",
    "dot",
    "events",
    "one",
    "dot",
    "args",
    "dot",
    "request",
    "id",
    "come",
    "raffle",
    "address",
    "final",
    "thing",
    "going",
    "going",
    "get",
    "veer",
    "coordinator",
    "mock",
    "going",
    "call",
    "fulfill",
    "random",
    "words",
    "takes",
    "request",
    "id",
    "consumer",
    "address",
    "going",
    "mock",
    "give",
    "request",
    "id",
    "get",
    "transaction",
    "receipt",
    "consumer",
    "address",
    "inside",
    "promise",
    "setting",
    "listener",
    "winner",
    "picked",
    "event",
    "mocking",
    "channeling",
    "keepers",
    "mocking",
    "chainlink",
    "vrf",
    "function",
    "gets",
    "called",
    "function",
    "emit",
    "winner",
    "picked",
    "event",
    "raffle",
    "set",
    "listening",
    "get",
    "emitted",
    "pick",
    "go",
    "ah",
    "okay",
    "found",
    "found",
    "winner",
    "picked",
    "event",
    "go",
    "ahead",
    "stuff",
    "winner",
    "picked",
    "event",
    "gets",
    "fired",
    "little",
    "console",
    "dot",
    "log",
    "found",
    "event",
    "like",
    "jump",
    "try",
    "catch",
    "trycatch",
    "going",
    "basically",
    "us",
    "asserts",
    "first",
    "want",
    "say",
    "const",
    "recent",
    "winner",
    "equals",
    "await",
    "raffle",
    "dot",
    "get",
    "recent",
    "winner",
    "going",
    "checking",
    "everything",
    "raffle",
    "right",
    "gon",
    "na",
    "checking",
    "recent",
    "winners",
    "right",
    "raffle",
    "state",
    "reset",
    "players",
    "reversed",
    "know",
    "players",
    "reset",
    "etc",
    "etc",
    "say",
    "const",
    "raffle",
    "state",
    "equals",
    "awaits",
    "raffle",
    "dot",
    "get",
    "raffle",
    "state",
    "say",
    "const",
    "ending",
    "timestamp",
    "equals",
    "await",
    "raffle",
    "dot",
    "get",
    "last",
    "timestamp",
    "let",
    "start",
    "asserts",
    "first",
    "assert",
    "es",
    "players",
    "array",
    "reset",
    "zero",
    "call",
    "get",
    "number",
    "players",
    "zero",
    "const",
    "num",
    "players",
    "equals",
    "await",
    "raffle",
    "dot",
    "get",
    "number",
    "players",
    "like",
    "assert",
    "dot",
    "equal",
    "nine",
    "string",
    "going",
    "zero",
    "else",
    "assert",
    "well",
    "assert",
    "dot",
    "equal",
    "raffle",
    "state",
    "back",
    "open",
    "raffle",
    "string",
    "zero",
    "assert",
    "ending",
    "timestamp",
    "greater",
    "starting",
    "timestamp",
    "last",
    "timestamp",
    "updated",
    "also",
    "want",
    "make",
    "sure",
    "recent",
    "winner",
    "correct",
    "console",
    "dot",
    "log",
    "recent",
    "winner",
    "go",
    "vrf",
    "coordinator",
    "mock",
    "could",
    "simulate",
    "try",
    "figure",
    "random",
    "winner",
    "console",
    "dot",
    "log",
    "accounts",
    "show",
    "bunch",
    "01",
    "three",
    "raffle",
    "dot",
    "needs",
    "async",
    "function",
    "regular",
    "function",
    "let",
    "try",
    "one",
    "time",
    "get",
    "latest",
    "timestamp",
    "correct",
    "function",
    "let",
    "update",
    "correct",
    "latest",
    "let",
    "put",
    "latest",
    "spelling",
    "something",
    "wrong",
    "sure",
    "looks",
    "like",
    "printing",
    "recent",
    "winner",
    "even",
    "initialized",
    "let",
    "move",
    "console",
    "dot",
    "log",
    "recent",
    "winner",
    "know",
    "massive",
    "test",
    "let",
    "give",
    "try",
    "see",
    "everything",
    "kind",
    "think",
    "slowing",
    "good",
    "lot",
    "stuff",
    "uh",
    "huh",
    "finally",
    "get",
    "passing",
    "thing",
    "come",
    "ton",
    "console",
    "dot",
    "logging",
    "lot",
    "stuff",
    "signers",
    "getting",
    "printed",
    "let",
    "make",
    "little",
    "easier",
    "read",
    "add",
    "dot",
    "address",
    "see",
    "winner",
    "looks",
    "like",
    "winner",
    "going",
    "account",
    "number",
    "one",
    "great",
    "know",
    "account",
    "number",
    "one",
    "going",
    "winner",
    "get",
    "winners",
    "starting",
    "balance",
    "way",
    "call",
    "fulfill",
    "random",
    "words",
    "say",
    "const",
    "winner",
    "starting",
    "balance",
    "equals",
    "await",
    "accounts",
    "one",
    "dot",
    "get",
    "balance",
    "yes",
    "call",
    "get",
    "balance",
    "right",
    "like",
    "winner",
    "starting",
    "balance",
    "back",
    "tests",
    "say",
    "const",
    "winner",
    "ending",
    "balance",
    "equals",
    "await",
    "ounce",
    "one",
    "dot",
    "get",
    "balance",
    "make",
    "sure",
    "winner",
    "got",
    "paid",
    "need",
    "going",
    "big",
    "assert",
    "money",
    "stuff",
    "trust",
    "math",
    "going",
    "assert",
    "dot",
    "equal",
    "winner",
    "string",
    "excuse",
    "winter",
    "ending",
    "string",
    "equal",
    "winner",
    "starting",
    "balance",
    "dot",
    "add",
    "raffle",
    "entrance",
    "fee",
    "multiplied",
    "additional",
    "trance",
    "add",
    "raffle",
    "entrance",
    "fee",
    "string",
    "math",
    "basically",
    "saying",
    "winner",
    "end",
    "balance",
    "money",
    "everybody",
    "else",
    "added",
    "contract",
    "run",
    "test",
    "one",
    "time",
    "gosh",
    "darn",
    "passed",
    "okay",
    "lot",
    "code",
    "might",
    "one",
    "hardest",
    "pieces",
    "entire",
    "course",
    "going",
    "part",
    "right",
    "struggled",
    "little",
    "bit",
    "let",
    "bog",
    "probably",
    "one",
    "difficult",
    "sections",
    "course",
    "let",
    "quick",
    "refresher",
    "test",
    "see",
    "action",
    "staging",
    "test",
    "picking",
    "winner",
    "resetting",
    "lottery",
    "sending",
    "money",
    "basically",
    "testing",
    "fulfill",
    "random",
    "words",
    "thing",
    "want",
    "random",
    "winner",
    "wins",
    "get",
    "money",
    "actually",
    "well",
    "first",
    "started",
    "bunch",
    "random",
    "people",
    "enter",
    "lottery",
    "great",
    "sounds",
    "good",
    "wanted",
    "want",
    "call",
    "perform",
    "upkeep",
    "fulfill",
    "random",
    "words",
    "want",
    "pretend",
    "random",
    "number",
    "drawn",
    "code",
    "calls",
    "random",
    "number",
    "could",
    "done",
    "could",
    "assert",
    "checked",
    "variables",
    "right",
    "could",
    "totally",
    "done",
    "however",
    "test",
    "net",
    "always",
    "know",
    "exactly",
    "transaction",
    "going",
    "finish",
    "wait",
    "listen",
    "event",
    "fired",
    "could",
    "call",
    "transactions",
    "would",
    "end",
    "whole",
    "thing",
    "needed",
    "set",
    "something",
    "listen",
    "event",
    "fired",
    "said",
    "hey",
    "event",
    "fired",
    "transaction",
    "called",
    "testing",
    "local",
    "network",
    "mocking",
    "vrf",
    "coordinators",
    "control",
    "know",
    "exactly",
    "going",
    "run",
    "test",
    "net",
    "see",
    "staging",
    "tests",
    "wo",
    "rely",
    "setting",
    "listener",
    "listen",
    "channeling",
    "vrf",
    "keepers",
    "fire",
    "events",
    "staging",
    "test",
    "going",
    "important",
    "make",
    "sure",
    "everything",
    "correct",
    "set",
    "local",
    "tests",
    "like",
    "mimics",
    "going",
    "statement",
    "test",
    "going",
    "real",
    "network",
    "setting",
    "listener",
    "saying",
    "ah",
    "event",
    "going",
    "try",
    "actually",
    "check",
    "balances",
    "check",
    "everything",
    "working",
    "intended",
    "see",
    "going",
    "reject",
    "timeout",
    "takes",
    "200",
    "seconds",
    "going",
    "say",
    "okay",
    "something",
    "went",
    "wrong",
    "going",
    "cancel",
    "actually",
    "going",
    "bump",
    "300",
    "seconds",
    "think",
    "200",
    "seconds",
    "going",
    "enough",
    "depending",
    "quick",
    "rink",
    "b",
    "test",
    "might",
    "bump",
    "even",
    "bigger",
    "keep",
    "mind",
    "okay",
    "built",
    "fantastic",
    "tests",
    "let",
    "go",
    "ahead",
    "let",
    "run",
    "h",
    "h",
    "test",
    "see",
    "tests",
    "going",
    "pass",
    "well",
    "14",
    "passing",
    "everything",
    "passing",
    "looking",
    "good",
    "fantastic",
    "alright",
    "unit",
    "tests",
    "let",
    "go",
    "ahead",
    "create",
    "staging",
    "test",
    "staging",
    "test",
    "going",
    "look",
    "really",
    "similar",
    "massive",
    "test",
    "created",
    "reason",
    "set",
    "unit",
    "test",
    "weight",
    "promise",
    "thing",
    "raffle",
    "dot",
    "actually",
    "going",
    "need",
    "wait",
    "test",
    "net",
    "main",
    "net",
    "winner",
    "picked",
    "actual",
    "test",
    "net",
    "pretend",
    "chain",
    "link",
    "v",
    "ref",
    "pretend",
    "chain",
    "link",
    "keepers",
    "want",
    "going",
    "make",
    "sure",
    "10",
    "keepers",
    "actually",
    "working",
    "going",
    "want",
    "listen",
    "event",
    "fired",
    "want",
    "listen",
    "chain",
    "link",
    "vrf",
    "respond",
    "winner",
    "let",
    "create",
    "staging",
    "test",
    "test",
    "going",
    "run",
    "actual",
    "test",
    "net",
    "okay",
    "going",
    "create",
    "new",
    "test",
    "called",
    "raffle",
    "dot",
    "staging",
    "dot",
    "test",
    "dot",
    "jas",
    "going",
    "put",
    "staging",
    "test",
    "actually",
    "code",
    "pretty",
    "quickly",
    "staging",
    "tests",
    "gon",
    "na",
    "look",
    "real",
    "similar",
    "raffle",
    "test",
    "let",
    "grab",
    "whole",
    "first",
    "part",
    "adjust",
    "need",
    "close",
    "definitely",
    "gon",
    "na",
    "need",
    "raffle",
    "going",
    "need",
    "vrf",
    "coordinator",
    "mock",
    "going",
    "using",
    "mock",
    "since",
    "actual",
    "test",
    "net",
    "need",
    "raffle",
    "entrance",
    "fee",
    "need",
    "deployer",
    "need",
    "deployer",
    "might",
    "need",
    "interval",
    "let",
    "delete",
    "probably",
    "wo",
    "need",
    "chain",
    "id",
    "let",
    "delete",
    "well",
    "awesome",
    "something",
    "want",
    "keep",
    "mind",
    "comes",
    "staging",
    "tests",
    "want",
    "steam",
    "test",
    "run",
    "test",
    "net",
    "need",
    "run",
    "unit",
    "tests",
    "unit",
    "tests",
    "checking",
    "compatibility",
    "test",
    "net",
    "want",
    "unit",
    "tests",
    "run",
    "local",
    "network",
    "want",
    "staging",
    "tests",
    "run",
    "test",
    "network",
    "test",
    "going",
    "check",
    "make",
    "sure",
    "type",
    "chain",
    "oops",
    "looks",
    "like",
    "already",
    "imported",
    "development",
    "changes",
    "actually",
    "staging",
    "tests",
    "going",
    "check",
    "run",
    "test",
    "kind",
    "network",
    "gon",
    "na",
    "say",
    "development",
    "chains",
    "includes",
    "network",
    "dot",
    "name",
    "gon",
    "na",
    "say",
    "development",
    "chains",
    "includes",
    "network",
    "name",
    "chain",
    "development",
    "chains",
    "going",
    "use",
    "ternary",
    "operator",
    "say",
    "development",
    "chain",
    "something",
    "development",
    "chain",
    "something",
    "else",
    "development",
    "chain",
    "going",
    "well",
    "want",
    "skip",
    "actually",
    "skip",
    "putting",
    "describe",
    "dot",
    "skip",
    "skip",
    "whole",
    "section",
    "say",
    "development",
    "chain",
    "go",
    "ahead",
    "thing",
    "really",
    "nice",
    "syntax",
    "allows",
    "us",
    "skip",
    "staging",
    "tests",
    "local",
    "network",
    "additionally",
    "grab",
    "syntax",
    "go",
    "raffle",
    "dot",
    "test",
    "dot",
    "j",
    "unit",
    "tests",
    "add",
    "bang",
    "operator",
    "knot",
    "hit",
    "save",
    "saying",
    "development",
    "chain",
    "skip",
    "run",
    "development",
    "chain",
    "says",
    "run",
    "test",
    "net",
    "main",
    "net",
    "run",
    "local",
    "network",
    "great",
    "deployer",
    "going",
    "need",
    "going",
    "need",
    "deploy",
    "fixtures",
    "going",
    "run",
    "deploy",
    "script",
    "contracts",
    "already",
    "deployed",
    "need",
    "raffle",
    "wo",
    "need",
    "vrf",
    "coordinator",
    "mocks",
    "delete",
    "need",
    "entrance",
    "fee",
    "probably",
    "wo",
    "need",
    "interval",
    "go",
    "ahead",
    "delete",
    "alright",
    "awesome",
    "describe",
    "let",
    "make",
    "tests",
    "going",
    "make",
    "one",
    "giant",
    "test",
    "test",
    "kind",
    "everything",
    "end",
    "end",
    "add",
    "tests",
    "later",
    "want",
    "staging",
    "test",
    "going",
    "really",
    "similar",
    "massive",
    "test",
    "made",
    "fact",
    "going",
    "use",
    "code",
    "boilerplate",
    "let",
    "create",
    "describe",
    "say",
    "actually",
    "copy",
    "describe",
    "four",
    "random",
    "words",
    "paste",
    "going",
    "using",
    "lot",
    "code",
    "staging",
    "tests",
    "great",
    "say",
    "works",
    "live",
    "chain",
    "link",
    "keepers",
    "chain",
    "link",
    "vrf",
    "get",
    "random",
    "winner",
    "acing",
    "function",
    "going",
    "test",
    "test",
    "course",
    "want",
    "enter",
    "raffle",
    "anything",
    "else",
    "except",
    "enter",
    "raffle",
    "chain",
    "keepers",
    "vrf",
    "going",
    "ones",
    "actually",
    "kick",
    "lottery",
    "us",
    "quick",
    "grabbing",
    "starting",
    "timestamp",
    "kicks",
    "say",
    "const",
    "starting",
    "timestamp",
    "equals",
    "await",
    "raffle",
    "dot",
    "get",
    "last",
    "get",
    "latest",
    "timestamp",
    "get",
    "latest",
    "timestamp",
    "gon",
    "na",
    "grab",
    "later",
    "going",
    "test",
    "see",
    "timestamp",
    "indeed",
    "moved",
    "forward",
    "want",
    "enter",
    "lottery",
    "right",
    "want",
    "run",
    "command",
    "running",
    "time",
    "want",
    "know",
    "await",
    "raffle",
    "dot",
    "enter",
    "raffle",
    "want",
    "call",
    "yet",
    "want",
    "set",
    "listener",
    "first",
    "probably",
    "set",
    "listener",
    "entered",
    "raffle",
    "however",
    "controlled",
    "blockchain",
    "putting",
    "order",
    "okay",
    "want",
    "set",
    "listener",
    "enter",
    "raffle",
    "case",
    "blockchain",
    "moves",
    "really",
    "fast",
    "going",
    "set",
    "listener",
    "exact",
    "way",
    "gon",
    "na",
    "say",
    "await",
    "new",
    "promise",
    "going",
    "async",
    "function",
    "takes",
    "resolve",
    "reject",
    "going",
    "use",
    "little",
    "arrow",
    "notation",
    "going",
    "set",
    "listener",
    "gon",
    "na",
    "say",
    "raffle",
    "dot",
    "winner",
    "picked",
    "going",
    "another",
    "async",
    "function",
    "using",
    "arrow",
    "arrow",
    "function",
    "syntax",
    "say",
    "console",
    "dot",
    "log",
    "winner",
    "picked",
    "event",
    "fired",
    "get",
    "winner",
    "picked",
    "start",
    "asserts",
    "start",
    "making",
    "sure",
    "winner",
    "verifiably",
    "random",
    "winner",
    "picked",
    "money",
    "moved",
    "etc",
    "try",
    "catch",
    "error",
    "going",
    "automatically",
    "reject",
    "going",
    "reject",
    "promise",
    "goes",
    "well",
    "course",
    "going",
    "resolve",
    "promise",
    "listener",
    "set",
    "added",
    "asserts",
    "let",
    "go",
    "ahead",
    "write",
    "rest",
    "test",
    "go",
    "back",
    "update",
    "listener",
    "listener",
    "added",
    "inside",
    "actually",
    "going",
    "enter",
    "raffle",
    "inside",
    "await",
    "raffle",
    "dot",
    "enter",
    "raffle",
    "value",
    "going",
    "raffle",
    "entrance",
    "fee",
    "really",
    "right",
    "setting",
    "listener",
    "setting",
    "listener",
    "entering",
    "raffle",
    "code",
    "wo",
    "complete",
    "listener",
    "finished",
    "listening",
    "whole",
    "sec",
    "wait",
    "gon",
    "na",
    "say",
    "okay",
    "cool",
    "setup",
    "listener",
    "wait",
    "finish",
    "gets",
    "goes",
    "okay",
    "end",
    "code",
    "done",
    "executing",
    "oh",
    "resolve",
    "reject",
    "called",
    "yet",
    "still",
    "waiting",
    "listener",
    "finish",
    "listening",
    "get",
    "winner",
    "picked",
    "event",
    "emitted",
    "going",
    "get",
    "recent",
    "winner",
    "say",
    "const",
    "recent",
    "winner",
    "equals",
    "await",
    "raffle",
    "dot",
    "get",
    "recent",
    "winner",
    "get",
    "raffle",
    "state",
    "say",
    "const",
    "raffle",
    "state",
    "equals",
    "await",
    "raffle",
    "dot",
    "get",
    "raffle",
    "state",
    "get",
    "winners",
    "balance",
    "say",
    "const",
    "winner",
    "balance",
    "equals",
    "await",
    "recent",
    "winner",
    "since",
    "entering",
    "deployer",
    "check",
    "see",
    "deployers",
    "balance",
    "end",
    "ca",
    "right",
    "deployer",
    "object",
    "player",
    "account",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "signers",
    "wrap",
    "actually",
    "actually",
    "say",
    "accounts",
    "like",
    "count",
    "zero",
    "counts",
    "zero",
    "going",
    "deployer",
    "winner",
    "balance",
    "going",
    "accounts",
    "zero",
    "dot",
    "get",
    "balance",
    "going",
    "const",
    "ending",
    "timestamp",
    "equals",
    "weight",
    "raffle",
    "dot",
    "get",
    "latest",
    "timestamp",
    "also",
    "get",
    "starting",
    "balance",
    "say",
    "winner",
    "ending",
    "balance",
    "also",
    "get",
    "starting",
    "balance",
    "right",
    "enter",
    "say",
    "const",
    "winner",
    "starting",
    "balance",
    "equals",
    "await",
    "accounts",
    "zero",
    "dot",
    "get",
    "balance",
    "comparisons",
    "right",
    "great",
    "let",
    "comparisons",
    "first",
    "expect",
    "raffle",
    "reset",
    "different",
    "ways",
    "number",
    "players",
    "also",
    "say",
    "await",
    "expect",
    "raffle",
    "dot",
    "get",
    "player",
    "dot",
    "v",
    "dot",
    "reverted",
    "right",
    "get",
    "player",
    "zero",
    "get",
    "reverted",
    "even",
    "going",
    "object",
    "zero",
    "another",
    "way",
    "check",
    "see",
    "players",
    "array",
    "reset",
    "next",
    "assert",
    "dot",
    "equal",
    "recent",
    "string",
    "equal",
    "account",
    "zero",
    "dot",
    "address",
    "okay",
    "deployer",
    "else",
    "assert",
    "dot",
    "equal",
    "raffle",
    "state",
    "zero",
    "want",
    "email",
    "go",
    "back",
    "open",
    "done",
    "finally",
    "want",
    "make",
    "sure",
    "money",
    "transferred",
    "correctly",
    "assert",
    "dot",
    "equal",
    "winner",
    "ending",
    "balance",
    "string",
    "equal",
    "winner",
    "starting",
    "balance",
    "add",
    "raffle",
    "entrance",
    "string",
    "look",
    "enter",
    "raffle",
    "check",
    "starting",
    "balance",
    "right",
    "enter",
    "basically",
    "get",
    "raffle",
    "entrance",
    "fee",
    "back",
    "right",
    "ones",
    "entered",
    "raffle",
    "one",
    "assert",
    "assert",
    "ending",
    "timestamp",
    "greater",
    "starting",
    "timestamp",
    "course",
    "say",
    "resolve",
    "goes",
    "well",
    "resolve",
    "issue",
    "asserts",
    "going",
    "catch",
    "errors",
    "going",
    "reject",
    "going",
    "false",
    "whole",
    "test",
    "gon",
    "na",
    "go",
    "ah",
    "issue",
    "staging",
    "test",
    "looks",
    "really",
    "good",
    "let",
    "try",
    "let",
    "try",
    "staging",
    "test",
    "start",
    "finish",
    "order",
    "us",
    "test",
    "staging",
    "test",
    "end",
    "end",
    "first",
    "going",
    "need",
    "get",
    "sub",
    "id",
    "channeling",
    "fear",
    "f",
    "going",
    "need",
    "deploy",
    "contract",
    "using",
    "sub",
    "id",
    "going",
    "need",
    "register",
    "contract",
    "chain",
    "link",
    "vrf",
    "somebody",
    "going",
    "need",
    "register",
    "chain",
    "link",
    "keepers",
    "course",
    "going",
    "run",
    "staging",
    "tests",
    "let",
    "first",
    "thing",
    "going",
    "need",
    "get",
    "sub",
    "id",
    "chain",
    "link",
    "vrf",
    "okay",
    "great",
    "going",
    "come",
    "vrf",
    "dot",
    "chain",
    "dot",
    "link",
    "going",
    "need",
    "create",
    "new",
    "subscription",
    "enough",
    "rink",
    "b",
    "eath",
    "let",
    "want",
    "head",
    "full",
    "blockchain",
    "solidity",
    "course",
    "going",
    "scroll",
    "going",
    "look",
    "recommended",
    "test",
    "ranked",
    "going",
    "use",
    "faucets",
    "link",
    "get",
    "rigby",
    "link",
    "run",
    "fosses",
    "dot",
    "chain",
    "dot",
    "link",
    "let",
    "switch",
    "covid",
    "cerium",
    "rigby",
    "know",
    "going",
    "need",
    "link",
    "eath",
    "let",
    "go",
    "ahead",
    "get",
    "alright",
    "great",
    "transaction",
    "gone",
    "let",
    "double",
    "check",
    "wallet",
    "looks",
    "like",
    "indeed",
    "ethereum",
    "see",
    "link",
    "head",
    "link",
    "token",
    "contracts",
    "link",
    "token",
    "contracts",
    "chain",
    "link",
    "documentation",
    "scroll",
    "rigby",
    "grab",
    "contract",
    "address",
    "import",
    "tokens",
    "paste",
    "add",
    "custom",
    "tokens",
    "import",
    "tokens",
    "great",
    "see",
    "eath",
    "link",
    "perfect",
    "eath",
    "link",
    "let",
    "head",
    "v",
    "ref",
    "subscription",
    "management",
    "going",
    "create",
    "new",
    "subscription",
    "could",
    "totally",
    "programmatically",
    "user",
    "interface",
    "helping",
    "us",
    "facilitate",
    "call",
    "contracts",
    "registration",
    "contract",
    "completely",
    "decentralized",
    "chain",
    "let",
    "go",
    "ahead",
    "create",
    "subscription",
    "create",
    "subscription",
    "confirm",
    "transaction",
    "metamask",
    "rinkeby",
    "network",
    "little",
    "bit",
    "wading",
    "great",
    "gone",
    "go",
    "ahead",
    "click",
    "add",
    "funds",
    "button",
    "going",
    "show",
    "looks",
    "like",
    "accidentally",
    "refresh",
    "jump",
    "though",
    "refresh",
    "go",
    "back",
    "veer",
    "chain",
    "dot",
    "link",
    "new",
    "active",
    "subscription",
    "see",
    "number",
    "click",
    "subscription",
    "id",
    "great",
    "actually",
    "take",
    "come",
    "back",
    "code",
    "helper",
    "hardhead",
    "config",
    "paste",
    "subscription",
    "id",
    "subscription",
    "id",
    "rinkeby",
    "network",
    "awesome",
    "subscription",
    "see",
    "funded",
    "link",
    "oracle",
    "gas",
    "consumers",
    "right",
    "consumer",
    "going",
    "raffle",
    "lottery",
    "contract",
    "let",
    "add",
    "funds",
    "first",
    "need",
    "add",
    "whole",
    "lot",
    "going",
    "testing",
    "let",
    "go",
    "go",
    "ahead",
    "add",
    "link",
    "number",
    "might",
    "change",
    "depending",
    "different",
    "costs",
    "test",
    "nets",
    "much",
    "link",
    "token",
    "available",
    "actually",
    "working",
    "main",
    "net",
    "sure",
    "head",
    "doc",
    "touching",
    "link",
    "evm",
    "chains",
    "contract",
    "addresses",
    "read",
    "costs",
    "different",
    "chains",
    "figure",
    "exactly",
    "much",
    "put",
    "go",
    "full",
    "blockchain",
    "solidity",
    "course",
    "jas",
    "scroll",
    "lesson",
    "nine",
    "recommended",
    "link",
    "amounts",
    "rinky",
    "saving",
    "tests",
    "chain",
    "link",
    "vrf",
    "going",
    "put",
    "two",
    "keepers",
    "going",
    "put",
    "eight",
    "feel",
    "free",
    "refer",
    "know",
    "much",
    "put",
    "let",
    "go",
    "ahead",
    "confirm",
    "going",
    "approve",
    "adding",
    "funds",
    "go",
    "ahead",
    "confirm",
    "funding",
    "subscription",
    "pay",
    "oracle",
    "gas",
    "get",
    "random",
    "numbers",
    "great",
    "funded",
    "close",
    "little",
    "refresh",
    "see",
    "balance",
    "link",
    "consumers",
    "perfect",
    "got",
    "sub",
    "id",
    "funded",
    "let",
    "go",
    "ahead",
    "deploy",
    "contract",
    "already",
    "know",
    "good",
    "deploying",
    "contract",
    "go",
    "dotty",
    "v",
    "need",
    "add",
    "parameters",
    "previous",
    "projects",
    "need",
    "shrink",
    "rpc",
    "url",
    "need",
    "private",
    "key",
    "want",
    "verify",
    "need",
    "ether",
    "scan",
    "api",
    "key",
    "want",
    "gas",
    "output",
    "need",
    "coin",
    "market",
    "cap",
    "api",
    "key",
    "let",
    "make",
    "sure",
    "look",
    "deploy",
    "script",
    "real",
    "quick",
    "look",
    "helper",
    "hardcat",
    "config",
    "real",
    "quick",
    "looks",
    "like",
    "indeed",
    "everything",
    "able",
    "deploy",
    "one",
    "command",
    "able",
    "yarn",
    "hard",
    "hat",
    "h",
    "h",
    "ploy",
    "dash",
    "dash",
    "network",
    "rinkeby",
    "let",
    "go",
    "try",
    "right",
    "looks",
    "like",
    "compiled",
    "successfully",
    "deployed",
    "successfully",
    "even",
    "verified",
    "go",
    "open",
    "rinku",
    "ether",
    "scan",
    "see",
    "code",
    "verified",
    "looking",
    "beautiful",
    "read",
    "great",
    "see",
    "commands",
    "verified",
    "look",
    "git",
    "raffle",
    "state",
    "indeed",
    "see",
    "open",
    "right",
    "going",
    "stay",
    "open",
    "somebody",
    "ends",
    "raffle",
    "updates",
    "amount",
    "eath",
    "contract",
    "actually",
    "deployed",
    "contract",
    "using",
    "sub",
    "id",
    "need",
    "register",
    "contract",
    "chain",
    "link",
    "v",
    "ref",
    "chain",
    "link",
    "keepers",
    "need",
    "add",
    "consumer",
    "tell",
    "chinley",
    "vrf",
    "hey",
    "contract",
    "looking",
    "gon",
    "na",
    "go",
    "back",
    "v",
    "ref",
    "dot",
    "chain",
    "dot",
    "link",
    "going",
    "grab",
    "contract",
    "address",
    "going",
    "add",
    "consumer",
    "subscription",
    "ready",
    "add",
    "consumers",
    "gon",
    "na",
    "add",
    "consumer",
    "website",
    "help",
    "facilitate",
    "us",
    "interacting",
    "contract",
    "going",
    "approve",
    "user",
    "go",
    "ahead",
    "confirm",
    "transaction",
    "going",
    "wait",
    "go",
    "go",
    "keepers",
    "dot",
    "chain",
    "dot",
    "link",
    "thing",
    "work",
    "user",
    "interface",
    "register",
    "new",
    "upkeep",
    "go",
    "ahead",
    "add",
    "email",
    "hardhead",
    "free",
    "code",
    "camp",
    "call",
    "raffle",
    "upkeep",
    "paste",
    "upkeep",
    "address",
    "admin",
    "address",
    "ignore",
    "bit",
    "right",
    "gas",
    "limit",
    "going",
    "gas",
    "limit",
    "perform",
    "upkeep",
    "function",
    "gas",
    "estimator",
    "could",
    "check",
    "see",
    "much",
    "perform",
    "upkeep",
    "costs",
    "going",
    "put",
    "probably",
    "overkill",
    "fine",
    "check",
    "data",
    "going",
    "keep",
    "blank",
    "checkup",
    "keep",
    "take",
    "anything",
    "starting",
    "balance",
    "going",
    "put",
    "eight",
    "forget",
    "put",
    "starting",
    "balance",
    "always",
    "find",
    "later",
    "let",
    "go",
    "ahead",
    "register",
    "gon",
    "na",
    "get",
    "metamask",
    "pop",
    "gon",
    "na",
    "go",
    "ahead",
    "hit",
    "confirm",
    "go",
    "back",
    "vrf",
    "see",
    "indeed",
    "added",
    "awesome",
    "consumer",
    "vrf",
    "let",
    "wait",
    "keepers",
    "go",
    "upkeep",
    "registration",
    "requests",
    "submitted",
    "successfully",
    "domain",
    "net",
    "might",
    "actually",
    "wait",
    "little",
    "bit",
    "request",
    "go",
    "test",
    "automatically",
    "go",
    "go",
    "back",
    "keepers",
    "dot",
    "chain",
    "dot",
    "link",
    "see",
    "scroll",
    "upkeeps",
    "raffle",
    "upkeep",
    "accidentally",
    "use",
    "account",
    "tested",
    "ignore",
    "two",
    "one",
    "one",
    "created",
    "actually",
    "see",
    "balances",
    "minimum",
    "balance",
    "actually",
    "looks",
    "like",
    "eight",
    "link",
    "little",
    "bit",
    "low",
    "let",
    "go",
    "back",
    "fosses",
    "dot",
    "chain",
    "dot",
    "link",
    "slash",
    "rinky",
    "link",
    "come",
    "back",
    "raffle",
    "upkeep",
    "go",
    "ahead",
    "hit",
    "add",
    "funds",
    "add",
    "three",
    "go",
    "ahead",
    "confirm",
    "first",
    "need",
    "give",
    "permission",
    "spend",
    "approved",
    "link",
    "transfer",
    "let",
    "actually",
    "transfer",
    "link",
    "contract",
    "alright",
    "funds",
    "added",
    "successfully",
    "let",
    "little",
    "refresh",
    "longer",
    "see",
    "message",
    "saying",
    "underfunded",
    "balance",
    "see",
    "minimum",
    "balance",
    "see",
    "history",
    "funded",
    "twice",
    "actually",
    "kicks",
    "see",
    "activity",
    "type",
    "like",
    "perform",
    "upkeep",
    "something",
    "got",
    "sub",
    "id",
    "deployed",
    "contract",
    "registered",
    "chain",
    "link",
    "v",
    "ref",
    "registered",
    "chain",
    "link",
    "keepers",
    "need",
    "run",
    "staging",
    "tests",
    "running",
    "staging",
    "test",
    "essentially",
    "going",
    "us",
    "calling",
    "enter",
    "script",
    "right",
    "staging",
    "test",
    "entering",
    "lottery",
    "whole",
    "bunch",
    "validators",
    "running",
    "make",
    "sure",
    "things",
    "expect",
    "since",
    "contract",
    "actually",
    "verified",
    "could",
    "rigby",
    "ether",
    "scan",
    "actually",
    "go",
    "right",
    "contract",
    "section",
    "contract",
    "could",
    "even",
    "connect",
    "wallets",
    "turns",
    "red",
    "green",
    "little",
    "refresh",
    "see",
    "green",
    "connected",
    "even",
    "call",
    "functions",
    "contract",
    "ourself",
    "could",
    "enter",
    "raffle",
    "ourself",
    "would",
    "add",
    "know",
    "however",
    "much",
    "eath",
    "enter",
    "raffle",
    "would",
    "kick",
    "keepers",
    "vrf",
    "well",
    "could",
    "call",
    "via",
    "ether",
    "scan",
    "could",
    "obviously",
    "call",
    "via",
    "staging",
    "tests",
    "could",
    "call",
    "via",
    "scripts",
    "could",
    "call",
    "via",
    "console",
    "ton",
    "ways",
    "actually",
    "moment",
    "truth",
    "gon",
    "na",
    "run",
    "staging",
    "tests",
    "going",
    "us",
    "enter",
    "lottery",
    "set",
    "listener",
    "make",
    "sure",
    "everything",
    "works",
    "correctly",
    "additionally",
    "see",
    "raffle",
    "upkeep",
    "history",
    "see",
    "transaction",
    "go",
    "see",
    "transaction",
    "chain",
    "like",
    "vrf",
    "well",
    "ready",
    "sure",
    "let",
    "h",
    "h",
    "test",
    "dash",
    "dash",
    "network",
    "rink",
    "need",
    "state",
    "tests",
    "probably",
    "added",
    "console",
    "dot",
    "logs",
    "tell",
    "us",
    "hey",
    "tell",
    "us",
    "steps",
    "forgot",
    "follow",
    "along",
    "repo",
    "associated",
    "added",
    "console",
    "dot",
    "logs",
    "test",
    "right",
    "go",
    "ether",
    "scan",
    "contract",
    "go",
    "back",
    "rink",
    "ether",
    "scan",
    "paste",
    "address",
    "first",
    "step",
    "test",
    "course",
    "setting",
    "listener",
    "first",
    "transaction",
    "going",
    "entering",
    "raffle",
    "going",
    "kick",
    "everything",
    "right",
    "refresh",
    "little",
    "bit",
    "ether",
    "scan",
    "indeed",
    "see",
    "entered",
    "raffle",
    "updated",
    "balance",
    "raffle",
    "okay",
    "awesome",
    "raffle",
    "entered",
    "happens",
    "well",
    "raffle",
    "entered",
    "go",
    "raffle",
    "dot",
    "soul",
    "open",
    "enough",
    "time",
    "passed",
    "players",
    "balance",
    "checked",
    "get",
    "kicked",
    "keepers",
    "go",
    "keepers",
    "little",
    "refresh",
    "little",
    "bit",
    "indeed",
    "see",
    "checkup",
    "key",
    "passed",
    "see",
    "perform",
    "upkeep",
    "gone",
    "great",
    "perform",
    "upkeep",
    "well",
    "perform",
    "upkeep",
    "calls",
    "chainlink",
    "vrf",
    "go",
    "chainlink",
    "vrf",
    "refresh",
    "go",
    "history",
    "indeed",
    "see",
    "one",
    "transactions",
    "gone",
    "see",
    "transaction",
    "hash",
    "link",
    "spent",
    "etc",
    "go",
    "back",
    "tests",
    "indeed",
    "see",
    "raffle",
    "unit",
    "tests",
    "friend",
    "fulfill",
    "random",
    "request",
    "winner",
    "pick",
    "event",
    "fired",
    "means",
    "went",
    "entire",
    "process",
    "perfectly",
    "truly",
    "decentralized",
    "raffle",
    "work",
    "actual",
    "testament",
    "integration",
    "tests",
    "working",
    "correctly",
    "absolutely",
    "massive",
    "huge",
    "congratulations",
    "made",
    "far",
    "walk",
    "integration",
    "test",
    "bounce",
    "contract",
    "reset",
    "zero",
    "wallet",
    "address",
    "lottery",
    "right",
    "got",
    "money",
    "back",
    "might",
    "wondering",
    "hey",
    "see",
    "create",
    "raffle",
    "function",
    "see",
    "enter",
    "raffle",
    "see",
    "chain",
    "link",
    "nodes",
    "call",
    "perform",
    "upkeep",
    "fulfill",
    "random",
    "words",
    "come",
    "matter",
    "often",
    "refresh",
    "see",
    "transactions",
    "well",
    "actually",
    "going",
    "considered",
    "internal",
    "transactions",
    "fulfill",
    "random",
    "words",
    "actually",
    "called",
    "vrf",
    "coordinator",
    "vrf",
    "coordinator",
    "contract",
    "calls",
    "full",
    "randomness",
    "go",
    "internal",
    "transactions",
    "one",
    "transactions",
    "going",
    "transaction",
    "vrf",
    "coordinator",
    "contract",
    "calls",
    "contract",
    "thing",
    "perform",
    "upkeep",
    "perform",
    "upkeep",
    "chain",
    "link",
    "nodes",
    "actually",
    "call",
    "registry",
    "contract",
    "registry",
    "contract",
    "calls",
    "perform",
    "upkeep",
    "see",
    "go",
    "internal",
    "transactions",
    "see",
    "let",
    "look",
    "enter",
    "raffle",
    "well",
    "since",
    "learned",
    "events",
    "logs",
    "actually",
    "go",
    "logs",
    "section",
    "see",
    "log",
    "event",
    "emitted",
    "see",
    "name",
    "raffle",
    "enter",
    "see",
    "topic",
    "zero",
    "going",
    "identify",
    "entire",
    "event",
    "also",
    "see",
    "number",
    "index",
    "topic",
    "one",
    "address",
    "player",
    "data",
    "associated",
    "right",
    "index",
    "parameters",
    "show",
    "topics",
    "absolutely",
    "phenomenal",
    "wow",
    "absolutely",
    "massive",
    "rerun",
    "unit",
    "test",
    "hh",
    "test",
    "run",
    "unit",
    "tests",
    "see",
    "passing",
    "well",
    "things",
    "looking",
    "fantastic",
    "successfully",
    "created",
    "verifiably",
    "random",
    "autonomous",
    "decentralized",
    "raffle",
    "lottery",
    "deployed",
    "blockchain",
    "excited",
    "right",
    "going",
    "show",
    "push",
    "github",
    "however",
    "want",
    "push",
    "get",
    "tweet",
    "tweet",
    "chainlink",
    "tweet",
    "free",
    "code",
    "camp",
    "please",
    "feel",
    "free",
    "amazing",
    "job",
    "getting",
    "far",
    "gon",
    "na",
    "want",
    "push",
    "github",
    "remember",
    "going",
    "want",
    "put",
    "dot",
    "git",
    "ignore",
    "add",
    "ton",
    "stuff",
    "like",
    "vs",
    "code",
    "artifacts",
    "cash",
    "deployments",
    "known",
    "modules",
    "etc",
    "type",
    "chain",
    "types",
    "stuff",
    "find",
    "sample",
    "dot",
    "git",
    "ignore",
    "course",
    "github",
    "repo",
    "associated",
    "advanced",
    "project",
    "lot",
    "really",
    "advanced",
    "things",
    "section",
    "course",
    "think",
    "point",
    "got",
    "fundamentals",
    "going",
    "move",
    "front",
    "end",
    "going",
    "move",
    "industry",
    "specific",
    "advanced",
    "topics",
    "really",
    "going",
    "supercharge",
    "make",
    "one",
    "masters",
    "blockchain",
    "smart",
    "contract",
    "realm",
    "huge",
    "congratulations",
    "one",
    "time",
    "definitely",
    "go",
    "celebrate",
    "definitely",
    "go",
    "walk",
    "take",
    "quick",
    "break",
    "let",
    "everything",
    "learned",
    "settling",
    "brain",
    "get",
    "ready",
    "next",
    "one",
    "alright",
    "gon",
    "na",
    "go",
    "typescript",
    "edition",
    "lesson",
    "gon",
    "na",
    "go",
    "little",
    "bit",
    "quickly",
    "learning",
    "much",
    "new",
    "stuff",
    "typescript",
    "edition",
    "want",
    "follow",
    "along",
    "open",
    "repo",
    "use",
    "typescript",
    "branch",
    "one",
    "thing",
    "note",
    "little",
    "bit",
    "different",
    "promise",
    "tests",
    "weight",
    "promise",
    "void",
    "going",
    "returning",
    "anything",
    "promise",
    "rest",
    "going",
    "exactly",
    "going",
    "hard",
    "hat",
    "dot",
    "config",
    "typescript",
    "going",
    "use",
    "imports",
    "everything",
    "else",
    "pretty",
    "much",
    "going",
    "export",
    "config",
    "like",
    "last",
    "time",
    "package",
    "dot",
    "json",
    "course",
    "going",
    "typescript",
    "dependencies",
    "well",
    "deploy",
    "scripts",
    "going",
    "follow",
    "functionality",
    "used",
    "deploy",
    "scripts",
    "use",
    "type",
    "deploy",
    "function",
    "variables",
    "export",
    "bottom",
    "also",
    "import",
    "hard",
    "hat",
    "runtime",
    "environment",
    "type",
    "pull",
    "deployments",
    "get",
    "named",
    "account",
    "networks",
    "tests",
    "course",
    "still",
    "importing",
    "types",
    "contracts",
    "type",
    "chain",
    "slash",
    "types",
    "like",
    "see",
    "like",
    "example",
    "raffle",
    "going",
    "signed",
    "raffle",
    "vrf",
    "coordinator",
    "v",
    "mock",
    "going",
    "signed",
    "type",
    "vrf",
    "coordinator",
    "v",
    "mk",
    "wanted",
    "deploy",
    "contract",
    "factories",
    "could",
    "well",
    "going",
    "main",
    "differences",
    "typescript",
    "anything",
    "really",
    "new",
    "want",
    "follow",
    "along",
    "typescript",
    "want",
    "code",
    "everything",
    "typescript",
    "example",
    "right",
    "welcome",
    "back",
    "hope",
    "break",
    "absolutely",
    "fantastic",
    "getting",
    "advanced",
    "full",
    "stack",
    "slash",
    "front",
    "end",
    "development",
    "done",
    "back",
    "end",
    "development",
    "created",
    "smart",
    "contracts",
    "created",
    "lottery",
    "last",
    "section",
    "wonderful",
    "code",
    "allows",
    "us",
    "work",
    "provably",
    "decentralized",
    "lottery",
    "order",
    "regular",
    "everyday",
    "people",
    "use",
    "lottery",
    "going",
    "need",
    "build",
    "front",
    "end",
    "previously",
    "learned",
    "build",
    "front",
    "end",
    "raw",
    "html",
    "javascript",
    "funmi",
    "project",
    "created",
    "front",
    "end",
    "pure",
    "html",
    "javascript",
    "creating",
    "applications",
    "html",
    "javascript",
    "great",
    "want",
    "absolutely",
    "vanilla",
    "protocols",
    "limitations",
    "working",
    "framework",
    "like",
    "going",
    "working",
    "section",
    "going",
    "make",
    "lives",
    "lot",
    "easier",
    "going",
    "able",
    "develop",
    "quicker",
    "functionality",
    "less",
    "time",
    "remember",
    "back",
    "project",
    "really",
    "fleshed",
    "project",
    "remember",
    "bunch",
    "buttons",
    "really",
    "working",
    "framework",
    "really",
    "going",
    "enable",
    "us",
    "put",
    "features",
    "add",
    "styling",
    "applications",
    "really",
    "easy",
    "code",
    "entire",
    "section",
    "located",
    "lesson",
    "located",
    "github",
    "repository",
    "associated",
    "course",
    "put",
    "asterisk",
    "said",
    "many",
    "times",
    "front",
    "end",
    "sections",
    "course",
    "required",
    "going",
    "learn",
    "anything",
    "new",
    "back",
    "end",
    "front",
    "end",
    "section",
    "care",
    "building",
    "websites",
    "want",
    "learn",
    "smart",
    "contract",
    "aspect",
    "course",
    "skip",
    "sections",
    "want",
    "learn",
    "build",
    "front",
    "end",
    "applications",
    "want",
    "give",
    "users",
    "non",
    "developers",
    "abilities",
    "interact",
    "smart",
    "contracts",
    "please",
    "continue",
    "watch",
    "also",
    "put",
    "asterix",
    "worked",
    "frameworks",
    "learning",
    "curve",
    "seem",
    "little",
    "bit",
    "steep",
    "said",
    "many",
    "times",
    "going",
    "front",
    "end",
    "course",
    "would",
    "take",
    "several",
    "hours",
    "want",
    "video",
    "never",
    "done",
    "front",
    "end",
    "one",
    "sections",
    "recommend",
    "follow",
    "along",
    "one",
    "optional",
    "sub",
    "lessons",
    "going",
    "play",
    "follow",
    "along",
    "one",
    "sub",
    "lessons",
    "definitely",
    "incredibly",
    "helpful",
    "one",
    "videos",
    "sub",
    "lessons",
    "video",
    "right",
    "connect",
    "smart",
    "contracts",
    "metamask",
    "shows",
    "number",
    "ways",
    "connecting",
    "smart",
    "contracts",
    "building",
    "kind",
    "front",
    "ends",
    "start",
    "raw",
    "html",
    "javascript",
    "edition",
    "really",
    "get",
    "practice",
    "html",
    "javascript",
    "moves",
    "index",
    "js",
    "ethers",
    "next",
    "jas",
    "based",
    "applications",
    "different",
    "ways",
    "install",
    "new",
    "insight",
    "thinking",
    "approaching",
    "absolutely",
    "video",
    "watch",
    "new",
    "front",
    "end",
    "development",
    "additionally",
    "section",
    "like",
    "said",
    "going",
    "using",
    "framework",
    "particular",
    "going",
    "using",
    "next",
    "jas",
    "framework",
    "next",
    "jas",
    "react",
    "based",
    "framework",
    "react",
    "framework",
    "building",
    "front",
    "end",
    "full",
    "stack",
    "applications",
    "next",
    "jas",
    "framework",
    "top",
    "react",
    "framework",
    "already",
    "know",
    "react",
    "going",
    "come",
    "naturally",
    "reason",
    "using",
    "react",
    "next",
    "jas",
    "react",
    "easily",
    "right",
    "one",
    "popular",
    "frameworks",
    "languages",
    "surprise",
    "got",
    "little",
    "article",
    "github",
    "repo",
    "titled",
    "use",
    "react",
    "js",
    "web",
    "development",
    "go",
    "little",
    "bit",
    "biggest",
    "applications",
    "like",
    "facebook",
    "instagram",
    "use",
    "react",
    "js",
    "number",
    "fortune",
    "500",
    "companies",
    "react",
    "js",
    "especially",
    "blockchain",
    "space",
    "easily",
    "popular",
    "protocols",
    "like",
    "uniswap",
    "avi",
    "also",
    "using",
    "react",
    "jas",
    "reason",
    "using",
    "next",
    "jas",
    "top",
    "react",
    "jas",
    "next",
    "jas",
    "think",
    "makes",
    "working",
    "react",
    "much",
    "easier",
    "want",
    "us",
    "work",
    "easiest",
    "powerful",
    "framework",
    "next",
    "jas",
    "also",
    "getting",
    "ton",
    "steam",
    "really",
    "advanced",
    "mind",
    "easier",
    "use",
    "features",
    "raw",
    "react",
    "like",
    "said",
    "never",
    "worked",
    "react",
    "never",
    "worked",
    "next",
    "jas",
    "want",
    "little",
    "brush",
    "definitely",
    "watch",
    "video",
    "six",
    "ways",
    "connect",
    "depth",
    "wallet",
    "find",
    "struggling",
    "section",
    "front",
    "end",
    "stuff",
    "really",
    "make",
    "sense",
    "also",
    "next",
    "jas",
    "crash",
    "course",
    "github",
    "repo",
    "associated",
    "course",
    "hour",
    "long",
    "absolutely",
    "phenomenal",
    "free",
    "code",
    "camp",
    "also",
    "next",
    "jas",
    "crash",
    "courses",
    "struggling",
    "front",
    "go",
    "take",
    "next",
    "jas",
    "course",
    "come",
    "back",
    "section",
    "skip",
    "front",
    "end",
    "sections",
    "together",
    "rest",
    "course",
    "back",
    "end",
    "come",
    "back",
    "front",
    "end",
    "sections",
    "going",
    "show",
    "cutting",
    "edge",
    "ways",
    "interact",
    "work",
    "front",
    "end",
    "also",
    "deploy",
    "follow",
    "along",
    "correctly",
    "end",
    "website",
    "deployed",
    "show",
    "send",
    "link",
    "friends",
    "know",
    "already",
    "showed",
    "looks",
    "like",
    "going",
    "show",
    "one",
    "time",
    "walk",
    "see",
    "exactly",
    "going",
    "decentralized",
    "lottery",
    "go",
    "ahead",
    "connect",
    "wallet",
    "already",
    "connected",
    "switch",
    "switch",
    "around",
    "networks",
    "app",
    "actually",
    "recognize",
    "say",
    "hey",
    "supported",
    "chains",
    "working",
    "going",
    "31337",
    "localhost",
    "four",
    "ring",
    "feed",
    "learn",
    "add",
    "validation",
    "application",
    "app",
    "works",
    "chain",
    "want",
    "go",
    "ahead",
    "interact",
    "normally",
    "click",
    "button",
    "metamask",
    "pop",
    "go",
    "ahead",
    "confirm",
    "get",
    "little",
    "transaction",
    "notification",
    "saying",
    "transaction",
    "complete",
    "get",
    "front",
    "end",
    "updated",
    "back",
    "end",
    "able",
    "see",
    "chain",
    "link",
    "nodes",
    "chinuch",
    "v",
    "ref",
    "work",
    "actually",
    "pick",
    "winner",
    "refresh",
    "able",
    "see",
    "back",
    "end",
    "node",
    "updated",
    "indeed",
    "previous",
    "winner",
    "awesome",
    "going",
    "show",
    "build",
    "also",
    "going",
    "show",
    "host",
    "actual",
    "site",
    "able",
    "push",
    "blockchain",
    "additionally",
    "gon",
    "na",
    "host",
    "decentralized",
    "context",
    "site",
    "going",
    "hosted",
    "technology",
    "allows",
    "us",
    "host",
    "websites",
    "decentralized",
    "contexts",
    "well",
    "swore",
    "backends",
    "even",
    "front",
    "ends",
    "hosted",
    "decentralized",
    "context",
    "hope",
    "incredibly",
    "excited",
    "going",
    "showing",
    "cutting",
    "edge",
    "tools",
    "many",
    "top",
    "blockchain",
    "projects",
    "use",
    "let",
    "jump",
    "right",
    "currently",
    "hardhead",
    "smart",
    "contract",
    "lottery",
    "project",
    "project",
    "hard",
    "hat",
    "smart",
    "contract",
    "lottery",
    "great",
    "going",
    "going",
    "create",
    "new",
    "folder",
    "although",
    "going",
    "coming",
    "back",
    "folder",
    "time",
    "time",
    "make",
    "couple",
    "updates",
    "want",
    "keep",
    "open",
    "absolutely",
    "gon",
    "na",
    "go",
    "ahead",
    "cd",
    "download",
    "directory",
    "kind",
    "main",
    "directory",
    "whole",
    "course",
    "going",
    "create",
    "new",
    "directory",
    "called",
    "next",
    "jas",
    "smart",
    "contract",
    "lottery",
    "fcc",
    "going",
    "cd",
    "next",
    "jas",
    "smart",
    "contract",
    "lottery",
    "fcc",
    "go",
    "ahead",
    "hit",
    "code",
    "period",
    "like",
    "said",
    "want",
    "keep",
    "one",
    "new",
    "folder",
    "absolutely",
    "basically",
    "opening",
    "vs",
    "code",
    "next",
    "jas",
    "smart",
    "contract",
    "lottery",
    "folder",
    "front",
    "end",
    "stuff",
    "particular",
    "want",
    "absolutely",
    "sure",
    "using",
    "versions",
    "git",
    "clone",
    "repo",
    "copy",
    "yarn",
    "dot",
    "lock",
    "package",
    "dot",
    "json",
    "run",
    "yarn",
    "make",
    "sure",
    "always",
    "using",
    "exact",
    "packages",
    "using",
    "never",
    "run",
    "weird",
    "issues",
    "run",
    "issue",
    "one",
    "first",
    "things",
    "especially",
    "front",
    "end",
    "parts",
    "go",
    "back",
    "make",
    "sure",
    "exact",
    "yarn",
    "dot",
    "lock",
    "package",
    "json",
    "examples",
    "go",
    "front",
    "end",
    "project",
    "going",
    "create",
    "website",
    "gon",
    "na",
    "create",
    "front",
    "end",
    "application",
    "like",
    "said",
    "gon",
    "na",
    "using",
    "next",
    "jas",
    "want",
    "follow",
    "along",
    "next",
    "jas",
    "documentation",
    "great",
    "getting",
    "started",
    "walking",
    "us",
    "going",
    "yarn",
    "create",
    "next",
    "app",
    "put",
    "little",
    "period",
    "saying",
    "want",
    "next",
    "app",
    "directory",
    "put",
    "period",
    "create",
    "new",
    "folder",
    "double",
    "folders",
    "okay",
    "awesome",
    "little",
    "files",
    "explorer",
    "section",
    "see",
    "different",
    "files",
    "come",
    "boilerplate",
    "let",
    "quick",
    "walkthrough",
    "going",
    "also",
    "go",
    "two",
    "videos",
    "recommended",
    "hurt",
    "go",
    "twice",
    "node",
    "modules",
    "course",
    "going",
    "package",
    "installations",
    "pages",
    "going",
    "different",
    "pages",
    "site",
    "let",
    "let",
    "show",
    "mean",
    "run",
    "whole",
    "thing",
    "actually",
    "run",
    "yarn",
    "run",
    "dev",
    "get",
    "started",
    "server",
    "blah",
    "blah",
    "blah",
    "blah",
    "blah",
    "command",
    "click",
    "copy",
    "paste",
    "browser",
    "see",
    "localhost",
    "3000",
    "page",
    "actually",
    "going",
    "default",
    "page",
    "know",
    "considered",
    "slash",
    "create",
    "new",
    "pages",
    "could",
    "new",
    "file",
    "know",
    "dog",
    "dot",
    "jas",
    "know",
    "copy",
    "paste",
    "index",
    "dog",
    "jas",
    "paste",
    "delete",
    "everything",
    "inside",
    "div",
    "follow",
    "along",
    "go",
    "hi",
    "save",
    "go",
    "back",
    "put",
    "dog",
    "get",
    "pages",
    "going",
    "kind",
    "different",
    "routes",
    "different",
    "spots",
    "website",
    "index",
    "going",
    "default",
    "kind",
    "like",
    "homepage",
    "going",
    "delete",
    "dardo",
    "inside",
    "files",
    "going",
    "something",
    "called",
    "react",
    "syntax",
    "jsx",
    "come",
    "jas",
    "basically",
    "reacts",
    "text",
    "next",
    "jas",
    "based",
    "react",
    "see",
    "pages",
    "weird",
    "combination",
    "javascript",
    "html",
    "see",
    "import",
    "stuff",
    "top",
    "reminds",
    "us",
    "javascript",
    "see",
    "important",
    "stuff",
    "top",
    "see",
    "like",
    "div",
    "head",
    "main",
    "h1",
    "p",
    "see",
    "like",
    "html",
    "tags",
    "react",
    "index",
    "js",
    "allow",
    "us",
    "combination",
    "javascript",
    "html",
    "actually",
    "makes",
    "life",
    "lot",
    "easier",
    "also",
    "notice",
    "imports",
    "remember",
    "told",
    "earlier",
    "imports",
    "work",
    "front",
    "end",
    "require",
    "difference",
    "node",
    "equal",
    "javascript",
    "right",
    "differences",
    "start",
    "getting",
    "little",
    "bit",
    "confusing",
    "way",
    "usually",
    "like",
    "think",
    "say",
    "js",
    "excuse",
    "say",
    "back",
    "end",
    "j",
    "little",
    "different",
    "front",
    "end",
    "yes",
    "back",
    "end",
    "jas",
    "front",
    "end",
    "jas",
    "little",
    "bit",
    "different",
    "kind",
    "way",
    "like",
    "think",
    "going",
    "entry",
    "point",
    "everything",
    "way",
    "react",
    "next",
    "jas",
    "work",
    "everything",
    "called",
    "component",
    "based",
    "files",
    "gon",
    "na",
    "see",
    "export",
    "default",
    "function",
    "home",
    "something",
    "along",
    "lines",
    "react",
    "next",
    "jas",
    "say",
    "hey",
    "huge",
    "clump",
    "html",
    "stuff",
    "hodgepodge",
    "javascript",
    "inside",
    "considered",
    "component",
    "pages",
    "get",
    "wrapped",
    "underscore",
    "page",
    "page",
    "kind",
    "like",
    "main",
    "entry",
    "point",
    "get",
    "stuck",
    "component",
    "section",
    "app",
    "jas",
    "think",
    "graph",
    "gs",
    "kind",
    "whole",
    "application",
    "whole",
    "front",
    "end",
    "homepage",
    "component",
    "sticking",
    "index",
    "dot",
    "j",
    "right",
    "swapping",
    "component",
    "index",
    "dot",
    "api",
    "wanted",
    "wanted",
    "like",
    "http",
    "get",
    "http",
    "post",
    "requests",
    "going",
    "going",
    "pretty",
    "much",
    "ignore",
    "api",
    "public",
    "going",
    "public",
    "images",
    "like",
    "favicon",
    "versaille",
    "svg",
    "styles",
    "going",
    "css",
    "project",
    "css",
    "stands",
    "cascading",
    "style",
    "sheets",
    "basically",
    "way",
    "style",
    "html",
    "going",
    "change",
    "way",
    "styling",
    "little",
    "bit",
    "basically",
    "eslint",
    "dumping",
    "right",
    "dot",
    "git",
    "ignore",
    "know",
    "next",
    "dot",
    "config",
    "dot",
    "configuration",
    "file",
    "next",
    "jas",
    "course",
    "package",
    "json",
    "readme",
    "yarn",
    "dot",
    "lock",
    "going",
    "actually",
    "going",
    "inside",
    "pages",
    "folder",
    "also",
    "going",
    "create",
    "couple",
    "folders",
    "going",
    "main",
    "stuff",
    "like",
    "said",
    "love",
    "working",
    "prettier",
    "going",
    "automatically",
    "dump",
    "prettier",
    "rc",
    "prettier",
    "ignore",
    "format",
    "code",
    "little",
    "bit",
    "nicer",
    "grab",
    "prettier",
    "rc",
    "last",
    "projects",
    "grab",
    "prettier",
    "ignore",
    "well",
    "pause",
    "right",
    "copy",
    "paste",
    "github",
    "repo",
    "associated",
    "lesson",
    "paste",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "prettier",
    "auto",
    "format",
    "code",
    "come",
    "back",
    "save",
    "boom",
    "stuff",
    "gets",
    "auto",
    "formatted",
    "going",
    "using",
    "multi",
    "terminal",
    "feature",
    "right",
    "one",
    "running",
    "front",
    "end",
    "come",
    "back",
    "front",
    "end",
    "hit",
    "refresh",
    "still",
    "running",
    "one",
    "know",
    "scripts",
    "stuff",
    "yarn",
    "run",
    "dev",
    "running",
    "right",
    "go",
    "package",
    "json",
    "running",
    "yarn",
    "run",
    "dev",
    "runs",
    "next",
    "dev",
    "actually",
    "let",
    "cancel",
    "yarn",
    "dev",
    "yarn",
    "actually",
    "smart",
    "enough",
    "need",
    "run",
    "dev",
    "runs",
    "next",
    "dev",
    "next",
    "command",
    "comes",
    "built",
    "installed",
    "next",
    "yarn",
    "create",
    "next",
    "app",
    "next",
    "jas",
    "comes",
    "scripts",
    "already",
    "built",
    "us",
    "want",
    "build",
    "front",
    "end",
    "enable",
    "people",
    "interact",
    "lottery",
    "fair",
    "way",
    "connect",
    "smart",
    "contract",
    "running",
    "let",
    "create",
    "simple",
    "front",
    "end",
    "pieces",
    "first",
    "thing",
    "gon",
    "na",
    "gon",
    "na",
    "go",
    "pages",
    "going",
    "go",
    "stuff",
    "cute",
    "nice",
    "thank",
    "next",
    "jas",
    "going",
    "delete",
    "delete",
    "everything",
    "except",
    "headpiece",
    "gon",
    "na",
    "leave",
    "going",
    "change",
    "name",
    "way",
    "going",
    "change",
    "name",
    "crate",
    "next",
    "app",
    "smart",
    "contract",
    "lottery",
    "raffle",
    "whatever",
    "want",
    "description",
    "smart",
    "contract",
    "lottery",
    "right",
    "head",
    "going",
    "write",
    "hello",
    "blue",
    "save",
    "look",
    "front",
    "end",
    "see",
    "says",
    "smart",
    "contract",
    "lottery",
    "top",
    "going",
    "move",
    "way",
    "smart",
    "contract",
    "lottery",
    "top",
    "see",
    "hello",
    "smart",
    "contract",
    "lottery",
    "hello",
    "description",
    "going",
    "see",
    "going",
    "something",
    "web",
    "scrapers",
    "stuff",
    "going",
    "find",
    "one",
    "first",
    "things",
    "going",
    "need",
    "going",
    "need",
    "create",
    "connect",
    "button",
    "done",
    "past",
    "raw",
    "javascript",
    "going",
    "next",
    "js",
    "react",
    "one",
    "made",
    "previously",
    "pretty",
    "minimalistic",
    "fact",
    "bring",
    "back",
    "checked",
    "see",
    "windows",
    "aetherium",
    "went",
    "requested",
    "connected",
    "said",
    "okay",
    "cool",
    "connected",
    "lot",
    "things",
    "would",
    "want",
    "application",
    "change",
    "networks",
    "application",
    "detect",
    "change",
    "users",
    "application",
    "detect",
    "really",
    "stringent",
    "functionality",
    "actually",
    "connecting",
    "wallet",
    "going",
    "make",
    "wallet",
    "connect",
    "button",
    "incredibly",
    "powerful",
    "connect",
    "button",
    "switch",
    "networks",
    "switch",
    "accounts",
    "pretty",
    "much",
    "anything",
    "application",
    "know",
    "application",
    "responsive",
    "gon",
    "na",
    "one",
    "first",
    "things",
    "going",
    "going",
    "create",
    "header",
    "connect",
    "button",
    "nav",
    "bar",
    "one",
    "little",
    "navbar",
    "saying",
    "hey",
    "know",
    "connect",
    "button",
    "gon",
    "na",
    "first",
    "thing",
    "going",
    "build",
    "whole",
    "connect",
    "button",
    "index",
    "dot",
    "j",
    "stick",
    "instead",
    "going",
    "going",
    "make",
    "called",
    "component",
    "going",
    "create",
    "new",
    "folder",
    "called",
    "components",
    "going",
    "create",
    "new",
    "file",
    "called",
    "might",
    "also",
    "see",
    "lot",
    "people",
    "x",
    "literally",
    "exact",
    "thing",
    "either",
    "one",
    "going",
    "dot",
    "jsx",
    "remind",
    "react",
    "file",
    "creating",
    "component",
    "creating",
    "yeah",
    "j",
    "jsx",
    "want",
    "learn",
    "little",
    "bit",
    "components",
    "got",
    "link",
    "learning",
    "components",
    "basically",
    "independent",
    "reusable",
    "bits",
    "code",
    "serve",
    "purpose",
    "javascript",
    "functions",
    "work",
    "isolation",
    "return",
    "html",
    "basically",
    "going",
    "create",
    "like",
    "little",
    "chunk",
    "html",
    "going",
    "export",
    "index",
    "like",
    "done",
    "past",
    "helps",
    "modularize",
    "reuse",
    "header",
    "component",
    "know",
    "across",
    "project",
    "going",
    "using",
    "header",
    "one",
    "area",
    "however",
    "still",
    "nice",
    "modularize",
    "project",
    "regardless",
    "get",
    "start",
    "going",
    "called",
    "functional",
    "base",
    "component",
    "going",
    "create",
    "basically",
    "function",
    "called",
    "home",
    "write",
    "really",
    "pretty",
    "much",
    "exactly",
    "like",
    "see",
    "javascript",
    "except",
    "going",
    "return",
    "html",
    "like",
    "little",
    "div",
    "vs",
    "code",
    "auto",
    "created",
    "closing",
    "div",
    "going",
    "like",
    "hi",
    "header",
    "going",
    "real",
    "minimalistic",
    "component",
    "like",
    "valid",
    "component",
    "function",
    "returns",
    "html",
    "give",
    "applications",
    "ability",
    "use",
    "component",
    "export",
    "default",
    "function",
    "home",
    "import",
    "imports",
    "home",
    "actually",
    "excuse",
    "going",
    "call",
    "home",
    "going",
    "call",
    "header",
    "header",
    "excuse",
    "export",
    "default",
    "function",
    "header",
    "import",
    "header",
    "directory",
    "components",
    "slash",
    "header",
    "like",
    "imported",
    "header",
    "index",
    "go",
    "back",
    "front",
    "end",
    "still",
    "running",
    "see",
    "right",
    "remember",
    "everything",
    "goes",
    "app",
    "slash",
    "page",
    "going",
    "go",
    "index",
    "js",
    "importing",
    "header",
    "returning",
    "header",
    "right",
    "see",
    "see",
    "returns",
    "html",
    "returning",
    "see",
    "clearly",
    "header",
    "imported",
    "header",
    "need",
    "actually",
    "add",
    "header",
    "header",
    "adds",
    "closing",
    "tag",
    "right",
    "add",
    "stuff",
    "know",
    "two",
    "tags",
    "go",
    "ahead",
    "one",
    "liner",
    "backslash",
    "end",
    "saying",
    "hey",
    "open",
    "closed",
    "tag",
    "imported",
    "think",
    "see",
    "front",
    "end",
    "added",
    "index",
    "js",
    "right",
    "see",
    "hi",
    "header",
    "added",
    "header",
    "see",
    "hello",
    "high",
    "header",
    "hello",
    "boom",
    "anything",
    "obviously",
    "see",
    "reflected",
    "front",
    "end",
    "hi",
    "header",
    "blah",
    "blah",
    "blah",
    "know",
    "bunch",
    "dribbles",
    "see",
    "front",
    "end",
    "going",
    "section",
    "going",
    "make",
    "header",
    "navbar",
    "functionality",
    "connect",
    "button",
    "going",
    "tell",
    "something",
    "going",
    "love",
    "summer",
    "going",
    "hate",
    "going",
    "show",
    "going",
    "show",
    "hard",
    "way",
    "first",
    "easy",
    "way",
    "going",
    "show",
    "hard",
    "way",
    "first",
    "well",
    "want",
    "become",
    "familiar",
    "actually",
    "going",
    "behind",
    "scenes",
    "actually",
    "going",
    "components",
    "really",
    "helpful",
    "building",
    "front",
    "ends",
    "understand",
    "okay",
    "going",
    "understand",
    "going",
    "behind",
    "scenes",
    "gon",
    "na",
    "go",
    "try",
    "build",
    "advanced",
    "applications",
    "gon",
    "na",
    "idea",
    "learned",
    "shortcut",
    "like",
    "think",
    "like",
    "calculus",
    "like",
    "going",
    "learn",
    "calculate",
    "derivative",
    "first",
    "going",
    "learn",
    "shortcut",
    "quickly",
    "getting",
    "derivatives",
    "skip",
    "part",
    "going",
    "help",
    "well",
    "beyond",
    "line",
    "okay",
    "going",
    "learn",
    "harder",
    "way",
    "set",
    "everything",
    "html",
    "funmi",
    "use",
    "raw",
    "ethers",
    "kind",
    "everything",
    "absolutely",
    "use",
    "raw",
    "ethers",
    "everything",
    "however",
    "packages",
    "especially",
    "react",
    "make",
    "life",
    "developing",
    "front",
    "end",
    "substantially",
    "better",
    "full",
    "blockchain",
    "solidity",
    "course",
    "jas",
    "number",
    "packages",
    "use",
    "stack",
    "development",
    "libraries",
    "watch",
    "six",
    "ways",
    "connect",
    "depth",
    "wallet",
    "actually",
    "understand",
    "differences",
    "watched",
    "video",
    "go",
    "back",
    "watch",
    "video",
    "whole",
    "bunch",
    "libraries",
    "use",
    "going",
    "make",
    "lives",
    "lot",
    "easier",
    "listed",
    "react",
    "morales",
    "one",
    "going",
    "using",
    "today",
    "additional",
    "plugins",
    "probably",
    "favorite",
    "thing",
    "planet",
    "going",
    "show",
    "soon",
    "also",
    "open",
    "source",
    "ross",
    "also",
    "comes",
    "optional",
    "functionality",
    "hook",
    "back",
    "end",
    "give",
    "app",
    "even",
    "features",
    "even",
    "functionality",
    "reason",
    "gon",
    "na",
    "go",
    "later",
    "want",
    "use",
    "pure",
    "ethers",
    "absolutely",
    "still",
    "lot",
    "packages",
    "using",
    "rely",
    "ethers",
    "going",
    "use",
    "ether",
    "go",
    "react",
    "morales",
    "page",
    "get",
    "started",
    "bit",
    "right",
    "literally",
    "going",
    "copy",
    "bring",
    "project",
    "go",
    "package",
    "json",
    "actually",
    "already",
    "react",
    "react",
    "dom",
    "yarn",
    "add",
    "morales",
    "react",
    "oralis",
    "notice",
    "dev",
    "dependencies",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "reason",
    "production",
    "builds",
    "actually",
    "create",
    "website",
    "need",
    "morales",
    "need",
    "react",
    "morales",
    "need",
    "prettier",
    "create",
    "website",
    "prettier",
    "tool",
    "using",
    "developers",
    "projects",
    "far",
    "using",
    "dev",
    "dependencies",
    "building",
    "projects",
    "developers",
    "github",
    "repos",
    "made",
    "build",
    "website",
    "things",
    "back",
    "end",
    "website",
    "actually",
    "going",
    "building",
    "front",
    "end",
    "need",
    "put",
    "dependencies",
    "section",
    "need",
    "say",
    "hey",
    "ones",
    "need",
    "bundle",
    "together",
    "front",
    "end",
    "ignore",
    "ones",
    "like",
    "tool",
    "make",
    "lives",
    "better",
    "gon",
    "na",
    "go",
    "dev",
    "dependencies",
    "adding",
    "morales",
    "react",
    "morales",
    "lot",
    "syntax",
    "going",
    "header",
    "actually",
    "going",
    "really",
    "similar",
    "seeing",
    "far",
    "let",
    "actually",
    "going",
    "change",
    "name",
    "manual",
    "header",
    "manual",
    "header",
    "update",
    "imports",
    "manual",
    "header",
    "go",
    "ahead",
    "hit",
    "yes",
    "man",
    "header",
    "gon",
    "na",
    "copy",
    "manual",
    "header",
    "make",
    "sure",
    "gon",
    "na",
    "change",
    "header",
    "manual",
    "header",
    "gon",
    "na",
    "change",
    "manual",
    "header",
    "reason",
    "like",
    "said",
    "going",
    "create",
    "much",
    "simpler",
    "header",
    "create",
    "kind",
    "harder",
    "one",
    "going",
    "want",
    "create",
    "connect",
    "button",
    "made",
    "html",
    "funmi",
    "calling",
    "eath",
    "request",
    "accounts",
    "actually",
    "morales",
    "thing",
    "called",
    "enable",
    "web",
    "three",
    "top",
    "going",
    "import",
    "use",
    "mirallas",
    "react",
    "ralis",
    "go",
    "react",
    "morales",
    "page",
    "github",
    "learn",
    "set",
    "learn",
    "documentation",
    "going",
    "import",
    "use",
    "morales",
    "react",
    "morales",
    "inside",
    "function",
    "outside",
    "return",
    "going",
    "say",
    "const",
    "enable",
    "web",
    "three",
    "equals",
    "use",
    "mirallas",
    "use",
    "morales",
    "known",
    "hook",
    "react",
    "hook",
    "way",
    "keep",
    "track",
    "state",
    "application",
    "order",
    "use",
    "mirallas",
    "entire",
    "application",
    "needs",
    "wrapped",
    "around",
    "called",
    "morales",
    "provider",
    "going",
    "context",
    "provider",
    "us",
    "explain",
    "means",
    "minute",
    "basically",
    "need",
    "need",
    "add",
    "morales",
    "provider",
    "going",
    "import",
    "oralis",
    "provider",
    "react",
    "oralis",
    "going",
    "wrap",
    "entire",
    "app",
    "around",
    "morales",
    "provided",
    "going",
    "little",
    "parentheses",
    "new",
    "line",
    "going",
    "paste",
    "morass",
    "provider",
    "like",
    "going",
    "give",
    "us",
    "closing",
    "tag",
    "copy",
    "paste",
    "like",
    "save",
    "going",
    "write",
    "sheet",
    "allies",
    "mount",
    "equals",
    "false",
    "initialize",
    "mount",
    "piece",
    "optionality",
    "hook",
    "server",
    "add",
    "features",
    "website",
    "want",
    "hook",
    "server",
    "application",
    "want",
    "everything",
    "open",
    "source",
    "need",
    "additional",
    "functionality",
    "going",
    "initialize",
    "mount",
    "equals",
    "false",
    "whole",
    "thing",
    "wrapped",
    "morales",
    "provider",
    "go",
    "front",
    "end",
    "able",
    "refresh",
    "everything",
    "looks",
    "pretty",
    "much",
    "start",
    "using",
    "hooks",
    "use",
    "morales",
    "known",
    "hook",
    "hooks",
    "little",
    "bit",
    "confusing",
    "understand",
    "first",
    "glance",
    "incredibly",
    "powerful",
    "de",
    "facto",
    "way",
    "us",
    "build",
    "react",
    "projects",
    "familiar",
    "class",
    "components",
    "gon",
    "na",
    "using",
    "class",
    "components",
    "hooks",
    "much",
    "better",
    "hooks",
    "allow",
    "function",
    "components",
    "access",
    "state",
    "react",
    "feature",
    "ers",
    "state",
    "probably",
    "one",
    "biggest",
    "ones",
    "popular",
    "ones",
    "want",
    "application",
    "different",
    "connected",
    "metamask",
    "versus",
    "right",
    "go",
    "back",
    "go",
    "back",
    "example",
    "website",
    "right",
    "connected",
    "want",
    "say",
    "please",
    "connect",
    "wallet",
    "connected",
    "want",
    "go",
    "ahead",
    "connected",
    "let",
    "say",
    "variable",
    "like",
    "hook",
    "like",
    "let",
    "connected",
    "equals",
    "false",
    "right",
    "enable",
    "web",
    "three",
    "web",
    "three",
    "enabled",
    "let",
    "say",
    "led",
    "connected",
    "equals",
    "false",
    "know",
    "let",
    "say",
    "button",
    "connects",
    "us",
    "changes",
    "connected",
    "true",
    "changing",
    "connected",
    "true",
    "great",
    "wo",
    "rerender",
    "application",
    "see",
    "disconnect",
    "reconnect",
    "application",
    "actually",
    "changes",
    "based",
    "whether",
    "connected",
    "want",
    "want",
    "front",
    "end",
    "rerender",
    "connected",
    "use",
    "variable",
    "like",
    "inside",
    "component",
    "front",
    "end",
    "going",
    "rerender",
    "even",
    "worse",
    "use",
    "outside",
    "component",
    "even",
    "know",
    "anything",
    "changing",
    "hooks",
    "way",
    "us",
    "actually",
    "work",
    "state",
    "especially",
    "automatically",
    "rerender",
    "something",
    "changes",
    "enable",
    "web",
    "three",
    "going",
    "function",
    "get",
    "use",
    "morales",
    "hook",
    "lot",
    "components",
    "instead",
    "saying",
    "like",
    "let",
    "web",
    "three",
    "enabled",
    "equals",
    "true",
    "like",
    "normal",
    "javascript",
    "going",
    "lot",
    "hooks",
    "part",
    "usually",
    "want",
    "website",
    "change",
    "based",
    "variable",
    "changed",
    "enabled",
    "web",
    "three",
    "function",
    "get",
    "hook",
    "says",
    "okay",
    "go",
    "ahead",
    "connect",
    "enable",
    "web",
    "three",
    "basically",
    "equivalent",
    "saying",
    "try",
    "await",
    "aetherium",
    "dot",
    "request",
    "like",
    "enable",
    "web",
    "three",
    "way",
    "going",
    "use",
    "works",
    "metamask",
    "show",
    "get",
    "kind",
    "cool",
    "little",
    "module",
    "choose",
    "different",
    "ways",
    "connect",
    "app",
    "enabled",
    "web",
    "three",
    "let",
    "go",
    "ahead",
    "create",
    "button",
    "going",
    "html",
    "funmi",
    "return",
    "instead",
    "hi",
    "friend",
    "header",
    "going",
    "add",
    "new",
    "component",
    "going",
    "add",
    "new",
    "tag",
    "gon",
    "na",
    "add",
    "button",
    "tag",
    "automatically",
    "close",
    "gon",
    "na",
    "call",
    "connect",
    "gon",
    "na",
    "go",
    "ahead",
    "save",
    "see",
    "little",
    "button",
    "says",
    "connect",
    "obviously",
    "anything",
    "gon",
    "na",
    "give",
    "functionality",
    "gon",
    "na",
    "say",
    "click",
    "since",
    "jsx",
    "component",
    "raw",
    "html",
    "raw",
    "html",
    "ca",
    "kind",
    "stick",
    "javascript",
    "wherever",
    "want",
    "jsx",
    "files",
    "stick",
    "javascript",
    "kind",
    "wherever",
    "want",
    "inside",
    "inside",
    "block",
    "html",
    "actually",
    "stick",
    "javascript",
    "adding",
    "little",
    "brackets",
    "adding",
    "little",
    "brackets",
    "jobs",
    "return",
    "add",
    "javascript",
    "want",
    "want",
    "click",
    "call",
    "enable",
    "web",
    "three",
    "going",
    "call",
    "async",
    "function",
    "going",
    "use",
    "arrow",
    "syntax",
    "one",
    "click",
    "gon",
    "na",
    "call",
    "async",
    "function",
    "going",
    "await",
    "enable",
    "web",
    "three",
    "await",
    "enable",
    "web",
    "three",
    "let",
    "add",
    "little",
    "parentheses",
    "essentially",
    "done",
    "pretty",
    "much",
    "everything",
    "back",
    "big",
    "connect",
    "function",
    "go",
    "back",
    "front",
    "end",
    "little",
    "refresh",
    "see",
    "right",
    "see",
    "actually",
    "connected",
    "gon",
    "na",
    "go",
    "ahead",
    "disconnect",
    "still",
    "connected",
    "last",
    "applications",
    "hit",
    "connect",
    "see",
    "metamath",
    "indeed",
    "pop",
    "hit",
    "next",
    "connect",
    "boom",
    "need",
    "look",
    "metamask",
    "says",
    "connected",
    "great",
    "okay",
    "cool",
    "way",
    "actually",
    "connect",
    "let",
    "add",
    "functionality",
    "make",
    "application",
    "smart",
    "enough",
    "connect",
    "button",
    "connected",
    "connected",
    "button",
    "use",
    "morales",
    "comes",
    "another",
    "hook",
    "called",
    "web",
    "three",
    "enabled",
    "variable",
    "part",
    "hook",
    "keeps",
    "track",
    "whether",
    "metamask",
    "connected",
    "actually",
    "one",
    "better",
    "actually",
    "check",
    "see",
    "account",
    "maybe",
    "web",
    "three",
    "connected",
    "connect",
    "account",
    "let",
    "go",
    "ahead",
    "import",
    "count",
    "us",
    "morales",
    "check",
    "see",
    "account",
    "inside",
    "div",
    "tags",
    "little",
    "javascript",
    "ternary",
    "operator",
    "put",
    "count",
    "question",
    "mark",
    "syntax",
    "seen",
    "say",
    "account",
    "account",
    "exists",
    "account",
    "account",
    "want",
    "add",
    "connect",
    "button",
    "go",
    "ahead",
    "stick",
    "account",
    "show",
    "account",
    "right",
    "div",
    "backslash",
    "div",
    "say",
    "connected",
    "like",
    "go",
    "back",
    "front",
    "end",
    "see",
    "connected",
    "little",
    "refresh",
    "go",
    "away",
    "hit",
    "connect",
    "connected",
    "great",
    "let",
    "make",
    "even",
    "smarter",
    "show",
    "account",
    "instead",
    "saying",
    "connected",
    "say",
    "connected",
    "put",
    "javascript",
    "put",
    "javascript",
    "inside",
    "javascript",
    "since",
    "html",
    "stuff",
    "got",
    "use",
    "brackets",
    "say",
    "javascript",
    "put",
    "javascript",
    "inside",
    "javascript",
    "say",
    "connected",
    "say",
    "account",
    "go",
    "back",
    "front",
    "end",
    "see",
    "connected",
    "blah",
    "blah",
    "blah",
    "blah",
    "blah",
    "notice",
    "hit",
    "refresh",
    "reconnect",
    "get",
    "minute",
    "lot",
    "people",
    "count",
    "dot",
    "slice",
    "zero",
    "comma",
    "six",
    "outside",
    "brackets",
    "dot",
    "dot",
    "another",
    "set",
    "brackets",
    "account",
    "slice",
    "count",
    "dot",
    "length",
    "minus",
    "four",
    "close",
    "like",
    "account",
    "hit",
    "connect",
    "says",
    "connected",
    "blah",
    "blah",
    "blah",
    "hello",
    "hooks",
    "switch",
    "accounts",
    "connect",
    "new",
    "accounts",
    "even",
    "automatically",
    "renders",
    "switching",
    "accounts",
    "hooks",
    "really",
    "good",
    "rendering",
    "websites",
    "whenever",
    "value",
    "changes",
    "example",
    "said",
    "like",
    "let",
    "count",
    "number",
    "equals",
    "seven",
    "button",
    "updated",
    "account",
    "number",
    "front",
    "end",
    "would",
    "rerender",
    "unless",
    "told",
    "specifically",
    "rerender",
    "gets",
    "really",
    "annoying",
    "hooks",
    "kind",
    "help",
    "us",
    "lot",
    "allows",
    "us",
    "keep",
    "track",
    "states",
    "renders",
    "something",
    "right",
    "hit",
    "refresh",
    "hit",
    "connect",
    "button",
    "even",
    "though",
    "metamask",
    "says",
    "hey",
    "connected",
    "refresh",
    "hit",
    "connect",
    "button",
    "happening",
    "hit",
    "refresh",
    "website",
    "know",
    "hit",
    "enable",
    "web",
    "three",
    "already",
    "right",
    "basically",
    "go",
    "back",
    "blank",
    "refresh",
    "hit",
    "connect",
    "really",
    "obnoxious",
    "really",
    "annoying",
    "want",
    "add",
    "functionality",
    "automatically",
    "instant",
    "render",
    "go",
    "ahead",
    "check",
    "see",
    "already",
    "connected",
    "connected",
    "show",
    "use",
    "another",
    "hook",
    "called",
    "use",
    "effect",
    "core",
    "react",
    "hook",
    "import",
    "use",
    "effect",
    "react",
    "like",
    "core",
    "hook",
    "directly",
    "react",
    "one",
    "popular",
    "along",
    "use",
    "state",
    "left",
    "links",
    "learning",
    "effect",
    "hook",
    "github",
    "repo",
    "associated",
    "course",
    "gon",
    "na",
    "give",
    "summary",
    "basically",
    "use",
    "effect",
    "basically",
    "function",
    "called",
    "use",
    "effect",
    "takes",
    "two",
    "parameters",
    "takes",
    "function",
    "first",
    "parameter",
    "second",
    "optionally",
    "takes",
    "dependency",
    "array",
    "use",
    "effect",
    "going",
    "going",
    "keep",
    "checking",
    "values",
    "dependency",
    "array",
    "anything",
    "dependency",
    "rate",
    "changes",
    "going",
    "call",
    "function",
    "rerender",
    "front",
    "end",
    "example",
    "using",
    "morales",
    "comes",
    "function",
    "called",
    "web",
    "three",
    "enabled",
    "variable",
    "called",
    "three",
    "enabled",
    "add",
    "dependency",
    "array",
    "use",
    "effect",
    "console",
    "dot",
    "log",
    "hi",
    "console",
    "dot",
    "log",
    "web",
    "three",
    "enabled",
    "use",
    "effect",
    "going",
    "going",
    "constantly",
    "running",
    "running",
    "time",
    "going",
    "listening",
    "see",
    "web",
    "three",
    "enabled",
    "changes",
    "right",
    "anytime",
    "run",
    "enable",
    "web",
    "three",
    "web",
    "three",
    "enabled",
    "becomes",
    "true",
    "go",
    "front",
    "end",
    "little",
    "refresh",
    "see",
    "high",
    "false",
    "high",
    "false",
    "see",
    "twice",
    "web",
    "three",
    "enabled",
    "changed",
    "well",
    "use",
    "effect",
    "works",
    "automatically",
    "run",
    "load",
    "right",
    "first",
    "time",
    "run",
    "checking",
    "value",
    "basically",
    "seeing",
    "run",
    "twice",
    "runs",
    "first",
    "time",
    "load",
    "check",
    "value",
    "run",
    "see",
    "go",
    "twice",
    "even",
    "though",
    "really",
    "go",
    "back",
    "sorry",
    "let",
    "quick",
    "reload",
    "hit",
    "connect",
    "see",
    "hi",
    "true",
    "saw",
    "three",
    "enabled",
    "change",
    "true",
    "enabled",
    "web",
    "three",
    "made",
    "enabled",
    "return",
    "true",
    "ran",
    "right",
    "actually",
    "works",
    "couple",
    "different",
    "ways",
    "think",
    "actually",
    "actually",
    "even",
    "need",
    "give",
    "array",
    "happens",
    "give",
    "array",
    "well",
    "let",
    "refresh",
    "hit",
    "connect",
    "see",
    "still",
    "ran",
    "couple",
    "times",
    "give",
    "array",
    "dependency",
    "array",
    "run",
    "time",
    "something",
    "renders",
    "need",
    "careful",
    "get",
    "circular",
    "renders",
    "use",
    "effect",
    "changes",
    "value",
    "another",
    "use",
    "effect",
    "renders",
    "value",
    "changes",
    "going",
    "keep",
    "changing",
    "back",
    "back",
    "forth",
    "dependency",
    "array",
    "like",
    "run",
    "anytime",
    "something",
    "renders",
    "give",
    "blank",
    "dependency",
    "array",
    "run",
    "load",
    "run",
    "one",
    "time",
    "like",
    "blank",
    "dependency",
    "right",
    "reload",
    "right",
    "see",
    "runs",
    "twice",
    "actually",
    "basically",
    "rendering",
    "background",
    "really",
    "running",
    "something",
    "else",
    "going",
    "background",
    "looks",
    "like",
    "running",
    "twice",
    "add",
    "web",
    "three",
    "enabled",
    "little",
    "refresh",
    "exact",
    "thing",
    "run",
    "amount",
    "blank",
    "connect",
    "add",
    "blank",
    "array",
    "refresh",
    "see",
    "kick",
    "twice",
    "ones",
    "like",
    "said",
    "something",
    "going",
    "background",
    "hit",
    "connect",
    "see",
    "anything",
    "blank",
    "dependency",
    "array",
    "says",
    "hey",
    "going",
    "run",
    "one",
    "time",
    "load",
    "stuff",
    "array",
    "like",
    "web",
    "three",
    "enabled",
    "going",
    "run",
    "anytime",
    "something",
    "array",
    "changes",
    "right",
    "refresh",
    "connect",
    "see",
    "ran",
    "hit",
    "connect",
    "refresh",
    "hi",
    "hi",
    "connected",
    "ran",
    "one",
    "time",
    "kind",
    "cheat",
    "sheet",
    "give",
    "dependency",
    "array",
    "going",
    "run",
    "time",
    "anything",
    "project",
    "renders",
    "give",
    "blank",
    "dependency",
    "array",
    "going",
    "run",
    "one",
    "time",
    "like",
    "saw",
    "ran",
    "twice",
    "something",
    "else",
    "render",
    "background",
    "give",
    "dependencies",
    "array",
    "going",
    "run",
    "anytime",
    "something",
    "array",
    "changes",
    "really",
    "helpful",
    "oftentimes",
    "going",
    "want",
    "front",
    "ends",
    "rerender",
    "use",
    "effect",
    "say",
    "oh",
    "cool",
    "value",
    "changed",
    "going",
    "run",
    "function",
    "going",
    "rerender",
    "front",
    "end",
    "going",
    "use",
    "use",
    "effect",
    "thing",
    "make",
    "sure",
    "refresh",
    "remembers",
    "actually",
    "connected",
    "inside",
    "going",
    "use",
    "web",
    "three",
    "enabled",
    "thing",
    "first",
    "thing",
    "want",
    "want",
    "say",
    "three",
    "enabled",
    "return",
    "already",
    "connected",
    "web",
    "three",
    "need",
    "anything",
    "connected",
    "web",
    "three",
    "account",
    "want",
    "go",
    "ahead",
    "call",
    "enable",
    "web",
    "three",
    "right",
    "want",
    "automatically",
    "enable",
    "web",
    "three",
    "go",
    "back",
    "see",
    "code",
    "always",
    "automatically",
    "calling",
    "enable",
    "web",
    "three",
    "get",
    "really",
    "annoying",
    "disconnect",
    "right",
    "let",
    "go",
    "disconnect",
    "everything",
    "refresh",
    "going",
    "always",
    "call",
    "enable",
    "web",
    "three",
    "right",
    "every",
    "time",
    "refresh",
    "going",
    "automatically",
    "call",
    "enabled",
    "without",
    "us",
    "even",
    "hitting",
    "connect",
    "button",
    "good",
    "want",
    "actually",
    "see",
    "connected",
    "way",
    "like",
    "said",
    "want",
    "use",
    "local",
    "storage",
    "application",
    "little",
    "little",
    "thing",
    "go",
    "application",
    "want",
    "want",
    "application",
    "remember",
    "somebody",
    "hit",
    "connect",
    "button",
    "went",
    "connected",
    "us",
    "going",
    "little",
    "onclick",
    "function",
    "going",
    "call",
    "await",
    "enable",
    "web",
    "three",
    "also",
    "going",
    "store",
    "little",
    "remembrance",
    "saying",
    "hey",
    "actually",
    "connect",
    "recently",
    "going",
    "run",
    "window",
    "dot",
    "local",
    "storage",
    "dot",
    "set",
    "item",
    "connected",
    "comma",
    "injected",
    "actually",
    "going",
    "comment",
    "friend",
    "going",
    "keep",
    "popping",
    "like",
    "saying",
    "okay",
    "window",
    "go",
    "back",
    "window",
    "go",
    "console",
    "type",
    "window",
    "actually",
    "going",
    "see",
    "giant",
    "window",
    "thing",
    "right",
    "showed",
    "always",
    "window",
    "object",
    "going",
    "window",
    "dot",
    "local",
    "storage",
    "relates",
    "go",
    "application",
    "section",
    "local",
    "storage",
    "section",
    "set",
    "item",
    "connected",
    "inject",
    "going",
    "set",
    "new",
    "key",
    "value",
    "like",
    "future",
    "maybe",
    "want",
    "know",
    "connect",
    "wallet",
    "connect",
    "connected",
    "coinbase",
    "wallet",
    "something",
    "right",
    "gon",
    "na",
    "say",
    "injected",
    "meaning",
    "connected",
    "meta",
    "mask",
    "versions",
    "next",
    "jas",
    "next",
    "jas",
    "hard",
    "time",
    "knowing",
    "window",
    "variable",
    "type",
    "window",
    "equal",
    "equal",
    "undefined",
    "going",
    "making",
    "sure",
    "window",
    "equal",
    "undefined",
    "window",
    "go",
    "back",
    "front",
    "end",
    "hit",
    "connect",
    "go",
    "ahead",
    "connect",
    "see",
    "application",
    "local",
    "storage",
    "see",
    "added",
    "connected",
    "injected",
    "bit",
    "storing",
    "browser",
    "indeed",
    "connected",
    "added",
    "browser",
    "roll",
    "back",
    "use",
    "effect",
    "say",
    "okay",
    "already",
    "connected",
    "great",
    "done",
    "anything",
    "let",
    "check",
    "see",
    "already",
    "connected",
    "let",
    "run",
    "connect",
    "bit",
    "say",
    "type",
    "window",
    "equal",
    "undefined",
    "right",
    "want",
    "check",
    "window",
    "object",
    "say",
    "window",
    "dot",
    "local",
    "storage",
    "dot",
    "get",
    "item",
    "connected",
    "connected",
    "connected",
    "key",
    "exists",
    "run",
    "enable",
    "web",
    "three",
    "functionality",
    "even",
    "refresh",
    "automatically",
    "run",
    "enable",
    "three",
    "us",
    "go",
    "ahead",
    "refresh",
    "front",
    "end",
    "press",
    "connect",
    "button",
    "anymore",
    "goes",
    "oh",
    "see",
    "locally",
    "stored",
    "connected",
    "key",
    "whenever",
    "refresh",
    "checks",
    "first",
    "sees",
    "runs",
    "enabled",
    "web",
    "three",
    "side",
    "though",
    "disconnect",
    "refresh",
    "show",
    "really",
    "annoying",
    "every",
    "time",
    "refresh",
    "keep",
    "showing",
    "want",
    "want",
    "disconnect",
    "tell",
    "hey",
    "gone",
    "ahead",
    "disconnected",
    "back",
    "application",
    "add",
    "another",
    "use",
    "effect",
    "check",
    "see",
    "disconnected",
    "let",
    "create",
    "another",
    "use",
    "effect",
    "going",
    "costly",
    "look",
    "us",
    "connected",
    "say",
    "use",
    "effect",
    "little",
    "arrow",
    "bracket",
    "thing",
    "going",
    "anytime",
    "oh",
    "goodness",
    "anytime",
    "save",
    "going",
    "keep",
    "popping",
    "going",
    "going",
    "comment",
    "want",
    "say",
    "okay",
    "whatever",
    "rerender",
    "want",
    "run",
    "account",
    "changed",
    "morales",
    "functionality",
    "us",
    "well",
    "user",
    "morass",
    "going",
    "import",
    "alice",
    "use",
    "effect",
    "inside",
    "little",
    "function",
    "gon",
    "na",
    "say",
    "account",
    "changed",
    "account",
    "gon",
    "na",
    "stuff",
    "account",
    "changed",
    "takes",
    "function",
    "input",
    "parameter",
    "say",
    "console",
    "dot",
    "log",
    "account",
    "change",
    "account",
    "check",
    "see",
    "account",
    "say",
    "account",
    "equals",
    "equals",
    "account",
    "null",
    "assume",
    "disconnected",
    "say",
    "window",
    "dot",
    "local",
    "storage",
    "dot",
    "remove",
    "item",
    "connected",
    "also",
    "run",
    "deactivate",
    "web",
    "three",
    "function",
    "ross",
    "deactivate",
    "web",
    "three",
    "also",
    "run",
    "deactivate",
    "web",
    "three",
    "going",
    "set",
    "web",
    "three",
    "enabled",
    "false",
    "going",
    "disconnect",
    "web",
    "three",
    "going",
    "say",
    "console",
    "dot",
    "log",
    "count",
    "found",
    "let",
    "try",
    "let",
    "go",
    "back",
    "front",
    "end",
    "little",
    "refresh",
    "right",
    "says",
    "connected",
    "even",
    "though",
    "meta",
    "mask",
    "connected",
    "right",
    "start",
    "scratch",
    "go",
    "ahead",
    "disconnect",
    "browser",
    "says",
    "hey",
    "connected",
    "right",
    "connect",
    "actually",
    "connected",
    "right",
    "next",
    "connect",
    "overrode",
    "connected",
    "know",
    "inject",
    "let",
    "let",
    "make",
    "injected",
    "remove",
    "yep",
    "okay",
    "injected",
    "refresh",
    "like",
    "connect",
    "says",
    "injected",
    "okay",
    "cool",
    "connected",
    "switch",
    "accounts",
    "right",
    "let",
    "go",
    "account",
    "three",
    "connect",
    "go",
    "back",
    "console",
    "real",
    "quick",
    "say",
    "account",
    "change",
    "blah",
    "blah",
    "blah",
    "change",
    "back",
    "right",
    "go",
    "change",
    "account",
    "change",
    "blah",
    "blah",
    "blah",
    "go",
    "back",
    "application",
    "go",
    "disconnect",
    "let",
    "disconnect",
    "disconnect",
    "disconnect",
    "see",
    "removed",
    "local",
    "storage",
    "go",
    "console",
    "say",
    "account",
    "change",
    "account",
    "found",
    "removed",
    "hit",
    "refresh",
    "nothing",
    "happens",
    "go",
    "ahead",
    "connect",
    "right",
    "next",
    "connect",
    "refresh",
    "oops",
    "need",
    "go",
    "back",
    "enable",
    "sorry",
    "let",
    "add",
    "back",
    "refresh",
    "let",
    "go",
    "ahead",
    "disconnect",
    "let",
    "connect",
    "let",
    "go",
    "back",
    "console",
    "connect",
    "thing",
    "pop",
    "next",
    "connect",
    "refresh",
    "stays",
    "connected",
    "switch",
    "accounts",
    "go",
    "ahead",
    "switch",
    "accounts",
    "even",
    "disconnect",
    "automatically",
    "update",
    "want",
    "essentially",
    "made",
    "way",
    "robust",
    "connect",
    "button",
    "goes",
    "back",
    "forth",
    "connected",
    "one",
    "thing",
    "might",
    "want",
    "application",
    "hit",
    "connect",
    "want",
    "maybe",
    "disable",
    "button",
    "right",
    "want",
    "allow",
    "able",
    "pressed",
    "gon",
    "na",
    "hit",
    "cancel",
    "gon",
    "na",
    "add",
    "one",
    "bit",
    "functionality",
    "going",
    "add",
    "web",
    "three",
    "enable",
    "loading",
    "checks",
    "see",
    "metamask",
    "popped",
    "button",
    "click",
    "section",
    "add",
    "disabled",
    "equals",
    "web",
    "three",
    "enable",
    "loading",
    "disabled",
    "loading",
    "let",
    "go",
    "ahead",
    "disconnect",
    "disconnect",
    "hit",
    "connect",
    "see",
    "button",
    "clicked",
    "makes",
    "little",
    "bit",
    "nice",
    "turn",
    "next",
    "connect",
    "bada",
    "bing",
    "bada",
    "boom",
    "awesome",
    "made",
    "way",
    "robust",
    "front",
    "end",
    "connect",
    "button",
    "super",
    "slick",
    "allows",
    "us",
    "kind",
    "flip",
    "back",
    "forth",
    "application",
    "incredibly",
    "powerful",
    "knows",
    "handle",
    "different",
    "changes",
    "learned",
    "manual",
    "way",
    "let",
    "give",
    "chiti",
    "way",
    "components",
    "gon",
    "na",
    "create",
    "new",
    "file",
    "header",
    "dot",
    "j",
    "going",
    "going",
    "install",
    "web",
    "three",
    "ui",
    "kit",
    "front",
    "end",
    "kit",
    "whole",
    "bunch",
    "components",
    "already",
    "built",
    "us",
    "build",
    "like",
    "header",
    "component",
    "connect",
    "button",
    "component",
    "using",
    "install",
    "install",
    "gon",
    "na",
    "come",
    "back",
    "gon",
    "na",
    "stop",
    "front",
    "end",
    "going",
    "run",
    "yarn",
    "add",
    "web",
    "three",
    "ui",
    "kit",
    "like",
    "want",
    "dev",
    "dependency",
    "going",
    "part",
    "website",
    "import",
    "connect",
    "button",
    "web",
    "three",
    "ui",
    "kit",
    "export",
    "default",
    "function",
    "header",
    "return",
    "like",
    "div",
    "inside",
    "div",
    "next",
    "button",
    "little",
    "backslash",
    "going",
    "need",
    "project",
    "want",
    "super",
    "explicit",
    "say",
    "morales",
    "equals",
    "false",
    "reiterate",
    "hey",
    "trying",
    "connect",
    "server",
    "make",
    "super",
    "explicit",
    "connect",
    "button",
    "everything",
    "manual",
    "header",
    "thing",
    "created",
    "back",
    "comment",
    "delete",
    "line",
    "import",
    "header",
    "dot",
    "dot",
    "slash",
    "components",
    "slash",
    "header",
    "instead",
    "manual",
    "header",
    "header",
    "start",
    "app",
    "back",
    "yarn",
    "dev",
    "go",
    "back",
    "page",
    "little",
    "refresh",
    "see",
    "connect",
    "wallet",
    "button",
    "even",
    "looks",
    "lot",
    "nicer",
    "got",
    "nice",
    "styling",
    "well",
    "hit",
    "connect",
    "wallet",
    "give",
    "us",
    "little",
    "ngmodel",
    "asking",
    "us",
    "wallet",
    "want",
    "connect",
    "asking",
    "us",
    "wall",
    "want",
    "connect",
    "kind",
    "similar",
    "manual",
    "header",
    "set",
    "item",
    "connected",
    "injected",
    "right",
    "wallet",
    "connect",
    "would",
    "connected",
    "wallet",
    "connect",
    "trust",
    "wallet",
    "would",
    "would",
    "set",
    "item",
    "connected",
    "wallet",
    "connect",
    "etc",
    "allows",
    "us",
    "connect",
    "different",
    "ways",
    "hit",
    "metamask",
    "go",
    "ahead",
    "connect",
    "like",
    "even",
    "nice",
    "styling",
    "gives",
    "us",
    "wallet",
    "address",
    "also",
    "gives",
    "us",
    "wallet",
    "balance",
    "well",
    "go",
    "ahead",
    "disconnect",
    "see",
    "automatically",
    "disconnect",
    "connect",
    "like",
    "reconnect",
    "like",
    "boom",
    "boom",
    "switch",
    "accounts",
    "smart",
    "enough",
    "know",
    "switching",
    "accounts",
    "know",
    "showed",
    "kind",
    "hard",
    "way",
    "wanted",
    "show",
    "kind",
    "going",
    "setting",
    "local",
    "storage",
    "background",
    "knows",
    "actually",
    "connected",
    "headers",
    "moving",
    "forward",
    "need",
    "life",
    "drastically",
    "drastically",
    "easier",
    "let",
    "add",
    "centralized",
    "lottery",
    "decentralized",
    "raffle",
    "whatever",
    "want",
    "header",
    "well",
    "says",
    "decentralized",
    "lottery",
    "know",
    "button",
    "hello",
    "else",
    "need",
    "well",
    "well",
    "main",
    "thing",
    "app",
    "needs",
    "big",
    "button",
    "says",
    "enter",
    "lottery",
    "ideally",
    "know",
    "show",
    "many",
    "people",
    "lottery",
    "recent",
    "winner",
    "well",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "component",
    "called",
    "lottery",
    "entrance",
    "grab",
    "component",
    "similar",
    "like",
    "header",
    "drop",
    "component",
    "right",
    "app",
    "pretty",
    "much",
    "done",
    "let",
    "create",
    "lottery",
    "entrance",
    "component",
    "lottery",
    "entrance",
    "jas",
    "right",
    "reason",
    "putting",
    "components",
    "could",
    "100",
    "stick",
    "know",
    "code",
    "make",
    "modular",
    "future",
    "want",
    "pages",
    "stuff",
    "going",
    "zoom",
    "little",
    "bit",
    "see",
    "code",
    "little",
    "bit",
    "easier",
    "whole",
    "index",
    "j",
    "whole",
    "header",
    "let",
    "create",
    "new",
    "lottery",
    "entrance",
    "app",
    "boilerplate",
    "code",
    "going",
    "export",
    "default",
    "lottery",
    "entrance",
    "excuse",
    "export",
    "default",
    "function",
    "lottery",
    "entrance",
    "going",
    "know",
    "another",
    "component",
    "going",
    "return",
    "jsx",
    "html",
    "stuff",
    "right",
    "gon",
    "na",
    "div",
    "like",
    "hi",
    "lottery",
    "entrance",
    "excel",
    "go",
    "back",
    "import",
    "lottery",
    "entrance",
    "dot",
    "dot",
    "slash",
    "components",
    "slash",
    "lottery",
    "entrance",
    "stick",
    "right",
    "underneath",
    "header",
    "like",
    "go",
    "back",
    "website",
    "see",
    "high",
    "lottery",
    "entrance",
    "lottery",
    "entrance",
    "going",
    "right",
    "underneath",
    "header",
    "would",
    "want",
    "delete",
    "line",
    "says",
    "hello",
    "lottery",
    "entrance",
    "first",
    "thing",
    "really",
    "need",
    "well",
    "going",
    "want",
    "function",
    "call",
    "lottery",
    "enter",
    "lottery",
    "let",
    "go",
    "ahead",
    "let",
    "go",
    "back",
    "html",
    "fund",
    "recall",
    "old",
    "fun",
    "function",
    "like",
    "like",
    "wo",
    "rerender",
    "whole",
    "lot",
    "functionality",
    "like",
    "wo",
    "give",
    "us",
    "going",
    "use",
    "morales",
    "actually",
    "call",
    "functions",
    "mirallas",
    "react",
    "mirallas",
    "hooks",
    "us",
    "pretty",
    "much",
    "anything",
    "want",
    "one",
    "hooks",
    "called",
    "use",
    "web",
    "three",
    "contract",
    "gives",
    "us",
    "hook",
    "give",
    "us",
    "data",
    "returned",
    "function",
    "called",
    "error",
    "returned",
    "little",
    "function",
    "use",
    "call",
    "function",
    "also",
    "really",
    "helpful",
    "fetching",
    "loading",
    "want",
    "everyone",
    "ui",
    "website",
    "something",
    "fetching",
    "loading",
    "transaction",
    "use",
    "two",
    "variables",
    "need",
    "need",
    "pass",
    "contract",
    "information",
    "similar",
    "ethers",
    "going",
    "abi",
    "contract",
    "address",
    "pass",
    "function",
    "name",
    "parameters",
    "function",
    "going",
    "use",
    "syntax",
    "make",
    "transaction",
    "blockchain",
    "call",
    "functions",
    "going",
    "going",
    "import",
    "us",
    "web",
    "three",
    "contract",
    "react",
    "mirallas",
    "inside",
    "function",
    "return",
    "course",
    "going",
    "say",
    "const",
    "kind",
    "exactly",
    "see",
    "let",
    "get",
    "function",
    "let",
    "get",
    "run",
    "contract",
    "function",
    "going",
    "function",
    "call",
    "actually",
    "enter",
    "lottery",
    "say",
    "const",
    "run",
    "contract",
    "function",
    "actually",
    "going",
    "call",
    "enter",
    "raffle",
    "say",
    "equals",
    "use",
    "web",
    "three",
    "contract",
    "need",
    "pass",
    "abi",
    "gon",
    "na",
    "need",
    "pass",
    "contract",
    "address",
    "gon",
    "na",
    "need",
    "give",
    "function",
    "name",
    "need",
    "give",
    "params",
    "actually",
    "know",
    "going",
    "blank",
    "finally",
    "need",
    "message",
    "value",
    "remember",
    "back",
    "raffle",
    "take",
    "parameters",
    "takes",
    "message",
    "dot",
    "value",
    "bit",
    "going",
    "need",
    "pass",
    "get",
    "stuff",
    "going",
    "leave",
    "going",
    "comment",
    "need",
    "need",
    "get",
    "stuff",
    "code",
    "actually",
    "get",
    "stuff",
    "well",
    "abi",
    "easy",
    "right",
    "abi",
    "going",
    "change",
    "matter",
    "network",
    "abi",
    "always",
    "going",
    "stay",
    "already",
    "deployed",
    "smart",
    "contracts",
    "know",
    "exactly",
    "address",
    "deployed",
    "main",
    "net",
    "deployed",
    "test",
    "net",
    "stuff",
    "really",
    "going",
    "change",
    "hard",
    "code",
    "right",
    "lot",
    "people",
    "create",
    "constants",
    "folder",
    "add",
    "like",
    "api",
    "dot",
    "json",
    "maybe",
    "add",
    "contract",
    "addresses",
    "dot",
    "json",
    "add",
    "maybe",
    "like",
    "index",
    "dot",
    "j",
    "something",
    "gon",
    "na",
    "build",
    "application",
    "way",
    "actually",
    "test",
    "locally",
    "using",
    "hard",
    "hat",
    "network",
    "compare",
    "looks",
    "like",
    "actual",
    "test",
    "net",
    "well",
    "going",
    "make",
    "network",
    "agnostic",
    "front",
    "end",
    "works",
    "exactly",
    "matter",
    "network",
    "go",
    "back",
    "download",
    "directory",
    "back",
    "cd",
    "hard",
    "hat",
    "smart",
    "contract",
    "lottery",
    "free",
    "code",
    "camp",
    "spin",
    "node",
    "right",
    "hh",
    "node",
    "yarn",
    "hard",
    "hat",
    "node",
    "use",
    "blockchain",
    "going",
    "connect",
    "thing",
    "go",
    "back",
    "building",
    "front",
    "end",
    "go",
    "ah",
    "like",
    "would",
    "better",
    "x",
    "maybe",
    "changed",
    "name",
    "functions",
    "know",
    "blah",
    "blah",
    "blah",
    "something",
    "else",
    "want",
    "change",
    "reflected",
    "front",
    "end",
    "want",
    "able",
    "code",
    "front",
    "end",
    "since",
    "developer",
    "right",
    "kind",
    "ability",
    "know",
    "back",
    "end",
    "code",
    "front",
    "end",
    "code",
    "something",
    "like",
    "make",
    "life",
    "little",
    "bit",
    "easier",
    "like",
    "create",
    "update",
    "front",
    "end",
    "deploy",
    "script",
    "deploy",
    "stuff",
    "run",
    "little",
    "script",
    "create",
    "constants",
    "folder",
    "us",
    "whole",
    "bunch",
    "stuff",
    "right",
    "give",
    "abi",
    "give",
    "contract",
    "addresses",
    "anything",
    "else",
    "might",
    "need",
    "front",
    "end",
    "back",
    "end",
    "like",
    "like",
    "come",
    "back",
    "original",
    "code",
    "update",
    "new",
    "script",
    "come",
    "deploy",
    "script",
    "create",
    "new",
    "file",
    "call",
    "oh",
    "two",
    "even",
    "like",
    "9999",
    "date",
    "front",
    "dot",
    "jas",
    "reason",
    "99",
    "obviously",
    "want",
    "always",
    "last",
    "script",
    "deploy",
    "folder",
    "write",
    "little",
    "script",
    "connected",
    "write",
    "little",
    "script",
    "connected",
    "front",
    "end",
    "whenever",
    "deploy",
    "contracts",
    "matter",
    "chain",
    "update",
    "constants",
    "folder",
    "front",
    "end",
    "let",
    "go",
    "ahead",
    "create",
    "script",
    "right",
    "module",
    "dot",
    "exports",
    "equals",
    "async",
    "function",
    "add",
    "stuff",
    "really",
    "need",
    "deploy",
    "contracts",
    "updating",
    "front",
    "end",
    "leave",
    "parameters",
    "one",
    "blank",
    "thing",
    "like",
    "sometimes",
    "care",
    "front",
    "end",
    "update",
    "front",
    "end",
    "specified",
    "dot",
    "env",
    "variable",
    "create",
    "dot",
    "env",
    "variable",
    "called",
    "date",
    "front",
    "end",
    "set",
    "true",
    "script",
    "say",
    "process",
    "dot",
    "e",
    "v",
    "dot",
    "update",
    "front",
    "end",
    "say",
    "like",
    "console",
    "dot",
    "log",
    "updating",
    "front",
    "end",
    "back",
    "right",
    "mat",
    "correct",
    "directory",
    "hard",
    "hit",
    "deploy",
    "know",
    "get",
    "little",
    "updating",
    "front",
    "end",
    "update",
    "front",
    "end",
    "let",
    "actually",
    "going",
    "create",
    "one",
    "function",
    "called",
    "update",
    "contract",
    "addresses",
    "going",
    "function",
    "going",
    "use",
    "update",
    "contract",
    "addresses",
    "going",
    "make",
    "one",
    "called",
    "update",
    "api",
    "update",
    "api",
    "front",
    "end",
    "going",
    "call",
    "update",
    "contract",
    "addresses",
    "going",
    "create",
    "new",
    "function",
    "async",
    "function",
    "update",
    "contract",
    "addresses",
    "first",
    "going",
    "get",
    "raffle",
    "contract",
    "since",
    "going",
    "need",
    "get",
    "address",
    "gon",
    "na",
    "say",
    "const",
    "raffle",
    "equals",
    "await",
    "gon",
    "na",
    "thing",
    "ethers",
    "dot",
    "get",
    "contract",
    "raffle",
    "vs",
    "code",
    "auto",
    "imported",
    "const",
    "ethers",
    "equals",
    "require",
    "hardhead",
    "like",
    "raffle",
    "gon",
    "na",
    "want",
    "pass",
    "raffle",
    "address",
    "front",
    "end",
    "since",
    "going",
    "variable",
    "might",
    "use",
    "lot",
    "places",
    "add",
    "like",
    "const",
    "front",
    "end",
    "location",
    "addresses",
    "file",
    "equals",
    "going",
    "give",
    "relative",
    "path",
    "going",
    "know",
    "see",
    "download",
    "directory",
    "next",
    "year",
    "smart",
    "contract",
    "lottery",
    "fcc",
    "even",
    "copy",
    "paste",
    "constants",
    "folder",
    "going",
    "contract",
    "addresses",
    "dot",
    "json",
    "let",
    "get",
    "abi",
    "file",
    "say",
    "const",
    "front",
    "bi",
    "file",
    "going",
    "equal",
    "going",
    "nearly",
    "thing",
    "copy",
    "paste",
    "slash",
    "api",
    "dot",
    "json",
    "update",
    "contract",
    "addresses",
    "function",
    "say",
    "const",
    "current",
    "addresses",
    "equals",
    "read",
    "front",
    "end",
    "read",
    "file",
    "usually",
    "start",
    "two",
    "brackets",
    "like",
    "json",
    "compatible",
    "files",
    "read",
    "gon",
    "na",
    "say",
    "json",
    "dot",
    "parse",
    "fs",
    "dot",
    "read",
    "file",
    "sync",
    "gon",
    "na",
    "import",
    "say",
    "const",
    "fs",
    "equals",
    "require",
    "know",
    "used",
    "fs",
    "extra",
    "past",
    "one",
    "gon",
    "na",
    "use",
    "fs",
    "going",
    "front",
    "addresses",
    "file",
    "going",
    "read",
    "utf",
    "eight",
    "encoding",
    "going",
    "current",
    "addresses",
    "going",
    "update",
    "list",
    "current",
    "addresses",
    "new",
    "addresses",
    "contract",
    "addresses",
    "want",
    "chain",
    "agnostic",
    "would",
    "something",
    "like",
    "know",
    "addresses",
    "rink",
    "b",
    "could",
    "31337",
    "addresses",
    "local",
    "host",
    "right",
    "want",
    "able",
    "keep",
    "track",
    "different",
    "addresses",
    "across",
    "different",
    "chains",
    "back",
    "function",
    "say",
    "network",
    "dot",
    "config",
    "dot",
    "chain",
    "string",
    "contract",
    "addresses",
    "config",
    "ideas",
    "gon",
    "na",
    "go",
    "ahead",
    "add",
    "new",
    "contract",
    "address",
    "add",
    "new",
    "address",
    "let",
    "check",
    "make",
    "sure",
    "already",
    "gon",
    "na",
    "say",
    "contract",
    "addresses",
    "network",
    "dot",
    "config",
    "dot",
    "chain",
    "string",
    "long",
    "want",
    "keep",
    "writing",
    "gon",
    "na",
    "say",
    "const",
    "chain",
    "id",
    "equals",
    "network",
    "config",
    "chain",
    "string",
    "gon",
    "na",
    "use",
    "chain",
    "id",
    "chain",
    "id",
    "contract",
    "address",
    "already",
    "includes",
    "raffle",
    "dot",
    "address",
    "gon",
    "na",
    "go",
    "ahead",
    "add",
    "new",
    "address",
    "chain",
    "id",
    "even",
    "exist",
    "gon",
    "na",
    "go",
    "ahead",
    "contract",
    "addresses",
    "current",
    "addresses",
    "equals",
    "assuming",
    "current",
    "addresses",
    "chain",
    "id",
    "equals",
    "create",
    "new",
    "array",
    "raffled",
    "address",
    "saying",
    "chain",
    "id",
    "exist",
    "current",
    "addresses",
    "going",
    "add",
    "new",
    "array",
    "finally",
    "updated",
    "object",
    "gon",
    "na",
    "write",
    "back",
    "file",
    "say",
    "fs",
    "dot",
    "write",
    "file",
    "sync",
    "front",
    "addresses",
    "file",
    "gon",
    "na",
    "json",
    "dot",
    "string",
    "five",
    "going",
    "stringify",
    "json",
    "object",
    "gon",
    "na",
    "go",
    "ahead",
    "write",
    "back",
    "bottom",
    "module",
    "exports",
    "tags",
    "equals",
    "front",
    "end",
    "cool",
    "function",
    "update",
    "contract",
    "addresses",
    "also",
    "need",
    "abi",
    "gon",
    "na",
    "date",
    "api",
    "gon",
    "na",
    "create",
    "another",
    "function",
    "async",
    "function",
    "update",
    "api",
    "gon",
    "na",
    "exact",
    "thing",
    "raffle",
    "equals",
    "await",
    "ethers",
    "contract",
    "raffle",
    "fx",
    "dot",
    "right",
    "file",
    "sync",
    "front",
    "abi",
    "going",
    "copy",
    "paste",
    "front",
    "end",
    "avi",
    "file",
    "pass",
    "abi",
    "actually",
    "get",
    "directly",
    "raffle",
    "object",
    "actually",
    "raffle",
    "dot",
    "interface",
    "format",
    "ethers",
    "dot",
    "utils",
    "dot",
    "format",
    "types",
    "dot",
    "json",
    "look",
    "ethers",
    "docs",
    "ethers",
    "contract",
    "dot",
    "interface",
    "thing",
    "returns",
    "interface",
    "different",
    "solidity",
    "interface",
    "allows",
    "us",
    "basically",
    "get",
    "api",
    "one",
    "line",
    "code",
    "back",
    "end",
    "code",
    "run",
    "h",
    "h",
    "deploy",
    "h",
    "h",
    "node",
    "automatically",
    "update",
    "contract",
    "addresses",
    "api",
    "dot",
    "json",
    "let",
    "go",
    "try",
    "run",
    "h",
    "h",
    "node",
    "start",
    "node",
    "right",
    "terminal",
    "flip",
    "back",
    "front",
    "end",
    "open",
    "abi",
    "json",
    "indeed",
    "see",
    "raffle",
    "api",
    "file",
    "go",
    "contract",
    "addresses",
    "see",
    "network",
    "31337",
    "first",
    "address",
    "right",
    "deploy",
    "different",
    "chains",
    "get",
    "populated",
    "different",
    "network",
    "ids",
    "list",
    "addresses",
    "associated",
    "helps",
    "make",
    "front",
    "ends",
    "lot",
    "easier",
    "maintain",
    "bounce",
    "around",
    "kind",
    "test",
    "work",
    "done",
    "actually",
    "close",
    "hardhat",
    "smart",
    "contract",
    "lottery",
    "free",
    "code",
    "camp",
    "hard",
    "hat",
    "project",
    "going",
    "terminals",
    "gon",
    "na",
    "gon",
    "na",
    "go",
    "directory",
    "cd",
    "dot",
    "dot",
    "going",
    "cd",
    "oh",
    "sorry",
    "actually",
    "already",
    "cds",
    "hard",
    "hat",
    "smart",
    "contract",
    "lottery",
    "free",
    "code",
    "camp",
    "one",
    "going",
    "run",
    "hh",
    "node",
    "yarn",
    "hardhat",
    "node",
    "local",
    "blockchain",
    "running",
    "test",
    "everything",
    "front",
    "end",
    "actually",
    "gon",
    "na",
    "move",
    "one",
    "first",
    "area",
    "front",
    "end",
    "code",
    "running",
    "blockchain",
    "running",
    "one",
    "going",
    "add",
    "know",
    "whatever",
    "want",
    "add",
    "actually",
    "go",
    "ahead",
    "hit",
    "little",
    "x",
    "button",
    "close",
    "panel",
    "hiding",
    "panel",
    "still",
    "get",
    "trashed",
    "actually",
    "hit",
    "little",
    "trashcan",
    "going",
    "close",
    "panel",
    "terminals",
    "still",
    "running",
    "promise",
    "back",
    "okay",
    "back",
    "function",
    "automated",
    "process",
    "updating",
    "api",
    "updating",
    "contracts",
    "well",
    "import",
    "files",
    "import",
    "one",
    "time",
    "like",
    "import",
    "api",
    "dot",
    "dot",
    "slash",
    "constants",
    "slash",
    "api",
    "could",
    "something",
    "little",
    "bit",
    "clever",
    "could",
    "export",
    "file",
    "create",
    "new",
    "file",
    "new",
    "import",
    "export",
    "one",
    "file",
    "say",
    "const",
    "contract",
    "editor",
    "says",
    "equals",
    "require",
    "dot",
    "slash",
    "contract",
    "editor",
    "dot",
    "json",
    "const",
    "api",
    "equals",
    "require",
    "dot",
    "slash",
    "api",
    "dot",
    "json",
    "module",
    "dot",
    "exports",
    "equals",
    "api",
    "contract",
    "addresses",
    "export",
    "like",
    "back",
    "lottery",
    "entrance",
    "import",
    "one",
    "line",
    "say",
    "import",
    "api",
    "comma",
    "contract",
    "addresses",
    "dot",
    "dot",
    "slash",
    "constants",
    "specify",
    "folder",
    "instead",
    "individual",
    "files",
    "index",
    "dot",
    "j",
    "basically",
    "represents",
    "whole",
    "folder",
    "back",
    "let",
    "uncomment",
    "abi",
    "okay",
    "great",
    "abi",
    "importing",
    "constants",
    "folder",
    "contract",
    "addresses",
    "contract",
    "addresses",
    "going",
    "need",
    "specify",
    "network",
    "id",
    "second",
    "function",
    "name",
    "going",
    "enter",
    "raffle",
    "params",
    "need",
    "get",
    "chain",
    "id",
    "also",
    "message",
    "dot",
    "value",
    "change",
    "something",
    "get",
    "really",
    "easily",
    "morales",
    "let",
    "comment",
    "whole",
    "section",
    "one",
    "time",
    "show",
    "something",
    "import",
    "going",
    "get",
    "use",
    "morales",
    "book",
    "react",
    "morales",
    "say",
    "const",
    "chain",
    "id",
    "equals",
    "use",
    "ralis",
    "reason",
    "morality",
    "knows",
    "chain",
    "back",
    "header",
    "component",
    "header",
    "actually",
    "passes",
    "information",
    "metamask",
    "morales",
    "provider",
    "morales",
    "provider",
    "passes",
    "components",
    "inside",
    "morales",
    "provided",
    "tags",
    "concentrated",
    "equals",
    "use",
    "morales",
    "gon",
    "na",
    "little",
    "console",
    "log",
    "chain",
    "id",
    "want",
    "show",
    "looks",
    "like",
    "little",
    "refresh",
    "console",
    "ignore",
    "warnings",
    "see",
    "chain",
    "id",
    "actually",
    "0x",
    "five",
    "well",
    "rink",
    "b",
    "chain",
    "grilley",
    "chain",
    "excuse",
    "switch",
    "back",
    "hard",
    "hat",
    "localhost",
    "know",
    "sema",
    "fun",
    "bet",
    "hard",
    "hat",
    "localhost",
    "metamask",
    "go",
    "back",
    "html",
    "font",
    "bit",
    "follow",
    "along",
    "okay",
    "great",
    "going",
    "print",
    "oh",
    "x",
    "bla",
    "bla",
    "bla",
    "bla",
    "bla",
    "might",
    "little",
    "bit",
    "confusing",
    "hex",
    "version",
    "chain",
    "id",
    "right",
    "let",
    "switch",
    "etherium",
    "main",
    "net",
    "pronounce",
    "oh",
    "x",
    "one",
    "right",
    "oh",
    "x",
    "one",
    "hex",
    "version",
    "number",
    "one",
    "chain",
    "id",
    "gives",
    "us",
    "hex",
    "addition",
    "chain",
    "id",
    "want",
    "hex",
    "addition",
    "want",
    "actual",
    "number",
    "going",
    "going",
    "say",
    "okay",
    "chain",
    "id",
    "name",
    "actually",
    "going",
    "chain",
    "id",
    "hex",
    "console",
    "dot",
    "log",
    "chain",
    "id",
    "hex",
    "want",
    "number",
    "parse",
    "built",
    "javascript",
    "parse",
    "int",
    "cin",
    "id",
    "hex",
    "like",
    "go",
    "back",
    "little",
    "refresh",
    "scroll",
    "away",
    "warning",
    "see",
    "one",
    "let",
    "switch",
    "hard",
    "hat",
    "localhost",
    "scroll",
    "see",
    "use",
    "morales",
    "chain",
    "id",
    "returns",
    "hex",
    "parse",
    "parson",
    "get",
    "actual",
    "number",
    "okay",
    "great",
    "stick",
    "chain",
    "id",
    "raffle",
    "address",
    "something",
    "actually",
    "going",
    "use",
    "lot",
    "might",
    "well",
    "top",
    "code",
    "going",
    "changing",
    "raffle",
    "address",
    "need",
    "put",
    "hook",
    "going",
    "technically",
    "changing",
    "address",
    "change",
    "networks",
    "header",
    "app",
    "takes",
    "care",
    "rendering",
    "dealing",
    "make",
    "constant",
    "variable",
    "say",
    "const",
    "raffle",
    "address",
    "equals",
    "first",
    "let",
    "check",
    "chain",
    "id",
    "hex",
    "chain",
    "id",
    "hex",
    "chain",
    "id",
    "hex",
    "gon",
    "na",
    "something",
    "else",
    "excuse",
    "gon",
    "na",
    "say",
    "chain",
    "id",
    "hex",
    "contract",
    "addresses",
    "actually",
    "never",
    "gon",
    "na",
    "chain",
    "id",
    "hex",
    "const",
    "chain",
    "id",
    "equals",
    "gen",
    "id",
    "hex",
    "parsed",
    "parsons",
    "chinati",
    "hex",
    "might",
    "thinking",
    "hey",
    "name",
    "well",
    "use",
    "morales",
    "saying",
    "hey",
    "pull",
    "chin",
    "id",
    "object",
    "rename",
    "chain",
    "id",
    "hex",
    "saying",
    "hey",
    "going",
    "create",
    "new",
    "variable",
    "called",
    "chain",
    "id",
    "say",
    "contract",
    "addresses",
    "chain",
    "id",
    "zero",
    "saying",
    "network",
    "id",
    "address",
    "otherwise",
    "say",
    "okay",
    "getting",
    "let",
    "uncomment",
    "raffle",
    "address",
    "stick",
    "message",
    "dot",
    "value",
    "remember",
    "back",
    "raffle",
    "actually",
    "set",
    "fee",
    "dynamically",
    "entrance",
    "fee",
    "equals",
    "entrance",
    "fee",
    "parameter",
    "constructor",
    "want",
    "call",
    "get",
    "entrance",
    "fee",
    "function",
    "one",
    "ways",
    "send",
    "transaction",
    "also",
    "send",
    "functions",
    "one",
    "ways",
    "going",
    "right",
    "lottery",
    "entrance",
    "loads",
    "going",
    "run",
    "function",
    "read",
    "entrance",
    "fee",
    "value",
    "well",
    "use",
    "one",
    "hooks",
    "right",
    "use",
    "effect",
    "use",
    "effect",
    "run",
    "right",
    "something",
    "changes",
    "going",
    "want",
    "try",
    "get",
    "raffle",
    "entrance",
    "fee",
    "web",
    "three",
    "enabled",
    "back",
    "use",
    "morales",
    "pull",
    "web",
    "three",
    "enabled",
    "use",
    "effect",
    "function",
    "say",
    "web",
    "three",
    "enabled",
    "try",
    "read",
    "go",
    "ahead",
    "use",
    "use",
    "web",
    "three",
    "contract",
    "wagan",
    "let",
    "go",
    "ahead",
    "copy",
    "paste",
    "use",
    "setup",
    "except",
    "instead",
    "enter",
    "raffle",
    "course",
    "going",
    "get",
    "entrance",
    "fee",
    "going",
    "get",
    "entrance",
    "fee",
    "need",
    "api",
    "got",
    "raffle",
    "address",
    "got",
    "going",
    "function",
    "name",
    "going",
    "get",
    "entrance",
    "fee",
    "params",
    "nothing",
    "message",
    "value",
    "nothing",
    "going",
    "calling",
    "get",
    "entrance",
    "fee",
    "function",
    "finally",
    "show",
    "actually",
    "call",
    "one",
    "contracts",
    "use",
    "web",
    "three",
    "contract",
    "download",
    "use",
    "effect",
    "actually",
    "going",
    "call",
    "get",
    "entrance",
    "fee",
    "call",
    "get",
    "entrance",
    "fee",
    "like",
    "say",
    "like",
    "know",
    "const",
    "something",
    "equals",
    "get",
    "entrance",
    "fee",
    "console",
    "dot",
    "log",
    "something",
    "think",
    "going",
    "happen",
    "oops",
    "need",
    "import",
    "need",
    "import",
    "use",
    "effect",
    "react",
    "go",
    "look",
    "logs",
    "see",
    "console",
    "dot",
    "log",
    "something",
    "wo",
    "get",
    "entrance",
    "fee",
    "going",
    "async",
    "function",
    "need",
    "wait",
    "would",
    "need",
    "wait",
    "get",
    "right",
    "issue",
    "ca",
    "call",
    "await",
    "use",
    "effect",
    "well",
    "actually",
    "make",
    "async",
    "function",
    "call",
    "update",
    "ui",
    "stick",
    "inside",
    "async",
    "function",
    "call",
    "update",
    "ui",
    "right",
    "outside",
    "like",
    "go",
    "back",
    "front",
    "end",
    "little",
    "refresh",
    "scroll",
    "still",
    "see",
    "nothing",
    "well",
    "web",
    "three",
    "enabled",
    "actually",
    "changes",
    "first",
    "time",
    "runs",
    "web",
    "three",
    "enabled",
    "probably",
    "false",
    "turns",
    "true",
    "want",
    "want",
    "run",
    "section",
    "little",
    "dependency",
    "array",
    "going",
    "add",
    "right",
    "reason",
    "false",
    "start",
    "exactly",
    "showed",
    "manual",
    "header",
    "right",
    "well",
    "first",
    "check",
    "see",
    "refresh",
    "window",
    "dot",
    "local",
    "storage",
    "get",
    "item",
    "connected",
    "call",
    "enable",
    "web",
    "three",
    "make",
    "enabled",
    "lottery",
    "entrance",
    "enabled",
    "starts",
    "false",
    "refresh",
    "browser",
    "checks",
    "local",
    "storage",
    "says",
    "oh",
    "web",
    "three",
    "enabled",
    "let",
    "enable",
    "turn",
    "true",
    "hit",
    "save",
    "little",
    "refresh",
    "console",
    "see",
    "logged",
    "entrance",
    "fee",
    "switch",
    "entrance",
    "fee",
    "contract",
    "also",
    "probably",
    "want",
    "show",
    "entrance",
    "fee",
    "ui",
    "let",
    "entrance",
    "fee",
    "say",
    "equals",
    "blank",
    "take",
    "update",
    "know",
    "update",
    "saying",
    "entrance",
    "fee",
    "equals",
    "await",
    "entrance",
    "fee",
    "cool",
    "kind",
    "global",
    "variable",
    "add",
    "let",
    "even",
    "weight",
    "entrance",
    "fee",
    "whole",
    "thing",
    "parentheses",
    "string",
    "even",
    "console",
    "dot",
    "log",
    "entrance",
    "fee",
    "adding",
    "new",
    "browser",
    "still",
    "issue",
    "let",
    "see",
    "spot",
    "little",
    "refresh",
    "see",
    "entrance",
    "fee",
    "ui",
    "see",
    "good",
    "console",
    "dot",
    "log",
    "right",
    "going",
    "way",
    "going",
    "use",
    "effect",
    "going",
    "rerender",
    "browser",
    "right",
    "want",
    "three",
    "enable",
    "goes",
    "false",
    "true",
    "browser",
    "renders",
    "watch",
    "get",
    "entrance",
    "fee",
    "browser",
    "rerender",
    "entrance",
    "fee",
    "one",
    "normal",
    "variables",
    "right",
    "want",
    "actually",
    "change",
    "normal",
    "variable",
    "hook",
    "entrance",
    "fee",
    "get",
    "updated",
    "triggering",
    "rerender",
    "actually",
    "want",
    "change",
    "called",
    "use",
    "state",
    "hook",
    "read",
    "documentation",
    "using",
    "state",
    "hook",
    "kind",
    "let",
    "entrance",
    "fee",
    "know",
    "equals",
    "blah",
    "blah",
    "blah",
    "setting",
    "also",
    "trigger",
    "rerender",
    "us",
    "actually",
    "const",
    "entrance",
    "fee",
    "comma",
    "set",
    "entrance",
    "fee",
    "equals",
    "use",
    "state",
    "zero",
    "import",
    "use",
    "state",
    "react",
    "well",
    "basically",
    "entrance",
    "fee",
    "going",
    "value",
    "right",
    "console",
    "dot",
    "log",
    "entrance",
    "fee",
    "going",
    "print",
    "entrance",
    "fee",
    "entrance",
    "fee",
    "going",
    "variable",
    "call",
    "get",
    "entrance",
    "fee",
    "entrance",
    "fee",
    "going",
    "function",
    "call",
    "update",
    "set",
    "entrance",
    "fee",
    "whatever",
    "entrance",
    "fee",
    "variable",
    "set",
    "trigger",
    "rerender",
    "front",
    "end",
    "state",
    "actual",
    "variable",
    "function",
    "update",
    "use",
    "state",
    "give",
    "starting",
    "values",
    "saying",
    "entrance",
    "fee",
    "going",
    "start",
    "zero",
    "know",
    "let",
    "go",
    "back",
    "instead",
    "saying",
    "entrance",
    "fee",
    "equals",
    "say",
    "const",
    "entrance",
    "fee",
    "call",
    "equals",
    "away",
    "entrance",
    "string",
    "say",
    "set",
    "entrance",
    "fee",
    "entrance",
    "fee",
    "call",
    "set",
    "use",
    "state",
    "going",
    "trigger",
    "rerender",
    "entrance",
    "fee",
    "actually",
    "populated",
    "go",
    "browser",
    "little",
    "refresh",
    "see",
    "entrance",
    "fee",
    "indeed",
    "rendered",
    "actually",
    "see",
    "see",
    "console",
    "dot",
    "log",
    "zero",
    "even",
    "though",
    "console",
    "dot",
    "log",
    "entrance",
    "fee",
    "set",
    "entrance",
    "function",
    "finished",
    "running",
    "basically",
    "gon",
    "na",
    "get",
    "rid",
    "line",
    "refresh",
    "bada",
    "bing",
    "bada",
    "boom",
    "huge",
    "number",
    "kind",
    "gross",
    "might",
    "even",
    "want",
    "update",
    "looks",
    "little",
    "bit",
    "nicer",
    "import",
    "ethers",
    "ethers",
    "ethers",
    "little",
    "ethers",
    "dot",
    "utils",
    "dot",
    "format",
    "units",
    "entrance",
    "fee",
    "call",
    "comma",
    "type",
    "refresh",
    "front",
    "end",
    "see",
    "entrance",
    "fee",
    "even",
    "label",
    "say",
    "entrance",
    "fee",
    "blah",
    "blah",
    "blah",
    "little",
    "refresh",
    "front",
    "end",
    "entrance",
    "fee",
    "finally",
    "entrance",
    "fee",
    "uses",
    "finally",
    "function",
    "enter",
    "lottery",
    "let",
    "finally",
    "uncomment",
    "message",
    "value",
    "going",
    "want",
    "use",
    "entrance",
    "fee",
    "realizing",
    "actually",
    "better",
    "store",
    "raw",
    "string",
    "format",
    "going",
    "undo",
    "part",
    "going",
    "add",
    "going",
    "ethers",
    "format",
    "units",
    "entrance",
    "fee",
    "comma",
    "ether",
    "like",
    "like",
    "let",
    "comment",
    "back",
    "real",
    "quick",
    "least",
    "ui",
    "shows",
    "back",
    "end",
    "actually",
    "going",
    "save",
    "raw",
    "way",
    "value",
    "saying",
    "entrance",
    "fee",
    "uncomment",
    "grab",
    "entrance",
    "fee",
    "plop",
    "need",
    "make",
    "button",
    "gon",
    "na",
    "want",
    "make",
    "code",
    "works",
    "even",
    "connected",
    "supported",
    "chain",
    "though",
    "even",
    "add",
    "right",
    "switch",
    "hard",
    "hat",
    "like",
    "aetherium",
    "main",
    "net",
    "little",
    "refresh",
    "getting",
    "kind",
    "get",
    "error",
    "calling",
    "get",
    "entrance",
    "string",
    "address",
    "exist",
    "right",
    "gon",
    "na",
    "get",
    "really",
    "confused",
    "like",
    "hey",
    "let",
    "add",
    "little",
    "button",
    "actually",
    "enter",
    "raffle",
    "actually",
    "let",
    "make",
    "sure",
    "call",
    "function",
    "long",
    "actually",
    "raffle",
    "address",
    "raffle",
    "address",
    "ternary",
    "operator",
    "raffle",
    "address",
    "valid",
    "right",
    "add",
    "code",
    "right",
    "say",
    "raffle",
    "address",
    "exists",
    "going",
    "stuff",
    "actually",
    "copy",
    "paste",
    "line",
    "stick",
    "otherwise",
    "say",
    "div",
    "excellence",
    "div",
    "close",
    "save",
    "reformat",
    "great",
    "say",
    "raffle",
    "address",
    "detected",
    "code",
    "section",
    "little",
    "div",
    "great",
    "inside",
    "div",
    "let",
    "add",
    "button",
    "button",
    "button",
    "save",
    "got",
    "little",
    "button",
    "say",
    "enter",
    "raffle",
    "say",
    "click",
    "well",
    "going",
    "javascript",
    "let",
    "javascript",
    "want",
    "call",
    "async",
    "function",
    "async",
    "function",
    "know",
    "double",
    "brackets",
    "going",
    "confusing",
    "right",
    "brackets",
    "allow",
    "us",
    "javascript",
    "html",
    "jsx",
    "whatever",
    "brackets",
    "represent",
    "function",
    "going",
    "async",
    "function",
    "gon",
    "na",
    "say",
    "await",
    "enter",
    "raffle",
    "let",
    "go",
    "back",
    "front",
    "end",
    "little",
    "enter",
    "raffle",
    "function",
    "refresh",
    "let",
    "make",
    "sure",
    "account",
    "reset",
    "gon",
    "na",
    "go",
    "settings",
    "advanced",
    "reset",
    "accounts",
    "yes",
    "hit",
    "enter",
    "raffle",
    "metamath",
    "indeed",
    "pop",
    "go",
    "ahead",
    "confirm",
    "awesome",
    "okay",
    "enter",
    "raffle",
    "incredibly",
    "well",
    "saw",
    "got",
    "pop",
    "pretty",
    "much",
    "right",
    "helpful",
    "users",
    "following",
    "along",
    "look",
    "go",
    "okay",
    "go",
    "fail",
    "like",
    "happened",
    "want",
    "create",
    "called",
    "notifications",
    "right",
    "want",
    "little",
    "pop",
    "saying",
    "hey",
    "sent",
    "transaction",
    "great",
    "job",
    "going",
    "use",
    "library",
    "going",
    "use",
    "web",
    "ui",
    "kit",
    "comes",
    "notifications",
    "go",
    "ahead",
    "use",
    "come",
    "little",
    "interactive",
    "thing",
    "right",
    "github",
    "whole",
    "bunch",
    "stuff",
    "actually",
    "click",
    "around",
    "play",
    "different",
    "buttons",
    "different",
    "things",
    "actually",
    "go",
    "ahead",
    "even",
    "go",
    "docs",
    "one",
    "go",
    "show",
    "code",
    "literally",
    "like",
    "copy",
    "paste",
    "code",
    "project",
    "like",
    "whatever",
    "want",
    "styling",
    "everything",
    "us",
    "back",
    "app",
    "dot",
    "j",
    "going",
    "add",
    "import",
    "vacations",
    "provider",
    "web",
    "three",
    "ui",
    "kit",
    "inside",
    "morales",
    "provider",
    "outside",
    "components",
    "gon",
    "na",
    "notification",
    "provider",
    "notification",
    "provide",
    "add",
    "like",
    "goes",
    "morales",
    "provider",
    "notification",
    "provider",
    "component",
    "wrapping",
    "component",
    "notifications",
    "thing",
    "notification",
    "provider",
    "notifications",
    "going",
    "allow",
    "us",
    "actually",
    "make",
    "notifications",
    "back",
    "lottery",
    "entrance",
    "back",
    "lottery",
    "entrance",
    "gon",
    "na",
    "scroll",
    "top",
    "going",
    "import",
    "hook",
    "notifications",
    "called",
    "us",
    "know",
    "occasion",
    "web",
    "three",
    "ui",
    "kit",
    "use",
    "notification",
    "gives",
    "us",
    "thing",
    "back",
    "called",
    "dispatch",
    "gon",
    "na",
    "say",
    "const",
    "dispatch",
    "equals",
    "use",
    "notification",
    "use",
    "notification",
    "returns",
    "dispatch",
    "dispatch",
    "like",
    "little",
    "pop",
    "give",
    "us",
    "call",
    "enter",
    "raffle",
    "gon",
    "na",
    "give",
    "little",
    "parameters",
    "gon",
    "na",
    "say",
    "success",
    "functions",
    "come",
    "onsuccess",
    "come",
    "oncomplete",
    "come",
    "error",
    "stuff",
    "function",
    "successful",
    "handle",
    "success",
    "create",
    "new",
    "handle",
    "success",
    "function",
    "handle",
    "success",
    "patrick",
    "future",
    "coming",
    "back",
    "show",
    "one",
    "additional",
    "point",
    "know",
    "mentioned",
    "really",
    "good",
    "add",
    "error",
    "colon",
    "error",
    "console",
    "dot",
    "log",
    "error",
    "run",
    "contract",
    "functions",
    "even",
    "reads",
    "run",
    "contract",
    "functions",
    "break",
    "wo",
    "know",
    "definitely",
    "want",
    "add",
    "error",
    "error",
    "console",
    "dot",
    "log",
    "error",
    "run",
    "contract",
    "functions",
    "return",
    "create",
    "new",
    "const",
    "handle",
    "success",
    "say",
    "async",
    "function",
    "async",
    "function",
    "takes",
    "transaction",
    "input",
    "parameters",
    "remember",
    "turn",
    "functions",
    "constant",
    "variables",
    "say",
    "await",
    "tx",
    "dot",
    "wait",
    "one",
    "wait",
    "transaction",
    "go",
    "create",
    "another",
    "function",
    "called",
    "handle",
    "new",
    "notification",
    "dx",
    "see",
    "like",
    "minute",
    "say",
    "const",
    "linoone",
    "notification",
    "going",
    "synchronous",
    "function",
    "need",
    "async",
    "going",
    "call",
    "dispatch",
    "going",
    "set",
    "notification",
    "basically",
    "say",
    "notify",
    "dispatch",
    "add",
    "parameters",
    "takes",
    "object",
    "parameter",
    "say",
    "type",
    "info",
    "message",
    "going",
    "transaction",
    "complete",
    "title",
    "going",
    "tx",
    "notification",
    "jose",
    "shawn",
    "going",
    "say",
    "top",
    "icon",
    "going",
    "say",
    "little",
    "bell",
    "find",
    "stuff",
    "right",
    "type",
    "icon",
    "position",
    "read",
    "different",
    "parameters",
    "kind",
    "set",
    "handle",
    "new",
    "notification",
    "handle",
    "success",
    "saying",
    "enter",
    "raffle",
    "transaction",
    "successful",
    "call",
    "handle",
    "success",
    "function",
    "going",
    "call",
    "handle",
    "new",
    "notification",
    "okay",
    "see",
    "split",
    "two",
    "instead",
    "handle",
    "success",
    "also",
    "dispatch",
    "press",
    "enter",
    "raffle",
    "button",
    "going",
    "call",
    "enter",
    "raffle",
    "successful",
    "going",
    "call",
    "handle",
    "success",
    "going",
    "wait",
    "transaction",
    "finish",
    "yes",
    "passes",
    "parameter",
    "handle",
    "success",
    "function",
    "going",
    "going",
    "call",
    "handle",
    "new",
    "notification",
    "going",
    "dispatch",
    "going",
    "launch",
    "one",
    "notifications",
    "back",
    "let",
    "hit",
    "enter",
    "raffle",
    "metamath",
    "pops",
    "confirm",
    "completes",
    "get",
    "wonderful",
    "transaction",
    "notification",
    "transaction",
    "complete",
    "right",
    "let",
    "user",
    "know",
    "great",
    "job",
    "submitted",
    "transaction",
    "great",
    "work",
    "great",
    "giving",
    "users",
    "helpful",
    "pieces",
    "let",
    "add",
    "little",
    "bit",
    "users",
    "know",
    "else",
    "going",
    "lottery",
    "need",
    "display",
    "little",
    "bit",
    "data",
    "right",
    "let",
    "display",
    "many",
    "people",
    "lottery",
    "many",
    "people",
    "game",
    "course",
    "number",
    "players",
    "command",
    "also",
    "probably",
    "want",
    "get",
    "recent",
    "winner",
    "well",
    "going",
    "copy",
    "get",
    "entrance",
    "fee",
    "going",
    "create",
    "another",
    "one",
    "called",
    "get",
    "num",
    "players",
    "going",
    "call",
    "go",
    "back",
    "raffle",
    "dot",
    "soul",
    "going",
    "call",
    "get",
    "number",
    "players",
    "actually",
    "let",
    "call",
    "call",
    "thing",
    "get",
    "number",
    "players",
    "going",
    "call",
    "get",
    "number",
    "players",
    "store",
    "value",
    "top",
    "going",
    "copy",
    "line",
    "paste",
    "right",
    "non",
    "players",
    "set",
    "num",
    "players",
    "copy",
    "line",
    "recent",
    "winner",
    "recent",
    "winner",
    "winner",
    "set",
    "recent",
    "winner",
    "copy",
    "instead",
    "getting",
    "number",
    "players",
    "get",
    "get",
    "recent",
    "winner",
    "call",
    "get",
    "recent",
    "winner",
    "get",
    "recent",
    "winner",
    "use",
    "effect",
    "let",
    "get",
    "entrance",
    "fee",
    "let",
    "get",
    "everything",
    "say",
    "const",
    "num",
    "players",
    "call",
    "equals",
    "weight",
    "get",
    "number",
    "string",
    "set",
    "set",
    "num",
    "players",
    "like",
    "set",
    "num",
    "players",
    "num",
    "players",
    "call",
    "also",
    "const",
    "recent",
    "winner",
    "call",
    "going",
    "await",
    "get",
    "recent",
    "winner",
    "might",
    "need",
    "wrap",
    "string",
    "think",
    "think",
    "need",
    "set",
    "recent",
    "winner",
    "paste",
    "number",
    "players",
    "added",
    "recent",
    "winner",
    "let",
    "come",
    "back",
    "entrance",
    "fee",
    "let",
    "go",
    "ahead",
    "number",
    "players",
    "add",
    "number",
    "players",
    "call",
    "oh",
    "god",
    "called",
    "setting",
    "employers",
    "twice",
    "oops",
    "called",
    "non",
    "players",
    "scroll",
    "players",
    "gon",
    "na",
    "non",
    "players",
    "recent",
    "winner",
    "add",
    "recent",
    "winner",
    "awesome",
    "okay",
    "entrance",
    "fees",
    "eath",
    "number",
    "players",
    "recent",
    "winner",
    "nobody",
    "go",
    "ahead",
    "enter",
    "raffle",
    "metamath",
    "pops",
    "go",
    "ahead",
    "confirm",
    "transaction",
    "goes",
    "get",
    "transaction",
    "complete",
    "refresh",
    "see",
    "number",
    "players",
    "updated",
    "refresh",
    "kind",
    "annoying",
    "right",
    "let",
    "enter",
    "raffle",
    "go",
    "confirm",
    "transaction",
    "complete",
    "rerender",
    "right",
    "want",
    "set",
    "something",
    "automatically",
    "rerender",
    "guess",
    "going",
    "handle",
    "success",
    "talking",
    "right",
    "update",
    "ui",
    "stuff",
    "actually",
    "pull",
    "use",
    "effect",
    "going",
    "copy",
    "deleted",
    "going",
    "standalone",
    "function",
    "like",
    "handle",
    "success",
    "whenever",
    "successful",
    "transaction",
    "goes",
    "going",
    "update",
    "ui",
    "right",
    "handle",
    "success",
    "handled",
    "new",
    "notification",
    "going",
    "update",
    "white",
    "go",
    "back",
    "let",
    "enter",
    "lottery",
    "let",
    "confirm",
    "see",
    "get",
    "five",
    "get",
    "transaction",
    "notification",
    "want",
    "test",
    "getting",
    "recent",
    "winner",
    "actually",
    "back",
    "hard",
    "hat",
    "project",
    "want",
    "create",
    "new",
    "script",
    "actually",
    "already",
    "created",
    "going",
    "mock",
    "channeling",
    "vrf",
    "going",
    "mock",
    "keepers",
    "really",
    "pretty",
    "much",
    "exactly",
    "tests",
    "want",
    "pause",
    "right",
    "look",
    "pause",
    "add",
    "mock",
    "chain",
    "keepers",
    "vrf",
    "go",
    "github",
    "repo",
    "go",
    "github",
    "repo",
    "lesson",
    "nine",
    "already",
    "scripts",
    "go",
    "scripts",
    "markov",
    "chain",
    "copy",
    "paste",
    "want",
    "test",
    "recent",
    "winner",
    "hard",
    "hat",
    "smart",
    "contract",
    "lottery",
    "yarn",
    "hardhats",
    "run",
    "scripts",
    "slash",
    "mock",
    "chain",
    "dash",
    "test",
    "network",
    "local",
    "host",
    "going",
    "mock",
    "know",
    "basically",
    "picking",
    "winner",
    "upkeep",
    "request",
    "id",
    "one",
    "local",
    "network",
    "okay",
    "let",
    "pretend",
    "recent",
    "winner",
    "little",
    "refresh",
    "see",
    "winner",
    "updated",
    "boom",
    "gon",
    "na",
    "clean",
    "ui",
    "want",
    "talk",
    "couple",
    "things",
    "almost",
    "done",
    "section",
    "something",
    "want",
    "make",
    "really",
    "clear",
    "confused",
    "little",
    "bit",
    "onsuccess",
    "checking",
    "transaction",
    "block",
    "confirmation",
    "checking",
    "see",
    "transaction",
    "successfully",
    "sent",
    "metamask",
    "onsuccess",
    "checks",
    "see",
    "transaction",
    "successfully",
    "sent",
    "metamask",
    "function",
    "tx",
    "dot",
    "wait",
    "one",
    "piece",
    "actually",
    "waits",
    "transaction",
    "confirmed",
    "right",
    "using",
    "morales",
    "make",
    "call",
    "mocking",
    "script",
    "refresh",
    "browser",
    "see",
    "winner",
    "right",
    "number",
    "players",
    "obviously",
    "got",
    "reset",
    "zero",
    "great",
    "ideal",
    "ideally",
    "want",
    "ui",
    "automatically",
    "update",
    "event",
    "gets",
    "fired",
    "raffle",
    "contract",
    "get",
    "event",
    "emitted",
    "instead",
    "code",
    "await",
    "success",
    "could",
    "could",
    "set",
    "portion",
    "listen",
    "event",
    "emitted",
    "update",
    "front",
    "end",
    "accordingly",
    "knowledge",
    "also",
    "listen",
    "winner",
    "event",
    "emitted",
    "could",
    "update",
    "front",
    "end",
    "instead",
    "refresh",
    "cue",
    "yes",
    "want",
    "see",
    "add",
    "right",
    "highly",
    "recommend",
    "pretty",
    "much",
    "finished",
    "functionality",
    "wow",
    "learned",
    "ton",
    "little",
    "bit",
    "right",
    "learned",
    "use",
    "effects",
    "use",
    "morales",
    "hooks",
    "stuff",
    "got",
    "front",
    "end",
    "nicely",
    "handles",
    "interacting",
    "smart",
    "contract",
    "thing",
    "looks",
    "really",
    "ugly",
    "kind",
    "gross",
    "let",
    "make",
    "look",
    "least",
    "little",
    "bit",
    "nicer",
    "two",
    "things",
    "think",
    "comes",
    "building",
    "front",
    "ends",
    "component",
    "libraries",
    "like",
    "web",
    "three",
    "ui",
    "kit",
    "using",
    "gives",
    "us",
    "kind",
    "like",
    "components",
    "give",
    "us",
    "know",
    "blocks",
    "code",
    "like",
    "connect",
    "button",
    "already",
    "formatted",
    "us",
    "css",
    "libraries",
    "actually",
    "help",
    "us",
    "format",
    "rest",
    "stuff",
    "using",
    "one",
    "component",
    "libraries",
    "also",
    "going",
    "use",
    "one",
    "formatting",
    "libraries",
    "library",
    "going",
    "use",
    "tailwind",
    "reason",
    "going",
    "use",
    "tailwind",
    "css",
    "really",
    "popular",
    "want",
    "learn",
    "css",
    "wonderful",
    "resources",
    "use",
    "learn",
    "css",
    "web",
    "three",
    "schools",
    "one",
    "used",
    "ton",
    "going",
    "link",
    "github",
    "repo",
    "associated",
    "course",
    "make",
    "websites",
    "look",
    "pretty",
    "formatting",
    "stuff",
    "actually",
    "going",
    "work",
    "tailwind",
    "going",
    "make",
    "us",
    "css",
    "stuff",
    "lot",
    "easier",
    "since",
    "using",
    "tailwind",
    "next",
    "jas",
    "actually",
    "wonderful",
    "little",
    "guide",
    "installing",
    "tailwind",
    "next",
    "jas",
    "gon",
    "na",
    "go",
    "basically",
    "go",
    "ahead",
    "follow",
    "along",
    "link",
    "available",
    "github",
    "repo",
    "associated",
    "course",
    "lesson",
    "already",
    "created",
    "project",
    "seeded",
    "project",
    "gon",
    "na",
    "go",
    "ahead",
    "install",
    "tailwind",
    "npm",
    "install",
    "dash",
    "instead",
    "since",
    "using",
    "yarn",
    "going",
    "yarn",
    "pop",
    "open",
    "green",
    "new",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "paste",
    "three",
    "tailwind",
    "css",
    "post",
    "css",
    "autoprefixer",
    "three",
    "going",
    "basically",
    "make",
    "tailwind",
    "next",
    "jas",
    "going",
    "basically",
    "init",
    "tailwind",
    "make",
    "config",
    "file",
    "tailwind",
    "gon",
    "na",
    "yarn",
    "tailwind",
    "css",
    "p",
    "yarn",
    "tailwind",
    "css",
    "init",
    "dash",
    "p",
    "run",
    "going",
    "give",
    "us",
    "post",
    "css",
    "dot",
    "config",
    "dot",
    "j",
    "tailwind",
    "dot",
    "config",
    "dot",
    "j",
    "going",
    "want",
    "literally",
    "hit",
    "copy",
    "button",
    "going",
    "update",
    "tailwind",
    "jas",
    "says",
    "okay",
    "stuff",
    "anything",
    "pages",
    "anything",
    "dot",
    "jsx",
    "tsx",
    "anything",
    "components",
    "anything",
    "two",
    "folders",
    "going",
    "considered",
    "tailwind",
    "double",
    "want",
    "use",
    "tailwind",
    "two",
    "folders",
    "going",
    "add",
    "tailwind",
    "directives",
    "global",
    "css",
    "files",
    "go",
    "back",
    "going",
    "styles",
    "global",
    "going",
    "overwrite",
    "everything",
    "add",
    "tailwind",
    "base",
    "add",
    "tailwind",
    "components",
    "tailwind",
    "utilities",
    "makes",
    "global",
    "css",
    "file",
    "uses",
    "tailwind",
    "see",
    "like",
    "unknown",
    "rule",
    "tailwind",
    "go",
    "components",
    "look",
    "post",
    "css",
    "language",
    "support",
    "extension",
    "paste",
    "boom",
    "let",
    "go",
    "ahead",
    "install",
    "get",
    "little",
    "underscores",
    "go",
    "away",
    "really",
    "nice",
    "per",
    "usual",
    "npm",
    "run",
    "dev",
    "start",
    "adding",
    "tailwind",
    "divs",
    "tailwind",
    "allows",
    "us",
    "divs",
    "set",
    "everything",
    "class",
    "name",
    "set",
    "real",
    "minimalistic",
    "text",
    "class",
    "names",
    "let",
    "look",
    "smart",
    "contract",
    "lottery",
    "tailwind",
    "already",
    "updated",
    "little",
    "bit",
    "let",
    "update",
    "header",
    "well",
    "let",
    "see",
    "want",
    "give",
    "header",
    "border",
    "tailwind",
    "quick",
    "search",
    "look",
    "border",
    "see",
    "border",
    "stuff",
    "like",
    "border",
    "width",
    "border",
    "border",
    "say",
    "want",
    "border",
    "bottom",
    "see",
    "get",
    "border",
    "bottom",
    "something",
    "like",
    "let",
    "border",
    "bottom",
    "width",
    "two",
    "pixels",
    "border",
    "b",
    "two",
    "going",
    "copy",
    "border",
    "b",
    "border",
    "b",
    "two",
    "going",
    "save",
    "need",
    "css",
    "everything",
    "take",
    "effect",
    "go",
    "ahead",
    "kill",
    "front",
    "end",
    "rerun",
    "yarn",
    "dev",
    "go",
    "back",
    "front",
    "end",
    "give",
    "little",
    "refresh",
    "okay",
    "cool",
    "little",
    "border",
    "starting",
    "add",
    "stuff",
    "whole",
    "lot",
    "yet",
    "oh",
    "also",
    "add",
    "tailwind",
    "go",
    "extensions",
    "also",
    "look",
    "tailwind",
    "tailwind",
    "extension",
    "going",
    "add",
    "whole",
    "bunch",
    "stuff",
    "gon",
    "na",
    "flex",
    "flex",
    "row",
    "gon",
    "na",
    "make",
    "decentralized",
    "lottery",
    "h",
    "one",
    "stands",
    "like",
    "header",
    "one",
    "class",
    "name",
    "equals",
    "dash",
    "force",
    "give",
    "padding",
    "top",
    "form",
    "x",
    "padding",
    "x",
    "axis",
    "four",
    "make",
    "bold",
    "font",
    "make",
    "text",
    "three",
    "xl",
    "size",
    "make",
    "everything",
    "bigger",
    "cool",
    "one",
    "wrap",
    "connect",
    "button",
    "div",
    "say",
    "div",
    "class",
    "name",
    "equals",
    "give",
    "automatic",
    "left",
    "margin",
    "py",
    "padding",
    "x",
    "padding",
    "see",
    "done",
    "okay",
    "zoom",
    "little",
    "bit",
    "see",
    "close",
    "see",
    "connect",
    "button",
    "side",
    "kind",
    "separated",
    "like",
    "think",
    "looks",
    "nice",
    "going",
    "keep",
    "going",
    "go",
    "back",
    "lottery",
    "entrance",
    "going",
    "change",
    "hair",
    "say",
    "div",
    "class",
    "name",
    "equals",
    "five",
    "make",
    "button",
    "look",
    "really",
    "nice",
    "say",
    "class",
    "name",
    "equals",
    "background",
    "blue",
    "hover",
    "say",
    "background",
    "blue",
    "say",
    "hover",
    "looks",
    "little",
    "different",
    "really",
    "nice",
    "say",
    "text",
    "white",
    "say",
    "font",
    "bold",
    "give",
    "white",
    "padding",
    "give",
    "x",
    "padding",
    "bunbee",
    "rounded",
    "give",
    "margin",
    "left",
    "auto",
    "looks",
    "lot",
    "better",
    "right",
    "lot",
    "prettier",
    "going",
    "basic",
    "css",
    "make",
    "look",
    "little",
    "bit",
    "nicer",
    "right",
    "already",
    "made",
    "lottery",
    "button",
    "look",
    "lot",
    "cooler",
    "functionality",
    "add",
    "need",
    "add",
    "disabled",
    "kind",
    "like",
    "enter",
    "raffle",
    "comes",
    "like",
    "said",
    "loading",
    "fetching",
    "none",
    "transaction",
    "loading",
    "fetching",
    "make",
    "disabled",
    "say",
    "loading",
    "fetching",
    "disabled",
    "right",
    "go",
    "back",
    "front",
    "hit",
    "enter",
    "raffle",
    "go",
    "ahead",
    "hit",
    "confirm",
    "add",
    "css",
    "transaction",
    "loading",
    "able",
    "click",
    "button",
    "anymore",
    "something",
    "else",
    "pretty",
    "want",
    "speaking",
    "loading",
    "fetching",
    "loading",
    "fetching",
    "probably",
    "want",
    "like",
    "little",
    "spinny",
    "thing",
    "right",
    "hit",
    "right",
    "mash",
    "pops",
    "confirm",
    "would",
    "cool",
    "like",
    "little",
    "spinny",
    "thing",
    "right",
    "usually",
    "google",
    "like",
    "add",
    "spinny",
    "thing",
    "stuff",
    "like",
    "get",
    "something",
    "copy",
    "paste",
    "code",
    "going",
    "show",
    "ended",
    "section",
    "gon",
    "na",
    "say",
    "loading",
    "fetching",
    "going",
    "use",
    "ternary",
    "operator",
    "time",
    "going",
    "little",
    "div",
    "otherwise",
    "going",
    "different",
    "div",
    "loading",
    "fetching",
    "going",
    "add",
    "like",
    "little",
    "spinny",
    "thing",
    "going",
    "add",
    "class",
    "name",
    "equals",
    "loading",
    "going",
    "add",
    "little",
    "spinny",
    "thing",
    "show",
    "looks",
    "like",
    "second",
    "loading",
    "gon",
    "na",
    "enter",
    "raffle",
    "like",
    "come",
    "back",
    "front",
    "end",
    "see",
    "answer",
    "raffle",
    "click",
    "button",
    "get",
    "cute",
    "little",
    "spinny",
    "thing",
    "confirm",
    "transaction",
    "goes",
    "anything",
    "goes",
    "away",
    "nice",
    "well",
    "let",
    "put",
    "different",
    "lines",
    "different",
    "lines",
    "boom",
    "entrance",
    "fee",
    "number",
    "players",
    "recent",
    "winner",
    "lottery",
    "confirm",
    "transaction",
    "complete",
    "number",
    "players",
    "gone",
    "done",
    "looks",
    "lot",
    "nicer",
    "clearly",
    "perfect",
    "much",
    "easier",
    "read",
    "kind",
    "lump",
    "reason",
    "wanted",
    "show",
    "really",
    "kind",
    "giving",
    "footholds",
    "making",
    "look",
    "little",
    "bit",
    "nicer",
    "definitely",
    "css",
    "course",
    "oh",
    "wow",
    "okay",
    "phenomenal",
    "app",
    "really",
    "like",
    "like",
    "know",
    "want",
    "deploy",
    "bad",
    "larry",
    "let",
    "talk",
    "deploy",
    "section",
    "going",
    "optional",
    "okay",
    "going",
    "deploy",
    "something",
    "rank",
    "b",
    "deploying",
    "test",
    "sets",
    "take",
    "long",
    "time",
    "going",
    "deploy",
    "contracts",
    "rink",
    "going",
    "deploy",
    "website",
    "hosting",
    "provider",
    "first",
    "let",
    "talk",
    "hosting",
    "providers",
    "quick",
    "second",
    "want",
    "host",
    "beautiful",
    "website",
    "created",
    "ways",
    "deploy",
    "using",
    "things",
    "like",
    "cell",
    "google",
    "cloud",
    "aws",
    "nettle",
    "phi",
    "another",
    "really",
    "popular",
    "one",
    "different",
    "places",
    "deploy",
    "application",
    "thing",
    "though",
    "centralized",
    "deployment",
    "places",
    "centralized",
    "deployment",
    "application",
    "still",
    "incredibly",
    "important",
    "right",
    "look",
    "ether",
    "scan",
    "second",
    "ether",
    "scan",
    "centralized",
    "application",
    "right",
    "end",
    "day",
    "still",
    "one",
    "using",
    "lot",
    "however",
    "want",
    "front",
    "end",
    "decentralized",
    "well",
    "little",
    "bit",
    "harder",
    "important",
    "thing",
    "us",
    "back",
    "end",
    "smart",
    "contracts",
    "decentralized",
    "right",
    "important",
    "thing",
    "give",
    "users",
    "ability",
    "interact",
    "logic",
    "decentralized",
    "way",
    "maybe",
    "also",
    "want",
    "front",
    "ends",
    "decentralized",
    "point",
    "still",
    "use",
    "centralized",
    "service",
    "like",
    "vsl",
    "deploy",
    "application",
    "show",
    "get",
    "features",
    "right",
    "really",
    "hard",
    "without",
    "like",
    "really",
    "solid",
    "centralized",
    "back",
    "end",
    "important",
    "keep",
    "mind",
    "back",
    "end",
    "logic",
    "contract",
    "decentralized",
    "blockchain",
    "even",
    "host",
    "front",
    "end",
    "centralized",
    "hosting",
    "provider",
    "using",
    "type",
    "centralized",
    "database",
    "make",
    "front",
    "end",
    "easier",
    "work",
    "logic",
    "application",
    "decentralized",
    "important",
    "piece",
    "going",
    "give",
    "tools",
    "later",
    "introduce",
    "feature",
    "richness",
    "choose",
    "add",
    "centralized",
    "component",
    "front",
    "end",
    "something",
    "keep",
    "mind",
    "depending",
    "want",
    "architecture",
    "absolutely",
    "sure",
    "smart",
    "contracts",
    "back",
    "end",
    "deployed",
    "decentralized",
    "one",
    "blockchains",
    "learn",
    "centralized",
    "ways",
    "later",
    "section",
    "let",
    "learn",
    "deploy",
    "front",
    "end",
    "decentralized",
    "way",
    "tool",
    "going",
    "use",
    "tool",
    "called",
    "ipfs",
    "let",
    "explain",
    "little",
    "bit",
    "ipfs",
    "works",
    "distributed",
    "decentralized",
    "data",
    "structure",
    "exactly",
    "blockchain",
    "similar",
    "blockchain",
    "mining",
    "though",
    "pinning",
    "data",
    "add",
    "data",
    "let",
    "explain",
    "actually",
    "works",
    "read",
    "works",
    "site",
    "going",
    "link",
    "github",
    "repo",
    "associated",
    "course",
    "give",
    "basic",
    "take",
    "code",
    "file",
    "whatever",
    "right",
    "piece",
    "data",
    "know",
    "really",
    "anything",
    "hash",
    "thing",
    "hash",
    "data",
    "right",
    "get",
    "unique",
    "output",
    "actually",
    "first",
    "thing",
    "ipfs",
    "hashes",
    "data",
    "get",
    "unique",
    "hash",
    "points",
    "data",
    "yes",
    "massive",
    "code",
    "file",
    "ton",
    "text",
    "yes",
    "encode",
    "single",
    "hash",
    "function",
    "ipfs",
    "node",
    "hashing",
    "every",
    "single",
    "ipfs",
    "node",
    "planet",
    "exact",
    "hashing",
    "function",
    "kind",
    "like",
    "blockchain",
    "right",
    "kind",
    "run",
    "spec",
    "specification",
    "hash",
    "data",
    "ipfs",
    "node",
    "get",
    "unique",
    "output",
    "pin",
    "data",
    "pin",
    "code",
    "pin",
    "file",
    "pin",
    "whatever",
    "node",
    "data",
    "get",
    "unique",
    "hash",
    "host",
    "data",
    "hashes",
    "node",
    "connected",
    "network",
    "ipfs",
    "nodes",
    "massive",
    "network",
    "people",
    "running",
    "ipfs",
    "nodes",
    "incredibly",
    "lightweight",
    "way",
    "lighter",
    "weight",
    "blockchain",
    "node",
    "talk",
    "asked",
    "network",
    "hey",
    "want",
    "get",
    "hash",
    "nodes",
    "would",
    "talk",
    "eventually",
    "reach",
    "node",
    "saying",
    "oh",
    "found",
    "node",
    "hash",
    "file",
    "associated",
    "might",
    "thinking",
    "okay",
    "well",
    "kind",
    "centralized",
    "data",
    "one",
    "node",
    "right",
    "well",
    "right",
    "well",
    "thing",
    "nodes",
    "say",
    "oh",
    "data",
    "looks",
    "really",
    "cool",
    "want",
    "persist",
    "pin",
    "hash",
    "pin",
    "data",
    "get",
    "copy",
    "data",
    "node",
    "keep",
    "easily",
    "allow",
    "entire",
    "network",
    "easily",
    "replicate",
    "code",
    "data",
    "decentralized",
    "sense",
    "incredibly",
    "easy",
    "spin",
    "incredibly",
    "easy",
    "work",
    "something",
    "ipfs",
    "makes",
    "drastically",
    "different",
    "blockchain",
    "ca",
    "smart",
    "contract",
    "execution",
    "really",
    "store",
    "decentralized",
    "storage",
    "ipfs",
    "issue",
    "order",
    "data",
    "really",
    "decentralized",
    "another",
    "node",
    "need",
    "pin",
    "data",
    "right",
    "ipfs",
    "node",
    "got",
    "hash",
    "kind",
    "centralized",
    "node",
    "node",
    "goes",
    "data",
    "gone",
    "network",
    "wo",
    "able",
    "access",
    "data",
    "anymore",
    "talk",
    "strategies",
    "future",
    "people",
    "pin",
    "data",
    "way",
    "host",
    "data",
    "send",
    "code",
    "decentralized",
    "context",
    "unlike",
    "blockchain",
    "every",
    "single",
    "node",
    "blockchain",
    "going",
    "copy",
    "entire",
    "blockchain",
    "ipfs",
    "nodes",
    "get",
    "optionally",
    "choose",
    "data",
    "want",
    "pin",
    "ca",
    "execution",
    "could",
    "ipfs",
    "node",
    "half",
    "megabyte",
    "could",
    "ipfs",
    "node",
    "several",
    "terabytes",
    "node",
    "operators",
    "much",
    "data",
    "data",
    "want",
    "pin",
    "know",
    "ipfs",
    "let",
    "actually",
    "deploy",
    "wonderful",
    "application",
    "ipfs",
    "anybody",
    "use",
    "anybody",
    "connect",
    "long",
    "node",
    "ready",
    "okay",
    "get",
    "excited",
    "first",
    "going",
    "kind",
    "manuel",
    "wait",
    "going",
    "show",
    "install",
    "ipfs",
    "work",
    "ipfs",
    "hit",
    "get",
    "started",
    "number",
    "ways",
    "install",
    "work",
    "ipfs",
    "get",
    "desktop",
    "application",
    "get",
    "command",
    "line",
    "also",
    "add",
    "ipfs",
    "browser",
    "using",
    "something",
    "like",
    "brave",
    "think",
    "firefox",
    "ipfs",
    "router",
    "automatically",
    "built",
    "using",
    "something",
    "like",
    "chrome",
    "might",
    "add",
    "little",
    "companion",
    "want",
    "actually",
    "use",
    "little",
    "hashes",
    "urls",
    "websites",
    "right",
    "want",
    "able",
    "put",
    "url",
    "browser",
    "connect",
    "node",
    "piece",
    "code",
    "gon",
    "na",
    "gon",
    "na",
    "install",
    "ipfs",
    "desktop",
    "gon",
    "na",
    "hit",
    "able",
    "open",
    "ipfs",
    "install",
    "might",
    "get",
    "little",
    "guy",
    "little",
    "box",
    "upper",
    "section",
    "otherwise",
    "might",
    "able",
    "open",
    "ipfs",
    "desktop",
    "see",
    "regular",
    "desktop",
    "app",
    "well",
    "install",
    "might",
    "see",
    "ipfs",
    "running",
    "restart",
    "stop",
    "stuff",
    "gon",
    "na",
    "go",
    "file",
    "section",
    "gon",
    "na",
    "get",
    "little",
    "pop",
    "looks",
    "like",
    "got",
    "ton",
    "stuff",
    "using",
    "ipfs",
    "time",
    "right",
    "might",
    "data",
    "let",
    "go",
    "ahead",
    "import",
    "file",
    "maybe",
    "import",
    "know",
    "next",
    "dot",
    "config",
    "dot",
    "j",
    "right",
    "matter",
    "import",
    "something",
    "next",
    "dot",
    "config",
    "dot",
    "j",
    "whatever",
    "file",
    "import",
    "actually",
    "copy",
    "cid",
    "view",
    "browser",
    "ipfs",
    "dot",
    "dot",
    "slash",
    "slash",
    "paste",
    "hit",
    "enter",
    "give",
    "browser",
    "access",
    "actually",
    "rendering",
    "ipfs",
    "urls",
    "using",
    "brave",
    "use",
    "brave",
    "local",
    "ipfs",
    "node",
    "let",
    "go",
    "ahead",
    "download",
    "ipfs",
    "companion",
    "get",
    "ipfs",
    "companion",
    "firefox",
    "install",
    "chrome",
    "brave",
    "blah",
    "blah",
    "blah",
    "gon",
    "na",
    "go",
    "chrome",
    "store",
    "get",
    "brave",
    "going",
    "hit",
    "add",
    "brave",
    "add",
    "extension",
    "download",
    "get",
    "something",
    "looks",
    "like",
    "even",
    "little",
    "browser",
    "companion",
    "see",
    "like",
    "import",
    "see",
    "stuff",
    "node",
    "click",
    "node",
    "see",
    "similar",
    "setup",
    "companion",
    "browser",
    "copy",
    "cid",
    "hash",
    "brave",
    "use",
    "brave",
    "local",
    "ipfs",
    "node",
    "automatically",
    "get",
    "dropped",
    "file",
    "ipfs",
    "companion",
    "work",
    "ca",
    "see",
    "url",
    "inside",
    "something",
    "like",
    "google",
    "chrome",
    "browser",
    "use",
    "something",
    "called",
    "ipfs",
    "gateway",
    "using",
    "gateway",
    "actually",
    "directly",
    "requesting",
    "data",
    "ipfs",
    "requesting",
    "data",
    "another",
    "server",
    "requesting",
    "ipfs",
    "trouble",
    "accessing",
    "files",
    "use",
    "gateway",
    "https",
    "slash",
    "ipfs",
    "slash",
    "paste",
    "hash",
    "code",
    "able",
    "see",
    "file",
    "like",
    "wo",
    "even",
    "need",
    "ipfs",
    "companion",
    "going",
    "deploy",
    "website",
    "ipfs",
    "anybody",
    "else",
    "wants",
    "pin",
    "ability",
    "incorruptible",
    "unputdownable",
    "website",
    "awesome",
    "going",
    "learn",
    "wrong",
    "way",
    "first",
    "going",
    "use",
    "tool",
    "going",
    "make",
    "lot",
    "easier",
    "us",
    "okay",
    "first",
    "let",
    "go",
    "website",
    "want",
    "deploy",
    "rink",
    "b",
    "go",
    "ahead",
    "feel",
    "free",
    "remember",
    "make",
    "sure",
    "contract",
    "addresses",
    "file",
    "updates",
    "accordingly",
    "okay",
    "next",
    "jas",
    "ability",
    "create",
    "static",
    "websites",
    "going",
    "important",
    "term",
    "know",
    "going",
    "make",
    "static",
    "website",
    "moment",
    "want",
    "website",
    "tangled",
    "server",
    "stuff",
    "reason",
    "want",
    "tangled",
    "server",
    "stuff",
    "website",
    "runs",
    "server",
    "stuff",
    "deploy",
    "ipfs",
    "ipfs",
    "ability",
    "run",
    "code",
    "hosts",
    "code",
    "front",
    "end",
    "server",
    "stuff",
    "wo",
    "work",
    "current",
    "state",
    "ipfs",
    "ca",
    "come",
    "project",
    "know",
    "right",
    "know",
    "yarn",
    "dev",
    "ca",
    "yarn",
    "dev",
    "need",
    "put",
    "code",
    "static",
    "equivalents",
    "gon",
    "na",
    "yarn",
    "build",
    "look",
    "package",
    "dot",
    "json",
    "comes",
    "build",
    "runs",
    "next",
    "build",
    "running",
    "build",
    "command",
    "going",
    "build",
    "code",
    "called",
    "like",
    "production",
    "build",
    "creating",
    "optimized",
    "production",
    "build",
    "get",
    "something",
    "looks",
    "like",
    "see",
    "point",
    "static",
    "automatically",
    "rendered",
    "static",
    "html",
    "uses",
    "initial",
    "props",
    "server",
    "based",
    "applications",
    "next",
    "jas",
    "comes",
    "use",
    "static",
    "build",
    "wo",
    "work",
    "actually",
    "see",
    "run",
    "yarn",
    "next",
    "export",
    "fail",
    "non",
    "static",
    "stuff",
    "let",
    "go",
    "ahead",
    "try",
    "yarn",
    "next",
    "export",
    "let",
    "see",
    "fails",
    "fail",
    "new",
    "folder",
    "called",
    "folder",
    "pure",
    "static",
    "code",
    "use",
    "ipfs",
    "later",
    "section",
    "show",
    "looks",
    "like",
    "use",
    "static",
    "things",
    "morales",
    "next",
    "jas",
    "optionality",
    "static",
    "code",
    "want",
    "keep",
    "mind",
    "folder",
    "go",
    "back",
    "ipfs",
    "import",
    "folder",
    "going",
    "import",
    "whole",
    "folder",
    "hit",
    "hit",
    "import",
    "button",
    "go",
    "folder",
    "mine",
    "next",
    "year",
    "smart",
    "contract",
    "lottery",
    "going",
    "upload",
    "ipfs",
    "node",
    "done",
    "get",
    "little",
    "checkmark",
    "go",
    "ipfs",
    "files",
    "see",
    "output",
    "let",
    "go",
    "ahead",
    "pin",
    "node",
    "pin",
    "local",
    "node",
    "copy",
    "cid",
    "go",
    "back",
    "brave",
    "chrome",
    "whatever",
    "type",
    "ipfs",
    "colon",
    "slash",
    "slash",
    "paste",
    "immediately",
    "get",
    "dropped",
    "smart",
    "contract",
    "lottery",
    "browser",
    "see",
    "hi",
    "lottery",
    "raffle",
    "address",
    "detected",
    "right",
    "way",
    "set",
    "mine",
    "works",
    "know",
    "local",
    "hard",
    "hats",
    "let",
    "connect",
    "metamask",
    "hit",
    "connect",
    "button",
    "connect",
    "voila",
    "right",
    "back",
    "data",
    "stored",
    "ipfs",
    "enter",
    "raffle",
    "long",
    "node",
    "running",
    "confirm",
    "see",
    "exactly",
    "get",
    "local",
    "browsers",
    "phenomenal",
    "shown",
    "manual",
    "way",
    "adding",
    "code",
    "ipfs",
    "let",
    "show",
    "easier",
    "way",
    "adding",
    "code",
    "ipfs",
    "gon",
    "na",
    "go",
    "site",
    "called",
    "fleek",
    "hq",
    "go",
    "get",
    "going",
    "turn",
    "ipfs",
    "companion",
    "note",
    "oddities",
    "working",
    "brave",
    "makes",
    "easy",
    "deploy",
    "websites",
    "apps",
    "new",
    "open",
    "web",
    "permissionless",
    "trustless",
    "censorship",
    "resistant",
    "etc",
    "like",
    "think",
    "kind",
    "like",
    "auto",
    "deployment",
    "websites",
    "additionally",
    "things",
    "help",
    "problem",
    "talking",
    "want",
    "get",
    "nodes",
    "pin",
    "data",
    "helps",
    "us",
    "let",
    "show",
    "let",
    "go",
    "ahead",
    "sign",
    "know",
    "sign",
    "github",
    "github",
    "definitely",
    "want",
    "sign",
    "github",
    "going",
    "use",
    "github",
    "actually",
    "help",
    "us",
    "automatically",
    "deploy",
    "authorize",
    "fleet",
    "work",
    "github",
    "authorized",
    "github",
    "let",
    "go",
    "ahead",
    "add",
    "new",
    "site",
    "add",
    "new",
    "site",
    "use",
    "fleet",
    "automatically",
    "deploy",
    "websites",
    "push",
    "github",
    "come",
    "github",
    "click",
    "little",
    "plus",
    "button",
    "new",
    "repository",
    "call",
    "next",
    "jas",
    "smart",
    "contract",
    "lottery",
    "free",
    "code",
    "camp",
    "make",
    "public",
    "create",
    "repository",
    "let",
    "push",
    "code",
    "github",
    "let",
    "git",
    "add",
    "little",
    "dot",
    "git",
    "commit",
    "minus",
    "say",
    "like",
    "initial",
    "commit",
    "whatever",
    "git",
    "remote",
    "add",
    "origin",
    "grab",
    "url",
    "paste",
    "right",
    "git",
    "push",
    "origin",
    "main",
    "go",
    "back",
    "application",
    "see",
    "back",
    "fleek",
    "connect",
    "github",
    "going",
    "say",
    "select",
    "repositories",
    "going",
    "next",
    "js",
    "application",
    "next",
    "js",
    "get",
    "going",
    "install",
    "authorize",
    "authorize",
    "great",
    "going",
    "pick",
    "repo",
    "picked",
    "repo",
    "going",
    "choose",
    "application",
    "going",
    "use",
    "ipfs",
    "hosting",
    "service",
    "going",
    "add",
    "information",
    "going",
    "use",
    "main",
    "branch",
    "repo",
    "gon",
    "na",
    "framework",
    "gon",
    "na",
    "next",
    "jas",
    "fleek",
    "next",
    "jas",
    "using",
    "yarn",
    "gon",
    "na",
    "yarn",
    "install",
    "yarn",
    "run",
    "build",
    "yarn",
    "run",
    "export",
    "want",
    "could",
    "also",
    "yarn",
    "yarn",
    "build",
    "yarn",
    "run",
    "export",
    "gon",
    "na",
    "thing",
    "publish",
    "directory",
    "going",
    "hit",
    "deploy",
    "site",
    "yarn",
    "next",
    "export",
    "last",
    "command",
    "yarn",
    "run",
    "export",
    "accident",
    "wrong",
    "one",
    "go",
    "deploys",
    "click",
    "go",
    "deploy",
    "settings",
    "edit",
    "settings",
    "change",
    "yarn",
    "next",
    "export",
    "save",
    "go",
    "back",
    "deploys",
    "trigger",
    "deploy",
    "wrong",
    "one",
    "learning",
    "opportunity",
    "learn",
    "settings",
    "deploy",
    "going",
    "going",
    "deploy",
    "going",
    "run",
    "three",
    "commands",
    "yarn",
    "build",
    "yarn",
    "export",
    "going",
    "run",
    "everything",
    "going",
    "deploy",
    "site",
    "us",
    "ipfs",
    "going",
    "give",
    "regular",
    "url",
    "use",
    "normies",
    "deploys",
    "actually",
    "see",
    "thing",
    "called",
    "file",
    "coin",
    "di",
    "deal",
    "proposal",
    "cid",
    "ipfs",
    "like",
    "said",
    "need",
    "people",
    "host",
    "node",
    "file",
    "coin",
    "actually",
    "blockchain",
    "helps",
    "pin",
    "data",
    "uses",
    "decentralized",
    "storage",
    "fleek",
    "helps",
    "create",
    "deals",
    "helps",
    "pin",
    "data",
    "filecoin",
    "blockchain",
    "filecoin",
    "one",
    "definitely",
    "take",
    "look",
    "might",
    "wait",
    "little",
    "bit",
    "done",
    "get",
    "little",
    "deployed",
    "website",
    "go",
    "back",
    "hosting",
    "click",
    "thing",
    "see",
    "like",
    "little",
    "website",
    "click",
    "get",
    "normal",
    "url",
    "connecting",
    "interacting",
    "website",
    "might",
    "even",
    "see",
    "little",
    "ipfs",
    "thing",
    "connect",
    "ipfs",
    "node",
    "additionally",
    "scroll",
    "see",
    "current",
    "ipfs",
    "hash",
    "stick",
    "um",
    "bada",
    "bing",
    "ip",
    "fs",
    "deployed",
    "application",
    "cool",
    "let",
    "say",
    "make",
    "changes",
    "know",
    "go",
    "lottery",
    "entrance",
    "scroll",
    "bottom",
    "recent",
    "winner",
    "make",
    "new",
    "div",
    "close",
    "div",
    "save",
    "git",
    "add",
    "dot",
    "git",
    "commit",
    "minus",
    "add",
    "dot",
    "git",
    "push",
    "origin",
    "mean",
    "github",
    "little",
    "refresh",
    "add",
    "recently",
    "added",
    "one",
    "go",
    "back",
    "fleek",
    "go",
    "back",
    "hosting",
    "click",
    "section",
    "made",
    "go",
    "deploys",
    "see",
    "new",
    "deploy",
    "going",
    "automatically",
    "deploys",
    "new",
    "site",
    "automatically",
    "create",
    "new",
    "ipfs",
    "hash",
    "new",
    "data",
    "however",
    "still",
    "holy",
    "bird",
    "know",
    "whatever",
    "url",
    "kind",
    "router",
    "ipss",
    "people",
    "without",
    "ipfs",
    "connected",
    "also",
    "connect",
    "still",
    "application",
    "done",
    "pushing",
    "automatically",
    "fleek",
    "see",
    "post",
    "application",
    "like",
    "said",
    "filecoin",
    "going",
    "technology",
    "gon",
    "na",
    "go",
    "deep",
    "introduce",
    "like",
    "saying",
    "ipfs",
    "limitation",
    "data",
    "persistence",
    "people",
    "pin",
    "data",
    "order",
    "stay",
    "distributed",
    "stay",
    "decentralized",
    "file",
    "coin",
    "blockchain",
    "dedicated",
    "keeping",
    "data",
    "decentralized",
    "persistent",
    "give",
    "us",
    "better",
    "understanding",
    "filecoin",
    "actually",
    "ali",
    "give",
    "us",
    "overview",
    "take",
    "away",
    "ali",
    "hello",
    "ali",
    "developer",
    "advocate",
    "filecoin",
    "foundation",
    "works",
    "closely",
    "protocol",
    "labs",
    "ipfs",
    "quick",
    "note",
    "protocol",
    "labs",
    "r",
    "arm",
    "works",
    "creating",
    "tooling",
    "technology",
    "truly",
    "open",
    "democratic",
    "internet",
    "web",
    "building",
    "foundational",
    "tooling",
    "like",
    "ipfs",
    "filecoin",
    "two",
    "separate",
    "projects",
    "enable",
    "hopefully",
    "today",
    "build",
    "want",
    "impart",
    "knowledge",
    "tools",
    "need",
    "get",
    "started",
    "projects",
    "anyone",
    "kind",
    "played",
    "around",
    "ecosystem",
    "tech",
    "general",
    "would",
    "know",
    "data",
    "absolutely",
    "essential",
    "part",
    "daily",
    "lives",
    "surprisingly",
    "also",
    "super",
    "fast",
    "growing",
    "field",
    "web",
    "three",
    "one",
    "fundamental",
    "one",
    "one",
    "fundamental",
    "necessities",
    "decentralized",
    "web",
    "stack",
    "well",
    "current",
    "model",
    "centralization",
    "grown",
    "basically",
    "lack",
    "identity",
    "layer",
    "internet",
    "one",
    "big",
    "companies",
    "offer",
    "storage",
    "entities",
    "hold",
    "data",
    "authorization",
    "purposes",
    "obvious",
    "problem",
    "terms",
    "attack",
    "vector",
    "data",
    "mining",
    "without",
    "data",
    "getting",
    "leaked",
    "insecure",
    "service",
    "third",
    "parties",
    "also",
    "creating",
    "data",
    "resilience",
    "problem",
    "whole",
    "services",
    "go",
    "every",
    "time",
    "one",
    "companies",
    "servers",
    "definitely",
    "seen",
    "really",
    "leads",
    "question",
    "designing",
    "web",
    "autonomy",
    "resilience",
    "need",
    "first",
    "place",
    "store",
    "data",
    "way",
    "aligns",
    "original",
    "vision",
    "internet",
    "open",
    "place",
    "knowledge",
    "sharing",
    "collaboration",
    "way",
    "agrees",
    "web",
    "three",
    "mission",
    "well",
    "core",
    "problems",
    "solving",
    "ipfs",
    "file",
    "coin",
    "firstly",
    "ipfs",
    "distributed",
    "system",
    "storing",
    "accessing",
    "files",
    "folders",
    "websites",
    "applications",
    "data",
    "designed",
    "able",
    "work",
    "even",
    "networks",
    "planets",
    "distributed",
    "design",
    "central",
    "authority",
    "servers",
    "designed",
    "offline",
    "first",
    "resilience",
    "fancy",
    "name",
    "another",
    "peer",
    "peer",
    "network",
    "either",
    "nice",
    "thing",
    "ipfs",
    "protocol",
    "standard",
    "uses",
    "addressing",
    "content",
    "network",
    "ipfs",
    "unique",
    "rather",
    "using",
    "traditional",
    "methods",
    "might",
    "familiar",
    "web",
    "like",
    "location",
    "parts",
    "point",
    "particular",
    "http",
    "address",
    "content",
    "may",
    "may",
    "available",
    "stored",
    "ipfs",
    "uses",
    "content",
    "addressing",
    "content",
    "addressing",
    "means",
    "piece",
    "data",
    "meme",
    "even",
    "full",
    "file",
    "system",
    "unique",
    "cryptographically",
    "verifiable",
    "fingerprint",
    "might",
    "call",
    "change",
    "even",
    "one",
    "pixel",
    "main",
    "image",
    "example",
    "content",
    "id",
    "cid",
    "associated",
    "also",
    "changes",
    "importantly",
    "hash",
    "function",
    "also",
    "upgradeable",
    "let",
    "say",
    "quantum",
    "computing",
    "breaks",
    "current",
    "secure",
    "hash",
    "algorithms",
    "upgrade",
    "standard",
    "use",
    "means",
    "always",
    "get",
    "content",
    "returned",
    "ipfs",
    "cid",
    "expect",
    "fundamentally",
    "important",
    "care",
    "data",
    "comes",
    "open",
    "web",
    "massively",
    "distributed",
    "storage",
    "systems",
    "hello",
    "decentralization",
    "really",
    "important",
    "valuable",
    "protocol",
    "enables",
    "distribution",
    "scale",
    "provides",
    "verifiability",
    "data",
    "serve",
    "retrieve",
    "content",
    "web",
    "web",
    "three",
    "either",
    "also",
    "web",
    "tech",
    "use",
    "cases",
    "problem",
    "one",
    "early",
    "internet",
    "also",
    "faced",
    "going",
    "ensure",
    "persistence",
    "permanence",
    "data",
    "network",
    "unless",
    "running",
    "nodes",
    "content",
    "really",
    "popular",
    "nodes",
    "decide",
    "altruistically",
    "store",
    "data",
    "think",
    "important",
    "data",
    "become",
    "unreliable",
    "longer",
    "actively",
    "hosted",
    "nodes",
    "network",
    "avoid",
    "could",
    "also",
    "turn",
    "pinning",
    "service",
    "pay",
    "keep",
    "copy",
    "content",
    "around",
    "unfortunately",
    "problem",
    "though",
    "heading",
    "back",
    "towards",
    "centralization",
    "data",
    "creating",
    "new",
    "data",
    "silos",
    "solution",
    "losing",
    "trust",
    "lessness",
    "resilience",
    "looking",
    "one",
    "bad",
    "solution",
    "prior",
    "file",
    "coin",
    "sprung",
    "initially",
    "want",
    "better",
    "solution",
    "file",
    "coin",
    "comes",
    "far",
    "coins",
    "architecture",
    "designed",
    "leverage",
    "crypto",
    "economic",
    "incentive",
    "model",
    "together",
    "cryptographic",
    "proofs",
    "order",
    "ensure",
    "data",
    "stored",
    "persistently",
    "highly",
    "reliably",
    "verifiably",
    "uses",
    "cryptographic",
    "proofs",
    "also",
    "enable",
    "smart",
    "contract",
    "based",
    "permanence",
    "means",
    "designed",
    "permanent",
    "data",
    "owner",
    "want",
    "data",
    "choice",
    "also",
    "designed",
    "enable",
    "internet",
    "scale",
    "capacity",
    "currently",
    "largest",
    "distributed",
    "storage",
    "network",
    "world",
    "18",
    "million",
    "terabytes",
    "capacity",
    "available",
    "apparently",
    "135",
    "copies",
    "european",
    "union",
    "nuclear",
    "program",
    "cern",
    "data",
    "kind",
    "fun",
    "fact",
    "also",
    "file",
    "coins",
    "also",
    "designed",
    "stay",
    "hyper",
    "competitive",
    "pricing",
    "due",
    "market",
    "economics",
    "comes",
    "storage",
    "deals",
    "make",
    "network",
    "feasible",
    "filecoin",
    "uses",
    "storage",
    "deals",
    "include",
    "two",
    "main",
    "consensus",
    "mechanisms",
    "ensure",
    "rewards",
    "good",
    "actors",
    "system",
    "penalties",
    "bad",
    "actors",
    "make",
    "deal",
    "one",
    "storage",
    "providers",
    "store",
    "important",
    "data",
    "provider",
    "generates",
    "proof",
    "replication",
    "proves",
    "storage",
    "provider",
    "storing",
    "unique",
    "copy",
    "original",
    "data",
    "time",
    "make",
    "sure",
    "data",
    "persisted",
    "storage",
    "providers",
    "must",
    "prove",
    "still",
    "random",
    "subsets",
    "client",
    "data",
    "create",
    "proof",
    "space",
    "times",
    "proof",
    "proof",
    "space",
    "time",
    "something",
    "stored",
    "blockchain",
    "anyone",
    "time",
    "also",
    "check",
    "true",
    "also",
    "makes",
    "mechanism",
    "miners",
    "rewarded",
    "penalized",
    "stake",
    "phil",
    "network",
    "order",
    "become",
    "storage",
    "provider",
    "storage",
    "deal",
    "comes",
    "end",
    "user",
    "opt",
    "let",
    "expire",
    "renew",
    "deal",
    "opt",
    "renewal",
    "providers",
    "bid",
    "host",
    "content",
    "creates",
    "efficient",
    "market",
    "pricing",
    "continual",
    "efficient",
    "market",
    "pricing",
    "well",
    "even",
    "go",
    "negative",
    "storage",
    "provider",
    "even",
    "pay",
    "store",
    "data",
    "important",
    "data",
    "set",
    "due",
    "block",
    "rewards",
    "offered",
    "filecoin",
    "foundation",
    "well",
    "mechanisms",
    "built",
    "data",
    "permanence",
    "data",
    "timeframes",
    "sovereignty",
    "data",
    "choice",
    "decide",
    "want",
    "store",
    "data",
    "five",
    "minutes",
    "500",
    "years",
    "also",
    "choice",
    "much",
    "resilience",
    "want",
    "data",
    "many",
    "copies",
    "data",
    "want",
    "store",
    "providers",
    "allows",
    "comply",
    "regulations",
    "like",
    "gdpr",
    "growing",
    "number",
    "tools",
    "ecosystem",
    "like",
    "murmurations",
    "bit",
    "screen",
    "allowing",
    "filtering",
    "also",
    "gives",
    "guarantees",
    "data",
    "know",
    "one",
    "storage",
    "provided",
    "goes",
    "know",
    "surely",
    "10",
    "going",
    "go",
    "guarantee",
    "resilience",
    "well",
    "ipfs",
    "filecoin",
    "great",
    "complements",
    "ipf",
    "gives",
    "benefit",
    "content",
    "addressing",
    "file",
    "coin",
    "gives",
    "persistent",
    "guarantees",
    "even",
    "computer",
    "favorite",
    "ipfs",
    "pinning",
    "service",
    "go",
    "away",
    "content",
    "persists",
    "quick",
    "final",
    "note",
    "concepts",
    "well",
    "ipfs",
    "file",
    "coin",
    "separate",
    "projects",
    "mentioned",
    "ipfs",
    "protocol",
    "much",
    "like",
    "http",
    "whereas",
    "file",
    "coin",
    "blockchain",
    "ipfs",
    "also",
    "storage",
    "layer",
    "agnostic",
    "combine",
    "storage",
    "layer",
    "choice",
    "file",
    "coin",
    "specifically",
    "designed",
    "complement",
    "think",
    "great",
    "choice",
    "also",
    "store",
    "ipfs",
    "data",
    "cloud",
    "storage",
    "solutions",
    "well",
    "hopefully",
    "got",
    "good",
    "baseline",
    "want",
    "use",
    "ipfs",
    "filecoin",
    "engineers",
    "like",
    "challenge",
    "interested",
    "working",
    "base",
    "protocols",
    "code",
    "ipfs",
    "file",
    "coin",
    "always",
    "easy",
    "average",
    "user",
    "encourage",
    "go",
    "take",
    "look",
    "project",
    "docs",
    "get",
    "hubs",
    "associated",
    "grants",
    "available",
    "extensions",
    "open",
    "source",
    "projects",
    "great",
    "site",
    "want",
    "get",
    "information",
    "nitty",
    "gritty",
    "really",
    "dig",
    "code",
    "behind",
    "ipfs",
    "filecoin",
    "extend",
    "want",
    "build",
    "box",
    "though",
    "definitely",
    "camp",
    "often",
    "fall",
    "want",
    "talk",
    "dev",
    "tooling",
    "storage",
    "helpers",
    "make",
    "easy",
    "get",
    "started",
    "firstly",
    "flake",
    "flake",
    "one",
    "favorite",
    "ipfs",
    "dev",
    "tools",
    "projects",
    "flake",
    "ci",
    "cd",
    "tool",
    "use",
    "deploy",
    "apps",
    "free",
    "simply",
    "easy",
    "would",
    "web",
    "tools",
    "might",
    "web",
    "tools",
    "might",
    "familiar",
    "like",
    "netlify",
    "oversell",
    "big",
    "difference",
    "though",
    "fleek",
    "uses",
    "ipfs",
    "host",
    "site",
    "app",
    "even",
    "offers",
    "aes",
    "domain",
    "routing",
    "platform",
    "deploying",
    "front",
    "end",
    "app",
    "would",
    "encourage",
    "use",
    "fleek",
    "make",
    "distributed",
    "instead",
    "traditional",
    "web",
    "two",
    "tools",
    "easy",
    "promise",
    "another",
    "one",
    "favorite",
    "tools",
    "nft",
    "storage",
    "storing",
    "nft",
    "metadata",
    "immutably",
    "persistently",
    "already",
    "probably",
    "know",
    "integral",
    "keeping",
    "main",
    "value",
    "proposition",
    "nf",
    "ts",
    "fungibility",
    "storing",
    "data",
    "chain",
    "obviously",
    "become",
    "pretty",
    "financially",
    "unviable",
    "large",
    "files",
    "exactly",
    "nf",
    "storage",
    "comes",
    "specifically",
    "created",
    "public",
    "good",
    "archive",
    "persist",
    "nf",
    "data",
    "free",
    "takes",
    "care",
    "complexity",
    "around",
    "firstly",
    "creating",
    "ipfs",
    "cid",
    "metadata",
    "making",
    "automatic",
    "deals",
    "filecoin",
    "storage",
    "providers",
    "least",
    "eight",
    "storage",
    "providers",
    "eight",
    "times",
    "redundancy",
    "multigenerational",
    "timeframe",
    "automatically",
    "renews",
    "deals",
    "public",
    "good",
    "free",
    "well",
    "also",
    "super",
    "easy",
    "use",
    "need",
    "javascript",
    "service",
    "need",
    "say",
    "import",
    "npm",
    "package",
    "javascript",
    "library",
    "call",
    "api",
    "nft",
    "dot",
    "storage",
    "takes",
    "care",
    "rest",
    "data",
    "nf",
    "metadata",
    "well",
    "built",
    "web",
    "three",
    "dot",
    "storage",
    "web",
    "three",
    "storage",
    "designed",
    "give",
    "web",
    "two",
    "benefits",
    "similar",
    "nf",
    "dot",
    "storage",
    "make",
    "super",
    "easy",
    "use",
    "got",
    "javascript",
    "go",
    "client",
    "libraries",
    "giving",
    "know",
    "power",
    "ipfs",
    "filecoin",
    "decentralized",
    "storage",
    "ipfs",
    "content",
    "addressing",
    "got",
    "one",
    "terabyte",
    "terabyte",
    "one",
    "terabyte",
    "free",
    "storage",
    "try",
    "like",
    "trying",
    "store",
    "obtain",
    "metadata",
    "next",
    "tool",
    "bit",
    "advanced",
    "called",
    "textil",
    "palghat",
    "gate",
    "know",
    "advanced",
    "developers",
    "looking",
    "flexibility",
    "interact",
    "ipfs",
    "live",
    "peer",
    "peer",
    "filecoin",
    "docker",
    "container",
    "wrapped",
    "around",
    "filecoin",
    "ipfs",
    "nodes",
    "gives",
    "lot",
    "options",
    "configure",
    "minor",
    "selections",
    "extend",
    "functionality",
    "also",
    "offers",
    "bridges",
    "several",
    "layer",
    "ones",
    "might",
    "interest",
    "developers",
    "another",
    "one",
    "preface",
    "saying",
    "need",
    "invite",
    "esri",
    "tech",
    "people",
    "looking",
    "store",
    "really",
    "meaningful",
    "public",
    "data",
    "currently",
    "alpha",
    "mode",
    "like",
    "said",
    "requires",
    "invite",
    "built",
    "public",
    "goods",
    "specifically",
    "store",
    "important",
    "information",
    "use",
    "case",
    "around",
    "slide",
    "please",
    "feel",
    "free",
    "reach",
    "us",
    "project",
    "final",
    "tool",
    "mention",
    "orbit",
    "db",
    "many",
    "people",
    "coming",
    "web",
    "three",
    "space",
    "web",
    "two",
    "often",
    "looking",
    "sort",
    "relational",
    "databases",
    "used",
    "traditional",
    "computing",
    "except",
    "decentralized",
    "distributed",
    "format",
    "easy",
    "problem",
    "oba",
    "currently",
    "active",
    "development",
    "easy",
    "problem",
    "solve",
    "ideal",
    "solution",
    "looking",
    "box",
    "experience",
    "looking",
    "something",
    "like",
    "try",
    "orbit",
    "db",
    "also",
    "several",
    "tools",
    "ecosystem",
    "leveraging",
    "ipfs",
    "filecoin",
    "including",
    "ceramic",
    "similar",
    "textil",
    "power",
    "gate",
    "except",
    "uses",
    "decentralized",
    "identities",
    "lighthouse",
    "file",
    "drive",
    "even",
    "morales",
    "ipfs",
    "api",
    "check",
    "well",
    "storage",
    "really",
    "fundamental",
    "component",
    "one",
    "technology",
    "system",
    "many",
    "use",
    "cases",
    "could",
    "dive",
    "hopefully",
    "provided",
    "knowledge",
    "tools",
    "need",
    "get",
    "started",
    "ipfs",
    "file",
    "goyt",
    "coin",
    "really",
    "make",
    "powerful",
    "distributed",
    "applications",
    "one",
    "tool",
    "also",
    "active",
    "development",
    "look",
    "closely",
    "diagram",
    "notice",
    "probably",
    "unfamiliar",
    "logo",
    "right",
    "end",
    "logic",
    "layer",
    "logo",
    "filecoin",
    "virtual",
    "machine",
    "fbm",
    "launching",
    "end",
    "year",
    "super",
    "excited",
    "going",
    "allow",
    "smart",
    "contracts",
    "contract",
    "use",
    "combined",
    "like",
    "colocation",
    "storage",
    "data",
    "loads",
    "computing",
    "capabilities",
    "storage",
    "capabilities",
    "also",
    "evm",
    "compatible",
    "said",
    "super",
    "excited",
    "kinds",
    "use",
    "cases",
    "going",
    "see",
    "come",
    "project",
    "well",
    "follow",
    "along",
    "website",
    "well",
    "hopefully",
    "given",
    "tools",
    "need",
    "get",
    "started",
    "ipfs",
    "file",
    "coin",
    "need",
    "resources",
    "want",
    "get",
    "involved",
    "proto",
    "school",
    "interactive",
    "tutorials",
    "decentralized",
    "web",
    "protocols",
    "also",
    "nft",
    "school",
    "dot",
    "dev",
    "join",
    "hackathon",
    "check",
    "page",
    "latest",
    "hackathons",
    "involved",
    "really",
    "want",
    "dig",
    "deep",
    "build",
    "tooling",
    "ipfs",
    "file",
    "coin",
    "build",
    "cool",
    "project",
    "check",
    "grants",
    "options",
    "well",
    "meantime",
    "please",
    "learn",
    "long",
    "build",
    "prosper",
    "learned",
    "ton",
    "section",
    "let",
    "summary",
    "amazing",
    "things",
    "learned",
    "go",
    "typescript",
    "edition",
    "typescript",
    "edition",
    "definitely",
    "little",
    "bit",
    "different",
    "let",
    "talk",
    "alright",
    "first",
    "learned",
    "next",
    "jas",
    "learned",
    "application",
    "using",
    "next",
    "jas",
    "framework",
    "gon",
    "na",
    "allow",
    "us",
    "build",
    "really",
    "powerful",
    "front",
    "ends",
    "full",
    "stack",
    "applications",
    "really",
    "easily",
    "learned",
    "layout",
    "next",
    "js",
    "project",
    "add",
    "components",
    "components",
    "folder",
    "basically",
    "minimalistic",
    "blocks",
    "javascript",
    "html",
    "use",
    "modularize",
    "create",
    "website",
    "components",
    "constants",
    "folder",
    "put",
    "constant",
    "variables",
    "node",
    "modules",
    "node",
    "modules",
    "folders",
    "happens",
    "export",
    "code",
    "static",
    "example",
    "pages",
    "going",
    "basically",
    "routes",
    "different",
    "pages",
    "website",
    "everything",
    "goes",
    "public",
    "public",
    "stuff",
    "styles",
    "css",
    "styling",
    "application",
    "basic",
    "files",
    "pages",
    "section",
    "app",
    "surrounded",
    "notification",
    "provider",
    "morales",
    "provider",
    "components",
    "run",
    "app",
    "pages",
    "run",
    "app",
    "kind",
    "considered",
    "entry",
    "point",
    "entire",
    "application",
    "morales",
    "provider",
    "wrapped",
    "around",
    "notifications",
    "component",
    "means",
    "pass",
    "parameters",
    "components",
    "lottery",
    "know",
    "chain",
    "id",
    "header",
    "going",
    "pass",
    "morales",
    "provider",
    "morales",
    "provider",
    "going",
    "pass",
    "back",
    "lottery",
    "entrance",
    "saw",
    "manual",
    "header",
    "way",
    "connect",
    "button",
    "works",
    "behind",
    "scenes",
    "local",
    "storage",
    "storing",
    "whether",
    "actually",
    "connected",
    "learned",
    "use",
    "effect",
    "state",
    "different",
    "hooks",
    "front",
    "ends",
    "one",
    "main",
    "reasons",
    "want",
    "hooks",
    "want",
    "want",
    "websites",
    "rerender",
    "stuff",
    "changes",
    "want",
    "components",
    "able",
    "talk",
    "state",
    "blockchain",
    "incredibly",
    "powerful",
    "building",
    "react",
    "applications",
    "use",
    "effect",
    "one",
    "popular",
    "ones",
    "dependency",
    "array",
    "function",
    "inside",
    "use",
    "effect",
    "run",
    "anytime",
    "something",
    "renders",
    "blank",
    "dependency",
    "array",
    "means",
    "run",
    "load",
    "dependencies",
    "array",
    "run",
    "time",
    "variables",
    "change",
    "also",
    "learned",
    "use",
    "state",
    "hook",
    "really",
    "similar",
    "saying",
    "like",
    "let",
    "variable",
    "equals",
    "also",
    "comes",
    "rendering",
    "ability",
    "comes",
    "nice",
    "abilities",
    "really",
    "discuss",
    "learned",
    "call",
    "different",
    "contract",
    "functions",
    "mirallas",
    "sending",
    "transactions",
    "also",
    "calling",
    "data",
    "morales",
    "smart",
    "enough",
    "know",
    "sees",
    "get",
    "entrance",
    "fee",
    "going",
    "view",
    "function",
    "going",
    "transaction",
    "tell",
    "difference",
    "two",
    "one",
    "going",
    "populate",
    "metamask",
    "pop",
    "one",
    "going",
    "return",
    "kind",
    "normally",
    "like",
    "view",
    "function",
    "actually",
    "use",
    "syntax",
    "sending",
    "transactions",
    "calling",
    "view",
    "functions",
    "contract",
    "added",
    "button",
    "calling",
    "one",
    "morales",
    "pieces",
    "onsuccess",
    "section",
    "transaction",
    "completed",
    "update",
    "ui",
    "add",
    "little",
    "pop",
    "notifications",
    "learned",
    "deploy",
    "code",
    "directly",
    "ipfs",
    "use",
    "ipfs",
    "hash",
    "interact",
    "see",
    "code",
    "also",
    "learned",
    "fleek",
    "fleek",
    "automatically",
    "deploys",
    "ipfs",
    "whenever",
    "git",
    "push",
    "github",
    "repository",
    "makes",
    "continuously",
    "updating",
    "websites",
    "much",
    "easier",
    "also",
    "gives",
    "us",
    "regular",
    "canonical",
    "url",
    "well",
    "finally",
    "learned",
    "ipfs",
    "decentralized",
    "database",
    "storage",
    "might",
    "asking",
    "okay",
    "well",
    "store",
    "data",
    "website",
    "aetherium",
    "polygon",
    "avalanche",
    "etc",
    "answer",
    "get",
    "incredibly",
    "expensive",
    "storing",
    "data",
    "storing",
    "ton",
    "data",
    "blockchain",
    "costs",
    "ton",
    "gas",
    "whereas",
    "much",
    "cheaper",
    "alternative",
    "aetherium",
    "avalanche",
    "smart",
    "contract",
    "platforms",
    "really",
    "meant",
    "data",
    "storage",
    "layers",
    "meant",
    "logic",
    "layers",
    "right",
    "decentralized",
    "logic",
    "decentralized",
    "smart",
    "contracts",
    "oftentimes",
    "yes",
    "gon",
    "na",
    "store",
    "data",
    "ton",
    "data",
    "better",
    "solutions",
    "different",
    "solutions",
    "storing",
    "data",
    "like",
    "ipfs",
    "filecoin",
    "incredibly",
    "proud",
    "made",
    "far",
    "made",
    "really",
    "solid",
    "app",
    "really",
    "solid",
    "front",
    "end",
    "application",
    "learned",
    "really",
    "easily",
    "add",
    "functionality",
    "interacting",
    "smart",
    "contracts",
    "give",
    "pat",
    "back",
    "maybe",
    "even",
    "tweet",
    "share",
    "really",
    "cool",
    "application",
    "friends",
    "family",
    "take",
    "break",
    "see",
    "next",
    "lesson",
    "right",
    "welcome",
    "one",
    "fastest",
    "lessons",
    "going",
    "lesson",
    "going",
    "talk",
    "hardhat",
    "starter",
    "kit",
    "really",
    "quickly",
    "going",
    "walk",
    "show",
    "use",
    "learned",
    "lot",
    "projects",
    "learned",
    "lot",
    "different",
    "repos",
    "learnt",
    "basics",
    "smart",
    "contracts",
    "learned",
    "lot",
    "front",
    "end",
    "well",
    "building",
    "front",
    "ends",
    "applications",
    "smart",
    "contract",
    "kit",
    "repo",
    "comes",
    "packed",
    "ton",
    "starter",
    "kits",
    "use",
    "start",
    "deploying",
    "projects",
    "right",
    "away",
    "see",
    "hard",
    "hat",
    "starter",
    "kit",
    "easily",
    "one",
    "popular",
    "ones",
    "stars",
    "forks",
    "smart",
    "contract",
    "kit",
    "repo",
    "actually",
    "comes",
    "ton",
    "frameworks",
    "like",
    "want",
    "work",
    "swana",
    "want",
    "work",
    "python",
    "brownie",
    "want",
    "work",
    "foundry",
    "truffle",
    "really",
    "framework",
    "get",
    "started",
    "clone",
    "one",
    "repos",
    "work",
    "one",
    "repos",
    "build",
    "project",
    "get",
    "started",
    "right",
    "away",
    "going",
    "show",
    "use",
    "hard",
    "hat",
    "starter",
    "kit",
    "grab",
    "repo",
    "go",
    "already",
    "boilerplate",
    "code",
    "boilerplate",
    "really",
    "good",
    "looking",
    "repo",
    "start",
    "projects",
    "come",
    "smart",
    "contract",
    "kit",
    "hard",
    "hat",
    "starter",
    "kit",
    "repo",
    "working",
    "github",
    "go",
    "ahead",
    "use",
    "template",
    "automatically",
    "generate",
    "new",
    "github",
    "repo",
    "hardest",
    "starter",
    "kit",
    "let",
    "go",
    "ahead",
    "click",
    "use",
    "template",
    "come",
    "name",
    "call",
    "make",
    "public",
    "create",
    "repository",
    "template",
    "generate",
    "repository",
    "automatically",
    "repo",
    "get",
    "started",
    "working",
    "get",
    "started",
    "working",
    "want",
    "click",
    "use",
    "template",
    "button",
    "also",
    "copy",
    "url",
    "code",
    "editor",
    "git",
    "clone",
    "paste",
    "going",
    "get",
    "clone",
    "going",
    "get",
    "clone",
    "repo",
    "created",
    "come",
    "back",
    "git",
    "clone",
    "hard",
    "hat",
    "play",
    "fcc",
    "hard",
    "hat",
    "starter",
    "kit",
    "going",
    "cd",
    "head",
    "play",
    "fcc",
    "open",
    "new",
    "code",
    "editor",
    "awesome",
    "see",
    "repo",
    "comes",
    "packed",
    "ton",
    "contracts",
    "deployments",
    "scripts",
    "tasks",
    "test",
    "everything",
    "name",
    "really",
    "get",
    "started",
    "professional",
    "environment",
    "look",
    "contract",
    "section",
    "see",
    "couple",
    "sample",
    "contracts",
    "contract",
    "making",
    "api",
    "call",
    "chain",
    "link",
    "node",
    "working",
    "keepers",
    "working",
    "price",
    "feeds",
    "working",
    "chain",
    "link",
    "vir",
    "fe",
    "two",
    "got",
    "test",
    "contracts",
    "additionally",
    "fuzzing",
    "folder",
    "talk",
    "talk",
    "much",
    "later",
    "section",
    "course",
    "deployed",
    "scripts",
    "start",
    "deploying",
    "mocks",
    "deploy",
    "one",
    "contracts",
    "sample",
    "script",
    "read",
    "price",
    "one",
    "contracts",
    "whole",
    "bunch",
    "sample",
    "tasks",
    "time",
    "recording",
    "instead",
    "scripts",
    "repo",
    "uses",
    "tasks",
    "little",
    "bit",
    "interchangeable",
    "course",
    "unit",
    "tests",
    "staging",
    "tests",
    "well",
    "go",
    "take",
    "look",
    "repo",
    "run",
    "familiar",
    "commands",
    "yarn",
    "course",
    "install",
    "packages",
    "everything",
    "going",
    "get",
    "lost",
    "always",
    "come",
    "back",
    "repo",
    "follow",
    "along",
    "getting",
    "started",
    "quickstart",
    "git",
    "clone",
    "yarn",
    "gon",
    "na",
    "go",
    "ahead",
    "run",
    "yarn",
    "hard",
    "hat",
    "test",
    "hard",
    "hat",
    "starter",
    "kit",
    "repo",
    "consistently",
    "date",
    "last",
    "push",
    "days",
    "ago",
    "constantly",
    "best",
    "practices",
    "building",
    "smart",
    "contracts",
    "really",
    "professional",
    "coding",
    "environment",
    "got",
    "really",
    "cute",
    "logo",
    "installed",
    "dependencies",
    "run",
    "yarn",
    "art",
    "hath",
    "test",
    "run",
    "tests",
    "test",
    "folder",
    "also",
    "show",
    "us",
    "interact",
    "use",
    "different",
    "contracts",
    "console",
    "dot",
    "log",
    "see",
    "actually",
    "going",
    "tests",
    "actually",
    "run",
    "look",
    "hardhead",
    "got",
    "really",
    "familiar",
    "code",
    "imports",
    "top",
    "grab",
    "whole",
    "bunch",
    "environment",
    "variables",
    "got",
    "ether",
    "scan",
    "plugin",
    "got",
    "gas",
    "reporter",
    "contract",
    "sizer",
    "plugin",
    "tells",
    "big",
    "contracts",
    "named",
    "accounts",
    "different",
    "solidity",
    "versions",
    "mocha",
    "timeout",
    "well",
    "course",
    "yarn",
    "hard",
    "hat",
    "node",
    "run",
    "deploy",
    "scripts",
    "spin",
    "new",
    "note",
    "us",
    "mock",
    "chainlink",
    "tokens",
    "mock",
    "oracle",
    "mock",
    "aggregators",
    "mock",
    "vrf",
    "us",
    "go",
    "ahead",
    "interact",
    "course",
    "hard",
    "hat",
    "console",
    "dash",
    "dash",
    "network",
    "localhost",
    "begin",
    "interacting",
    "contracts",
    "localhost",
    "kind",
    "follow",
    "along",
    "price",
    "feed",
    "example",
    "const",
    "price",
    "consumer",
    "b",
    "three",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "price",
    "consumer",
    "v",
    "three",
    "await",
    "price",
    "consumer",
    "b",
    "three",
    "dot",
    "get",
    "latest",
    "price",
    "let",
    "wrap",
    "string",
    "see",
    "mock",
    "latest",
    "price",
    "contract",
    "uses",
    "channeling",
    "price",
    "feeds",
    "interact",
    "contracts",
    "work",
    "mocks",
    "well",
    "want",
    "deploy",
    "actual",
    "test",
    "net",
    "like",
    "rinckey",
    "main",
    "net",
    "pop",
    "dot",
    "env",
    "file",
    "close",
    "node",
    "terminal",
    "run",
    "yarn",
    "hardhat",
    "hh",
    "deploy",
    "add",
    "whatever",
    "tags",
    "want",
    "let",
    "deploy",
    "price",
    "feed",
    "contract",
    "go",
    "price",
    "feed",
    "deploy",
    "scroll",
    "get",
    "tags",
    "okay",
    "great",
    "use",
    "feed",
    "tag",
    "dash",
    "tags",
    "feeds",
    "dash",
    "feed",
    "dash",
    "dash",
    "network",
    "brings",
    "beam",
    "waiting",
    "deploy",
    "go",
    "back",
    "actual",
    "repo",
    "make",
    "sure",
    "follow",
    "along",
    "documentation",
    "quickstart",
    "usage",
    "everything",
    "make",
    "sure",
    "working",
    "date",
    "version",
    "even",
    "documentation",
    "running",
    "local",
    "network",
    "using",
    "test",
    "net",
    "live",
    "network",
    "working",
    "aetherium",
    "rigby",
    "adding",
    "private",
    "keys",
    "dotting",
    "envies",
    "stuff",
    "already",
    "know",
    "forking",
    "learn",
    "little",
    "bit",
    "later",
    "auto",
    "funding",
    "contracts",
    "working",
    "chain",
    "link",
    "api",
    "running",
    "tests",
    "additionally",
    "run",
    "tests",
    "parallel",
    "adding",
    "dash",
    "dash",
    "parallel",
    "flag",
    "tests",
    "interact",
    "deployed",
    "contracts",
    "different",
    "tasks",
    "created",
    "linting",
    "code",
    "formatting",
    "estimated",
    "gas",
    "code",
    "coverage",
    "fuzzing",
    "talk",
    "later",
    "contributions",
    "prs",
    "issues",
    "always",
    "welcome",
    "outputted",
    "even",
    "verified",
    "verification",
    "turned",
    "get",
    "little",
    "task",
    "run",
    "go",
    "ahead",
    "read",
    "price",
    "feed",
    "interact",
    "contract",
    "copy",
    "task",
    "yarn",
    "hardhat",
    "read",
    "price",
    "feed",
    "since",
    "task",
    "contract",
    "contract",
    "data",
    "deployed",
    "network",
    "rigby",
    "get",
    "reading",
    "data",
    "price",
    "feed",
    "consumer",
    "contract",
    "network",
    "rigby",
    "price",
    "course",
    "saying",
    "price",
    "aetherium",
    "eight",
    "decimal",
    "places",
    "ever",
    "looking",
    "start",
    "new",
    "project",
    "want",
    "boilerplate",
    "code",
    "hard",
    "hat",
    "starter",
    "kit",
    "great",
    "place",
    "get",
    "started",
    "course",
    "open",
    "get",
    "pod",
    "want",
    "test",
    "try",
    "get",
    "pot",
    "cloud",
    "shell",
    "lesson",
    "fast",
    "fastest",
    "lesson",
    "ever",
    "want",
    "little",
    "extra",
    "learnings",
    "would",
    "fork",
    "would",
    "clone",
    "would",
    "use",
    "template",
    "try",
    "play",
    "around",
    "repo",
    "little",
    "bit",
    "see",
    "recognize",
    "see",
    "recognize",
    "keep",
    "prepped",
    "mind",
    "later",
    "questions",
    "course",
    "everyone",
    "typescript",
    "course",
    "typescript",
    "version",
    "well",
    "get",
    "cloned",
    "nice",
    "blue",
    "logo",
    "show",
    "little",
    "bit",
    "different",
    "said",
    "use",
    "repo",
    "fun",
    "let",
    "get",
    "lesson",
    "alright",
    "moving",
    "hard",
    "hat",
    "erc",
    "20s",
    "section",
    "going",
    "learn",
    "create",
    "erc",
    "20",
    "eip",
    "20",
    "b",
    "e",
    "p",
    "20",
    "aep",
    "20",
    "tokens",
    "blockchain",
    "understand",
    "erc",
    "20",
    "even",
    "one",
    "tokens",
    "first",
    "need",
    "understand",
    "erc",
    "also",
    "eip",
    "aetherium",
    "avalanche",
    "finance",
    "polygon",
    "blockchains",
    "called",
    "improvement",
    "proposals",
    "aetherium",
    "called",
    "aetherium",
    "improvement",
    "proposals",
    "e",
    "ips",
    "people",
    "would",
    "come",
    "ideas",
    "improve",
    "aetherium",
    "improve",
    "layer",
    "ones",
    "like",
    "polygon",
    "matic",
    "avalanche",
    "etc",
    "github",
    "open",
    "source",
    "repository",
    "add",
    "new",
    "eip",
    "add",
    "new",
    "improvement",
    "ideas",
    "make",
    "protocols",
    "better",
    "improvements",
    "really",
    "anything",
    "anything",
    "core",
    "blockchain",
    "update",
    "standard",
    "going",
    "best",
    "practice",
    "entire",
    "community",
    "adopt",
    "eip",
    "gets",
    "enough",
    "insight",
    "also",
    "create",
    "e",
    "rc",
    "stands",
    "aetherium",
    "request",
    "comments",
    "eip",
    "theory",
    "improvement",
    "proposals",
    "erc",
    "theory",
    "request",
    "comments",
    "like",
    "bp",
    "pep",
    "know",
    "etc",
    "different",
    "blockchains",
    "improvement",
    "proposals",
    "request",
    "comments",
    "different",
    "tags",
    "numbered",
    "chronologically",
    "something",
    "like",
    "erc",
    "20",
    "going",
    "20th",
    "erc",
    "slash",
    "eip",
    "erc",
    "efps",
    "share",
    "number",
    "websites",
    "like",
    "eip",
    "keep",
    "track",
    "new",
    "aetherium",
    "improvement",
    "proposals",
    "actually",
    "see",
    "real",
    "time",
    "go",
    "process",
    "adopted",
    "community",
    "one",
    "e",
    "ips",
    "erc",
    "going",
    "erc",
    "20",
    "token",
    "standard",
    "smart",
    "contracts",
    "improvement",
    "proposal",
    "talks",
    "actually",
    "create",
    "tokens",
    "create",
    "smart",
    "contract",
    "tokens",
    "made",
    "video",
    "recently",
    "github",
    "repo",
    "associated",
    "course",
    "going",
    "sub",
    "lesson",
    "going",
    "watch",
    "quick",
    "video",
    "explains",
    "different",
    "tokens",
    "first",
    "let",
    "define",
    "even",
    "erc",
    "20s",
    "erc",
    "20s",
    "tokens",
    "deployed",
    "chain",
    "using",
    "called",
    "erc",
    "20",
    "token",
    "standard",
    "read",
    "year",
    "20",
    "token",
    "standard",
    "link",
    "description",
    "well",
    "basically",
    "smart",
    "contract",
    "actually",
    "represents",
    "token",
    "token",
    "smart",
    "contract",
    "really",
    "cool",
    "tether",
    "chainlink",
    "unique",
    "token",
    "dye",
    "examples",
    "erc",
    "20s",
    "technically",
    "chain",
    "link",
    "erc",
    "677",
    "upgrades",
    "erc",
    "20",
    "tokens",
    "take",
    "still",
    "backwards",
    "compatible",
    "erc",
    "20s",
    "basically",
    "think",
    "erc",
    "20s",
    "little",
    "additional",
    "functionality",
    "would",
    "even",
    "care",
    "want",
    "make",
    "erc",
    "20",
    "well",
    "lot",
    "really",
    "cool",
    "stuff",
    "make",
    "governance",
    "token",
    "secure",
    "underlying",
    "network",
    "create",
    "type",
    "synthetic",
    "acid",
    "really",
    "anything",
    "else",
    "case",
    "build",
    "one",
    "erc",
    "20s",
    "build",
    "one",
    "tokens",
    "well",
    "build",
    "smart",
    "contract",
    "follows",
    "token",
    "standard",
    "build",
    "smart",
    "contract",
    "functions",
    "name",
    "function",
    "symbol",
    "function",
    "decimals",
    "function",
    "etc",
    "functions",
    "need",
    "able",
    "transfer",
    "need",
    "able",
    "get",
    "balance",
    "etc",
    "want",
    "check",
    "improvements",
    "still",
    "erc",
    "20",
    "compatible",
    "like",
    "erc",
    "677",
    "erc",
    "definitely",
    "go",
    "check",
    "build",
    "one",
    "instead",
    "right",
    "awesome",
    "know",
    "one",
    "erc",
    "20s",
    "go",
    "ahead",
    "create",
    "per",
    "usual",
    "github",
    "repo",
    "associated",
    "course",
    "code",
    "available",
    "want",
    "get",
    "clone",
    "going",
    "another",
    "one",
    "quicker",
    "lessons",
    "terminal",
    "vs",
    "code",
    "going",
    "make",
    "new",
    "directory",
    "going",
    "call",
    "hard",
    "hat",
    "erc",
    "20",
    "fcc",
    "cd",
    "hard",
    "hat",
    "c",
    "20",
    "sec",
    "going",
    "create",
    "new",
    "hard",
    "hat",
    "project",
    "exact",
    "way",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "tab",
    "let",
    "actually",
    "open",
    "vs",
    "code",
    "file",
    "open",
    "folder",
    "okay",
    "project",
    "let",
    "create",
    "new",
    "hard",
    "hat",
    "project",
    "yarn",
    "art",
    "hats",
    "create",
    "empty",
    "hard",
    "hat",
    "dot",
    "config",
    "dot",
    "j",
    "great",
    "got",
    "empty",
    "hard",
    "hat",
    "dot",
    "config",
    "dot",
    "j",
    "want",
    "copy",
    "paste",
    "hard",
    "hat",
    "dot",
    "config",
    "previous",
    "projects",
    "want",
    "copy",
    "paste",
    "heart",
    "dot",
    "config",
    "dot",
    "emv",
    "file",
    "know",
    "going",
    "need",
    "feel",
    "free",
    "going",
    "update",
    "add",
    "rest",
    "stuff",
    "later",
    "heard",
    "eip",
    "20",
    "erc",
    "needs",
    "functions",
    "token",
    "standard",
    "transfer",
    "tokens",
    "stuff",
    "erc",
    "20",
    "contract",
    "really",
    "keeping",
    "track",
    "much",
    "token",
    "people",
    "smart",
    "contract",
    "kind",
    "weird",
    "way",
    "keeps",
    "track",
    "get",
    "started",
    "going",
    "kind",
    "manual",
    "way",
    "first",
    "going",
    "create",
    "manual",
    "token",
    "really",
    "minimalistic",
    "one",
    "anyways",
    "let",
    "create",
    "new",
    "folder",
    "contracts",
    "create",
    "new",
    "file",
    "called",
    "manual",
    "token",
    "dot",
    "soul",
    "yes",
    "going",
    "show",
    "kind",
    "hard",
    "way",
    "make",
    "show",
    "much",
    "easier",
    "way",
    "make",
    "get",
    "started",
    "usual",
    "pragma",
    "solidity",
    "carrot",
    "zero",
    "point",
    "even",
    "spdx",
    "license",
    "identifier",
    "mit",
    "contract",
    "manual",
    "token",
    "boom",
    "let",
    "get",
    "started",
    "main",
    "reason",
    "token",
    "smart",
    "contract",
    "works",
    "balances",
    "mapping",
    "mapping",
    "addresses",
    "usually",
    "public",
    "called",
    "balance",
    "mapping",
    "obviously",
    "key",
    "going",
    "every",
    "single",
    "address",
    "planet",
    "much",
    "basically",
    "transfer",
    "tokens",
    "transfer",
    "tokens",
    "basically",
    "subtract",
    "address",
    "amount",
    "add",
    "address",
    "really",
    "minimalistic",
    "way",
    "implement",
    "would",
    "create",
    "transfer",
    "function",
    "first",
    "create",
    "function",
    "going",
    "call",
    "underscore",
    "transfer",
    "address",
    "address",
    "fifth",
    "sixth",
    "mount",
    "probably",
    "put",
    "requirements",
    "probably",
    "omit",
    "events",
    "let",
    "make",
    "public",
    "well",
    "really",
    "end",
    "day",
    "gon",
    "na",
    "say",
    "balance",
    "minus",
    "equals",
    "value",
    "saying",
    "bounce",
    "equals",
    "bounce",
    "minus",
    "value",
    "excuse",
    "amount",
    "gon",
    "na",
    "say",
    "balance",
    "two",
    "excuse",
    "plus",
    "equals",
    "saying",
    "know",
    "balance",
    "two",
    "plus",
    "technically",
    "really",
    "need",
    "right",
    "probably",
    "want",
    "asserts",
    "ins",
    "requires",
    "make",
    "sure",
    "numbers",
    "make",
    "sense",
    "really",
    "end",
    "day",
    "function",
    "transfer",
    "works",
    "caller",
    "sending",
    "money",
    "directly",
    "another",
    "address",
    "happens",
    "want",
    "allow",
    "smart",
    "contract",
    "work",
    "token",
    "want",
    "allow",
    "somebody",
    "else",
    "work",
    "token",
    "know",
    "maybe",
    "deposit",
    "protocol",
    "functionality",
    "approved",
    "function",
    "approve",
    "contract",
    "function",
    "transfer",
    "function",
    "know",
    "implement",
    "taking",
    "funds",
    "user",
    "public",
    "well",
    "top",
    "type",
    "allowances",
    "mapping",
    "tell",
    "allowed",
    "address",
    "take",
    "much",
    "token",
    "sounds",
    "little",
    "confusing",
    "let",
    "add",
    "mapping",
    "mapping",
    "addresses",
    "mapping",
    "addresses",
    "amount",
    "unit",
    "tivity",
    "sex",
    "public",
    "allowance",
    "gon",
    "na",
    "say",
    "address",
    "patrick",
    "going",
    "allow",
    "address",
    "patrick",
    "brother",
    "use",
    "25",
    "tokens",
    "allowance",
    "works",
    "transfer",
    "transfer",
    "check",
    "allowance",
    "mapping",
    "save",
    "hmm",
    "patrick",
    "give",
    "authorization",
    "borrow",
    "tokens",
    "oh",
    "yes",
    "okay",
    "let",
    "transfer",
    "going",
    "copy",
    "paste",
    "implementation",
    "check",
    "github",
    "repo",
    "well",
    "would",
    "look",
    "something",
    "like",
    "check",
    "allowed",
    "amounts",
    "update",
    "allowance",
    "transfer",
    "tokens",
    "main",
    "functions",
    "need",
    "approved",
    "function",
    "obviously",
    "update",
    "allowances",
    "usually",
    "like",
    "un",
    "256",
    "initial",
    "supply",
    "like",
    "many",
    "tokens",
    "starting",
    "many",
    "tokens",
    "total",
    "sometimes",
    "add",
    "mint",
    "function",
    "add",
    "functions",
    "basically",
    "start",
    "see",
    "contract",
    "ramping",
    "one",
    "thing",
    "could",
    "could",
    "go",
    "ahead",
    "go",
    "spec",
    "line",
    "line",
    "know",
    "build",
    "token",
    "ourself",
    "might",
    "look",
    "something",
    "like",
    "copy",
    "pasted",
    "code",
    "github",
    "repo",
    "go",
    "contracts",
    "manual",
    "token",
    "copy",
    "paste",
    "code",
    "contract",
    "token",
    "contract",
    "might",
    "look",
    "like",
    "okay",
    "functions",
    "arrays",
    "stuff",
    "see",
    "constructor",
    "taking",
    "initial",
    "supply",
    "token",
    "name",
    "token",
    "symbol",
    "name",
    "know",
    "might",
    "something",
    "like",
    "dy",
    "token",
    "symbol",
    "might",
    "something",
    "like",
    "dy",
    "easily",
    "recognizable",
    "name",
    "token",
    "coding",
    "scratch",
    "like",
    "definitely",
    "something",
    "engineers",
    "know",
    "probably",
    "really",
    "annoying",
    "actually",
    "want",
    "instead",
    "well",
    "use",
    "open",
    "source",
    "library",
    "like",
    "open",
    "zeppelin",
    "actually",
    "get",
    "boilerplate",
    "code",
    "work",
    "open",
    "zeppelin",
    "almost",
    "considered",
    "kind",
    "standard",
    "library",
    "solidity",
    "list",
    "open",
    "source",
    "contracts",
    "anybody",
    "use",
    "import",
    "contracts",
    "ton",
    "boilerplate",
    "manually",
    "write",
    "everything",
    "see",
    "code",
    "github",
    "repository",
    "open",
    "zeppelin",
    "slash",
    "open",
    "zeppelin",
    "contracts",
    "going",
    "using",
    "lot",
    "moving",
    "forward",
    "example",
    "see",
    "kind",
    "left",
    "side",
    "documentation",
    "tokens",
    "section",
    "erc",
    "20",
    "one",
    "tokens",
    "standards",
    "scroll",
    "even",
    "minimalistic",
    "examples",
    "create",
    "erc",
    "20",
    "token",
    "going",
    "using",
    "build",
    "token",
    "see",
    "much",
    "smaller",
    "much",
    "less",
    "code",
    "maintain",
    "let",
    "go",
    "ahead",
    "let",
    "use",
    "open",
    "zeppelin",
    "us",
    "create",
    "token",
    "let",
    "create",
    "new",
    "file",
    "call",
    "token",
    "dot",
    "soul",
    "going",
    "create",
    "token",
    "let",
    "spdx",
    "license",
    "identifier",
    "mit",
    "pragma",
    "solidity",
    "carrot",
    "zero",
    "point",
    "contract",
    "token",
    "going",
    "going",
    "import",
    "openzeppelin",
    "contracts",
    "hard",
    "hat",
    "project",
    "going",
    "way",
    "chain",
    "link",
    "packages",
    "future",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "open",
    "zeppelin",
    "slash",
    "contracts",
    "going",
    "add",
    "open",
    "zeppelin",
    "slash",
    "contracts",
    "npm",
    "package",
    "project",
    "one",
    "code",
    "pieces",
    "erc",
    "20",
    "contract",
    "use",
    "token",
    "inherit",
    "functions",
    "go",
    "ahead",
    "import",
    "import",
    "openzeppelin",
    "slash",
    "contracts",
    "slash",
    "tokens",
    "slash",
    "erc",
    "20",
    "slash",
    "erc",
    "20",
    "ditzel",
    "importing",
    "like",
    "token",
    "inherited",
    "say",
    "contract",
    "token",
    "erc",
    "boom",
    "like",
    "token",
    "almost",
    "done",
    "might",
    "get",
    "little",
    "wiggle",
    "little",
    "red",
    "line",
    "saying",
    "token",
    "marked",
    "abstract",
    "look",
    "erc",
    "20",
    "dot",
    "soul",
    "openzeppelin",
    "see",
    "constructor",
    "order",
    "us",
    "inherit",
    "c",
    "20",
    "token",
    "use",
    "erc",
    "20",
    "constructor",
    "need",
    "give",
    "token",
    "name",
    "symbol",
    "say",
    "constructor",
    "leave",
    "blank",
    "right",
    "next",
    "constructor",
    "add",
    "erc",
    "20",
    "constructor",
    "name",
    "token",
    "symbol",
    "ot",
    "erc",
    "20",
    "token",
    "also",
    "comes",
    "something",
    "called",
    "mint",
    "functionality",
    "essentially",
    "function",
    "allows",
    "us",
    "create",
    "tokens",
    "right",
    "right",
    "actually",
    "get",
    "initialized",
    "zero",
    "tokens",
    "right",
    "nobody",
    "actually",
    "allowed",
    "tokens",
    "want",
    "mint",
    "initial",
    "amount",
    "tokens",
    "owns",
    "tokens",
    "start",
    "usually",
    "see",
    "see",
    "mint",
    "function",
    "like",
    "passed",
    "message",
    "sender",
    "whoever",
    "deploys",
    "contract",
    "tokens",
    "start",
    "give",
    "like",
    "soul",
    "supply",
    "could",
    "like",
    "went",
    "56",
    "initial",
    "supply",
    "equals",
    "like",
    "seven",
    "whatever",
    "instead",
    "common",
    "practice",
    "add",
    "constructor",
    "256",
    "initial",
    "supply",
    "like",
    "know",
    "solidity",
    "decimals",
    "work",
    "great",
    "say",
    "initial",
    "supply",
    "50",
    "50",
    "going",
    "like",
    "50",
    "way",
    "erc",
    "20s",
    "come",
    "decimals",
    "decimals",
    "function",
    "tells",
    "us",
    "many",
    "decimals",
    "expect",
    "erc",
    "default",
    "override",
    "function",
    "want",
    "different",
    "amount",
    "decimals",
    "know",
    "default",
    "want",
    "deploy",
    "50",
    "might",
    "want",
    "initial",
    "supply",
    "50",
    "e",
    "also",
    "say",
    "like",
    "50",
    "times",
    "10",
    "raise",
    "18th",
    "whatever",
    "want",
    "code",
    "deploy",
    "actually",
    "going",
    "finish",
    "project",
    "everything",
    "else",
    "would",
    "already",
    "done",
    "need",
    "make",
    "deploy",
    "script",
    "write",
    "tests",
    "really",
    "right",
    "skills",
    "need",
    "write",
    "deploy",
    "script",
    "optionally",
    "write",
    "tests",
    "project",
    "highly",
    "encourage",
    "pause",
    "video",
    "try",
    "write",
    "deploy",
    "script",
    "even",
    "want",
    "write",
    "tests",
    "always",
    "refer",
    "back",
    "github",
    "repo",
    "associated",
    "lesson",
    "deploy",
    "script",
    "also",
    "typescript",
    "edition",
    "well",
    "additionally",
    "going",
    "go",
    "course",
    "get",
    "totally",
    "lost",
    "ton",
    "instructions",
    "help",
    "learn",
    "help",
    "work",
    "specific",
    "repository",
    "let",
    "quick",
    "review",
    "learned",
    "erc",
    "20",
    "tokens",
    "eip",
    "20",
    "tokens",
    "b",
    "p",
    "p",
    "p",
    "dash",
    "improvement",
    "proposals",
    "known",
    "token",
    "standard",
    "token",
    "standard",
    "tokens",
    "chain",
    "actually",
    "tokens",
    "smart",
    "contracts",
    "tokens",
    "obviously",
    "different",
    "layer",
    "one",
    "tokens",
    "like",
    "aetherium",
    "polygon",
    "avalanche",
    "arbitration",
    "going",
    "smart",
    "contracts",
    "going",
    "blockchain",
    "native",
    "tokens",
    "hear",
    "refer",
    "blockchain",
    "native",
    "tokens",
    "lot",
    "versus",
    "tokens",
    "erc",
    "20",
    "smart",
    "contract",
    "tokens",
    "smart",
    "contracts",
    "kind",
    "combination",
    "functions",
    "represent",
    "many",
    "tokens",
    "address",
    "create",
    "token",
    "specifications",
    "added",
    "use",
    "openzeppelin",
    "import",
    "token",
    "another",
    "popular",
    "repo",
    "like",
    "open",
    "zeppelin",
    "going",
    "one",
    "rory",
    "capital",
    "called",
    "soulmate",
    "aimed",
    "standard",
    "libraries",
    "solidity",
    "one",
    "important",
    "things",
    "keep",
    "mind",
    "tokens",
    "allowance",
    "mapping",
    "allow",
    "addresses",
    "access",
    "tokens",
    "move",
    "tokens",
    "around",
    "important",
    "especially",
    "get",
    "later",
    "working",
    "defy",
    "want",
    "give",
    "smart",
    "contract",
    "access",
    "tokens",
    "input",
    "defy",
    "protocol",
    "also",
    "little",
    "bit",
    "tricky",
    "want",
    "make",
    "sure",
    "allowing",
    "malicious",
    "contracts",
    "interact",
    "tokens",
    "also",
    "see",
    "start",
    "interact",
    "tokens",
    "contract",
    "interact",
    "tokens",
    "need",
    "approve",
    "interact",
    "tokens",
    "token",
    "wizard",
    "deploy",
    "tokens",
    "take",
    "break",
    "get",
    "coffee",
    "see",
    "next",
    "one",
    "right",
    "welcome",
    "next",
    "session",
    "going",
    "learning",
    "defy",
    "session",
    "going",
    "programmatic",
    "going",
    "programmatically",
    "interacting",
    "defy",
    "protocol",
    "incredibly",
    "excited",
    "session",
    "defi",
    "one",
    "best",
    "use",
    "cases",
    "smart",
    "contracts",
    "one",
    "use",
    "cases",
    "specifically",
    "excited",
    "mentioned",
    "past",
    "defy",
    "stands",
    "decentralized",
    "finance",
    "left",
    "links",
    "github",
    "repository",
    "learn",
    "defy",
    "one",
    "main",
    "reasons",
    "excited",
    "defy",
    "move",
    "away",
    "area",
    "traditional",
    "agreement",
    "smart",
    "contracts",
    "removing",
    "centralized",
    "entity",
    "financial",
    "world",
    "especially",
    "financial",
    "institutions",
    "conflict",
    "interest",
    "business",
    "make",
    "money",
    "keep",
    "money",
    "safe",
    "make",
    "us",
    "money",
    "want",
    "work",
    "system",
    "everything",
    "transparent",
    "especially",
    "comes",
    "financial",
    "services",
    "want",
    "move",
    "world",
    "smart",
    "contracts",
    "especially",
    "comes",
    "money",
    "mind",
    "defi",
    "going",
    "industry",
    "affects",
    "masses",
    "quickest",
    "much",
    "fair",
    "much",
    "better",
    "decentralized",
    "finance",
    "centralized",
    "finance",
    "moment",
    "rates",
    "yields",
    "interest",
    "gain",
    "defy",
    "much",
    "better",
    "centralized",
    "finance",
    "remember",
    "go",
    "away",
    "centralized",
    "protocols",
    "saying",
    "hey",
    "trust",
    "us",
    "give",
    "access",
    "markets",
    "hate",
    "trust",
    "us",
    "put",
    "money",
    "us",
    "keep",
    "money",
    "safe",
    "cryptographic",
    "math",
    "base",
    "guarantees",
    "instead",
    "trust",
    "companies",
    "entities",
    "want",
    "additionally",
    "oracle",
    "networks",
    "get",
    "better",
    "oracle",
    "networks",
    "work",
    "smart",
    "contract",
    "platforms",
    "like",
    "aetherium",
    "like",
    "polygon",
    "like",
    "arbitrage",
    "data",
    "complex",
    "financial",
    "products",
    "one",
    "reasons",
    "crazy",
    "excited",
    "defy",
    "look",
    "little",
    "chart",
    "right",
    "shows",
    "different",
    "markets",
    "size",
    "image",
    "little",
    "bit",
    "outdated",
    "still",
    "shows",
    "relative",
    "sizes",
    "different",
    "industries",
    "defy",
    "right",
    "200",
    "billion",
    "market",
    "200",
    "billion",
    "locked",
    "defy",
    "industry",
    "show",
    "minute",
    "cryptocurrency",
    "actually",
    "time",
    "recording",
    "360",
    "billion",
    "actually",
    "like",
    "trillion",
    "lot",
    "still",
    "massive",
    "subset",
    "areas",
    "like",
    "gold",
    "10",
    "trillion",
    "market",
    "stock",
    "market",
    "almost",
    "100",
    "trillion",
    "global",
    "real",
    "estate",
    "almost",
    "300",
    "trillion",
    "derivatives",
    "quadrillion",
    "dollars",
    "fbi",
    "super",
    "tiny",
    "tiny",
    "tiny",
    "tiny",
    "subset",
    "right",
    "mind",
    "areas",
    "landscaped",
    "defy",
    "ramping",
    "getting",
    "gon",
    "na",
    "us",
    "make",
    "protocols",
    "make",
    "much",
    "easier",
    "people",
    "get",
    "space",
    "finances",
    "going",
    "fair",
    "accountable",
    "transparent",
    "better",
    "yield",
    "rates",
    "actually",
    "see",
    "pretty",
    "good",
    "summary",
    "going",
    "defy",
    "site",
    "called",
    "defy",
    "llama",
    "shows",
    "total",
    "value",
    "locked",
    "different",
    "decentralized",
    "protocols",
    "see",
    "lot",
    "across",
    "multiple",
    "chains",
    "right",
    "lot",
    "evm",
    "compatible",
    "chains",
    "aetherium",
    "biden",
    "smart",
    "chain",
    "avalanche",
    "fanta",
    "drawn",
    "polygon",
    "evm",
    "compatible",
    "blockchains",
    "see",
    "exactly",
    "much",
    "money",
    "independent",
    "users",
    "put",
    "protocols",
    "time",
    "recording",
    "ave",
    "number",
    "one",
    "protocol",
    "total",
    "value",
    "locked",
    "22",
    "billion",
    "locked",
    "ave",
    "protocol",
    "going",
    "going",
    "today",
    "ave",
    "borrowing",
    "lending",
    "protocol",
    "allows",
    "us",
    "borrow",
    "lend",
    "cryptocurrencies",
    "actually",
    "put",
    "token",
    "collateral",
    "kind",
    "similar",
    "like",
    "putting",
    "money",
    "bank",
    "earn",
    "yields",
    "people",
    "borrowing",
    "collateral",
    "us",
    "almost",
    "exactly",
    "bank",
    "except",
    "fact",
    "called",
    "noncustodial",
    "ave",
    "team",
    "never",
    "touches",
    "money",
    "nobody",
    "ever",
    "touches",
    "money",
    "smart",
    "contract",
    "programmatic",
    "code",
    "rest",
    "assured",
    "one",
    "going",
    "run",
    "money",
    "one",
    "going",
    "anything",
    "bad",
    "also",
    "gain",
    "higher",
    "yields",
    "borrowing",
    "lending",
    "critical",
    "piece",
    "creating",
    "really",
    "interesting",
    "financial",
    "applications",
    "want",
    "short",
    "sell",
    "something",
    "want",
    "leverage",
    "asset",
    "want",
    "want",
    "complex",
    "financial",
    "products",
    "need",
    "borrowing",
    "lending",
    "lot",
    "typical",
    "fintech",
    "financial",
    "technology",
    "finance",
    "terms",
    "apply",
    "course",
    "going",
    "deep",
    "dive",
    "exactly",
    "financial",
    "products",
    "work",
    "also",
    "going",
    "course",
    "finance",
    "want",
    "learn",
    "finance",
    "leave",
    "number",
    "links",
    "github",
    "repo",
    "associated",
    "course",
    "learn",
    "finance",
    "become",
    "like",
    "call",
    "defy",
    "quant",
    "quantitative",
    "defy",
    "engineer",
    "excited",
    "defi",
    "quants",
    "get",
    "space",
    "alright",
    "ave",
    "application",
    "testament",
    "dot",
    "ave",
    "dot",
    "markets",
    "testament",
    "avi",
    "everything",
    "going",
    "going",
    "work",
    "main",
    "net",
    "well",
    "going",
    "use",
    "test",
    "net",
    "actually",
    "obvious",
    "older",
    "ui",
    "new",
    "website",
    "looks",
    "even",
    "better",
    "going",
    "going",
    "lot",
    "basic",
    "functionality",
    "depositing",
    "taking",
    "loan",
    "potentially",
    "even",
    "shorting",
    "asset",
    "want",
    "recommend",
    "going",
    "site",
    "might",
    "work",
    "covid",
    "way",
    "expect",
    "sit",
    "back",
    "relax",
    "watch",
    "order",
    "us",
    "actually",
    "short",
    "sell",
    "margin",
    "trade",
    "first",
    "thing",
    "going",
    "need",
    "actually",
    "deposit",
    "collateral",
    "need",
    "deposit",
    "collateral",
    "order",
    "borrow",
    "way",
    "never",
    "repay",
    "back",
    "loan",
    "took",
    "amount",
    "borrowed",
    "ave",
    "go",
    "ahead",
    "take",
    "collateral",
    "put",
    "called",
    "liquidation",
    "call",
    "actually",
    "little",
    "bit",
    "safer",
    "short",
    "selling",
    "traditional",
    "markets",
    "collateral",
    "less",
    "much",
    "borrowed",
    "immediately",
    "get",
    "liquidated",
    "still",
    "lose",
    "bunch",
    "money",
    "like",
    "get",
    "liquidated",
    "want",
    "gon",
    "na",
    "scroll",
    "aetherium",
    "going",
    "connect",
    "wallet",
    "going",
    "move",
    "covid",
    "test",
    "network",
    "browser",
    "gon",
    "na",
    "go",
    "deposit",
    "piece",
    "already",
    "shows",
    "balance",
    "point",
    "two",
    "covid",
    "eath",
    "let",
    "deposit",
    "gon",
    "na",
    "hit",
    "deposit",
    "metamask",
    "pop",
    "confirm",
    "goes",
    "means",
    "deposited",
    "go",
    "dashboard",
    "see",
    "eath",
    "point",
    "one",
    "eath",
    "got",
    "api",
    "kind",
    "like",
    "percentage",
    "return",
    "gon",
    "na",
    "get",
    "back",
    "depositing",
    "yes",
    "use",
    "collateral",
    "marked",
    "yes",
    "exactly",
    "going",
    "says",
    "nothing",
    "borrowed",
    "yep",
    "go",
    "ahead",
    "hit",
    "borrow",
    "button",
    "gon",
    "na",
    "get",
    "brought",
    "borrower",
    "screen",
    "going",
    "choose",
    "asset",
    "want",
    "borrow",
    "whenever",
    "borrow",
    "one",
    "api",
    "right",
    "percentage",
    "course",
    "year",
    "gon",
    "na",
    "pay",
    "order",
    "actually",
    "borrow",
    "asset",
    "stable",
    "one",
    "means",
    "always",
    "variable",
    "means",
    "actually",
    "changes",
    "depending",
    "kind",
    "much",
    "liquidity",
    "protocol",
    "kind",
    "pick",
    "one",
    "want",
    "stable",
    "always",
    "gon",
    "na",
    "4",
    "variable",
    "going",
    "little",
    "bit",
    "riskier",
    "might",
    "get",
    "lower",
    "fee",
    "actually",
    "going",
    "borrow",
    "dye",
    "right",
    "dye",
    "stable",
    "coin",
    "worth",
    "1",
    "way",
    "could",
    "call",
    "taking",
    "margin",
    "taking",
    "dye",
    "borrow",
    "another",
    "way",
    "could",
    "say",
    "shorting",
    "dye",
    "kind",
    "funny",
    "think",
    "get",
    "choose",
    "much",
    "want",
    "borrow",
    "see",
    "thing",
    "called",
    "health",
    "factor",
    "going",
    "zoom",
    "little",
    "bit",
    "thing",
    "called",
    "health",
    "factor",
    "scroll",
    "thing",
    "health",
    "factor",
    "close",
    "liquidated",
    "remember",
    "said",
    "get",
    "liquidated",
    "health",
    "factor",
    "represents",
    "close",
    "getting",
    "liquidated",
    "means",
    "means",
    "close",
    "always",
    "saying",
    "know",
    "fu",
    "taking",
    "funds",
    "goes",
    "one",
    "time",
    "somebody",
    "liquidate",
    "take",
    "lot",
    "deposit",
    "put",
    "math",
    "behind",
    "actually",
    "health",
    "factor",
    "actually",
    "head",
    "ave",
    "documentation",
    "leave",
    "link",
    "description",
    "kind",
    "read",
    "health",
    "factor",
    "going",
    "borrow",
    "29",
    "die",
    "buying",
    "borrowing",
    "basically",
    "30",
    "bucks",
    "gon",
    "na",
    "hit",
    "continue",
    "gon",
    "na",
    "variable",
    "zoom",
    "back",
    "continue",
    "gon",
    "na",
    "borrow",
    "metamath",
    "pops",
    "confirm",
    "transaction",
    "pending",
    "gon",
    "na",
    "go",
    "dashboard",
    "see",
    "kind",
    "new",
    "balance",
    "right",
    "see",
    "point",
    "one",
    "eath",
    "deposited",
    "29",
    "die",
    "see",
    "health",
    "factor",
    "even",
    "click",
    "little",
    "button",
    "saying",
    "hey",
    "represents",
    "close",
    "liquidated",
    "see",
    "value",
    "eath",
    "worth",
    "like",
    "200",
    "die",
    "worth",
    "30",
    "bucks",
    "good",
    "pretty",
    "healthy",
    "order",
    "avi",
    "understand",
    "price",
    "underlying",
    "collateral",
    "knows",
    "much",
    "lend",
    "obviously",
    "another",
    "one",
    "protocols",
    "uses",
    "changing",
    "price",
    "feeds",
    "price",
    "underlying",
    "collateral",
    "many",
    "billion",
    "dollar",
    "defy",
    "protocols",
    "use",
    "chain",
    "link",
    "back",
    "end",
    "pricing",
    "mechanisms",
    "essentially",
    "could",
    "repay",
    "debts",
    "could",
    "borrow",
    "assets",
    "could",
    "swap",
    "assets",
    "around",
    "interest",
    "return",
    "get",
    "onto",
    "pausing",
    "assets",
    "amazing",
    "learned",
    "little",
    "bit",
    "use",
    "ui",
    "hosted",
    "ipfs",
    "way",
    "let",
    "go",
    "ahead",
    "let",
    "learn",
    "even",
    "programmatically",
    "become",
    "defy",
    "quanta",
    "engineers",
    "like",
    "said",
    "going",
    "working",
    "ave",
    "v",
    "two",
    "protocol",
    "want",
    "try",
    "v3",
    "absolutely",
    "go",
    "play",
    "right",
    "still",
    "money",
    "locked",
    "great",
    "v3",
    "protocol",
    "obviously",
    "latest",
    "addition",
    "gon",
    "na",
    "flipping",
    "back",
    "forth",
    "documentation",
    "code",
    "base",
    "recommend",
    "documentation",
    "well",
    "per",
    "usual",
    "code",
    "going",
    "working",
    "hard",
    "hat",
    "defi",
    "free",
    "code",
    "camp",
    "repository",
    "let",
    "jump",
    "vs",
    "code",
    "folder",
    "course",
    "going",
    "make",
    "new",
    "folder",
    "going",
    "call",
    "hard",
    "hat",
    "defy",
    "fcc",
    "going",
    "cd",
    "going",
    "open",
    "code",
    "period",
    "also",
    "per",
    "usual",
    "file",
    "open",
    "open",
    "folder",
    "new",
    "project",
    "going",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "hat",
    "going",
    "add",
    "hard",
    "hat",
    "start",
    "minimalistic",
    "hard",
    "hat",
    "project",
    "starting",
    "minimalistic",
    "hard",
    "hat",
    "projects",
    "usually",
    "copy",
    "paste",
    "another",
    "folder",
    "used",
    "hard",
    "hat",
    "starter",
    "kit",
    "saw",
    "smart",
    "contract",
    "code",
    "repo",
    "whatever",
    "works",
    "best",
    "get",
    "project",
    "started",
    "use",
    "got",
    "run",
    "yarn",
    "hardhat",
    "create",
    "empty",
    "save",
    "us",
    "boilerplate",
    "time",
    "going",
    "copy",
    "paste",
    "hard",
    "past",
    "project",
    "one",
    "make",
    "go",
    "boilerplate",
    "setup",
    "also",
    "going",
    "copy",
    "paste",
    "line",
    "heart",
    "smart",
    "contract",
    "lottery",
    "want",
    "use",
    "package",
    "json",
    "yarn",
    "dot",
    "lock",
    "install",
    "dependencies",
    "absolutely",
    "going",
    "paste",
    "run",
    "going",
    "copy",
    "paste",
    "prettier",
    "files",
    "javascript",
    "formatted",
    "way",
    "want",
    "okay",
    "great",
    "minimalistic",
    "project",
    "spun",
    "let",
    "go",
    "ahead",
    "get",
    "started",
    "learning",
    "interact",
    "avi",
    "protocol",
    "let",
    "make",
    "quick",
    "readme",
    "talk",
    "want",
    "able",
    "first",
    "going",
    "want",
    "able",
    "learn",
    "programmatically",
    "deposit",
    "collateral",
    "stopped",
    "right",
    "might",
    "enough",
    "able",
    "programmatically",
    "deposit",
    "collateral",
    "earn",
    "yield",
    "earn",
    "percentage",
    "return",
    "deposited",
    "collateral",
    "accomplishing",
    "already",
    "feat",
    "let",
    "say",
    "want",
    "go",
    "one",
    "step",
    "want",
    "get",
    "interesting",
    "financial",
    "products",
    "deposit",
    "collateral",
    "going",
    "learn",
    "programmatically",
    "borrow",
    "asset",
    "deposited",
    "collateral",
    "going",
    "eath",
    "slash",
    "wrapped",
    "eath",
    "talk",
    "little",
    "bit",
    "going",
    "borrow",
    "another",
    "asset",
    "demo",
    "going",
    "dye",
    "reason",
    "using",
    "dye",
    "dye",
    "known",
    "stable",
    "coin",
    "dye",
    "actually",
    "token",
    "blockchain",
    "created",
    "maker",
    "dow",
    "price",
    "dye",
    "token",
    "always",
    "pegged",
    "1",
    "putting",
    "eath",
    "collateral",
    "borrowing",
    "cryptocurrency",
    "us",
    "dollars",
    "sort",
    "borrowing",
    "token",
    "represents",
    "us",
    "dollar",
    "repay",
    "repay",
    "almost",
    "everything",
    "back",
    "see",
    "repay",
    "everything",
    "back",
    "minute",
    "one",
    "protocol",
    "want",
    "talk",
    "quickly",
    "uniswap",
    "protocol",
    "uniswap",
    "protocol",
    "become",
    "trading",
    "decentralized",
    "application",
    "allows",
    "us",
    "trade",
    "assets",
    "tokens",
    "something",
    "called",
    "automated",
    "market",
    "maker",
    "ends",
    "basically",
    "decentralized",
    "stock",
    "exchange",
    "tokens",
    "tokens",
    "exactly",
    "stocks",
    "different",
    "looking",
    "get",
    "assets",
    "like",
    "wrapped",
    "aetherium",
    "dye",
    "link",
    "token",
    "main",
    "net",
    "oftentimes",
    "going",
    "use",
    "one",
    "decentralized",
    "exchanges",
    "obviously",
    "decentralized",
    "exchanges",
    "much",
    "fairer",
    "everything",
    "happens",
    "transparent",
    "much",
    "fairer",
    "centralized",
    "finance",
    "everything",
    "happens",
    "transparent",
    "see",
    "everything",
    "going",
    "chain",
    "absolutely",
    "phenomenal",
    "let",
    "go",
    "ahead",
    "get",
    "started",
    "let",
    "create",
    "scripts",
    "folder",
    "project",
    "actually",
    "going",
    "create",
    "contracts",
    "going",
    "learn",
    "interact",
    "protocols",
    "want",
    "learn",
    "build",
    "protocols",
    "end",
    "session",
    "give",
    "ton",
    "links",
    "special",
    "guest",
    "explain",
    "different",
    "ways",
    "learn",
    "build",
    "decentralized",
    "protocols",
    "although",
    "already",
    "built",
    "one",
    "decentralized",
    "lottery",
    "fantastic",
    "let",
    "create",
    "scripts",
    "things",
    "deposit",
    "collateral",
    "borrow",
    "repay",
    "put",
    "new",
    "script",
    "called",
    "ave",
    "borrow",
    "dot",
    "jas",
    "gon",
    "na",
    "everything",
    "since",
    "script",
    "going",
    "setup",
    "seen",
    "right",
    "gon",
    "na",
    "main",
    "thing",
    "around",
    "async",
    "function",
    "main",
    "imports",
    "course",
    "top",
    "something",
    "important",
    "note",
    "go",
    "avi",
    "go",
    "protocol",
    "kind",
    "read",
    "docs",
    "eventually",
    "would",
    "find",
    "protocol",
    "treats",
    "everything",
    "erc",
    "20",
    "token",
    "know",
    "aetherium",
    "native",
    "blockchain",
    "token",
    "using",
    "erc",
    "20",
    "token",
    "reason",
    "treats",
    "everything",
    "like",
    "erc",
    "20",
    "token",
    "much",
    "easier",
    "right",
    "everything",
    "using",
    "erc",
    "20",
    "token",
    "standard",
    "much",
    "easier",
    "send",
    "interact",
    "stuff",
    "lot",
    "protocols",
    "go",
    "deposit",
    "aetherium",
    "polygon",
    "arbitrary",
    "marks",
    "cetera",
    "actually",
    "happens",
    "send",
    "aetherium",
    "like",
    "called",
    "web",
    "gateway",
    "swaps",
    "weath",
    "stands",
    "rapt",
    "ether",
    "basically",
    "aetherium",
    "erc",
    "20",
    "token",
    "contract",
    "want",
    "going",
    "thing",
    "gon",
    "na",
    "skip",
    "kind",
    "using",
    "web",
    "gateway",
    "get",
    "web",
    "token",
    "use",
    "collateral",
    "script",
    "tag",
    "going",
    "make",
    "another",
    "file",
    "called",
    "get",
    "actually",
    "going",
    "go",
    "ahead",
    "going",
    "build",
    "script",
    "deposit",
    "token",
    "web",
    "token",
    "okay",
    "let",
    "create",
    "script",
    "link",
    "web",
    "token",
    "ether",
    "scan",
    "main",
    "net",
    "github",
    "repo",
    "way",
    "works",
    "actually",
    "deposit",
    "aetherium",
    "return",
    "give",
    "web",
    "token",
    "rigby",
    "right",
    "deposit",
    "go",
    "ahead",
    "write",
    "connected",
    "ether",
    "scan",
    "go",
    "ahead",
    "write",
    "transaction",
    "gon",
    "na",
    "drink",
    "pee",
    "really",
    "care",
    "actual",
    "contract",
    "real",
    "money",
    "going",
    "deposit",
    "eath",
    "transaction",
    "goes",
    "copy",
    "contract",
    "address",
    "add",
    "token",
    "metamask",
    "way",
    "added",
    "link",
    "import",
    "tokens",
    "paste",
    "address",
    "add",
    "custom",
    "token",
    "import",
    "tokens",
    "see",
    "wet",
    "token",
    "deposited",
    "plus",
    "shows",
    "twice",
    "well",
    "recording",
    "um",
    "get",
    "wet",
    "token",
    "contract",
    "anytime",
    "want",
    "call",
    "withdrawal",
    "function",
    "withdraw",
    "aetherium",
    "called",
    "burn",
    "wet",
    "token",
    "swap",
    "back",
    "weath",
    "aetherium",
    "hit",
    "withdraw",
    "boom",
    "basically",
    "swap",
    "back",
    "contract",
    "right",
    "holding",
    "aetherium",
    "token",
    "pretty",
    "cool",
    "right",
    "get",
    "wet",
    "function",
    "going",
    "add",
    "main",
    "thing",
    "going",
    "create",
    "get",
    "west",
    "kind",
    "module",
    "going",
    "import",
    "ave",
    "borrow",
    "going",
    "main",
    "thing",
    "see",
    "instead",
    "going",
    "create",
    "async",
    "function",
    "called",
    "get",
    "wes",
    "going",
    "export",
    "module",
    "dot",
    "exports",
    "equals",
    "get",
    "weath",
    "going",
    "export",
    "avi",
    "borrow",
    "use",
    "get",
    "west",
    "script",
    "creating",
    "right",
    "let",
    "add",
    "let",
    "go",
    "ahead",
    "well",
    "order",
    "interact",
    "contract",
    "going",
    "need",
    "account",
    "const",
    "deployer",
    "equals",
    "await",
    "get",
    "named",
    "accounts",
    "per",
    "usual",
    "const",
    "get",
    "name",
    "accounts",
    "equals",
    "require",
    "hardhat",
    "vs",
    "code",
    "automatically",
    "imported",
    "thank",
    "vs",
    "code",
    "want",
    "call",
    "deposit",
    "function",
    "west",
    "contract",
    "call",
    "deposit",
    "function",
    "west",
    "contract",
    "well",
    "call",
    "contract",
    "well",
    "need",
    "need",
    "abi",
    "need",
    "contract",
    "address",
    "drill",
    "always",
    "going",
    "api",
    "contract",
    "address",
    "interact",
    "contract",
    "know",
    "give",
    "know",
    "give",
    "project",
    "whole",
    "contract",
    "get",
    "api",
    "also",
    "know",
    "interface",
    "good",
    "wo",
    "give",
    "us",
    "functionality",
    "tell",
    "give",
    "us",
    "api",
    "tell",
    "ethers",
    "functions",
    "use",
    "going",
    "create",
    "new",
    "folder",
    "create",
    "contracts",
    "folder",
    "going",
    "create",
    "new",
    "folder",
    "inside",
    "called",
    "interfaces",
    "going",
    "create",
    "web",
    "interface",
    "web",
    "interface",
    "going",
    "really",
    "similar",
    "erc",
    "20",
    "interface",
    "want",
    "go",
    "ahead",
    "try",
    "add",
    "feel",
    "free",
    "come",
    "github",
    "repo",
    "associated",
    "lesson",
    "come",
    "ios",
    "copy",
    "paste",
    "right",
    "see",
    "functions",
    "exactly",
    "erc",
    "20",
    "allowance",
    "approved",
    "balance",
    "decimals",
    "named",
    "blah",
    "blah",
    "additional",
    "deposit",
    "withdrawal",
    "functions",
    "going",
    "copy",
    "move",
    "back",
    "hard",
    "hat",
    "project",
    "create",
    "new",
    "file",
    "call",
    "left",
    "dot",
    "soul",
    "note",
    "oftentimes",
    "good",
    "best",
    "practice",
    "interfaces",
    "start",
    "eyes",
    "know",
    "interface",
    "paste",
    "order",
    "compile",
    "need",
    "use",
    "point",
    "19",
    "version",
    "solidity",
    "come",
    "solidity",
    "compilers",
    "version",
    "whatever",
    "versions",
    "add",
    "replace",
    "going",
    "put",
    "comma",
    "version",
    "point",
    "save",
    "order",
    "make",
    "sure",
    "get",
    "api",
    "yarn",
    "hardhats",
    "compile",
    "hh",
    "compiled",
    "great",
    "compile",
    "interface",
    "abi",
    "interact",
    "abi",
    "little",
    "check",
    "mark",
    "let",
    "go",
    "ahead",
    "get",
    "contract",
    "address",
    "reasons",
    "going",
    "learn",
    "soon",
    "actually",
    "going",
    "work",
    "main",
    "net",
    "set",
    "getting",
    "rinkeby",
    "test",
    "address",
    "going",
    "look",
    "main",
    "net",
    "going",
    "find",
    "web",
    "token",
    "main",
    "net",
    "going",
    "copy",
    "address",
    "main",
    "net",
    "grab",
    "address",
    "github",
    "repo",
    "associated",
    "lesson",
    "well",
    "gon",
    "na",
    "say",
    "check",
    "little",
    "check",
    "mark",
    "paste",
    "address",
    "abi",
    "compiled",
    "interface",
    "contract",
    "address",
    "main",
    "net",
    "let",
    "go",
    "ahead",
    "create",
    "contract",
    "say",
    "const",
    "ios",
    "equals",
    "await",
    "ethers",
    "dot",
    "need",
    "import",
    "ethers",
    "hardhead",
    "well",
    "ethers",
    "dot",
    "get",
    "contract",
    "another",
    "one",
    "functions",
    "ethers",
    "allows",
    "us",
    "get",
    "contract",
    "specific",
    "address",
    "say",
    "get",
    "contract",
    "app",
    "use",
    "ios",
    "abi",
    "hard",
    "code",
    "address",
    "connect",
    "deployer",
    "saying",
    "let",
    "get",
    "web",
    "contract",
    "abi",
    "ios",
    "address",
    "connected",
    "deployer",
    "could",
    "go",
    "ahead",
    "run",
    "await",
    "ai",
    "dot",
    "deposit",
    "set",
    "value",
    "amounts",
    "let",
    "go",
    "ahead",
    "top",
    "say",
    "const",
    "amount",
    "equals",
    "let",
    "ethers",
    "dot",
    "utils",
    "dot",
    "parse",
    "ether",
    "deposit",
    "say",
    "const",
    "tx",
    "equals",
    "await",
    "tx",
    "dot",
    "wait",
    "one",
    "wait",
    "one",
    "block",
    "go",
    "get",
    "balance",
    "say",
    "const",
    "balance",
    "equals",
    "await",
    "balance",
    "employer",
    "going",
    "call",
    "balance",
    "function",
    "iweb",
    "erc",
    "20",
    "token",
    "console",
    "dot",
    "log",
    "got",
    "west",
    "string",
    "using",
    "main",
    "net",
    "address",
    "gon",
    "na",
    "say",
    "okay",
    "going",
    "deposit",
    "amount",
    "going",
    "wait",
    "gon",
    "na",
    "go",
    "ahead",
    "get",
    "balance",
    "right",
    "depositing",
    "aetherium",
    "get",
    "erc",
    "20",
    "version",
    "aetherium",
    "west",
    "token",
    "might",
    "thinking",
    "okay",
    "putting",
    "main",
    "address",
    "let",
    "patrick",
    "slow",
    "let",
    "go",
    "ahead",
    "let",
    "create",
    "mock",
    "web",
    "token",
    "contract",
    "address",
    "let",
    "deploy",
    "mocks",
    "first",
    "go",
    "ahead",
    "use",
    "setup",
    "whole",
    "time",
    "directly",
    "hard",
    "coding",
    "well",
    "alluding",
    "time",
    "another",
    "way",
    "run",
    "tests",
    "smart",
    "contracts",
    "something",
    "called",
    "main",
    "net",
    "forking",
    "actually",
    "something",
    "fork",
    "main",
    "net",
    "run",
    "local",
    "hard",
    "hat",
    "node",
    "pretending",
    "main",
    "net",
    "node",
    "update",
    "hard",
    "head",
    "config",
    "let",
    "talk",
    "forking",
    "minute",
    "left",
    "blockchain",
    "example",
    "blockchain",
    "going",
    "something",
    "similar",
    "test",
    "net",
    "main",
    "net",
    "like",
    "rinkeby",
    "eath",
    "main",
    "net",
    "polygon",
    "etc",
    "going",
    "blockchain",
    "deploy",
    "whole",
    "bunch",
    "blocks",
    "right",
    "huge",
    "chain",
    "work",
    "information",
    "blockchain",
    "public",
    "information",
    "like",
    "block",
    "going",
    "transaction",
    "transaction",
    "transaction",
    "one",
    "blocks",
    "going",
    "whole",
    "bunch",
    "transactions",
    "information",
    "public",
    "blockchain",
    "addition",
    "transactions",
    "going",
    "things",
    "like",
    "price",
    "feed",
    "contracts",
    "going",
    "things",
    "like",
    "ave",
    "contract",
    "web",
    "token",
    "contract",
    "etc",
    "contract",
    "information",
    "public",
    "hypothetically",
    "already",
    "basically",
    "able",
    "copy",
    "local",
    "environment",
    "simulations",
    "exactly",
    "forking",
    "fork",
    "blockchain",
    "literally",
    "takes",
    "copy",
    "existing",
    "blockchain",
    "like",
    "left",
    "brings",
    "local",
    "computer",
    "actually",
    "control",
    "blockchain",
    "running",
    "locally",
    "gon",
    "na",
    "run",
    "local",
    "computer",
    "similar",
    "hard",
    "hat",
    "everything",
    "local",
    "forked",
    "blockchain",
    "going",
    "affect",
    "main",
    "simulated",
    "blockchain",
    "running",
    "local",
    "environment",
    "actually",
    "interact",
    "forking",
    "kind",
    "local",
    "blockchain",
    "resembles",
    "mimics",
    "actual",
    "blockchain",
    "forking",
    "download",
    "entire",
    "blockchain",
    "local",
    "setup",
    "anytime",
    "reference",
    "address",
    "anytime",
    "reference",
    "hey",
    "something",
    "specific",
    "address",
    "make",
    "api",
    "call",
    "aetherium",
    "node",
    "using",
    "alchemy",
    "say",
    "hey",
    "oh",
    "address",
    "return",
    "specific",
    "contract",
    "us",
    "way",
    "download",
    "whole",
    "blockchain",
    "lot",
    "quicker",
    "also",
    "forking",
    "run",
    "tests",
    "run",
    "scripts",
    "everything",
    "might",
    "thinking",
    "wow",
    "patrick",
    "sounds",
    "awesome",
    "well",
    "everything",
    "well",
    "trade",
    "offs",
    "pros",
    "quick",
    "easy",
    "test",
    "resemble",
    "main",
    "net",
    "cons",
    "need",
    "api",
    "ca",
    "everything",
    "locally",
    "contracts",
    "contracts",
    "complex",
    "work",
    "mocks",
    "might",
    "better",
    "using",
    "forked",
    "network",
    "might",
    "good",
    "way",
    "run",
    "tests",
    "might",
    "good",
    "alternate",
    "using",
    "mocks",
    "really",
    "depends",
    "right",
    "right",
    "project",
    "fantastic",
    "tool",
    "especially",
    "something",
    "like",
    "avi",
    "want",
    "quickly",
    "test",
    "things",
    "hard",
    "forking",
    "also",
    "give",
    "us",
    "bunch",
    "fake",
    "accounts",
    "still",
    "get",
    "bunch",
    "fake",
    "accounts",
    "main",
    "net",
    "given",
    "theorem",
    "get",
    "fake",
    "main",
    "net",
    "accounts",
    "forking",
    "rest",
    "going",
    "using",
    "forking",
    "run",
    "scripts",
    "run",
    "tests",
    "want",
    "go",
    "back",
    "try",
    "covid",
    "got",
    "whole",
    "bunch",
    "different",
    "addresses",
    "covid",
    "network",
    "run",
    "scripts",
    "directly",
    "covid",
    "see",
    "transactions",
    "note",
    "using",
    "covid",
    "want",
    "make",
    "sure",
    "using",
    "addresses",
    "avi",
    "docs",
    "covid",
    "network",
    "change",
    "sometimes",
    "great",
    "let",
    "go",
    "ahead",
    "go",
    "rt",
    "head",
    "dot",
    "config",
    "dot",
    "j",
    "go",
    "networks",
    "right",
    "anything",
    "ranking",
    "add",
    "hard",
    "hat",
    "add",
    "little",
    "comma",
    "say",
    "know",
    "chain",
    "id",
    "course",
    "going",
    "add",
    "forking",
    "keyword",
    "say",
    "url",
    "forking",
    "going",
    "main",
    "net",
    "rpc",
    "url",
    "another",
    "reason",
    "using",
    "alchemy",
    "alchemy",
    "fantastic",
    "forked",
    "blockchains",
    "really",
    "good",
    "pieces",
    "come",
    "back",
    "alchemy",
    "dashboard",
    "create",
    "new",
    "app",
    "one",
    "aetherium",
    "main",
    "net",
    "say",
    "forking",
    "chain",
    "say",
    "forking",
    "go",
    "ahead",
    "create",
    "theory",
    "main",
    "net",
    "forking",
    "chain",
    "thing",
    "grab",
    "api",
    "key",
    "come",
    "back",
    "project",
    "create",
    "new",
    "file",
    "create",
    "dot",
    "env",
    "main",
    "net",
    "rpc",
    "url",
    "equals",
    "paste",
    "hardhead",
    "config",
    "going",
    "forking",
    "mainnet",
    "rpc",
    "url",
    "whenever",
    "work",
    "heart",
    "blockchain",
    "let",
    "go",
    "ahead",
    "try",
    "run",
    "get",
    "wet",
    "function",
    "since",
    "forking",
    "blockchain",
    "able",
    "go",
    "ahead",
    "simulate",
    "backing",
    "borrow",
    "go",
    "ahead",
    "const",
    "get",
    "weath",
    "equals",
    "require",
    "pull",
    "script",
    "dot",
    "dot",
    "scripts",
    "slash",
    "get",
    "weath",
    "main",
    "function",
    "run",
    "await",
    "yet",
    "run",
    "script",
    "yarn",
    "hard",
    "hat",
    "run",
    "scripts",
    "default",
    "network",
    "hard",
    "hat",
    "could",
    "either",
    "dash",
    "dash",
    "network",
    "hard",
    "hat",
    "run",
    "remember",
    "since",
    "config",
    "saying",
    "hey",
    "run",
    "hard",
    "hat",
    "chain",
    "use",
    "forking",
    "going",
    "forking",
    "let",
    "go",
    "ahead",
    "run",
    "ran",
    "air",
    "main",
    "net",
    "rpc",
    "url",
    "undefined",
    "well",
    "makes",
    "sense",
    "let",
    "go",
    "ahead",
    "add",
    "consummated",
    "rpc",
    "rel",
    "equals",
    "process",
    "study",
    "v",
    "dot",
    "made",
    "rpc",
    "url",
    "let",
    "try",
    "see",
    "got",
    "know",
    "much",
    "weath",
    "much",
    "wealth",
    "gon",
    "na",
    "1234567",
    "wealth",
    "exactly",
    "want",
    "way",
    "interact",
    "main",
    "net",
    "locally",
    "sounds",
    "kind",
    "crazy",
    "incredibly",
    "powerful",
    "exactly",
    "right",
    "way",
    "fork",
    "main",
    "eath",
    "run",
    "scripts",
    "kind",
    "test",
    "see",
    "simulate",
    "would",
    "like",
    "actually",
    "run",
    "transactions",
    "gon",
    "na",
    "like",
    "get",
    "function",
    "looks",
    "good",
    "obviously",
    "would",
    "still",
    "modularize",
    "put",
    "helper",
    "hardhead",
    "config",
    "going",
    "skip",
    "let",
    "go",
    "head",
    "back",
    "avi",
    "borrow",
    "let",
    "go",
    "ahead",
    "flesh",
    "rest",
    "let",
    "go",
    "ahead",
    "set",
    "rest",
    "boilerplate",
    "const",
    "deployer",
    "need",
    "account",
    "obviously",
    "equals",
    "await",
    "get",
    "named",
    "accounts",
    "const",
    "get",
    "named",
    "accounts",
    "equals",
    "require",
    "want",
    "start",
    "interacting",
    "abi",
    "protocol",
    "well",
    "need",
    "gon",
    "na",
    "need",
    "abi",
    "address",
    "nothing",
    "changes",
    "gon",
    "na",
    "need",
    "two",
    "go",
    "ave",
    "docs",
    "going",
    "v",
    "two",
    "go",
    "ahead",
    "find",
    "contract",
    "address",
    "way",
    "works",
    "actually",
    "contract",
    "point",
    "us",
    "correct",
    "contract",
    "contract",
    "going",
    "lending",
    "lending",
    "pool",
    "actually",
    "contract",
    "get",
    "contract",
    "address",
    "get",
    "lending",
    "pool",
    "address",
    "go",
    "lending",
    "pool",
    "address",
    "provider",
    "contract",
    "tell",
    "us",
    "address",
    "lending",
    "pullets",
    "actually",
    "see",
    "deployed",
    "contract",
    "section",
    "see",
    "address",
    "contract",
    "see",
    "address",
    "main",
    "ones",
    "covid",
    "want",
    "play",
    "covid",
    "see",
    "lending",
    "pool",
    "address",
    "provider",
    "going",
    "located",
    "right",
    "copy",
    "address",
    "take",
    "notes",
    "lending",
    "pool",
    "going",
    "get",
    "lending",
    "pelagics",
    "provider",
    "let",
    "actually",
    "create",
    "function",
    "get",
    "us",
    "lending",
    "pool",
    "address",
    "lending",
    "pool",
    "address",
    "provider",
    "create",
    "async",
    "function",
    "get",
    "lending",
    "pool",
    "order",
    "interact",
    "lending",
    "pool",
    "address",
    "provider",
    "thing",
    "going",
    "need",
    "address",
    "api",
    "address",
    "let",
    "go",
    "ahead",
    "get",
    "api",
    "go",
    "ahead",
    "github",
    "repo",
    "associated",
    "lesson",
    "copy",
    "paste",
    "interfaces",
    "section",
    "could",
    "also",
    "look",
    "directly",
    "blockchain",
    "see",
    "contract",
    "looks",
    "create",
    "interface",
    "go",
    "ahead",
    "use",
    "interface",
    "right",
    "documentation",
    "islanding",
    "palach",
    "provider",
    "going",
    "copy",
    "abi",
    "docs",
    "got",
    "number",
    "options",
    "contracts",
    "interfaces",
    "let",
    "let",
    "stick",
    "iwth",
    "interfaces",
    "let",
    "create",
    "new",
    "file",
    "call",
    "lending",
    "pool",
    "address",
    "provider",
    "dot",
    "soul",
    "paste",
    "see",
    "using",
    "point",
    "sure",
    "hardhead",
    "config",
    "make",
    "sure",
    "create",
    "new",
    "one",
    "point",
    "12",
    "compile",
    "yarn",
    "hardhead",
    "compile",
    "compiles",
    "awesome",
    "abi",
    "get",
    "contract",
    "saying",
    "const",
    "lending",
    "pool",
    "address",
    "provider",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "say",
    "lending",
    "pool",
    "address",
    "oops",
    "address",
    "lending",
    "pool",
    "addresses",
    "excuse",
    "going",
    "update",
    "name",
    "lenny",
    "pull",
    "addresses",
    "provider",
    "islanding",
    "pool",
    "addresses",
    "provider",
    "going",
    "pass",
    "contract",
    "address",
    "got",
    "ovid",
    "docs",
    "paste",
    "going",
    "connect",
    "deployer",
    "going",
    "get",
    "lending",
    "pool",
    "get",
    "past",
    "account",
    "variable",
    "use",
    "account",
    "connect",
    "account",
    "going",
    "pass",
    "course",
    "going",
    "deployer",
    "lending",
    "pool",
    "address",
    "provider",
    "function",
    "called",
    "get",
    "lending",
    "pool",
    "returns",
    "address",
    "lining",
    "pool",
    "going",
    "function",
    "going",
    "call",
    "gon",
    "na",
    "say",
    "const",
    "lending",
    "pool",
    "address",
    "equals",
    "weight",
    "lending",
    "pool",
    "address",
    "says",
    "probes",
    "address",
    "pool",
    "address",
    "says",
    "provider",
    "dot",
    "get",
    "lending",
    "pool",
    "lending",
    "pool",
    "address",
    "contract",
    "give",
    "us",
    "lending",
    "pool",
    "contract",
    "const",
    "lending",
    "pool",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "add",
    "need",
    "thing",
    "interface",
    "interface",
    "address",
    "account",
    "back",
    "docs",
    "grab",
    "lending",
    "pool",
    "copying",
    "like",
    "go",
    "back",
    "contracts",
    "interfaces",
    "new",
    "file",
    "lending",
    "pool",
    "paste",
    "one",
    "scroll",
    "top",
    "noticed",
    "importing",
    "local",
    "places",
    "actually",
    "contracts",
    "area",
    "go",
    "ahead",
    "add",
    "avi",
    "protocol",
    "v2",
    "npm",
    "use",
    "imports",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "apt",
    "slash",
    "proto",
    "call",
    "hyphen",
    "v",
    "two",
    "add",
    "ave",
    "protocol",
    "node",
    "modules",
    "update",
    "imports",
    "point",
    "node",
    "modules",
    "instead",
    "local",
    "files",
    "gon",
    "na",
    "go",
    "ahead",
    "tell",
    "islanding",
    "pledge",
    "provider",
    "ave",
    "slash",
    "protocol",
    "hyphen",
    "v",
    "slash",
    "contracts",
    "slash",
    "interfaces",
    "data",
    "types",
    "dot",
    "soul",
    "gon",
    "na",
    "protocol",
    "hyphen",
    "v2",
    "slash",
    "contracts",
    "slash",
    "proto",
    "call",
    "slash",
    "libraries",
    "slash",
    "types",
    "data",
    "types",
    "make",
    "sure",
    "right",
    "yarn",
    "hardhead",
    "compile",
    "hh",
    "compile",
    "cool",
    "looks",
    "like",
    "right",
    "lending",
    "pool",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "going",
    "using",
    "lending",
    "pool",
    "lend",
    "pool",
    "going",
    "use",
    "lending",
    "pool",
    "address",
    "got",
    "addresses",
    "provider",
    "account",
    "going",
    "deployer",
    "return",
    "lending",
    "pool",
    "want",
    "function",
    "get",
    "lending",
    "pool",
    "backup",
    "main",
    "function",
    "say",
    "const",
    "lending",
    "pool",
    "equals",
    "weight",
    "get",
    "lending",
    "pool",
    "pass",
    "deployer",
    "even",
    "little",
    "console",
    "dot",
    "log",
    "lending",
    "pool",
    "address",
    "lending",
    "pool",
    "dot",
    "address",
    "since",
    "making",
    "forking",
    "kind",
    "keep",
    "running",
    "right",
    "yarn",
    "hardhat",
    "run",
    "scripts",
    "ave",
    "baroda",
    "jas",
    "multiple",
    "artifacts",
    "contract",
    "ii",
    "lending",
    "pool",
    "addresses",
    "provider",
    "node",
    "modules",
    "import",
    "stuff",
    "contracts",
    "already",
    "islanding",
    "pool",
    "addresses",
    "provider",
    "add",
    "ons",
    "slash",
    "contracts",
    "actually",
    "even",
    "need",
    "lending",
    "pool",
    "added",
    "service",
    "provider",
    "go",
    "ahead",
    "delete",
    "time",
    "right",
    "getting",
    "confused",
    "saying",
    "oh",
    "referring",
    "one",
    "downloaded",
    "npm",
    "one",
    "made",
    "one",
    "want",
    "use",
    "make",
    "easier",
    "hardhat",
    "say",
    "okay",
    "well",
    "delete",
    "one",
    "created",
    "use",
    "one",
    "downloaded",
    "good",
    "run",
    "one",
    "pick",
    "one",
    "downloaded",
    "npm",
    "perfect",
    "get",
    "get",
    "weath",
    "printout",
    "get",
    "lending",
    "pool",
    "address",
    "going",
    "actual",
    "lending",
    "pool",
    "address",
    "ether",
    "aetherium",
    "main",
    "net",
    "go",
    "back",
    "ether",
    "scan",
    "copy",
    "address",
    "paste",
    "ether",
    "scan",
    "see",
    "even",
    "labeled",
    "ave",
    "v",
    "two",
    "see",
    "ton",
    "transactions",
    "going",
    "time",
    "ether",
    "scan",
    "hard",
    "time",
    "keeping",
    "transactions",
    "got",
    "lending",
    "pool",
    "address",
    "got",
    "web",
    "token",
    "need",
    "want",
    "deposit",
    "need",
    "order",
    "deposit",
    "token",
    "well",
    "look",
    "deposit",
    "function",
    "avec",
    "github",
    "scroll",
    "see",
    "eventually",
    "call",
    "safe",
    "transfer",
    "basically",
    "going",
    "transfer",
    "function",
    "since",
    "calling",
    "transfer",
    "going",
    "contract",
    "actually",
    "going",
    "pull",
    "money",
    "wallet",
    "order",
    "give",
    "ave",
    "contract",
    "ability",
    "pull",
    "money",
    "wallet",
    "need",
    "going",
    "need",
    "approve",
    "contract",
    "first",
    "even",
    "deposit",
    "gon",
    "na",
    "need",
    "approve",
    "get",
    "web",
    "token",
    "gon",
    "na",
    "get",
    "web",
    "token",
    "first",
    "let",
    "get",
    "web",
    "token",
    "address",
    "say",
    "const",
    "web",
    "token",
    "address",
    "equals",
    "marginalize",
    "get",
    "hard",
    "head",
    "helper",
    "config",
    "hard",
    "code",
    "web",
    "token",
    "contract",
    "address",
    "going",
    "exact",
    "thing",
    "get",
    "web",
    "want",
    "approve",
    "let",
    "write",
    "approved",
    "function",
    "going",
    "use",
    "couple",
    "times",
    "make",
    "async",
    "function",
    "approve",
    "erc",
    "20",
    "take",
    "contract",
    "address",
    "spender",
    "address",
    "going",
    "contract",
    "going",
    "give",
    "approval",
    "spend",
    "token",
    "amount",
    "spend",
    "exactly",
    "much",
    "want",
    "prove",
    "account",
    "say",
    "const",
    "erc",
    "20",
    "token",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "could",
    "say",
    "wef",
    "maybe",
    "want",
    "like",
    "simple",
    "erc",
    "20",
    "token",
    "interface",
    "going",
    "grab",
    "cheating",
    "little",
    "bit",
    "coin",
    "hard",
    "head",
    "defy",
    "fcc",
    "going",
    "go",
    "interfaces",
    "grab",
    "interface",
    "going",
    "copy",
    "paste",
    "new",
    "file",
    "io",
    "erc",
    "20",
    "dot",
    "som",
    "paste",
    "abi",
    "erc",
    "20s",
    "get",
    "contract",
    "erc",
    "20",
    "actually",
    "let",
    "change",
    "name",
    "erc",
    "20",
    "address",
    "going",
    "get",
    "contract",
    "abi",
    "irc",
    "erc",
    "20",
    "contract",
    "address",
    "erc",
    "20",
    "address",
    "connect",
    "account",
    "erc",
    "20",
    "const",
    "tx",
    "going",
    "approve",
    "transaction",
    "weight",
    "erc",
    "20",
    "token",
    "dot",
    "approve",
    "spender",
    "address",
    "amount",
    "amount",
    "spend",
    "wait",
    "tx",
    "dot",
    "wait",
    "one",
    "block",
    "little",
    "console",
    "dot",
    "log",
    "saying",
    "approved",
    "run",
    "function",
    "try",
    "deposit",
    "get",
    "error",
    "saying",
    "hey",
    "token",
    "approved",
    "pretty",
    "common",
    "error",
    "ever",
    "see",
    "know",
    "forgot",
    "approve",
    "token",
    "backup",
    "main",
    "script",
    "go",
    "ahead",
    "run",
    "function",
    "say",
    "await",
    "approve",
    "erc",
    "20",
    "web",
    "token",
    "address",
    "lending",
    "pool",
    "dot",
    "address",
    "want",
    "give",
    "len",
    "pool",
    "approval",
    "pull",
    "web",
    "token",
    "account",
    "give",
    "amount",
    "actually",
    "import",
    "mount",
    "get",
    "weath",
    "well",
    "mount",
    "got",
    "ta",
    "go",
    "back",
    "get",
    "export",
    "actually",
    "import",
    "get",
    "exporting",
    "amount",
    "prove",
    "amount",
    "connect",
    "deployer",
    "obviously",
    "everything",
    "deployer",
    "approve",
    "erc",
    "approve",
    "go",
    "ahead",
    "deposit",
    "say",
    "console",
    "dot",
    "log",
    "depositing",
    "run",
    "await",
    "lending",
    "pool",
    "dot",
    "deposit",
    "look",
    "deposit",
    "function",
    "see",
    "parameters",
    "deposit",
    "function",
    "takes",
    "also",
    "see",
    "ave",
    "v2",
    "documentation",
    "look",
    "forward",
    "posit",
    "see",
    "takes",
    "address",
    "asset",
    "going",
    "deposit",
    "much",
    "asset",
    "going",
    "deposit",
    "address",
    "behalf",
    "going",
    "behalf",
    "ourself",
    "referral",
    "code",
    "right",
    "always",
    "going",
    "zero",
    "referral",
    "code",
    "discontinued",
    "going",
    "deposit",
    "wet",
    "token",
    "address",
    "going",
    "deposit",
    "web",
    "token",
    "going",
    "posit",
    "web",
    "token",
    "going",
    "use",
    "deployer",
    "ash",
    "referral",
    "code",
    "going",
    "zero",
    "little",
    "console",
    "dot",
    "log",
    "positive",
    "let",
    "try",
    "script",
    "let",
    "see",
    "works",
    "going",
    "hit",
    "go",
    "ahead",
    "rerun",
    "script",
    "rerun",
    "command",
    "ran",
    "little",
    "compiling",
    "erc",
    "song",
    "compiled",
    "one",
    "solidity",
    "file",
    "got",
    "bunch",
    "wrapped",
    "aetherium",
    "lending",
    "pool",
    "address",
    "approved",
    "deposit",
    "depositing",
    "deposited",
    "looking",
    "little",
    "readme",
    "get",
    "little",
    "checkmark",
    "done",
    "step",
    "one",
    "deposited",
    "collateral",
    "awesome",
    "collateral",
    "use",
    "borrow",
    "assets",
    "great",
    "deposited",
    "let",
    "go",
    "ahead",
    "learn",
    "borrow",
    "couple",
    "new",
    "lines",
    "say",
    "borrowed",
    "time",
    "order",
    "us",
    "borrow",
    "probably",
    "want",
    "know",
    "much",
    "borrow",
    "want",
    "know",
    "account",
    "right",
    "want",
    "know",
    "much",
    "borrowed",
    "much",
    "collateral",
    "much",
    "borrow",
    "function",
    "avi",
    "comes",
    "called",
    "get",
    "user",
    "account",
    "data",
    "return",
    "user",
    "account",
    "data",
    "across",
    "reserves",
    "much",
    "collateral",
    "total",
    "value",
    "eath",
    "price",
    "available",
    "borrows",
    "eath",
    "current",
    "liquidation",
    "threshold",
    "loan",
    "value",
    "etc",
    "really",
    "important",
    "metrics",
    "one",
    "eath",
    "collateral",
    "mean",
    "borrow",
    "one",
    "eath",
    "assets",
    "one",
    "tokens",
    "different",
    "values",
    "like",
    "loan",
    "value",
    "example",
    "one",
    "eath",
    "borrow",
    "zero",
    "point",
    "75",
    "dye",
    "token",
    "reduce",
    "risk",
    "collateral",
    "reduce",
    "risk",
    "people",
    "enough",
    "collateral",
    "prices",
    "fluctuate",
    "liquidation",
    "threshold",
    "80",
    "one",
    "eath",
    "collateral",
    "point",
    "81",
    "eath",
    "borrowed",
    "get",
    "called",
    "liquidated",
    "liquidation",
    "put",
    "collateral",
    "borrow",
    "amount",
    "borrowed",
    "past",
    "liquidation",
    "threshold",
    "passed",
    "80",
    "depending",
    "different",
    "assets",
    "different",
    "people",
    "called",
    "liquidate",
    "pay",
    "back",
    "loan",
    "took",
    "also",
    "get",
    "buy",
    "collateral",
    "cheaper",
    "price",
    "keeps",
    "ave",
    "platform",
    "solvent",
    "makes",
    "never",
    "borrows",
    "collateral",
    "order",
    "borrow",
    "assets",
    "still",
    "need",
    "collateral",
    "basically",
    "borrowed",
    "money",
    "put",
    "users",
    "take",
    "money",
    "put",
    "return",
    "paying",
    "loans",
    "obviously",
    "want",
    "happen",
    "audit",
    "protocol",
    "programmatically",
    "want",
    "enough",
    "money",
    "incentivize",
    "users",
    "liquidate",
    "case",
    "failures",
    "protocols",
    "come",
    "thing",
    "called",
    "health",
    "factor",
    "health",
    "factor",
    "one",
    "go",
    "ahead",
    "get",
    "liquidated",
    "actual",
    "function",
    "liquidate",
    "somebody",
    "called",
    "liquidation",
    "call",
    "actually",
    "build",
    "bot",
    "liquidate",
    "users",
    "go",
    "insolvent",
    "make",
    "fee",
    "make",
    "reward",
    "actually",
    "protocols",
    "need",
    "stay",
    "solvent",
    "need",
    "enough",
    "money",
    "lend",
    "programmatically",
    "enforced",
    "great",
    "learn",
    "liquidations",
    "liquidation",
    "documentation",
    "get",
    "us",
    "account",
    "data",
    "tell",
    "us",
    "much",
    "collateral",
    "much",
    "debt",
    "much",
    "available",
    "borrow",
    "based",
    "much",
    "collateral",
    "see",
    "current",
    "liquidation",
    "threshold",
    "see",
    "loan",
    "value",
    "see",
    "health",
    "factor",
    "obviously",
    "really",
    "important",
    "health",
    "factor",
    "ever",
    "falls",
    "one",
    "get",
    "liquidated",
    "never",
    "want",
    "hell",
    "factor",
    "fall",
    "one",
    "borrowing",
    "assets",
    "let",
    "create",
    "function",
    "grab",
    "first",
    "let",
    "create",
    "new",
    "function",
    "called",
    "async",
    "function",
    "get",
    "borrow",
    "user",
    "data",
    "pass",
    "lending",
    "pool",
    "contract",
    "pass",
    "lending",
    "pool",
    "contract",
    "account",
    "want",
    "get",
    "data",
    "say",
    "const",
    "actually",
    "pull",
    "values",
    "want",
    "could",
    "pull",
    "total",
    "collateral",
    "eath",
    "total",
    "debt",
    "eath",
    "available",
    "borrow",
    "let",
    "pull",
    "total",
    "collateral",
    "eath",
    "total",
    "debt",
    "available",
    "borrows",
    "equals",
    "await",
    "lending",
    "pool",
    "dot",
    "get",
    "user",
    "account",
    "data",
    "account",
    "even",
    "kind",
    "logged",
    "us",
    "say",
    "console",
    "dot",
    "log",
    "total",
    "collateral",
    "eath",
    "worth",
    "eath",
    "positive",
    "console",
    "log",
    "total",
    "debt",
    "eath",
    "worth",
    "eath",
    "borrowed",
    "console",
    "dot",
    "log",
    "borrow",
    "available",
    "borrows",
    "eath",
    "worth",
    "eath",
    "return",
    "available",
    "borrow",
    "turn",
    "available",
    "borrows",
    "eath",
    "return",
    "total",
    "debt",
    "really",
    "need",
    "return",
    "total",
    "collateral",
    "could",
    "want",
    "really",
    "want",
    "print",
    "back",
    "function",
    "main",
    "function",
    "run",
    "let",
    "going",
    "going",
    "calling",
    "times",
    "available",
    "borrows",
    "eath",
    "total",
    "debt",
    "eath",
    "equals",
    "await",
    "get",
    "borrow",
    "user",
    "data",
    "lending",
    "pool",
    "deployer",
    "run",
    "see",
    "much",
    "actually",
    "borrow",
    "yarn",
    "hard",
    "hat",
    "h",
    "h",
    "run",
    "scripts",
    "work",
    "forked",
    "blockchain",
    "remember",
    "going",
    "little",
    "bit",
    "slower",
    "kind",
    "one",
    "disadvantages",
    "make",
    "api",
    "calls",
    "whenever",
    "want",
    "interact",
    "chains",
    "got",
    "total",
    "collateral",
    "eath",
    "defined",
    "spelt",
    "total",
    "wrong",
    "let",
    "spell",
    "total",
    "correctly",
    "run",
    "okay",
    "great",
    "month",
    "worth",
    "eath",
    "deposited",
    "zero",
    "worth",
    "eath",
    "borrowed",
    "borrowed",
    "anything",
    "borrow",
    "much",
    "worth",
    "eath",
    "remember",
    "amount",
    "borrow",
    "always",
    "going",
    "less",
    "total",
    "amount",
    "deposited",
    "see",
    "lower",
    "number",
    "cool",
    "much",
    "borrow",
    "let",
    "use",
    "go",
    "borrow",
    "time",
    "total",
    "amount",
    "borrow",
    "eighth",
    "gon",
    "na",
    "get",
    "borrow",
    "time",
    "promise",
    "gon",
    "na",
    "get",
    "borrow",
    "time",
    "need",
    "figure",
    "conversion",
    "rate",
    "diets",
    "gon",
    "na",
    "get",
    "much",
    "borrow",
    "eath",
    "want",
    "borrow",
    "dye",
    "much",
    "dye",
    "borrow",
    "based",
    "value",
    "eath",
    "gon",
    "na",
    "get",
    "dye",
    "price",
    "going",
    "well",
    "guessed",
    "going",
    "use",
    "chain",
    "link",
    "price",
    "feeds",
    "look",
    "avi",
    "documentation",
    "find",
    "price",
    "oracle",
    "contract",
    "could",
    "actually",
    "use",
    "right",
    "directly",
    "avi",
    "first",
    "thing",
    "check",
    "chain",
    "link",
    "aggregator",
    "already",
    "know",
    "gon",
    "na",
    "go",
    "ahead",
    "call",
    "directly",
    "chain",
    "link",
    "aggregator",
    "let",
    "create",
    "new",
    "function",
    "function",
    "call",
    "get",
    "dye",
    "price",
    "first",
    "going",
    "need",
    "get",
    "interface",
    "thing",
    "either",
    "go",
    "right",
    "hardhead",
    "defy",
    "grab",
    "interface",
    "right",
    "could",
    "swap",
    "import",
    "chainlink",
    "npm",
    "well",
    "going",
    "go",
    "ahead",
    "copy",
    "paste",
    "new",
    "file",
    "going",
    "ag",
    "reg",
    "gate",
    "tor",
    "v3",
    "interface",
    "dot",
    "saw",
    "worked",
    "many",
    "times",
    "interface",
    "compile",
    "obviously",
    "looking",
    "latest",
    "round",
    "data",
    "give",
    "us",
    "answer",
    "going",
    "price",
    "let",
    "go",
    "ahead",
    "grab",
    "say",
    "const",
    "di",
    "eath",
    "price",
    "feed",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "use",
    "air",
    "greg",
    "tor",
    "v3",
    "interface",
    "get",
    "dye",
    "eath",
    "price",
    "feed",
    "right",
    "chain",
    "link",
    "docs",
    "go",
    "docs",
    "dot",
    "chain",
    "dot",
    "link",
    "uvm",
    "chains",
    "go",
    "contract",
    "addresses",
    "aetherium",
    "look",
    "di",
    "eath",
    "main",
    "net",
    "see",
    "di",
    "eath",
    "right",
    "grab",
    "hard",
    "coding",
    "github",
    "repo",
    "associated",
    "put",
    "little",
    "config",
    "file",
    "go",
    "ahead",
    "hard",
    "coded",
    "one",
    "need",
    "connect",
    "deployer",
    "account",
    "since",
    "going",
    "sending",
    "transactions",
    "going",
    "reading",
    "contract",
    "right",
    "reading",
    "need",
    "signer",
    "sending",
    "signer",
    "say",
    "const",
    "price",
    "equals",
    "weight",
    "dye",
    "eath",
    "price",
    "feed",
    "dot",
    "latest",
    "round",
    "data",
    "latest",
    "round",
    "data",
    "know",
    "going",
    "return",
    "us",
    "huge",
    "thing",
    "want",
    "answer",
    "first",
    "index",
    "another",
    "way",
    "could",
    "could",
    "wrap",
    "whole",
    "thing",
    "returns",
    "gon",
    "na",
    "say",
    "okay",
    "grab",
    "first",
    "index",
    "price",
    "could",
    "little",
    "console",
    "dot",
    "log",
    "dy",
    "eath",
    "price",
    "price",
    "dot",
    "two",
    "like",
    "return",
    "price",
    "go",
    "ahead",
    "run",
    "well",
    "test",
    "hitting",
    "enter",
    "depositing",
    "deposited",
    "much",
    "deposit",
    "nothing",
    "oh",
    "forgot",
    "call",
    "oh",
    "excuse",
    "let",
    "go",
    "let",
    "say",
    "const",
    "dye",
    "price",
    "equals",
    "await",
    "get",
    "dye",
    "price",
    "tada",
    "dye",
    "youth",
    "price",
    "big",
    "number",
    "course",
    "know",
    "going",
    "course",
    "gon",
    "na",
    "3289",
    "di",
    "per",
    "eath",
    "dye",
    "price",
    "figure",
    "much",
    "dye",
    "want",
    "borrow",
    "great",
    "price",
    "let",
    "figure",
    "amount",
    "borrow",
    "dye",
    "amount",
    "borrow",
    "eath",
    "need",
    "convert",
    "die",
    "say",
    "const",
    "amount",
    "die",
    "borrow",
    "equals",
    "available",
    "available",
    "borrows",
    "string",
    "javascript",
    "string",
    "still",
    "math",
    "times",
    "times",
    "reciprocal",
    "die",
    "one",
    "divided",
    "die",
    "number",
    "give",
    "us",
    "amount",
    "die",
    "borrow",
    "want",
    "get",
    "way",
    "print",
    "right",
    "console",
    "dot",
    "log",
    "borrow",
    "run",
    "borrow",
    "amount",
    "die",
    "borrow",
    "way",
    "units",
    "need",
    "way",
    "units",
    "borrow",
    "48",
    "die",
    "based",
    "price",
    "looks",
    "right",
    "get",
    "correct",
    "units",
    "say",
    "const",
    "amount",
    "di",
    "borrow",
    "way",
    "going",
    "equal",
    "ethers",
    "dot",
    "utils",
    "dot",
    "parse",
    "ether",
    "mt",
    "di",
    "string",
    "purely",
    "amount",
    "dye",
    "borrow",
    "right",
    "get",
    "die",
    "want",
    "way",
    "die",
    "token",
    "18",
    "decimal",
    "places",
    "similar",
    "aetherium",
    "need",
    "amount",
    "way",
    "go",
    "ahead",
    "start",
    "actually",
    "borrowing",
    "create",
    "new",
    "function",
    "called",
    "borrow",
    "die",
    "async",
    "function",
    "borrow",
    "die",
    "take",
    "die",
    "address",
    "take",
    "lending",
    "pool",
    "take",
    "amount",
    "die",
    "borrow",
    "weigh",
    "course",
    "take",
    "account",
    "const",
    "borrow",
    "tx",
    "going",
    "weight",
    "lending",
    "pool",
    "dot",
    "borrow",
    "die",
    "address",
    "amount",
    "die",
    "borrow",
    "go",
    "right",
    "documentation",
    "want",
    "takes",
    "address",
    "asset",
    "amount",
    "want",
    "borrow",
    "interest",
    "rate",
    "mode",
    "going",
    "variable",
    "stable",
    "referral",
    "code",
    "address",
    "behalf",
    "going",
    "say",
    "one",
    "interest",
    "rate",
    "mode",
    "one",
    "going",
    "stable",
    "going",
    "zero",
    "referral",
    "code",
    "debunked",
    "count",
    "wait",
    "borrow",
    "tx",
    "dot",
    "wait",
    "wait",
    "one",
    "transaction",
    "console",
    "dot",
    "log",
    "borrowed",
    "well",
    "borrowed",
    "function",
    "back",
    "main",
    "function",
    "right",
    "finally",
    "borrow",
    "time",
    "wait",
    "borrow",
    "die",
    "pass",
    "parameters",
    "going",
    "const",
    "die",
    "token",
    "address",
    "equals",
    "going",
    "hard",
    "code",
    "main",
    "net",
    "look",
    "die",
    "token",
    "address",
    "main",
    "net",
    "grab",
    "address",
    "looks",
    "like",
    "indeed",
    "di",
    "token",
    "check",
    "right",
    "object",
    "get",
    "could",
    "check",
    "right",
    "abi",
    "actual",
    "code",
    "since",
    "testing",
    "gon",
    "na",
    "go",
    "ahead",
    "grab",
    "ether",
    "scan",
    "borrow",
    "dye",
    "gon",
    "na",
    "need",
    "dye",
    "token",
    "address",
    "gon",
    "na",
    "need",
    "lending",
    "pool",
    "contract",
    "amount",
    "dye",
    "borrow",
    "way",
    "deployer",
    "await",
    "borrow",
    "dye",
    "run",
    "get",
    "bar",
    "user",
    "data",
    "print",
    "information",
    "run",
    "see",
    "amount",
    "borrowed",
    "updated",
    "first",
    "call",
    "function",
    "gon",
    "na",
    "say",
    "hey",
    "much",
    "eat",
    "positive",
    "nothing",
    "borrowed",
    "borrow",
    "much",
    "eath",
    "get",
    "price",
    "get",
    "much",
    "borrowed",
    "borrow",
    "says",
    "much",
    "eath",
    "deposited",
    "much",
    "worth",
    "eath",
    "borrowed",
    "borrow",
    "much",
    "eat",
    "actually",
    "bought",
    "bunch",
    "dye",
    "actually",
    "borrowed",
    "reason",
    "times",
    "zero",
    "point",
    "95",
    "want",
    "hit",
    "cap",
    "maximum",
    "amount",
    "borrow",
    "saying",
    "hey",
    "let",
    "get",
    "95",
    "amount",
    "actually",
    "borrow",
    "going",
    "borrow",
    "everything",
    "gon",
    "na",
    "borrow",
    "95",
    "see",
    "amount",
    "eath",
    "deposited",
    "actually",
    "higher",
    "actually",
    "gaining",
    "interest",
    "eath",
    "deposited",
    "dye",
    "borrowed",
    "borrowed",
    "48",
    "dye",
    "equivalent",
    "much",
    "aetherium",
    "still",
    "little",
    "bit",
    "borrow",
    "borrowed",
    "95",
    "great",
    "awesome",
    "taken",
    "borrow",
    "programmatically",
    "let",
    "repay",
    "least",
    "gon",
    "na",
    "create",
    "new",
    "function",
    "going",
    "use",
    "repay",
    "function",
    "contract",
    "gon",
    "na",
    "async",
    "function",
    "repay",
    "going",
    "take",
    "amount",
    "want",
    "repay",
    "dye",
    "address",
    "going",
    "repay",
    "lending",
    "pool",
    "account",
    "repay",
    "going",
    "approve",
    "sending",
    "dye",
    "back",
    "ave",
    "first",
    "thing",
    "need",
    "actually",
    "need",
    "call",
    "wait",
    "prove",
    "erc",
    "20",
    "dye",
    "address",
    "lending",
    "pool",
    "dot",
    "address",
    "mount",
    "accounts",
    "right",
    "approve",
    "erc",
    "input",
    "parameters",
    "takes",
    "need",
    "approve",
    "sending",
    "dye",
    "back",
    "contract",
    "borrowed",
    "gon",
    "na",
    "send",
    "back",
    "actually",
    "going",
    "send",
    "back",
    "let",
    "say",
    "const",
    "repay",
    "tx",
    "equals",
    "await",
    "lending",
    "cool",
    "repay",
    "address",
    "amount",
    "one",
    "account",
    "say",
    "await",
    "repay",
    "tx",
    "dot",
    "wait",
    "console",
    "dot",
    "log",
    "repaid",
    "main",
    "function",
    "going",
    "weight",
    "repay",
    "going",
    "give",
    "amount",
    "dye",
    "borrow",
    "way",
    "gon",
    "na",
    "give",
    "dye",
    "token",
    "address",
    "give",
    "lending",
    "pool",
    "give",
    "deployer",
    "get",
    "borrow",
    "user",
    "data",
    "one",
    "time",
    "print",
    "final",
    "amounts",
    "notice",
    "something",
    "though",
    "going",
    "give",
    "back",
    "dye",
    "borrowed",
    "however",
    "still",
    "going",
    "dye",
    "balance",
    "see",
    "run",
    "still",
    "little",
    "bit",
    "aetherium",
    "borrowed",
    "basically",
    "still",
    "dye",
    "balance",
    "still",
    "little",
    "bit",
    "die",
    "borrow",
    "try",
    "figure",
    "answer",
    "actually",
    "tiny",
    "tiny",
    "tiny",
    "amount",
    "eath",
    "borrowed",
    "much",
    "larger",
    "amount",
    "eath",
    "deposited",
    "still",
    "tiny",
    "tiny",
    "amount",
    "eath",
    "borrowed",
    "well",
    "reason",
    "borrow",
    "dye",
    "actually",
    "accrued",
    "interest",
    "still",
    "owe",
    "dye",
    "back",
    "something",
    "like",
    "uniswap",
    "actually",
    "swap",
    "aetherium",
    "dye",
    "repay",
    "rest",
    "debt",
    "could",
    "actually",
    "finish",
    "repaying",
    "debt",
    "get",
    "little",
    "bit",
    "dye",
    "pay",
    "interest",
    "accrued",
    "want",
    "go",
    "back",
    "exact",
    "thing",
    "grab",
    "uniswap",
    "code",
    "place",
    "programmatically",
    "repay",
    "debt",
    "well",
    "point",
    "gone",
    "entire",
    "lifecycle",
    "absolutely",
    "massive",
    "huge",
    "congratulations",
    "deposited",
    "borrowed",
    "repaid",
    "tokens",
    "avi",
    "protocol",
    "going",
    "go",
    "briefly",
    "show",
    "transactions",
    "going",
    "look",
    "like",
    "actual",
    "test",
    "net",
    "ether",
    "scan",
    "see",
    "deposit",
    "collateral",
    "actually",
    "get",
    "back",
    "called",
    "token",
    "interest",
    "bearing",
    "token",
    "tokens",
    "keep",
    "track",
    "much",
    "collateral",
    "case",
    "much",
    "web",
    "token",
    "deposited",
    "avi",
    "protocol",
    "want",
    "withdraw",
    "wealth",
    "back",
    "burn",
    "eight",
    "tokens",
    "remove",
    "eight",
    "tokens",
    "see",
    "first",
    "transaction",
    "going",
    "deposit",
    "wanted",
    "show",
    "looks",
    "like",
    "actually",
    "deposit",
    "one",
    "tokens",
    "transaction",
    "associated",
    "lending",
    "pool",
    "deposit",
    "right",
    "look",
    "tokens",
    "transfer",
    "see",
    "actually",
    "deposited",
    "see",
    "actually",
    "sent",
    "rapt",
    "ether",
    "arb",
    "contract",
    "also",
    "see",
    "weath",
    "stuff",
    "stuff",
    "keep",
    "track",
    "much",
    "actually",
    "deposited",
    "ave",
    "ave",
    "give",
    "wealth",
    "token",
    "token",
    "keep",
    "track",
    "interest",
    "bearing",
    "token",
    "actually",
    "see",
    "little",
    "bit",
    "interest",
    "already",
    "actually",
    "depositing",
    "tokens",
    "protocol",
    "token",
    "keep",
    "going",
    "people",
    "borrow",
    "people",
    "use",
    "protocol",
    "actually",
    "grab",
    "token",
    "address",
    "interest",
    "bearing",
    "token",
    "token",
    "import",
    "meta",
    "mask",
    "see",
    "represents",
    "initial",
    "deposit",
    "00517",
    "dot",
    "dot",
    "keep",
    "long",
    "enough",
    "number",
    "slowly",
    "go",
    "get",
    "interest",
    "keep",
    "see",
    "went",
    "went",
    "right",
    "interest",
    "keep",
    "changing",
    "keep",
    "going",
    "obviously",
    "little",
    "deposited",
    "interest",
    "gon",
    "na",
    "go",
    "quickly",
    "go",
    "people",
    "use",
    "protocol",
    "since",
    "using",
    "test",
    "net",
    "actual",
    "usage",
    "protocol",
    "high",
    "get",
    "picture",
    "awesome",
    "done",
    "phenomenal",
    "get",
    "far",
    "let",
    "quick",
    "recap",
    "everything",
    "learned",
    "head",
    "next",
    "section",
    "first",
    "learned",
    "web",
    "token",
    "wrapped",
    "aetherium",
    "token",
    "way",
    "tokenize",
    "aetherium",
    "layer",
    "one",
    "blockchain",
    "native",
    "token",
    "learned",
    "little",
    "bit",
    "avi",
    "protocol",
    "defy",
    "primitive",
    "borrowing",
    "lending",
    "assets",
    "actually",
    "gain",
    "interest",
    "depositing",
    "tokens",
    "assets",
    "ave",
    "learned",
    "little",
    "bit",
    "also",
    "uniswap",
    "another",
    "incredibly",
    "important",
    "defy",
    "protocol",
    "allows",
    "us",
    "swap",
    "tokens",
    "decentralized",
    "context",
    "learned",
    "actually",
    "deposit",
    "tokens",
    "avi",
    "protocol",
    "decentralized",
    "borrowing",
    "lending",
    "platform",
    "similar",
    "bank",
    "actually",
    "gain",
    "interest",
    "deposited",
    "tokens",
    "first",
    "approve",
    "anytime",
    "want",
    "contract",
    "interact",
    "tokens",
    "need",
    "approve",
    "contract",
    "go",
    "ahead",
    "deposit",
    "deposited",
    "got",
    "dye",
    "price",
    "learned",
    "actually",
    "borrow",
    "dye",
    "borrow",
    "asset",
    "based",
    "much",
    "collateral",
    "put",
    "learned",
    "repay",
    "back",
    "learned",
    "forking",
    "blockchain",
    "opposed",
    "using",
    "main",
    "blockchain",
    "another",
    "thing",
    "know",
    "using",
    "rpc",
    "url",
    "like",
    "something",
    "alchemy",
    "awesome",
    "learned",
    "ton",
    "defy",
    "defi",
    "absolutely",
    "massive",
    "powerhouse",
    "comes",
    "blockchain",
    "one",
    "important",
    "things",
    "blockchains",
    "want",
    "learn",
    "defy",
    "read",
    "defy",
    "got",
    "links",
    "github",
    "learn",
    "defy",
    "one",
    "particular",
    "want",
    "show",
    "one",
    "called",
    "speed",
    "run",
    "etherium",
    "give",
    "ton",
    "defy",
    "examples",
    "gives",
    "whole",
    "bunch",
    "examples",
    "well",
    "good",
    "test",
    "everything",
    "learned",
    "pass",
    "course",
    "even",
    "right",
    "want",
    "whenever",
    "want",
    "talk",
    "little",
    "bit",
    "actually",
    "austin",
    "griffiths",
    "talk",
    "little",
    "bit",
    "speed",
    "run",
    "aetherium",
    "pass",
    "austin",
    "hey",
    "austin",
    "griffith",
    "want",
    "show",
    "speed",
    "run",
    "aetherium",
    "speed",
    "run",
    "aetherium",
    "great",
    "way",
    "get",
    "started",
    "aetherium",
    "developer",
    "targeted",
    "web",
    "two",
    "developers",
    "becoming",
    "web",
    "three",
    "developers",
    "speed",
    "run",
    "theory",
    "website",
    "takes",
    "getting",
    "started",
    "kind",
    "getting",
    "getting",
    "idea",
    "language",
    "syntax",
    "start",
    "understanding",
    "language",
    "start",
    "feel",
    "like",
    "anything",
    "top",
    "world",
    "finally",
    "get",
    "syntax",
    "solidity",
    "together",
    "jam",
    "smart",
    "contract",
    "really",
    "getting",
    "context",
    "space",
    "figuring",
    "works",
    "whole",
    "nother",
    "battle",
    "speed",
    "run",
    "comes",
    "let",
    "speed",
    "run",
    "speed",
    "run",
    "first",
    "get",
    "scaffold",
    "e",
    "speedrun",
    "aetherium",
    "kind",
    "revolves",
    "around",
    "scaffold",
    "eath",
    "uses",
    "scaffold",
    "eath",
    "base",
    "want",
    "tinker",
    "around",
    "ideas",
    "within",
    "solidity",
    "let",
    "show",
    "mean",
    "scaffold",
    "eath",
    "front",
    "end",
    "smart",
    "contract",
    "scaffold",
    "eath",
    "comes",
    "hard",
    "hat",
    "box",
    "use",
    "combination",
    "hard",
    "hat",
    "react",
    "build",
    "dap",
    "deploy",
    "smart",
    "contract",
    "front",
    "end",
    "ability",
    "edit",
    "smart",
    "contract",
    "front",
    "end",
    "auto",
    "adapt",
    "kind",
    "key",
    "scaffold",
    "ease",
    "added",
    "extra",
    "extra",
    "exclamation",
    "points",
    "see",
    "show",
    "contract",
    "deploys",
    "go",
    "real",
    "quick",
    "create",
    "like",
    "un",
    "256",
    "public",
    "counter",
    "set",
    "equal",
    "five",
    "build",
    "function",
    "called",
    "increment",
    "public",
    "counter",
    "public",
    "go",
    "counter",
    "plus",
    "plus",
    "imagine",
    "going",
    "happen",
    "edit",
    "little",
    "bit",
    "solidity",
    "deploy",
    "contract",
    "front",
    "end",
    "auto",
    "adjust",
    "gives",
    "ability",
    "developer",
    "call",
    "functions",
    "tinker",
    "smart",
    "contract",
    "play",
    "around",
    "even",
    "console",
    "log",
    "know",
    "sets",
    "says",
    "count",
    "go",
    "something",
    "like",
    "let",
    "go",
    "ahead",
    "deploy",
    "notice",
    "quick",
    "iterations",
    "making",
    "small",
    "changes",
    "solidity",
    "seeing",
    "changes",
    "show",
    "front",
    "end",
    "tinkering",
    "front",
    "end",
    "testing",
    "assumptions",
    "go",
    "look",
    "hard",
    "hat",
    "node",
    "make",
    "increment",
    "call",
    "see",
    "nice",
    "console",
    "log",
    "know",
    "address",
    "set",
    "count",
    "eight",
    "right",
    "cool",
    "scaffold",
    "eath",
    "speed",
    "run",
    "aetherium",
    "built",
    "top",
    "get",
    "edit",
    "smart",
    "contract",
    "edit",
    "front",
    "end",
    "point",
    "front",
    "end",
    "particular",
    "network",
    "deploy",
    "smart",
    "contract",
    "deploy",
    "app",
    "gives",
    "ability",
    "front",
    "end",
    "along",
    "smart",
    "contract",
    "building",
    "smart",
    "smart",
    "contract",
    "front",
    "end",
    "tinker",
    "smart",
    "contract",
    "going",
    "help",
    "kind",
    "figure",
    "want",
    "write",
    "solidity",
    "like",
    "going",
    "mapping",
    "going",
    "array",
    "going",
    "track",
    "struct",
    "kind",
    "iterative",
    "process",
    "throwing",
    "smart",
    "contract",
    "tinkering",
    "front",
    "end",
    "trying",
    "seeing",
    "need",
    "build",
    "scaffold",
    "eath",
    "base",
    "need",
    "get",
    "started",
    "speed",
    "run",
    "ethereum",
    "able",
    "installed",
    "kind",
    "react",
    "front",
    "end",
    "yarn",
    "start",
    "yarn",
    "chain",
    "run",
    "hard",
    "hat",
    "node",
    "yarn",
    "deploy",
    "setup",
    "locally",
    "ready",
    "go",
    "speed",
    "run",
    "aetherium",
    "also",
    "right",
    "challenge",
    "zero",
    "challenge",
    "zero",
    "got",
    "ta",
    "go",
    "zero",
    "index",
    "right",
    "got",
    "nerdy",
    "challenge",
    "zero",
    "sets",
    "getting",
    "environment",
    "setup",
    "quest",
    "building",
    "simple",
    "nft",
    "example",
    "going",
    "come",
    "nft",
    "smart",
    "contract",
    "going",
    "come",
    "nft",
    "front",
    "end",
    "little",
    "kind",
    "like",
    "minting",
    "view",
    "come",
    "stuff",
    "walk",
    "basically",
    "challenge",
    "row",
    "going",
    "hold",
    "hand",
    "going",
    "take",
    "every",
    "step",
    "get",
    "get",
    "certain",
    "version",
    "node",
    "e",
    "l",
    "correct",
    "range",
    "node",
    "yarn",
    "installed",
    "watch",
    "yarn",
    "executable",
    "linux",
    "make",
    "sure",
    "yarn",
    "package",
    "manager",
    "get",
    "node",
    "yarn",
    "run",
    "cloning",
    "challenge",
    "install",
    "fire",
    "chain",
    "fire",
    "front",
    "end",
    "working",
    "app",
    "lets",
    "interface",
    "nft",
    "smart",
    "contract",
    "go",
    "learn",
    "wallets",
    "start",
    "minting",
    "nf",
    "ts",
    "send",
    "nf",
    "round",
    "challenge",
    "zero",
    "getting",
    "started",
    "even",
    "challenge",
    "zero",
    "deploy",
    "nft",
    "rinkeby",
    "also",
    "deploy",
    "app",
    "allow",
    "friends",
    "go",
    "app",
    "mint",
    "fts",
    "rinkeby",
    "first",
    "challenge",
    "looks",
    "like",
    "even",
    "like",
    "dive",
    "open",
    "see",
    "play",
    "around",
    "mechanics",
    "second",
    "challenge",
    "challenge",
    "number",
    "one",
    "challenge",
    "one",
    "speed",
    "runner",
    "theory",
    "like",
    "really",
    "starts",
    "really",
    "shows",
    "superpower",
    "aetherium",
    "sets",
    "need",
    "build",
    "app",
    "bunch",
    "people",
    "necessarily",
    "trust",
    "coordinate",
    "stake",
    "smart",
    "contract",
    "like",
    "superpower",
    "aetherium",
    "ability",
    "developer",
    "write",
    "simple",
    "rules",
    "allow",
    "jerks",
    "coordinate",
    "financially",
    "greet",
    "steal",
    "money",
    "right",
    "building",
    "financial",
    "systems",
    "know",
    "game",
    "theory",
    "economics",
    "many",
    "things",
    "going",
    "developer",
    "writing",
    "simple",
    "rules",
    "building",
    "system",
    "allows",
    "people",
    "coordinate",
    "challenge",
    "one",
    "take",
    "get",
    "set",
    "steak",
    "docile",
    "smart",
    "contract",
    "install",
    "everything",
    "exactly",
    "way",
    "fire",
    "everything",
    "going",
    "walk",
    "kinds",
    "things",
    "need",
    "smart",
    "contract",
    "write",
    "solidity",
    "going",
    "handheld",
    "tutorial",
    "hell",
    "thing",
    "going",
    "write",
    "smart",
    "contract",
    "guidelines",
    "rails",
    "kind",
    "help",
    "going",
    "okay",
    "quest",
    "one",
    "challenge",
    "one",
    "building",
    "decentralized",
    "staking",
    "app",
    "challenge",
    "two",
    "building",
    "token",
    "vendor",
    "challenge",
    "one",
    "learn",
    "things",
    "like",
    "send",
    "money",
    "contract",
    "contract",
    "keep",
    "track",
    "mappings",
    "challenge",
    "two",
    "going",
    "learn",
    "contract",
    "contract",
    "interaction",
    "going",
    "learn",
    "erc",
    "20s",
    "going",
    "learn",
    "specifically",
    "approved",
    "pattern",
    "kind",
    "jerk",
    "hard",
    "hard",
    "thing",
    "deal",
    "approved",
    "pattern",
    "need",
    "go",
    "token",
    "contract",
    "approve",
    "vendor",
    "take",
    "money",
    "second",
    "transaction",
    "need",
    "go",
    "vendor",
    "vendor",
    "grab",
    "money",
    "token",
    "contract",
    "something",
    "else",
    "challenge",
    "two",
    "learning",
    "tokens",
    "vendors",
    "starting",
    "really",
    "like",
    "get",
    "kind",
    "exposed",
    "idea",
    "like",
    "massive",
    "multiplayer",
    "game",
    "aetherium",
    "also",
    "kind",
    "like",
    "build",
    "vending",
    "machines",
    "anybody",
    "get",
    "build",
    "dex",
    "done",
    "two",
    "really",
    "kind",
    "license",
    "learn",
    "point",
    "ready",
    "really",
    "like",
    "go",
    "damage",
    "build",
    "cool",
    "things",
    "maybe",
    "go",
    "build",
    "couple",
    "things",
    "come",
    "back",
    "come",
    "come",
    "hit",
    "challenge",
    "three",
    "challenge",
    "three",
    "going",
    "little",
    "bit",
    "open",
    "ended",
    "going",
    "cohort",
    "people",
    "also",
    "building",
    "get",
    "first",
    "three",
    "challenges",
    "even",
    "get",
    "challenge",
    "three",
    "even",
    "get",
    "chat",
    "room",
    "chat",
    "room",
    "developers",
    "also",
    "building",
    "decks",
    "together",
    "kind",
    "learn",
    "chat",
    "going",
    "build",
    "exchange",
    "going",
    "build",
    "exchange",
    "works",
    "smart",
    "contract",
    "decentralized",
    "way",
    "centralized",
    "breaking",
    "points",
    "going",
    "mean",
    "going",
    "reserves",
    "eath",
    "tokens",
    "gon",
    "na",
    "pricing",
    "function",
    "lp",
    "tokens",
    "sorts",
    "things",
    "learn",
    "get",
    "challenge",
    "five",
    "multi",
    "sig",
    "wallet",
    "fundamental",
    "important",
    "thing",
    "store",
    "eath",
    "safely",
    "going",
    "multi",
    "sig",
    "wallet",
    "multiple",
    "identities",
    "even",
    "even",
    "like",
    "base",
    "like",
    "dow",
    "sort",
    "like",
    "starting",
    "multi",
    "sig",
    "wallet",
    "need",
    "build",
    "one",
    "need",
    "understand",
    "call",
    "data",
    "call",
    "data",
    "super",
    "weird",
    "complex",
    "everything",
    "transaction",
    "even",
    "poking",
    "contract",
    "transaction",
    "craft",
    "call",
    "data",
    "correctly",
    "say",
    "would",
    "like",
    "call",
    "specific",
    "function",
    "specific",
    "contract",
    "multisig",
    "wallets",
    "kind",
    "ends",
    "got",
    "challenges",
    "pipeline",
    "kind",
    "ends",
    "build",
    "svg",
    "nft",
    "much",
    "fun",
    "build",
    "nf",
    "crafts",
    "actual",
    "drawing",
    "smart",
    "contract",
    "renders",
    "speed",
    "run",
    "go",
    "speed",
    "run",
    "aetherium",
    "checkout",
    "scaffold",
    "eat",
    "start",
    "building",
    "build",
    "something",
    "awesome",
    "aetherium",
    "hearts",
    "hearts",
    "hearts",
    "go",
    "get",
    "austin",
    "griffith",
    "one",
    "ogs",
    "comes",
    "helping",
    "engineers",
    "get",
    "caught",
    "speed",
    "blockchain",
    "world",
    "massive",
    "thank",
    "austin",
    "done",
    "far",
    "right",
    "gon",
    "na",
    "get",
    "nf",
    "let",
    "already",
    "made",
    "number",
    "videos",
    "nf",
    "start",
    "working",
    "nf",
    "going",
    "watch",
    "portion",
    "previous",
    "python",
    "edition",
    "course",
    "explain",
    "piece",
    "high",
    "level",
    "course",
    "gon",
    "na",
    "get",
    "ultimate",
    "nft",
    "tutorial",
    "let",
    "learn",
    "nf",
    "look",
    "nf",
    "hot",
    "right",
    "nf",
    "also",
    "known",
    "erc",
    "720",
    "ones",
    "token",
    "standard",
    "created",
    "ethereum",
    "platform",
    "nf",
    "stands",
    "non",
    "fungible",
    "token",
    "token",
    "standard",
    "similar",
    "erc",
    "erc",
    "20",
    "like",
    "link",
    "maker",
    "goodies",
    "found",
    "etherium",
    "chain",
    "nf",
    "non",
    "fungible",
    "token",
    "token",
    "non",
    "fungible",
    "means",
    "starkly",
    "unique",
    "one",
    "token",
    "interchangeable",
    "token",
    "class",
    "good",
    "way",
    "think",
    "1",
    "interchangeable",
    "dollar",
    "1",
    "going",
    "value",
    "another",
    "dollar",
    "fungible",
    "tokens",
    "like",
    "erc",
    "20s",
    "one",
    "link",
    "always",
    "going",
    "equivalent",
    "one",
    "link",
    "contrast",
    "going",
    "nf",
    "nerds",
    "know",
    "like",
    "pokemon",
    "would",
    "good",
    "example",
    "nft",
    "one",
    "pokemon",
    "going",
    "different",
    "stats",
    "different",
    "moves",
    "sets",
    "interchangeable",
    "pokemon",
    "maybe",
    "relatable",
    "one",
    "like",
    "trading",
    "card",
    "unique",
    "piece",
    "art",
    "like",
    "nf",
    "non",
    "fungible",
    "non",
    "interchangeable",
    "tokens",
    "moment",
    "best",
    "represented",
    "thought",
    "digital",
    "pieces",
    "art",
    "incorruptible",
    "permanent",
    "history",
    "whose",
    "deployed",
    "etc",
    "like",
    "said",
    "nf",
    "token",
    "standard",
    "actually",
    "make",
    "much",
    "art",
    "give",
    "stats",
    "make",
    "battle",
    "really",
    "unique",
    "things",
    "pretty",
    "much",
    "whatever",
    "want",
    "right",
    "easiest",
    "way",
    "think",
    "popular",
    "way",
    "think",
    "calling",
    "ah",
    "ah",
    "ah",
    "odd",
    "type",
    "collectible",
    "anything",
    "unique",
    "getting",
    "ton",
    "buzz",
    "recently",
    "seeing",
    "sold",
    "insane",
    "prices",
    "like",
    "saw",
    "x",
    "infinity",
    "sell",
    "nine",
    "plots",
    "land",
    "nine",
    "plots",
    "unique",
    "land",
    "million",
    "also",
    "saw",
    "original",
    "creator",
    "nyan",
    "cat",
    "know",
    "cat",
    "sold",
    "like",
    "300",
    "eath",
    "apparently",
    "people",
    "really",
    "value",
    "things",
    "like",
    "said",
    "tokens",
    "deployed",
    "smart",
    "contract",
    "platform",
    "view",
    "different",
    "nft",
    "platforms",
    "like",
    "open",
    "sea",
    "wearable",
    "nft",
    "marketplaces",
    "let",
    "people",
    "buy",
    "sell",
    "obviously",
    "without",
    "marketplaces",
    "decentralized",
    "helping",
    "give",
    "good",
    "user",
    "interface",
    "like",
    "many",
    "initial",
    "thought",
    "nf",
    "okay",
    "sounds",
    "pretty",
    "dumb",
    "think",
    "dumb",
    "think",
    "art",
    "lot",
    "value",
    "think",
    "artists",
    "always",
    "paid",
    "fairly",
    "actually",
    "huge",
    "issue",
    "right",
    "modern",
    "day",
    "world",
    "artist",
    "make",
    "type",
    "art",
    "people",
    "copy",
    "paste",
    "know",
    "everywhere",
    "never",
    "get",
    "attribution",
    "make",
    "really",
    "easy",
    "decentralized",
    "royalty",
    "mechanism",
    "type",
    "mechanism",
    "artists",
    "get",
    "accurately",
    "comped",
    "think",
    "really",
    "important",
    "love",
    "music",
    "love",
    "movies",
    "pieces",
    "art",
    "digest",
    "really",
    "like",
    "think",
    "fair",
    "get",
    "comped",
    "appropriately",
    "providing",
    "value",
    "life",
    "think",
    "nf",
    "great",
    "way",
    "solve",
    "issue",
    "kind",
    "decentralized",
    "audit",
    "trails",
    "royalty",
    "trails",
    "set",
    "see",
    "really",
    "transparently",
    "without",
    "go",
    "centralized",
    "service",
    "basic",
    "gist",
    "let",
    "talk",
    "standards",
    "erc",
    "721",
    "standard",
    "nft",
    "standard",
    "basis",
    "another",
    "standard",
    "semi",
    "fungible",
    "tokens",
    "1155",
    "going",
    "talk",
    "check",
    "main",
    "differences",
    "721",
    "erc",
    "20",
    "erc",
    "20",
    "really",
    "simple",
    "mapping",
    "address",
    "much",
    "address",
    "holds",
    "720",
    "ones",
    "unique",
    "token",
    "ids",
    "token",
    "id",
    "unique",
    "owner",
    "addition",
    "called",
    "token",
    "uri",
    "talk",
    "minute",
    "token",
    "unique",
    "token",
    "id",
    "represents",
    "unique",
    "asset",
    "since",
    "assets",
    "unique",
    "want",
    "able",
    "visualize",
    "show",
    "actually",
    "look",
    "like",
    "need",
    "define",
    "attributes",
    "object",
    "piece",
    "art",
    "needed",
    "way",
    "define",
    "art",
    "looks",
    "like",
    "type",
    "character",
    "game",
    "need",
    "wait",
    "define",
    "character",
    "stats",
    "nft",
    "metadata",
    "token",
    "uri",
    "come",
    "know",
    "anything",
    "aetherium",
    "know",
    "sometimes",
    "gas",
    "prices",
    "getting",
    "pretty",
    "high",
    "especially",
    "comes",
    "storing",
    "lot",
    "space",
    "get",
    "really",
    "really",
    "expensive",
    "one",
    "first",
    "questions",
    "might",
    "well",
    "storing",
    "images",
    "pieces",
    "chain",
    "answer",
    "sometimes",
    "back",
    "coming",
    "nf",
    "artists",
    "deploying",
    "stuff",
    "eath",
    "devs",
    "artists",
    "like",
    "yeah",
    "art",
    "let",
    "art",
    "gon",
    "na",
    "deploy",
    "one",
    "megabyte",
    "image",
    "onto",
    "etherium",
    "chain",
    "oh",
    "god",
    "much",
    "gas",
    "expensive",
    "delete",
    "button",
    "otherwise",
    "good",
    "realized",
    "put",
    "art",
    "chain",
    "going",
    "incredibly",
    "expensive",
    "get",
    "around",
    "put",
    "standard",
    "called",
    "token",
    "uri",
    "universally",
    "unique",
    "indicator",
    "asset",
    "token",
    "looks",
    "like",
    "attributes",
    "token",
    "use",
    "something",
    "like",
    "centralized",
    "api",
    "ipfs",
    "actually",
    "get",
    "token",
    "uri",
    "typical",
    "token",
    "uri",
    "return",
    "something",
    "format",
    "like",
    "name",
    "image",
    "location",
    "description",
    "attributes",
    "often",
    "talk",
    "chain",
    "metadata",
    "versus",
    "chain",
    "metadata",
    "much",
    "easier",
    "cheaper",
    "store",
    "metadata",
    "chain",
    "lot",
    "people",
    "use",
    "something",
    "like",
    "ipfs",
    "decentralized",
    "take",
    "little",
    "bit",
    "centrality",
    "keep",
    "persisting",
    "also",
    "use",
    "centralized",
    "api",
    "however",
    "obviously",
    "goes",
    "lose",
    "image",
    "lose",
    "everything",
    "associated",
    "nft",
    "nft",
    "marketplaces",
    "actually",
    "ca",
    "wo",
    "read",
    "chain",
    "attributes",
    "chain",
    "metadata",
    "used",
    "looking",
    "token",
    "uri",
    "obviously",
    "chain",
    "metadata",
    "ca",
    "anything",
    "really",
    "cool",
    "really",
    "interesting",
    "gains",
    "nf",
    "example",
    "wanted",
    "create",
    "chain",
    "pokemon",
    "game",
    "attributes",
    "would",
    "need",
    "chain",
    "order",
    "pokemon",
    "interact",
    "chain",
    "becomes",
    "lot",
    "harder",
    "cryptographically",
    "prove",
    "new",
    "nf",
    "like",
    "wait",
    "kind",
    "lot",
    "information",
    "make",
    "easy",
    "looking",
    "render",
    "image",
    "nft",
    "add",
    "image",
    "ipfs",
    "add",
    "metadata",
    "file",
    "pointing",
    "image",
    "file",
    "ipfs",
    "grab",
    "token",
    "uri",
    "put",
    "set",
    "nft",
    "chain",
    "link",
    "dnd",
    "article",
    "great",
    "job",
    "walking",
    "showing",
    "sure",
    "read",
    "looking",
    "learn",
    "going",
    "cover",
    "video",
    "deploying",
    "first",
    "nft",
    "chain",
    "attributes",
    "attributes",
    "chain",
    "really",
    "going",
    "allow",
    "build",
    "really",
    "creative",
    "nf",
    "build",
    "games",
    "interesting",
    "properties",
    "really",
    "makes",
    "authenticity",
    "nft",
    "guaranteed",
    "attributes",
    "always",
    "going",
    "chain",
    "alright",
    "know",
    "basics",
    "approximately",
    "nf",
    "similar",
    "erc",
    "20",
    "see",
    "e",
    "ip",
    "721",
    "erc",
    "721",
    "non",
    "fungible",
    "token",
    "standard",
    "aetherium",
    "ie",
    "ips",
    "scroll",
    "see",
    "different",
    "events",
    "different",
    "functions",
    "come",
    "creating",
    "token",
    "everything",
    "going",
    "going",
    "available",
    "github",
    "repo",
    "hard",
    "hat",
    "nft",
    "fcc",
    "going",
    "actually",
    "go",
    "code",
    "deploying",
    "creating",
    "customized",
    "nft",
    "labeled",
    "ultimate",
    "nft",
    "repo",
    "part",
    "course",
    "going",
    "go",
    "lot",
    "gon",
    "na",
    "go",
    "basic",
    "nft",
    "real",
    "minimalistic",
    "nft",
    "ipfs",
    "hosted",
    "nft",
    "dynamic",
    "uses",
    "randomness",
    "generate",
    "unique",
    "nf",
    "provably",
    "rare",
    "appease",
    "provably",
    "rare",
    "cards",
    "provably",
    "rare",
    "tokens",
    "stats",
    "whatever",
    "want",
    "going",
    "called",
    "svg",
    "nft",
    "entities",
    "100",
    "percent",
    "hosted",
    "chain",
    "need",
    "chain",
    "need",
    "ipfs",
    "need",
    "chain",
    "database",
    "one",
    "also",
    "going",
    "dynamic",
    "going",
    "use",
    "price",
    "feeds",
    "order",
    "fluctuate",
    "image",
    "entity",
    "actually",
    "looks",
    "like",
    "based",
    "price",
    "asset",
    "images",
    "going",
    "using",
    "obviously",
    "three",
    "adorable",
    "doggies",
    "want",
    "follow",
    "along",
    "quickstart",
    "absolutely",
    "going",
    "quick",
    "overview",
    "running",
    "code",
    "show",
    "going",
    "look",
    "like",
    "end",
    "basically",
    "going",
    "going",
    "code",
    "going",
    "run",
    "hardhat",
    "deploy",
    "dash",
    "dash",
    "network",
    "rink",
    "b",
    "dash",
    "dash",
    "tags",
    "main",
    "going",
    "deploy",
    "contracts",
    "everything",
    "finally",
    "go",
    "test",
    "nets",
    "dot",
    "open",
    "grab",
    "address",
    "one",
    "nf",
    "able",
    "put",
    "see",
    "actual",
    "nft",
    "collection",
    "item",
    "additionally",
    "go",
    "right",
    "contract",
    "read",
    "contract",
    "get",
    "token",
    "uri",
    "copy",
    "token",
    "paste",
    "browser",
    "ipfs",
    "browser",
    "grab",
    "image",
    "attribute",
    "see",
    "actually",
    "looks",
    "like",
    "chain",
    "said",
    "let",
    "learn",
    "build",
    "ultimate",
    "nft",
    "repo",
    "build",
    "different",
    "customizable",
    "nf",
    "let",
    "jump",
    "terminal",
    "going",
    "create",
    "new",
    "directory",
    "gon",
    "na",
    "call",
    "hard",
    "hat",
    "fcc",
    "gon",
    "na",
    "cd",
    "fcc",
    "going",
    "open",
    "hit",
    "file",
    "open",
    "folder",
    "point",
    "gotten",
    "pretty",
    "familiar",
    "setup",
    "code",
    "bases",
    "feel",
    "free",
    "copy",
    "whatever",
    "want",
    "setup",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "hard",
    "hat",
    "loading",
    "going",
    "copy",
    "prettier",
    "files",
    "want",
    "use",
    "prettier",
    "going",
    "copy",
    "hard",
    "also",
    "going",
    "grab",
    "package",
    "jason",
    "copied",
    "going",
    "delete",
    "old",
    "package",
    "dot",
    "json",
    "going",
    "hit",
    "enter",
    "rename",
    "one",
    "copied",
    "package",
    "copy",
    "package",
    "json",
    "reason",
    "go",
    "ahead",
    "run",
    "yarn",
    "install",
    "stuff",
    "come",
    "back",
    "grab",
    "lesson",
    "nine",
    "hard",
    "hat",
    "smart",
    "contract",
    "lottery",
    "stuff",
    "run",
    "massive",
    "piece",
    "well",
    "copy",
    "package",
    "json",
    "run",
    "yarn",
    "thing",
    "keep",
    "boilerplate",
    "loading",
    "also",
    "going",
    "grab",
    "dotty",
    "v",
    "file",
    "using",
    "past",
    "couple",
    "projects",
    "gon",
    "na",
    "going",
    "make",
    "three",
    "different",
    "contracts",
    "one",
    "going",
    "basic",
    "nft",
    "using",
    "erc",
    "721",
    "standard",
    "gon",
    "na",
    "random",
    "ipfs",
    "hosted",
    "nf",
    "finally",
    "going",
    "dynamic",
    "v",
    "g",
    "nft",
    "random",
    "nf",
    "going",
    "random",
    "creation",
    "time",
    "going",
    "give",
    "true",
    "scarcity",
    "true",
    "randomness",
    "nf",
    "gon",
    "na",
    "hosted",
    "ipfs",
    "dynamic",
    "svg",
    "nft",
    "going",
    "hosted",
    "100",
    "percent",
    "chain",
    "image",
    "going",
    "change",
    "based",
    "parameters",
    "makes",
    "dynamic",
    "svg",
    "nft",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "folder",
    "create",
    "contracts",
    "folder",
    "create",
    "first",
    "nf",
    "going",
    "basic",
    "nft",
    "going",
    "go",
    "little",
    "bit",
    "quick",
    "going",
    "actually",
    "things",
    "already",
    "familiar",
    "basic",
    "nf",
    "dot",
    "soul",
    "new",
    "file",
    "let",
    "go",
    "ahead",
    "let",
    "let",
    "go",
    "ahead",
    "spdx",
    "license",
    "identifier",
    "gon",
    "na",
    "mit",
    "pragma",
    "solidity",
    "carrot",
    "zero",
    "point",
    "pragma",
    "solidity",
    "contract",
    "basic",
    "nf",
    "let",
    "basic",
    "get",
    "like",
    "say",
    "contract",
    "basic",
    "nf",
    "run",
    "hard",
    "compile",
    "yarn",
    "hard",
    "hit",
    "compile",
    "looks",
    "like",
    "well",
    "far",
    "okay",
    "perfect",
    "based",
    "nft",
    "token",
    "standard",
    "go",
    "back",
    "eip",
    "going",
    "need",
    "whole",
    "bunch",
    "different",
    "functions",
    "going",
    "need",
    "transfer",
    "events",
    "going",
    "need",
    "owner",
    "events",
    "bounce",
    "going",
    "different",
    "functions",
    "could",
    "100",
    "percent",
    "implement",
    "transfer",
    "exactly",
    "like",
    "erc",
    "20",
    "use",
    "guessed",
    "gon",
    "na",
    "using",
    "open",
    "zeppelin",
    "contracts",
    "well",
    "come",
    "back",
    "open",
    "zeppelin",
    "go",
    "contracts",
    "gon",
    "na",
    "go",
    "ahead",
    "add",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "opens",
    "contracts",
    "like",
    "going",
    "look",
    "erc",
    "721",
    "see",
    "creating",
    "minimalist",
    "erc",
    "721",
    "looks",
    "like",
    "number",
    "extensions",
    "come",
    "erc",
    "721",
    "example",
    "give",
    "us",
    "using",
    "erc",
    "721",
    "uri",
    "storage",
    "talk",
    "little",
    "bit",
    "added",
    "actually",
    "import",
    "erc",
    "21",
    "opens",
    "contract",
    "import",
    "open",
    "zeppelin",
    "slash",
    "contracts",
    "slash",
    "token",
    "slash",
    "c",
    "721",
    "slash",
    "erc",
    "721",
    "use",
    "different",
    "one",
    "demo",
    "worry",
    "erc",
    "20",
    "gon",
    "na",
    "say",
    "basic",
    "nft",
    "erc",
    "inheritance",
    "find",
    "constructor",
    "see",
    "constructor",
    "takes",
    "name",
    "symbol",
    "gon",
    "na",
    "want",
    "use",
    "constructor",
    "contract",
    "gon",
    "na",
    "say",
    "construct",
    "door",
    "constructor",
    "going",
    "blank",
    "erc",
    "721",
    "constructor",
    "call",
    "doggie",
    "symbol",
    "dog",
    "like",
    "basic",
    "nft",
    "going",
    "doggy",
    "right",
    "going",
    "nf",
    "purely",
    "dog",
    "name",
    "going",
    "doggy",
    "symbol",
    "going",
    "dog",
    "order",
    "create",
    "new",
    "dogs",
    "going",
    "openzeppelin",
    "code",
    "comes",
    "something",
    "called",
    "mint",
    "function",
    "exactly",
    "erc",
    "20",
    "going",
    "create",
    "function",
    "called",
    "mint",
    "nft",
    "public",
    "file",
    "function",
    "going",
    "return",
    "activity",
    "six",
    "use",
    "safe",
    "mint",
    "function",
    "erc",
    "20",
    "underscore",
    "safe",
    "mint",
    "message",
    "dot",
    "sender",
    "mint",
    "token",
    "whoever",
    "calls",
    "mint",
    "function",
    "need",
    "also",
    "give",
    "token",
    "id",
    "looking",
    "back",
    "code",
    "erc",
    "see",
    "github",
    "well",
    "gon",
    "na",
    "look",
    "safe",
    "mint",
    "function",
    "takes",
    "address",
    "going",
    "nft",
    "token",
    "id",
    "id",
    "token",
    "based",
    "address",
    "collection",
    "tokens",
    "smart",
    "contract",
    "one",
    "needs",
    "unique",
    "token",
    "id",
    "gon",
    "na",
    "gon",
    "na",
    "create",
    "un",
    "256",
    "private",
    "variable",
    "called",
    "underscore",
    "token",
    "counter",
    "gon",
    "na",
    "get",
    "initialized",
    "constructor",
    "zero",
    "explicit",
    "say",
    "es",
    "token",
    "counter",
    "equals",
    "zero",
    "token",
    "id",
    "new",
    "nf",
    "token",
    "counter",
    "course",
    "say",
    "token",
    "counter",
    "equals",
    "token",
    "counter",
    "plus",
    "one",
    "every",
    "time",
    "meant",
    "new",
    "nft",
    "token",
    "counter",
    "return",
    "return",
    "new",
    "tab",
    "counter",
    "right",
    "obviously",
    "bottom",
    "could",
    "like",
    "function",
    "get",
    "token",
    "counter",
    "would",
    "public",
    "view",
    "returns",
    "gon",
    "na",
    "go",
    "little",
    "quick",
    "seen",
    "return",
    "underscore",
    "token",
    "counter",
    "right",
    "since",
    "private",
    "variable",
    "public",
    "function",
    "get",
    "token",
    "counter",
    "technically",
    "technically",
    "nf",
    "look",
    "like",
    "well",
    "right",
    "nf",
    "going",
    "look",
    "like",
    "anything",
    "eip",
    "token",
    "standard",
    "thing",
    "called",
    "token",
    "uri",
    "important",
    "function",
    "tells",
    "us",
    "exactly",
    "token",
    "going",
    "look",
    "like",
    "like",
    "said",
    "mini",
    "lesson",
    "token",
    "uri",
    "returns",
    "type",
    "url",
    "universal",
    "resource",
    "identifier",
    "returns",
    "json",
    "looks",
    "like",
    "json",
    "going",
    "image",
    "part",
    "image",
    "going",
    "url",
    "going",
    "point",
    "image",
    "actually",
    "looks",
    "like",
    "url",
    "hosted",
    "chain",
    "hosted",
    "ipfs",
    "hosted",
    "really",
    "wherever",
    "ideally",
    "going",
    "use",
    "centralized",
    "server",
    "host",
    "hosted",
    "google",
    "cloud",
    "centralized",
    "server",
    "whatever",
    "centralized",
    "server",
    "goes",
    "well",
    "guess",
    "mc",
    "gon",
    "na",
    "look",
    "like",
    "gon",
    "na",
    "look",
    "like",
    "anything",
    "want",
    "use",
    "type",
    "decentralized",
    "storage",
    "get",
    "url",
    "uri",
    "store",
    "looks",
    "like",
    "make",
    "section",
    "little",
    "bit",
    "easier",
    "actually",
    "already",
    "gone",
    "ahead",
    "hosted",
    "image",
    "ipfs",
    "going",
    "ipfs",
    "dot",
    "dot",
    "slash",
    "slash",
    "going",
    "look",
    "like",
    "going",
    "image",
    "going",
    "use",
    "dog",
    "create",
    "image",
    "though",
    "token",
    "uri",
    "going",
    "work",
    "need",
    "uri",
    "returns",
    "image",
    "inside",
    "first",
    "section",
    "already",
    "gone",
    "ahead",
    "done",
    "well",
    "going",
    "located",
    "token",
    "uri",
    "function",
    "needs",
    "return",
    "going",
    "name",
    "description",
    "image",
    "uri",
    "points",
    "dog",
    "attributes",
    "etc",
    "etc",
    "notice",
    "image",
    "pointing",
    "https",
    "dot",
    "dot",
    "slash",
    "slash",
    "reason",
    "case",
    "ipfs",
    "gateway",
    "would",
    "lot",
    "better",
    "ipfs",
    "form",
    "centralized",
    "server",
    "goes",
    "ever",
    "goes",
    "nft",
    "show",
    "show",
    "nothing",
    "would",
    "much",
    "better",
    "instead",
    "ipfs",
    "colon",
    "slash",
    "slash",
    "like",
    "instead",
    "going",
    "using",
    "go",
    "github",
    "grab",
    "section",
    "right",
    "go",
    "contracts",
    "basic",
    "nft",
    "grab",
    "top",
    "part",
    "copy",
    "like",
    "going",
    "paste",
    "token",
    "uri",
    "top",
    "like",
    "oh",
    "returns",
    "return",
    "go",
    "okay",
    "cool",
    "going",
    "copy",
    "paste",
    "like",
    "like",
    "said",
    "even",
    "though",
    "token",
    "uri",
    "pointing",
    "directly",
    "ipfs",
    "good",
    "actually",
    "go",
    "file",
    "file",
    "actually",
    "pointing",
    "nf",
    "nft",
    "case",
    "nf",
    "going",
    "make",
    "public",
    "constant",
    "variable",
    "well",
    "token",
    "write",
    "never",
    "going",
    "change",
    "going",
    "make",
    "nft",
    "everybody",
    "meets",
    "one",
    "exact",
    "adorable",
    "little",
    "puck",
    "way",
    "need",
    "identify",
    "actual",
    "token",
    "uri",
    "function",
    "going",
    "get",
    "token",
    "counter",
    "going",
    "say",
    "function",
    "token",
    "uri",
    "always",
    "take",
    "unt",
    "256",
    "token",
    "id",
    "going",
    "make",
    "public",
    "view",
    "override",
    "returns",
    "string",
    "memory",
    "needs",
    "return",
    "token",
    "uri",
    "going",
    "basic",
    "way",
    "create",
    "right",
    "wanted",
    "make",
    "function",
    "little",
    "nicer",
    "comment",
    "token",
    "id",
    "well",
    "since",
    "actually",
    "using",
    "token",
    "id",
    "overriding",
    "erc",
    "721",
    "importing",
    "token",
    "id",
    "function",
    "token",
    "uri",
    "function",
    "overriding",
    "right",
    "using",
    "saying",
    "hey",
    "going",
    "use",
    "need",
    "work",
    "deploy",
    "rink",
    "b",
    "jump",
    "open",
    "c",
    "test",
    "net",
    "would",
    "deploy",
    "dog",
    "adorable",
    "little",
    "pop",
    "would",
    "shows",
    "minutes",
    "let",
    "go",
    "ahead",
    "let",
    "create",
    "little",
    "deploy",
    "function",
    "new",
    "folder",
    "deploy",
    "new",
    "file",
    "call",
    "one",
    "deploy",
    "basic",
    "nf",
    "dot",
    "j",
    "going",
    "look",
    "real",
    "similar",
    "everything",
    "done",
    "going",
    "move",
    "little",
    "bit",
    "quicker",
    "const",
    "network",
    "equals",
    "require",
    "hard",
    "hats",
    "const",
    "development",
    "chains",
    "equals",
    "require",
    "dot",
    "dot",
    "slash",
    "helper",
    "hard",
    "hats",
    "config",
    "think",
    "added",
    "going",
    "copy",
    "paste",
    "helper",
    "hardhead",
    "config",
    "last",
    "project",
    "get",
    "confused",
    "always",
    "come",
    "github",
    "go",
    "helper",
    "hardhead",
    "config",
    "grab",
    "const",
    "development",
    "chains",
    "say",
    "const",
    "verify",
    "equals",
    "require",
    "dot",
    "dot",
    "slash",
    "utils",
    "slash",
    "verify",
    "also",
    "going",
    "grab",
    "utils",
    "going",
    "copy",
    "paste",
    "utils",
    "folder",
    "alas",
    "project",
    "copy",
    "paste",
    "last",
    "project",
    "go",
    "straight",
    "repo",
    "grab",
    "verified",
    "dot",
    "j",
    "going",
    "go",
    "two",
    "functions",
    "little",
    "bit",
    "later",
    "least",
    "grab",
    "verified",
    "gon",
    "na",
    "start",
    "function",
    "module",
    "exports",
    "equals",
    "async",
    "function",
    "gon",
    "na",
    "get",
    "get",
    "named",
    "accounts",
    "deployments",
    "gon",
    "na",
    "say",
    "const",
    "deploy",
    "log",
    "equals",
    "deployments",
    "deployer",
    "equals",
    "await",
    "get",
    "named",
    "accounts",
    "little",
    "log",
    "get",
    "started",
    "basic",
    "nft",
    "take",
    "constructor",
    "parameters",
    "say",
    "const",
    "args",
    "equals",
    "little",
    "blank",
    "const",
    "basic",
    "nft",
    "equals",
    "await",
    "deploy",
    "basic",
    "nf",
    "exactly",
    "seen",
    "number",
    "times",
    "point",
    "say",
    "deployer",
    "args",
    "going",
    "args",
    "log",
    "going",
    "true",
    "also",
    "weight",
    "confirmations",
    "going",
    "network",
    "dot",
    "config",
    "dot",
    "block",
    "confirmations",
    "one",
    "want",
    "verify",
    "going",
    "development",
    "chains",
    "dot",
    "includes",
    "network",
    "dot",
    "name",
    "process",
    "emv",
    "dot",
    "ether",
    "scan",
    "api",
    "key",
    "say",
    "log",
    "verifying",
    "dot",
    "dot",
    "await",
    "verify",
    "basic",
    "nf",
    "dot",
    "address",
    "arguments",
    "going",
    "blank",
    "grab",
    "little",
    "log",
    "stick",
    "right",
    "underneath",
    "actually",
    "basic",
    "nf",
    "args",
    "arguments",
    "deploy",
    "script",
    "basic",
    "nft",
    "test",
    "data",
    "deploy",
    "script",
    "hh",
    "deploy",
    "yarn",
    "hardhead",
    "deploy",
    "oops",
    "let",
    "go",
    "back",
    "basic",
    "kind",
    "tea",
    "mint",
    "tea",
    "needs",
    "return",
    "unt",
    "try",
    "get",
    "token",
    "counter",
    "also",
    "needs",
    "return",
    "unt",
    "forget",
    "anywhere",
    "else",
    "nope",
    "okay",
    "looking",
    "good",
    "looks",
    "like",
    "compiling",
    "well",
    "compiled",
    "deploying",
    "well",
    "want",
    "deploy",
    "rink",
    "b",
    "recommend",
    "holding",
    "though",
    "going",
    "end",
    "written",
    "deploy",
    "script",
    "written",
    "contract",
    "already",
    "know",
    "coming",
    "next",
    "yes",
    "neat",
    "next",
    "tests",
    "actually",
    "learning",
    "much",
    "going",
    "walk",
    "writing",
    "test",
    "going",
    "challenge",
    "pause",
    "video",
    "write",
    "test",
    "see",
    "far",
    "test",
    "actually",
    "get",
    "remember",
    "test",
    "going",
    "want",
    "run",
    "yarn",
    "hard",
    "hat",
    "test",
    "right",
    "let",
    "see",
    "actually",
    "write",
    "test",
    "come",
    "back",
    "video",
    "see",
    "tests",
    "good",
    "good",
    "course",
    "always",
    "go",
    "github",
    "repo",
    "test",
    "sections",
    "get",
    "lost",
    "look",
    "basic",
    "follow",
    "along",
    "right",
    "welcome",
    "back",
    "hopefully",
    "wrote",
    "awesome",
    "tests",
    "taking",
    "time",
    "actually",
    "exercises",
    "really",
    "going",
    "make",
    "much",
    "better",
    "engineer",
    "following",
    "along",
    "awesome",
    "tinkering",
    "trying",
    "everything",
    "really",
    "gon",
    "na",
    "make",
    "stick",
    "hope",
    "pause",
    "video",
    "hope",
    "go",
    "ahead",
    "try",
    "write",
    "test",
    "technically",
    "created",
    "really",
    "minimalistic",
    "nft",
    "great",
    "job",
    "let",
    "kick",
    "things",
    "notch",
    "let",
    "move",
    "random",
    "ipfs",
    "hosted",
    "nft",
    "going",
    "everything",
    "pretty",
    "much",
    "programmatically",
    "let",
    "jump",
    "contracts",
    "going",
    "create",
    "new",
    "file",
    "random",
    "ipfs",
    "nft",
    "dot",
    "soul",
    "thing",
    "spdx",
    "license",
    "identifier",
    "gon",
    "na",
    "mit",
    "pragma",
    "solidity",
    "carrot",
    "zero",
    "point",
    "whatever",
    "version",
    "want",
    "use",
    "contract",
    "random",
    "ipfs",
    "nf",
    "like",
    "one",
    "going",
    "instead",
    "minting",
    "nft",
    "meant",
    "nf",
    "trigger",
    "chainlink",
    "vrf",
    "call",
    "get",
    "us",
    "random",
    "number",
    "using",
    "number",
    "get",
    "get",
    "random",
    "nf",
    "going",
    "decide",
    "random",
    "n",
    "going",
    "use",
    "going",
    "either",
    "pug",
    "shiva",
    "bernard",
    "whenever",
    "anybody",
    "mints",
    "nf",
    "gon",
    "na",
    "get",
    "one",
    "random",
    "three",
    "dogs",
    "going",
    "make",
    "one",
    "dogs",
    "different",
    "rarity",
    "going",
    "make",
    "dogs",
    "rare",
    "different",
    "amounts",
    "say",
    "want",
    "pug",
    "super",
    "rare",
    "shiva",
    "sort",
    "rare",
    "bernard",
    "pretty",
    "common",
    "probably",
    "gon",
    "na",
    "super",
    "rare",
    "shiva",
    "us",
    "gon",
    "na",
    "sort",
    "rare",
    "bernard",
    "going",
    "pretty",
    "common",
    "right",
    "common",
    "let",
    "go",
    "ahead",
    "start",
    "building",
    "probably",
    "gon",
    "na",
    "make",
    "function",
    "called",
    "like",
    "request",
    "nf",
    "going",
    "know",
    "gon",
    "na",
    "need",
    "kick",
    "channeling",
    "vrf",
    "request",
    "probably",
    "gon",
    "na",
    "make",
    "function",
    "fulfill",
    "random",
    "words",
    "going",
    "take",
    "un",
    "256",
    "request",
    "id",
    "un",
    "array",
    "memory",
    "random",
    "words",
    "seen",
    "done",
    "fulfill",
    "random",
    "words",
    "past",
    "let",
    "let",
    "even",
    "go",
    "one",
    "step",
    "make",
    "users",
    "pay",
    "mint",
    "nf",
    "going",
    "pay",
    "certain",
    "amount",
    "eath",
    "get",
    "nft",
    "owner",
    "contract",
    "withdraw",
    "eath",
    "basically",
    "paying",
    "artists",
    "paying",
    "artists",
    "create",
    "nf",
    "ones",
    "actually",
    "actually",
    "withdraw",
    "payment",
    "nf",
    "also",
    "going",
    "need",
    "course",
    "function",
    "token",
    "uri",
    "takes",
    "un",
    "basic",
    "nft",
    "gon",
    "na",
    "token",
    "actually",
    "looks",
    "like",
    "let",
    "go",
    "ahead",
    "get",
    "started",
    "creating",
    "red",
    "lines",
    "going",
    "draw",
    "crazy",
    "going",
    "add",
    "visibility",
    "make",
    "request",
    "nft",
    "public",
    "fulfill",
    "random",
    "words",
    "actually",
    "know",
    "past",
    "going",
    "internal",
    "token",
    "uri",
    "going",
    "public",
    "let",
    "build",
    "request",
    "nft",
    "request",
    "random",
    "number",
    "go",
    "back",
    "evm",
    "chains",
    "go",
    "using",
    "randomness",
    "follow",
    "along",
    "chain",
    "link",
    "figure",
    "get",
    "random",
    "number",
    "since",
    "know",
    "going",
    "working",
    "chain",
    "link",
    "want",
    "add",
    "chain",
    "link",
    "slash",
    "contracts",
    "back",
    "code",
    "base",
    "add",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "chain",
    "link",
    "slash",
    "contracts",
    "like",
    "perfect",
    "go",
    "ahead",
    "going",
    "import",
    "vrf",
    "consumer",
    "base",
    "v",
    "two",
    "vrf",
    "coordinator",
    "interface",
    "code",
    "know",
    "going",
    "use",
    "want",
    "copy",
    "paste",
    "docs",
    "absolutely",
    "go",
    "pause",
    "since",
    "going",
    "using",
    "view",
    "consumer",
    "base",
    "want",
    "inherit",
    "going",
    "say",
    "random",
    "ipfs",
    "f",
    "v",
    "rf",
    "consumer",
    "base",
    "v",
    "two",
    "little",
    "little",
    "wiggly",
    "line",
    "show",
    "saying",
    "seems",
    "override",
    "gon",
    "na",
    "go",
    "ahead",
    "add",
    "override",
    "little",
    "wiggly",
    "line",
    "gon",
    "na",
    "stay",
    "little",
    "bit",
    "implement",
    "rest",
    "functions",
    "let",
    "go",
    "ahead",
    "implement",
    "rest",
    "functions",
    "request",
    "nft",
    "course",
    "going",
    "public",
    "order",
    "us",
    "request",
    "nf",
    "going",
    "need",
    "call",
    "coordinator",
    "dot",
    "request",
    "random",
    "words",
    "pass",
    "stuff",
    "right",
    "let",
    "go",
    "ahead",
    "get",
    "stuff",
    "v",
    "ref",
    "coordinator",
    "constructor",
    "let",
    "create",
    "new",
    "constructor",
    "struct",
    "door",
    "going",
    "use",
    "vrf",
    "consumer",
    "base",
    "two",
    "constructor",
    "use",
    "create",
    "constructor",
    "vrf",
    "consumer",
    "base",
    "v",
    "two",
    "needs",
    "address",
    "vrf",
    "consumer",
    "base",
    "go",
    "ahead",
    "address",
    "vrf",
    "nate",
    "torre",
    "b",
    "two",
    "pass",
    "vrf",
    "consumer",
    "base",
    "constructor",
    "adding",
    "red",
    "squiggly",
    "line",
    "gone",
    "away",
    "perfect",
    "want",
    "save",
    "address",
    "global",
    "variable",
    "call",
    "request",
    "random",
    "words",
    "gon",
    "na",
    "go",
    "ahead",
    "going",
    "say",
    "underscore",
    "var",
    "f",
    "chord",
    "tor",
    "going",
    "make",
    "immutable",
    "vrf",
    "coordinator",
    "going",
    "saying",
    "vrf",
    "v2",
    "interface",
    "gon",
    "na",
    "private",
    "immutable",
    "coordinator",
    "constructor",
    "gon",
    "na",
    "say",
    "ivf",
    "coordinator",
    "equals",
    "vrf",
    "coordinator",
    "v2",
    "interface",
    "wrapped",
    "around",
    "like",
    "know",
    "going",
    "need",
    "know",
    "actually",
    "gon",
    "na",
    "need",
    "ton",
    "let",
    "add",
    "variables",
    "gon",
    "na",
    "need",
    "coordinator",
    "gon",
    "na",
    "need",
    "unt",
    "64",
    "private",
    "immutable",
    "underscore",
    "subscription",
    "id",
    "gon",
    "na",
    "need",
    "bytes",
    "32",
    "private",
    "immutable",
    "underscore",
    "gas",
    "lane",
    "gon",
    "na",
    "need",
    "int",
    "32",
    "private",
    "mutable",
    "underscore",
    "callback",
    "gas",
    "limit",
    "gon",
    "na",
    "need",
    "unt",
    "16",
    "private",
    "constants",
    "request",
    "confirmations",
    "gon",
    "na",
    "say",
    "gon",
    "na",
    "three",
    "un",
    "private",
    "constant",
    "equals",
    "num",
    "words",
    "going",
    "one",
    "get",
    "red",
    "squiggly",
    "line",
    "saying",
    "mad",
    "constructor",
    "let",
    "go",
    "ahead",
    "add",
    "immutable",
    "variables",
    "constructor",
    "get",
    "vrf",
    "coordinator",
    "v2",
    "constructor",
    "get",
    "unt",
    "64",
    "subscription",
    "id",
    "get",
    "bytes",
    "32",
    "gas",
    "lane",
    "aka",
    "key",
    "hash",
    "get",
    "un",
    "unt",
    "32",
    "callback",
    "gas",
    "limit",
    "go",
    "ahead",
    "subscription",
    "id",
    "equals",
    "subscription",
    "id",
    "gas",
    "lane",
    "equals",
    "gas",
    "lane",
    "call",
    "back",
    "gas",
    "limit",
    "equals",
    "call",
    "back",
    "yes",
    "limit",
    "okay",
    "lot",
    "variables",
    "set",
    "variables",
    "going",
    "need",
    "chainlink",
    "vrf",
    "variables",
    "request",
    "request",
    "random",
    "number",
    "get",
    "random",
    "n",
    "going",
    "say",
    "returns",
    "yuan",
    "tivity",
    "six",
    "request",
    "id",
    "say",
    "request",
    "id",
    "request",
    "id",
    "initialized",
    "underscore",
    "vrf",
    "core",
    "tor",
    "dot",
    "request",
    "random",
    "words",
    "look",
    "pretty",
    "familiar",
    "lottery",
    "underscore",
    "gas",
    "lane",
    "comma",
    "underscore",
    "subscription",
    "id",
    "comma",
    "request",
    "con",
    "nations",
    "underscore",
    "callback",
    "gas",
    "limit",
    "course",
    "num",
    "words",
    "literally",
    "copy",
    "paste",
    "documentation",
    "last",
    "project",
    "whatever",
    "want",
    "requesting",
    "random",
    "nft",
    "thing",
    "though",
    "want",
    "whoever",
    "called",
    "request",
    "function",
    "tea",
    "right",
    "saw",
    "basic",
    "nft",
    "minted",
    "nft",
    "call",
    "safe",
    "mint",
    "needed",
    "owner",
    "token",
    "counter",
    "request",
    "random",
    "number",
    "four",
    "nft",
    "going",
    "happen",
    "two",
    "transactions",
    "right",
    "going",
    "request",
    "later",
    "going",
    "fulfill",
    "going",
    "chain",
    "link",
    "node",
    "calling",
    "fulfill",
    "random",
    "words",
    "fulfill",
    "function",
    "safe",
    "meant",
    "message",
    "sender",
    "owner",
    "nft",
    "actually",
    "going",
    "chain",
    "link",
    "node",
    "fulfilled",
    "random",
    "words",
    "want",
    "want",
    "want",
    "create",
    "mapping",
    "request",
    "ids",
    "whoever",
    "called",
    "call",
    "fulfill",
    "random",
    "words",
    "returns",
    "exact",
    "request",
    "id",
    "say",
    "ah",
    "okay",
    "request",
    "id",
    "x",
    "belong",
    "person",
    "called",
    "request",
    "team",
    "going",
    "create",
    "mapping",
    "people",
    "call",
    "request",
    "ids",
    "fulfill",
    "random",
    "words",
    "properly",
    "assign",
    "dogs",
    "top",
    "right",
    "underneath",
    "going",
    "call",
    "vrf",
    "helpers",
    "going",
    "create",
    "mapping",
    "un",
    "address",
    "make",
    "public",
    "make",
    "private",
    "make",
    "public",
    "underscore",
    "request",
    "id",
    "sender",
    "call",
    "request",
    "f",
    "set",
    "request",
    "id",
    "sender",
    "request",
    "id",
    "equals",
    "message",
    "dot",
    "sender",
    "chain",
    "link",
    "node",
    "responds",
    "fulfill",
    "random",
    "words",
    "say",
    "address",
    "dog",
    "owner",
    "nft",
    "dog",
    "owner",
    "going",
    "equal",
    "request",
    "id",
    "sender",
    "request",
    "id",
    "way",
    "going",
    "chain",
    "link",
    "nodes",
    "going",
    "dog",
    "gon",
    "na",
    "whoever",
    "actually",
    "called",
    "requests",
    "nft",
    "okay",
    "cool",
    "way",
    "request",
    "random",
    "number",
    "random",
    "nf",
    "let",
    "go",
    "ahead",
    "mint",
    "random",
    "dog",
    "random",
    "nf",
    "user",
    "user",
    "using",
    "mapping",
    "else",
    "need",
    "well",
    "gon",
    "na",
    "need",
    "token",
    "counter",
    "let",
    "go",
    "ahead",
    "create",
    "token",
    "counter",
    "variable",
    "scroll",
    "make",
    "new",
    "section",
    "say",
    "un",
    "make",
    "lot",
    "public",
    "make",
    "easier",
    "might",
    "want",
    "make",
    "private",
    "use",
    "syntax",
    "underscore",
    "since",
    "stored",
    "variable",
    "token",
    "counter",
    "grab",
    "token",
    "counter",
    "say",
    "went",
    "new",
    "token",
    "id",
    "equals",
    "token",
    "counter",
    "dog",
    "owner",
    "token",
    "id",
    "go",
    "ahead",
    "mint",
    "mft",
    "safe",
    "mint",
    "owner",
    "new",
    "token",
    "id",
    "safe",
    "man",
    "going",
    "squiggly",
    "code",
    "gon",
    "na",
    "say",
    "safe",
    "mint",
    "function",
    "get",
    "well",
    "gon",
    "na",
    "need",
    "get",
    "open",
    "zeppelin",
    "going",
    "go",
    "ahead",
    "import",
    "open",
    "zeppelin",
    "slash",
    "contracts",
    "slash",
    "token",
    "slash",
    "erc",
    "721",
    "slash",
    "erc",
    "720",
    "say",
    "random",
    "ipfs",
    "empty",
    "vera",
    "consumer",
    "base",
    "also",
    "erc",
    "721",
    "constructor",
    "right",
    "v",
    "rf",
    "consumer",
    "base",
    "going",
    "put",
    "erc",
    "thing",
    "need",
    "give",
    "name",
    "symbol",
    "call",
    "random",
    "ipfs",
    "nf",
    "comma",
    "rin",
    "random",
    "ipfs",
    "nf",
    "team",
    "safe",
    "mint",
    "actually",
    "works",
    "gon",
    "na",
    "mad",
    "gon",
    "na",
    "override",
    "let",
    "stop",
    "getting",
    "mad",
    "public",
    "view",
    "override",
    "turns",
    "string",
    "memory",
    "squiggly",
    "line",
    "goes",
    "way",
    "okay",
    "cool",
    "great",
    "safe",
    "mint",
    "dog",
    "owner",
    "new",
    "token",
    "id",
    "done",
    "absolutely",
    "well",
    "know",
    "token",
    "looks",
    "like",
    "set",
    "want",
    "actually",
    "make",
    "dogs",
    "different",
    "rarities",
    "actually",
    "create",
    "dogs",
    "different",
    "rarities",
    "could",
    "create",
    "chance",
    "array",
    "array",
    "show",
    "different",
    "chances",
    "different",
    "dogs",
    "going",
    "create",
    "function",
    "going",
    "public",
    "pure",
    "function",
    "called",
    "get",
    "chance",
    "array",
    "going",
    "return",
    "went",
    "46",
    "size",
    "three",
    "memory",
    "chance",
    "array",
    "going",
    "represent",
    "different",
    "chances",
    "different",
    "dogs",
    "gon",
    "na",
    "say",
    "return",
    "10",
    "3100",
    "gon",
    "na",
    "say",
    "max",
    "chance",
    "value",
    "top",
    "empty",
    "variables",
    "gon",
    "na",
    "say",
    "went",
    "56",
    "internal",
    "constant",
    "max",
    "chance",
    "value",
    "equals",
    "making",
    "array",
    "saying",
    "index",
    "zero",
    "10",
    "percent",
    "chance",
    "happening",
    "saying",
    "index",
    "one",
    "20",
    "percent",
    "chance",
    "happening",
    "going",
    "30",
    "minus",
    "saying",
    "index",
    "two",
    "going",
    "60",
    "percent",
    "chance",
    "happening",
    "going",
    "10",
    "plus",
    "minus",
    "array",
    "identified",
    "percentages",
    "different",
    "dogs",
    "saying",
    "pug",
    "going",
    "10",
    "percent",
    "chance",
    "shiva",
    "20",
    "percent",
    "chance",
    "bernard",
    "70",
    "percent",
    "chance",
    "going",
    "use",
    "give",
    "token",
    "id",
    "minted",
    "dog",
    "breed",
    "gon",
    "na",
    "create",
    "new",
    "function",
    "called",
    "get",
    "breed",
    "modded",
    "rng",
    "reason",
    "calling",
    "get",
    "breed",
    "modded",
    "rng",
    "exactly",
    "way",
    "lottery",
    "got",
    "random",
    "number",
    "gon",
    "na",
    "say",
    "went",
    "56",
    "modded",
    "rng",
    "equals",
    "random",
    "words",
    "zero",
    "mod",
    "max",
    "chance",
    "value",
    "going",
    "mod",
    "number",
    "get",
    "like",
    "always",
    "going",
    "get",
    "number",
    "zero",
    "random",
    "words",
    "zero",
    "mod",
    "max",
    "chin",
    "value",
    "going",
    "seven",
    "means",
    "gon",
    "na",
    "get",
    "pug",
    "get",
    "means",
    "gon",
    "na",
    "get",
    "bernard",
    "get",
    "gon",
    "na",
    "get",
    "right",
    "bernard",
    "got",
    "12",
    "getting",
    "shiva",
    "mod",
    "id",
    "number",
    "get",
    "modeling",
    "random",
    "word",
    "zero",
    "going",
    "pug",
    "10",
    "shiba",
    "inu",
    "30",
    "100",
    "bernard",
    "get",
    "randomness",
    "values",
    "modded",
    "rng",
    "mod",
    "id",
    "number",
    "going",
    "zero",
    "okay",
    "function",
    "called",
    "get",
    "breed",
    "modded",
    "rng",
    "going",
    "take",
    "un",
    "256",
    "mod",
    "id",
    "rng",
    "make",
    "public",
    "pure",
    "function",
    "going",
    "return",
    "breed",
    "dog",
    "breed",
    "dog",
    "going",
    "email",
    "similar",
    "raffle",
    "state",
    "going",
    "right",
    "top",
    "since",
    "going",
    "type",
    "declaration",
    "say",
    "enum",
    "read",
    "going",
    "say",
    "zero",
    "number",
    "going",
    "pug",
    "ones",
    "number",
    "going",
    "shiva",
    "second",
    "one",
    "going",
    "bernard",
    "pug",
    "zero",
    "shiva",
    "10",
    "30",
    "st",
    "bernard",
    "30",
    "get",
    "breed",
    "modded",
    "rng",
    "public",
    "pure",
    "returns",
    "breed",
    "gon",
    "na",
    "loop",
    "gon",
    "na",
    "say",
    "intuitive",
    "six",
    "cumulative",
    "sum",
    "equals",
    "zero",
    "say",
    "went",
    "size",
    "three",
    "memory",
    "chance",
    "array",
    "equals",
    "yet",
    "chance",
    "array",
    "getting",
    "chance",
    "array",
    "going",
    "create",
    "little",
    "loop",
    "gon",
    "na",
    "say",
    "went",
    "56",
    "gon",
    "na",
    "start",
    "zero",
    "going",
    "less",
    "chance",
    "array",
    "dot",
    "length",
    "plus",
    "plus",
    "ran",
    "loop",
    "going",
    "say",
    "modded",
    "rng",
    "greater",
    "equal",
    "cumulative",
    "sum",
    "modded",
    "rng",
    "less",
    "cumulative",
    "sum",
    "plus",
    "chance",
    "array",
    "plus",
    "wherever",
    "chance",
    "array",
    "return",
    "breed",
    "ai",
    "outside",
    "gon",
    "na",
    "say",
    "cume",
    "cumulative",
    "sum",
    "plus",
    "equals",
    "chance",
    "array",
    "let",
    "say",
    "moderate",
    "orangey",
    "equals",
    "25",
    "shiva",
    "10",
    "saying",
    "mod",
    "rng",
    "25",
    "greater",
    "equal",
    "cumulative",
    "sum",
    "right",
    "zero",
    "less",
    "n",
    "moto",
    "g",
    "less",
    "cumulative",
    "sum",
    "plus",
    "chance",
    "array",
    "going",
    "10",
    "return",
    "breed",
    "cumulative",
    "sum",
    "currently",
    "zero",
    "plus",
    "chance",
    "10",
    "going",
    "true",
    "morarji",
    "since",
    "true",
    "going",
    "move",
    "second",
    "step",
    "cumulative",
    "sum",
    "plus",
    "equals",
    "chance",
    "right",
    "cumulative",
    "sum",
    "equal",
    "reached",
    "end",
    "loop",
    "restart",
    "one",
    "let",
    "try",
    "mod",
    "rng",
    "greater",
    "equal",
    "cumulative",
    "sum",
    "okay",
    "true",
    "cumulative",
    "sum",
    "mod",
    "rng",
    "mod",
    "rng",
    "less",
    "cumulative",
    "sum",
    "plus",
    "chance",
    "ai",
    "saying",
    "25",
    "less",
    "10",
    "plus",
    "30",
    "return",
    "breed",
    "ai",
    "true",
    "breed",
    "ai",
    "would",
    "true",
    "ai",
    "moment",
    "one",
    "scroll",
    "indeed",
    "shiva",
    "function",
    "going",
    "work",
    "going",
    "get",
    "us",
    "breed",
    "modeling",
    "bit",
    "reason",
    "really",
    "wacky",
    "stuff",
    "happens",
    "want",
    "go",
    "ahead",
    "add",
    "revert",
    "right",
    "returning",
    "breed",
    "return",
    "breed",
    "revert",
    "going",
    "create",
    "new",
    "error",
    "top",
    "random",
    "ipfs",
    "nft",
    "underscore",
    "underscore",
    "range",
    "bounds",
    "going",
    "say",
    "reason",
    "return",
    "anything",
    "revert",
    "random",
    "ipfs",
    "nft",
    "range",
    "bounds",
    "function",
    "okay",
    "get",
    "brief",
    "modded",
    "rng",
    "pack",
    "fulfill",
    "random",
    "words",
    "function",
    "let",
    "go",
    "ahead",
    "say",
    "uncomment",
    "say",
    "breed",
    "dog",
    "breed",
    "equals",
    "get",
    "breed",
    "modded",
    "rng",
    "pass",
    "modded",
    "rng",
    "let",
    "move",
    "safe",
    "mint",
    "us",
    "getting",
    "dog",
    "breeder",
    "mint",
    "add",
    "dog",
    "breed",
    "time",
    "gon",
    "na",
    "go",
    "ahead",
    "safe",
    "mint",
    "things",
    "set",
    "dog",
    "breed",
    "create",
    "mapping",
    "dog",
    "breed",
    "token",
    "uri",
    "reflected",
    "token",
    "uri",
    "function",
    "could",
    "could",
    "call",
    "function",
    "called",
    "set",
    "token",
    "uri",
    "openzeppelin",
    "erc",
    "721",
    "set",
    "token",
    "eye",
    "function",
    "however",
    "extension",
    "open",
    "zeppelin",
    "code",
    "called",
    "erc",
    "721",
    "uri",
    "storage",
    "version",
    "erc",
    "721",
    "comes",
    "function",
    "called",
    "set",
    "token",
    "uri",
    "call",
    "set",
    "token",
    "uri",
    "automatically",
    "update",
    "tokens",
    "token",
    "uri",
    "whatever",
    "set",
    "going",
    "use",
    "extension",
    "set",
    "token",
    "uri",
    "contract",
    "way",
    "instead",
    "token",
    "erc",
    "721",
    "year",
    "c",
    "721",
    "soul",
    "token",
    "erc",
    "721",
    "slash",
    "extensions",
    "slash",
    "c",
    "721",
    "arise",
    "storage",
    "say",
    "random",
    "ipfs",
    "erc",
    "721",
    "rice",
    "storage",
    "cool",
    "constructor",
    "still",
    "use",
    "erc",
    "721",
    "erc",
    "721",
    "uri",
    "storage",
    "extending",
    "erc",
    "contract",
    "comes",
    "additional",
    "functions",
    "like",
    "set",
    "token",
    "uri",
    "right",
    "safe",
    "meant",
    "actually",
    "going",
    "call",
    "set",
    "token",
    "uri",
    "new",
    "item",
    "id",
    "going",
    "give",
    "breeds",
    "token",
    "uri",
    "gon",
    "na",
    "give",
    "string",
    "relates",
    "whatever",
    "breed",
    "got",
    "based",
    "dog",
    "breed",
    "could",
    "right",
    "top",
    "nft",
    "variables",
    "could",
    "create",
    "string",
    "array",
    "internal",
    "alt",
    "dog",
    "token",
    "eyes",
    "gon",
    "na",
    "make",
    "constant",
    "would",
    "array",
    "strings",
    "created",
    "maybe",
    "code",
    "want",
    "make",
    "little",
    "bit",
    "variable",
    "want",
    "parameterize",
    "exactly",
    "going",
    "going",
    "create",
    "string",
    "array",
    "internal",
    "underscore",
    "dog",
    "token",
    "eyes",
    "going",
    "list",
    "urls",
    "urls",
    "point",
    "stuff",
    "like",
    "going",
    "code",
    "upload",
    "image",
    "want",
    "ipfs",
    "upload",
    "dog",
    "token",
    "arise",
    "accordingly",
    "constructor",
    "actually",
    "going",
    "take",
    "another",
    "parameter",
    "called",
    "string",
    "size",
    "three",
    "memory",
    "dog",
    "token",
    "eyes",
    "going",
    "pass",
    "constructor",
    "parameter",
    "different",
    "dog",
    "token",
    "arise",
    "going",
    "pass",
    "list",
    "dog",
    "token",
    "arise",
    "course",
    "zero",
    "going",
    "token",
    "uri",
    "pug",
    "one",
    "going",
    "shiva",
    "two",
    "course",
    "going",
    "bernard",
    "going",
    "pass",
    "list",
    "dog",
    "token",
    "eyes",
    "set",
    "token",
    "eye",
    "list",
    "created",
    "going",
    "set",
    "token",
    "uri",
    "token",
    "based",
    "array",
    "un",
    "256",
    "version",
    "breed",
    "casting",
    "dog",
    "breed",
    "back",
    "256",
    "get",
    "index",
    "way",
    "actually",
    "programmatically",
    "get",
    "provably",
    "random",
    "nft",
    "different",
    "randomness",
    "different",
    "one",
    "nf",
    "let",
    "go",
    "back",
    "little",
    "little",
    "comments",
    "made",
    "limited",
    "nft",
    "trigger",
    "chain",
    "link",
    "vrf",
    "call",
    "random",
    "number",
    "got",
    "rarities",
    "got",
    "minting",
    "awesome",
    "okay",
    "part",
    "though",
    "users",
    "pay",
    "minton",
    "nf",
    "owner",
    "contract",
    "withdraw",
    "eath",
    "okay",
    "stuff",
    "already",
    "done",
    "pretty",
    "familiar",
    "back",
    "request",
    "nf",
    "function",
    "make",
    "public",
    "payable",
    "need",
    "say",
    "message",
    "dot",
    "value",
    "less",
    "mint",
    "fee",
    "actually",
    "let",
    "go",
    "back",
    "constructor",
    "create",
    "mint",
    "fee",
    "int",
    "256",
    "mint",
    "fee",
    "256",
    "internal",
    "underscore",
    "mint",
    "fee",
    "make",
    "immutable",
    "say",
    "intervene",
    "equals",
    "mint",
    "fee",
    "message",
    "value",
    "less",
    "mint",
    "fee",
    "already",
    "know",
    "going",
    "revert",
    "need",
    "eath",
    "sent",
    "create",
    "new",
    "air",
    "called",
    "need",
    "eath",
    "sent",
    "actually",
    "air",
    "random",
    "ipfs",
    "ft",
    "underscore",
    "underscore",
    "need",
    "ii",
    "sent",
    "like",
    "copy",
    "paste",
    "boom",
    "adding",
    "line",
    "payable",
    "function",
    "people",
    "pay",
    "mint",
    "fee",
    "mint",
    "randomized",
    "nf",
    "also",
    "going",
    "want",
    "way",
    "owner",
    "withdraw",
    "scroll",
    "little",
    "bit",
    "scroll",
    "create",
    "function",
    "withdraw",
    "public",
    "want",
    "owner",
    "could",
    "create",
    "modifier",
    "know",
    "modifier",
    "owner",
    "could",
    "use",
    "openzeppelin",
    "openzeppelin",
    "also",
    "comes",
    "access",
    "code",
    "one",
    "ownable",
    "code",
    "already",
    "owner",
    "modifier",
    "us",
    "gon",
    "na",
    "go",
    "ahead",
    "import",
    "well",
    "import",
    "openzeppelin",
    "slash",
    "contracts",
    "slash",
    "access",
    "slash",
    "ownable",
    "dot",
    "som",
    "say",
    "contract",
    "random",
    "ipfs",
    "come",
    "ownable",
    "make",
    "withdrawal",
    "function",
    "owner",
    "whoever",
    "deployed",
    "contract",
    "going",
    "set",
    "owner",
    "want",
    "done",
    "u",
    "amount",
    "equals",
    "address",
    "dot",
    "balance",
    "bull",
    "success",
    "comma",
    "equals",
    "payable",
    "message",
    "dot",
    "sender",
    "call",
    "value",
    "going",
    "mount",
    "going",
    "call",
    "nothing",
    "going",
    "say",
    "success",
    "going",
    "revert",
    "transfer",
    "failed",
    "top",
    "going",
    "error",
    "transfer",
    "failed",
    "going",
    "copy",
    "little",
    "quicker",
    "like",
    "come",
    "back",
    "transfer",
    "failed",
    "paste",
    "gon",
    "na",
    "revert",
    "random",
    "ipfs",
    "transfer",
    "failed",
    "perfect",
    "withdrawal",
    "function",
    "way",
    "people",
    "pay",
    "art",
    "need",
    "token",
    "uri",
    "anymore",
    "call",
    "set",
    "token",
    "uri",
    "going",
    "set",
    "token",
    "uri",
    "us",
    "back",
    "erc",
    "721",
    "uri",
    "storage",
    "already",
    "function",
    "laid",
    "contract",
    "already",
    "token",
    "uri",
    "function",
    "explicitly",
    "set",
    "explicitly",
    "set",
    "ones",
    "going",
    "need",
    "function",
    "get",
    "meant",
    "fee",
    "public",
    "view",
    "turns",
    "went",
    "36",
    "turn",
    "meant",
    "fee",
    "need",
    "function",
    "get",
    "dog",
    "token",
    "eyes",
    "went",
    "36",
    "index",
    "public",
    "view",
    "returns",
    "string",
    "memory",
    "return",
    "underscore",
    "dog",
    "token",
    "eyes",
    "index",
    "need",
    "function",
    "get",
    "token",
    "counter",
    "public",
    "view",
    "turns",
    "56",
    "return",
    "underscore",
    "token",
    "counter",
    "alright",
    "wrote",
    "ton",
    "code",
    "course",
    "taught",
    "also",
    "going",
    "need",
    "events",
    "request",
    "nf",
    "going",
    "emit",
    "event",
    "omit",
    "nf",
    "requested",
    "pass",
    "request",
    "id",
    "message",
    "dot",
    "sender",
    "top",
    "say",
    "event",
    "nf",
    "requested",
    "pet",
    "take",
    "un",
    "256",
    "index",
    "request",
    "id",
    "address",
    "requester",
    "also",
    "going",
    "make",
    "event",
    "nf",
    "minted",
    "finally",
    "minted",
    "going",
    "take",
    "breed",
    "dog",
    "breed",
    "address",
    "mentor",
    "write",
    "fulfill",
    "going",
    "emit",
    "nft",
    "minted",
    "going",
    "take",
    "dog",
    "breed",
    "dog",
    "owner",
    "okay",
    "written",
    "lot",
    "code",
    "let",
    "go",
    "ahead",
    "see",
    "compile",
    "h",
    "h",
    "compile",
    "yarn",
    "hardhead",
    "compile",
    "wow",
    "looks",
    "like",
    "went",
    "ahead",
    "compiled",
    "great",
    "code",
    "looks",
    "good",
    "might",
    "good",
    "time",
    "take",
    "quick",
    "breather",
    "written",
    "lot",
    "code",
    "might",
    "good",
    "go",
    "stuff",
    "went",
    "lot",
    "familiar",
    "still",
    "really",
    "good",
    "redo",
    "stuff",
    "really",
    "get",
    "muscle",
    "memory",
    "credit",
    "nft",
    "contract",
    "mint",
    "one",
    "nf",
    "gon",
    "na",
    "get",
    "pug",
    "shiva",
    "bernard",
    "based",
    "rarity",
    "pug",
    "really",
    "rare",
    "ship",
    "sort",
    "rare",
    "bernard",
    "pretty",
    "common",
    "way",
    "request",
    "nf",
    "function",
    "people",
    "pay",
    "call",
    "makes",
    "request",
    "chain",
    "link",
    "node",
    "get",
    "random",
    "number",
    "contract",
    "gets",
    "random",
    "number",
    "uses",
    "chance",
    "array",
    "figure",
    "one",
    "nf",
    "going",
    "actually",
    "use",
    "minting",
    "going",
    "set",
    "token",
    "uri",
    "accordingly",
    "going",
    "store",
    "image",
    "data",
    "ipfs",
    "done",
    "yet",
    "deploy",
    "function",
    "going",
    "really",
    "interesting",
    "part",
    "contract",
    "went",
    "much",
    "want",
    "take",
    "quick",
    "break",
    "quick",
    "breather",
    "come",
    "back",
    "encourage",
    "learned",
    "lot",
    "wrote",
    "lot",
    "solidity",
    "code",
    "go",
    "take",
    "quick",
    "breather",
    "see",
    "minute",
    "let",
    "go",
    "ahead",
    "get",
    "create",
    "new",
    "deploy",
    "go",
    "ploy",
    "random",
    "going",
    "look",
    "really",
    "similar",
    "lottery",
    "contract",
    "already",
    "done",
    "copy",
    "boilerplate",
    "code",
    "gon",
    "na",
    "need",
    "copy",
    "close",
    "little",
    "curly",
    "boom",
    "already",
    "got",
    "boilerplate",
    "since",
    "working",
    "chainlink",
    "going",
    "working",
    "mocks",
    "gon",
    "na",
    "come",
    "back",
    "new",
    "file",
    "00",
    "deploy",
    "mocks",
    "dot",
    "j",
    "want",
    "copy",
    "paste",
    "earlier",
    "section",
    "raffle",
    "slash",
    "lottery",
    "since",
    "going",
    "exact",
    "thing",
    "gon",
    "na",
    "go",
    "ahead",
    "pause",
    "copy",
    "paste",
    "previous",
    "projects",
    "want",
    "come",
    "github",
    "repo",
    "associated",
    "course",
    "come",
    "deploy",
    "go",
    "ahead",
    "grab",
    "deploy",
    "mocks",
    "right",
    "grab",
    "github",
    "repo",
    "also",
    "going",
    "working",
    "mock",
    "v3",
    "aggregator",
    "going",
    "add",
    "part",
    "quite",
    "yet",
    "need",
    "quite",
    "yet",
    "go",
    "ahead",
    "pause",
    "video",
    "right",
    "copy",
    "paste",
    "vrf",
    "coordinator",
    "mock",
    "pause",
    "video",
    "try",
    "write",
    "mock",
    "code",
    "okay",
    "great",
    "done",
    "course",
    "gon",
    "na",
    "need",
    "concentrate",
    "id",
    "network",
    "dot",
    "config",
    "dot",
    "chain",
    "id",
    "gon",
    "na",
    "need",
    "decide",
    "actually",
    "development",
    "chain",
    "gon",
    "na",
    "say",
    "development",
    "chains",
    "includes",
    "network",
    "dot",
    "name",
    "gon",
    "na",
    "say",
    "const",
    "vrf",
    "coordinator",
    "b",
    "mock",
    "goes",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "vrf",
    "core",
    "name",
    "mock",
    "similar",
    "raffle",
    "gon",
    "na",
    "say",
    "let",
    "vrf",
    "coordinate",
    "tor",
    "v",
    "two",
    "address",
    "vrf",
    "coordinator",
    "v",
    "two",
    "address",
    "equals",
    "vrf",
    "coordinator",
    "v",
    "two",
    "mach",
    "mock",
    "address",
    "going",
    "want",
    "create",
    "subscription",
    "exactly",
    "lottery",
    "gon",
    "na",
    "say",
    "const",
    "tx",
    "equals",
    "weight",
    "vrf",
    "coordinate",
    "tore",
    "v",
    "mock",
    "dot",
    "create",
    "subscription",
    "const",
    "tx",
    "receipt",
    "equals",
    "weight",
    "tx",
    "dot",
    "weight",
    "one",
    "gon",
    "na",
    "get",
    "sub",
    "id",
    "exactly",
    "way",
    "lottery",
    "section",
    "say",
    "need",
    "sub",
    "id",
    "saying",
    "sub",
    "subscription",
    "id",
    "say",
    "subscription",
    "id",
    "equals",
    "tx",
    "receipt",
    "dot",
    "events",
    "zero",
    "args",
    "got",
    "somebody",
    "development",
    "chain",
    "else",
    "said",
    "vrf",
    "coordinate",
    "tore",
    "v",
    "address",
    "equals",
    "network",
    "config",
    "chain",
    "id",
    "dot",
    "vrf",
    "coordinate",
    "b",
    "subscription",
    "id",
    "equals",
    "network",
    "config",
    "chain",
    "id",
    "dot",
    "subscription",
    "id",
    "perfect",
    "double",
    "check",
    "helper",
    "hard",
    "hat",
    "config",
    "rigby",
    "vrf",
    "coordinator",
    "v2",
    "also",
    "going",
    "need",
    "subscription",
    "id",
    "right",
    "subscription",
    "id",
    "past",
    "project",
    "lottery",
    "project",
    "go",
    "ahead",
    "v",
    "f",
    "dot",
    "chain",
    "link",
    "go",
    "v",
    "rf",
    "chain",
    "link",
    "make",
    "sure",
    "rink",
    "b",
    "let",
    "see",
    "subscriptions",
    "looks",
    "like",
    "one",
    "going",
    "copy",
    "paste",
    "rigby",
    "go",
    "dockstar",
    "chain",
    "link",
    "evm",
    "chains",
    "contract",
    "addresses",
    "using",
    "reminisce",
    "see",
    "parameters",
    "especially",
    "rigby",
    "make",
    "sure",
    "correct",
    "subscription",
    "add",
    "new",
    "consumer",
    "soon",
    "deploy",
    "contract",
    "actually",
    "going",
    "use",
    "rankbrain",
    "little",
    "log",
    "bunch",
    "hyphens",
    "get",
    "args",
    "equals",
    "make",
    "arguments",
    "need",
    "need",
    "coordinator",
    "subscription",
    "gasoline",
    "callback",
    "address",
    "dog",
    "dog",
    "token",
    "eyes",
    "admin",
    "fee",
    "going",
    "need",
    "vrf",
    "coordinator",
    "address",
    "subscription",
    "id",
    "need",
    "network",
    "config",
    "chain",
    "id",
    "dot",
    "gas",
    "lane",
    "need",
    "network",
    "config",
    "chain",
    "id",
    "dot",
    "meant",
    "fee",
    "leave",
    "work",
    "config",
    "chain",
    "id",
    "dot",
    "callback",
    "gas",
    "limit",
    "right",
    "order",
    "yes",
    "need",
    "dog",
    "token",
    "eyes",
    "mint",
    "fee",
    "done",
    "array",
    "token",
    "eyes",
    "one",
    "couple",
    "ways",
    "go",
    "github",
    "repo",
    "associated",
    "go",
    "deploy",
    "actually",
    "randomness",
    "oh",
    "three",
    "get",
    "one",
    "section",
    "automatically",
    "say",
    "okay",
    "great",
    "token",
    "rise",
    "going",
    "three",
    "actually",
    "even",
    "copy",
    "paste",
    "cds",
    "ipfs",
    "better",
    "ones",
    "actually",
    "ipfs",
    "image",
    "see",
    "like",
    "could",
    "use",
    "stuff",
    "already",
    "deployed",
    "want",
    "absolutely",
    "100",
    "percent",
    "could",
    "get",
    "actually",
    "learn",
    "upload",
    "programmatically",
    "images",
    "ipfs",
    "sounds",
    "lot",
    "cooler",
    "let",
    "go",
    "ahead",
    "want",
    "want",
    "use",
    "images",
    "feel",
    "free",
    "want",
    "follow",
    "along",
    "us",
    "going",
    "go",
    "hardhead",
    "nft",
    "fcc",
    "repo",
    "going",
    "grab",
    "random",
    "nf",
    "come",
    "go",
    "ahead",
    "right",
    "click",
    "save",
    "image",
    "jas",
    "save",
    "downloads",
    "let",
    "actually",
    "create",
    "new",
    "folder",
    "call",
    "images",
    "images",
    "create",
    "new",
    "folder",
    "called",
    "random",
    "pull",
    "right",
    "make",
    "name",
    "random",
    "nft",
    "going",
    "plugged",
    "png",
    "images",
    "images",
    "tag",
    "pug",
    "ship",
    "st",
    "bernard",
    "locally",
    "want",
    "upload",
    "ipfs",
    "want",
    "upload",
    "way",
    "anybody",
    "actually",
    "pin",
    "work",
    "stuff",
    "get",
    "arguments",
    "deploy",
    "contract",
    "going",
    "need",
    "get",
    "ipfs",
    "hashes",
    "images",
    "couple",
    "ways",
    "ipfs",
    "node",
    "already",
    "shown",
    "manually",
    "also",
    "programmatically",
    "going",
    "show",
    "however",
    "go",
    "ipfs",
    "documentation",
    "actually",
    "learn",
    "command",
    "line",
    "even",
    "scripts",
    "however",
    "node",
    "running",
    "kind",
    "centralized",
    "ideally",
    "want",
    "images",
    "token",
    "eyes",
    "token",
    "metadata",
    "ipfs",
    "node",
    "nodes",
    "second",
    "way",
    "look",
    "using",
    "something",
    "like",
    "hinata",
    "hinata",
    "service",
    "basically",
    "pay",
    "help",
    "pin",
    "nf",
    "going",
    "one",
    "going",
    "looking",
    "issue",
    "binotto",
    "course",
    "paying",
    "single",
    "centralized",
    "entity",
    "go",
    "ahead",
    "pin",
    "data",
    "kind",
    "trusting",
    "actually",
    "going",
    "pin",
    "going",
    "go",
    "final",
    "way",
    "could",
    "look",
    "actually",
    "getting",
    "data",
    "thing",
    "called",
    "nf",
    "dot",
    "storage",
    "dot",
    "storage",
    "uses",
    "file",
    "coin",
    "network",
    "back",
    "end",
    "pin",
    "data",
    "filecoin",
    "blockchain",
    "dedicated",
    "pinning",
    "ipfs",
    "data",
    "storing",
    "decentralized",
    "data",
    "us",
    "process",
    "little",
    "bit",
    "complicated",
    "nft",
    "dot",
    "storage",
    "makes",
    "really",
    "really",
    "easy",
    "going",
    "go",
    "using",
    "nft",
    "dot",
    "storage",
    "video",
    "however",
    "want",
    "look",
    "nf",
    "dot",
    "storage",
    "putting",
    "data",
    "github",
    "repo",
    "associated",
    "course",
    "script",
    "uploads",
    "code",
    "nft",
    "storage",
    "called",
    "utils",
    "folder",
    "upload",
    "nft",
    "storage",
    "want",
    "go",
    "try",
    "recommend",
    "working",
    "nf",
    "dot",
    "storage",
    "one",
    "persistent",
    "ways",
    "keep",
    "data",
    "still",
    "good",
    "upload",
    "data",
    "ipfs",
    "node",
    "learned",
    "manually",
    "least",
    "get",
    "one",
    "person",
    "also",
    "pinning",
    "data",
    "ideally",
    "entire",
    "decentralized",
    "network",
    "pinning",
    "data",
    "nfs",
    "storage",
    "helps",
    "us",
    "going",
    "work",
    "pinata",
    "keep",
    "nice",
    "simple",
    "video",
    "uploading",
    "uploading",
    "metadata",
    "token",
    "eyes",
    "ipfs",
    "give",
    "us",
    "list",
    "token",
    "eyes",
    "three",
    "dogs",
    "top",
    "going",
    "little",
    "gon",
    "na",
    "say",
    "process",
    "dot",
    "e",
    "nv",
    "dot",
    "upload",
    "pinata",
    "equals",
    "true",
    "yes",
    "going",
    "use",
    "string",
    "true",
    "like",
    "going",
    "upload",
    "pinata",
    "going",
    "say",
    "let",
    "token",
    "eyes",
    "gon",
    "na",
    "say",
    "token",
    "eyes",
    "equals",
    "await",
    "handle",
    "token",
    "eyes",
    "going",
    "create",
    "function",
    "called",
    "handle",
    "token",
    "eyes",
    "going",
    "upload",
    "code",
    "pinata",
    "outside",
    "going",
    "create",
    "new",
    "function",
    "called",
    "async",
    "function",
    "token",
    "eyes",
    "going",
    "return",
    "array",
    "token",
    "eyes",
    "us",
    "upload",
    "smart",
    "contract",
    "gon",
    "na",
    "say",
    "token",
    "eyes",
    "equals",
    "way",
    "bottom",
    "gon",
    "na",
    "say",
    "return",
    "token",
    "rise",
    "right",
    "going",
    "returning",
    "array",
    "need",
    "two",
    "things",
    "need",
    "store",
    "image",
    "ipfs",
    "need",
    "store",
    "metadata",
    "ipfs",
    "first",
    "going",
    "create",
    "store",
    "images",
    "function",
    "going",
    "actually",
    "get",
    "go",
    "utils",
    "going",
    "create",
    "new",
    "folder",
    "going",
    "create",
    "file",
    "called",
    "new",
    "file",
    "upload",
    "pinata",
    "dot",
    "j",
    "going",
    "add",
    "code",
    "actually",
    "uploading",
    "pinata",
    "pinata",
    "service",
    "going",
    "using",
    "pin",
    "data",
    "us",
    "work",
    "pinata",
    "go",
    "ahead",
    "try",
    "free",
    "create",
    "application",
    "good",
    "go",
    "see",
    "setup",
    "looks",
    "really",
    "similar",
    "ipfs",
    "node",
    "essentially",
    "pinata",
    "ipfs",
    "node",
    "run",
    "somebody",
    "else",
    "say",
    "hey",
    "please",
    "pin",
    "data",
    "us",
    "manual",
    "way",
    "could",
    "could",
    "hit",
    "upload",
    "cid",
    "like",
    "ipfs",
    "node",
    "put",
    "hash",
    "ipfs",
    "file",
    "pinata",
    "would",
    "pin",
    "us",
    "could",
    "also",
    "upload",
    "file",
    "folder",
    "like",
    "ipfs",
    "node",
    "us",
    "going",
    "leave",
    "blank",
    "going",
    "want",
    "programmatically",
    "engineers",
    "come",
    "profile",
    "open",
    "api",
    "keys",
    "documentation",
    "documentation",
    "pretty",
    "much",
    "everything",
    "need",
    "get",
    "started",
    "scroll",
    "pinata",
    "node",
    "js",
    "sdk",
    "basically",
    "going",
    "working",
    "already",
    "created",
    "sdk",
    "us",
    "work",
    "gon",
    "na",
    "go",
    "ahead",
    "install",
    "pinata",
    "sdk",
    "using",
    "npm",
    "install",
    "dash",
    "save",
    "gon",
    "na",
    "go",
    "ahead",
    "use",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "pinata",
    "dash",
    "sdk",
    "different",
    "endpoints",
    "call",
    "actually",
    "pin",
    "data",
    "going",
    "pin",
    "file",
    "ipfs",
    "going",
    "upload",
    "files",
    "also",
    "pin",
    "json",
    "ipfs",
    "since",
    "json",
    "going",
    "metadata",
    "file",
    "going",
    "actual",
    "image",
    "click",
    "even",
    "give",
    "kind",
    "output",
    "sdk",
    "back",
    "code",
    "downloaded",
    "go",
    "ahead",
    "start",
    "creating",
    "say",
    "const",
    "pinata",
    "sdk",
    "equals",
    "require",
    "pinata",
    "slash",
    "sdk",
    "create",
    "function",
    "async",
    "function",
    "called",
    "store",
    "images",
    "take",
    "images",
    "file",
    "path",
    "going",
    "use",
    "function",
    "pass",
    "images",
    "random",
    "n",
    "file",
    "paths",
    "going",
    "store",
    "everything",
    "folder",
    "help",
    "us",
    "work",
    "paths",
    "also",
    "going",
    "install",
    "path",
    "package",
    "gon",
    "na",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "path",
    "like",
    "going",
    "work",
    "fs",
    "well",
    "fs",
    "extra",
    "gon",
    "na",
    "say",
    "const",
    "path",
    "equals",
    "require",
    "path",
    "gon",
    "na",
    "say",
    "const",
    "full",
    "images",
    "path",
    "equals",
    "path",
    "dot",
    "resolve",
    "images",
    "file",
    "path",
    "give",
    "like",
    "dot",
    "slash",
    "images",
    "slash",
    "random",
    "know",
    "nf",
    "whatever",
    "give",
    "us",
    "give",
    "full",
    "output",
    "path",
    "getting",
    "full",
    "images",
    "path",
    "say",
    "get",
    "files",
    "const",
    "files",
    "equals",
    "fs",
    "grab",
    "say",
    "const",
    "fs",
    "equals",
    "require",
    "fs",
    "read",
    "files",
    "read",
    "dirsync",
    "going",
    "read",
    "entire",
    "directory",
    "get",
    "files",
    "back",
    "read",
    "dirsync",
    "full",
    "images",
    "path",
    "actually",
    "test",
    "working",
    "going",
    "going",
    "module",
    "dot",
    "exports",
    "equals",
    "store",
    "images",
    "back",
    "deploy",
    "script",
    "go",
    "ahead",
    "comment",
    "args",
    "import",
    "const",
    "store",
    "images",
    "equals",
    "require",
    "dot",
    "dot",
    "slash",
    "utils",
    "slash",
    "upload",
    "pinata",
    "script",
    "could",
    "little",
    "call",
    "could",
    "say",
    "await",
    "images",
    "pass",
    "pass",
    "images",
    "location",
    "maybe",
    "way",
    "top",
    "even",
    "outside",
    "function",
    "say",
    "const",
    "images",
    "location",
    "equals",
    "dot",
    "slash",
    "images",
    "slash",
    "random",
    "weight",
    "store",
    "images",
    "like",
    "able",
    "run",
    "hardhead",
    "deploy",
    "add",
    "tags",
    "deploy",
    "thing",
    "module",
    "dot",
    "exports",
    "dot",
    "tags",
    "equals",
    "say",
    "random",
    "ipfs",
    "main",
    "hardhead",
    "deployed",
    "dash",
    "dash",
    "tags",
    "random",
    "ipfs",
    "also",
    "mocks",
    "believe",
    "need",
    "create",
    "test",
    "folder",
    "new",
    "folder",
    "test",
    "need",
    "add",
    "vf",
    "coordinator",
    "v2",
    "mock",
    "copy",
    "pasting",
    "vrf",
    "coordinator",
    "v2",
    "mock",
    "raffle",
    "project",
    "feel",
    "free",
    "pause",
    "copy",
    "paste",
    "everything",
    "available",
    "github",
    "try",
    "one",
    "time",
    "tags",
    "random",
    "ipfs",
    "mocks",
    "boom",
    "okay",
    "mocks",
    "deployed",
    "perfect",
    "pug",
    "dot",
    "png",
    "ship",
    "png",
    "bernard",
    "png",
    "great",
    "getting",
    "files",
    "correctly",
    "let",
    "create",
    "little",
    "array",
    "responses",
    "pinata",
    "server",
    "say",
    "responses",
    "equals",
    "say",
    "file",
    "index",
    "files",
    "one",
    "files",
    "gon",
    "na",
    "say",
    "const",
    "readable",
    "stream",
    "file",
    "equals",
    "fs",
    "dot",
    "create",
    "read",
    "stream",
    "full",
    "images",
    "path",
    "slash",
    "files",
    "file",
    "index",
    "line",
    "well",
    "creating",
    "read",
    "stream",
    "since",
    "image",
    "file",
    "work",
    "exactly",
    "like",
    "push",
    "data",
    "right",
    "create",
    "stream",
    "stream",
    "data",
    "inside",
    "images",
    "images",
    "even",
    "though",
    "like",
    "cute",
    "little",
    "image",
    "really",
    "kind",
    "big",
    "file",
    "bytes",
    "data",
    "going",
    "send",
    "try",
    "say",
    "const",
    "response",
    "equals",
    "await",
    "going",
    "pinata",
    "stuff",
    "go",
    "back",
    "pinata",
    "docks",
    "stuff",
    "keys",
    "go",
    "profile",
    "go",
    "api",
    "keys",
    "create",
    "new",
    "key",
    "say",
    "admin",
    "key",
    "give",
    "pinning",
    "access",
    "maybe",
    "give",
    "maybe",
    "give",
    "everything",
    "whatever",
    "want",
    "call",
    "hard",
    "hat",
    "free",
    "code",
    "camp",
    "key",
    "create",
    "key",
    "going",
    "want",
    "grab",
    "drop",
    "dot",
    "env",
    "api",
    "key",
    "go",
    "ahead",
    "copy",
    "come",
    "back",
    "open",
    "dot",
    "env",
    "gon",
    "na",
    "call",
    "pinata",
    "data",
    "api",
    "key",
    "equals",
    "key",
    "going",
    "grab",
    "api",
    "secret",
    "say",
    "pinata",
    "api",
    "secret",
    "equals",
    "key",
    "need",
    "massive",
    "token",
    "going",
    "want",
    "absolutely",
    "outside",
    "store",
    "images",
    "going",
    "say",
    "const",
    "pinata",
    "api",
    "key",
    "equals",
    "price",
    "says",
    "need",
    "pinata",
    "api",
    "key",
    "ca",
    "pinata",
    "api",
    "secret",
    "equals",
    "process",
    "dot",
    "e",
    "v",
    "dot",
    "pinata",
    "api",
    "secret",
    "say",
    "const",
    "pinata",
    "equals",
    "pin",
    "auta",
    "dk",
    "pinata",
    "api",
    "key",
    "comma",
    "pinata",
    "api",
    "secret",
    "order",
    "work",
    "pinata",
    "need",
    "pass",
    "api",
    "key",
    "api",
    "secret",
    "pinata",
    "knows",
    "us",
    "working",
    "initialize",
    "pinata",
    "thing",
    "run",
    "pinata",
    "dot",
    "pinata",
    "stuff",
    "right",
    "want",
    "work",
    "pin",
    "file",
    "ipfs",
    "takes",
    "readable",
    "stream",
    "created",
    "readable",
    "string",
    "pinata",
    "pin",
    "file",
    "ipfs",
    "readable",
    "stream",
    "file",
    "going",
    "push",
    "response",
    "responses",
    "array",
    "say",
    "responses",
    "dot",
    "push",
    "response",
    "going",
    "catch",
    "error",
    "case",
    "weird",
    "error",
    "say",
    "console",
    "dot",
    "log",
    "error",
    "going",
    "return",
    "responses",
    "files",
    "going",
    "return",
    "responses",
    "pushing",
    "files",
    "files",
    "well",
    "current",
    "point",
    "go",
    "ahead",
    "actually",
    "test",
    "go",
    "back",
    "deploy",
    "top",
    "process",
    "dot",
    "e",
    "v",
    "dot",
    "upload",
    "niada",
    "equals",
    "true",
    "stuff",
    "uploading",
    "ipfs",
    "final",
    "thing",
    "need",
    "course",
    "going",
    "require",
    "dot",
    "env",
    "dot",
    "config",
    "pull",
    "dot",
    "env",
    "file",
    "weight",
    "store",
    "images",
    "run",
    "go",
    "ahead",
    "store",
    "images",
    "let",
    "run",
    "command",
    "deploy",
    "random",
    "ipfs",
    "mox",
    "run",
    "store",
    "images",
    "command",
    "come",
    "back",
    "pinata",
    "run",
    "able",
    "see",
    "code",
    "uploaded",
    "run",
    "script",
    "loaded",
    "ipfs",
    "give",
    "us",
    "little",
    "bit",
    "delay",
    "needs",
    "upload",
    "big",
    "picture",
    "files",
    "ipfs",
    "correctly",
    "pinata",
    "gon",
    "na",
    "say",
    "uploading",
    "nada",
    "could",
    "even",
    "say",
    "console",
    "dot",
    "log",
    "working",
    "file",
    "index",
    "done",
    "excel",
    "okay",
    "great",
    "looks",
    "like",
    "finished",
    "running",
    "come",
    "back",
    "project",
    "little",
    "refresh",
    "see",
    "three",
    "files",
    "uploaded",
    "see",
    "come",
    "cid",
    "want",
    "go",
    "ahead",
    "copy",
    "cid",
    "ipfs",
    "node",
    "actually",
    "hit",
    "import",
    "ipfs",
    "paste",
    "say",
    "exactly",
    "ipfs",
    "dot",
    "dot",
    "slash",
    "last",
    "bernard",
    "called",
    "bernard",
    "important",
    "pinned",
    "ipfs",
    "got",
    "mine",
    "saved",
    "little",
    "puppies",
    "file",
    "got",
    "uploaded",
    "pinata",
    "actually",
    "recommend",
    "pin",
    "node",
    "well",
    "cool",
    "got",
    "way",
    "get",
    "images",
    "onto",
    "ipfs",
    "awesome",
    "onto",
    "done",
    "also",
    "going",
    "need",
    "store",
    "token",
    "uri",
    "metadata",
    "let",
    "go",
    "ahead",
    "delete",
    "back",
    "back",
    "top",
    "say",
    "const",
    "meta",
    "data",
    "template",
    "equals",
    "create",
    "metadata",
    "template",
    "going",
    "basics",
    "need",
    "metadata",
    "token",
    "uri",
    "name",
    "set",
    "blank",
    "description",
    "also",
    "set",
    "blank",
    "image",
    "going",
    "replaced",
    "image",
    "uri",
    "ipfs",
    "uri",
    "created",
    "want",
    "give",
    "nft",
    "like",
    "types",
    "stats",
    "create",
    "attributes",
    "section",
    "like",
    "give",
    "like",
    "traits",
    "type",
    "cuteness",
    "comma",
    "value",
    "wanted",
    "create",
    "like",
    "different",
    "cards",
    "different",
    "attack",
    "defense",
    "hp",
    "speed",
    "different",
    "different",
    "stats",
    "nf",
    "would",
    "add",
    "attributes",
    "section",
    "typically",
    "want",
    "attributes",
    "also",
    "stored",
    "chain",
    "contracts",
    "obviously",
    "programmatically",
    "interact",
    "attributes",
    "metadata",
    "data",
    "template",
    "going",
    "fill",
    "one",
    "dogs",
    "yes",
    "going",
    "create",
    "new",
    "function",
    "called",
    "async",
    "store",
    "token",
    "uri",
    "metadata",
    "pass",
    "meta",
    "data",
    "async",
    "function",
    "pass",
    "metadata",
    "get",
    "script",
    "little",
    "template",
    "going",
    "populate",
    "template",
    "based",
    "get",
    "storing",
    "data",
    "ipfs",
    "going",
    "write",
    "rest",
    "handle",
    "token",
    "eyes",
    "bit",
    "going",
    "want",
    "data",
    "v",
    "going",
    "say",
    "upload",
    "pinata",
    "equals",
    "true",
    "everything",
    "handle",
    "token",
    "eyes",
    "upload",
    "pinata",
    "true",
    "scroll",
    "start",
    "creating",
    "first",
    "thing",
    "got",
    "obviously",
    "gon",
    "na",
    "want",
    "get",
    "responses",
    "files",
    "right",
    "responses",
    "pin",
    "file",
    "ipfs",
    "going",
    "return",
    "hash",
    "file",
    "right",
    "need",
    "hash",
    "add",
    "metadata",
    "going",
    "gon",
    "na",
    "say",
    "const",
    "responses",
    "going",
    "image",
    "upload",
    "responses",
    "comma",
    "files",
    "equals",
    "await",
    "store",
    "images",
    "images",
    "location",
    "response",
    "going",
    "list",
    "responses",
    "pinata",
    "responses",
    "going",
    "hash",
    "one",
    "uploaded",
    "files",
    "going",
    "loop",
    "list",
    "upload",
    "metadata",
    "going",
    "say",
    "image",
    "upload",
    "response",
    "index",
    "image",
    "upload",
    "responses",
    "one",
    "going",
    "create",
    "metadata",
    "going",
    "create",
    "metadata",
    "upload",
    "metadata",
    "gon",
    "na",
    "say",
    "let",
    "token",
    "uri",
    "metadata",
    "equals",
    "dot",
    "dot",
    "dot",
    "meta",
    "data",
    "template",
    "fun",
    "javascript",
    "syntactic",
    "sugar",
    "kind",
    "means",
    "like",
    "unpack",
    "basically",
    "saying",
    "token",
    "uri",
    "metadata",
    "going",
    "equal",
    "stuff",
    "sticking",
    "stuff",
    "token",
    "metadata",
    "variable",
    "gon",
    "na",
    "say",
    "token",
    "metadata",
    "dot",
    "name",
    "going",
    "equal",
    "files",
    "index",
    "dot",
    "replace",
    "dot",
    "png",
    "dot",
    "png",
    "nothing",
    "files",
    "going",
    "one",
    "files",
    "right",
    "going",
    "dot",
    "png",
    "st",
    "bernard",
    "dot",
    "png",
    "going",
    "shiva",
    "dot",
    "png",
    "basically",
    "saying",
    "okay",
    "cool",
    "name",
    "inside",
    "token",
    "metadata",
    "going",
    "pug",
    "going",
    "drop",
    "extension",
    "basically",
    "gon",
    "na",
    "get",
    "name",
    "token",
    "ai",
    "metadata",
    "dot",
    "description",
    "going",
    "equal",
    "adore",
    "bowl",
    "going",
    "get",
    "name",
    "token",
    "uri",
    "metadata",
    "dot",
    "name",
    "going",
    "adorable",
    "pug",
    "pup",
    "adorable",
    "bernard",
    "pop",
    "adorable",
    "ship",
    "pup",
    "token",
    "uri",
    "metadata",
    "dot",
    "image",
    "probably",
    "important",
    "one",
    "going",
    "going",
    "ipfs",
    "extension",
    "ipfs",
    "hash",
    "get",
    "response",
    "get",
    "image",
    "upload",
    "responses",
    "image",
    "upload",
    "response",
    "index",
    "dot",
    "ipfs",
    "hash",
    "go",
    "pinata",
    "docs",
    "see",
    "pin",
    "file",
    "ipfs",
    "returns",
    "ipfs",
    "hash",
    "pin",
    "size",
    "timestamp",
    "care",
    "ipfs",
    "hash",
    "going",
    "use",
    "give",
    "metadata",
    "image",
    "finally",
    "little",
    "console",
    "dot",
    "log",
    "uploading",
    "say",
    "token",
    "eye",
    "metadata",
    "dot",
    "name",
    "dot",
    "dot",
    "dot",
    "store",
    "file",
    "store",
    "store",
    "json",
    "pinata",
    "slash",
    "ipfs",
    "upload",
    "pinata",
    "bit",
    "going",
    "add",
    "function",
    "store",
    "token",
    "uri",
    "metadata",
    "gon",
    "na",
    "gon",
    "na",
    "say",
    "try",
    "const",
    "response",
    "equals",
    "await",
    "nada",
    "pin",
    "json",
    "ipfs",
    "metadata",
    "right",
    "want",
    "pin",
    "json",
    "ipfs",
    "going",
    "really",
    "similar",
    "need",
    "pass",
    "body",
    "going",
    "json",
    "optional",
    "stuff",
    "gon",
    "na",
    "give",
    "us",
    "return",
    "ipfs",
    "hash",
    "pin",
    "size",
    "timestamp",
    "works",
    "well",
    "going",
    "return",
    "response",
    "otherwise",
    "catch",
    "error",
    "console",
    "dot",
    "log",
    "error",
    "return",
    "null",
    "exports",
    "token",
    "uri",
    "metadata",
    "back",
    "deploy",
    "go",
    "ahead",
    "import",
    "store",
    "token",
    "uri",
    "metadata",
    "scroll",
    "const",
    "metadata",
    "upload",
    "response",
    "equals",
    "await",
    "store",
    "token",
    "uri",
    "metadata",
    "pass",
    "token",
    "uri",
    "metadata",
    "finally",
    "metadata",
    "uploaded",
    "finally",
    "going",
    "token",
    "arise",
    "need",
    "say",
    "token",
    "eyes",
    "dot",
    "push",
    "ipfs",
    "slash",
    "slash",
    "metadata",
    "response",
    "metadata",
    "upload",
    "response",
    "dot",
    "ipfs",
    "hash",
    "finally",
    "array",
    "ipfs",
    "hashes",
    "points",
    "metadata",
    "one",
    "metadata",
    "pointing",
    "image",
    "little",
    "console",
    "dot",
    "log",
    "token",
    "arise",
    "uploaded",
    "another",
    "little",
    "console",
    "dot",
    "log",
    "token",
    "eyes",
    "oh",
    "right",
    "let",
    "go",
    "ahead",
    "run",
    "let",
    "see",
    "works",
    "pinata",
    "see",
    "images",
    "also",
    "metadata",
    "process",
    "dot",
    "e",
    "v",
    "dot",
    "upload",
    "pinata",
    "equals",
    "true",
    "looks",
    "like",
    "true",
    "run",
    "handle",
    "token",
    "eyes",
    "upload",
    "images",
    "store",
    "images",
    "upload",
    "metadata",
    "see",
    "gon",
    "na",
    "exact",
    "cid",
    "right",
    "gon",
    "na",
    "hash",
    "wo",
    "get",
    "duplicates",
    "file",
    "pinata",
    "ipfs",
    "let",
    "open",
    "let",
    "run",
    "one",
    "time",
    "deployed",
    "dash",
    "dash",
    "tags",
    "random",
    "ipfs",
    "mocks",
    "okay",
    "looks",
    "like",
    "almost",
    "worked",
    "uploading",
    "banana",
    "working",
    "zero",
    "working",
    "one",
    "working",
    "two",
    "metadata",
    "template",
    "defined",
    "ha",
    "spelt",
    "meta",
    "data",
    "template",
    "meta",
    "data",
    "template",
    "let",
    "spell",
    "things",
    "correctly",
    "let",
    "try",
    "working",
    "zero",
    "working",
    "two",
    "image",
    "upload",
    "response",
    "defined",
    "spell",
    "correctly",
    "go",
    "let",
    "let",
    "caps",
    "correctly",
    "let",
    "try",
    "one",
    "time",
    "okay",
    "012",
    "uploading",
    "pug",
    "uploading",
    "shiva",
    "uploading",
    "bernard",
    "token",
    "eyes",
    "upload",
    "grab",
    "stick",
    "browser",
    "ipfs",
    "node",
    "boom",
    "grab",
    "hash",
    "jump",
    "ipfs",
    "desktop",
    "go",
    "files",
    "import",
    "ipfs",
    "paste",
    "know",
    "give",
    "name",
    "etc",
    "ipfs",
    "node",
    "well",
    "awesome",
    "go",
    "pinata",
    "give",
    "little",
    "refresh",
    "see",
    "everything",
    "copy",
    "one",
    "go",
    "ipfs",
    "dot",
    "dot",
    "slash",
    "paste",
    "see",
    "metadata",
    "everything",
    "looks",
    "good",
    "absolutely",
    "massive",
    "done",
    "store",
    "data",
    "ipfs",
    "node",
    "least",
    "one",
    "nodes",
    "computer",
    "goes",
    "server",
    "goes",
    "least",
    "somebody",
    "else",
    "done",
    "finally",
    "list",
    "token",
    "eyes",
    "finally",
    "go",
    "back",
    "arguments",
    "like",
    "upload",
    "token",
    "eyes",
    "smart",
    "contract",
    "going",
    "need",
    "mint",
    "fee",
    "well",
    "go",
    "upper",
    "heart",
    "config",
    "create",
    "like",
    "little",
    "mint",
    "fee",
    "say",
    "mint",
    "fee",
    "going",
    "whatever",
    "want",
    "12345678123456789",
    "eath",
    "even",
    "drop",
    "one",
    "hard",
    "hat",
    "network",
    "also",
    "rinckey",
    "well",
    "arguments",
    "finally",
    "deploy",
    "contract",
    "const",
    "random",
    "ipfs",
    "equals",
    "await",
    "deploy",
    "contract",
    "random",
    "ipfs",
    "nf",
    "deployer",
    "args",
    "args",
    "log",
    "true",
    "wait",
    "confirmations",
    "going",
    "network",
    "dot",
    "config",
    "dot",
    "block",
    "confirm",
    "terminations",
    "one",
    "great",
    "might",
    "another",
    "little",
    "line",
    "verification",
    "bit",
    "actually",
    "going",
    "copy",
    "deploy",
    "basic",
    "going",
    "copy",
    "going",
    "code",
    "going",
    "exactly",
    "except",
    "going",
    "verify",
    "random",
    "ipfs",
    "instead",
    "actually",
    "use",
    "args",
    "instead",
    "arguments",
    "give",
    "quick",
    "deploy",
    "test",
    "hh",
    "deploy",
    "yarn",
    "hardhead",
    "deploy",
    "looks",
    "like",
    "almost",
    "worked",
    "almost",
    "got",
    "everything",
    "done",
    "network",
    "config",
    "defined",
    "import",
    "let",
    "go",
    "ahead",
    "import",
    "network",
    "config",
    "helper",
    "hardhead",
    "config",
    "import",
    "network",
    "config",
    "try",
    "one",
    "time",
    "chain",
    "id",
    "defined",
    "going",
    "chain",
    "id",
    "chain",
    "id",
    "try",
    "one",
    "time",
    "awesome",
    "least",
    "working",
    "heart",
    "hat",
    "network",
    "copy",
    "array",
    "paste",
    "boom",
    "token",
    "eyes",
    "back",
    "dot",
    "env",
    "set",
    "false",
    "since",
    "token",
    "neurons",
    "already",
    "run",
    "hard",
    "hit",
    "deploy",
    "use",
    "token",
    "heroes",
    "already",
    "uploaded",
    "yes",
    "done",
    "know",
    "excited",
    "see",
    "something",
    "like",
    "open",
    "see",
    "excited",
    "see",
    "right",
    "away",
    "let",
    "save",
    "deploying",
    "rink",
    "b",
    "last",
    "thing",
    "deploying",
    "test",
    "nets",
    "really",
    "slow",
    "let",
    "wait",
    "last",
    "bit",
    "go",
    "ahead",
    "deploy",
    "rank",
    "write",
    "tests",
    "something",
    "noticed",
    "writing",
    "test",
    "forgot",
    "update",
    "token",
    "counter",
    "safe",
    "men",
    "token",
    "counter",
    "plus",
    "equals",
    "token",
    "counter",
    "going",
    "esto",
    "encounter",
    "equals",
    "es",
    "token",
    "counter",
    "plus",
    "one",
    "perfect",
    "example",
    "writing",
    "tests",
    "important",
    "write",
    "tests",
    "definitely",
    "going",
    "need",
    "fund",
    "subscription",
    "need",
    "wait",
    "vrf",
    "coordinate",
    "tor",
    "v",
    "mock",
    "dot",
    "fund",
    "sub",
    "scription",
    "subscription",
    "id",
    "comma",
    "fund",
    "amount",
    "top",
    "actually",
    "even",
    "pull",
    "since",
    "gon",
    "na",
    "change",
    "let",
    "token",
    "year",
    "like",
    "looks",
    "like",
    "const",
    "fund",
    "amount",
    "equals",
    "cool",
    "could",
    "know",
    "could",
    "also",
    "ethers",
    "dot",
    "parse",
    "know",
    "even",
    "deploy",
    "rink",
    "beam",
    "well",
    "got",
    "right",
    "absolutely",
    "100",
    "percent",
    "write",
    "tests",
    "create",
    "new",
    "file",
    "called",
    "random",
    "ipfs",
    "nf",
    "dot",
    "test",
    "dot",
    "j",
    "write",
    "tests",
    "anything",
    "new",
    "going",
    "learn",
    "test",
    "going",
    "similar",
    "lottery",
    "tests",
    "written",
    "going",
    "say",
    "going",
    "highly",
    "recommend",
    "try",
    "write",
    "least",
    "two",
    "three",
    "tests",
    "definitely",
    "write",
    "test",
    "fulfill",
    "random",
    "words",
    "going",
    "encourage",
    "pause",
    "video",
    "please",
    "pause",
    "video",
    "try",
    "write",
    "tests",
    "struggling",
    "tests",
    "writing",
    "tests",
    "going",
    "really",
    "gives",
    "coding",
    "muscles",
    "going",
    "give",
    "skills",
    "keep",
    "writing",
    "tests",
    "really",
    "fast",
    "really",
    "efficient",
    "building",
    "smart",
    "contracts",
    "tests",
    "tests",
    "protect",
    "writing",
    "bad",
    "immutable",
    "code",
    "please",
    "pause",
    "video",
    "going",
    "copy",
    "paste",
    "github",
    "repo",
    "please",
    "take",
    "time",
    "write",
    "tests",
    "alright",
    "great",
    "write",
    "tests",
    "hope",
    "write",
    "tests",
    "pause",
    "video",
    "go",
    "write",
    "tests",
    "promise",
    "tests",
    "writing",
    "exercises",
    "help",
    "dramatically",
    "point",
    "done",
    "done",
    "amazing",
    "stuff",
    "deployed",
    "basic",
    "nft",
    "pretty",
    "much",
    "nothing",
    "deployed",
    "provably",
    "random",
    "nft",
    "random",
    "stats",
    "random",
    "traits",
    "different",
    "rarities",
    "nf",
    "depending",
    "minted",
    "minted",
    "stored",
    "data",
    "ipfs",
    "learned",
    "programmatically",
    "upload",
    "files",
    "pinata",
    "another",
    "pinning",
    "service",
    "us",
    "learned",
    "little",
    "bit",
    "nft",
    "debt",
    "storage",
    "another",
    "way",
    "pin",
    "data",
    "ipfs",
    "course",
    "learned",
    "wanted",
    "could",
    "programmatically",
    "pin",
    "data",
    "ipfs",
    "node",
    "since",
    "lot",
    "us",
    "gon",
    "na",
    "running",
    "computers",
    "went",
    "ahead",
    "said",
    "okay",
    "well",
    "stick",
    "pinata",
    "default",
    "done",
    "boom",
    "got",
    "another",
    "little",
    "checkmark",
    "got",
    "something",
    "say",
    "need",
    "host",
    "data",
    "ipfs",
    "actually",
    "host",
    "data",
    "metadata",
    "directly",
    "chain",
    "want",
    "however",
    "pros",
    "cons",
    "pros",
    "hosting",
    "ipfs",
    "going",
    "cheap",
    "cons",
    "someone",
    "needs",
    "pin",
    "data",
    "right",
    "least",
    "one",
    "person",
    "always",
    "needs",
    "data",
    "pinned",
    "right",
    "decentralized",
    "least",
    "need",
    "somebody",
    "pin",
    "data",
    "right",
    "using",
    "something",
    "like",
    "file",
    "coin",
    "way",
    "incentivize",
    "people",
    "pin",
    "data",
    "using",
    "file",
    "coin",
    "necessarily",
    "guaranteed",
    "pros",
    "svg",
    "chain",
    "nft",
    "data",
    "chain",
    "never",
    "worry",
    "somebody",
    "actually",
    "pinning",
    "data",
    "cons",
    "much",
    "expensive",
    "little",
    "images",
    "right",
    "actually",
    "surprisingly",
    "large",
    "storing",
    "chain",
    "actually",
    "get",
    "pretty",
    "expensive",
    "going",
    "use",
    "different",
    "images",
    "much",
    "smaller",
    "images",
    "much",
    "cheaper",
    "images",
    "work",
    "want",
    "see",
    "another",
    "version",
    "another",
    "video",
    "make",
    "nft",
    "art",
    "chain",
    "metadata",
    "goes",
    "pretty",
    "much",
    "go",
    "well",
    "want",
    "second",
    "reference",
    "link",
    "github",
    "repo",
    "associated",
    "course",
    "instead",
    "pngs",
    "using",
    "going",
    "use",
    "something",
    "called",
    "svg",
    "svg",
    "stands",
    "scalable",
    "vector",
    "graphics",
    "much",
    "much",
    "minimalistic",
    "files",
    "go",
    "ahead",
    "upload",
    "blockchain",
    "going",
    "use",
    "since",
    "much",
    "minimalistic",
    "lot",
    "cheaper",
    "upload",
    "remember",
    "data",
    "upload",
    "blockchain",
    "expensive",
    "video",
    "make",
    "randomize",
    "svg",
    "data",
    "chain",
    "kind",
    "example",
    "one",
    "looks",
    "like",
    "whole",
    "bunch",
    "random",
    "lines",
    "super",
    "thrilling",
    "random",
    "kind",
    "cool",
    "100",
    "percent",
    "chain",
    "svg",
    "actually",
    "work",
    "right",
    "html",
    "want",
    "use",
    "websites",
    "well",
    "link",
    "tutorial",
    "github",
    "repo",
    "associated",
    "course",
    "go",
    "ahead",
    "try",
    "actually",
    "play",
    "making",
    "svg",
    "right",
    "different",
    "commands",
    "web",
    "intro",
    "dot",
    "asp",
    "see",
    "different",
    "commands",
    "right",
    "make",
    "rectangle",
    "make",
    "circle",
    "path",
    "big",
    "one",
    "say",
    "exactly",
    "path",
    "line",
    "want",
    "draw",
    "going",
    "look",
    "like",
    "whole",
    "bunch",
    "stuff",
    "make",
    "svg",
    "cool",
    "thing",
    "matter",
    "big",
    "make",
    "svg",
    "quality",
    "always",
    "going",
    "exactly",
    "svg",
    "explains",
    "exactly",
    "draw",
    "matter",
    "big",
    "little",
    "image",
    "going",
    "want",
    "learn",
    "svg",
    "want",
    "play",
    "svg",
    "know",
    "come",
    "try",
    "said",
    "going",
    "store",
    "chain",
    "going",
    "store",
    "svg",
    "stuff",
    "chain",
    "gon",
    "na",
    "go",
    "one",
    "step",
    "gon",
    "na",
    "make",
    "dynamic",
    "gon",
    "na",
    "make",
    "actually",
    "change",
    "based",
    "data",
    "chain",
    "go",
    "github",
    "repo",
    "associated",
    "lesson",
    "go",
    "images",
    "go",
    "dynamic",
    "nft",
    "see",
    "two",
    "images",
    "see",
    "happy",
    "dot",
    "svg",
    "looks",
    "like",
    "see",
    "frown",
    "dot",
    "svg",
    "looks",
    "like",
    "going",
    "make",
    "nft",
    "dynamic",
    "sense",
    "going",
    "say",
    "price",
    "eath",
    "number",
    "going",
    "happy",
    "face",
    "going",
    "make",
    "frowny",
    "face",
    "nft",
    "going",
    "change",
    "based",
    "real",
    "world",
    "parameters",
    "obviously",
    "really",
    "powerful",
    "really",
    "cool",
    "nft",
    "changes",
    "based",
    "stats",
    "nf",
    "changes",
    "based",
    "really",
    "whatever",
    "going",
    "store",
    "data",
    "100",
    "percent",
    "chain",
    "going",
    "little",
    "bit",
    "expensive",
    "going",
    "building",
    "let",
    "go",
    "ahead",
    "let",
    "jump",
    "let",
    "final",
    "contract",
    "ultimate",
    "nft",
    "section",
    "going",
    "create",
    "new",
    "contract",
    "new",
    "contract",
    "going",
    "dynamic",
    "svg",
    "f",
    "dot",
    "soul",
    "going",
    "look",
    "real",
    "similar",
    "slash",
    "slash",
    "dynamic",
    "svg",
    "ft",
    "dot",
    "saw",
    "slash",
    "lat",
    "spdx",
    "license",
    "identifier",
    "team",
    "pragma",
    "solidity",
    "eric",
    "zero",
    "point",
    "contract",
    "dynamic",
    "svg",
    "nf",
    "let",
    "talk",
    "architecture",
    "going",
    "look",
    "like",
    "gon",
    "na",
    "look",
    "like",
    "pretty",
    "normal",
    "nf",
    "couple",
    "caveats",
    "gon",
    "na",
    "give",
    "min",
    "function",
    "mint",
    "nf",
    "also",
    "going",
    "store",
    "svg",
    "information",
    "somewhere",
    "going",
    "need",
    "logic",
    "say",
    "show",
    "x",
    "image",
    "show",
    "image",
    "right",
    "know",
    "really",
    "going",
    "switching",
    "token",
    "uri",
    "say",
    "show",
    "x",
    "show",
    "let",
    "go",
    "actually",
    "first",
    "know",
    "going",
    "erc",
    "go",
    "ahead",
    "import",
    "open",
    "zeppelin",
    "going",
    "say",
    "import",
    "open",
    "zeppelin",
    "slash",
    "contracts",
    "slash",
    "token",
    "slash",
    "erc",
    "721",
    "slash",
    "erc",
    "721",
    "going",
    "call",
    "set",
    "token",
    "uri",
    "function",
    "call",
    "use",
    "raw",
    "erc",
    "721",
    "instead",
    "extension",
    "say",
    "contract",
    "erc",
    "721",
    "making",
    "erc",
    "say",
    "construct",
    "dorm",
    "like",
    "call",
    "constructor",
    "erc",
    "721",
    "going",
    "call",
    "dynamic",
    "svg",
    "f",
    "dsn",
    "dynamic",
    "svg",
    "f",
    "like",
    "also",
    "going",
    "need",
    "mint",
    "function",
    "let",
    "create",
    "right",
    "say",
    "function",
    "mint",
    "f",
    "request",
    "nft",
    "little",
    "bit",
    "looser",
    "say",
    "user",
    "need",
    "pay",
    "money",
    "public",
    "function",
    "going",
    "mint",
    "nft",
    "thing",
    "going",
    "call",
    "safe",
    "mint",
    "message",
    "dot",
    "sender",
    "course",
    "need",
    "token",
    "count",
    "term",
    "let",
    "go",
    "ahead",
    "top",
    "256",
    "private",
    "underscore",
    "token",
    "counter",
    "token",
    "counter",
    "meant",
    "tag",
    "counter",
    "plus",
    "gon",
    "na",
    "equals",
    "token",
    "counter",
    "plus",
    "one",
    "pretty",
    "much",
    "way",
    "meant",
    "done",
    "basics",
    "even",
    "explicit",
    "say",
    "token",
    "counter",
    "equals",
    "zero",
    "initialize",
    "token",
    "going",
    "look",
    "like",
    "want",
    "look",
    "like",
    "svgs",
    "want",
    "based",
    "price",
    "asset",
    "constructor",
    "right",
    "create",
    "string",
    "memory",
    "call",
    "low",
    "svg",
    "string",
    "memory",
    "high",
    "svg",
    "code",
    "save",
    "low",
    "svg",
    "highest",
    "v",
    "images",
    "like",
    "frowny",
    "face",
    "smiley",
    "face",
    "import",
    "input",
    "parameters",
    "know",
    "make",
    "immutable",
    "since",
    "probably",
    "going",
    "change",
    "say",
    "string",
    "private",
    "underscore",
    "low",
    "image",
    "uri",
    "string",
    "private",
    "underscore",
    "high",
    "image",
    "uri",
    "pass",
    "svg",
    "data",
    "right",
    "svg",
    "data",
    "going",
    "look",
    "like",
    "github",
    "go",
    "display",
    "source",
    "blob",
    "see",
    "exactly",
    "code",
    "looks",
    "like",
    "code",
    "definitely",
    "image",
    "uri",
    "need",
    "image",
    "uri",
    "look",
    "something",
    "like",
    "right",
    "way",
    "going",
    "pass",
    "like",
    "svg",
    "code",
    "right",
    "want",
    "pass",
    "svg",
    "code",
    "contract",
    "handle",
    "everything",
    "else",
    "actually",
    "well",
    "create",
    "function",
    "called",
    "svg",
    "image",
    "uri",
    "chain",
    "convert",
    "svgs",
    "svgs",
    "image",
    "arise",
    "instead",
    "ipfs",
    "start",
    "gon",
    "na",
    "use",
    "something",
    "called",
    "base",
    "64",
    "encoding",
    "actually",
    "encode",
    "svg",
    "base",
    "64",
    "image",
    "url",
    "right",
    "look",
    "something",
    "like",
    "base",
    "64",
    "group",
    "binary",
    "text",
    "encoding",
    "schemes",
    "represents",
    "binary",
    "data",
    "case",
    "svg",
    "data",
    "base",
    "64",
    "particularly",
    "prevalent",
    "world",
    "wide",
    "web",
    "one",
    "uses",
    "ability",
    "embed",
    "image",
    "files",
    "binary",
    "assets",
    "inside",
    "textual",
    "assets",
    "html",
    "css",
    "actually",
    "convert",
    "svg",
    "stuff",
    "url",
    "image",
    "uri",
    "would",
    "great",
    "right",
    "exactly",
    "want",
    "want",
    "able",
    "convert",
    "url",
    "image",
    "uri",
    "take",
    "one",
    "images",
    "svg",
    "images",
    "like",
    "happy",
    "svg",
    "actually",
    "happy",
    "dot",
    "svg",
    "actually",
    "copy",
    "image",
    "address",
    "going",
    "url",
    "address",
    "paste",
    "back",
    "see",
    "justice",
    "file",
    "site",
    "actually",
    "data",
    "type",
    "remote",
    "url",
    "paste",
    "say",
    "encode",
    "svg",
    "base",
    "get",
    "weird",
    "job",
    "role",
    "numbers",
    "letters",
    "stuff",
    "base",
    "64",
    "encoding",
    "represents",
    "svg",
    "got",
    "browser",
    "type",
    "data",
    "colon",
    "image",
    "slash",
    "svg",
    "plus",
    "xml",
    "semicolon",
    "base",
    "64",
    "comma",
    "paste",
    "massive",
    "thing",
    "enter",
    "would",
    "know",
    "get",
    "exactly",
    "image",
    "back",
    "huge",
    "massive",
    "thing",
    "base",
    "64",
    "encoding",
    "image",
    "basic",
    "c",
    "four",
    "encoded",
    "image",
    "use",
    "chain",
    "image",
    "arrive",
    "images",
    "metadata",
    "bake",
    "directly",
    "token",
    "uri",
    "see",
    "mean",
    "second",
    "way",
    "actually",
    "directly",
    "put",
    "svg",
    "code",
    "right",
    "smart",
    "contracts",
    "let",
    "figure",
    "function",
    "svg",
    "image",
    "uri",
    "know",
    "going",
    "want",
    "probably",
    "base",
    "64",
    "encoding",
    "chain",
    "gon",
    "na",
    "100",
    "percent",
    "chain",
    "want",
    "save",
    "gas",
    "kind",
    "fun",
    "show",
    "chain",
    "make",
    "public",
    "pure",
    "function",
    "returns",
    "string",
    "memory",
    "going",
    "give",
    "function",
    "svg",
    "going",
    "pass",
    "constructor",
    "going",
    "return",
    "string",
    "going",
    "base",
    "64",
    "encoded",
    "url",
    "saw",
    "top",
    "string",
    "private",
    "constant",
    "base",
    "feed",
    "base",
    "64",
    "encoded",
    "svg",
    "prefix",
    "equals",
    "right",
    "use",
    "generate",
    "svg",
    "well",
    "going",
    "string",
    "memory",
    "svg",
    "going",
    "encode",
    "svg",
    "basically",
    "ourself",
    "adding",
    "base",
    "64",
    "encoding",
    "chain",
    "really",
    "want",
    "rewrite",
    "luckily",
    "us",
    "somebody",
    "already",
    "done",
    "see",
    "github",
    "repo",
    "associated",
    "created",
    "one",
    "loopring",
    "devs",
    "really",
    "awesome",
    "project",
    "want",
    "check",
    "well",
    "going",
    "borrow",
    "code",
    "svg",
    "chain",
    "add",
    "add",
    "github",
    "code",
    "basically",
    "everything",
    "need",
    "encode",
    "decode",
    "basics",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "base",
    "64",
    "dash",
    "soul",
    "going",
    "add",
    "code",
    "dependency",
    "added",
    "go",
    "ahead",
    "import",
    "import",
    "base",
    "64",
    "dash",
    "soul",
    "slash",
    "base",
    "64",
    "dot",
    "sol",
    "contract",
    "comes",
    "encoder",
    "string",
    "memory",
    "svg",
    "base",
    "64",
    "encoded",
    "equals",
    "base",
    "64",
    "dot",
    "encode",
    "gets",
    "little",
    "bit",
    "weird",
    "bytes",
    "string",
    "abi",
    "dot",
    "encode",
    "act",
    "svg",
    "return",
    "string",
    "api",
    "dot",
    "encode",
    "packed",
    "base",
    "64",
    "encoded",
    "svg",
    "prefix",
    "comma",
    "svg",
    "base",
    "64",
    "encoded",
    "function",
    "svg",
    "image",
    "uri",
    "take",
    "svg",
    "spit",
    "us",
    "back",
    "url",
    "uri",
    "looks",
    "exactly",
    "like",
    "kind",
    "sped",
    "stuff",
    "whole",
    "bunch",
    "new",
    "stuff",
    "like",
    "abi",
    "dot",
    "encode",
    "packed",
    "twice",
    "abi",
    "dot",
    "encode",
    "packed",
    "well",
    "let",
    "learn",
    "really",
    "really",
    "high",
    "level",
    "basically",
    "concatenate",
    "strings",
    "right",
    "combine",
    "strings",
    "together",
    "going",
    "jump",
    "remix",
    "actually",
    "explore",
    "abi",
    "dot",
    "encode",
    "pact",
    "abi",
    "encoding",
    "stuff",
    "little",
    "bit",
    "section",
    "go",
    "definitely",
    "advanced",
    "going",
    "going",
    "really",
    "low",
    "level",
    "stuff",
    "solidity",
    "works",
    "behind",
    "scenes",
    "binary",
    "works",
    "thing",
    "called",
    "opcodes",
    "crazy",
    "low",
    "level",
    "tricky",
    "difficult",
    "things",
    "understand",
    "want",
    "move",
    "past",
    "section",
    "timestamps",
    "github",
    "repo",
    "help",
    "move",
    "past",
    "however",
    "encourage",
    "least",
    "try",
    "absorb",
    "material",
    "understand",
    "first",
    "time",
    "100",
    "percent",
    "okay",
    "advanced",
    "anyways",
    "basic",
    "projects",
    "wo",
    "really",
    "need",
    "information",
    "later",
    "get",
    "advanced",
    "knowing",
    "really",
    "going",
    "make",
    "phenomenal",
    "solidity",
    "developer",
    "approach",
    "section",
    "approach",
    "sub",
    "lesson",
    "evm",
    "opcodes",
    "coding",
    "calling",
    "know",
    "100",
    "percent",
    "understand",
    "first",
    "time",
    "okay",
    "want",
    "watch",
    "section",
    "couple",
    "times",
    "fantastic",
    "want",
    "jump",
    "remix",
    "follow",
    "along",
    "let",
    "contract",
    "section",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "file",
    "going",
    "call",
    "encoding",
    "dot",
    "soul",
    "remember",
    "code",
    "going",
    "going",
    "going",
    "sub",
    "lesson",
    "folder",
    "hardhead",
    "nft",
    "fcc",
    "code",
    "going",
    "working",
    "going",
    "encoding",
    "dot",
    "soul",
    "little",
    "bit",
    "going",
    "work",
    "call",
    "anything",
    "soul",
    "encoding",
    "dot",
    "soul",
    "let",
    "make",
    "basic",
    "code",
    "say",
    "spdx",
    "license",
    "identifier",
    "mit",
    "pragma",
    "solidity",
    "carrot",
    "zero",
    "point",
    "like",
    "contract",
    "encoding",
    "boom",
    "compile",
    "command",
    "ctrl",
    "great",
    "things",
    "looking",
    "good",
    "remember",
    "whole",
    "purpose",
    "first",
    "understand",
    "going",
    "api",
    "dot",
    "encode",
    "packed",
    "stuff",
    "let",
    "first",
    "write",
    "function",
    "owes",
    "us",
    "wrapping",
    "api",
    "dot",
    "encode",
    "packed",
    "strings",
    "wrapping",
    "around",
    "string",
    "going",
    "return",
    "string",
    "could",
    "function",
    "bind",
    "strings",
    "concatenate",
    "strings",
    "public",
    "pure",
    "since",
    "going",
    "reading",
    "storage",
    "say",
    "returns",
    "string",
    "memory",
    "say",
    "return",
    "string",
    "api",
    "dot",
    "encode",
    "packed",
    "comma",
    "space",
    "miss",
    "like",
    "need",
    "another",
    "parenthesis",
    "okay",
    "great",
    "let",
    "go",
    "ahead",
    "deploy",
    "start",
    "javascript",
    "vm",
    "deploy",
    "encoding",
    "come",
    "click",
    "combine",
    "strings",
    "get",
    "whole",
    "string",
    "output",
    "hi",
    "mom",
    "miss",
    "encoding",
    "hi",
    "mom",
    "misuse",
    "together",
    "bytes",
    "form",
    "api",
    "dot",
    "encode",
    "packed",
    "returns",
    "bytes",
    "object",
    "typecasting",
    "wrapping",
    "string",
    "thing",
    "string",
    "solidity",
    "says",
    "okay",
    "yeah",
    "bytes",
    "string",
    "fine",
    "totally",
    "works",
    "api",
    "dot",
    "encode",
    "packed",
    "globally",
    "available",
    "methods",
    "units",
    "actually",
    "solidity",
    "whole",
    "bunch",
    "solidity",
    "cheat",
    "sheet",
    "gon",
    "na",
    "link",
    "github",
    "repo",
    "well",
    "whole",
    "bunch",
    "operators",
    "whole",
    "bunch",
    "global",
    "variables",
    "methods",
    "see",
    "look",
    "look",
    "abi",
    "dot",
    "encode",
    "pact",
    "see",
    "abi",
    "dot",
    "encode",
    "pact",
    "right",
    "scroll",
    "see",
    "familiar",
    "well",
    "like",
    "example",
    "message",
    "dot",
    "sender",
    "sender",
    "message",
    "message",
    "dot",
    "value",
    "whole",
    "bunch",
    "globally",
    "available",
    "methods",
    "variables",
    "use",
    "coding",
    "stuff",
    "say",
    "though",
    "point",
    "well",
    "plus",
    "actually",
    "string",
    "dot",
    "concat",
    "know",
    "string",
    "comma",
    "string",
    "b",
    "want",
    "instead",
    "api",
    "encode",
    "packed",
    "still",
    "wanted",
    "show",
    "api",
    "dot",
    "encode",
    "pack",
    "great",
    "segue",
    "abi",
    "stuff",
    "go",
    "let",
    "focus",
    "encode",
    "packed",
    "thing",
    "actually",
    "going",
    "well",
    "dive",
    "deeper",
    "encode",
    "pact",
    "let",
    "understand",
    "little",
    "bit",
    "happens",
    "send",
    "transaction",
    "compile",
    "code",
    "pictures",
    "going",
    "github",
    "repo",
    "remember",
    "back",
    "two",
    "files",
    "got",
    "dot",
    "abi",
    "file",
    "dot",
    "bin",
    "dot",
    "binary",
    "back",
    "ether",
    "symbol",
    "storage",
    "ran",
    "yarn",
    "compile",
    "two",
    "main",
    "files",
    "got",
    "symbol",
    "storage",
    "abi",
    "know",
    "abi",
    "thing",
    "become",
    "familiar",
    "simple",
    "storage",
    "dot",
    "bin",
    "binary",
    "whole",
    "bunch",
    "numbers",
    "letters",
    "stuff",
    "understand",
    "see",
    "remix",
    "like",
    "compile",
    "get",
    "compilation",
    "details",
    "get",
    "whole",
    "bunch",
    "stuff",
    "right",
    "see",
    "abi",
    "kind",
    "like",
    "different",
    "way",
    "viewing",
    "api",
    "also",
    "get",
    "bytecode",
    "bit",
    "object",
    "stuff",
    "like",
    "random",
    "numbers",
    "letters",
    "actually",
    "binary",
    "actually",
    "getting",
    "put",
    "blockchain",
    "binary",
    "low",
    "level",
    "stuff",
    "actually",
    "send",
    "contracts",
    "blockchain",
    "sending",
    "like",
    "said",
    "sending",
    "binary",
    "thing",
    "exactly",
    "sending",
    "blockchain",
    "remember",
    "back",
    "ethers",
    "project",
    "saw",
    "transaction",
    "right",
    "transaction",
    "nonce",
    "gas",
    "price",
    "guess",
    "limit",
    "value",
    "data",
    "kind",
    "skipped",
    "vrs",
    "little",
    "bit",
    "kind",
    "mathy",
    "component",
    "transaction",
    "signature",
    "back",
    "ethos",
    "project",
    "well",
    "right",
    "deploy",
    "script",
    "ended",
    "sending",
    "transaction",
    "using",
    "ethers",
    "passed",
    "nonce",
    "gas",
    "price",
    "gas",
    "limit",
    "value",
    "data",
    "massive",
    "thing",
    "declare",
    "contract",
    "also",
    "chain",
    "id",
    "work",
    "var",
    "ethers",
    "us",
    "also",
    "var",
    "component",
    "bother",
    "look",
    "send",
    "transaction",
    "actually",
    "creates",
    "contract",
    "two",
    "going",
    "empty",
    "going",
    "send",
    "contract",
    "deployment",
    "address",
    "data",
    "going",
    "contract",
    "initialization",
    "code",
    "contract",
    "bytecode",
    "right",
    "compile",
    "get",
    "code",
    "like",
    "initialize",
    "contract",
    "contract",
    "actually",
    "looks",
    "like",
    "look",
    "contracts",
    "deployed",
    "example",
    "going",
    "look",
    "raffle",
    "deployed",
    "go",
    "transactions",
    "contract",
    "see",
    "create",
    "raffle",
    "right",
    "let",
    "go",
    "transaction",
    "go",
    "click",
    "see",
    "ether",
    "scan",
    "see",
    "input",
    "data",
    "thing",
    "got",
    "random",
    "garbled",
    "numbers",
    "letters",
    "binary",
    "data",
    "contract",
    "initialization",
    "code",
    "contract",
    "byte",
    "code",
    "right",
    "send",
    "trend",
    "action",
    "data",
    "thing",
    "send",
    "weird",
    "bunch",
    "garbled",
    "nonsense",
    "going",
    "head",
    "back",
    "remix",
    "going",
    "leave",
    "comments",
    "encoding",
    "dot",
    "soul",
    "github",
    "repo",
    "ton",
    "comments",
    "explaining",
    "exactly",
    "explaining",
    "want",
    "follow",
    "along",
    "well",
    "order",
    "blockchain",
    "understand",
    "okay",
    "numbers",
    "letters",
    "even",
    "mean",
    "need",
    "special",
    "reader",
    "cerium",
    "blockchain",
    "needs",
    "able",
    "read",
    "stuff",
    "needs",
    "able",
    "map",
    "random",
    "numbers",
    "letters",
    "actually",
    "aetherium",
    "polygon",
    "avalanche",
    "know",
    "nonsense",
    "basically",
    "telling",
    "make",
    "contract",
    "kind",
    "think",
    "saying",
    "like",
    "take",
    "coat",
    "reason",
    "human",
    "beings",
    "understand",
    "take",
    "coat",
    "means",
    "understand",
    "english",
    "reading",
    "english",
    "solidity",
    "blockchains",
    "instead",
    "english",
    "read",
    "numbers",
    "letters",
    "kind",
    "like",
    "words",
    "instead",
    "take",
    "coat",
    "like",
    "deploy",
    "contract",
    "contract",
    "next",
    "xyz",
    "random",
    "stuff",
    "bytecode",
    "represents",
    "low",
    "level",
    "computer",
    "instructions",
    "make",
    "contract",
    "happen",
    "numbers",
    "letters",
    "represent",
    "kind",
    "alphabet",
    "like",
    "take",
    "coat",
    "alphabet",
    "combine",
    "like",
    "makes",
    "something",
    "us",
    "makes",
    "sense",
    "kind",
    "think",
    "alphabet",
    "called",
    "opcodes",
    "go",
    "create",
    "new",
    "tab",
    "go",
    "evm",
    "dot",
    "codes",
    "get",
    "place",
    "list",
    "instructions",
    "left",
    "side",
    "see",
    "thing",
    "called",
    "opcode",
    "see",
    "name",
    "opcode",
    "section",
    "saying",
    "hey",
    "see",
    "00",
    "bytecode",
    "00",
    "represents",
    "opcode",
    "stop",
    "halts",
    "execution",
    "see",
    "01",
    "gon",
    "na",
    "addition",
    "stuff",
    "02",
    "multiply",
    "op",
    "codes",
    "kind",
    "like",
    "alphabet",
    "language",
    "binary",
    "stuff",
    "right",
    "go",
    "way",
    "f",
    "f",
    "self",
    "destruct",
    "op",
    "codes",
    "also",
    "reading",
    "right",
    "look",
    "transaction",
    "might",
    "little",
    "bit",
    "different",
    "oh",
    "six",
    "one",
    "says",
    "okay",
    "first",
    "thing",
    "want",
    "six",
    "one",
    "opcode",
    "go",
    "evm",
    "opcodes",
    "look",
    "six",
    "one",
    "saying",
    "push",
    "place",
    "buy",
    "item",
    "stack",
    "exactly",
    "reading",
    "language",
    "compile",
    "opcode",
    "stuff",
    "specific",
    "set",
    "aetherium",
    "opcodes",
    "evm",
    "opcodes",
    "known",
    "evm",
    "etherium",
    "virtual",
    "machine",
    "able",
    "read",
    "op",
    "codes",
    "sometimes",
    "abstractly",
    "called",
    "evm",
    "etherium",
    "virtual",
    "machine",
    "evm",
    "basically",
    "represents",
    "instructions",
    "computer",
    "must",
    "able",
    "read",
    "interact",
    "aetherium",
    "aetherium",
    "like",
    "applications",
    "many",
    "blockchains",
    "work",
    "solidity",
    "solidity",
    "compiles",
    "bytecode",
    "polygon",
    "avalanche",
    "arbitrage",
    "aetherium",
    "compiled",
    "exact",
    "type",
    "binary",
    "exact",
    "readers",
    "telling",
    "stuff",
    "might",
    "saying",
    "hey",
    "patrick",
    "cool",
    "looks",
    "like",
    "abi",
    "dot",
    "encode",
    "packed",
    "concatenate",
    "strings",
    "abi",
    "encode",
    "pack",
    "actually",
    "way",
    "look",
    "global",
    "variables",
    "api",
    "dot",
    "encode",
    "packed",
    "like",
    "third",
    "one",
    "list",
    "non",
    "standard",
    "way",
    "encode",
    "stuff",
    "binary",
    "stuff",
    "talked",
    "actually",
    "encode",
    "pretty",
    "much",
    "anything",
    "want",
    "binary",
    "format",
    "basically",
    "let",
    "take",
    "look",
    "encoding",
    "something",
    "let",
    "create",
    "function",
    "called",
    "encode",
    "number",
    "public",
    "pure",
    "function",
    "since",
    "going",
    "read",
    "state",
    "say",
    "returns",
    "bytes",
    "memory",
    "going",
    "function",
    "return",
    "bytes",
    "object",
    "going",
    "returned",
    "number",
    "going",
    "look",
    "like",
    "binary",
    "say",
    "bytes",
    "memory",
    "number",
    "equals",
    "abi",
    "dot",
    "encode",
    "one",
    "return",
    "number",
    "going",
    "encode",
    "number",
    "bi",
    "binary",
    "format",
    "know",
    "lot",
    "times",
    "say",
    "oh",
    "abi",
    "abi",
    "right",
    "previously",
    "say",
    "oh",
    "abi",
    "thing",
    "right",
    "inputs",
    "outputs",
    "kind",
    "human",
    "readable",
    "version",
    "abi",
    "abi",
    "application",
    "binary",
    "interface",
    "want",
    "encode",
    "numbers",
    "basically",
    "binary",
    "abi",
    "dot",
    "encode",
    "going",
    "little",
    "different",
    "like",
    "abi",
    "see",
    "looking",
    "compilation",
    "details",
    "technically",
    "like",
    "abi",
    "technically",
    "interact",
    "contract",
    "however",
    "actual",
    "binary",
    "version",
    "saying",
    "okay",
    "encode",
    "number",
    "one",
    "binary",
    "version",
    "contracts",
    "interact",
    "way",
    "understand",
    "saying",
    "okay",
    "watch",
    "number",
    "one",
    "let",
    "make",
    "machine",
    "readable",
    "go",
    "compile",
    "deploy",
    "right",
    "let",
    "delete",
    "old",
    "contract",
    "deploy",
    "combined",
    "strings",
    "encode",
    "number",
    "click",
    "get",
    "big",
    "hex",
    "thing",
    "computer",
    "going",
    "understand",
    "number",
    "one",
    "encode",
    "pretty",
    "much",
    "anything",
    "actually",
    "could",
    "encode",
    "string",
    "say",
    "function",
    "encode",
    "string",
    "make",
    "public",
    "key",
    "well",
    "return",
    "bytes",
    "memory",
    "want",
    "give",
    "binary",
    "stuff",
    "bites",
    "stuff",
    "say",
    "bytes",
    "memory",
    "string",
    "equals",
    "abi",
    "dot",
    "encode",
    "string",
    "return",
    "string",
    "let",
    "compile",
    "delete",
    "old",
    "contract",
    "deploy",
    "code",
    "string",
    "get",
    "big",
    "big",
    "big",
    "object",
    "binary",
    "notice",
    "something",
    "ton",
    "zeros",
    "zeros",
    "take",
    "space",
    "right",
    "lot",
    "space",
    "computer",
    "take",
    "even",
    "though",
    "really",
    "anything",
    "kind",
    "taking",
    "space",
    "solidity",
    "also",
    "comes",
    "abi",
    "dot",
    "encode",
    "tact",
    "performs",
    "packed",
    "encoding",
    "given",
    "arguments",
    "read",
    "solidity",
    "docs",
    "want",
    "called",
    "non",
    "standard",
    "packed",
    "mode",
    "encoding",
    "stipulations",
    "type",
    "shorter",
    "32",
    "bytes",
    "concatenated",
    "directly",
    "without",
    "padding",
    "sign",
    "extension",
    "dynamic",
    "types",
    "encoded",
    "place",
    "without",
    "length",
    "array",
    "elements",
    "padded",
    "still",
    "encoded",
    "place",
    "kind",
    "think",
    "encode",
    "packed",
    "sort",
    "like",
    "compressor",
    "right",
    "encode",
    "function",
    "compresses",
    "stuff",
    "wanted",
    "encode",
    "string",
    "want",
    "save",
    "space",
    "need",
    "perfect",
    "low",
    "level",
    "binary",
    "could",
    "function",
    "code",
    "string",
    "packed",
    "make",
    "public",
    "pure",
    "return",
    "bytes",
    "memory",
    "could",
    "say",
    "bytes",
    "memory",
    "string",
    "equals",
    "abi",
    "dot",
    "encode",
    "packed",
    "string",
    "code",
    "pack",
    "instead",
    "code",
    "return",
    "string",
    "compile",
    "see",
    "difference",
    "right",
    "compile",
    "delete",
    "old",
    "one",
    "deploy",
    "encode",
    "string",
    "encoded",
    "string",
    "gon",
    "na",
    "give",
    "us",
    "encoded",
    "string",
    "packed",
    "returns",
    "us",
    "much",
    "much",
    "smaller",
    "bytes",
    "object",
    "see",
    "size",
    "difference",
    "trying",
    "save",
    "gas",
    "code",
    "string",
    "packed",
    "going",
    "way",
    "us",
    "save",
    "lot",
    "gas",
    "abi",
    "dot",
    "encode",
    "pact",
    "actually",
    "really",
    "similar",
    "something",
    "done",
    "typecasting",
    "function",
    "code",
    "string",
    "bytes",
    "public",
    "pure",
    "returns",
    "bytes",
    "memory",
    "bytes",
    "memories",
    "string",
    "equals",
    "bytes",
    "string",
    "turn",
    "string",
    "two",
    "going",
    "look",
    "nearly",
    "identical",
    "right",
    "compile",
    "delete",
    "old",
    "contract",
    "deploy",
    "code",
    "string",
    "bytes",
    "gives",
    "us",
    "encode",
    "string",
    "pack",
    "using",
    "abi",
    "encode",
    "pack",
    "give",
    "us",
    "exact",
    "output",
    "whereas",
    "encode",
    "strings",
    "give",
    "us",
    "big",
    "piece",
    "two",
    "get",
    "result",
    "behind",
    "scenes",
    "something",
    "little",
    "bit",
    "different",
    "going",
    "go",
    "exactly",
    "left",
    "link",
    "inside",
    "code",
    "want",
    "learn",
    "exactly",
    "nft",
    "right",
    "abr",
    "dot",
    "encode",
    "packed",
    "combining",
    "two",
    "strings",
    "putting",
    "together",
    "encoding",
    "bytes",
    "implementation",
    "packed",
    "bytes",
    "implementation",
    "typecasting",
    "back",
    "bytes",
    "string",
    "concatenate",
    "point",
    "might",
    "thinking",
    "okay",
    "cool",
    "great",
    "patrick",
    "set",
    "understand",
    "happy",
    "go",
    "back",
    "project",
    "want",
    "absolutely",
    "go",
    "skip",
    "section",
    "viewers",
    "might",
    "going",
    "okay",
    "patrick",
    "seems",
    "pretty",
    "cool",
    "sure",
    "encode",
    "pacts",
    "encode",
    "function",
    "concatenate",
    "strings",
    "probably",
    "function",
    "actually",
    "well",
    "asking",
    "glad",
    "asked",
    "glad",
    "curious",
    "going",
    "find",
    "encode",
    "stuff",
    "like",
    "strings",
    "numbers",
    "really",
    "anything",
    "decode",
    "stuff",
    "say",
    "function",
    "decode",
    "string",
    "public",
    "returns",
    "string",
    "memory",
    "string",
    "memory",
    "string",
    "equals",
    "abi",
    "dot",
    "decode",
    "going",
    "take",
    "couple",
    "parameters",
    "look",
    "docs",
    "abi",
    "dot",
    "decode",
    "takes",
    "first",
    "argument",
    "encoded",
    "data",
    "takes",
    "tuple",
    "kind",
    "think",
    "list",
    "quite",
    "list",
    "set",
    "types",
    "decode",
    "returns",
    "number",
    "parameters",
    "gave",
    "might",
    "want",
    "say",
    "string",
    "memory",
    "string",
    "adding",
    "let",
    "give",
    "input",
    "encode",
    "string",
    "function",
    "result",
    "encode",
    "string",
    "function",
    "right",
    "going",
    "big",
    "thing",
    "kind",
    "equivalent",
    "sticking",
    "massive",
    "thing",
    "going",
    "stick",
    "massive",
    "thing",
    "really",
    "big",
    "gon",
    "na",
    "say",
    "let",
    "decode",
    "result",
    "encode",
    "string",
    "let",
    "decode",
    "string",
    "need",
    "tell",
    "solidity",
    "hey",
    "going",
    "decode",
    "know",
    "decode",
    "like",
    "okay",
    "cool",
    "decode",
    "like",
    "want",
    "say",
    "oh",
    "string",
    "decode",
    "string",
    "return",
    "string",
    "deploy",
    "old",
    "cotters",
    "delete",
    "last",
    "contract",
    "deploy",
    "new",
    "one",
    "code",
    "string",
    "code",
    "string",
    "whereas",
    "code",
    "string",
    "code",
    "string",
    "returns",
    "massive",
    "thing",
    "human",
    "like",
    "god",
    "ca",
    "read",
    "computers",
    "read",
    "ca",
    "really",
    "read",
    "say",
    "okay",
    "let",
    "decode",
    "back",
    "string",
    "form",
    "hit",
    "decode",
    "string",
    "get",
    "back",
    "string",
    "actually",
    "multi",
    "encode",
    "multi",
    "decode",
    "right",
    "encode",
    "much",
    "stuff",
    "want",
    "say",
    "function",
    "multi",
    "encode",
    "public",
    "pure",
    "returns",
    "bytes",
    "memory",
    "going",
    "encode",
    "couple",
    "things",
    "say",
    "bytes",
    "memory",
    "string",
    "equals",
    "abi",
    "dot",
    "encode",
    "string",
    "comma",
    "bigger",
    "going",
    "encode",
    "two",
    "strings",
    "gon",
    "na",
    "encode",
    "string",
    "bigger",
    "two",
    "strings",
    "going",
    "encode",
    "return",
    "string",
    "even",
    "though",
    "know",
    "bytes",
    "actually",
    "multi",
    "decode",
    "say",
    "function",
    "multi",
    "decode",
    "public",
    "pure",
    "returns",
    "say",
    "returns",
    "two",
    "strings",
    "string",
    "memory",
    "string",
    "memory",
    "instead",
    "string",
    "memory",
    "string",
    "equals",
    "api",
    "decode",
    "say",
    "string",
    "memory",
    "string",
    "comma",
    "string",
    "memory",
    "string",
    "gon",
    "na",
    "get",
    "returns",
    "equals",
    "avi",
    "dot",
    "decode",
    "let",
    "decode",
    "multi",
    "encode",
    "result",
    "doubly",
    "encoded",
    "strings",
    "string",
    "another",
    "string",
    "return",
    "string",
    "go",
    "return",
    "string",
    "string",
    "need",
    "semicolon",
    "deploy",
    "let",
    "close",
    "deploy",
    "new",
    "one",
    "right",
    "multi",
    "code",
    "gives",
    "us",
    "even",
    "bigger",
    "bites",
    "object",
    "right",
    "two",
    "strings",
    "encoded",
    "hit",
    "multi",
    "decode",
    "take",
    "second",
    "think",
    "going",
    "put",
    "output",
    "let",
    "go",
    "ahead",
    "hit",
    "gon",
    "na",
    "give",
    "us",
    "two",
    "strings",
    "right",
    "gon",
    "na",
    "give",
    "two",
    "strings",
    "string",
    "bigger",
    "tell",
    "solidity",
    "encode",
    "bunch",
    "stuff",
    "even",
    "decode",
    "telling",
    "okay",
    "big",
    "object",
    "two",
    "strings",
    "combined",
    "decode",
    "even",
    "multi",
    "encode",
    "encode",
    "pack",
    "thing",
    "right",
    "could",
    "function",
    "multi",
    "encode",
    "packed",
    "public",
    "pure",
    "returns",
    "bytes",
    "memory",
    "bytes",
    "memory",
    "string",
    "equals",
    "abi",
    "dot",
    "encode",
    "packed",
    "string",
    "comma",
    "bigger",
    "return",
    "string",
    "could",
    "right",
    "going",
    "give",
    "us",
    "packed",
    "version",
    "two",
    "strings",
    "decoding",
    "actually",
    "going",
    "work",
    "packed",
    "encoding",
    "tried",
    "gon",
    "na",
    "say",
    "work",
    "try",
    "function",
    "multi",
    "decode",
    "packed",
    "public",
    "pure",
    "returns",
    "string",
    "memory",
    "string",
    "memory",
    "string",
    "equals",
    "avi",
    "dot",
    "decode",
    "multi",
    "encode",
    "packed",
    "string",
    "exactly",
    "return",
    "string",
    "think",
    "gon",
    "na",
    "happen",
    "let",
    "let",
    "try",
    "delete",
    "old",
    "contract",
    "deploy",
    "new",
    "one",
    "multi",
    "decode",
    "packed",
    "multi",
    "encode",
    "multi",
    "decode",
    "packed",
    "actually",
    "get",
    "error",
    "solidity",
    "basically",
    "goes",
    "yeah",
    "looks",
    "like",
    "packed",
    "know",
    "decode",
    "instead",
    "function",
    "string",
    "cast",
    "packed",
    "like",
    "public",
    "pure",
    "returns",
    "string",
    "memory",
    "string",
    "memory",
    "string",
    "equals",
    "string",
    "multi",
    "code",
    "packed",
    "return",
    "string",
    "one",
    "work",
    "right",
    "pact",
    "encoding",
    "kind",
    "similar",
    "type",
    "casting",
    "compile",
    "redeploy",
    "multi",
    "string",
    "cast",
    "pact",
    "get",
    "trying",
    "bigger",
    "right",
    "space",
    "put",
    "space",
    "learned",
    "abi",
    "dot",
    "encode",
    "decoding",
    "know",
    "okay",
    "computer",
    "aetherium",
    "evm",
    "evm",
    "compatible",
    "chain",
    "looking",
    "looking",
    "bytecode",
    "looking",
    "binary",
    "stuff",
    "learned",
    "little",
    "bit",
    "encode",
    "different",
    "variables",
    "binary",
    "data",
    "bit",
    "well",
    "since",
    "know",
    "transactions",
    "going",
    "compiled",
    "binary",
    "stuff",
    "actually",
    "populate",
    "data",
    "value",
    "transactions",
    "binary",
    "code",
    "going",
    "use",
    "transaction",
    "contract",
    "deployment",
    "data",
    "field",
    "contract",
    "deployment",
    "going",
    "binary",
    "code",
    "contract",
    "function",
    "call",
    "data",
    "piece",
    "going",
    "send",
    "address",
    "data",
    "function",
    "call",
    "address",
    "let",
    "look",
    "another",
    "one",
    "transactions",
    "ether",
    "scan",
    "right",
    "one",
    "contracts",
    "going",
    "look",
    "enter",
    "raffle",
    "previous",
    "section",
    "select",
    "look",
    "input",
    "data",
    "says",
    "function",
    "enter",
    "raffle",
    "method",
    "id",
    "look",
    "original",
    "getting",
    "sent",
    "data",
    "field",
    "binary",
    "hex",
    "weird",
    "low",
    "level",
    "bytes",
    "thing",
    "ethereum",
    "blockchain",
    "whatever",
    "evm",
    "chain",
    "working",
    "knows",
    "function",
    "call",
    "translates",
    "function",
    "exact",
    "thing",
    "call",
    "functions",
    "actually",
    "crazy",
    "newfound",
    "data",
    "coding",
    "stuff",
    "actually",
    "send",
    "data",
    "field",
    "transaction",
    "ourself",
    "transaction",
    "call",
    "back",
    "ether",
    "throwback",
    "data",
    "thing",
    "contract",
    "creation",
    "code",
    "well",
    "instead",
    "could",
    "populate",
    "data",
    "thing",
    "function",
    "call",
    "code",
    "exact",
    "function",
    "want",
    "call",
    "binary",
    "hex",
    "addition",
    "might",
    "thinking",
    "oh",
    "well",
    "would",
    "always",
    "use",
    "interface",
    "abi",
    "stuff",
    "well",
    "maybe",
    "maybe",
    "function",
    "name",
    "maybe",
    "parameters",
    "want",
    "send",
    "maybe",
    "want",
    "make",
    "code",
    "able",
    "send",
    "arbitrary",
    "functions",
    "make",
    "arbitrary",
    "calls",
    "random",
    "really",
    "advanced",
    "stuff",
    "right",
    "sending",
    "function",
    "calls",
    "directly",
    "populating",
    "data",
    "field",
    "going",
    "incredibly",
    "important",
    "remember",
    "said",
    "always",
    "going",
    "need",
    "abi",
    "contract",
    "address",
    "send",
    "function",
    "said",
    "always",
    "need",
    "api",
    "originally",
    "kind",
    "talking",
    "thing",
    "big",
    "big",
    "thing",
    "cool",
    "api",
    "like",
    "human",
    "readable",
    "api",
    "also",
    "non",
    "human",
    "readable",
    "api",
    "additionally",
    "need",
    "stuff",
    "really",
    "use",
    "name",
    "function",
    "input",
    "types",
    "send",
    "function",
    "call",
    "question",
    "okay",
    "send",
    "send",
    "transactions",
    "call",
    "functions",
    "data",
    "field",
    "populated",
    "next",
    "question",
    "populate",
    "data",
    "field",
    "populate",
    "data",
    "field",
    "make",
    "one",
    "function",
    "calls",
    "send",
    "transactions",
    "slowly",
    "actually",
    "low",
    "level",
    "keywords",
    "namely",
    "static",
    "call",
    "call",
    "actually",
    "used",
    "call",
    "past",
    "code",
    "look",
    "familiar",
    "well",
    "use",
    "similar",
    "setup",
    "fulfill",
    "random",
    "words",
    "lottery",
    "right",
    "sent",
    "money",
    "recent",
    "winner",
    "dot",
    "call",
    "right",
    "recently",
    "address",
    "recent",
    "winner",
    "call",
    "weird",
    "stuff",
    "brackets",
    "nothing",
    "parentheses",
    "actually",
    "essentially",
    "use",
    "call",
    "keyword",
    "previously",
    "really",
    "tell",
    "call",
    "call",
    "functions",
    "change",
    "state",
    "blockchain",
    "static",
    "call",
    "basically",
    "low",
    "level",
    "call",
    "view",
    "pure",
    "functions",
    "write",
    "static",
    "calls",
    "gon",
    "na",
    "like",
    "okay",
    "change",
    "state",
    "blockchain",
    "one",
    "give",
    "us",
    "return",
    "value",
    "kind",
    "similar",
    "like",
    "view",
    "pure",
    "function",
    "low",
    "level",
    "also",
    "send",
    "word",
    "like",
    "basically",
    "forget",
    "gon",
    "na",
    "working",
    "call",
    "instead",
    "call",
    "know",
    "later",
    "learn",
    "another",
    "one",
    "called",
    "delegate",
    "call",
    "worry",
    "recent",
    "winter",
    "duck",
    "call",
    "like",
    "little",
    "squiggly",
    "brackets",
    "said",
    "okay",
    "updated",
    "value",
    "directly",
    "transaction",
    "solidity",
    "transaction",
    "fields",
    "directly",
    "updated",
    "value",
    "little",
    "brackets",
    "right",
    "also",
    "directly",
    "update",
    "gas",
    "limited",
    "gas",
    "price",
    "little",
    "brackets",
    "wanted",
    "well",
    "parentheses",
    "going",
    "stick",
    "data",
    "since",
    "wanted",
    "withdrawal",
    "function",
    "previously",
    "send",
    "money",
    "said",
    "okay",
    "send",
    "money",
    "change",
    "value",
    "going",
    "send",
    "pass",
    "data",
    "keep",
    "data",
    "bit",
    "empty",
    "remember",
    "hit",
    "button",
    "right",
    "called",
    "data",
    "empty",
    "essentially",
    "running",
    "command",
    "called",
    "data",
    "empty",
    "section",
    "empty",
    "updating",
    "value",
    "set",
    "transaction",
    "section",
    "use",
    "populate",
    "data",
    "actually",
    "call",
    "specific",
    "functions",
    "going",
    "put",
    "whole",
    "bunch",
    "comments",
    "squiggly",
    "brackets",
    "able",
    "pass",
    "specific",
    "fields",
    "transaction",
    "like",
    "value",
    "parentheses",
    "able",
    "pass",
    "data",
    "order",
    "call",
    "specific",
    "function",
    "function",
    "call",
    "since",
    "sending",
    "want",
    "call",
    "function",
    "send",
    "data",
    "parentheses",
    "think",
    "spelt",
    "wrong",
    "learned",
    "ton",
    "let",
    "quick",
    "refresher",
    "learned",
    "going",
    "actually",
    "learn",
    "call",
    "function",
    "using",
    "syntax",
    "well",
    "learned",
    "really",
    "high",
    "level",
    "want",
    "combine",
    "strings",
    "abi",
    "dot",
    "encode",
    "packed",
    "typecast",
    "string",
    "newer",
    "versions",
    "solidity",
    "string",
    "dot",
    "concat",
    "know",
    "hi",
    "mom",
    "come",
    "miss",
    "newer",
    "versions",
    "solidity",
    "works",
    "well",
    "older",
    "versions",
    "solidity",
    "learned",
    "lot",
    "low",
    "level",
    "stuff",
    "learned",
    "okay",
    "compile",
    "contracts",
    "get",
    "abi",
    "file",
    "weird",
    "binary",
    "thing",
    "numbers",
    "letters",
    "stuff",
    "gets",
    "deploy",
    "contract",
    "gets",
    "sent",
    "data",
    "field",
    "contract",
    "creation",
    "transaction",
    "contract",
    "creations",
    "data",
    "populated",
    "binary",
    "code",
    "function",
    "calls",
    "going",
    "define",
    "functions",
    "call",
    "parameters",
    "gon",
    "na",
    "go",
    "next",
    "learned",
    "actually",
    "encode",
    "stuff",
    "binary",
    "low",
    "level",
    "code",
    "program",
    "process",
    "read",
    "low",
    "level",
    "stuff",
    "execute",
    "accordingly",
    "read",
    "evm",
    "stuff",
    "read",
    "specific",
    "binary",
    "aetherium",
    "specified",
    "evm",
    "specified",
    "considered",
    "evm",
    "compatible",
    "encode",
    "numbers",
    "encode",
    "strings",
    "encode",
    "pretty",
    "much",
    "anything",
    "want",
    "encode",
    "save",
    "space",
    "encode",
    "packed",
    "decode",
    "stuff",
    "encoded",
    "ca",
    "decode",
    "stuff",
    "encode",
    "packed",
    "multi",
    "encode",
    "stuff",
    "multi",
    "decode",
    "stuff",
    "finally",
    "use",
    "call",
    "function",
    "add",
    "data",
    "make",
    "call",
    "want",
    "smart",
    "contract",
    "going",
    "learn",
    "next",
    "alright",
    "great",
    "time",
    "take",
    "break",
    "learned",
    "really",
    "difficult",
    "concepts",
    "like",
    "said",
    "get",
    "first",
    "time",
    "okay",
    "alright",
    "welcome",
    "back",
    "learned",
    "encoding",
    "stuff",
    "let",
    "learn",
    "populate",
    "parenthesis",
    "data",
    "field",
    "call",
    "function",
    "essentially",
    "blockchain",
    "going",
    "low",
    "level",
    "work",
    "binary",
    "work",
    "bytes",
    "work",
    "hex",
    "interact",
    "smart",
    "contracts",
    "let",
    "create",
    "new",
    "file",
    "gon",
    "na",
    "call",
    "call",
    "anything",
    "start",
    "spdx",
    "license",
    "identifier",
    "mit",
    "let",
    "talk",
    "order",
    "call",
    "order",
    "call",
    "function",
    "using",
    "data",
    "field",
    "call",
    "need",
    "encode",
    "function",
    "name",
    "parameters",
    "want",
    "add",
    "right",
    "call",
    "function",
    "call",
    "function",
    "name",
    "call",
    "parameters",
    "need",
    "encode",
    "binary",
    "level",
    "evm",
    "aetherium",
    "based",
    "smart",
    "contracts",
    "solidity",
    "stuff",
    "understand",
    "actually",
    "going",
    "order",
    "going",
    "need",
    "work",
    "two",
    "concepts",
    "encode",
    "function",
    "name",
    "evm",
    "solidity",
    "understand",
    "actually",
    "grab",
    "something",
    "called",
    "function",
    "selector",
    "function",
    "selector",
    "going",
    "first",
    "four",
    "bytes",
    "function",
    "signature",
    "function",
    "signature",
    "going",
    "string",
    "defines",
    "function",
    "name",
    "parameter",
    "actually",
    "mean",
    "well",
    "transfer",
    "function",
    "right",
    "known",
    "function",
    "signature",
    "function",
    "name",
    "going",
    "transfer",
    "going",
    "take",
    "address",
    "un",
    "256",
    "inputs",
    "encode",
    "transfer",
    "function",
    "take",
    "first",
    "four",
    "bytes",
    "get",
    "refers",
    "function",
    "selector",
    "solidity",
    "knows",
    "bytecode",
    "binary",
    "code",
    "function",
    "selector",
    "slitting",
    "knows",
    "oh",
    "talking",
    "transfer",
    "function",
    "want",
    "call",
    "transfer",
    "function",
    "one",
    "first",
    "things",
    "need",
    "use",
    "call",
    "call",
    "function",
    "want",
    "need",
    "get",
    "function",
    "selector",
    "get",
    "number",
    "different",
    "ways",
    "one",
    "ways",
    "encoding",
    "function",
    "signature",
    "grabbing",
    "first",
    "four",
    "bytes",
    "create",
    "contract",
    "pragma",
    "solidity",
    "zero",
    "point",
    "say",
    "contract",
    "call",
    "anything",
    "give",
    "stored",
    "variables",
    "give",
    "stored",
    "variables",
    "address",
    "public",
    "underscore",
    "amount",
    "address",
    "256",
    "public",
    "underscore",
    "mount",
    "create",
    "function",
    "called",
    "transfer",
    "function",
    "transfer",
    "normally",
    "would",
    "actually",
    "like",
    "transfer",
    "like",
    "erc",
    "20",
    "transfer",
    "going",
    "address",
    "address",
    "add",
    "256",
    "amount",
    "amount",
    "make",
    "public",
    "function",
    "set",
    "address",
    "equals",
    "address",
    "amount",
    "equals",
    "amount",
    "gon",
    "na",
    "function",
    "going",
    "work",
    "function",
    "selector",
    "function",
    "function",
    "signature",
    "takes",
    "address",
    "address",
    "amount",
    "gets",
    "boiled",
    "function",
    "selector",
    "function",
    "signature",
    "course",
    "bytecode",
    "going",
    "code",
    "saying",
    "okay",
    "function",
    "blah",
    "blah",
    "blah",
    "actually",
    "even",
    "write",
    "function",
    "get",
    "function",
    "selector",
    "say",
    "function",
    "get",
    "selector",
    "gon",
    "na",
    "say",
    "get",
    "selector",
    "one",
    "gon",
    "na",
    "show",
    "ways",
    "get",
    "function",
    "selector",
    "make",
    "public",
    "pure",
    "return",
    "bytes",
    "selector",
    "could",
    "say",
    "select",
    "equals",
    "bytes",
    "hash",
    "check",
    "56",
    "bytes",
    "signature",
    "transfer",
    "takes",
    "address",
    "unt",
    "right",
    "compile",
    "run",
    "let",
    "get",
    "rid",
    "old",
    "contract",
    "deploy",
    "make",
    "sure",
    "call",
    "anything",
    "one",
    "couple",
    "things",
    "hit",
    "get",
    "selector",
    "one",
    "get",
    "oh",
    "x",
    "905",
    "blah",
    "blah",
    "blah",
    "right",
    "example",
    "gave",
    "right",
    "tells",
    "solidity",
    "tells",
    "smart",
    "contract",
    "okay",
    "make",
    "call",
    "contract",
    "see",
    "function",
    "data",
    "referring",
    "transfer",
    "function",
    "address",
    "un",
    "256",
    "input",
    "parameter",
    "see",
    "address",
    "function",
    "knows",
    "execute",
    "data",
    "great",
    "course",
    "sml",
    "address",
    "zeros",
    "also",
    "see",
    "okay",
    "happens",
    "call",
    "transfer",
    "function",
    "right",
    "takes",
    "address",
    "amount",
    "let",
    "give",
    "address",
    "address",
    "777",
    "amount",
    "hit",
    "transfer",
    "log",
    "right",
    "get",
    "little",
    "checkmark",
    "saying",
    "success",
    "hit",
    "amount",
    "get",
    "address",
    "right",
    "us",
    "directly",
    "calling",
    "transfer",
    "directly",
    "call",
    "transfer",
    "basically",
    "saying",
    "hey",
    "grab",
    "function",
    "selector",
    "stuff",
    "tell",
    "stuff",
    "minute",
    "function",
    "selector",
    "okay",
    "great",
    "else",
    "need",
    "also",
    "need",
    "parameters",
    "want",
    "add",
    "going",
    "need",
    "encode",
    "parameters",
    "function",
    "selector",
    "gon",
    "na",
    "gon",
    "na",
    "say",
    "function",
    "get",
    "data",
    "call",
    "transfer",
    "going",
    "get",
    "data",
    "call",
    "transfer",
    "going",
    "take",
    "input",
    "parameters",
    "going",
    "encode",
    "work",
    "function",
    "selector",
    "gon",
    "na",
    "say",
    "address",
    "address",
    "x",
    "amount",
    "public",
    "pure",
    "returns",
    "bytes",
    "memory",
    "return",
    "use",
    "one",
    "abi",
    "codings",
    "cheat",
    "sheet",
    "far",
    "api",
    "code",
    "lot",
    "encoding",
    "since",
    "function",
    "selector",
    "actually",
    "abi",
    "dot",
    "encode",
    "selector",
    "abi",
    "encodes",
    "given",
    "arguments",
    "starting",
    "second",
    "prepends",
    "given",
    "four",
    "byte",
    "selector",
    "cobra",
    "selector",
    "sticking",
    "selector",
    "onto",
    "data",
    "going",
    "give",
    "going",
    "return",
    "api",
    "dot",
    "encode",
    "select",
    "door",
    "going",
    "pass",
    "result",
    "get",
    "selector",
    "one",
    "going",
    "give",
    "address",
    "amount",
    "going",
    "gon",
    "na",
    "give",
    "us",
    "data",
    "need",
    "put",
    "data",
    "field",
    "transaction",
    "send",
    "contract",
    "let",
    "contract",
    "know",
    "hey",
    "go",
    "use",
    "transfer",
    "function",
    "pass",
    "address",
    "amount",
    "compile",
    "run",
    "let",
    "delete",
    "old",
    "contract",
    "deploy",
    "got",
    "new",
    "function",
    "called",
    "get",
    "data",
    "call",
    "transfer",
    "pass",
    "know",
    "pass",
    "contract",
    "address",
    "also",
    "777",
    "thing",
    "right",
    "going",
    "put",
    "data",
    "field",
    "transaction",
    "order",
    "us",
    "call",
    "transfer",
    "anywhere",
    "bytes",
    "binary",
    "encoded",
    "data",
    "hey",
    "call",
    "transfer",
    "function",
    "address",
    "specified",
    "know",
    "777",
    "mt",
    "actually",
    "call",
    "transfer",
    "function",
    "without",
    "even",
    "directly",
    "call",
    "say",
    "function",
    "call",
    "transfer",
    "function",
    "directly",
    "guess",
    "binary",
    "might",
    "better",
    "title",
    "get",
    "gist",
    "say",
    "address",
    "address",
    "256",
    "amount",
    "make",
    "public",
    "function",
    "returns",
    "bytes",
    "four",
    "bool",
    "see",
    "minute",
    "call",
    "thing",
    "send",
    "raffle",
    "money",
    "recent",
    "winner",
    "dot",
    "call",
    "right",
    "going",
    "address",
    "us",
    "going",
    "address",
    "dot",
    "call",
    "saying",
    "contracts",
    "address",
    "could",
    "put",
    "address",
    "address",
    "dot",
    "call",
    "going",
    "call",
    "encoded",
    "data",
    "points",
    "us",
    "transfer",
    "function",
    "parameters",
    "going",
    "address",
    "could",
    "get",
    "data",
    "call",
    "transfer",
    "address",
    "amounts",
    "right",
    "could",
    "like",
    "could",
    "kind",
    "wrong",
    "way",
    "could",
    "abi",
    "dot",
    "code",
    "select",
    "dorm",
    "get",
    "selector",
    "one",
    "comma",
    "address",
    "comma",
    "amount",
    "actually",
    "semicolon",
    "sorry",
    "going",
    "dot",
    "call",
    "thing",
    "right",
    "going",
    "return",
    "exactly",
    "saw",
    "going",
    "return",
    "bool",
    "success",
    "whether",
    "transaction",
    "successful",
    "bytes",
    "memory",
    "returned",
    "data",
    "going",
    "know",
    "whatever",
    "call",
    "returns",
    "right",
    "put",
    "like",
    "require",
    "success",
    "right",
    "us",
    "going",
    "return",
    "bytes",
    "four",
    "bytes",
    "return",
    "datum",
    "success",
    "going",
    "return",
    "first",
    "four",
    "bytes",
    "whatever",
    "data",
    "get",
    "returned",
    "going",
    "return",
    "whether",
    "successful",
    "function",
    "going",
    "us",
    "directly",
    "call",
    "transfer",
    "function",
    "passing",
    "parameters",
    "without",
    "us",
    "like",
    "contract",
    "dot",
    "transfer",
    "transfer",
    "whatever",
    "right",
    "across",
    "multiple",
    "contracts",
    "across",
    "different",
    "contracts",
    "changing",
    "address",
    "call",
    "let",
    "go",
    "ahead",
    "compile",
    "run",
    "delete",
    "old",
    "contract",
    "deploy",
    "call",
    "anything",
    "right",
    "sml",
    "estimators",
    "zero",
    "call",
    "transfer",
    "function",
    "directly",
    "pass",
    "one",
    "address",
    "pull",
    "logs",
    "hit",
    "gon",
    "na",
    "get",
    "transaction",
    "response",
    "scroll",
    "ever",
    "see",
    "decoded",
    "output",
    "bytes",
    "bunch",
    "zeros",
    "right",
    "transfer",
    "actually",
    "return",
    "anything",
    "gon",
    "na",
    "whole",
    "bunch",
    "zeros",
    "boolean",
    "true",
    "means",
    "successful",
    "since",
    "successful",
    "two",
    "changed",
    "based",
    "let",
    "go",
    "ahead",
    "try",
    "indeed",
    "see",
    "changed",
    "directly",
    "called",
    "transfer",
    "function",
    "without",
    "call",
    "transfer",
    "function",
    "also",
    "encode",
    "signature",
    "instead",
    "selector",
    "go",
    "cheat",
    "sheet",
    "also",
    "encode",
    "signature",
    "takes",
    "string",
    "memory",
    "signature",
    "equivalent",
    "abi",
    "dot",
    "encode",
    "selector",
    "bytes",
    "cac",
    "bytes",
    "know",
    "signature",
    "equivalent",
    "exactly",
    "step",
    "us",
    "could",
    "copy",
    "whole",
    "thing",
    "paste",
    "right",
    "could",
    "instead",
    "encoded",
    "selector",
    "encode",
    "sig",
    "netshare",
    "function",
    "signature",
    "copy",
    "function",
    "signature",
    "paste",
    "compile",
    "ran",
    "compilation",
    "error",
    "call",
    "transfer",
    "function",
    "directly",
    "sig",
    "called",
    "compile",
    "leader",
    "old",
    "contract",
    "deploy",
    "two",
    "zeros",
    "copy",
    "contract",
    "address",
    "call",
    "contract",
    "call",
    "transfer",
    "function",
    "directly",
    "sig",
    "paste",
    "777",
    "call",
    "let",
    "check",
    "see",
    "exact",
    "thing",
    "api",
    "dot",
    "encode",
    "signature",
    "abi",
    "dot",
    "encode",
    "selector",
    "encode",
    "signature",
    "turns",
    "us",
    "selector",
    "us",
    "encoded",
    "selector",
    "whole",
    "bunch",
    "different",
    "ways",
    "get",
    "selectors",
    "going",
    "code",
    "gon",
    "na",
    "say",
    "bunch",
    "different",
    "ways",
    "get",
    "selector",
    "knows",
    "might",
    "want",
    "use",
    "one",
    "reasons",
    "right",
    "ton",
    "reasons",
    "might",
    "want",
    "get",
    "selector",
    "different",
    "way",
    "video",
    "going",
    "explain",
    "go",
    "different",
    "different",
    "function",
    "selector",
    "getting",
    "methods",
    "go",
    "github",
    "repo",
    "associated",
    "course",
    "ton",
    "comments",
    "explain",
    "well",
    "going",
    "show",
    "though",
    "actually",
    "contracts",
    "interact",
    "without",
    "actually",
    "code",
    "contract",
    "going",
    "make",
    "second",
    "contract",
    "binary",
    "byte",
    "information",
    "call",
    "transfer",
    "function",
    "different",
    "contract",
    "gon",
    "na",
    "show",
    "work",
    "another",
    "contract",
    "made",
    "called",
    "call",
    "function",
    "without",
    "contract",
    "actually",
    "going",
    "call",
    "transfer",
    "function",
    "using",
    "address",
    "function",
    "selector",
    "signature",
    "stuff",
    "going",
    "update",
    "storage",
    "variables",
    "call",
    "anything",
    "contract",
    "another",
    "contract",
    "binary",
    "calling",
    "right",
    "let",
    "compile",
    "going",
    "deploy",
    "actually",
    "leave",
    "right",
    "leave",
    "let",
    "deploy",
    "call",
    "function",
    "without",
    "contract",
    "pass",
    "input",
    "parameter",
    "call",
    "anything",
    "contract",
    "address",
    "deploy",
    "call",
    "transfer",
    "function",
    "directly",
    "know",
    "maybe",
    "switch",
    "contract",
    "address",
    "new",
    "contract",
    "address",
    "give",
    "new",
    "number",
    "right",
    "click",
    "call",
    "transfer",
    "function",
    "go",
    "back",
    "see",
    "indeed",
    "updated",
    "call",
    "stuff",
    "considered",
    "low",
    "level",
    "best",
    "practice",
    "try",
    "avoid",
    "import",
    "interface",
    "much",
    "better",
    "like",
    "going",
    "compiler",
    "side",
    "going",
    "able",
    "check",
    "see",
    "types",
    "matching",
    "stuff",
    "usually",
    "low",
    "level",
    "calls",
    "security",
    "auditor",
    "checkers",
    "might",
    "say",
    "hey",
    "like",
    "books",
    "little",
    "bit",
    "low",
    "level",
    "stuff",
    "said",
    "learned",
    "ton",
    "lower",
    "level",
    "solidity",
    "really",
    "advanced",
    "stuff",
    "like",
    "said",
    "hard",
    "kind",
    "confused",
    "worry",
    "always",
    "come",
    "back",
    "section",
    "try",
    "little",
    "bit",
    "advanced",
    "want",
    "try",
    "understand",
    "awesome",
    "absolutely",
    "left",
    "links",
    "github",
    "repo",
    "associated",
    "lesson",
    "definitely",
    "recommend",
    "check",
    "one",
    "ones",
    "definitely",
    "check",
    "going",
    "deconstructing",
    "solidity",
    "openzeppelin",
    "really",
    "breaks",
    "exactly",
    "going",
    "behind",
    "scenes",
    "contract",
    "want",
    "learn",
    "opcodes",
    "low",
    "level",
    "stuff",
    "definitely",
    "give",
    "read",
    "phenomenal",
    "read",
    "essentially",
    "breaks",
    "little",
    "bit",
    "went",
    "couple",
    "videos",
    "well",
    "left",
    "whole",
    "bunch",
    "links",
    "said",
    "back",
    "nft",
    "know",
    "abi",
    "dot",
    "encoding",
    "stuff",
    "right",
    "know",
    "abi",
    "dot",
    "encode",
    "packed",
    "way",
    "using",
    "way",
    "concatenate",
    "strings",
    "using",
    "abi",
    "dot",
    "encode",
    "really",
    "crazy",
    "superpowers",
    "might",
    "later",
    "section",
    "course",
    "case",
    "use",
    "base",
    "64",
    "dot",
    "encode",
    "thing",
    "imported",
    "right",
    "imported",
    "base",
    "64",
    "dot",
    "encode",
    "encode",
    "svg",
    "pass",
    "base",
    "64",
    "encoding",
    "going",
    "copy",
    "paste",
    "example",
    "like",
    "example",
    "pass",
    "like",
    "svg",
    "width",
    "equals",
    "blah",
    "blah",
    "blah",
    "svg",
    "stuff",
    "kind",
    "similar",
    "showing",
    "pass",
    "input",
    "parameter",
    "output",
    "gon",
    "na",
    "get",
    "base",
    "64",
    "encoding",
    "gon",
    "na",
    "get",
    "massive",
    "kind",
    "string",
    "test",
    "later",
    "make",
    "sure",
    "works",
    "normally",
    "added",
    "function",
    "like",
    "right",
    "probably",
    "would",
    "test",
    "right",
    "away",
    "leave",
    "going",
    "great",
    "getting",
    "image",
    "want",
    "image",
    "right",
    "going",
    "need",
    "metadata",
    "need",
    "json",
    "object",
    "image",
    "url",
    "like",
    "need",
    "stick",
    "image",
    "base",
    "64",
    "encoded",
    "image",
    "image",
    "field",
    "json",
    "actually",
    "well",
    "know",
    "erc",
    "721",
    "code",
    "comes",
    "token",
    "uri",
    "token",
    "uri",
    "points",
    "tells",
    "us",
    "code",
    "going",
    "look",
    "like",
    "actually",
    "base",
    "64",
    "encode",
    "json",
    "well",
    "turn",
    "json",
    "token",
    "uri",
    "basically",
    "four",
    "encoded",
    "image",
    "get",
    "going",
    "stick",
    "url",
    "json",
    "going",
    "base",
    "64",
    "encode",
    "json",
    "going",
    "uri",
    "token",
    "uses",
    "function",
    "token",
    "uri",
    "right",
    "takes",
    "un",
    "256",
    "token",
    "id",
    "say",
    "going",
    "public",
    "view",
    "public",
    "view",
    "override",
    "returns",
    "string",
    "memory",
    "going",
    "override",
    "token",
    "uri",
    "function",
    "erc",
    "721",
    "whatever",
    "want",
    "going",
    "encode",
    "json",
    "text",
    "give",
    "contract",
    "base",
    "64",
    "based",
    "json",
    "token",
    "uri",
    "get",
    "started",
    "require",
    "underscore",
    "exists",
    "token",
    "id",
    "gon",
    "na",
    "say",
    "query",
    "non",
    "existent",
    "token",
    "yeah",
    "price",
    "exists",
    "revert",
    "error",
    "however",
    "going",
    "go",
    "like",
    "exists",
    "function",
    "comes",
    "ear",
    "c",
    "going",
    "thing",
    "gon",
    "na",
    "say",
    "require",
    "token",
    "exists",
    "100",
    "percent",
    "probably",
    "make",
    "exists",
    "token",
    "id",
    "know",
    "want",
    "want",
    "figure",
    "make",
    "token",
    "uri",
    "return",
    "base",
    "64",
    "encoded",
    "version",
    "json",
    "first",
    "know",
    "concatenate",
    "string",
    "right",
    "gon",
    "na",
    "first",
    "thing",
    "going",
    "api",
    "dot",
    "code",
    "packed",
    "going",
    "encode",
    "json",
    "chain",
    "going",
    "use",
    "single",
    "quotes",
    "inside",
    "api",
    "code",
    "packed",
    "going",
    "use",
    "double",
    "quotes",
    "going",
    "add",
    "json",
    "give",
    "name",
    "right",
    "first",
    "piece",
    "metadata",
    "needs",
    "name",
    "give",
    "name",
    "put",
    "comma",
    "say",
    "name",
    "nf",
    "going",
    "name",
    "get",
    "name",
    "function",
    "returns",
    "name",
    "gon",
    "na",
    "say",
    "name",
    "going",
    "name",
    "gon",
    "na",
    "concatenate",
    "stuff",
    "name",
    "right",
    "gon",
    "na",
    "continue",
    "json",
    "put",
    "little",
    "quote",
    "little",
    "quote",
    "encapsulate",
    "name",
    "quotes",
    "right",
    "remember",
    "concatenating",
    "big",
    "string",
    "making",
    "comma",
    "say",
    "description",
    "another",
    "quote",
    "time",
    "going",
    "put",
    "description",
    "say",
    "nft",
    "changes",
    "based",
    "chain",
    "link",
    "feed",
    "put",
    "end",
    "quote",
    "comma",
    "put",
    "comma",
    "outside",
    "quote",
    "say",
    "attributes",
    "say",
    "trait",
    "type",
    "going",
    "coolness",
    "comma",
    "value",
    "boom",
    "comma",
    "image",
    "put",
    "comma",
    "going",
    "put",
    "image",
    "uri",
    "image",
    "uri",
    "going",
    "get",
    "somewhere",
    "gon",
    "na",
    "say",
    "string",
    "memory",
    "image",
    "uri",
    "equals",
    "right",
    "clearly",
    "image",
    "arrived",
    "make",
    "format",
    "stuff",
    "put",
    "going",
    "put",
    "image",
    "uri",
    "get",
    "svg",
    "image",
    "uri",
    "mean",
    "close",
    "json",
    "though",
    "abi",
    "dot",
    "encode",
    "pack",
    "going",
    "concatenate",
    "together",
    "basically",
    "going",
    "string",
    "looks",
    "like",
    "great",
    "turn",
    "base",
    "64",
    "encoded",
    "token",
    "arrive",
    "people",
    "read",
    "going",
    "typecast",
    "whole",
    "thing",
    "bytes",
    "whole",
    "thing",
    "bytes",
    "exactly",
    "svg",
    "base",
    "64",
    "encoded",
    "base",
    "64",
    "dot",
    "encode",
    "put",
    "another",
    "pair",
    "parentheses",
    "around",
    "save",
    "auto",
    "formatted",
    "going",
    "give",
    "us",
    "second",
    "line",
    "right",
    "going",
    "give",
    "us",
    "bit",
    "going",
    "give",
    "us",
    "first",
    "bit",
    "right",
    "need",
    "append",
    "first",
    "bit",
    "good",
    "go",
    "basics",
    "data",
    "image",
    "svg",
    "plus",
    "xml",
    "basics",
    "form",
    "prefix",
    "images",
    "svg",
    "images",
    "right",
    "use",
    "prefix",
    "svg",
    "images",
    "prefix",
    "base",
    "jason",
    "going",
    "going",
    "data",
    "application",
    "json",
    "base",
    "going",
    "like",
    "instead",
    "erc",
    "721",
    "something",
    "called",
    "base",
    "uri",
    "going",
    "override",
    "going",
    "use",
    "gon",
    "na",
    "say",
    "function",
    "underscore",
    "base",
    "uri",
    "internal",
    "pure",
    "going",
    "override",
    "one",
    "erc",
    "721",
    "going",
    "returns",
    "string",
    "memory",
    "going",
    "return",
    "bit",
    "right",
    "use",
    "base",
    "uri",
    "append",
    "right",
    "going",
    "append",
    "first",
    "part",
    "base",
    "64",
    "encoded",
    "json",
    "order",
    "append",
    "abi",
    "dot",
    "encode",
    "packed",
    "put",
    "say",
    "going",
    "going",
    "concatenate",
    "base",
    "uri",
    "massive",
    "thing",
    "created",
    "save",
    "ought",
    "format",
    "obviously",
    "bytes",
    "object",
    "want",
    "string",
    "got",
    "typecast",
    "string",
    "another",
    "prints",
    "see",
    "actually",
    "return",
    "basically",
    "creating",
    "json",
    "string",
    "encode",
    "bytes",
    "way",
    "encode",
    "base",
    "encoded",
    "base",
    "64",
    "going",
    "look",
    "like",
    "second",
    "string",
    "gon",
    "na",
    "look",
    "like",
    "append",
    "initial",
    "part",
    "json",
    "objects",
    "data",
    "application",
    "json",
    "append",
    "api",
    "dot",
    "encode",
    "packed",
    "cast",
    "string",
    "boom",
    "token",
    "uri",
    "look",
    "something",
    "like",
    "update",
    "image",
    "uri",
    "get",
    "function",
    "appear",
    "good",
    "go",
    "let",
    "finish",
    "let",
    "constructor",
    "passing",
    "low",
    "svg",
    "high",
    "svg",
    "low",
    "svg",
    "high",
    "svg",
    "well",
    "basically",
    "saying",
    "price",
    "asset",
    "low",
    "show",
    "frown",
    "price",
    "asset",
    "high",
    "show",
    "smiley",
    "face",
    "gon",
    "na",
    "give",
    "frown",
    "svg",
    "happy",
    "svg",
    "input",
    "parameters",
    "low",
    "cg",
    "high",
    "svg",
    "probably",
    "want",
    "save",
    "necessarily",
    "want",
    "save",
    "like",
    "svg",
    "format",
    "want",
    "store",
    "image",
    "uri",
    "right",
    "want",
    "store",
    "string",
    "instead",
    "actual",
    "svg",
    "right",
    "constructor",
    "underscore",
    "low",
    "image",
    "uri",
    "equals",
    "svg",
    "image",
    "eye",
    "function",
    "pass",
    "low",
    "svg",
    "thing",
    "high",
    "image",
    "uri",
    "svg",
    "image",
    "uri",
    "going",
    "return",
    "something",
    "looks",
    "like",
    "going",
    "store",
    "string",
    "image",
    "uri",
    "chain",
    "two",
    "use",
    "token",
    "uri",
    "function",
    "somebody",
    "calls",
    "token",
    "token",
    "id",
    "zero",
    "going",
    "stick",
    "json",
    "either",
    "low",
    "image",
    "high",
    "image",
    "arrive",
    "actually",
    "going",
    "base",
    "channeling",
    "price",
    "feed",
    "well",
    "already",
    "worked",
    "channeling",
    "price",
    "feeds",
    "let",
    "go",
    "ahead",
    "add",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "chain",
    "link",
    "slash",
    "contracts",
    "done",
    "top",
    "import",
    "chain",
    "link",
    "slash",
    "contracts",
    "slash",
    "src",
    "slash",
    "v",
    "slash",
    "interfaces",
    "slash",
    "ag",
    "reg",
    "gate",
    "tor",
    "v",
    "three",
    "interface",
    "soul",
    "like",
    "let",
    "comment",
    "going",
    "want",
    "call",
    "price",
    "feed",
    "figure",
    "price",
    "show",
    "high",
    "image",
    "low",
    "image",
    "based",
    "order",
    "get",
    "price",
    "feed",
    "constructor",
    "let",
    "add",
    "another",
    "price",
    "feed",
    "address",
    "street",
    "address",
    "make",
    "another",
    "variable",
    "aggregate",
    "tor",
    "v3",
    "interface",
    "internal",
    "immutable",
    "underscore",
    "price",
    "feed",
    "say",
    "constructor",
    "price",
    "feed",
    "equals",
    "aggregate",
    "tor",
    "v3",
    "interface",
    "price",
    "feed",
    "address",
    "old",
    "bunch",
    "commas",
    "256",
    "price",
    "comma",
    "comma",
    "comma",
    "equals",
    "price",
    "feed",
    "latest",
    "round",
    "data",
    "say",
    "price",
    "greater",
    "equal",
    "value",
    "show",
    "one",
    "image",
    "dry",
    "otherwise",
    "show",
    "another",
    "one",
    "say",
    "string",
    "memory",
    "image",
    "uri",
    "equals",
    "underscore",
    "low",
    "image",
    "uri",
    "price",
    "higher",
    "value",
    "well",
    "greater",
    "image",
    "uri",
    "going",
    "use",
    "going",
    "gon",
    "na",
    "ai",
    "going",
    "equal",
    "high",
    "image",
    "uri",
    "image",
    "right",
    "got",
    "figure",
    "price",
    "make",
    "mind",
    "let",
    "mentors",
    "choose",
    "value",
    "want",
    "use",
    "say",
    "256",
    "value",
    "assign",
    "nft",
    "high",
    "value",
    "need",
    "create",
    "like",
    "little",
    "mapping",
    "top",
    "say",
    "mapping",
    "went",
    "two",
    "went",
    "let",
    "make",
    "public",
    "heck",
    "public",
    "underscore",
    "token",
    "id",
    "high",
    "value",
    "say",
    "meant",
    "nf",
    "token",
    "id",
    "high",
    "value",
    "underscore",
    "token",
    "counter",
    "set",
    "equal",
    "high",
    "value",
    "meant",
    "choose",
    "high",
    "value",
    "want",
    "say",
    "price",
    "greater",
    "equal",
    "high",
    "value",
    "token",
    "id",
    "use",
    "high",
    "one",
    "otherwise",
    "use",
    "low",
    "one",
    "oops",
    "needs",
    "videos",
    "x",
    "two",
    "excuse",
    "since",
    "want",
    "able",
    "compare",
    "pretty",
    "equally",
    "boom",
    "contract",
    "looks",
    "really",
    "good",
    "thing",
    "want",
    "add",
    "probably",
    "event",
    "probably",
    "want",
    "emit",
    "event",
    "time",
    "met",
    "one",
    "nf",
    "might",
    "event",
    "created",
    "nf",
    "say",
    "went",
    "56",
    "indexed",
    "token",
    "id",
    "comma",
    "int",
    "value",
    "like",
    "met",
    "nft",
    "emit",
    "create",
    "n",
    "underscore",
    "token",
    "counter",
    "comma",
    "value",
    "best",
    "practice",
    "update",
    "token",
    "counter",
    "actually",
    "minting",
    "well",
    "okay",
    "ton",
    "code",
    "like",
    "said",
    "definitely",
    "would",
    "written",
    "code",
    "without",
    "compiled",
    "run",
    "tests",
    "first",
    "decided",
    "want",
    "write",
    "right",
    "first",
    "misspellings",
    "let",
    "make",
    "sure",
    "everything",
    "compiles",
    "awesome",
    "everything",
    "compiled",
    "already",
    "know",
    "couple",
    "things",
    "going",
    "need",
    "test",
    "first",
    "thing",
    "gon",
    "na",
    "need",
    "write",
    "deploy",
    "function",
    "got",
    "basic",
    "nft",
    "got",
    "random",
    "f",
    "hosted",
    "ipfs",
    "going",
    "dynamic",
    "nft",
    "hosted",
    "100",
    "percent",
    "chain",
    "changes",
    "based",
    "price",
    "asset",
    "let",
    "oh",
    "three",
    "deploy",
    "dynamic",
    "svg",
    "gon",
    "na",
    "need",
    "little",
    "bit",
    "boilerplate",
    "let",
    "go",
    "basic",
    "nft",
    "grab",
    "first",
    "seven",
    "lines",
    "paste",
    "need",
    "constructor",
    "well",
    "need",
    "price",
    "feed",
    "address",
    "low",
    "svg",
    "highest",
    "cg",
    "okay",
    "let",
    "get",
    "price",
    "feed",
    "address",
    "something",
    "already",
    "done",
    "add",
    "helper",
    "hardhead",
    "config",
    "one",
    "foreign",
    "local",
    "going",
    "use",
    "going",
    "use",
    "mock",
    "rinkeby",
    "actual",
    "network",
    "going",
    "use",
    "actual",
    "address",
    "let",
    "go",
    "ahead",
    "dark",
    "side",
    "chain",
    "link",
    "grab",
    "price",
    "feed",
    "address",
    "aetherium",
    "data",
    "feeds",
    "go",
    "rank",
    "b",
    "rank",
    "b",
    "let",
    "use",
    "eath",
    "usd",
    "copy",
    "make",
    "new",
    "entry",
    "eath",
    "usd",
    "price",
    "feed",
    "like",
    "localhost",
    "good",
    "since",
    "know",
    "localhost",
    "going",
    "need",
    "mock",
    "let",
    "see",
    "price",
    "feed",
    "mock",
    "okay",
    "gon",
    "na",
    "need",
    "mock",
    "v3",
    "aggregator",
    "dot",
    "soul",
    "copied",
    "pasted",
    "mine",
    "want",
    "go",
    "right",
    "repo",
    "copy",
    "previous",
    "section",
    "reminder",
    "heart",
    "f",
    "f",
    "fcc",
    "contracts",
    "asked",
    "moc",
    "v3",
    "aggregator",
    "using",
    "point",
    "06",
    "solidity",
    "going",
    "want",
    "make",
    "sure",
    "hard",
    "hat",
    "dot",
    "config",
    "least",
    "one",
    "version",
    "good",
    "means",
    "deploy",
    "mocks",
    "going",
    "want",
    "add",
    "initial",
    "price",
    "2000",
    "decimals",
    "team",
    "waited",
    "deploy",
    "mocks",
    "price",
    "feed",
    "gon",
    "na",
    "say",
    "const",
    "chain",
    "id",
    "equals",
    "network",
    "dot",
    "config",
    "dot",
    "chain",
    "id",
    "development",
    "chains",
    "dot",
    "includes",
    "network",
    "dot",
    "name",
    "need",
    "import",
    "development",
    "chains",
    "looks",
    "like",
    "say",
    "const",
    "eth",
    "usd",
    "akregator",
    "equals",
    "get",
    "price",
    "feed",
    "equals",
    "awaits",
    "ethers",
    "dot",
    "get",
    "contract",
    "mark",
    "v3",
    "air",
    "gate",
    "tour",
    "let",
    "eath",
    "usd",
    "price",
    "feed",
    "address",
    "eath",
    "usd",
    "price",
    "feed",
    "address",
    "equals",
    "eath",
    "usd",
    "aggregate",
    "tore",
    "address",
    "else",
    "say",
    "eath",
    "usd",
    "price",
    "feed",
    "address",
    "going",
    "equal",
    "find",
    "network",
    "config",
    "network",
    "config",
    "chain",
    "id",
    "dot",
    "eth",
    "usd",
    "price",
    "okay",
    "eth",
    "usd",
    "price",
    "feed",
    "rate",
    "need",
    "lowest",
    "vg",
    "high",
    "svg",
    "going",
    "create",
    "new",
    "folder",
    "images",
    "folder",
    "go",
    "cd",
    "images",
    "mk",
    "dir",
    "dynamic",
    "nf",
    "two",
    "folders",
    "dynamic",
    "empty",
    "random",
    "random",
    "stuff",
    "want",
    "use",
    "svgs",
    "absolutely",
    "want",
    "come",
    "images",
    "file",
    "save",
    "images",
    "come",
    "right",
    "click",
    "save",
    "image",
    "save",
    "drag",
    "drop",
    "images",
    "files",
    "absolutely",
    "want",
    "go",
    "ahead",
    "read",
    "script",
    "say",
    "const",
    "low",
    "svg",
    "equals",
    "weight",
    "going",
    "use",
    "fs",
    "gon",
    "na",
    "const",
    "fs",
    "equals",
    "require",
    "fs",
    "await",
    "fs",
    "dot",
    "read",
    "file",
    "sync",
    "going",
    "read",
    "file",
    "dot",
    "slash",
    "images",
    "slash",
    "dynamic",
    "nf",
    "slash",
    "brown",
    "dot",
    "svg",
    "using",
    "encoding",
    "utf",
    "eight",
    "say",
    "const",
    "hi",
    "svg",
    "equals",
    "await",
    "fs",
    "dot",
    "read",
    "file",
    "sync",
    "copy",
    "whole",
    "thing",
    "using",
    "stuff",
    "one",
    "going",
    "happy",
    "svg",
    "price",
    "good",
    "gon",
    "na",
    "happiness",
    "svg",
    "price",
    "bad",
    "gon",
    "na",
    "frown",
    "svg",
    "let",
    "go",
    "ahead",
    "let",
    "deploy",
    "contract",
    "say",
    "arguments",
    "args",
    "equals",
    "gon",
    "na",
    "price",
    "feed",
    "address",
    "low",
    "svg",
    "high",
    "svg",
    "say",
    "const",
    "dynamic",
    "g",
    "f",
    "equals",
    "await",
    "deploy",
    "dynamic",
    "svg",
    "f",
    "comma",
    "little",
    "bracket",
    "deployer",
    "args",
    "args",
    "log",
    "true",
    "weights",
    "confirmations",
    "going",
    "network",
    "dot",
    "config",
    "block",
    "confirmations",
    "one",
    "logging",
    "log",
    "larry",
    "verification",
    "actually",
    "going",
    "copy",
    "paste",
    "last",
    "script",
    "going",
    "exactly",
    "copy",
    "paste",
    "instead",
    "random",
    "ipfs",
    "going",
    "dynamic",
    "svg",
    "f",
    "rest",
    "looks",
    "good",
    "module",
    "exports",
    "dot",
    "tags",
    "equals",
    "dynamic",
    "svg",
    "main",
    "oh",
    "okay",
    "let",
    "try",
    "see",
    "deploy",
    "script",
    "created",
    "works",
    "h",
    "h",
    "yarn",
    "hardhat",
    "deployed",
    "dash",
    "dash",
    "tags",
    "die",
    "namic",
    "svg",
    "makes",
    "sense",
    "deploy",
    "mocks",
    "tags",
    "dynamic",
    "svgs",
    "also",
    "mocks",
    "local",
    "network",
    "detected",
    "play",
    "marks",
    "deploy",
    "marks",
    "deploying",
    "dynamic",
    "svg",
    "awesome",
    "know",
    "comes",
    "next",
    "gosh",
    "darn",
    "right",
    "time",
    "tests",
    "going",
    "encourage",
    "pause",
    "video",
    "try",
    "write",
    "test",
    "test",
    "section",
    "actually",
    "little",
    "bit",
    "tricky",
    "since",
    "going",
    "manipulating",
    "price",
    "mock",
    "aggregator",
    "checking",
    "long",
    "strings",
    "sure",
    "use",
    "github",
    "repository",
    "associated",
    "lesson",
    "case",
    "get",
    "lost",
    "want",
    "show",
    "looks",
    "like",
    "marketplace",
    "like",
    "opencl",
    "going",
    "deploy",
    "rink",
    "keep",
    "mind",
    "test",
    "slow",
    "might",
    "want",
    "patient",
    "even",
    "want",
    "kind",
    "nice",
    "see",
    "okay",
    "really",
    "looks",
    "like",
    "go",
    "contract",
    "chain",
    "verified",
    "read",
    "token",
    "uri",
    "everything",
    "pretty",
    "fun",
    "let",
    "add",
    "one",
    "bit",
    "deploy",
    "folder",
    "let",
    "add",
    "mint",
    "script",
    "emits",
    "nf",
    "one",
    "contracts",
    "going",
    "create",
    "going",
    "one",
    "contracts",
    "mint",
    "nft",
    "let",
    "go",
    "ahead",
    "const",
    "ethers",
    "network",
    "equals",
    "require",
    "arhat",
    "going",
    "little",
    "copy",
    "paste",
    "going",
    "copy",
    "part",
    "know",
    "going",
    "need",
    "going",
    "need",
    "deploy",
    "going",
    "need",
    "deploy",
    "grab",
    "get",
    "named",
    "accounts",
    "get",
    "named",
    "accounts",
    "going",
    "come",
    "right",
    "deployer",
    "deployer",
    "gon",
    "na",
    "used",
    "mint",
    "first",
    "mint",
    "basic",
    "nf",
    "say",
    "const",
    "basic",
    "nf",
    "equals",
    "wait",
    "ethers",
    "dot",
    "get",
    "contract",
    "basic",
    "n",
    "ft",
    "connect",
    "deployer",
    "say",
    "const",
    "basic",
    "mint",
    "basic",
    "mint",
    "tx",
    "equals",
    "await",
    "basic",
    "nf",
    "dot",
    "mint",
    "nf",
    "weight",
    "basic",
    "mint",
    "tx",
    "dot",
    "weight",
    "one",
    "little",
    "console",
    "dot",
    "log",
    "base",
    "index",
    "zero",
    "token",
    "uri",
    "put",
    "little",
    "await",
    "basic",
    "nf",
    "dot",
    "token",
    "uri",
    "zero",
    "basic",
    "entity",
    "random",
    "ipfs",
    "empty",
    "say",
    "const",
    "random",
    "ipfs",
    "nf",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "random",
    "ipfs",
    "f",
    "connected",
    "deployer",
    "one",
    "need",
    "mint",
    "fee",
    "say",
    "const",
    "mint",
    "v",
    "equals",
    "await",
    "random",
    "ipfs",
    "nf",
    "dot",
    "get",
    "mint",
    "fee",
    "mint",
    "say",
    "const",
    "random",
    "ipfs",
    "ft",
    "mint",
    "tx",
    "equals",
    "await",
    "random",
    "ipfs",
    "f",
    "dot",
    "request",
    "f",
    "team",
    "one",
    "need",
    "pass",
    "value",
    "going",
    "mint",
    "string",
    "one",
    "like",
    "saw",
    "tests",
    "going",
    "await",
    "new",
    "promise",
    "right",
    "need",
    "wait",
    "return",
    "need",
    "listen",
    "events",
    "probably",
    "set",
    "listener",
    "first",
    "let",
    "actually",
    "set",
    "listener",
    "first",
    "going",
    "await",
    "new",
    "promise",
    "gon",
    "na",
    "async",
    "function",
    "going",
    "resolve",
    "reject",
    "gon",
    "na",
    "use",
    "fun",
    "little",
    "arrow",
    "syntax",
    "since",
    "function",
    "actually",
    "set",
    "timeout",
    "resolve",
    "like",
    "means",
    "five",
    "minutes",
    "time",
    "might",
    "want",
    "bump",
    "even",
    "five",
    "minutes",
    "might",
    "enough",
    "gon",
    "na",
    "300",
    "milliseconds",
    "gon",
    "na",
    "say",
    "random",
    "ipfs",
    "ft",
    "dot",
    "get",
    "nft",
    "minted",
    "event",
    "going",
    "run",
    "async",
    "function",
    "gon",
    "na",
    "resolve",
    "inside",
    "actually",
    "put",
    "actually",
    "requesting",
    "nft",
    "listener",
    "right",
    "say",
    "developments",
    "chains",
    "includes",
    "network",
    "dot",
    "name",
    "let",
    "make",
    "sure",
    "import",
    "development",
    "chains",
    "network",
    "affect",
    "chains",
    "includes",
    "network",
    "dot",
    "name",
    "test",
    "net",
    "go",
    "ahead",
    "pretend",
    "mocks",
    "say",
    "const",
    "request",
    "id",
    "equals",
    "random",
    "ipfs",
    "oh",
    "actually",
    "going",
    "need",
    "const",
    "random",
    "ipfs",
    "ft",
    "min",
    "tx",
    "receipt",
    "equals",
    "await",
    "ipfs",
    "empty",
    "minted",
    "tx",
    "dot",
    "weight",
    "one",
    "gon",
    "na",
    "need",
    "get",
    "receipt",
    "receipt",
    "get",
    "request",
    "id",
    "events",
    "one",
    "dot",
    "args",
    "dot",
    "request",
    "string",
    "const",
    "vrf",
    "coordinator",
    "v",
    "mock",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "rf",
    "coordinate",
    "v",
    "mock",
    "connect",
    "deployer",
    "wait",
    "rf",
    "corded",
    "tor",
    "v",
    "mock",
    "fulfill",
    "random",
    "words",
    "request",
    "id",
    "random",
    "ipfs",
    "dot",
    "address",
    "console",
    "dot",
    "log",
    "random",
    "ipfs",
    "index",
    "zero",
    "token",
    "uri",
    "await",
    "random",
    "ip",
    "nf",
    "dot",
    "token",
    "uri",
    "zero",
    "finally",
    "dynamic",
    "svg",
    "nf",
    "say",
    "const",
    "high",
    "high",
    "value",
    "equals",
    "parse",
    "ether",
    "say",
    "4000",
    "high",
    "value",
    "say",
    "const",
    "dynamic",
    "svg",
    "f",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "dynamic",
    "svg",
    "connect",
    "deployer",
    "say",
    "const",
    "namic",
    "b",
    "g",
    "f",
    "mint",
    "tx",
    "equals",
    "await",
    "dynamic",
    "svg",
    "f",
    "dot",
    "mint",
    "f",
    "value",
    "string",
    "wait",
    "stat",
    "wait",
    "one",
    "finally",
    "console",
    "dot",
    "log",
    "dynamic",
    "svg",
    "nft",
    "index",
    "zero",
    "token",
    "uri",
    "going",
    "weight",
    "dynamic",
    "svg",
    "ft",
    "dot",
    "token",
    "uri",
    "zero",
    "okay",
    "think",
    "looks",
    "good",
    "let",
    "try",
    "local",
    "network",
    "yarn",
    "hard",
    "hat",
    "deploy",
    "run",
    "scripts",
    "looks",
    "like",
    "everything",
    "worked",
    "random",
    "basic",
    "nft",
    "index",
    "zero",
    "token",
    "year",
    "ipfs",
    "thing",
    "random",
    "ipfs",
    "nft",
    "index",
    "zero",
    "thing",
    "svg",
    "giant",
    "monstrosity",
    "okay",
    "perfect",
    "even",
    "check",
    "right",
    "even",
    "grab",
    "ipfs",
    "hash",
    "go",
    "ipfs",
    "node",
    "installed",
    "ipfs",
    "browser",
    "working",
    "brave",
    "pop",
    "right",
    "browsers",
    "see",
    "looks",
    "like",
    "right",
    "zoom",
    "adorable",
    "bernard",
    "image",
    "bernard",
    "looking",
    "like",
    "one",
    "also",
    "gon",
    "na",
    "bernard",
    "course",
    "svg",
    "also",
    "copy",
    "paste",
    "boom",
    "looks",
    "great",
    "copy",
    "image",
    "frowny",
    "face",
    "shad",
    "awesome",
    "okay",
    "working",
    "locally",
    "us",
    "let",
    "go",
    "ahead",
    "try",
    "make",
    "work",
    "actual",
    "test",
    "net",
    "hopefully",
    "helper",
    "hard",
    "hat",
    "config",
    "set",
    "correctly",
    "enough",
    "stuff",
    "need",
    "make",
    "sure",
    "subscription",
    "id",
    "right",
    "going",
    "need",
    "make",
    "sure",
    "subscription",
    "id",
    "call",
    "mint",
    "function",
    "right",
    "going",
    "need",
    "add",
    "consumer",
    "vrf",
    "actually",
    "meant",
    "let",
    "let",
    "add",
    "tags",
    "meant",
    "module",
    "dot",
    "exports",
    "dot",
    "tags",
    "equals",
    "say",
    "comma",
    "meant",
    "ago",
    "said",
    "okay",
    "let",
    "add",
    "main",
    "tag",
    "coming",
    "around",
    "added",
    "main",
    "tag",
    "want",
    "want",
    "deploy",
    "contracts",
    "finally",
    "meant",
    "ipfs",
    "one",
    "need",
    "add",
    "contract",
    "consumer",
    "gon",
    "na",
    "gon",
    "na",
    "run",
    "yarn",
    "hardhead",
    "deploy",
    "dash",
    "dash",
    "network",
    "rinkeby",
    "dash",
    "dash",
    "tags",
    "main",
    "wo",
    "meant",
    "nf",
    "okay",
    "wo",
    "mean",
    "nf",
    "deploy",
    "contracts",
    "might",
    "sit",
    "around",
    "wait",
    "little",
    "bit",
    "actually",
    "deploy",
    "great",
    "time",
    "go",
    "take",
    "break",
    "maybe",
    "go",
    "take",
    "walk",
    "get",
    "sip",
    "water",
    "get",
    "cup",
    "coffee",
    "whatever",
    "want",
    "yeah",
    "everything",
    "deployed",
    "go",
    "v",
    "f",
    "dot",
    "chain",
    "dot",
    "link",
    "already",
    "connected",
    "used",
    "subscription",
    "would",
    "add",
    "ipfs",
    "consumer",
    "good",
    "go",
    "right",
    "everything",
    "goes",
    "three",
    "transactions",
    "blockchain",
    "go",
    "ahead",
    "grab",
    "random",
    "ipfs",
    "nf",
    "grab",
    "address",
    "come",
    "back",
    "v",
    "f",
    "dot",
    "chain",
    "dot",
    "link",
    "slash",
    "rink",
    "go",
    "subscription",
    "id",
    "add",
    "new",
    "consumer",
    "add",
    "contract",
    "address",
    "go",
    "ahead",
    "approve",
    "metamask",
    "goes",
    "finish",
    "running",
    "mint",
    "part",
    "deploy",
    "folder",
    "confirmed",
    "close",
    "maybe",
    "little",
    "refresh",
    "see",
    "new",
    "address",
    "added",
    "subscription",
    "added",
    "mint",
    "one",
    "nf",
    "one",
    "contracts",
    "hard",
    "hats",
    "deploy",
    "dash",
    "dash",
    "tags",
    "meant",
    "dash",
    "dash",
    "network",
    "rinkeby",
    "wait",
    "little",
    "bit",
    "okay",
    "minted",
    "get",
    "little",
    "output",
    "like",
    "right",
    "basic",
    "nf",
    "zero",
    "token",
    "uri",
    "basic",
    "random",
    "ipfs",
    "nf",
    "token",
    "eye",
    "svg",
    "token",
    "year",
    "right",
    "well",
    "let",
    "go",
    "grab",
    "grab",
    "wallet",
    "address",
    "stick",
    "rinkeby",
    "ether",
    "scan",
    "see",
    "called",
    "mint",
    "request",
    "mint",
    "created",
    "three",
    "contracts",
    "right",
    "created",
    "basic",
    "nft",
    "random",
    "ipfs",
    "nft",
    "dynamic",
    "svg",
    "nft",
    "grab",
    "copy",
    "address",
    "contract",
    "go",
    "test",
    "nets",
    "open",
    "see",
    "oh",
    "put",
    "address",
    "bar",
    "search",
    "bar",
    "part",
    "incredibly",
    "incredibly",
    "variable",
    "okay",
    "open",
    "c",
    "really",
    "slow",
    "take",
    "open",
    "see",
    "couple",
    "hours",
    "register",
    "contract",
    "deployed",
    "test",
    "net",
    "show",
    "right",
    "away",
    "discouraged",
    "let",
    "drag",
    "able",
    "click",
    "collection",
    "see",
    "nft",
    "actually",
    "going",
    "grab",
    "random",
    "ipfs",
    "nft",
    "let",
    "grab",
    "contract",
    "address",
    "going",
    "grab",
    "test",
    "net",
    "site",
    "open",
    "paste",
    "address",
    "know",
    "indeed",
    "see",
    "random",
    "ipfs",
    "f",
    "right",
    "deployed",
    "couple",
    "one",
    "v",
    "two",
    "adorable",
    "shiva",
    "right",
    "looks",
    "like",
    "open",
    "c",
    "100",
    "percent",
    "verify",
    "code",
    "good",
    "even",
    "show",
    "open",
    "see",
    "go",
    "contract",
    "go",
    "read",
    "contract",
    "go",
    "token",
    "uri",
    "punch",
    "zero",
    "query",
    "grabbed",
    "stick",
    "browsers",
    "json",
    "looks",
    "good",
    "let",
    "grab",
    "image",
    "uri",
    "paste",
    "see",
    "means",
    "code",
    "good",
    "successfully",
    "deployed",
    "number",
    "ffts",
    "blockchain",
    "learned",
    "massive",
    "amount",
    "course",
    "definitely",
    "one",
    "jam",
    "packed",
    "one",
    "art",
    "right",
    "crazy",
    "let",
    "quick",
    "refresher",
    "entire",
    "course",
    "first",
    "learned",
    "basics",
    "nf",
    "basic",
    "nf",
    "dot",
    "sol",
    "learn",
    "nf",
    "based",
    "erc",
    "721",
    "standard",
    "means",
    "functions",
    "like",
    "name",
    "token",
    "uri",
    "etc",
    "learned",
    "nf",
    "use",
    "token",
    "uri",
    "tell",
    "us",
    "token",
    "actually",
    "looks",
    "like",
    "token",
    "eye",
    "look",
    "something",
    "like",
    "going",
    "name",
    "description",
    "going",
    "image",
    "url",
    "points",
    "different",
    "location",
    "nft",
    "actually",
    "looks",
    "like",
    "stuff",
    "like",
    "attributes",
    "stuff",
    "like",
    "attributes",
    "tags",
    "known",
    "metadata",
    "nft",
    "tells",
    "us",
    "nft",
    "also",
    "metadata",
    "chain",
    "course",
    "customize",
    "chain",
    "make",
    "look",
    "grow",
    "change",
    "interactive",
    "chain",
    "learned",
    "ipfs",
    "actually",
    "wrote",
    "script",
    "called",
    "upload",
    "actually",
    "programmatically",
    "upload",
    "images",
    "files",
    "another",
    "ipfs",
    "pinning",
    "service",
    "us",
    "course",
    "always",
    "use",
    "ipfs",
    "nodes",
    "want",
    "token",
    "uri",
    "really",
    "anything",
    "hosted",
    "ipfs",
    "basic",
    "nft",
    "random",
    "nft",
    "dynamic",
    "nft",
    "actually",
    "hosted",
    "token",
    "right",
    "100",
    "percent",
    "chain",
    "use",
    "ipfs",
    "made",
    "dynamic",
    "token",
    "uri",
    "actually",
    "changes",
    "based",
    "price",
    "changeling",
    "price",
    "feed",
    "random",
    "ipfs",
    "nft",
    "gave",
    "nft",
    "chance",
    "gave",
    "different",
    "rarities",
    "different",
    "dogs",
    "could",
    "create",
    "programmatically",
    "rare",
    "nf",
    "ts",
    "pug",
    "super",
    "rare",
    "shiva",
    "sort",
    "rare",
    "bernard",
    "pretty",
    "common",
    "fact",
    "got",
    "ship",
    "awesome",
    "amazing",
    "deployments",
    "wrote",
    "tests",
    "learned",
    "lot",
    "transactions",
    "actually",
    "add",
    "whatever",
    "data",
    "want",
    "data",
    "section",
    "little",
    "bit",
    "transactions",
    "look",
    "like",
    "actually",
    "use",
    "functions",
    "selectors",
    "function",
    "signatures",
    "able",
    "call",
    "anything",
    "right",
    "learn",
    "abi",
    "dot",
    "encoding",
    "encoding",
    "packed",
    "binary",
    "stuff",
    "want",
    "go",
    "deep",
    "absolutely",
    "jam",
    "packed",
    "session",
    "incredibly",
    "proud",
    "especially",
    "little",
    "puppy",
    "see",
    "open",
    "sea",
    "see",
    "directly",
    "ether",
    "scan",
    "look",
    "ipfs",
    "really",
    "proud",
    "done",
    "said",
    "huge",
    "congratulations",
    "making",
    "far",
    "definitely",
    "definitely",
    "definitely",
    "take",
    "break",
    "see",
    "next",
    "one",
    "okay",
    "less",
    "fifth",
    "team",
    "going",
    "next",
    "js",
    "nft",
    "marketplace",
    "finish",
    "lesson",
    "web",
    "three",
    "full",
    "stack",
    "monster",
    "going",
    "complicated",
    "front",
    "end",
    "using",
    "web",
    "three",
    "stack",
    "using",
    "lot",
    "really",
    "advanced",
    "web",
    "three",
    "blockchain",
    "tools",
    "get",
    "really",
    "excited",
    "going",
    "learn",
    "ton",
    "lesson",
    "actually",
    "three",
    "different",
    "repos",
    "associated",
    "lesson",
    "first",
    "one",
    "going",
    "typical",
    "hard",
    "hat",
    "project",
    "back",
    "end",
    "hard",
    "hat",
    "project",
    "actually",
    "two",
    "repos",
    "going",
    "front",
    "end",
    "repos",
    "going",
    "slightly",
    "different",
    "project",
    "going",
    "learn",
    "events",
    "important",
    "events",
    "important",
    "especially",
    "chain",
    "services",
    "actually",
    "going",
    "look",
    "two",
    "different",
    "ways",
    "work",
    "one",
    "using",
    "mirallas",
    "centralized",
    "database",
    "one",
    "using",
    "graph",
    "reason",
    "want",
    "show",
    "oftentimes",
    "people",
    "looking",
    "scale",
    "projects",
    "people",
    "looking",
    "get",
    "things",
    "done",
    "really",
    "quickly",
    "taking",
    "centralized",
    "approach",
    "often",
    "little",
    "quicker",
    "sometimes",
    "add",
    "functionality",
    "website",
    "still",
    "lot",
    "protocols",
    "decentralized",
    "backends",
    "centralized",
    "front",
    "ends",
    "one",
    "example",
    "open",
    "sea",
    "open",
    "sea",
    "example",
    "ability",
    "actually",
    "like",
    "different",
    "fts",
    "something",
    "would",
    "actually",
    "want",
    "spend",
    "gas",
    "something",
    "gon",
    "na",
    "store",
    "type",
    "database",
    "somewhere",
    "people",
    "ability",
    "want",
    "show",
    "optional",
    "first",
    "way",
    "build",
    "front",
    "ends",
    "since",
    "logic",
    "still",
    "going",
    "100",
    "percent",
    "chain",
    "front",
    "end",
    "matters",
    "little",
    "bit",
    "less",
    "anybody",
    "still",
    "interact",
    "contracts",
    "build",
    "chain",
    "web",
    "three",
    "want",
    "stay",
    "however",
    "getting",
    "mvp",
    "done",
    "getting",
    "minimal",
    "viable",
    "project",
    "done",
    "really",
    "really",
    "important",
    "using",
    "centralized",
    "server",
    "like",
    "morales",
    "centralized",
    "project",
    "make",
    "us",
    "much",
    "quicker",
    "fact",
    "using",
    "centralized",
    "services",
    "like",
    "alchemy",
    "kind",
    "throughout",
    "whole",
    "project",
    "course",
    "also",
    "want",
    "show",
    "decentralized",
    "way",
    "make",
    "front",
    "end",
    "work",
    "morales",
    "also",
    "going",
    "show",
    "use",
    "graph",
    "event",
    "indexing",
    "graph",
    "going",
    "decentralized",
    "way",
    "make",
    "front",
    "end",
    "work",
    "events",
    "graph",
    "also",
    "comes",
    "graph",
    "repo",
    "learn",
    "get",
    "front",
    "end",
    "section",
    "let",
    "show",
    "going",
    "build",
    "really",
    "cool",
    "learned",
    "ton",
    "make",
    "nf",
    "going",
    "make",
    "nft",
    "marketplace",
    "like",
    "said",
    "really",
    "going",
    "deep",
    "dive",
    "amazing",
    "front",
    "end",
    "tools",
    "front",
    "end",
    "gon",
    "na",
    "look",
    "like",
    "connect",
    "little",
    "connect",
    "button",
    "hit",
    "metamask",
    "metamask",
    "pops",
    "go",
    "ahead",
    "connect",
    "connected",
    "see",
    "different",
    "entities",
    "address",
    "owned",
    "us",
    "say",
    "owned",
    "switch",
    "addresses",
    "ui",
    "go",
    "ahead",
    "update",
    "connect",
    "owned",
    "different",
    "address",
    "owned",
    "us",
    "get",
    "little",
    "hover",
    "says",
    "update",
    "listing",
    "right",
    "worth",
    "listed",
    "marketplace",
    "owned",
    "us",
    "click",
    "update",
    "different",
    "price",
    "let",
    "update",
    "50",
    "eath",
    "whatever",
    "layer",
    "one",
    "currency",
    "say",
    "new",
    "listing",
    "price",
    "go",
    "ahead",
    "confirm",
    "say",
    "listing",
    "updated",
    "please",
    "refresh",
    "mine",
    "blocks",
    "back",
    "end",
    "boom",
    "see",
    "worth",
    "50",
    "switch",
    "different",
    "account",
    "see",
    "owned",
    "blah",
    "blah",
    "blah",
    "hovered",
    "says",
    "selected",
    "different",
    "user",
    "gon",
    "na",
    "get",
    "transaction",
    "actually",
    "buy",
    "go",
    "ahead",
    "confirm",
    "gon",
    "na",
    "buy",
    "get",
    "little",
    "pop",
    "item",
    "bought",
    "successfully",
    "little",
    "refresh",
    "see",
    "nft",
    "gone",
    "marketplace",
    "since",
    "bought",
    "right",
    "longer",
    "available",
    "sold",
    "come",
    "sell",
    "nf",
    "ts",
    "bottom",
    "see",
    "withdraw",
    "proceeds",
    "whenever",
    "somebody",
    "buys",
    "nf",
    "nft",
    "marketplace",
    "actually",
    "keeps",
    "proceeds",
    "actually",
    "keeps",
    "result",
    "sale",
    "switch",
    "back",
    "address",
    "nf",
    "listed",
    "see",
    "withdraw",
    "50",
    "proceeds",
    "know",
    "50",
    "eath",
    "bought",
    "hit",
    "withdraw",
    "metamask",
    "gon",
    "na",
    "pop",
    "go",
    "ahead",
    "confirm",
    "wait",
    "little",
    "bit",
    "transaction",
    "populates",
    "boom",
    "goes",
    "see",
    "zero",
    "proceeds",
    "right",
    "withdrew",
    "everything",
    "relist",
    "nft",
    "come",
    "back",
    "let",
    "go",
    "back",
    "one",
    "bought",
    "nf",
    "know",
    "address",
    "token",
    "id",
    "nf",
    "go",
    "ahead",
    "relist",
    "place",
    "address",
    "token",
    "id",
    "give",
    "us",
    "sort",
    "price",
    "submit",
    "approve",
    "giving",
    "nft",
    "marketplace",
    "access",
    "nft",
    "little",
    "doggie",
    "go",
    "ahead",
    "actually",
    "send",
    "transaction",
    "actually",
    "list",
    "nft",
    "marketplace",
    "get",
    "nft",
    "listed",
    "successfully",
    "remove",
    "blocks",
    "back",
    "end",
    "go",
    "back",
    "front",
    "end",
    "see",
    "owned",
    "us",
    "instead",
    "original",
    "owner",
    "right",
    "set",
    "10",
    "ether",
    "course",
    "switch",
    "back",
    "different",
    "user",
    "actually",
    "buy",
    "going",
    "nft",
    "marketplace",
    "completely",
    "decentralized",
    "going",
    "learn",
    "ton",
    "front",
    "end",
    "ton",
    "indexing",
    "ton",
    "events",
    "powerful",
    "really",
    "excited",
    "one",
    "get",
    "one",
    "many",
    "tools",
    "fingertips",
    "working",
    "blockchain",
    "ready",
    "let",
    "jump",
    "let",
    "build",
    "contracts",
    "first",
    "build",
    "front",
    "end",
    "let",
    "project",
    "going",
    "based",
    "arteon",
    "project",
    "completely",
    "open",
    "source",
    "decentralized",
    "smart",
    "contract",
    "nft",
    "marketplace",
    "leave",
    "link",
    "github",
    "repo",
    "associated",
    "course",
    "course",
    "going",
    "minimalistic",
    "version",
    "vs",
    "code",
    "pre",
    "normal",
    "going",
    "create",
    "new",
    "folder",
    "called",
    "hard",
    "hat",
    "marketplace",
    "fcc",
    "oops",
    "mk",
    "dir",
    "like",
    "gon",
    "na",
    "cd",
    "open",
    "vs",
    "code",
    "use",
    "code",
    "period",
    "file",
    "open",
    "folder",
    "open",
    "folder",
    "get",
    "going",
    "normal",
    "stuff",
    "throughout",
    "course",
    "want",
    "copy",
    "paste",
    "package",
    "json",
    "want",
    "copy",
    "paste",
    "modules",
    "whatever",
    "want",
    "feel",
    "free",
    "gon",
    "na",
    "go",
    "ahead",
    "actually",
    "repo",
    "gon",
    "na",
    "scroll",
    "grab",
    "line",
    "less",
    "nine",
    "run",
    "know",
    "gon",
    "na",
    "using",
    "prettier",
    "gon",
    "na",
    "go",
    "ahead",
    "copy",
    "paste",
    "two",
    "prettier",
    "files",
    "prettier",
    "ignore",
    "prettier",
    "rc",
    "going",
    "using",
    "linting",
    "solidity",
    "going",
    "use",
    "sol",
    "hint",
    "dot",
    "json",
    "going",
    "grab",
    "dot",
    "soul",
    "hint",
    "dot",
    "json",
    "dots",
    "hint",
    "dot",
    "ignore",
    "also",
    "going",
    "grab",
    "hard",
    "hat",
    "dot",
    "config",
    "dot",
    "j",
    "going",
    "using",
    "really",
    "really",
    "similar",
    "setup",
    "hard",
    "hat",
    "dot",
    "config",
    "dot",
    "j",
    "got",
    "waffle",
    "ether",
    "scan",
    "hard",
    "hat",
    "deploy",
    "coverage",
    "gas",
    "reporter",
    "sizer",
    "dottie",
    "v",
    "dot",
    "config",
    "going",
    "bring",
    "dotty",
    "also",
    "gon",
    "na",
    "bring",
    "utils",
    "folder",
    "well",
    "right",
    "lot",
    "boilerplate",
    "gon",
    "na",
    "bring",
    "like",
    "since",
    "hard",
    "hat",
    "dot",
    "config",
    "dot",
    "j",
    "run",
    "yarn",
    "hard",
    "hat",
    "right",
    "yarn",
    "hard",
    "hat",
    "actually",
    "see",
    "get",
    "output",
    "like",
    "let",
    "go",
    "ahead",
    "actually",
    "write",
    "contracts",
    "let",
    "go",
    "ahead",
    "write",
    "little",
    "doc",
    "saying",
    "contract",
    "even",
    "going",
    "want",
    "going",
    "create",
    "decentralized",
    "nft",
    "marketplace",
    "mean",
    "probably",
    "need",
    "well",
    "probably",
    "need",
    "type",
    "list",
    "item",
    "function",
    "want",
    "list",
    "nf",
    "list",
    "nf",
    "marketplace",
    "need",
    "type",
    "buy",
    "item",
    "buy",
    "nf",
    "probably",
    "need",
    "maybe",
    "like",
    "cancel",
    "listing",
    "cancel",
    "item",
    "longer",
    "want",
    "sell",
    "maybe",
    "update",
    "listing",
    "update",
    "price",
    "maybe",
    "withdraw",
    "proceeds",
    "withdraw",
    "payment",
    "bot",
    "fts",
    "somebody",
    "buys",
    "nft",
    "gon",
    "na",
    "withdraw",
    "contract",
    "since",
    "contract",
    "going",
    "one",
    "actually",
    "hold",
    "funds",
    "looks",
    "pretty",
    "good",
    "let",
    "go",
    "ahead",
    "start",
    "building",
    "let",
    "create",
    "new",
    "folder",
    "contracts",
    "let",
    "jump",
    "create",
    "new",
    "file",
    "nft",
    "marketplace",
    "let",
    "get",
    "boilerplate",
    "spdx",
    "pragma",
    "solidity",
    "carrot",
    "zero",
    "point",
    "contract",
    "marketplace",
    "boom",
    "right",
    "h",
    "h",
    "compile",
    "yarn",
    "hardhead",
    "compile",
    "mpx",
    "art",
    "hit",
    "compile",
    "boom",
    "things",
    "looking",
    "good",
    "go",
    "back",
    "readme",
    "grab",
    "even",
    "stick",
    "like",
    "little",
    "comment",
    "us",
    "kind",
    "reference",
    "later",
    "let",
    "start",
    "listing",
    "items",
    "going",
    "keep",
    "track",
    "listing",
    "people",
    "items",
    "remember",
    "usually",
    "coding",
    "going",
    "back",
    "forth",
    "writing",
    "tests",
    "writing",
    "actual",
    "code",
    "going",
    "write",
    "solidity",
    "one",
    "chunk",
    "go",
    "write",
    "tests",
    "going",
    "say",
    "going",
    "main",
    "functions",
    "going",
    "start",
    "function",
    "list",
    "item",
    "going",
    "make",
    "one",
    "look",
    "really",
    "really",
    "good",
    "going",
    "natspec",
    "everything",
    "going",
    "need",
    "external",
    "function",
    "right",
    "probably",
    "going",
    "want",
    "internal",
    "functions",
    "calling",
    "list",
    "item",
    "going",
    "called",
    "external",
    "projects",
    "external",
    "accounts",
    "probably",
    "going",
    "need",
    "address",
    "ft",
    "address",
    "write",
    "address",
    "nft",
    "contract",
    "un",
    "256",
    "token",
    "id",
    "id",
    "token",
    "id",
    "contract",
    "going",
    "use",
    "going",
    "want",
    "set",
    "un",
    "256",
    "price",
    "first",
    "probably",
    "going",
    "want",
    "price",
    "greater",
    "zero",
    "maybe",
    "put",
    "like",
    "little",
    "require",
    "statement",
    "say",
    "price",
    "less",
    "equal",
    "zero",
    "go",
    "ahead",
    "revert",
    "price",
    "must",
    "zero",
    "error",
    "course",
    "prepend",
    "name",
    "contract",
    "underscores",
    "top",
    "error",
    "price",
    "must",
    "zero",
    "order",
    "us",
    "list",
    "could",
    "actually",
    "one",
    "two",
    "ways",
    "could",
    "one",
    "could",
    "send",
    "nft",
    "contract",
    "would",
    "require",
    "us",
    "like",
    "transfer",
    "right",
    "could",
    "got",
    "contract",
    "hold",
    "nft",
    "could",
    "going",
    "kind",
    "gas",
    "expensive",
    "someone",
    "actually",
    "list",
    "f",
    "owner",
    "nft",
    "nft",
    "marketplace",
    "could",
    "100",
    "percent",
    "issue",
    "though",
    "marketplace",
    "nft",
    "user",
    "wo",
    "able",
    "say",
    "like",
    "hey",
    "nft",
    "marketplace",
    "technically",
    "would",
    "able",
    "would",
    "withdraw",
    "might",
    "slightly",
    "different",
    "way",
    "say",
    "owners",
    "still",
    "hold",
    "nft",
    "give",
    "marketplace",
    "approval",
    "sell",
    "nft",
    "course",
    "owners",
    "entity",
    "could",
    "withdraw",
    "approval",
    "time",
    "marketplace",
    "would",
    "able",
    "sell",
    "anymore",
    "however",
    "would",
    "really",
    "easy",
    "people",
    "actually",
    "read",
    "would",
    "would",
    "read",
    "like",
    "approved",
    "marketplace",
    "actually",
    "see",
    "item",
    "really",
    "listed",
    "gon",
    "na",
    "go",
    "ahead",
    "write",
    "second",
    "way",
    "ardian",
    "least",
    "intrusive",
    "way",
    "marketplace",
    "right",
    "people",
    "still",
    "ownership",
    "nf",
    "ts",
    "marketplace",
    "approval",
    "actually",
    "swap",
    "sell",
    "nf",
    "prices",
    "met",
    "since",
    "want",
    "make",
    "sure",
    "marketplace",
    "approval",
    "let",
    "make",
    "sure",
    "marketplace",
    "approval",
    "call",
    "call",
    "get",
    "approved",
    "function",
    "token",
    "id",
    "make",
    "sure",
    "marketplace",
    "approved",
    "work",
    "nft",
    "going",
    "need",
    "ai",
    "erc",
    "720",
    "interface",
    "actually",
    "grab",
    "open",
    "zeppelin",
    "right",
    "interface",
    "wrap",
    "around",
    "address",
    "call",
    "get",
    "approved",
    "address",
    "import",
    "open",
    "zeppelin",
    "slash",
    "contracts",
    "slash",
    "token",
    "slash",
    "erc",
    "721",
    "slash",
    "erc",
    "721",
    "dot",
    "sol",
    "since",
    "import",
    "open",
    "zeppelin",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "add",
    "open",
    "zeppelin",
    "interface",
    "say",
    "erc",
    "721",
    "nf",
    "equals",
    "irc",
    "721",
    "wrapped",
    "around",
    "nf",
    "address",
    "passing",
    "say",
    "nf",
    "dot",
    "get",
    "approved",
    "token",
    "id",
    "trying",
    "list",
    "equal",
    "address",
    "approved",
    "revert",
    "approved",
    "market",
    "place",
    "course",
    "want",
    "prepend",
    "nft",
    "marketplace",
    "underscores",
    "error",
    "like",
    "bada",
    "bing",
    "bada",
    "boom",
    "gotten",
    "little",
    "bit",
    "way",
    "probably",
    "going",
    "want",
    "type",
    "data",
    "structure",
    "list",
    "nf",
    "typically",
    "get",
    "okay",
    "want",
    "use",
    "array",
    "want",
    "use",
    "mapping",
    "think",
    "continue",
    "let",
    "pause",
    "second",
    "think",
    "makes",
    "sense",
    "put",
    "nf",
    "array",
    "mapping",
    "thinking",
    "try",
    "think",
    "okay",
    "well",
    "people",
    "gon",
    "na",
    "buy",
    "sell",
    "makes",
    "sense",
    "think",
    "second",
    "maybe",
    "pause",
    "write",
    "comment",
    "think",
    "array",
    "mapping",
    "better",
    "said",
    "mapping",
    "would",
    "agree",
    "could",
    "array",
    "would",
    "necessarily",
    "wrong",
    "way",
    "would",
    "go",
    "array",
    "anytime",
    "someone",
    "wants",
    "buy",
    "item",
    "gon",
    "na",
    "traverse",
    "array",
    "gon",
    "na",
    "make",
    "massive",
    "dynamic",
    "array",
    "might",
    "get",
    "little",
    "bit",
    "dicey",
    "array",
    "gets",
    "really",
    "really",
    "big",
    "gon",
    "na",
    "go",
    "ahead",
    "make",
    "mapping",
    "probably",
    "going",
    "global",
    "variable",
    "state",
    "variable",
    "top",
    "let",
    "go",
    "ahead",
    "create",
    "mapping",
    "going",
    "mapping",
    "addresses",
    "nft",
    "addresses",
    "right",
    "going",
    "nft",
    "contract",
    "address",
    "mapped",
    "nft",
    "token",
    "id",
    "mapped",
    "type",
    "listing",
    "say",
    "mapping",
    "address",
    "mapping",
    "unt",
    "well",
    "want",
    "well",
    "want",
    "want",
    "price",
    "right",
    "another",
    "went",
    "six",
    "also",
    "want",
    "also",
    "want",
    "keep",
    "track",
    "sellers",
    "know",
    "send",
    "money",
    "could",
    "make",
    "two",
    "mappings",
    "create",
    "new",
    "type",
    "type",
    "listing",
    "let",
    "go",
    "ahead",
    "comment",
    "top",
    "since",
    "going",
    "type",
    "say",
    "struct",
    "listing",
    "going",
    "utility",
    "six",
    "price",
    "nf",
    "address",
    "seller",
    "nf",
    "team",
    "new",
    "typing",
    "uncomment",
    "say",
    "nft",
    "contract",
    "address",
    "map",
    "nft",
    "token",
    "id",
    "mapped",
    "listing",
    "make",
    "private",
    "variable",
    "called",
    "underscore",
    "listings",
    "back",
    "list",
    "item",
    "function",
    "going",
    "update",
    "listing",
    "mapping",
    "gon",
    "na",
    "say",
    "listing",
    "nf",
    "address",
    "right",
    "address",
    "nf",
    "token",
    "id",
    "going",
    "equal",
    "gon",
    "na",
    "create",
    "listing",
    "price",
    "well",
    "seller",
    "going",
    "message",
    "sender",
    "right",
    "message",
    "dot",
    "sender",
    "one",
    "actually",
    "listing",
    "item",
    "since",
    "updating",
    "mapping",
    "best",
    "practice",
    "update",
    "mappings",
    "guessed",
    "need",
    "emit",
    "event",
    "especially",
    "project",
    "gon",
    "na",
    "see",
    "emitting",
    "events",
    "least",
    "project",
    "helpful",
    "gon",
    "na",
    "go",
    "ahead",
    "emit",
    "item",
    "listed",
    "event",
    "going",
    "create",
    "second",
    "give",
    "message",
    "sender",
    "nft",
    "address",
    "token",
    "id",
    "price",
    "item",
    "listed",
    "top",
    "course",
    "structure",
    "gon",
    "na",
    "say",
    "event",
    "item",
    "listed",
    "address",
    "indexed",
    "seller",
    "address",
    "indexed",
    "nft",
    "address",
    "address",
    "indexed",
    "token",
    "id",
    "un",
    "256",
    "price",
    "sorry",
    "needs",
    "un",
    "256",
    "token",
    "id",
    "int",
    "looks",
    "pretty",
    "good",
    "us",
    "however",
    "probably",
    "want",
    "make",
    "sure",
    "list",
    "ftes",
    "already",
    "listed",
    "add",
    "like",
    "kind",
    "preference",
    "comes",
    "little",
    "bit",
    "actually",
    "going",
    "create",
    "modifier",
    "called",
    "listed",
    "make",
    "sure",
    "relist",
    "already",
    "listed",
    "main",
    "functions",
    "like",
    "little",
    "indicator",
    "modifier",
    "listed",
    "gon",
    "na",
    "take",
    "address",
    "nft",
    "address",
    "un",
    "256",
    "token",
    "id",
    "address",
    "owner",
    "going",
    "say",
    "going",
    "check",
    "going",
    "make",
    "new",
    "listing",
    "memory",
    "listing",
    "equals",
    "underscore",
    "listings",
    "nft",
    "address",
    "token",
    "id",
    "gon",
    "na",
    "say",
    "listing",
    "dot",
    "price",
    "greater",
    "zero",
    "gon",
    "na",
    "go",
    "ahead",
    "revert",
    "already",
    "passing",
    "nft",
    "address",
    "token",
    "id",
    "course",
    "going",
    "prepend",
    "nft",
    "marketplace",
    "top",
    "error",
    "ft",
    "marketplace",
    "already",
    "listed",
    "like",
    "going",
    "put",
    "little",
    "underscore",
    "right",
    "underneath",
    "address",
    "address",
    "went",
    "okay",
    "id",
    "modifier",
    "looks",
    "pretty",
    "good",
    "let",
    "make",
    "sure",
    "actually",
    "going",
    "compile",
    "yarn",
    "hardhead",
    "compile",
    "hh",
    "compile",
    "great",
    "looks",
    "good",
    "add",
    "modifier",
    "list",
    "item",
    "function",
    "nft",
    "address",
    "token",
    "id",
    "message",
    "dot",
    "sender",
    "cool",
    "else",
    "check",
    "well",
    "also",
    "check",
    "nf",
    "listed",
    "owned",
    "message",
    "dot",
    "sender",
    "way",
    "owners",
    "nf",
    "actually",
    "listed",
    "let",
    "go",
    "ahead",
    "add",
    "owner",
    "modifier",
    "modifier",
    "owner",
    "nft",
    "address",
    "token",
    "id",
    "spender",
    "256",
    "address",
    "spender",
    "erc",
    "721",
    "nf",
    "equals",
    "irc",
    "721",
    "address",
    "address",
    "owner",
    "equals",
    "nf",
    "dot",
    "owner",
    "token",
    "id",
    "say",
    "spender",
    "equal",
    "owner",
    "revert",
    "owner",
    "error",
    "going",
    "go",
    "ahead",
    "create",
    "top",
    "say",
    "error",
    "owner",
    "prepend",
    "nft",
    "marketplace",
    "two",
    "underscores",
    "revert",
    "revert",
    "owner",
    "underscore",
    "rest",
    "code",
    "boom",
    "underneath",
    "listed",
    "owner",
    "nft",
    "address",
    "token",
    "id",
    "message",
    "dot",
    "center",
    "list",
    "item",
    "checks",
    "see",
    "already",
    "listed",
    "make",
    "sure",
    "owner",
    "nft",
    "token",
    "id",
    "list",
    "goes",
    "ahead",
    "lists",
    "looking",
    "nicely",
    "okay",
    "cool",
    "list",
    "item",
    "method",
    "let",
    "go",
    "ahead",
    "little",
    "bit",
    "natspec",
    "little",
    "natspec",
    "looks",
    "really",
    "professional",
    "alright",
    "great",
    "list",
    "item",
    "function",
    "right",
    "next",
    "well",
    "maybe",
    "let",
    "make",
    "buy",
    "item",
    "function",
    "people",
    "buy",
    "nf",
    "listed",
    "let",
    "create",
    "function",
    "item",
    "take",
    "address",
    "address",
    "un",
    "256",
    "token",
    "id",
    "external",
    "function",
    "also",
    "make",
    "payable",
    "external",
    "function",
    "know",
    "people",
    "contracts",
    "outside",
    "contract",
    "going",
    "call",
    "item",
    "payable",
    "people",
    "spend",
    "eath",
    "spend",
    "eath",
    "whatever",
    "layer",
    "one",
    "currency",
    "actually",
    "buy",
    "prices",
    "could",
    "want",
    "100",
    "percent",
    "channeling",
    "prices",
    "listing",
    "could",
    "course",
    "add",
    "price",
    "like",
    "know",
    "address",
    "token",
    "price",
    "chain",
    "link",
    "price",
    "feeds",
    "convert",
    "price",
    "tokens",
    "much",
    "actually",
    "cost",
    "could",
    "100",
    "percent",
    "chaining",
    "price",
    "feeds",
    "simplicity",
    "gon",
    "na",
    "leave",
    "put",
    "challenge",
    "challenge",
    "going",
    "contract",
    "accept",
    "payment",
    "subset",
    "tokens",
    "well",
    "course",
    "would",
    "need",
    "give",
    "little",
    "hint",
    "channeling",
    "price",
    "feeds",
    "convert",
    "price",
    "tokens",
    "gon",
    "na",
    "choose",
    "nft",
    "token",
    "id",
    "want",
    "buy",
    "first",
    "thing",
    "probably",
    "want",
    "well",
    "probably",
    "want",
    "check",
    "item",
    "actually",
    "listed",
    "actually",
    "going",
    "make",
    "new",
    "modifier",
    "instead",
    "listed",
    "make",
    "listed",
    "modifiers",
    "modifier",
    "listed",
    "going",
    "take",
    "address",
    "address",
    "un",
    "256",
    "token",
    "id",
    "check",
    "see",
    "listed",
    "say",
    "listing",
    "memory",
    "listing",
    "equals",
    "underscore",
    "listings",
    "nft",
    "address",
    "token",
    "id",
    "sort",
    "go",
    "mapping",
    "gon",
    "na",
    "check",
    "price",
    "say",
    "listing",
    "price",
    "less",
    "equal",
    "zero",
    "basically",
    "price",
    "defaulted",
    "zero",
    "price",
    "zero",
    "gon",
    "na",
    "say",
    "revert",
    "listed",
    "address",
    "token",
    "id",
    "course",
    "going",
    "prepend",
    "marketplace",
    "marketplace",
    "underscore",
    "underscore",
    "listed",
    "gon",
    "na",
    "copy",
    "gon",
    "na",
    "say",
    "air",
    "listed",
    "going",
    "take",
    "address",
    "nft",
    "address",
    "au",
    "int",
    "256",
    "token",
    "id",
    "like",
    "modifier",
    "going",
    "add",
    "underscore",
    "add",
    "rest",
    "code",
    "listed",
    "modifier",
    "going",
    "check",
    "make",
    "sure",
    "nft",
    "actually",
    "listed",
    "gon",
    "na",
    "say",
    "listed",
    "address",
    "ft",
    "address",
    "excuse",
    "address",
    "token",
    "id",
    "gon",
    "na",
    "say",
    "listing",
    "memory",
    "listed",
    "item",
    "equals",
    "underscore",
    "listings",
    "address",
    "token",
    "id",
    "say",
    "message",
    "dot",
    "value",
    "less",
    "listed",
    "item",
    "dot",
    "price",
    "going",
    "revert",
    "price",
    "met",
    "nft",
    "address",
    "open",
    "id",
    "listed",
    "item",
    "dot",
    "price",
    "excel",
    "going",
    "create",
    "new",
    "air",
    "price",
    "met",
    "error",
    "price",
    "met",
    "course",
    "going",
    "prepend",
    "nft",
    "marketplace",
    "take",
    "address",
    "address",
    "went",
    "56",
    "token",
    "id",
    "unt",
    "256",
    "price",
    "see",
    "exe",
    "exactly",
    "price",
    "met",
    "back",
    "get",
    "full",
    "error",
    "want",
    "make",
    "sure",
    "sending",
    "us",
    "enough",
    "money",
    "first",
    "send",
    "money",
    "needs",
    "belong",
    "whomever",
    "listed",
    "item",
    "actually",
    "need",
    "keep",
    "track",
    "much",
    "money",
    "people",
    "let",
    "create",
    "another",
    "data",
    "structure",
    "called",
    "proceeds",
    "keep",
    "track",
    "much",
    "money",
    "people",
    "earned",
    "selling",
    "nf",
    "create",
    "mapping",
    "address",
    "going",
    "mapping",
    "seller",
    "address",
    "amount",
    "earned",
    "make",
    "private",
    "called",
    "underscore",
    "proceeds",
    "somebody",
    "buys",
    "item",
    "update",
    "proceeds",
    "say",
    "proceeds",
    "listed",
    "item",
    "seller",
    "equals",
    "proceeds",
    "illicit",
    "io",
    "dot",
    "seller",
    "plus",
    "msg",
    "dot",
    "value",
    "buy",
    "item",
    "going",
    "want",
    "delete",
    "listing",
    "delete",
    "mapping",
    "wreck",
    "delete",
    "entry",
    "mapping",
    "use",
    "delete",
    "underscore",
    "listings",
    "ft",
    "address",
    "token",
    "id",
    "remove",
    "mapping",
    "finally",
    "going",
    "go",
    "ahead",
    "transfer",
    "say",
    "erc",
    "721",
    "ft",
    "address",
    "going",
    "call",
    "dot",
    "transfer",
    "listed",
    "item",
    "dot",
    "seller",
    "message",
    "dot",
    "sender",
    "token",
    "id",
    "notice",
    "something",
    "send",
    "seller",
    "money",
    "well",
    "solidity",
    "concept",
    "called",
    "pull",
    "push",
    "considered",
    "best",
    "practice",
    "working",
    "solidity",
    "want",
    "shift",
    "risk",
    "associated",
    "transferring",
    "ether",
    "user",
    "instead",
    "sending",
    "money",
    "user",
    "want",
    "want",
    "withdraw",
    "money",
    "always",
    "want",
    "shift",
    "risk",
    "working",
    "money",
    "working",
    "eath",
    "whatever",
    "layer",
    "one",
    "working",
    "actual",
    "user",
    "want",
    "send",
    "money",
    "directly",
    "want",
    "create",
    "proceeds",
    "data",
    "structure",
    "withdraw",
    "later",
    "could",
    "probably",
    "checking",
    "could",
    "say",
    "okay",
    "check",
    "make",
    "sure",
    "nft",
    "transferred",
    "look",
    "erc",
    "721",
    "though",
    "looking",
    "transfer",
    "function",
    "see",
    "actually",
    "return",
    "go",
    "ip",
    "721",
    "see",
    "none",
    "return",
    "type",
    "though",
    "transfer",
    "return",
    "type",
    "however",
    "see",
    "safe",
    "transfer",
    "bit",
    "safe",
    "transfer",
    "going",
    "little",
    "bit",
    "better",
    "right",
    "look",
    "transfer",
    "transfers",
    "ownership",
    "entity",
    "caller",
    "responsible",
    "confirm",
    "underscore",
    "two",
    "capable",
    "receiving",
    "entities",
    "else",
    "may",
    "permanently",
    "lost",
    "maybe",
    "instead",
    "want",
    "use",
    "safe",
    "transfer",
    "throws",
    "error",
    "unless",
    "message",
    "sender",
    "current",
    "owner",
    "authorize",
    "operator",
    "blah",
    "blah",
    "blah",
    "instead",
    "transfer",
    "going",
    "actually",
    "use",
    "safe",
    "transfer",
    "little",
    "bit",
    "safer",
    "safe",
    "transfer",
    "instead",
    "transfer",
    "since",
    "updating",
    "mapping",
    "going",
    "guessed",
    "let",
    "omit",
    "event",
    "call",
    "item",
    "bot",
    "lab",
    "message",
    "sender",
    "empty",
    "address",
    "token",
    "id",
    "listed",
    "item",
    "price",
    "top",
    "let",
    "create",
    "new",
    "event",
    "event",
    "item",
    "bought",
    "address",
    "indexed",
    "fire",
    "address",
    "indexed",
    "nft",
    "address",
    "address",
    "indexed",
    "token",
    "id",
    "un",
    "236",
    "price",
    "kidding",
    "look",
    "fantastic",
    "intuitive",
    "six",
    "looks",
    "fantastic",
    "buy",
    "item",
    "set",
    "way",
    "safe",
    "something",
    "called",
    "reentrancy",
    "attack",
    "coding",
    "contracts",
    "way",
    "kind",
    "state",
    "change",
    "first",
    "transfer",
    "nft",
    "token",
    "etc",
    "cognitively",
    "think",
    "might",
    "make",
    "sense",
    "okay",
    "first",
    "maybe",
    "actually",
    "send",
    "nft",
    "right",
    "want",
    "send",
    "entity",
    "first",
    "actually",
    "huge",
    "security",
    "vulnerability",
    "understand",
    "let",
    "learn",
    "one",
    "common",
    "hacks",
    "blockchain",
    "reentrant",
    "see",
    "attack",
    "sub",
    "lesson",
    "going",
    "talk",
    "reentrant",
    "c",
    "github",
    "repo",
    "associated",
    "lesson",
    "going",
    "code",
    "everything",
    "going",
    "go",
    "code",
    "looking",
    "based",
    "solidity",
    "example",
    "reentrant",
    "see",
    "example",
    "link",
    "github",
    "repo",
    "associated",
    "course",
    "sample",
    "contract",
    "place",
    "deposit",
    "withdraw",
    "eath",
    "mapping",
    "called",
    "balances",
    "call",
    "deposit",
    "update",
    "much",
    "deposited",
    "protocol",
    "withdrawal",
    "function",
    "well",
    "first",
    "grabs",
    "balance",
    "balances",
    "mapping",
    "make",
    "sure",
    "zero",
    "way",
    "sending",
    "eath",
    "whole",
    "time",
    "message",
    "sender",
    "dot",
    "call",
    "send",
    "balance",
    "update",
    "bounces",
    "message",
    "sender",
    "equals",
    "zero",
    "line",
    "actually",
    "makes",
    "contract",
    "incredibly",
    "vulnerable",
    "run",
    "right",
    "though",
    "say",
    "hey",
    "looks",
    "like",
    "working",
    "expected",
    "go",
    "deploy",
    "copy",
    "accounts",
    "working",
    "like",
    "bounce",
    "zero",
    "deposit",
    "know",
    "going",
    "away",
    "let",
    "go",
    "ether",
    "deposit",
    "ether",
    "come",
    "deposit",
    "balance",
    "bounces",
    "hit",
    "withdraw",
    "bounces",
    "goes",
    "back",
    "zero",
    "seems",
    "like",
    "working",
    "intended",
    "actually",
    "way",
    "attack",
    "function",
    "drain",
    "money",
    "contract",
    "known",
    "reentrancy",
    "attack",
    "two",
    "common",
    "kinds",
    "attacks",
    "space",
    "going",
    "reentrancy",
    "attacks",
    "talking",
    "oracle",
    "attacks",
    "usually",
    "happen",
    "protocol",
    "use",
    "decentralized",
    "oracle",
    "lucky",
    "teaching",
    "right",
    "get",
    "go",
    "use",
    "chain",
    "link",
    "protected",
    "two",
    "types",
    "attacks",
    "often",
    "result",
    "amount",
    "money",
    "last",
    "leaderboard",
    "called",
    "rec",
    "dot",
    "news",
    "keeps",
    "track",
    "many",
    "top",
    "attacks",
    "ever",
    "happened",
    "defi",
    "space",
    "many",
    "go",
    "retrospectives",
    "either",
    "oracle",
    "attack",
    "reentrancy",
    "attack",
    "might",
    "saying",
    "hey",
    "talking",
    "nf",
    "anything",
    "nf",
    "get",
    "worry",
    "new",
    "contract",
    "going",
    "create",
    "new",
    "contract",
    "called",
    "attack",
    "attack",
    "contract",
    "grab",
    "reentrant",
    "vulnerable",
    "contract",
    "say",
    "reentrant",
    "vulnerable",
    "public",
    "reentrant",
    "vulnerable",
    "like",
    "save",
    "reentrant",
    "vulnerable",
    "contract",
    "global",
    "variable",
    "say",
    "construct",
    "door",
    "address",
    "underscore",
    "ranch",
    "vulnerable",
    "address",
    "say",
    "reentrant",
    "vulnerable",
    "equals",
    "rancher",
    "vulnerable",
    "reentrant",
    "vulnerable",
    "address",
    "going",
    "going",
    "create",
    "function",
    "called",
    "attack",
    "function",
    "going",
    "call",
    "withdraw",
    "malicious",
    "way",
    "going",
    "say",
    "attack",
    "going",
    "external",
    "payable",
    "contract",
    "going",
    "call",
    "posit",
    "deposit",
    "money",
    "first",
    "reentrant",
    "vulnerable",
    "dot",
    "posit",
    "send",
    "value",
    "one",
    "ether",
    "immediately",
    "call",
    "n",
    "trent",
    "vulnerable",
    "dot",
    "withdraw",
    "first",
    "glance",
    "seems",
    "pretty",
    "harmless",
    "remember",
    "call",
    "message",
    "dot",
    "call",
    "like",
    "send",
    "calling",
    "back",
    "attack",
    "contract",
    "call",
    "attack",
    "contract",
    "way",
    "execute",
    "code",
    "well",
    "remember",
    "learned",
    "fallback",
    "functions",
    "put",
    "fallback",
    "function",
    "receive",
    "function",
    "code",
    "runs",
    "call",
    "seconds",
    "contract",
    "ether",
    "trigger",
    "fallback",
    "function",
    "call",
    "withdraw",
    "send",
    "contract",
    "ether",
    "update",
    "balance",
    "let",
    "see",
    "looks",
    "like",
    "fallback",
    "say",
    "address",
    "reentrant",
    "vulnerable",
    "balance",
    "greater",
    "equal",
    "one",
    "ether",
    "aka",
    "saying",
    "money",
    "left",
    "contract",
    "rancher",
    "invulnerable",
    "dot",
    "withdraw",
    "put",
    "get",
    "balanced",
    "function",
    "attacking",
    "contract",
    "going",
    "attack",
    "reentrant",
    "vulnerable",
    "calling",
    "withdraw",
    "get",
    "send",
    "section",
    "going",
    "going",
    "fallback",
    "function",
    "trigger",
    "calling",
    "withdraw",
    "call",
    "withdraw",
    "bounces",
    "message",
    "sender",
    "zeroed",
    "yet",
    "contract",
    "code",
    "go",
    "oh",
    "still",
    "money",
    "let",
    "go",
    "ahead",
    "let",
    "send",
    "trigger",
    "us",
    "call",
    "withdraw",
    "keep",
    "calling",
    "withdraw",
    "done",
    "let",
    "see",
    "looks",
    "like",
    "compile",
    "let",
    "go",
    "deploy",
    "first",
    "let",
    "deploy",
    "reentrant",
    "vulnerable",
    "contract",
    "alright",
    "contract",
    "address",
    "know",
    "like",
    "one",
    "deployed",
    "deposit",
    "let",
    "deposit",
    "one",
    "ether",
    "deposit",
    "check",
    "balances",
    "copy",
    "paste",
    "great",
    "one",
    "let",
    "deposit",
    "took",
    "balance",
    "much",
    "much",
    "withdrew",
    "withdraw",
    "switched",
    "accounts",
    "somebody",
    "else",
    "hit",
    "withdrew",
    "nothing",
    "would",
    "happen",
    "account",
    "anything",
    "makes",
    "sense",
    "lot",
    "money",
    "right",
    "get",
    "balanced",
    "contract",
    "see",
    "much",
    "money",
    "right",
    "much",
    "money",
    "total",
    "different",
    "account",
    "let",
    "choose",
    "brand",
    "new",
    "account",
    "let",
    "go",
    "ahead",
    "deploy",
    "attack",
    "contract",
    "pass",
    "reentrant",
    "value",
    "address",
    "input",
    "parameter",
    "deploy",
    "call",
    "attack",
    "see",
    "even",
    "though",
    "contract",
    "anything",
    "deposited",
    "reentrant",
    "vulnerable",
    "contract",
    "still",
    "steal",
    "funds",
    "funds",
    "right",
    "hit",
    "get",
    "balance",
    "reentrant",
    "vulnerable",
    "get",
    "balance",
    "zero",
    "know",
    "address",
    "attack",
    "get",
    "bounce",
    "oh",
    "excuse",
    "public",
    "withdrawal",
    "payable",
    "well",
    "pass",
    "one",
    "ether",
    "input",
    "parameter",
    "attack",
    "function",
    "going",
    "deposit",
    "one",
    "ether",
    "going",
    "withdraw",
    "going",
    "keep",
    "withdrawing",
    "fallback",
    "function",
    "going",
    "keep",
    "calling",
    "withdraw",
    "deposit",
    "one",
    "ether",
    "gon",
    "na",
    "able",
    "pull",
    "11",
    "hit",
    "attack",
    "transaction",
    "went",
    "new",
    "balance",
    "contract",
    "12",
    "one",
    "deposited",
    "11",
    "stole",
    "new",
    "balance",
    "old",
    "contract",
    "zero",
    "known",
    "reentrant",
    "see",
    "attack",
    "basically",
    "since",
    "call",
    "function",
    "another",
    "contract",
    "middle",
    "withdraw",
    "allow",
    "code",
    "run",
    "different",
    "contract",
    "code",
    "ran",
    "runs",
    "contract",
    "recalls",
    "withdraw",
    "balances",
    "set",
    "zero",
    "get",
    "call",
    "fallback",
    "function",
    "code",
    "calls",
    "withdraw",
    "need",
    "reread",
    "withdraw",
    "get",
    "setting",
    "balances",
    "message",
    "sender",
    "equals",
    "zero",
    "issue",
    "obviously",
    "two",
    "ways",
    "prevent",
    "easy",
    "way",
    "mutex",
    "way",
    "wan",
    "na",
    "say",
    "hard",
    "way",
    "different",
    "way",
    "one",
    "things",
    "always",
    "see",
    "security",
    "tools",
    "always",
    "want",
    "call",
    "external",
    "contract",
    "last",
    "step",
    "function",
    "last",
    "step",
    "transaction",
    "want",
    "update",
    "bounces",
    "zero",
    "call",
    "external",
    "contract",
    "balances",
    "message",
    "sender",
    "reset",
    "zero",
    "call",
    "external",
    "code",
    "try",
    "enter",
    "would",
    "hit",
    "require",
    "step",
    "cancel",
    "right",
    "would",
    "able",
    "send",
    "ether",
    "first",
    "step",
    "next",
    "step",
    "using",
    "something",
    "called",
    "mutex",
    "lock",
    "open",
    "zeppelin",
    "one",
    "modifiers",
    "type",
    "boolean",
    "called",
    "locked",
    "something",
    "right",
    "top",
    "say",
    "require",
    "locked",
    "otherwise",
    "revert",
    "first",
    "thing",
    "contract",
    "say",
    "locked",
    "equals",
    "true",
    "last",
    "thing",
    "say",
    "locked",
    "equals",
    "false",
    "using",
    "lock",
    "allow",
    "one",
    "piece",
    "code",
    "ever",
    "execute",
    "time",
    "unlock",
    "code",
    "finishes",
    "open",
    "zeplin",
    "comes",
    "reentrancy",
    "guard",
    "use",
    "code",
    "modifier",
    "non",
    "reentrant",
    "essentially",
    "talking",
    "locks",
    "creates",
    "variable",
    "called",
    "status",
    "changes",
    "enter",
    "whenever",
    "function",
    "entered",
    "runs",
    "code",
    "changes",
    "back",
    "entered",
    "finishes",
    "whenever",
    "code",
    "runs",
    "requires",
    "entered",
    "wanted",
    "use",
    "code",
    "import",
    "open",
    "zeppelin",
    "slash",
    "contracts",
    "slash",
    "security",
    "slash",
    "reentrancy",
    "guard",
    "inherit",
    "functions",
    "saying",
    "nft",
    "marketplace",
    "reentrancy",
    "guard",
    "function",
    "nervous",
    "going",
    "reentrant",
    "see",
    "issue",
    "like",
    "maybe",
    "item",
    "example",
    "would",
    "add",
    "modifier",
    "non",
    "reentrant",
    "like",
    "add",
    "mutex",
    "locking",
    "mechanism",
    "talked",
    "mutex",
    "way",
    "little",
    "bit",
    "explicit",
    "security",
    "right",
    "saying",
    "hey",
    "locked",
    "non",
    "reentrant",
    "function",
    "still",
    "best",
    "practice",
    "whenever",
    "call",
    "external",
    "code",
    "like",
    "see",
    "state",
    "changes",
    "call",
    "external",
    "contract",
    "might",
    "saying",
    "oh",
    "cool",
    "relate",
    "nf",
    "ts",
    "well",
    "imagine",
    "second",
    "instead",
    "message",
    "sender",
    "dot",
    "call",
    "know",
    "success",
    "equals",
    "know",
    "nf",
    "dot",
    "transfer",
    "transfers",
    "stuff",
    "instead",
    "fallback",
    "stuff",
    "nf",
    "nf",
    "function",
    "transfer",
    "similis",
    "code",
    "enter",
    "withdraw",
    "withdrawal",
    "set",
    "like",
    "since",
    "still",
    "calling",
    "external",
    "contract",
    "nft",
    "transfer",
    "transfer",
    "external",
    "contract",
    "could",
    "malicious",
    "try",
    "enter",
    "contract",
    "best",
    "practice",
    "always",
    "want",
    "change",
    "state",
    "call",
    "external",
    "contracts",
    "might",
    "control",
    "highly",
    "recommend",
    "playing",
    "around",
    "little",
    "bit",
    "seeing",
    "believing",
    "said",
    "code",
    "going",
    "available",
    "github",
    "sociated",
    "lesson",
    "reentrant",
    "vulnerable",
    "code",
    "let",
    "go",
    "back",
    "nft",
    "project",
    "okay",
    "know",
    "safe",
    "transfer",
    "bottom",
    "function",
    "bottom",
    "bio",
    "safe",
    "transfer",
    "function",
    "little",
    "bit",
    "higher",
    "maybe",
    "ends",
    "happening",
    "send",
    "multiple",
    "nf",
    "wrong",
    "address",
    "update",
    "favor",
    "push",
    "paul",
    "said",
    "whole",
    "lot",
    "security",
    "tips",
    "learn",
    "going",
    "course",
    "solidity",
    "still",
    "fantastic",
    "right",
    "item",
    "list",
    "item",
    "functions",
    "let",
    "cancel",
    "item",
    "cancelled",
    "listing",
    "function",
    "cancel",
    "listing",
    "nft",
    "address",
    "un",
    "256",
    "token",
    "id",
    "external",
    "function",
    "one",
    "want",
    "make",
    "sure",
    "owner",
    "entity",
    "cancel",
    "say",
    "owner",
    "address",
    "token",
    "id",
    "message",
    "dot",
    "want",
    "make",
    "sure",
    "nft",
    "actually",
    "listed",
    "listed",
    "ft",
    "address",
    "token",
    "id",
    "great",
    "cancel",
    "going",
    "going",
    "delete",
    "listings",
    "nft",
    "address",
    "token",
    "id",
    "going",
    "delete",
    "mapping",
    "emit",
    "event",
    "item",
    "cancelled",
    "message",
    "dot",
    "sender",
    "address",
    "token",
    "id",
    "course",
    "going",
    "create",
    "new",
    "event",
    "say",
    "event",
    "item",
    "canceled",
    "address",
    "indexed",
    "seller",
    "address",
    "index",
    "nft",
    "address",
    "want",
    "56",
    "indexed",
    "token",
    "id",
    "right",
    "great",
    "pretty",
    "quick",
    "cancel",
    "listening",
    "boom",
    "jack",
    "done",
    "next",
    "okay",
    "let",
    "update",
    "listings",
    "function",
    "update",
    "listing",
    "address",
    "address",
    "went",
    "sixth",
    "token",
    "id",
    "went",
    "six",
    "new",
    "price",
    "update",
    "price",
    "external",
    "make",
    "sure",
    "listed",
    "listed",
    "say",
    "owner",
    "token",
    "id",
    "message",
    "dot",
    "sender",
    "update",
    "listing",
    "say",
    "underscore",
    "listings",
    "nf",
    "address",
    "token",
    "id",
    "dot",
    "price",
    "equals",
    "new",
    "price",
    "giving",
    "admit",
    "omit",
    "like",
    "item",
    "updated",
    "also",
    "omit",
    "item",
    "listed",
    "msg",
    "dot",
    "sender",
    "nft",
    "address",
    "token",
    "id",
    "new",
    "price",
    "essentially",
    "updating",
    "essentially",
    "relisting",
    "new",
    "price",
    "going",
    "item",
    "listed",
    "event",
    "one",
    "function",
    "need",
    "withdraw",
    "proceeds",
    "say",
    "function",
    "withdraw",
    "proceeds",
    "get",
    "payments",
    "entities",
    "get",
    "proceeds",
    "new",
    "activity",
    "six",
    "proceeds",
    "equals",
    "underscore",
    "proceeds",
    "msg",
    "dot",
    "sender",
    "right",
    "getting",
    "payments",
    "collected",
    "item",
    "saying",
    "proceeds",
    "less",
    "equal",
    "zero",
    "going",
    "revert",
    "proceeds",
    "going",
    "make",
    "nft",
    "marketplace",
    "underscore",
    "underscore",
    "proceeds",
    "excel",
    "create",
    "top",
    "error",
    "empty",
    "marketplace",
    "proceeds",
    "otherwise",
    "say",
    "underscore",
    "proceeds",
    "msg",
    "dot",
    "sender",
    "equals",
    "zero",
    "going",
    "reset",
    "proceeds",
    "zero",
    "right",
    "going",
    "send",
    "proceeds",
    "going",
    "traditional",
    "way",
    "send",
    "payments",
    "bool",
    "success",
    "equals",
    "payable",
    "message",
    "dot",
    "sender",
    "call",
    "value",
    "going",
    "proceeds",
    "blank",
    "could",
    "require",
    "know",
    "could",
    "require",
    "success",
    "could",
    "say",
    "success",
    "reverts",
    "revert",
    "aleksey",
    "marketplace",
    "transfer",
    "failed",
    "make",
    "new",
    "air",
    "air",
    "nft",
    "marketplace",
    "transfer",
    "failed",
    "put",
    "semicolon",
    "looking",
    "pretty",
    "good",
    "even",
    "way",
    "withdraw",
    "five",
    "functions",
    "awesome",
    "let",
    "create",
    "couple",
    "getters",
    "maybe",
    "even",
    "copy",
    "paste",
    "say",
    "getter",
    "functions",
    "like",
    "function",
    "maybe",
    "get",
    "listing",
    "take",
    "address",
    "nf",
    "address",
    "utilities",
    "x",
    "token",
    "id",
    "external",
    "view",
    "returns",
    "listing",
    "memory",
    "say",
    "return",
    "underscore",
    "listings",
    "nf",
    "address",
    "token",
    "id",
    "like",
    "also",
    "function",
    "get",
    "proceeds",
    "address",
    "seller",
    "external",
    "view",
    "returns",
    "went",
    "desex",
    "return",
    "underscore",
    "proceeds",
    "seller",
    "get",
    "much",
    "money",
    "somebody",
    "owed",
    "listings",
    "let",
    "run",
    "little",
    "compile",
    "yarn",
    "hit",
    "compile",
    "hh",
    "compile",
    "see",
    "messed",
    "oh",
    "mess",
    "wow",
    "great",
    "guess",
    "successfully",
    "created",
    "minimalistic",
    "nft",
    "marketplace",
    "completely",
    "decentralized",
    "pretty",
    "wild",
    "incredibly",
    "powerful",
    "feel",
    "really",
    "excited",
    "cool",
    "good",
    "job",
    "know",
    "done",
    "got",
    "write",
    "deploys",
    "tests",
    "let",
    "jump",
    "since",
    "done",
    "couple",
    "times",
    "actually",
    "encourage",
    "pause",
    "video",
    "try",
    "writing",
    "deploy",
    "scripts",
    "tests",
    "go",
    "ahead",
    "come",
    "back",
    "follow",
    "along",
    "us",
    "see",
    "correctly",
    "going",
    "create",
    "new",
    "folder",
    "called",
    "deploy",
    "course",
    "already",
    "hard",
    "hat",
    "deploy",
    "hard",
    "hat",
    "config",
    "know",
    "good",
    "go",
    "let",
    "go",
    "ahead",
    "create",
    "one",
    "deploy",
    "nft",
    "seen",
    "lot",
    "going",
    "spare",
    "details",
    "const",
    "network",
    "equals",
    "require",
    "hard",
    "hat",
    "constant",
    "development",
    "chains",
    "equal",
    "equals",
    "require",
    "dot",
    "dot",
    "slash",
    "help",
    "hard",
    "hats",
    "config",
    "let",
    "see",
    "copy",
    "paste",
    "okay",
    "copy",
    "paste",
    "helper",
    "hardhead",
    "config",
    "last",
    "project",
    "let",
    "go",
    "ahead",
    "grab",
    "grab",
    "smart",
    "contract",
    "lottery",
    "paste",
    "really",
    "need",
    "file",
    "development",
    "chains",
    "right",
    "hard",
    "hat",
    "localhost",
    "going",
    "grab",
    "development",
    "chains",
    "also",
    "grab",
    "const",
    "verify",
    "equals",
    "require",
    "get",
    "utils",
    "verify",
    "right",
    "utils",
    "verify",
    "fantastic",
    "module",
    "exports",
    "equals",
    "async",
    "async",
    "function",
    "gon",
    "na",
    "take",
    "get",
    "named",
    "accounts",
    "deployments",
    "hard",
    "hat",
    "input",
    "parameter",
    "gon",
    "na",
    "const",
    "deploy",
    "comma",
    "log",
    "equals",
    "deployments",
    "const",
    "deployer",
    "equals",
    "await",
    "get",
    "named",
    "accounts",
    "course",
    "getting",
    "heart",
    "head",
    "dot",
    "config",
    "named",
    "accounts",
    "deployer",
    "player",
    "whatever",
    "last",
    "project",
    "entity",
    "marketplace",
    "constructor",
    "construct",
    "nope",
    "constructor",
    "know",
    "args",
    "going",
    "blank",
    "say",
    "const",
    "nft",
    "marketplace",
    "equals",
    "await",
    "deploy",
    "marketplace",
    "say",
    "deployer",
    "args",
    "going",
    "args",
    "log",
    "true",
    "wait",
    "confirmations",
    "network",
    "dot",
    "config",
    "dot",
    "wait",
    "confirmations",
    "one",
    "two",
    "going",
    "block",
    "patients",
    "go",
    "config",
    "make",
    "sure",
    "sorry",
    "add",
    "block",
    "confirmations",
    "going",
    "six",
    "networks",
    "actually",
    "grabbed",
    "last",
    "project",
    "looks",
    "like",
    "grabbed",
    "hard",
    "hat",
    "starter",
    "kit",
    "going",
    "add",
    "block",
    "confirmations",
    "good",
    "go",
    "gon",
    "na",
    "say",
    "development",
    "chain",
    "development",
    "chains",
    "includes",
    "network",
    "dot",
    "name",
    "process",
    "study",
    "done",
    "ether",
    "scan",
    "api",
    "key",
    "gon",
    "na",
    "go",
    "ahead",
    "log",
    "verifying",
    "weight",
    "verify",
    "markets",
    "place",
    "dot",
    "address",
    "arcs",
    "like",
    "log",
    "whole",
    "bunch",
    "hyphens",
    "finally",
    "module",
    "exports",
    "dot",
    "tags",
    "equals",
    "nft",
    "mar",
    "good",
    "place",
    "test",
    "deploy",
    "function",
    "yarn",
    "hardhead",
    "deploy",
    "tada",
    "great",
    "deploy",
    "function",
    "verify",
    "contract",
    "else",
    "probably",
    "gon",
    "na",
    "need",
    "since",
    "nft",
    "marketplace",
    "probably",
    "going",
    "need",
    "nf",
    "ts",
    "contracts",
    "create",
    "new",
    "folder",
    "tests",
    "got",
    "new",
    "file",
    "called",
    "basic",
    "nf",
    "dot",
    "soul",
    "add",
    "basic",
    "nf",
    "last",
    "project",
    "go",
    "go",
    "github",
    "repo",
    "associated",
    "course",
    "go",
    "contracts",
    "test",
    "basic",
    "nf",
    "copy",
    "paste",
    "works",
    "basic",
    "nf",
    "using",
    "pointing",
    "pug",
    "basic",
    "nf",
    "us",
    "use",
    "test",
    "basic",
    "nft",
    "gon",
    "na",
    "need",
    "create",
    "new",
    "file",
    "oh",
    "deploy",
    "basic",
    "nf",
    "dot",
    "j",
    "borrow",
    "lot",
    "boilerplate",
    "copy",
    "actually",
    "paste",
    "say",
    "const",
    "args",
    "equals",
    "blank",
    "say",
    "const",
    "basic",
    "nf",
    "equals",
    "await",
    "deploy",
    "basic",
    "nf",
    "deployer",
    "args",
    "going",
    "args",
    "log",
    "going",
    "true",
    "weight",
    "con",
    "confirmations",
    "going",
    "network",
    "dot",
    "config",
    "dot",
    "block",
    "confirmations",
    "one",
    "verify",
    "develop",
    "meant",
    "chains",
    "dot",
    "includes",
    "network",
    "dot",
    "name",
    "process",
    "dot",
    "emv",
    "ether",
    "scan",
    "api",
    "key",
    "say",
    "log",
    "find",
    "dot",
    "dot",
    "await",
    "basic",
    "nft",
    "dot",
    "address",
    "arcs",
    "module",
    "dot",
    "exports",
    "dot",
    "tags",
    "equals",
    "basic",
    "nft",
    "test",
    "yarn",
    "art",
    "deploy",
    "fantastic",
    "deployed",
    "pause",
    "good",
    "way",
    "really",
    "hone",
    "really",
    "sharpen",
    "skills",
    "repetition",
    "mother",
    "skill",
    "repeating",
    "stuff",
    "thinking",
    "problems",
    "trying",
    "code",
    "things",
    "really",
    "going",
    "make",
    "successful",
    "right",
    "awesome",
    "deploy",
    "betson",
    "time",
    "write",
    "tests",
    "go",
    "github",
    "repo",
    "associated",
    "course",
    "go",
    "test",
    "folder",
    "tests",
    "robust",
    "actually",
    "written",
    "projects",
    "lot",
    "tests",
    "pretty",
    "much",
    "everything",
    "already",
    "learned",
    "already",
    "know",
    "ability",
    "going",
    "go",
    "ahead",
    "get",
    "started",
    "going",
    "write",
    "one",
    "test",
    "together",
    "highly",
    "recommend",
    "going",
    "back",
    "tried",
    "write",
    "tests",
    "get",
    "code",
    "coverage",
    "get",
    "test",
    "coverage",
    "100",
    "percent",
    "let",
    "go",
    "ahead",
    "write",
    "one",
    "test",
    "together",
    "pause",
    "video",
    "try",
    "write",
    "tests",
    "done",
    "writing",
    "tests",
    "think",
    "hit",
    "100",
    "percent",
    "feel",
    "free",
    "compare",
    "back",
    "test",
    "wrote",
    "let",
    "create",
    "new",
    "folder",
    "called",
    "tests",
    "test",
    "new",
    "one",
    "called",
    "unit",
    "want",
    "write",
    "staging",
    "tests",
    "later",
    "absolutely",
    "create",
    "new",
    "file",
    "called",
    "nft",
    "start",
    "tests",
    "const",
    "cert",
    "expect",
    "equals",
    "require",
    "chai",
    "const",
    "network",
    "deployments",
    "ethers",
    "equals",
    "require",
    "hard",
    "hat",
    "const",
    "development",
    "chains",
    "equals",
    "require",
    "dot",
    "dot",
    "slash",
    "dot",
    "dot",
    "slash",
    "helper",
    "hothead",
    "config",
    "gon",
    "na",
    "setup",
    "say",
    "bang",
    "development",
    "chains",
    "dot",
    "includes",
    "network",
    "dot",
    "name",
    "question",
    "mark",
    "describe",
    "dot",
    "skip",
    "else",
    "describe",
    "nf",
    "marketplace",
    "tests",
    "comma",
    "async",
    "function",
    "excuse",
    "gon",
    "na",
    "function",
    "scrabble",
    "oval",
    "function",
    "async",
    "function",
    "like",
    "great",
    "let",
    "get",
    "variables",
    "say",
    "nf",
    "marketplace",
    "basic",
    "nf",
    "create",
    "constant",
    "price",
    "always",
    "set",
    "price",
    "nf",
    "thing",
    "ethers",
    "dot",
    "utils",
    "dot",
    "parse",
    "ether",
    "say",
    "const",
    "token",
    "id",
    "always",
    "zero",
    "async",
    "function",
    "get",
    "also",
    "get",
    "deployer",
    "say",
    "deployer",
    "equals",
    "await",
    "get",
    "named",
    "accounts",
    "gon",
    "na",
    "need",
    "grab",
    "getting",
    "accounts",
    "hard",
    "hat",
    "well",
    "wrap",
    "dot",
    "deployer",
    "excel",
    "also",
    "heart",
    "get",
    "named",
    "accounts",
    "also",
    "something",
    "called",
    "player",
    "talk",
    "much",
    "going",
    "second",
    "account",
    "defaulted",
    "first",
    "index",
    "right",
    "top",
    "come",
    "player",
    "say",
    "player",
    "equals",
    "await",
    "get",
    "named",
    "accounts",
    "dot",
    "player",
    "player",
    "deployer",
    "account",
    "await",
    "deployments",
    "fixture",
    "deploy",
    "contracts",
    "run",
    "everything",
    "deploy",
    "folder",
    "get",
    "nft",
    "marketplace",
    "say",
    "nft",
    "marketplace",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "marketplace",
    "basic",
    "nf",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "basic",
    "nf",
    "way",
    "ethers",
    "dot",
    "get",
    "contract",
    "works",
    "defaults",
    "grab",
    "thing",
    "whatever",
    "account",
    "account",
    "zero",
    "right",
    "deployer",
    "want",
    "call",
    "function",
    "nft",
    "marketplace",
    "player",
    "one",
    "calling",
    "function",
    "would",
    "say",
    "entity",
    "marketplace",
    "equals",
    "await",
    "empty",
    "marketplace",
    "dot",
    "connect",
    "player",
    "like",
    "whenever",
    "call",
    "function",
    "would",
    "use",
    "player",
    "instead",
    "deployer",
    "sometimes",
    "like",
    "see",
    "code",
    "let",
    "nft",
    "marketplace",
    "contract",
    "let",
    "nft",
    "marketplace",
    "nft",
    "marketplace",
    "contract",
    "equals",
    "await",
    "ethers",
    "dot",
    "contract",
    "connect",
    "set",
    "nf",
    "marketplace",
    "yes",
    "automatically",
    "choose",
    "connect",
    "placing",
    "whoever",
    "want",
    "connect",
    "write",
    "get",
    "contract",
    "sometimes",
    "really",
    "nice",
    "kind",
    "explicit",
    "really",
    "going",
    "undo",
    "want",
    "show",
    "make",
    "sure",
    "knew",
    "kind",
    "switch",
    "around",
    "different",
    "accounts",
    "different",
    "users",
    "nf",
    "probably",
    "going",
    "need",
    "mint",
    "nft",
    "actually",
    "place",
    "market",
    "await",
    "basic",
    "nf",
    "dot",
    "meant",
    "nf",
    "approve",
    "send",
    "marketplace",
    "wait",
    "basic",
    "nf",
    "dot",
    "approve",
    "market",
    "place",
    "dot",
    "address",
    "token",
    "id",
    "going",
    "zero",
    "like",
    "noc",
    "marketplace",
    "remember",
    "ca",
    "call",
    "approve",
    "nf",
    "need",
    "deployer",
    "call",
    "approved",
    "right",
    "remember",
    "since",
    "need",
    "put",
    "basic",
    "nf",
    "since",
    "tell",
    "ethers",
    "connect",
    "automatically",
    "connected",
    "deployer",
    "account",
    "zero",
    "deployer",
    "calling",
    "minting",
    "deployer",
    "approving",
    "send",
    "marketplace",
    "approved",
    "function",
    "called",
    "canned",
    "nft",
    "marketplace",
    "called",
    "transfer",
    "nf",
    "going",
    "one",
    "test",
    "gon",
    "na",
    "say",
    "lists",
    "bought",
    "async",
    "function",
    "gon",
    "na",
    "list",
    "nft",
    "buy",
    "weight",
    "entity",
    "go",
    "energy",
    "marketplace",
    "listing",
    "right",
    "want",
    "list",
    "item",
    "address",
    "token",
    "id",
    "price",
    "dot",
    "list",
    "item",
    "basic",
    "nf",
    "dot",
    "address",
    "token",
    "id",
    "zero",
    "defined",
    "right",
    "price",
    "hard",
    "coded",
    "well",
    "listing",
    "deployer",
    "owns",
    "nf",
    "player",
    "listing",
    "want",
    "buy",
    "let",
    "player",
    "one",
    "buy",
    "going",
    "going",
    "connect",
    "player",
    "nft",
    "marketplace",
    "say",
    "const",
    "player",
    "connected",
    "nf",
    "marketplace",
    "equals",
    "ft",
    "marketplace",
    "dot",
    "connect",
    "player",
    "buy",
    "item",
    "saying",
    "weight",
    "player",
    "connected",
    "ft",
    "item",
    "basic",
    "look",
    "back",
    "end",
    "marketplace",
    "buy",
    "item",
    "need",
    "needs",
    "nft",
    "address",
    "token",
    "id",
    "basic",
    "nf",
    "address",
    "token",
    "id",
    "bot",
    "check",
    "see",
    "player",
    "actually",
    "indeed",
    "nf",
    "team",
    "say",
    "const",
    "new",
    "owner",
    "check",
    "see",
    "owner",
    "indeed",
    "updated",
    "say",
    "basic",
    "nft",
    "dot",
    "owner",
    "nf",
    "owner",
    "function",
    "token",
    "id",
    "also",
    "want",
    "see",
    "deployer",
    "actually",
    "going",
    "get",
    "paid",
    "say",
    "await",
    "marketplace",
    "dot",
    "get",
    "proceeds",
    "deployer",
    "assert",
    "new",
    "owner",
    "dot",
    "two",
    "string",
    "equals",
    "player",
    "assert",
    "deployer",
    "string",
    "equals",
    "string",
    "paid",
    "price",
    "right",
    "actually",
    "little",
    "bit",
    "easier",
    "instead",
    "grabbing",
    "players",
    "getting",
    "named",
    "accounts",
    "little",
    "bit",
    "easier",
    "grab",
    "right",
    "ethers",
    "const",
    "accounts",
    "equals",
    "await",
    "get",
    "signers",
    "save",
    "player",
    "equals",
    "accounts",
    "one",
    "connect",
    "expecting",
    "type",
    "account",
    "get",
    "named",
    "account",
    "different",
    "type",
    "oh",
    "little",
    "bit",
    "easier",
    "actually",
    "connect",
    "like",
    "connect",
    "player",
    "like",
    "know",
    "player",
    "deployer",
    "different",
    "types",
    "see",
    "little",
    "bit",
    "differences",
    "ethers",
    "gets",
    "signers",
    "buy",
    "item",
    "course",
    "gon",
    "na",
    "pass",
    "value",
    "gon",
    "na",
    "price",
    "course",
    "going",
    "need",
    "pay",
    "price",
    "nft",
    "course",
    "needs",
    "player",
    "dot",
    "address",
    "difference",
    "right",
    "got",
    "player",
    "address",
    "whenever",
    "want",
    "address",
    "one",
    "ethers",
    "accounts",
    "new",
    "owner",
    "course",
    "wait",
    "run",
    "tada",
    "see",
    "things",
    "pass",
    "nft",
    "marketplace",
    "able",
    "facilitate",
    "buying",
    "selling",
    "nf",
    "arbitrary",
    "humans",
    "fantastic",
    "ran",
    "single",
    "test",
    "show",
    "little",
    "bit",
    "oddities",
    "working",
    "nf",
    "different",
    "accounts",
    "100",
    "percent",
    "feel",
    "challenge",
    "take",
    "time",
    "pause",
    "video",
    "try",
    "write",
    "tests",
    "remember",
    "goal",
    "us",
    "yarn",
    "hardhat",
    "coverage",
    "see",
    "coverage",
    "try",
    "get",
    "100",
    "percent",
    "coverage",
    "run",
    "right",
    "see",
    "oh",
    "goodness",
    "missing",
    "lot",
    "coverage",
    "ton",
    "uncovered",
    "lines",
    "top",
    "uncovered",
    "functions",
    "branches",
    "statements",
    "etc",
    "try",
    "write",
    "tests",
    "get",
    "100",
    "percent",
    "come",
    "back",
    "okay",
    "welcome",
    "back",
    "hopefully",
    "written",
    "tests",
    "run",
    "tests",
    "get",
    "look",
    "like",
    "right",
    "tests",
    "tests",
    "wrote",
    "could",
    "could",
    "last",
    "let",
    "see",
    "run",
    "yarn",
    "hardhead",
    "coverage",
    "even",
    "missed",
    "lines",
    "could",
    "could",
    "test",
    "little",
    "bit",
    "make",
    "tests",
    "even",
    "better",
    "ones",
    "made",
    "tests",
    "github",
    "repo",
    "associated",
    "written",
    "tests",
    "let",
    "write",
    "couple",
    "scripts",
    "reason",
    "gon",
    "na",
    "write",
    "couple",
    "scripts",
    "gon",
    "na",
    "need",
    "little",
    "bit",
    "later",
    "write",
    "scripts",
    "mint",
    "amount",
    "teased",
    "nf",
    "etc",
    "need",
    "fiddle",
    "around",
    "play",
    "front",
    "end",
    "little",
    "bit",
    "later",
    "create",
    "script",
    "done",
    "perform",
    "let",
    "script",
    "called",
    "mint",
    "list",
    "dot",
    "j",
    "mint",
    "nft",
    "immediately",
    "listed",
    "marketplace",
    "let",
    "create",
    "async",
    "function",
    "called",
    "mint",
    "list",
    "going",
    "call",
    "mint",
    "list",
    "going",
    "copy",
    "paste",
    "script",
    "thing",
    "obviously",
    "instead",
    "maine",
    "though",
    "calling",
    "mountain",
    "list",
    "mountain",
    "list",
    "constant",
    "nft",
    "mark",
    "tea",
    "market",
    "place",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "ft",
    "marketplace",
    "right",
    "going",
    "import",
    "ethers",
    "hard",
    "hat",
    "grab",
    "basic",
    "nf",
    "say",
    "const",
    "basic",
    "kind",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "basic",
    "nf",
    "first",
    "mint",
    "basic",
    "nf",
    "console",
    "dot",
    "log",
    "maintained",
    "top",
    "weight",
    "actual",
    "say",
    "const",
    "mint",
    "tx",
    "equals",
    "await",
    "basic",
    "nf",
    "dot",
    "mint",
    "nf",
    "await",
    "min",
    "tx",
    "dot",
    "wait",
    "wait",
    "one",
    "block",
    "actually",
    "say",
    "const",
    "mint",
    "tx",
    "receipt",
    "equals",
    "receipt",
    "another",
    "reason",
    "events",
    "good",
    "met",
    "nft",
    "omitting",
    "token",
    "id",
    "event",
    "document",
    "id",
    "event",
    "could",
    "say",
    "const",
    "token",
    "id",
    "equals",
    "mint",
    "tx",
    "receipt",
    "dot",
    "events",
    "zero",
    "args",
    "dot",
    "token",
    "id",
    "like",
    "token",
    "id",
    "token",
    "id",
    "basic",
    "nft",
    "minted",
    "call",
    "nft",
    "marketplace",
    "list",
    "item",
    "say",
    "console",
    "dot",
    "log",
    "approving",
    "nft",
    "right",
    "gon",
    "na",
    "real",
    "similar",
    "tests",
    "gon",
    "na",
    "say",
    "const",
    "approval",
    "tx",
    "equals",
    "await",
    "basic",
    "nft",
    "data",
    "prove",
    "nft",
    "marketplace",
    "dot",
    "address",
    "token",
    "id",
    "weight",
    "approved",
    "tx",
    "dot",
    "wait",
    "one",
    "console",
    "dot",
    "log",
    "listing",
    "nf",
    "const",
    "tx",
    "equals",
    "await",
    "market",
    "market",
    "place",
    "list",
    "item",
    "nft",
    "marketplace",
    "address",
    "id",
    "await",
    "tx",
    "dot",
    "wait",
    "one",
    "console",
    "dot",
    "log",
    "listed",
    "cool",
    "try",
    "running",
    "yarn",
    "hardhat",
    "node",
    "going",
    "run",
    "deploy",
    "scripts",
    "right",
    "going",
    "run",
    "deployed",
    "scripts",
    "new",
    "terminal",
    "run",
    "script",
    "yarn",
    "hard",
    "hat",
    "run",
    "scripts",
    "meant",
    "list",
    "dash",
    "dash",
    "network",
    "localhost",
    "missed",
    "argument",
    "oh",
    "need",
    "price",
    "well",
    "list",
    "entity",
    "create",
    "constant",
    "price",
    "equals",
    "say",
    "ethers",
    "dot",
    "utils",
    "dot",
    "parse",
    "ether",
    "pass",
    "price",
    "list",
    "item",
    "oops",
    "sorry",
    "marketplace",
    "listing",
    "basic",
    "nf",
    "listing",
    "course",
    "run",
    "bada",
    "bing",
    "bada",
    "boom",
    "got",
    "listed",
    "events",
    "see",
    "listing",
    "awesome",
    "script",
    "alright",
    "script",
    "going",
    "writing",
    "couple",
    "scripts",
    "little",
    "bit",
    "later",
    "essentially",
    "really",
    "solid",
    "repo",
    "totally",
    "decentralized",
    "nft",
    "marketplace",
    "absolutely",
    "massive",
    "incredibly",
    "incredibly",
    "proud",
    "course",
    "code",
    "people",
    "interact",
    "software",
    "developers",
    "great",
    "going",
    "want",
    "allow",
    "anybody",
    "able",
    "interact",
    "list",
    "nf",
    "marketplace",
    "going",
    "well",
    "going",
    "want",
    "build",
    "front",
    "end",
    "gon",
    "na",
    "get",
    "second",
    "part",
    "lesson",
    "lesson",
    "15",
    "finished",
    "backend",
    "gon",
    "na",
    "move",
    "front",
    "end",
    "gon",
    "na",
    "start",
    "morass",
    "code",
    "code",
    "pretty",
    "much",
    "nearly",
    "identical",
    "going",
    "start",
    "morales",
    "going",
    "teach",
    "going",
    "teach",
    "difference",
    "morales",
    "mograph",
    "kind",
    "even",
    "using",
    "first",
    "place",
    "going",
    "start",
    "morales",
    "want",
    "follow",
    "along",
    "next",
    "section",
    "code",
    "going",
    "working",
    "going",
    "excited",
    "hope",
    "going",
    "phenomenal",
    "session",
    "build",
    "one",
    "sophisticated",
    "front",
    "ends",
    "using",
    "tools",
    "like",
    "said",
    "showed",
    "little",
    "bit",
    "earlier",
    "going",
    "look",
    "like",
    "let",
    "quick",
    "refresher",
    "front",
    "end",
    "going",
    "look",
    "like",
    "connect",
    "little",
    "connect",
    "button",
    "hit",
    "metamask",
    "metamask",
    "pops",
    "go",
    "ahead",
    "connect",
    "connected",
    "see",
    "different",
    "nf",
    "address",
    "owned",
    "us",
    "say",
    "owned",
    "switch",
    "addresses",
    "go",
    "ahead",
    "update",
    "connect",
    "owned",
    "different",
    "address",
    "owned",
    "us",
    "get",
    "little",
    "hover",
    "says",
    "update",
    "listing",
    "right",
    "worth",
    "listed",
    "marketplace",
    "owned",
    "us",
    "click",
    "update",
    "different",
    "price",
    "let",
    "update",
    "50",
    "eath",
    "whatever",
    "layer",
    "one",
    "currency",
    "save",
    "new",
    "listing",
    "price",
    "go",
    "ahead",
    "confirm",
    "say",
    "listing",
    "updated",
    "please",
    "refresh",
    "mine",
    "blocks",
    "back",
    "end",
    "boom",
    "see",
    "worth",
    "50",
    "switch",
    "different",
    "account",
    "see",
    "owned",
    "baba",
    "blah",
    "hovered",
    "says",
    "enough",
    "selected",
    "different",
    "user",
    "going",
    "get",
    "transaction",
    "actually",
    "buy",
    "go",
    "ahead",
    "confirm",
    "going",
    "buy",
    "get",
    "little",
    "pop",
    "item",
    "bought",
    "successfully",
    "little",
    "refresh",
    "see",
    "nft",
    "gone",
    "marketplace",
    "since",
    "bought",
    "right",
    "longer",
    "available",
    "sold",
    "come",
    "sell",
    "nf",
    "tees",
    "bottom",
    "see",
    "withdraw",
    "proceeds",
    "whenever",
    "somebody",
    "buys",
    "nf",
    "nft",
    "marketplace",
    "actually",
    "keeps",
    "proceeds",
    "actually",
    "keeps",
    "result",
    "sale",
    "switch",
    "back",
    "address",
    "nft",
    "listed",
    "see",
    "withdraw",
    "50",
    "proceeds",
    "know",
    "50",
    "eath",
    "bought",
    "hit",
    "withdraw",
    "metamask",
    "going",
    "pop",
    "go",
    "ahead",
    "confirm",
    "wait",
    "little",
    "bit",
    "transaction",
    "populates",
    "boom",
    "goes",
    "see",
    "zero",
    "proceeds",
    "right",
    "withdrew",
    "everything",
    "relist",
    "nft",
    "come",
    "back",
    "go",
    "back",
    "one",
    "bought",
    "know",
    "address",
    "token",
    "id",
    "nf",
    "go",
    "ahead",
    "relisted",
    "gon",
    "na",
    "place",
    "address",
    "token",
    "id",
    "give",
    "sort",
    "price",
    "submit",
    "approve",
    "giving",
    "nft",
    "marketplace",
    "access",
    "nft",
    "little",
    "doggie",
    "go",
    "ahead",
    "actually",
    "send",
    "transaction",
    "actually",
    "list",
    "nft",
    "marketplace",
    "get",
    "nf",
    "listed",
    "successfully",
    "move",
    "blocks",
    "backend",
    "go",
    "back",
    "front",
    "end",
    "see",
    "owned",
    "us",
    "instead",
    "original",
    "owner",
    "right",
    "set",
    "10",
    "ether",
    "course",
    "switch",
    "back",
    "different",
    "user",
    "actually",
    "buy",
    "alright",
    "contracts",
    "know",
    "looks",
    "like",
    "contract",
    "side",
    "let",
    "figure",
    "front",
    "end",
    "side",
    "let",
    "jump",
    "code",
    "editor",
    "begin",
    "hard",
    "hat",
    "nft",
    "marketplace",
    "free",
    "code",
    "camp",
    "folder",
    "great",
    "going",
    "create",
    "another",
    "folder",
    "going",
    "cd",
    "directory",
    "going",
    "make",
    "new",
    "directory",
    "going",
    "call",
    "next",
    "jas",
    "marketplace",
    "dash",
    "fcc",
    "next",
    "jas",
    "marketplace",
    "dash",
    "mirallas",
    "fcc",
    "want",
    "starting",
    "mirallas",
    "cd",
    "next",
    "jas",
    "nft",
    "marketplace",
    "fcc",
    "folder",
    "code",
    "dot",
    "open",
    "new",
    "vs",
    "code",
    "file",
    "open",
    "folder",
    "open",
    "new",
    "folder",
    "begin",
    "working",
    "new",
    "folder",
    "new",
    "project",
    "new",
    "folder",
    "gon",
    "na",
    "exactly",
    "done",
    "yarn",
    "create",
    "next",
    "app",
    "period",
    "okay",
    "done",
    "setup",
    "like",
    "es",
    "lint",
    "going",
    "go",
    "ahead",
    "delete",
    "going",
    "add",
    "instead",
    "prettier",
    "stuff",
    "prettier",
    "ignore",
    "prettier",
    "rc",
    "people",
    "may",
    "strongly",
    "disagree",
    "right",
    "like",
    "going",
    "minimalistic",
    "react",
    "project",
    "right",
    "run",
    "yarn",
    "dev",
    "open",
    "ui",
    "site",
    "copy",
    "command",
    "click",
    "tada",
    "welcome",
    "next",
    "jas",
    "yeah",
    "got",
    "x",
    "js",
    "application",
    "know",
    "go",
    "pages",
    "go",
    "let",
    "delete",
    "everything",
    "bom",
    "leave",
    "stuff",
    "head",
    "comes",
    "stuff",
    "head",
    "write",
    "hi",
    "exclamation",
    "mark",
    "save",
    "come",
    "back",
    "see",
    "hi",
    "zoom",
    "whole",
    "bunch",
    "boom",
    "minimalistic",
    "reacts",
    "minimalistic",
    "next",
    "jas",
    "know",
    "already",
    "started",
    "project",
    "let",
    "jump",
    "readme",
    "given",
    "us",
    "let",
    "talk",
    "want",
    "want",
    "actually",
    "look",
    "like",
    "well",
    "going",
    "want",
    "make",
    "homepage",
    "homepage",
    "say",
    "show",
    "recently",
    "listed",
    "nf",
    "homepage",
    "show",
    "recently",
    "listed",
    "entities",
    "say",
    "nft",
    "update",
    "listing",
    "buy",
    "listing",
    "sell",
    "page",
    "page",
    "list",
    "nft",
    "marketplace",
    "going",
    "two",
    "main",
    "pages",
    "gon",
    "na",
    "homepage",
    "sell",
    "page",
    "going",
    "ton",
    "components",
    "really",
    "going",
    "two",
    "main",
    "pages",
    "go",
    "back",
    "pages",
    "right",
    "right",
    "apps",
    "dot",
    "j",
    "serves",
    "app",
    "cool",
    "everything",
    "runs",
    "homepage",
    "let",
    "also",
    "create",
    "right",
    "sell",
    "page",
    "selling",
    "dot",
    "j",
    "make",
    "really",
    "minimal",
    "copy",
    "actually",
    "copy",
    "paste",
    "whole",
    "thing",
    "paste",
    "instead",
    "high",
    "say",
    "sell",
    "page",
    "save",
    "go",
    "localhost",
    "debt",
    "slash",
    "sell",
    "oops",
    "got",
    "ta",
    "run",
    "run",
    "front",
    "end",
    "yarn",
    "dev",
    "sorry",
    "run",
    "yarn",
    "dev",
    "refresh",
    "see",
    "sell",
    "page",
    "sell",
    "pages",
    "slash",
    "sell",
    "page",
    "home",
    "going",
    "high",
    "okay",
    "cool",
    "two",
    "pages",
    "one",
    "work",
    "first",
    "well",
    "let",
    "work",
    "homepage",
    "going",
    "going",
    "keep",
    "front",
    "end",
    "bit",
    "running",
    "going",
    "hide",
    "oops",
    "opposite",
    "hiding",
    "push",
    "going",
    "hide",
    "like",
    "let",
    "go",
    "ahead",
    "let",
    "start",
    "building",
    "see",
    "index",
    "js",
    "head",
    "stuff",
    "going",
    "change",
    "nft",
    "marketplace",
    "description",
    "going",
    "empty",
    "marketplace",
    "like",
    "fabcon",
    "looks",
    "great",
    "little",
    "refresh",
    "says",
    "nft",
    "marketplace",
    "top",
    "good",
    "want",
    "well",
    "index",
    "page",
    "one",
    "first",
    "things",
    "always",
    "going",
    "need",
    "guessed",
    "going",
    "need",
    "little",
    "connect",
    "button",
    "right",
    "going",
    "need",
    "users",
    "able",
    "connect",
    "web",
    "three",
    "connect",
    "blockchain",
    "done",
    "let",
    "go",
    "ahead",
    "let",
    "create",
    "components",
    "folder",
    "create",
    "header",
    "component",
    "component",
    "nance",
    "folder",
    "create",
    "new",
    "file",
    "header",
    "digests",
    "remember",
    "since",
    "done",
    "front",
    "end",
    "lottery",
    "code",
    "always",
    "refer",
    "back",
    "lottery",
    "code",
    "well",
    "building",
    "okay",
    "course",
    "code",
    "github",
    "repo",
    "use",
    "going",
    "last",
    "time",
    "manual",
    "header",
    "thing",
    "right",
    "local",
    "storage",
    "crazy",
    "stuff",
    "going",
    "time",
    "going",
    "easy",
    "way",
    "going",
    "use",
    "web",
    "three",
    "ui",
    "kit",
    "use",
    "connect",
    "button",
    "going",
    "yarn",
    "add",
    "going",
    "dash",
    "dash",
    "dev",
    "connect",
    "button",
    "necessary",
    "component",
    "front",
    "end",
    "yarn",
    "add",
    "web",
    "ui",
    "kit",
    "also",
    "means",
    "going",
    "morales",
    "react",
    "mirallas",
    "said",
    "might",
    "little",
    "confusing",
    "know",
    "said",
    "morales",
    "graph",
    "edition",
    "still",
    "going",
    "use",
    "morales",
    "package",
    "difference",
    "going",
    "use",
    "morales",
    "server",
    "well",
    "morales",
    "edition",
    "going",
    "use",
    "morale",
    "server",
    "graph",
    "edition",
    "use",
    "morales",
    "package",
    "open",
    "source",
    "hooks",
    "tools",
    "still",
    "incredibly",
    "powerful",
    "even",
    "use",
    "morales",
    "server",
    "still",
    "going",
    "use",
    "morales",
    "package",
    "even",
    "going",
    "using",
    "graph",
    "great",
    "added",
    "going",
    "exactly",
    "last",
    "next",
    "jas",
    "process",
    "order",
    "use",
    "web",
    "ui",
    "component",
    "app",
    "dot",
    "j",
    "import",
    "mirallas",
    "provider",
    "quotes",
    "without",
    "sorry",
    "curly",
    "brace",
    "react",
    "mirallas",
    "like",
    "going",
    "wrap",
    "whole",
    "component",
    "thing",
    "morass",
    "provider",
    "gon",
    "na",
    "return",
    "little",
    "open",
    "parentheses",
    "close",
    "parentheses",
    "gon",
    "na",
    "rounds",
    "provider",
    "gon",
    "na",
    "allies",
    "mount",
    "going",
    "equal",
    "false",
    "going",
    "use",
    "server",
    "yet",
    "else",
    "provider",
    "okay",
    "cool",
    "wrapped",
    "app",
    "morales",
    "provider",
    "go",
    "back",
    "header",
    "gon",
    "na",
    "say",
    "export",
    "default",
    "function",
    "header",
    "going",
    "grab",
    "connect",
    "button",
    "eye",
    "kit",
    "import",
    "connect",
    "button",
    "web",
    "three",
    "ui",
    "kits",
    "gon",
    "na",
    "say",
    "return",
    "next",
    "button",
    "back",
    "app",
    "import",
    "import",
    "header",
    "dot",
    "dot",
    "slash",
    "components",
    "header",
    "header",
    "put",
    "header",
    "right",
    "component",
    "going",
    "add",
    "stuff",
    "header",
    "bit",
    "let",
    "make",
    "sure",
    "importing",
    "header",
    "correctly",
    "let",
    "go",
    "back",
    "ui",
    "okay",
    "boom",
    "connects",
    "button",
    "click",
    "know",
    "get",
    "little",
    "pop",
    "way",
    "zoomed",
    "going",
    "anway",
    "zoom",
    "else",
    "want",
    "put",
    "header",
    "well",
    "probably",
    "going",
    "want",
    "like",
    "give",
    "like",
    "name",
    "make",
    "look",
    "little",
    "bit",
    "nicer",
    "probably",
    "going",
    "want",
    "link",
    "well",
    "cell",
    "nf",
    "page",
    "let",
    "create",
    "navbar",
    "instead",
    "returning",
    "connect",
    "button",
    "put",
    "parenthesis",
    "return",
    "stuff",
    "use",
    "nav",
    "tag",
    "usually",
    "defines",
    "like",
    "nav",
    "bar",
    "really",
    "similar",
    "div",
    "another",
    "tag",
    "right",
    "put",
    "everything",
    "nav",
    "tag",
    "next",
    "jas",
    "actually",
    "make",
    "links",
    "using",
    "next",
    "jas",
    "link",
    "tag",
    "link",
    "allows",
    "us",
    "basically",
    "connect",
    "different",
    "links",
    "urls",
    "application",
    "like",
    "import",
    "link",
    "next",
    "slash",
    "link",
    "let",
    "say",
    "want",
    "go",
    "homepage",
    "make",
    "link",
    "say",
    "h",
    "ref",
    "equals",
    "slash",
    "equals",
    "slash",
    "inside",
    "would",
    "wrap",
    "tag",
    "make",
    "clickable",
    "could",
    "say",
    "something",
    "like",
    "nft",
    "marketplace",
    "save",
    "go",
    "front",
    "end",
    "see",
    "nft",
    "marketplace",
    "button",
    "click",
    "since",
    "already",
    "home",
    "going",
    "go",
    "anywhere",
    "copy",
    "link",
    "section",
    "paste",
    "make",
    "another",
    "one",
    "cell",
    "f",
    "title",
    "cell",
    "nf",
    "save",
    "go",
    "back",
    "front",
    "end",
    "nft",
    "marketplace",
    "sell",
    "nft",
    "click",
    "sell",
    "nf",
    "get",
    "sell",
    "page",
    "right",
    "go",
    "back",
    "homepage",
    "sell",
    "page",
    "flip",
    "back",
    "forth",
    "awesome",
    "exciting",
    "incredibly",
    "minimalistic",
    "header",
    "obviously",
    "looks",
    "terrible",
    "let",
    "little",
    "bit",
    "formatting",
    "oftentimes",
    "formatting",
    "last",
    "might",
    "well",
    "formatting",
    "going",
    "use",
    "guessed",
    "tailwind",
    "guessed",
    "correctly",
    "remember",
    "tailwind",
    "next",
    "jas",
    "always",
    "follow",
    "along",
    "grab",
    "exact",
    "thing",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "stuff",
    "right",
    "run",
    "knit",
    "finished",
    "installing",
    "yarn",
    "paste",
    "go",
    "got",
    "post",
    "css",
    "config",
    "got",
    "tailwind",
    "config",
    "going",
    "grab",
    "paste",
    "going",
    "grab",
    "global",
    "dot",
    "css",
    "open",
    "global",
    "dot",
    "css",
    "paste",
    "cool",
    "tailwind",
    "tailwind",
    "tailwind",
    "stuff",
    "header",
    "let",
    "let",
    "create",
    "div",
    "everything",
    "create",
    "little",
    "div",
    "stuff",
    "make",
    "like",
    "big",
    "section",
    "almost",
    "like",
    "big",
    "sign",
    "saying",
    "hey",
    "nfc",
    "marketplace",
    "h1",
    "stands",
    "header",
    "one",
    "give",
    "class",
    "name",
    "padding",
    "form",
    "padding",
    "x",
    "four",
    "font",
    "bold",
    "text",
    "three",
    "xl",
    "say",
    "nft",
    "marketplace",
    "nft",
    "marketplace",
    "nice",
    "bolt",
    "awesome",
    "server",
    "going",
    "kill",
    "going",
    "kill",
    "ctrl",
    "c",
    "going",
    "restart",
    "going",
    "pull",
    "tailwind",
    "stuff",
    "refresh",
    "local",
    "main",
    "see",
    "okay",
    "f",
    "c",
    "r",
    "gets",
    "place",
    "right",
    "see",
    "big",
    "bold",
    "looks",
    "lot",
    "better",
    "let",
    "keep",
    "going",
    "let",
    "give",
    "whole",
    "nav",
    "class",
    "name",
    "equals",
    "give",
    "padding",
    "five",
    "border",
    "bottom",
    "flex",
    "flex",
    "row",
    "justify",
    "n",
    "items",
    "center",
    "see",
    "looks",
    "haha",
    "looks",
    "lot",
    "better",
    "kind",
    "like",
    "setting",
    "bottom",
    "border",
    "kind",
    "stick",
    "stuff",
    "like",
    "looks",
    "much",
    "much",
    "nicer",
    "already",
    "let",
    "go",
    "let",
    "make",
    "buttons",
    "class",
    "name",
    "equals",
    "lax",
    "lax",
    "row",
    "items",
    "center",
    "like",
    "said",
    "styling",
    "class",
    "really",
    "going",
    "go",
    "exactly",
    "styling",
    "okay",
    "going",
    "move",
    "make",
    "look",
    "little",
    "nicer",
    "give",
    "link",
    "class",
    "name",
    "equals",
    "p",
    "six",
    "give",
    "class",
    "name",
    "links",
    "give",
    "padding",
    "moved",
    "away",
    "margin",
    "right",
    "away",
    "oh",
    "forgot",
    "morales",
    "equals",
    "false",
    "need",
    "morales",
    "auth",
    "equals",
    "false",
    "automatically",
    "connect",
    "morales",
    "database",
    "try",
    "connect",
    "morales",
    "database",
    "connect",
    "want",
    "connect",
    "metamask",
    "change",
    "home",
    "instead",
    "marketplace",
    "otherwise",
    "looks",
    "pretty",
    "good",
    "home",
    "selling",
    "connect",
    "button",
    "adjust",
    "formatting",
    "make",
    "look",
    "little",
    "different",
    "think",
    "part",
    "looks",
    "much",
    "better",
    "right",
    "alright",
    "cool",
    "much",
    "much",
    "better",
    "looking",
    "header",
    "setup",
    "mouse",
    "provider",
    "headers",
    "components",
    "let",
    "move",
    "index",
    "let",
    "move",
    "showing",
    "nf",
    "showing",
    "nf",
    "marketplace",
    "going",
    "already",
    "start",
    "heat",
    "get",
    "really",
    "interesting",
    "actually",
    "one",
    "thing",
    "going",
    "grab",
    "headpiece",
    "index",
    "going",
    "app",
    "jsx",
    "yeah",
    "going",
    "put",
    "header",
    "top",
    "put",
    "little",
    "little",
    "div",
    "div",
    "div",
    "like",
    "wrapping",
    "around",
    "whole",
    "thing",
    "goes",
    "way",
    "matter",
    "page",
    "always",
    "going",
    "header",
    "define",
    "one",
    "little",
    "things",
    "refresh",
    "says",
    "head",
    "defined",
    "sorry",
    "going",
    "need",
    "copy",
    "import",
    "head",
    "next",
    "slash",
    "head",
    "paste",
    "app",
    "jas",
    "import",
    "head",
    "next",
    "head",
    "see",
    "going",
    "empty",
    "marketplace",
    "matter",
    "page",
    "defining",
    "app",
    "level",
    "header",
    "stuff",
    "index",
    "almost",
    "nothing",
    "let",
    "want",
    "want",
    "homepage",
    "aka",
    "index",
    "show",
    "recently",
    "listed",
    "nft",
    "question",
    "show",
    "recently",
    "listed",
    "nf",
    "ts",
    "well",
    "let",
    "go",
    "back",
    "contract",
    "go",
    "back",
    "hard",
    "hat",
    "nft",
    "marketplace",
    "looking",
    "marketplace",
    "actually",
    "see",
    "nft",
    "stored",
    "well",
    "stored",
    "listings",
    "mapping",
    "however",
    "see",
    "listings",
    "well",
    "mapping",
    "means",
    "every",
    "single",
    "address",
    "planet",
    "ca",
    "loop",
    "mapping",
    "loop",
    "every",
    "single",
    "address",
    "planet",
    "insanely",
    "large",
    "number",
    "could",
    "never",
    "fathom",
    "many",
    "addresses",
    "solutions",
    "take",
    "problem",
    "right",
    "obviously",
    "going",
    "loop",
    "everything",
    "kind",
    "first",
    "approach",
    "one",
    "first",
    "approaches",
    "would",
    "like",
    "alright",
    "patrick",
    "well",
    "create",
    "array",
    "array",
    "listings",
    "instead",
    "might",
    "good",
    "approach",
    "later",
    "also",
    "want",
    "get",
    "weird",
    "data",
    "maybe",
    "want",
    "get",
    "nf",
    "user",
    "owns",
    "nf",
    "user",
    "owns",
    "array",
    "nf",
    "user",
    "owns",
    "mapping",
    "want",
    "query",
    "weird",
    "data",
    "query",
    "weird",
    "data",
    "array",
    "gas",
    "expensive",
    "make",
    "array",
    "loop",
    "incredibly",
    "gas",
    "expensive",
    "want",
    "go",
    "back",
    "change",
    "going",
    "going",
    "type",
    "important",
    "want",
    "change",
    "protocol",
    "website",
    "want",
    "change",
    "protocol",
    "website",
    "want",
    "much",
    "change",
    "protocol",
    "website",
    "make",
    "array",
    "would",
    "become",
    "incredibly",
    "gas",
    "inefficient",
    "would",
    "become",
    "much",
    "harder",
    "use",
    "nft",
    "marketplace",
    "would",
    "much",
    "expensive",
    "build",
    "complex",
    "protocols",
    "going",
    "realize",
    "array",
    "every",
    "single",
    "mapping",
    "feasible",
    "one",
    "reasons",
    "events",
    "come",
    "play",
    "every",
    "single",
    "time",
    "list",
    "nf",
    "call",
    "list",
    "item",
    "function",
    "omit",
    "item",
    "listed",
    "item",
    "listed",
    "event",
    "stored",
    "data",
    "structure",
    "still",
    "chain",
    "smart",
    "contracts",
    "access",
    "however",
    "guess",
    "ca",
    "access",
    "chain",
    "services",
    "access",
    "events",
    "case",
    "going",
    "index",
    "events",
    "chain",
    "read",
    "database",
    "literally",
    "going",
    "going",
    "set",
    "server",
    "listen",
    "events",
    "fired",
    "fired",
    "add",
    "database",
    "query",
    "yes",
    "literally",
    "going",
    "take",
    "every",
    "single",
    "time",
    "item",
    "listed",
    "going",
    "index",
    "database",
    "ourself",
    "going",
    "call",
    "centralized",
    "database",
    "start",
    "going",
    "call",
    "database",
    "question",
    "becomes",
    "whoa",
    "centralized",
    "hey",
    "patrick",
    "talking",
    "centralized",
    "hickety",
    "heck",
    "answer",
    "necessarily",
    "graph",
    "protocol",
    "exactly",
    "protocol",
    "indexes",
    "events",
    "chain",
    "sticks",
    "graph",
    "protocol",
    "decentralized",
    "way",
    "morales",
    "way",
    "going",
    "show",
    "first",
    "centralized",
    "way",
    "morales",
    "going",
    "centralized",
    "way",
    "might",
    "route",
    "want",
    "go",
    "speed",
    "extra",
    "bells",
    "whistles",
    "local",
    "development",
    "going",
    "focusing",
    "functionality",
    "morales",
    "comes",
    "morales",
    "lot",
    "something",
    "keep",
    "mind",
    "even",
    "though",
    "adding",
    "centralized",
    "component",
    "logic",
    "smart",
    "contracts",
    "real",
    "bulk",
    "application",
    "decentralized",
    "verify",
    "interactions",
    "working",
    "decentralized",
    "smart",
    "contract",
    "actually",
    "using",
    "lot",
    "protocols",
    "centralized",
    "like",
    "ether",
    "scan",
    "like",
    "open",
    "see",
    "centralized",
    "protocols",
    "really",
    "important",
    "space",
    "showing",
    "morales",
    "get",
    "familiar",
    "working",
    "one",
    "centralized",
    "servers",
    "case",
    "optionally",
    "want",
    "make",
    "application",
    "provides",
    "centralized",
    "service",
    "ton",
    "tools",
    "space",
    "like",
    "opens",
    "defender",
    "tenderly",
    "centralized",
    "give",
    "us",
    "massive",
    "massive",
    "benefits",
    "community",
    "bringing",
    "things",
    "decentralized",
    "sometimes",
    "need",
    "training",
    "wheels",
    "get",
    "graph",
    "going",
    "decentralized",
    "way",
    "bit",
    "longer",
    "process",
    "go",
    "main",
    "net",
    "explain",
    "get",
    "let",
    "learn",
    "list",
    "recently",
    "listed",
    "nf",
    "morales",
    "graph",
    "really",
    "solid",
    "videos",
    "going",
    "leave",
    "links",
    "github",
    "repo",
    "associated",
    "want",
    "learn",
    "definitely",
    "watch",
    "absolutely",
    "fantastic",
    "help",
    "understand",
    "event",
    "stuff",
    "better",
    "normally",
    "read",
    "blockchain",
    "something",
    "like",
    "contract",
    "dot",
    "get",
    "get",
    "listing",
    "know",
    "put",
    "whatever",
    "input",
    "parameters",
    "contract",
    "double",
    "blah",
    "instead",
    "going",
    "read",
    "database",
    "houses",
    "mappings",
    "easier",
    "read",
    "data",
    "structure",
    "morales",
    "graph",
    "using",
    "morass",
    "open",
    "source",
    "packages",
    "tools",
    "however",
    "morales",
    "also",
    "comes",
    "optionally",
    "server",
    "back",
    "end",
    "give",
    "web",
    "three",
    "applications",
    "functionality",
    "however",
    "ton",
    "stuff",
    "going",
    "cover",
    "morales",
    "help",
    "build",
    "web",
    "three",
    "applications",
    "instead",
    "continuing",
    "talk",
    "morales",
    "ivan",
    "give",
    "brief",
    "overview",
    "things",
    "morales",
    "take",
    "away",
    "name",
    "ivan",
    "rallis",
    "tell",
    "speed",
    "development",
    "10",
    "times",
    "exaggerating",
    "building",
    "something",
    "want",
    "ensure",
    "scalable",
    "dap",
    "may",
    "go",
    "global",
    "may",
    "get",
    "viral",
    "may",
    "go",
    "mainstream",
    "happen",
    "happens",
    "want",
    "start",
    "scratch",
    "want",
    "use",
    "tools",
    "services",
    "allow",
    "go",
    "fast",
    "also",
    "go",
    "big",
    "exactly",
    "mirallas",
    "provides",
    "mirallas",
    "create",
    "tools",
    "create",
    "infrastructure",
    "developers",
    "way",
    "single",
    "workflow",
    "soon",
    "explain",
    "means",
    "saves",
    "time",
    "single",
    "workflow",
    "things",
    "workflow",
    "web",
    "three",
    "really",
    "means",
    "smart",
    "contract",
    "whether",
    "token",
    "game",
    "kind",
    "staking",
    "kind",
    "marketplace",
    "kind",
    "defy",
    "chain",
    "time",
    "connect",
    "back",
    "end",
    "something",
    "happens",
    "chain",
    "need",
    "monitor",
    "create",
    "web",
    "hooks",
    "create",
    "email",
    "create",
    "push",
    "notification",
    "run",
    "custom",
    "code",
    "run",
    "calculation",
    "save",
    "something",
    "database",
    "everything",
    "chain",
    "end",
    "day",
    "needs",
    "go",
    "back",
    "end",
    "something",
    "back",
    "end",
    "needs",
    "go",
    "front",
    "end",
    "example",
    "change",
    "ui",
    "something",
    "happens",
    "chain",
    "change",
    "ui",
    "user",
    "receives",
    "transfer",
    "specific",
    "threshold",
    "user",
    "nfc",
    "allow",
    "access",
    "kind",
    "chat",
    "kind",
    "exclusive",
    "piece",
    "content",
    "morales",
    "provide",
    "full",
    "stack",
    "suite",
    "tools",
    "used",
    "developers",
    "really",
    "becoming",
    "one",
    "adopted",
    "tech",
    "stacks",
    "web",
    "three",
    "starts",
    "morales",
    "identity",
    "ensures",
    "get",
    "one",
    "piece",
    "code",
    "write",
    "one",
    "piece",
    "code",
    "log",
    "users",
    "across",
    "different",
    "blockchains",
    "across",
    "different",
    "wallets",
    "morale",
    "dashboard",
    "get",
    "user",
    "profile",
    "get",
    "web",
    "session",
    "mirallas",
    "allows",
    "manage",
    "identities",
    "user",
    "profile",
    "many",
    "different",
    "wallets",
    "many",
    "different",
    "chains",
    "connected",
    "transactions",
    "synced",
    "user",
    "real",
    "time",
    "transactions",
    "synced",
    "user",
    "also",
    "established",
    "web",
    "session",
    "front",
    "end",
    "whether",
    "game",
    "whether",
    "web",
    "website",
    "ensure",
    "secure",
    "authenticated",
    "web",
    "sessions",
    "provide",
    "session",
    "management",
    "case",
    "bike",
    "mirallas",
    "session",
    "identity",
    "management",
    "invalidate",
    "sessions",
    "log",
    "users",
    "great",
    "great",
    "things",
    "one",
    "line",
    "code",
    "important",
    "number",
    "two",
    "morales",
    "real",
    "time",
    "already",
    "mentioned",
    "bit",
    "basically",
    "user",
    "know",
    "exactly",
    "going",
    "real",
    "time",
    "run",
    "custom",
    "code",
    "whenever",
    "user",
    "transaction",
    "run",
    "custom",
    "code",
    "web",
    "hook",
    "email",
    "push",
    "notification",
    "whenever",
    "user",
    "interacts",
    "smart",
    "contracts",
    "smart",
    "contract",
    "simply",
    "emits",
    "event",
    "trade",
    "nfc",
    "marketplace",
    "erc",
    "20",
    "transfer",
    "flexible",
    "setting",
    "filters",
    "say",
    "give",
    "alerts",
    "give",
    "web",
    "hooks",
    "user",
    "transfers",
    "10",
    "nfcs",
    "token",
    "transfer",
    "forth",
    "morale",
    "real",
    "time",
    "powerful",
    "things",
    "next",
    "mirallas",
    "sdks",
    "whether",
    "building",
    "website",
    "whether",
    "building",
    "game",
    "full",
    "integration",
    "game",
    "engines",
    "whether",
    "building",
    "platform",
    "extensive",
    "sdks",
    "easy",
    "use",
    "allow",
    "allow",
    "connect",
    "morales",
    "easily",
    "go",
    "documentation",
    "highly",
    "recommend",
    "go",
    "morales",
    "doc",
    "dot",
    "go",
    "doc",
    "dot",
    "marisa",
    "yo",
    "first",
    "foremost",
    "understand",
    "mirallas",
    "depth",
    "think",
    "kind",
    "like",
    "firebase",
    "crypto",
    "basically",
    "managed",
    "backend",
    "connect",
    "front",
    "end",
    "also",
    "connect",
    "back",
    "end",
    "using",
    "gs",
    "sdk",
    "easy",
    "wanted",
    "show",
    "cross",
    "platform",
    "thing",
    "let",
    "say",
    "want",
    "get",
    "nfts",
    "user",
    "show",
    "simple",
    "javascript",
    "vanilla",
    "javascript",
    "react",
    "using",
    "web",
    "request",
    "let",
    "say",
    "want",
    "use",
    "raw",
    "web",
    "request",
    "let",
    "say",
    "using",
    "kind",
    "language",
    "sdk",
    "still",
    "use",
    "morales",
    "call",
    "raw",
    "http",
    "request",
    "also",
    "show",
    "unity",
    "using",
    "c",
    "sharp",
    "unity",
    "game",
    "engine",
    "clear",
    "cross",
    "platform",
    "cross",
    "chain",
    "means",
    "example",
    "log",
    "user",
    "create",
    "user",
    "profile",
    "lambda",
    "address",
    "let",
    "say",
    "user",
    "uses",
    "solana",
    "easily",
    "connect",
    "aetherium",
    "easily",
    "connect",
    "binus",
    "chain",
    "end",
    "gon",
    "na",
    "add",
    "chain",
    "soon",
    "easily",
    "connect",
    "l",
    "ron",
    "one",
    "user",
    "profile",
    "kinds",
    "different",
    "wallets",
    "different",
    "chains",
    "one",
    "single",
    "user",
    "profile",
    "one",
    "single",
    "user",
    "id",
    "way",
    "look",
    "like",
    "database",
    "see",
    "going",
    "user",
    "user",
    "table",
    "right",
    "going",
    "accounts",
    "case",
    "eath",
    "solana",
    "types",
    "blockchains",
    "right",
    "database",
    "also",
    "transactions",
    "database",
    "set",
    "different",
    "listen",
    "events",
    "smart",
    "contracts",
    "example",
    "open",
    "see",
    "watch",
    "open",
    "see",
    "smart",
    "contracts",
    "something",
    "else",
    "variable",
    "mongodb",
    "mongodb",
    "run",
    "mongodb",
    "queries",
    "variable",
    "sense",
    "mirallas",
    "gives",
    "gives",
    "nice",
    "nice",
    "dashboard",
    "everything",
    "need",
    "know",
    "users",
    "sessions",
    "permissions",
    "forth",
    "course",
    "connect",
    "back",
    "end",
    "using",
    "node",
    "js",
    "sdk",
    "morales",
    "sdks",
    "finally",
    "speaking",
    "workflow",
    "final",
    "thing",
    "api",
    "also",
    "already",
    "showed",
    "api",
    "raw",
    "requests",
    "programming",
    "language",
    "kind",
    "architecture",
    "using",
    "workflow",
    "easily",
    "achieve",
    "anything",
    "want",
    "quickly",
    "really",
    "try",
    "morales",
    "change",
    "life",
    "explain",
    "want",
    "limited",
    "time",
    "already",
    "see",
    "presentation",
    "curious",
    "already",
    "see",
    "presentation",
    "want",
    "try",
    "already",
    "feel",
    "watching",
    "excited",
    "get",
    "hands",
    "dirty",
    "go",
    "number",
    "one",
    "two",
    "dogs",
    "authorize",
    "sale",
    "go",
    "getting",
    "started",
    "connector",
    "sdk",
    "vanilla",
    "react",
    "go",
    "see",
    "magic",
    "want",
    "practicalities",
    "go",
    "youtube",
    "channel",
    "go",
    "morality",
    "oh",
    "slash",
    "projects",
    "guys",
    "community",
    "using",
    "morales",
    "succeed",
    "using",
    "rallies",
    "achieve",
    "goal",
    "going",
    "sooner",
    "expect",
    "gon",
    "na",
    "surprise",
    "let",
    "go",
    "sign",
    "get",
    "started",
    "guys",
    "explained",
    "look",
    "like",
    "well",
    "actually",
    "going",
    "start",
    "using",
    "mirallas",
    "server",
    "capabilities",
    "going",
    "sign",
    "server",
    "going",
    "use",
    "morales",
    "back",
    "end",
    "application",
    "get",
    "set",
    "morales",
    "go",
    "go",
    "ahead",
    "sign",
    "free",
    "put",
    "email",
    "create",
    "password",
    "please",
    "specify",
    "patrick",
    "amazing",
    "hardhat",
    "video",
    "write",
    "want",
    "write",
    "hear",
    "morales",
    "first",
    "time",
    "well",
    "heard",
    "youtube",
    "heard",
    "pick",
    "roll",
    "going",
    "developer",
    "hit",
    "next",
    "want",
    "subscribe",
    "going",
    "robot",
    "create",
    "account",
    "even",
    "gives",
    "us",
    "little",
    "property",
    "create",
    "first",
    "server",
    "back",
    "end",
    "going",
    "use",
    "server",
    "stuff",
    "back",
    "create",
    "server",
    "going",
    "main",
    "net",
    "testament",
    "choose",
    "one",
    "going",
    "local",
    "dev",
    "chain",
    "server",
    "one",
    "advantages",
    "morales",
    "allows",
    "us",
    "work",
    "local",
    "dev",
    "chain",
    "indexing",
    "events",
    "actually",
    "index",
    "events",
    "local",
    "hard",
    "hat",
    "node",
    "incredibly",
    "incredibly",
    "powerful",
    "check",
    "email",
    "activate",
    "account",
    "thing",
    "email",
    "hit",
    "activate",
    "account",
    "bring",
    "us",
    "back",
    "recreate",
    "local",
    "dev",
    "chain",
    "alright",
    "going",
    "create",
    "new",
    "local",
    "dev",
    "chain",
    "server",
    "going",
    "call",
    "nft",
    "marketplace",
    "going",
    "select",
    "region",
    "whatever",
    "region",
    "want",
    "eastern",
    "united",
    "states",
    "going",
    "choose",
    "new",
    "york",
    "whatever",
    "location",
    "works",
    "gon",
    "na",
    "local",
    "dev",
    "chain",
    "going",
    "eath",
    "local",
    "dev",
    "chain",
    "building",
    "polygon",
    "building",
    "avalanche",
    "building",
    "phantom",
    "building",
    "evm",
    "compatible",
    "chains",
    "eath",
    "local",
    "dev",
    "chain",
    "going",
    "work",
    "exactly",
    "going",
    "add",
    "instance",
    "going",
    "create",
    "new",
    "application",
    "going",
    "close",
    "server",
    "says",
    "ganache",
    "really",
    "hard",
    "hat",
    "worry",
    "server",
    "go",
    "morales",
    "documentation",
    "looking",
    "events",
    "looking",
    "sync",
    "events",
    "even",
    "little",
    "search",
    "events",
    "see",
    "smart",
    "contract",
    "events",
    "platform",
    "automatic",
    "sync",
    "even",
    "tells",
    "us",
    "little",
    "bit",
    "need",
    "sync",
    "watch",
    "smart",
    "contract",
    "events",
    "basically",
    "server",
    "database",
    "going",
    "looking",
    "events",
    "emitted",
    "need",
    "hook",
    "application",
    "server",
    "go",
    "react",
    "morales",
    "github",
    "right",
    "top",
    "probably",
    "see",
    "saw",
    "morales",
    "provider",
    "docks",
    "actually",
    "pass",
    "app",
    "id",
    "server",
    "url",
    "actually",
    "connect",
    "directly",
    "servers",
    "mirallas",
    "gon",
    "na",
    "right",
    "gon",
    "na",
    "go",
    "back",
    "app",
    "jas",
    "originally",
    "saying",
    "initialize",
    "mount",
    "equals",
    "false",
    "say",
    "saying",
    "hey",
    "going",
    "use",
    "morale",
    "server",
    "going",
    "use",
    "open",
    "source",
    "morass",
    "tools",
    "provide",
    "actually",
    "want",
    "use",
    "server",
    "right",
    "want",
    "use",
    "bells",
    "whistles",
    "morales",
    "comes",
    "box",
    "going",
    "change",
    "instead",
    "saying",
    "initialize",
    "mount",
    "equals",
    "false",
    "getting",
    "ready",
    "app",
    "id",
    "server",
    "url",
    "going",
    "delete",
    "like",
    "says",
    "documentation",
    "gon",
    "na",
    "give",
    "app",
    "id",
    "server",
    "url",
    "gon",
    "na",
    "say",
    "app",
    "id",
    "equals",
    "string",
    "put",
    "app",
    "id",
    "go",
    "back",
    "morales",
    "database",
    "go",
    "view",
    "details",
    "see",
    "information",
    "grab",
    "application",
    "id",
    "copy",
    "paste",
    "want",
    "grab",
    "server",
    "url",
    "top",
    "url",
    "unique",
    "custom",
    "morale",
    "server",
    "say",
    "server",
    "url",
    "equals",
    "paste",
    "like",
    "following",
    "along",
    "tutorials",
    "might",
    "thinking",
    "oh",
    "kind",
    "hard",
    "coding",
    "stuff",
    "right",
    "like",
    "seems",
    "kind",
    "seems",
    "kind",
    "bad",
    "well",
    "intuition",
    "fantastic",
    "instead",
    "actually",
    "going",
    "put",
    "environment",
    "variables",
    "going",
    "create",
    "new",
    "file",
    "dot",
    "env",
    "file",
    "going",
    "put",
    "environment",
    "variables",
    "next",
    "jas",
    "comes",
    "built",
    "support",
    "environment",
    "variables",
    "allow",
    "following",
    "use",
    "dot",
    "env",
    "dot",
    "local",
    "load",
    "environment",
    "variables",
    "environment",
    "variables",
    "browser",
    "prefixing",
    "next",
    "underscore",
    "public",
    "couple",
    "different",
    "environment",
    "variable",
    "paths",
    "use",
    "dot",
    "env",
    "dot",
    "local",
    "dot",
    "env",
    "dot",
    "dot",
    "thing",
    "going",
    "dot",
    "env",
    "keep",
    "simple",
    "order",
    "front",
    "ends",
    "read",
    "environment",
    "variables",
    "dot",
    "env",
    "file",
    "next",
    "underscore",
    "public",
    "underscore",
    "next",
    "jas",
    "look",
    "dot",
    "env",
    "file",
    "variables",
    "start",
    "stick",
    "environment",
    "variables",
    "application",
    "like",
    "morales",
    "server",
    "equals",
    "blah",
    "blah",
    "blah",
    "idea",
    "need",
    "next",
    "underscore",
    "public",
    "underscore",
    "console",
    "dot",
    "log",
    "look",
    "process",
    "dot",
    "env",
    "next",
    "public",
    "morale",
    "server",
    "actually",
    "need",
    "kill",
    "restart",
    "go",
    "back",
    "little",
    "refresh",
    "say",
    "look",
    "bla",
    "bla",
    "bla",
    "dot",
    "env",
    "file",
    "next",
    "public",
    "grab",
    "app",
    "id",
    "copy",
    "dot",
    "env",
    "next",
    "public",
    "app",
    "id",
    "equals",
    "paste",
    "grab",
    "server",
    "url",
    "go",
    "back",
    "next",
    "public",
    "server",
    "url",
    "equals",
    "paste",
    "like",
    "top",
    "say",
    "const",
    "app",
    "id",
    "equals",
    "process",
    "dot",
    "e",
    "v",
    "dot",
    "next",
    "public",
    "app",
    "id",
    "say",
    "const",
    "server",
    "url",
    "equals",
    "process",
    "dot",
    "e",
    "v",
    "dot",
    "next",
    "public",
    "server",
    "url",
    "variables",
    "stick",
    "like",
    "connect",
    "application",
    "morale",
    "server",
    "course",
    "done",
    "anything",
    "yet",
    "getting",
    "started",
    "right",
    "going",
    "connect",
    "signed",
    "well",
    "told",
    "morale",
    "server",
    "going",
    "indexing",
    "events",
    "go",
    "dashboard",
    "button",
    "entire",
    "database",
    "everything",
    "browser",
    "tab",
    "database",
    "right",
    "see",
    "right",
    "whole",
    "lot",
    "anything",
    "events",
    "data",
    "would",
    "need",
    "tell",
    "server",
    "hey",
    "need",
    "start",
    "listening",
    "events",
    "show",
    "recently",
    "listed",
    "entities",
    "morale",
    "server",
    "need",
    "start",
    "listening",
    "need",
    "create",
    "database",
    "entry",
    "every",
    "single",
    "one",
    "item",
    "listed",
    "events",
    "whenever",
    "somebody",
    "buys",
    "item",
    "right",
    "whenever",
    "somebody",
    "buys",
    "item",
    "cancels",
    "item",
    "need",
    "remove",
    "database",
    "start",
    "telling",
    "morales",
    "start",
    "listening",
    "events",
    "well",
    "first",
    "well",
    "first",
    "gon",
    "na",
    "need",
    "connect",
    "back",
    "blockchain",
    "going",
    "say",
    "contract",
    "events",
    "hears",
    "events",
    "need",
    "connect",
    "need",
    "tell",
    "hears",
    "events",
    "connect",
    "mirallas",
    "server",
    "hard",
    "hat",
    "blockchain",
    "right",
    "running",
    "one",
    "let",
    "go",
    "ahead",
    "start",
    "hard",
    "hat",
    "local",
    "host",
    "blockchain",
    "one",
    "terminal",
    "running",
    "front",
    "end",
    "another",
    "terminal",
    "see",
    "download",
    "directory",
    "cd",
    "hard",
    "hat",
    "nft",
    "marketplace",
    "dot",
    "free",
    "code",
    "camp",
    "free",
    "code",
    "camp",
    "yarn",
    "hard",
    "hat",
    "node",
    "done",
    "everything",
    "correctly",
    "deploy",
    "nft",
    "marketplace",
    "deploy",
    "basic",
    "nft",
    "start",
    "local",
    "http",
    "web",
    "socket",
    "blah",
    "blah",
    "blah",
    "good",
    "node",
    "running",
    "go",
    "view",
    "details",
    "go",
    "dev",
    "chain",
    "proxy",
    "server",
    "dev",
    "chain",
    "proxy",
    "server",
    "going",
    "actually",
    "tell",
    "morales",
    "listen",
    "locally",
    "running",
    "hard",
    "hat",
    "node",
    "going",
    "need",
    "going",
    "need",
    "download",
    "called",
    "reverse",
    "proxy",
    "link",
    "github",
    "well",
    "depending",
    "computer",
    "running",
    "tell",
    "one",
    "actually",
    "need",
    "download",
    "troubleshooting",
    "tips",
    "ever",
    "get",
    "lost",
    "really",
    "really",
    "confused",
    "morales",
    "frp",
    "download",
    "quick",
    "search",
    "even",
    "come",
    "right",
    "documentation",
    "connecting",
    "ganache",
    "morales",
    "note",
    "mac",
    "users",
    "download",
    "frp",
    "dot",
    "darwin",
    "dot",
    "bla",
    "bla",
    "bla",
    "nosh",
    "proxy",
    "server",
    "mac",
    "going",
    "download",
    "darwin",
    "amd",
    "look",
    "releases",
    "first",
    "one",
    "top",
    "darwin",
    "amd",
    "one",
    "going",
    "go",
    "ahead",
    "download",
    "gon",
    "na",
    "click",
    "going",
    "download",
    "downloaded",
    "going",
    "open",
    "gon",
    "na",
    "get",
    "folder",
    "gon",
    "na",
    "get",
    "folder",
    "looks",
    "like",
    "main",
    "things",
    "need",
    "going",
    "f",
    "rp",
    "frp",
    "c",
    "dot",
    "ini",
    "f",
    "rpc",
    "going",
    "executable",
    "going",
    "going",
    "run",
    "connect",
    "blockchain",
    "node",
    "morales",
    "f",
    "rpc",
    "dot",
    "ini",
    "going",
    "basically",
    "config",
    "file",
    "one",
    "sections",
    "downloading",
    "going",
    "one",
    "hardest",
    "steps",
    "get",
    "lost",
    "please",
    "ask",
    "questions",
    "github",
    "please",
    "ask",
    "questions",
    "morales",
    "forum",
    "morales",
    "forum",
    "well",
    "ask",
    "ton",
    "different",
    "questions",
    "please",
    "check",
    "troubleshooting",
    "well",
    "going",
    "going",
    "create",
    "new",
    "folder",
    "new",
    "folder",
    "called",
    "f",
    "r",
    "make",
    "little",
    "easier",
    "could",
    "really",
    "put",
    "wherever",
    "want",
    "always",
    "refer",
    "back",
    "going",
    "going",
    "take",
    "going",
    "copy",
    "two",
    "files",
    "place",
    "frp",
    "folder",
    "frp",
    "c",
    "f",
    "rpc",
    "ini",
    "click",
    "f",
    "rpc",
    "going",
    "like",
    "hey",
    "binary",
    "ca",
    "really",
    "look",
    "click",
    "whole",
    "bunch",
    "nonsense",
    "f",
    "rpc",
    "dot",
    "ini",
    "looks",
    "like",
    "pretty",
    "typical",
    "config",
    "file",
    "going",
    "adjust",
    "even",
    "go",
    "back",
    "morale",
    "server",
    "give",
    "need",
    "using",
    "hard",
    "hat",
    "going",
    "copy",
    "everything",
    "gon",
    "na",
    "go",
    "back",
    "f",
    "rpc",
    "dot",
    "ini",
    "paste",
    "whatever",
    "going",
    "tell",
    "f",
    "rpc",
    "thing",
    "need",
    "connect",
    "tried",
    "users",
    "using",
    "wsl",
    "using",
    "wsl",
    "let",
    "us",
    "know",
    "full",
    "blockchain",
    "solidity",
    "course",
    "jas",
    "make",
    "new",
    "discussion",
    "seen",
    "already",
    "saying",
    "hey",
    "using",
    "wsl",
    "f",
    "rpc",
    "need",
    "use",
    "bottom",
    "says",
    "run",
    "enjoy",
    "running",
    "mac",
    "os",
    "runs",
    "linux",
    "commands",
    "copy",
    "create",
    "new",
    "terminal",
    "going",
    "going",
    "cd",
    "frp",
    "folder",
    "going",
    "paste",
    "thing",
    "copied",
    "ross",
    "running",
    "f",
    "rpc",
    "executable",
    "dash",
    "c",
    "dash",
    "config",
    "f",
    "rpc",
    "dot",
    "ini",
    "hit",
    "enter",
    "gon",
    "na",
    "say",
    "log",
    "server",
    "success",
    "get",
    "run",
    "id",
    "blah",
    "blah",
    "server",
    "udp",
    "port",
    "whole",
    "bunch",
    "stuff",
    "seeing",
    "success",
    "stuff",
    "means",
    "right",
    "hit",
    "ctrl",
    "c",
    "cancel",
    "going",
    "keep",
    "running",
    "want",
    "run",
    "absolutely",
    "going",
    "show",
    "another",
    "way",
    "using",
    "morales",
    "admin",
    "cli",
    "everything",
    "buttons",
    "pressing",
    "morales",
    "actually",
    "comes",
    "thing",
    "called",
    "morales",
    "admin",
    "cli",
    "command",
    "line",
    "interface",
    "way",
    "us",
    "connect",
    "run",
    "buttons",
    "stuff",
    "pressing",
    "right",
    "terminal",
    "right",
    "shell",
    "going",
    "show",
    "couple",
    "commands",
    "work",
    "admin",
    "cli",
    "going",
    "working",
    "lot",
    "admin",
    "cli",
    "commands",
    "going",
    "npm",
    "install",
    "dash",
    "g",
    "morales",
    "admin",
    "cli",
    "us",
    "yarn",
    "global",
    "add",
    "going",
    "grab",
    "yarn",
    "global",
    "add",
    "routes",
    "admin",
    "cli",
    "like",
    "able",
    "run",
    "morales",
    "admin",
    "cli",
    "see",
    "whole",
    "bunch",
    "stuff",
    "like",
    "ran",
    "routes",
    "admin",
    "cli",
    "stuff",
    "one",
    "big",
    "ones",
    "one",
    "important",
    "ones",
    "going",
    "working",
    "connect",
    "local",
    "dev",
    "chain",
    "running",
    "f",
    "rpc",
    "dash",
    "c",
    "dash",
    "f",
    "rpc",
    "ini",
    "going",
    "running",
    "connect",
    "local",
    "dev",
    "chain",
    "like",
    "jump",
    "package",
    "dot",
    "json",
    "create",
    "additional",
    "script",
    "us",
    "run",
    "yarn",
    "whatever",
    "name",
    "want",
    "make",
    "lot",
    "easier",
    "us",
    "connect",
    "local",
    "dev",
    "chain",
    "underneath",
    "lint",
    "going",
    "calm",
    "going",
    "create",
    "new",
    "command",
    "gon",
    "na",
    "say",
    "morales",
    "sync",
    "going",
    "run",
    "morales",
    "admin",
    "cli",
    "version",
    "f",
    "rpc",
    "dash",
    "c",
    "thing",
    "going",
    "going",
    "say",
    "mirallas",
    "admin",
    "cli",
    "connect",
    "local",
    "dev",
    "chain",
    "dash",
    "dash",
    "chain",
    "hard",
    "hat",
    "dash",
    "dash",
    "mirallas",
    "capital",
    "sub",
    "domain",
    "going",
    "put",
    "subdomain",
    "morale",
    "server",
    "go",
    "go",
    "back",
    "routes",
    "admin",
    "data",
    "servers",
    "go",
    "back",
    "server",
    "details",
    "going",
    "https",
    "going",
    "way",
    "even",
    "port",
    "going",
    "grab",
    "going",
    "paste",
    "going",
    "space",
    "dash",
    "dash",
    "f",
    "rpc",
    "path",
    "going",
    "dot",
    "slash",
    "f",
    "rpc",
    "slash",
    "frp",
    "slash",
    "f",
    "rpc",
    "save",
    "run",
    "going",
    "work",
    "though",
    "run",
    "yarn",
    "new",
    "script",
    "morales",
    "sync",
    "gon",
    "na",
    "say",
    "specify",
    "morales",
    "api",
    "key",
    "going",
    "give",
    "us",
    "prompt",
    "dashboard",
    "api",
    "key",
    "copy",
    "paste",
    "api",
    "secret",
    "copy",
    "paste",
    "say",
    "starting",
    "connection",
    "hard",
    "hat",
    "great",
    "really",
    "annoying",
    "want",
    "going",
    "ctrl",
    "c",
    "going",
    "kill",
    "go",
    "dot",
    "env",
    "actually",
    "add",
    "environment",
    "variables",
    "morales",
    "expecting",
    "run",
    "morales",
    "admin",
    "cli",
    "check",
    "dot",
    "env",
    "file",
    "morales",
    "api",
    "key",
    "copy",
    "right",
    "morales",
    "api",
    "secret",
    "copy",
    "paste",
    "right",
    "reason",
    "capital",
    "next",
    "public",
    "going",
    "part",
    "front",
    "end",
    "piece",
    "keys",
    "using",
    "back",
    "end",
    "test",
    "local",
    "dev",
    "chain",
    "connection",
    "need",
    "next",
    "public",
    "going",
    "leave",
    "like",
    "hit",
    "run",
    "yarn",
    "morales",
    "sync",
    "going",
    "prompt",
    "time",
    "gon",
    "na",
    "say",
    "starting",
    "connection",
    "hard",
    "hat",
    "see",
    "starting",
    "connection",
    "hard",
    "hat",
    "bit",
    "come",
    "back",
    "servers",
    "go",
    "dev",
    "chain",
    "proxy",
    "servers",
    "hit",
    "disconnected",
    "button",
    "refresh",
    "see",
    "connected",
    "successfully",
    "connected",
    "heart",
    "add",
    "node",
    "running",
    "morales",
    "server",
    "awesome",
    "fact",
    "sit",
    "heart",
    "terminal",
    "see",
    "actual",
    "rpc",
    "calls",
    "blockchain",
    "see",
    "morales",
    "consistently",
    "calling",
    "f",
    "block",
    "number",
    "make",
    "sure",
    "date",
    "tell",
    "morale",
    "server",
    "start",
    "listening",
    "events",
    "well",
    "two",
    "ways",
    "first",
    "way",
    "user",
    "interface",
    "go",
    "view",
    "details",
    "go",
    "sync",
    "right",
    "says",
    "sync",
    "services",
    "installed",
    "hit",
    "add",
    "new",
    "sync",
    "see",
    "sync",
    "watch",
    "address",
    "sync",
    "watch",
    "contract",
    "events",
    "watch",
    "address",
    "transactions",
    "watch",
    "address",
    "events",
    "manually",
    "add",
    "information",
    "select",
    "chain",
    "description",
    "decide",
    "want",
    "optionally",
    "sync",
    "historical",
    "could",
    "put",
    "topic",
    "event",
    "abi",
    "event",
    "address",
    "event",
    "filter",
    "table",
    "name",
    "could",
    "programmatically",
    "going",
    "create",
    "little",
    "script",
    "run",
    "tell",
    "morale",
    "server",
    "watch",
    "scripts",
    "see",
    "database",
    "get",
    "upgraded",
    "listen",
    "events",
    "back",
    "code",
    "going",
    "create",
    "new",
    "file",
    "called",
    "add",
    "events",
    "jas",
    "one",
    "terminal",
    "running",
    "front",
    "end",
    "one",
    "terminal",
    "running",
    "blockchain",
    "one",
    "terminal",
    "syncing",
    "blockchain",
    "morass",
    "going",
    "another",
    "terminal",
    "anything",
    "else",
    "want",
    "like",
    "run",
    "little",
    "scripts",
    "become",
    "morales",
    "docks",
    "click",
    "connect",
    "sdk",
    "ton",
    "different",
    "ways",
    "actually",
    "connect",
    "sdk",
    "already",
    "learned",
    "connect",
    "react",
    "using",
    "react",
    "morales",
    "going",
    "connect",
    "js",
    "since",
    "going",
    "run",
    "little",
    "morales",
    "script",
    "like",
    "little",
    "example",
    "looks",
    "like",
    "documentation",
    "gon",
    "na",
    "go",
    "ahead",
    "gon",
    "na",
    "say",
    "const",
    "morales",
    "equals",
    "require",
    "oralis",
    "slash",
    "node",
    "going",
    "import",
    "node",
    "extension",
    "morales",
    "package",
    "script",
    "going",
    "require",
    "dot",
    "env",
    "dot",
    "config",
    "means",
    "going",
    "need",
    "install",
    "dot",
    "env",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "dot",
    "env",
    "tell",
    "morale",
    "server",
    "information",
    "would",
    "need",
    "tell",
    "user",
    "interface",
    "one",
    "first",
    "things",
    "going",
    "need",
    "address",
    "contract",
    "gon",
    "na",
    "need",
    "say",
    "const",
    "contract",
    "address",
    "equals",
    "go",
    "oh",
    "well",
    "get",
    "contract",
    "address",
    "easy",
    "way",
    "go",
    "back",
    "running",
    "blockchain",
    "grab",
    "nfc",
    "marketplace",
    "deployed",
    "similar",
    "smart",
    "contract",
    "lottery",
    "created",
    "update",
    "front",
    "end",
    "script",
    "gon",
    "na",
    "exact",
    "thing",
    "back",
    "heart",
    "hat",
    "nft",
    "marketplace",
    "code",
    "go",
    "deploy",
    "script",
    "deploy",
    "folder",
    "gon",
    "na",
    "create",
    "new",
    "file",
    "called",
    "99",
    "dash",
    "update",
    "front",
    "end",
    "dot",
    "j",
    "gon",
    "na",
    "create",
    "little",
    "bit",
    "deploy",
    "process",
    "automatically",
    "update",
    "front",
    "end",
    "grab",
    "network",
    "address",
    "file",
    "programmatically",
    "created",
    "gon",
    "na",
    "module",
    "dot",
    "exports",
    "equals",
    "async",
    "function",
    "say",
    "process",
    "dot",
    "emv",
    "update",
    "front",
    "end",
    "console",
    "dot",
    "log",
    "updating",
    "front",
    "end",
    "dot",
    "emv",
    "update",
    "front",
    "end",
    "equals",
    "true",
    "decide",
    "whether",
    "actually",
    "want",
    "update",
    "front",
    "end",
    "create",
    "function",
    "called",
    "date",
    "contract",
    "addresses",
    "await",
    "update",
    "contract",
    "addresses",
    "front",
    "end",
    "let",
    "make",
    "function",
    "async",
    "function",
    "update",
    "contract",
    "addresses",
    "make",
    "sure",
    "spelled",
    "say",
    "const",
    "nft",
    "market",
    "place",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "yes",
    "need",
    "import",
    "const",
    "ethers",
    "equals",
    "require",
    "hardhat",
    "grab",
    "nft",
    "market",
    "place",
    "going",
    "want",
    "write",
    "files",
    "someplace",
    "front",
    "end",
    "code",
    "us",
    "going",
    "new",
    "folder",
    "constants",
    "going",
    "create",
    "new",
    "file",
    "called",
    "network",
    "mapping",
    "dot",
    "json",
    "json",
    "object",
    "keeps",
    "track",
    "deployments",
    "deploy",
    "something",
    "rink",
    "v",
    "chain",
    "keep",
    "list",
    "keep",
    "list",
    "say",
    "nft",
    "marketplace",
    "keep",
    "list",
    "addresses",
    "iot",
    "marketplace",
    "comma",
    "basic",
    "nf",
    "right",
    "list",
    "right",
    "anything",
    "deployed",
    "empty",
    "json",
    "object",
    "back",
    "deploy",
    "script",
    "hard",
    "hat",
    "nft",
    "marketplace",
    "project",
    "going",
    "keep",
    "track",
    "location",
    "right",
    "top",
    "gon",
    "na",
    "say",
    "const",
    "front",
    "contracts",
    "file",
    "equals",
    "place",
    "according",
    "file",
    "setup",
    "cd",
    "dot",
    "dot",
    "slash",
    "next",
    "js",
    "nft",
    "marketplace",
    "free",
    "code",
    "camp",
    "constants",
    "network",
    "mapping",
    "dot",
    "json",
    "mine",
    "going",
    "want",
    "put",
    "wherever",
    "location",
    "relation",
    "heart",
    "mt",
    "marketplace",
    "free",
    "code",
    "camp",
    "front",
    "end",
    "contract",
    "file",
    "going",
    "right",
    "going",
    "get",
    "chain",
    "id",
    "gon",
    "na",
    "say",
    "const",
    "chain",
    "id",
    "equals",
    "network",
    "dot",
    "config",
    "dot",
    "chain",
    "string",
    "going",
    "need",
    "import",
    "network",
    "hard",
    "hat",
    "well",
    "going",
    "want",
    "read",
    "network",
    "mapping",
    "file",
    "see",
    "currently",
    "say",
    "const",
    "contract",
    "addresses",
    "equals",
    "gon",
    "na",
    "json",
    "dot",
    "parse",
    "fs",
    "dot",
    "read",
    "file",
    "sync",
    "front",
    "front",
    "contracts",
    "file",
    "comma",
    "utf",
    "eight",
    "gon",
    "na",
    "say",
    "chain",
    "id",
    "contract",
    "addresses",
    "let",
    "say",
    "list",
    "contract",
    "addresses",
    "include",
    "marketplace",
    "added",
    "gon",
    "na",
    "say",
    "contract",
    "addresses",
    "chain",
    "id",
    "nft",
    "marketplace",
    "say",
    "dot",
    "includes",
    "nf",
    "market",
    "mar",
    "get",
    "place",
    "dot",
    "address",
    "say",
    "contract",
    "address",
    "says",
    "chain",
    "id",
    "nft",
    "marketplace",
    "dot",
    "push",
    "nft",
    "marketplace",
    "dot",
    "address",
    "else",
    "gon",
    "na",
    "say",
    "contract",
    "address",
    "says",
    "chain",
    "id",
    "nft",
    "marketplace",
    "going",
    "new",
    "entry",
    "equals",
    "nft",
    "market",
    "market",
    "place",
    "dot",
    "address",
    "updated",
    "contract",
    "addresses",
    "object",
    "need",
    "write",
    "back",
    "network",
    "mapping",
    "gon",
    "na",
    "say",
    "fs",
    "dot",
    "right",
    "file",
    "sync",
    "front",
    "contracts",
    "file",
    "comma",
    "json",
    "dot",
    "string",
    "five",
    "contract",
    "addresses",
    "bottom",
    "module",
    "dot",
    "exports",
    "dot",
    "tags",
    "equals",
    "say",
    "front",
    "end",
    "run",
    "update",
    "front",
    "end",
    "script",
    "yarn",
    "hardhat",
    "deploy",
    "dashed",
    "dash",
    "network",
    "localhost",
    "want",
    "update",
    "front",
    "end",
    "script",
    "say",
    "dash",
    "dash",
    "tags",
    "front",
    "end",
    "run",
    "ran",
    "error",
    "fs",
    "defined",
    "oh",
    "forgot",
    "const",
    "fs",
    "equals",
    "require",
    "fs",
    "stride",
    "set",
    "properties",
    "undefined",
    "nft",
    "marketplace",
    "oops",
    "line",
    "instead",
    "line",
    "sorry",
    "basically",
    "right",
    "saying",
    "saying",
    "hey",
    "nft",
    "marketplace",
    "thing",
    "exist",
    "need",
    "make",
    "exists",
    "say",
    "contract",
    "addresses",
    "chain",
    "id",
    "equals",
    "new",
    "entry",
    "nft",
    "marketplace",
    "adds",
    "first",
    "parameter",
    "going",
    "nf",
    "mark",
    "gets",
    "placed",
    "dot",
    "address",
    "like",
    "run",
    "updating",
    "front",
    "end",
    "looks",
    "like",
    "done",
    "go",
    "back",
    "front",
    "end",
    "see",
    "entry",
    "localhost",
    "nfc",
    "marketplace",
    "address",
    "network",
    "mapping",
    "dot",
    "json",
    "correctly",
    "get",
    "hard",
    "time",
    "course",
    "go",
    "ahead",
    "hard",
    "coded",
    "highly",
    "recommend",
    "programmatically",
    "life",
    "going",
    "lot",
    "better",
    "cool",
    "update",
    "front",
    "end",
    "script",
    "works",
    "put",
    "back",
    "side",
    "let",
    "keep",
    "going",
    "network",
    "mapping",
    "file",
    "contract",
    "addresses",
    "based",
    "chain",
    "id",
    "pull",
    "well",
    "say",
    "const",
    "contract",
    "address",
    "says",
    "equals",
    "require",
    "dot",
    "slash",
    "constants",
    "slash",
    "network",
    "mapping",
    "dot",
    "json",
    "get",
    "contract",
    "address",
    "based",
    "chain",
    "id",
    "say",
    "chain",
    "id",
    "equals",
    "process",
    "dot",
    "e",
    "v",
    "dot",
    "chain",
    "id",
    "data",
    "v",
    "make",
    "new",
    "entry",
    "called",
    "chain",
    "id",
    "get",
    "contract",
    "address",
    "saying",
    "contract",
    "address",
    "equals",
    "contract",
    "addresses",
    "chain",
    "id",
    "n",
    "f",
    "mark",
    "get",
    "place",
    "zero",
    "going",
    "go",
    "network",
    "mapping",
    "go",
    "chain",
    "id",
    "go",
    "nft",
    "marketplace",
    "get",
    "recently",
    "deployed",
    "nft",
    "marketplace",
    "boom",
    "contract",
    "address",
    "contract",
    "address",
    "says",
    "excuse",
    "add",
    "events",
    "create",
    "new",
    "function",
    "kind",
    "similar",
    "async",
    "function",
    "main",
    "main",
    "function",
    "course",
    "going",
    "copy",
    "paste",
    "main",
    "script",
    "thing",
    "whole",
    "time",
    "domain",
    "dot",
    "catch",
    "blah",
    "blah",
    "blah",
    "go",
    "back",
    "morass",
    "documentation",
    "though",
    "see",
    "going",
    "need",
    "grab",
    "server",
    "url",
    "app",
    "id",
    "master",
    "key",
    "start",
    "gon",
    "na",
    "exact",
    "thing",
    "sorry",
    "even",
    "get",
    "main",
    "main",
    "function",
    "want",
    "say",
    "const",
    "server",
    "url",
    "equals",
    "grab",
    "web",
    "say",
    "process",
    "web",
    "dot",
    "next",
    "public",
    "morales",
    "server",
    "url",
    "get",
    "app",
    "id",
    "equals",
    "process",
    "studien",
    "v",
    "dot",
    "next",
    "public",
    "morales",
    "app",
    "id",
    "say",
    "const",
    "master",
    "key",
    "equals",
    "process",
    "study",
    "v",
    "dot",
    "master",
    "key",
    "master",
    "key",
    "yet",
    "create",
    "new",
    "one",
    "called",
    "master",
    "key",
    "go",
    "back",
    "morales",
    "front",
    "end",
    "close",
    "hit",
    "view",
    "details",
    "grab",
    "master",
    "key",
    "copy",
    "go",
    "back",
    "code",
    "editor",
    "paste",
    "master",
    "key",
    "web",
    "well",
    "want",
    "master",
    "key",
    "front",
    "end",
    "going",
    "put",
    "next",
    "public",
    "like",
    "first",
    "thing",
    "going",
    "main",
    "function",
    "going",
    "await",
    "morales",
    "dot",
    "start",
    "server",
    "url",
    "app",
    "id",
    "master",
    "key",
    "input",
    "parameters",
    "little",
    "console",
    "dot",
    "log",
    "working",
    "contract",
    "address",
    "contract",
    "address",
    "gon",
    "na",
    "go",
    "ahead",
    "add",
    "pieces",
    "see",
    "ui",
    "events",
    "want",
    "listen",
    "well",
    "go",
    "back",
    "code",
    "nft",
    "marketplace",
    "type",
    "event",
    "item",
    "listed",
    "item",
    "bought",
    "item",
    "cancelled",
    "three",
    "events",
    "want",
    "listen",
    "morales",
    "add",
    "new",
    "events",
    "synced",
    "code",
    "basically",
    "going",
    "following",
    "need",
    "obviously",
    "start",
    "create",
    "options",
    "event",
    "chain",
    "address",
    "topic",
    "abi",
    "elimite",
    "table",
    "name",
    "sync",
    "historical",
    "morales",
    "dot",
    "cloud",
    "dot",
    "run",
    "watch",
    "cloud",
    "event",
    "options",
    "use",
    "master",
    "key",
    "pretty",
    "much",
    "going",
    "follow",
    "documents",
    "code",
    "let",
    "start",
    "item",
    "listed",
    "let",
    "create",
    "options",
    "ided",
    "listed",
    "event",
    "say",
    "let",
    "item",
    "listed",
    "options",
    "could",
    "const",
    "want",
    "gon",
    "na",
    "let",
    "item",
    "listed",
    "options",
    "equals",
    "first",
    "gon",
    "na",
    "need",
    "chain",
    "id",
    "getting",
    "morales",
    "first",
    "thing",
    "point",
    "chain",
    "id",
    "ralis",
    "understands",
    "local",
    "chain",
    "even",
    "31337",
    "local",
    "development",
    "got",
    "switch",
    "going",
    "make",
    "another",
    "variable",
    "called",
    "morales",
    "chain",
    "id",
    "going",
    "say",
    "let",
    "morales",
    "chain",
    "id",
    "equals",
    "chain",
    "id",
    "equals",
    "question",
    "mark",
    "otherwise",
    "chain",
    "id",
    "saying",
    "since",
    "morales",
    "understands",
    "local",
    "dev",
    "going",
    "1337",
    "going",
    "say",
    "chain",
    "id",
    "equals",
    "morales",
    "chain",
    "id",
    "equal",
    "otherwise",
    "equal",
    "whatever",
    "whatever",
    "chain",
    "ideas",
    "dot",
    "env",
    "decide",
    "okay",
    "want",
    "rink",
    "b",
    "localhost",
    "main",
    "net",
    "etc",
    "gon",
    "na",
    "say",
    "okay",
    "chain",
    "id",
    "morass",
    "morales",
    "chain",
    "id",
    "comma",
    "say",
    "else",
    "need",
    "chain",
    "id",
    "gon",
    "na",
    "skip",
    "description",
    "sync",
    "historical",
    "hit",
    "sync",
    "historical",
    "allows",
    "node",
    "go",
    "back",
    "throughout",
    "blockchain",
    "grab",
    "events",
    "ever",
    "emitted",
    "contract",
    "since",
    "small",
    "local",
    "blockchain",
    "say",
    "sync",
    "historical",
    "true",
    "like",
    "okay",
    "else",
    "need",
    "okay",
    "need",
    "topic",
    "topic",
    "going",
    "event",
    "information",
    "get",
    "topic",
    "go",
    "back",
    "event",
    "code",
    "topic",
    "gon",
    "na",
    "name",
    "event",
    "plus",
    "type",
    "parameters",
    "gon",
    "na",
    "go",
    "back",
    "code",
    "gon",
    "na",
    "go",
    "back",
    "gon",
    "na",
    "say",
    "topic",
    "going",
    "item",
    "listed",
    "takes",
    "address",
    "address",
    "address",
    "went",
    "56",
    "unt",
    "256",
    "address",
    "address",
    "interviewed",
    "six",
    "youtube",
    "six",
    "problems",
    "seem",
    "like",
    "also",
    "need",
    "api",
    "event",
    "find",
    "go",
    "back",
    "hard",
    "hat",
    "project",
    "go",
    "artifacts",
    "go",
    "contracts",
    "marketplace",
    "dot",
    "soul",
    "nft",
    "marketplace",
    "dot",
    "json",
    "abi",
    "starting",
    "going",
    "abi",
    "whole",
    "contract",
    "want",
    "item",
    "listed",
    "event",
    "ctrl",
    "f",
    "found",
    "going",
    "grab",
    "right",
    "says",
    "type",
    "event",
    "going",
    "copy",
    "going",
    "scroll",
    "write",
    "anonymous",
    "false",
    "right",
    "bit",
    "describes",
    "abi",
    "event",
    "internal",
    "type",
    "address",
    "name",
    "seller",
    "type",
    "address",
    "address",
    "token",
    "id",
    "price",
    "item",
    "listed",
    "right",
    "going",
    "abi",
    "item",
    "listed",
    "event",
    "take",
    "stick",
    "hit",
    "save",
    "mine",
    "auto",
    "format",
    "get",
    "rid",
    "parentheses",
    "okay",
    "else",
    "need",
    "topic",
    "abi",
    "already",
    "address",
    "going",
    "filter",
    "need",
    "table",
    "name",
    "going",
    "new",
    "line",
    "say",
    "table",
    "name",
    "going",
    "item",
    "listed",
    "going",
    "name",
    "table",
    "update",
    "database",
    "gon",
    "na",
    "get",
    "new",
    "table",
    "called",
    "item",
    "listed",
    "gon",
    "na",
    "filled",
    "information",
    "item",
    "listed",
    "event",
    "right",
    "would",
    "hit",
    "confirm",
    "ui",
    "since",
    "hit",
    "save",
    "one",
    "events",
    "want",
    "events",
    "let",
    "item",
    "bought",
    "say",
    "let",
    "item",
    "bought",
    "options",
    "equals",
    "repeat",
    "process",
    "stuff",
    "top",
    "gon",
    "na",
    "chain",
    "gon",
    "na",
    "sync",
    "historical",
    "gon",
    "na",
    "grab",
    "two",
    "paste",
    "item",
    "topic",
    "going",
    "different",
    "topic",
    "going",
    "item",
    "bot",
    "name",
    "event",
    "going",
    "take",
    "address",
    "address",
    "un",
    "256",
    "un",
    "abi",
    "going",
    "different",
    "gon",
    "na",
    "go",
    "hardhead",
    "nft",
    "marketplace",
    "look",
    "bot",
    "find",
    "event",
    "copy",
    "go",
    "back",
    "paste",
    "item",
    "bot",
    "give",
    "table",
    "name",
    "item",
    "bot",
    "one",
    "let",
    "item",
    "cancelled",
    "options",
    "equals",
    "chain",
    "id",
    "going",
    "rouse",
    "chain",
    "id",
    "gon",
    "na",
    "boilerplate",
    "top",
    "address",
    "contract",
    "address",
    "topic",
    "going",
    "different",
    "topic",
    "called",
    "item",
    "cancelled",
    "takes",
    "address",
    "address",
    "unt",
    "256",
    "say",
    "sync",
    "historical",
    "true",
    "historical",
    "true",
    "need",
    "abi",
    "go",
    "back",
    "hard",
    "hat",
    "compile",
    "information",
    "look",
    "item",
    "cancelled",
    "grab",
    "abi",
    "event",
    "copy",
    "come",
    "back",
    "running",
    "code",
    "pasted",
    "oops",
    "give",
    "item",
    "canceled",
    "let",
    "give",
    "item",
    "canceled",
    "table",
    "name",
    "item",
    "canceled",
    "zoom",
    "hair",
    "item",
    "cancelled",
    "options",
    "item",
    "bought",
    "options",
    "item",
    "listed",
    "options",
    "telling",
    "ross",
    "hey",
    "listen",
    "events",
    "whenever",
    "hear",
    "item",
    "canceled",
    "event",
    "stick",
    "stuff",
    "database",
    "whenever",
    "hear",
    "item",
    "bought",
    "event",
    "stick",
    "database",
    "whenever",
    "emits",
    "item",
    "listed",
    "stick",
    "database",
    "read",
    "indexing",
    "events",
    "query",
    "much",
    "easier",
    "send",
    "server",
    "say",
    "const",
    "listed",
    "response",
    "equals",
    "await",
    "alice",
    "alice",
    "dot",
    "cloud",
    "dot",
    "run",
    "watch",
    "contract",
    "event",
    "pass",
    "item",
    "listed",
    "options",
    "one",
    "comma",
    "pass",
    "object",
    "gon",
    "na",
    "say",
    "use",
    "master",
    "key",
    "going",
    "true",
    "thing",
    "say",
    "const",
    "bot",
    "response",
    "passing",
    "bot",
    "item",
    "options",
    "say",
    "bot",
    "response",
    "equals",
    "await",
    "else",
    "dot",
    "cloud",
    "dot",
    "run",
    "watch",
    "contract",
    "event",
    "comma",
    "item",
    "bought",
    "options",
    "comma",
    "use",
    "master",
    "key",
    "going",
    "true",
    "finally",
    "kant",
    "canceled",
    "response",
    "equals",
    "await",
    "oralis",
    "dot",
    "cloud",
    "dot",
    "run",
    "watch",
    "contract",
    "event",
    "comma",
    "item",
    "canceled",
    "options",
    "comma",
    "use",
    "master",
    "key",
    "going",
    "true",
    "morales",
    "dot",
    "cloud",
    "dot",
    "run",
    "api",
    "call",
    "server",
    "making",
    "going",
    "return",
    "response",
    "let",
    "look",
    "docs",
    "actually",
    "see",
    "response",
    "looks",
    "like",
    "worked",
    "well",
    "terminal",
    "see",
    "success",
    "true",
    "return",
    "getting",
    "api",
    "make",
    "sure",
    "everything",
    "goes",
    "well",
    "listed",
    "response",
    "dot",
    "success",
    "getting",
    "success",
    "object",
    "rails",
    "server",
    "console",
    "dot",
    "log",
    "success",
    "database",
    "updated",
    "watching",
    "events",
    "else",
    "say",
    "console",
    "dot",
    "log",
    "something",
    "went",
    "wrong",
    "duck",
    "course",
    "looking",
    "let",
    "say",
    "response",
    "dot",
    "success",
    "true",
    "also",
    "want",
    "canceled",
    "response",
    "success",
    "bots",
    "response",
    "successful",
    "say",
    "hey",
    "otherwise",
    "say",
    "hey",
    "something",
    "went",
    "wrong",
    "going",
    "programmatically",
    "tell",
    "server",
    "database",
    "listen",
    "events",
    "await",
    "murata",
    "clodagh",
    "run",
    "watch",
    "contract",
    "events",
    "pass",
    "object",
    "parameters",
    "flags",
    "send",
    "put",
    "next",
    "public",
    "morales",
    "server",
    "url",
    "dmv",
    "next",
    "public",
    "server",
    "url",
    "let",
    "change",
    "name",
    "looks",
    "like",
    "server",
    "url",
    "wrong",
    "app",
    "id",
    "name",
    "also",
    "wrong",
    "let",
    "fix",
    "next",
    "public",
    "app",
    "id",
    "master",
    "key",
    "looks",
    "correct",
    "okay",
    "cool",
    "let",
    "know",
    "things",
    "right",
    "alice",
    "like",
    "cada",
    "run",
    "rasta",
    "cloud",
    "run",
    "run",
    "database",
    "hit",
    "refresh",
    "right",
    "see",
    "tables",
    "run",
    "add",
    "call",
    "server",
    "tell",
    "hey",
    "need",
    "add",
    "tables",
    "need",
    "start",
    "listening",
    "events",
    "new",
    "terminal",
    "going",
    "run",
    "add",
    "events",
    "going",
    "make",
    "terminal",
    "nice",
    "big",
    "something",
    "goes",
    "wrong",
    "little",
    "frustrating",
    "figure",
    "fix",
    "run",
    "issue",
    "something",
    "working",
    "expected",
    "please",
    "use",
    "github",
    "repo",
    "associated",
    "course",
    "also",
    "morales",
    "forum",
    "stack",
    "exchange",
    "etherium",
    "going",
    "run",
    "node",
    "add",
    "events",
    "dot",
    "j",
    "hit",
    "enter",
    "okay",
    "boom",
    "see",
    "success",
    "database",
    "updated",
    "watching",
    "events",
    "ran",
    "issue",
    "rerun",
    "gets",
    "something",
    "went",
    "wrong",
    "chance",
    "could",
    "still",
    "correct",
    "right",
    "returns",
    "false",
    "returns",
    "issue",
    "already",
    "table",
    "go",
    "back",
    "database",
    "hit",
    "refresh",
    "see",
    "item",
    "bought",
    "item",
    "canceled",
    "item",
    "listed",
    "database",
    "see",
    "hitting",
    "drop",
    "server",
    "hitting",
    "dashboard",
    "also",
    "see",
    "event",
    "sync",
    "status",
    "database",
    "knows",
    "needs",
    "listening",
    "events",
    "got",
    "information",
    "listen",
    "events",
    "cool",
    "listening",
    "events",
    "fantastic",
    "means",
    "database",
    "listening",
    "blockchain",
    "node",
    "listening",
    "events",
    "listening",
    "item",
    "listed",
    "item",
    "bought",
    "item",
    "cancelled",
    "events",
    "let",
    "go",
    "ahead",
    "test",
    "back",
    "hardhat",
    "nft",
    "marketplace",
    "free",
    "code",
    "camp",
    "window",
    "scripts",
    "one",
    "mint",
    "list",
    "went",
    "new",
    "nft",
    "listed",
    "marketplace",
    "list",
    "nf",
    "well",
    "mirallas",
    "database",
    "hear",
    "item",
    "listed",
    "event",
    "go",
    "ahead",
    "stick",
    "item",
    "listed",
    "table",
    "made",
    "us",
    "test",
    "let",
    "open",
    "terminal",
    "hardhead",
    "nft",
    "marketplace",
    "repo",
    "run",
    "minton",
    "list",
    "localhost",
    "actually",
    "run",
    "sure",
    "hard",
    "hat",
    "node",
    "synced",
    "morales",
    "server",
    "order",
    "database",
    "actually",
    "grab",
    "event",
    "local",
    "hard",
    "hat",
    "node",
    "needs",
    "connected",
    "yarn",
    "hard",
    "hat",
    "run",
    "scripts",
    "mint",
    "dash",
    "dash",
    "network",
    "localhost",
    "let",
    "enter",
    "okay",
    "minting",
    "approving",
    "listing",
    "listed",
    "flip",
    "back",
    "database",
    "quick",
    "refresh",
    "know",
    "see",
    "indeed",
    "item",
    "listed",
    "events",
    "database",
    "see",
    "information",
    "tool",
    "see",
    "block",
    "hash",
    "timestamp",
    "see",
    "token",
    "id",
    "listed",
    "see",
    "price",
    "listing",
    "transaction",
    "hash",
    "see",
    "information",
    "event",
    "database",
    "us",
    "query",
    "reached",
    "point",
    "successfully",
    "set",
    "indexer",
    "morales",
    "database",
    "super",
    "pumped",
    "really",
    "powerful",
    "getting",
    "advanced",
    "starting",
    "advanced",
    "stuff",
    "made",
    "far",
    "huge",
    "congrats",
    "already",
    "really",
    "cool",
    "troubleshooting",
    "help",
    "run",
    "many",
    "times",
    "let",
    "say",
    "left",
    "project",
    "killed",
    "heart",
    "hit",
    "note",
    "going",
    "kill",
    "right",
    "stopped",
    "heart",
    "node",
    "come",
    "back",
    "morales",
    "admin",
    "going",
    "view",
    "details",
    "dev",
    "chain",
    "proxy",
    "server",
    "disconnected",
    "hit",
    "little",
    "refresh",
    "disconnected",
    "course",
    "running",
    "heart",
    "headnote",
    "anymore",
    "restart",
    "node",
    "note",
    "restarted",
    "connects",
    "local",
    "dev",
    "chain",
    "command",
    "still",
    "running",
    "fresh",
    "say",
    "connected",
    "great",
    "however",
    "go",
    "back",
    "blockchain",
    "go",
    "back",
    "hard",
    "hat",
    "nfc",
    "marketplace",
    "script",
    "run",
    "yarn",
    "hard",
    "hat",
    "script",
    "mint",
    "list",
    "network",
    "localhost",
    "go",
    "back",
    "database",
    "refresh",
    "see",
    "item",
    "listed",
    "mirallas",
    "server",
    "looking",
    "make",
    "sure",
    "blockchain",
    "working",
    "one",
    "reset",
    "blockchain",
    "like",
    "right",
    "canceled",
    "reset",
    "database",
    "gon",
    "na",
    "get",
    "really",
    "confused",
    "hit",
    "reset",
    "local",
    "chain",
    "reset",
    "local",
    "chain",
    "want",
    "make",
    "sure",
    "new",
    "local",
    "chain",
    "running",
    "connected",
    "hit",
    "reset",
    "local",
    "chain",
    "tell",
    "ross",
    "hey",
    "reset",
    "chain",
    "okay",
    "please",
    "continue",
    "hit",
    "reset",
    "local",
    "chain",
    "going",
    "see",
    "item",
    "listed",
    "however",
    "go",
    "back",
    "rerun",
    "mint",
    "list",
    "network",
    "local",
    "host",
    "reset",
    "local",
    "chain",
    "go",
    "back",
    "morales",
    "database",
    "hit",
    "refresh",
    "see",
    "new",
    "one",
    "gotten",
    "anytime",
    "stopped",
    "hard",
    "hat",
    "note",
    "anytime",
    "reset",
    "hard",
    "hat",
    "node",
    "takeaway",
    "going",
    "need",
    "go",
    "view",
    "details",
    "dev",
    "chain",
    "proxy",
    "server",
    "reset",
    "local",
    "chain",
    "programmatically",
    "well",
    "going",
    "go",
    "programmatically",
    "might",
    "something",
    "want",
    "add",
    "hard",
    "hat",
    "deploy",
    "thing",
    "note",
    "clear",
    "last",
    "event",
    "right",
    "last",
    "event",
    "go",
    "one",
    "minute",
    "list",
    "completes",
    "another",
    "event",
    "okay",
    "great",
    "said",
    "reason",
    "first",
    "place",
    "start",
    "listening",
    "events",
    "show",
    "recent",
    "listen",
    "entity",
    "database",
    "listed",
    "entities",
    "could",
    "could",
    "query",
    "item",
    "listed",
    "table",
    "right",
    "grab",
    "everything",
    "however",
    "issue",
    "happens",
    "someone",
    "buys",
    "nft",
    "someone",
    "buys",
    "nf",
    "item",
    "listed",
    "event",
    "still",
    "database",
    "technically",
    "wo",
    "marketplace",
    "anymore",
    "gone",
    "wo",
    "listed",
    "number",
    "architectural",
    "choices",
    "make",
    "get",
    "around",
    "problem",
    "solve",
    "problem",
    "one",
    "things",
    "actually",
    "use",
    "mirallas",
    "cloud",
    "functions",
    "morales",
    "cloud",
    "functions",
    "allow",
    "us",
    "really",
    "add",
    "anything",
    "want",
    "front",
    "end",
    "morale",
    "server",
    "functions",
    "scripts",
    "going",
    "run",
    "morale",
    "server",
    "whenever",
    "want",
    "go",
    "server",
    "hit",
    "little",
    "drop",
    "hit",
    "cloud",
    "functions",
    "write",
    "somewhere",
    "else",
    "stuff",
    "run",
    "server",
    "whenever",
    "want",
    "going",
    "set",
    "cloud",
    "functions",
    "ide",
    "hitting",
    "little",
    "drop",
    "done",
    "actually",
    "sync",
    "visual",
    "studio",
    "code",
    "cloud",
    "functions",
    "run",
    "command",
    "add",
    "whatever",
    "cloud",
    "functions",
    "cloud",
    "folder",
    "back",
    "vs",
    "code",
    "let",
    "make",
    "new",
    "folder",
    "new",
    "folder",
    "called",
    "cloud",
    "functions",
    "create",
    "new",
    "file",
    "called",
    "update",
    "active",
    "write",
    "something",
    "like",
    "console",
    "dot",
    "log",
    "hi",
    "actually",
    "automatically",
    "saved",
    "morale",
    "server",
    "way",
    "running",
    "command",
    "want",
    "make",
    "lot",
    "easier",
    "us",
    "run",
    "command",
    "always",
    "run",
    "massive",
    "thing",
    "going",
    "going",
    "open",
    "package",
    "json",
    "going",
    "make",
    "another",
    "morales",
    "script",
    "right",
    "going",
    "make",
    "another",
    "morales",
    "script",
    "gon",
    "na",
    "say",
    "morales",
    "morales",
    "cloud",
    "going",
    "run",
    "command",
    "going",
    "copy",
    "command",
    "paste",
    "package",
    "json",
    "going",
    "morales",
    "admin",
    "cli",
    "watch",
    "cloud",
    "folder",
    "need",
    "morales",
    "api",
    "key",
    "grab",
    "environment",
    "variables",
    "need",
    "rouse",
    "secret",
    "grab",
    "environment",
    "variables",
    "need",
    "morale",
    "subdomain",
    "autosave",
    "one",
    "morales",
    "cloud",
    "folder",
    "going",
    "new",
    "cloud",
    "functions",
    "bid",
    "made",
    "slash",
    "cloud",
    "functions",
    "functions",
    "new",
    "terminal",
    "run",
    "yarn",
    "alice",
    "cloud",
    "going",
    "running",
    "huge",
    "function",
    "hit",
    "enter",
    "say",
    "compile",
    "know",
    "version",
    "blah",
    "blah",
    "compiling",
    "blah",
    "blah",
    "changes",
    "uploaded",
    "correctly",
    "go",
    "back",
    "front",
    "end",
    "see",
    "console",
    "dot",
    "log",
    "ky",
    "front",
    "end",
    "updated",
    "continue",
    "run",
    "update",
    "active",
    "items",
    "jas",
    "could",
    "also",
    "write",
    "console",
    "dot",
    "log",
    "save",
    "still",
    "running",
    "automatically",
    "upload",
    "see",
    "little",
    "refresh",
    "front",
    "end",
    "cloud",
    "functions",
    "see",
    "uploaded",
    "point",
    "ton",
    "stuff",
    "running",
    "might",
    "see",
    "cpu",
    "100",
    "percent",
    "might",
    "see",
    "little",
    "thing",
    "pop",
    "server",
    "might",
    "start",
    "going",
    "little",
    "bit",
    "slower",
    "starting",
    "use",
    "lot",
    "network",
    "activity",
    "going",
    "close",
    "yarn",
    "morales",
    "cloud",
    "going",
    "upload",
    "need",
    "connected",
    "listening",
    "events",
    "stuff",
    "start",
    "put",
    "lot",
    "load",
    "onto",
    "server",
    "gon",
    "na",
    "go",
    "ahead",
    "going",
    "cancel",
    "cpu",
    "lot",
    "lower",
    "go",
    "back",
    "cloud",
    "functions",
    "see",
    "still",
    "anytime",
    "update",
    "cloud",
    "functions",
    "update",
    "server",
    "cloud",
    "functions",
    "run",
    "darn",
    "morass",
    "cloud",
    "done",
    "anyways",
    "right",
    "trying",
    "figure",
    "okay",
    "item",
    "listed",
    "someone",
    "buys",
    "item",
    "technically",
    "wo",
    "listed",
    "anymore",
    "item",
    "listed",
    "table",
    "still",
    "listed",
    "create",
    "cloud",
    "function",
    "runs",
    "whenever",
    "want",
    "like",
    "said",
    "run",
    "whenever",
    "want",
    "call",
    "whenever",
    "want",
    "going",
    "create",
    "cloud",
    "function",
    "runs",
    "whenever",
    "one",
    "events",
    "synced",
    "item",
    "listed",
    "item",
    "cancelled",
    "item",
    "bought",
    "going",
    "create",
    "new",
    "table",
    "called",
    "active",
    "item",
    "active",
    "item",
    "going",
    "say",
    "okay",
    "anytime",
    "listed",
    "active",
    "bought",
    "cancelled",
    "remove",
    "active",
    "item",
    "list",
    "going",
    "create",
    "new",
    "table",
    "let",
    "go",
    "ahead",
    "started",
    "alice",
    "thought",
    "auditors",
    "need",
    "need",
    "import",
    "morales",
    "going",
    "upload",
    "cloud",
    "function",
    "server",
    "already",
    "automatically",
    "injects",
    "mirallas",
    "scripts",
    "gon",
    "na",
    "say",
    "morales",
    "dot",
    "cloud",
    "save",
    "whole",
    "bunch",
    "stuff",
    "morales",
    "cloud",
    "find",
    "documentation",
    "save",
    "keyword",
    "means",
    "anytime",
    "something",
    "gets",
    "saved",
    "table",
    "specify",
    "something",
    "takes",
    "two",
    "parameters",
    "takes",
    "table",
    "want",
    "something",
    "saved",
    "gon",
    "na",
    "say",
    "item",
    "listed",
    "saying",
    "anytime",
    "something",
    "saved",
    "item",
    "listed",
    "table",
    "run",
    "async",
    "function",
    "put",
    "request",
    "anytime",
    "something",
    "gets",
    "saved",
    "comes",
    "request",
    "anytime",
    "item",
    "listed",
    "happens",
    "want",
    "add",
    "active",
    "items",
    "list",
    "requests",
    "come",
    "flagged",
    "called",
    "confirmed",
    "say",
    "const",
    "confirmed",
    "every",
    "request",
    "every",
    "event",
    "actually",
    "gets",
    "triggered",
    "twice",
    "transaction",
    "goes",
    "triggers",
    "save",
    "transaction",
    "actually",
    "confirmed",
    "actually",
    "want",
    "update",
    "active",
    "item",
    "transaction",
    "actually",
    "confirmed",
    "say",
    "const",
    "confirmed",
    "equals",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "confirmed",
    "screening",
    "get",
    "confirmed",
    "attribute",
    "request",
    "also",
    "going",
    "make",
    "logger",
    "say",
    "const",
    "logger",
    "equals",
    "oralis",
    "dot",
    "cloud",
    "dot",
    "get",
    "logger",
    "see",
    "second",
    "actually",
    "write",
    "logs",
    "morales",
    "database",
    "logs",
    "thing",
    "logs",
    "add",
    "show",
    "minute",
    "console",
    "logger",
    "morales",
    "dot",
    "cloud",
    "get",
    "logger",
    "logger",
    "dot",
    "info",
    "looking",
    "confirmed",
    "x",
    "actually",
    "test",
    "right",
    "right",
    "actually",
    "test",
    "right",
    "logs",
    "see",
    "looking",
    "confirmed",
    "tx",
    "item",
    "listed",
    "saved",
    "test",
    "test",
    "logger",
    "actually",
    "working",
    "let",
    "run",
    "yarn",
    "yarn",
    "ross",
    "cloud",
    "update",
    "active",
    "items",
    "morale",
    "server",
    "changes",
    "uploaded",
    "correctly",
    "okay",
    "kill",
    "minton",
    "lists",
    "script",
    "let",
    "run",
    "minton",
    "list",
    "see",
    "server",
    "get",
    "logs",
    "go",
    "server",
    "little",
    "refresh",
    "look",
    "logs",
    "see",
    "looking",
    "confirmed",
    "tx",
    "server",
    "logs",
    "logs",
    "see",
    "see",
    "looking",
    "confirmed",
    "tx",
    "told",
    "actually",
    "triggers",
    "twice",
    "transaction",
    "first",
    "sent",
    "transaction",
    "confirmed",
    "aka",
    "block",
    "confirmations",
    "additionally",
    "look",
    "database",
    "item",
    "listed",
    "scroll",
    "way",
    "right",
    "see",
    "confirmed",
    "equals",
    "false",
    "want",
    "count",
    "item",
    "listed",
    "event",
    "interactive",
    "items",
    "confirmed",
    "true",
    "want",
    "actually",
    "want",
    "update",
    "scripts",
    "add",
    "one",
    "block",
    "confirmation",
    "top",
    "local",
    "hardhead",
    "blockchain",
    "changed",
    "confirmed",
    "get",
    "around",
    "usually",
    "mentalist",
    "script",
    "add",
    "new",
    "utility",
    "go",
    "utils",
    "new",
    "file",
    "create",
    "move",
    "utility",
    "use",
    "actually",
    "move",
    "blocks",
    "run",
    "heart",
    "hat",
    "node",
    "actually",
    "complete",
    "control",
    "want",
    "heart",
    "hat",
    "node",
    "actually",
    "manually",
    "mine",
    "nodes",
    "actually",
    "move",
    "blocks",
    "ahead",
    "morales",
    "knows",
    "oh",
    "okay",
    "transaction",
    "confirmed",
    "right",
    "mining",
    "block",
    "transaction",
    "ross",
    "going",
    "forever",
    "waiting",
    "next",
    "block",
    "want",
    "add",
    "functionality",
    "scripts",
    "mine",
    "block",
    "done",
    "keep",
    "mind",
    "mined",
    "like",
    "1000",
    "blocks",
    "ton",
    "blocks",
    "really",
    "quickly",
    "moorehouse",
    "might",
    "hard",
    "time",
    "indexing",
    "really",
    "want",
    "mined",
    "one",
    "time",
    "give",
    "enough",
    "time",
    "index",
    "block",
    "mined",
    "actually",
    "going",
    "build",
    "little",
    "script",
    "going",
    "manually",
    "mine",
    "using",
    "evm",
    "mine",
    "rpc",
    "method",
    "comes",
    "heart",
    "hat",
    "blockchain",
    "new",
    "move",
    "blocks",
    "script",
    "let",
    "go",
    "ahead",
    "make",
    "instead",
    "script",
    "going",
    "like",
    "main",
    "function",
    "bottom",
    "gon",
    "na",
    "utility",
    "going",
    "import",
    "scripts",
    "going",
    "need",
    "main",
    "function",
    "going",
    "need",
    "make",
    "async",
    "function",
    "call",
    "move",
    "blocks",
    "say",
    "amount",
    "going",
    "number",
    "blocks",
    "want",
    "move",
    "also",
    "put",
    "sleep",
    "amount",
    "default",
    "zero",
    "sleep",
    "amount",
    "going",
    "optional",
    "parameter",
    "want",
    "move",
    "blocks",
    "sleep",
    "maybe",
    "second",
    "blocks",
    "resemble",
    "real",
    "blockchain",
    "resemble",
    "real",
    "blockchain",
    "sleeping",
    "every",
    "time",
    "block",
    "moved",
    "kind",
    "waiting",
    "every",
    "time",
    "block",
    "moved",
    "move",
    "block",
    "scripts",
    "console",
    "dot",
    "log",
    "moving",
    "blocks",
    "dot",
    "dot",
    "say",
    "let",
    "index",
    "equals",
    "zero",
    "loop",
    "around",
    "amount",
    "call",
    "evm",
    "mine",
    "loop",
    "index",
    "less",
    "amount",
    "index",
    "plus",
    "plus",
    "weight",
    "network",
    "got",
    "import",
    "network",
    "oops",
    "got",
    "import",
    "network",
    "hard",
    "hat",
    "await",
    "network",
    "dot",
    "provider",
    "dot",
    "request",
    "going",
    "request",
    "method",
    "e",
    "v",
    "mime",
    "comma",
    "params",
    "going",
    "empty",
    "actually",
    "way",
    "make",
    "raw",
    "calls",
    "blockchain",
    "nodes",
    "lot",
    "ethers",
    "abstract",
    "hood",
    "making",
    "raw",
    "call",
    "evm",
    "mine",
    "obviously",
    "ca",
    "call",
    "evm",
    "mine",
    "real",
    "blockchain",
    "ca",
    "tell",
    "blockchain",
    "node",
    "mine",
    "next",
    "block",
    "since",
    "local",
    "hard",
    "hat",
    "node",
    "call",
    "vm",
    "gon",
    "na",
    "say",
    "sleep",
    "amount",
    "greater",
    "zero",
    "sleep",
    "mount",
    "also",
    "going",
    "script",
    "sleep",
    "wait",
    "short",
    "duration",
    "top",
    "actually",
    "going",
    "create",
    "new",
    "function",
    "called",
    "sleep",
    "going",
    "input",
    "time",
    "milliseconds",
    "going",
    "return",
    "new",
    "promise",
    "right",
    "remember",
    "order",
    "us",
    "wait",
    "time",
    "got",
    "use",
    "promises",
    "learned",
    "promise",
    "going",
    "take",
    "function",
    "resolve",
    "input",
    "parameter",
    "going",
    "say",
    "set",
    "timeout",
    "going",
    "resolve",
    "comma",
    "time",
    "way",
    "sleep",
    "javascript",
    "return",
    "new",
    "promise",
    "call",
    "set",
    "timeout",
    "function",
    "basically",
    "weights",
    "time",
    "milliseconds",
    "actually",
    "sleep",
    "say",
    "console",
    "dot",
    "log",
    "sleeping",
    "sleep",
    "amount",
    "await",
    "sleep",
    "sleep",
    "amount",
    "going",
    "milliseconds",
    "since",
    "sleep",
    "returns",
    "promise",
    "call",
    "await",
    "say",
    "okay",
    "wait",
    "sleep",
    "function",
    "finish",
    "sleep",
    "function",
    "going",
    "finish",
    "time",
    "ms",
    "time",
    "milliseconds",
    "finishes",
    "function",
    "called",
    "move",
    "blocks",
    "actually",
    "mined",
    "blocks",
    "local",
    "blockchain",
    "morales",
    "get",
    "block",
    "confirmation",
    "looking",
    "bottom",
    "module",
    "dot",
    "exports",
    "move",
    "blocks",
    "move",
    "blocks",
    "also",
    "export",
    "sleep",
    "well",
    "equals",
    "like",
    "back",
    "minton",
    "list",
    "top",
    "say",
    "const",
    "move",
    "blocks",
    "equals",
    "require",
    "dot",
    "dot",
    "slash",
    "utils",
    "slash",
    "move",
    "blocks",
    "also",
    "import",
    "network",
    "ethers",
    "network",
    "script",
    "right",
    "bottom",
    "say",
    "network",
    "dot",
    "config",
    "chain",
    "id",
    "equals",
    "equals",
    "31337",
    "await",
    "move",
    "blocks",
    "say",
    "move",
    "blocks",
    "also",
    "sleep",
    "amount",
    "equals",
    "wait",
    "one",
    "millisecond",
    "block",
    "mined",
    "sleep",
    "mount",
    "equals",
    "1000",
    "going",
    "one",
    "millisecond",
    "let",
    "even",
    "comment",
    "second",
    "run",
    "script",
    "live",
    "right",
    "pull",
    "yarn",
    "hard",
    "hat",
    "run",
    "scripts",
    "mentalist",
    "dash",
    "dash",
    "network",
    "local",
    "host",
    "move",
    "blocks",
    "move",
    "back",
    "front",
    "end",
    "refresh",
    "go",
    "look",
    "item",
    "listed",
    "scroll",
    "way",
    "right",
    "see",
    "confirmed",
    "true",
    "look",
    "logs",
    "would",
    "see",
    "logging",
    "item",
    "happened",
    "twice",
    "alright",
    "let",
    "uncomment",
    "continue",
    "learning",
    "logging",
    "stuff",
    "say",
    "confirmed",
    "going",
    "stuff",
    "confirmed",
    "going",
    "create",
    "table",
    "called",
    "active",
    "item",
    "add",
    "active",
    "item",
    "table",
    "going",
    "little",
    "logger",
    "dot",
    "info",
    "bound",
    "item",
    "create",
    "new",
    "table",
    "new",
    "entry",
    "table",
    "say",
    "const",
    "active",
    "item",
    "equals",
    "alice",
    "dot",
    "object",
    "dot",
    "extend",
    "acc",
    "active",
    "item",
    "saying",
    "active",
    "item",
    "exists",
    "great",
    "grab",
    "create",
    "going",
    "create",
    "active",
    "item",
    "table",
    "exist",
    "exist",
    "great",
    "grab",
    "going",
    "say",
    "const",
    "active",
    "item",
    "equals",
    "new",
    "active",
    "item",
    "going",
    "create",
    "new",
    "entry",
    "active",
    "item",
    "table",
    "creating",
    "say",
    "active",
    "item",
    "dot",
    "set",
    "set",
    "columns",
    "want",
    "new",
    "table",
    "creating",
    "let",
    "give",
    "marketplace",
    "address",
    "column",
    "say",
    "market",
    "place",
    "address",
    "come",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "address",
    "requests",
    "events",
    "come",
    "address",
    "coming",
    "us",
    "going",
    "marketplace",
    "address",
    "active",
    "item",
    "set",
    "address",
    "events",
    "saved",
    "come",
    "parameters",
    "event",
    "say",
    "request",
    "object",
    "dot",
    "get",
    "nft",
    "address",
    "get",
    "price",
    "say",
    "active",
    "item",
    "dot",
    "set",
    "price",
    "going",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "price",
    "get",
    "token",
    "ids",
    "say",
    "active",
    "item",
    "dot",
    "set",
    "token",
    "id",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "token",
    "id",
    "get",
    "seller",
    "say",
    "active",
    "item",
    "dot",
    "set",
    "seller",
    "going",
    "request",
    "object",
    "dot",
    "get",
    "seller",
    "getting",
    "information",
    "event",
    "event",
    "update",
    "ross",
    "automatically",
    "always",
    "comes",
    "address",
    "event",
    "omitted",
    "gon",
    "na",
    "grab",
    "going",
    "create",
    "active",
    "item",
    "table",
    "going",
    "add",
    "rows",
    "going",
    "add",
    "one",
    "row",
    "columns",
    "awesome",
    "logger",
    "dot",
    "info",
    "little",
    "print",
    "say",
    "adding",
    "address",
    "little",
    "string",
    "interpolation",
    "say",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "address",
    "period",
    "token",
    "id",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "token",
    "id",
    "need",
    "close",
    "better",
    "outside",
    "logger",
    "dot",
    "info",
    "say",
    "logger",
    "dot",
    "info",
    "saving",
    "run",
    "await",
    "active",
    "item",
    "dot",
    "save",
    "cloud",
    "function",
    "going",
    "create",
    "new",
    "entry",
    "new",
    "table",
    "called",
    "active",
    "item",
    "anytime",
    "item",
    "listed",
    "happens",
    "item",
    "called",
    "trigger",
    "cloud",
    "function",
    "whole",
    "bunch",
    "different",
    "triggers",
    "different",
    "ross",
    "cloud",
    "functions",
    "go",
    "morales",
    "docs",
    "look",
    "trigger",
    "find",
    "list",
    "different",
    "triggers",
    "like",
    "save",
    "save",
    "save",
    "delete",
    "delete",
    "save",
    "file",
    "different",
    "triggers",
    "trigger",
    "cloud",
    "code",
    "upload",
    "new",
    "script",
    "morale",
    "server",
    "yarn",
    "morass",
    "cloud",
    "changes",
    "uploaded",
    "correctly",
    "okay",
    "great",
    "kill",
    "let",
    "go",
    "cloud",
    "server",
    "little",
    "refresh",
    "make",
    "sure",
    "still",
    "processing",
    "update",
    "okay",
    "cpus",
    "low",
    "enough",
    "okay",
    "great",
    "database",
    "see",
    "active",
    "item",
    "table",
    "go",
    "back",
    "hardhead",
    "script",
    "call",
    "mint",
    "list",
    "since",
    "cloud",
    "function",
    "says",
    "okay",
    "anytime",
    "item",
    "listed",
    "event",
    "happens",
    "update",
    "active",
    "item",
    "table",
    "see",
    "active",
    "item",
    "update",
    "let",
    "run",
    "remember",
    "need",
    "heart",
    "head",
    "node",
    "running",
    "connected",
    "hardhat",
    "reset",
    "local",
    "chain",
    "need",
    "click",
    "reset",
    "local",
    "chain",
    "button",
    "went",
    "ahead",
    "ran",
    "go",
    "back",
    "database",
    "give",
    "little",
    "refresh",
    "right",
    "actually",
    "see",
    "anything",
    "go",
    "logs",
    "go",
    "info",
    "see",
    "errors",
    "issues",
    "looks",
    "like",
    "save",
    "failed",
    "item",
    "listed",
    "user",
    "bla",
    "bla",
    "bla",
    "looks",
    "like",
    "issue",
    "read",
    "properties",
    "undefined",
    "reading",
    "extend",
    "also",
    "info",
    "made",
    "issue",
    "quite",
    "write",
    "code",
    "right",
    "go",
    "back",
    "update",
    "active",
    "item",
    "see",
    "messed",
    "morales",
    "dot",
    "object",
    "capital",
    "dot",
    "extent",
    "going",
    "run",
    "yarn",
    "morass",
    "cloud",
    "correct",
    "going",
    "cancel",
    "gon",
    "na",
    "run",
    "mminton",
    "list",
    "fixed",
    "script",
    "fixed",
    "script",
    "go",
    "back",
    "database",
    "give",
    "little",
    "refresh",
    "see",
    "active",
    "item",
    "entry",
    "point",
    "going",
    "times",
    "want",
    "leave",
    "go",
    "get",
    "coffee",
    "right",
    "go",
    "bathroom",
    "go",
    "get",
    "food",
    "going",
    "want",
    "stop",
    "terminals",
    "running",
    "let",
    "actually",
    "practice",
    "restarting",
    "everything",
    "getting",
    "local",
    "development",
    "environment",
    "little",
    "weird",
    "little",
    "tricky",
    "let",
    "practice",
    "let",
    "come",
    "need",
    "well",
    "going",
    "ctrl",
    "c",
    "going",
    "kill",
    "blockchain",
    "ctrl",
    "c",
    "going",
    "kill",
    "connection",
    "morales",
    "server",
    "running",
    "front",
    "end",
    "ctrl",
    "c",
    "go",
    "server",
    "go",
    "view",
    "details",
    "dev",
    "chain",
    "proxy",
    "server",
    "hit",
    "status",
    "reset",
    "button",
    "still",
    "disconnected",
    "everything",
    "disconnected",
    "want",
    "restart",
    "everything",
    "heart",
    "hat",
    "nft",
    "marketplace",
    "run",
    "yarn",
    "hardhead",
    "node",
    "spin",
    "everything",
    "run",
    "yarn",
    "morales",
    "sync",
    "sync",
    "back",
    "routes",
    "connection",
    "go",
    "back",
    "server",
    "view",
    "details",
    "connected",
    "connected",
    "since",
    "restarted",
    "local",
    "blockchain",
    "need",
    "remember",
    "reset",
    "local",
    "chain",
    "go",
    "ahead",
    "run",
    "great",
    "want",
    "restart",
    "front",
    "end",
    "restart",
    "front",
    "end",
    "like",
    "thing",
    "database",
    "still",
    "even",
    "refresh",
    "even",
    "though",
    "reset",
    "local",
    "blockchain",
    "still",
    "stuff",
    "entries",
    "entries",
    "blockchain",
    "longer",
    "exists",
    "often",
    "click",
    "button",
    "delete",
    "rows",
    "class",
    "confirm",
    "active",
    "item",
    "read",
    "name",
    "table",
    "let",
    "item",
    "listed",
    "select",
    "edit",
    "delete",
    "rows",
    "item",
    "listed",
    "yes",
    "delete",
    "little",
    "refresh",
    "everything",
    "zeroed",
    "empty",
    "database",
    "events",
    "save",
    "added",
    "little",
    "weight",
    "script",
    "let",
    "go",
    "back",
    "hard",
    "hat",
    "nft",
    "marketplace",
    "run",
    "yarn",
    "rt",
    "hat",
    "run",
    "scripts",
    "mint",
    "list",
    "dot",
    "j",
    "dash",
    "dash",
    "network",
    "local",
    "host",
    "mint",
    "approve",
    "listed",
    "mined",
    "two",
    "blocks",
    "give",
    "morales",
    "time",
    "index",
    "event",
    "morale",
    "server",
    "go",
    "ahead",
    "refresh",
    "see",
    "item",
    "listed",
    "one",
    "active",
    "item",
    "one",
    "time",
    "going",
    "make",
    "sure",
    "morales",
    "always",
    "indexes",
    "whenever",
    "call",
    "function",
    "going",
    "mind",
    "one",
    "additional",
    "block",
    "tell",
    "morales",
    "hey",
    "transaction",
    "indeed",
    "confirmed",
    "really",
    "exciting",
    "got",
    "practice",
    "closing",
    "restarting",
    "good",
    "stuff",
    "fantastic",
    "additional",
    "functionality",
    "make",
    "lot",
    "easier",
    "someone",
    "else",
    "okay",
    "awesome",
    "check",
    "active",
    "item",
    "well",
    "quite",
    "done",
    "yet",
    "right",
    "somebody",
    "buys",
    "nft",
    "sells",
    "entity",
    "active",
    "item",
    "removed",
    "right",
    "right",
    "one",
    "item",
    "listed",
    "one",
    "active",
    "item",
    "buy",
    "item",
    "active",
    "item",
    "still",
    "show",
    "item",
    "active",
    "let",
    "go",
    "ahead",
    "let",
    "update",
    "cloud",
    "function",
    "also",
    "say",
    "okay",
    "anytime",
    "item",
    "bought",
    "remove",
    "item",
    "active",
    "let",
    "create",
    "another",
    "save",
    "let",
    "first",
    "built",
    "canceling",
    "item",
    "build",
    "one",
    "buying",
    "item",
    "make",
    "another",
    "save",
    "make",
    "another",
    "trigger",
    "say",
    "mirallas",
    "dot",
    "cloud",
    "dot",
    "save",
    "say",
    "item",
    "cancelled",
    "async",
    "function",
    "takes",
    "request",
    "input",
    "parameter",
    "going",
    "thing",
    "gon",
    "na",
    "say",
    "const",
    "confirmed",
    "equals",
    "request",
    "object",
    "dot",
    "get",
    "confirmed",
    "say",
    "const",
    "logger",
    "equals",
    "routes",
    "dot",
    "cloud",
    "dot",
    "get",
    "logger",
    "like",
    "logger",
    "oops",
    "lowercase",
    "logger",
    "dot",
    "info",
    "marketplace",
    "little",
    "pipe",
    "object",
    "request",
    "dot",
    "object",
    "thing",
    "confirmed",
    "transaction",
    "confirmed",
    "one",
    "block",
    "going",
    "remove",
    "active",
    "item",
    "going",
    "using",
    "query",
    "first",
    "find",
    "active",
    "item",
    "getting",
    "cancelled",
    "learn",
    "basic",
    "queries",
    "morales",
    "documentation",
    "going",
    "get",
    "table",
    "saying",
    "const",
    "active",
    "item",
    "equals",
    "outlets",
    "object",
    "capital",
    "object",
    "dot",
    "extend",
    "active",
    "item",
    "going",
    "create",
    "new",
    "query",
    "going",
    "query",
    "table",
    "actually",
    "set",
    "save",
    "anything",
    "gon",
    "na",
    "say",
    "const",
    "query",
    "query",
    "equals",
    "new",
    "morales",
    "dot",
    "query",
    "active",
    "item",
    "going",
    "query",
    "morales",
    "database",
    "find",
    "active",
    "item",
    "going",
    "match",
    "request",
    "cancel",
    "say",
    "query",
    "dot",
    "equal",
    "marketplace",
    "address",
    "comma",
    "request",
    "object",
    "dot",
    "get",
    "address",
    "looking",
    "active",
    "item",
    "marketplace",
    "address",
    "going",
    "address",
    "item",
    "cancelled",
    "say",
    "query",
    "dot",
    "equal",
    "nf",
    "address",
    "comma",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "f",
    "address",
    "say",
    "query",
    "dot",
    "equal",
    "token",
    "id",
    "comma",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "token",
    "id",
    "right",
    "let",
    "look",
    "contract",
    "item",
    "canceled",
    "give",
    "us",
    "gives",
    "us",
    "seller",
    "nfc",
    "address",
    "token",
    "id",
    "seller",
    "ft",
    "address",
    "token",
    "id",
    "looking",
    "nft",
    "address",
    "token",
    "id",
    "need",
    "look",
    "seller",
    "need",
    "look",
    "two",
    "course",
    "marketplace",
    "address",
    "great",
    "two",
    "say",
    "logger",
    "dot",
    "info",
    "print",
    "marketplace",
    "type",
    "query",
    "print",
    "query",
    "running",
    "say",
    "const",
    "cancelled",
    "item",
    "equals",
    "await",
    "query",
    "dot",
    "first",
    "going",
    "find",
    "first",
    "active",
    "item",
    "database",
    "marketplace",
    "address",
    "address",
    "token",
    "id",
    "got",
    "cancelled",
    "going",
    "find",
    "first",
    "cancelled",
    "item",
    "little",
    "bit",
    "logger",
    "information",
    "say",
    "logger",
    "dot",
    "info",
    "marketplace",
    "pipe",
    "cancelled",
    "item",
    "string",
    "interpolation",
    "print",
    "canceled",
    "item",
    "cancelled",
    "item",
    "say",
    "cancelled",
    "item",
    "query",
    "find",
    "anything",
    "return",
    "undefined",
    "saying",
    "cancelled",
    "item",
    "return",
    "true",
    "found",
    "something",
    "cancelled",
    "item",
    "gon",
    "na",
    "say",
    "logger",
    "dot",
    "info",
    "deleting",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "token",
    "id",
    "address",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "address",
    "address",
    "space",
    "since",
    "canceled",
    "going",
    "little",
    "print",
    "little",
    "logging",
    "take",
    "leading",
    "thing",
    "since",
    "canceled",
    "going",
    "run",
    "wait",
    "canceled",
    "item",
    "dot",
    "destroy",
    "remove",
    "active",
    "item",
    "say",
    "else",
    "logger",
    "dot",
    "info",
    "item",
    "found",
    "address",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "address",
    "token",
    "id",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "token",
    "id",
    "cool",
    "save",
    "looks",
    "like",
    "terminal",
    "automatically",
    "added",
    "require",
    "want",
    "gon",
    "na",
    "go",
    "ahead",
    "delete",
    "upload",
    "morales",
    "server",
    "running",
    "yarn",
    "morales",
    "cloud",
    "great",
    "changes",
    "uploaded",
    "correctly",
    "test",
    "test",
    "working",
    "let",
    "create",
    "new",
    "script",
    "hard",
    "hat",
    "nft",
    "marketplace",
    "called",
    "cancel",
    "item",
    "go",
    "scripts",
    "right",
    "mentioned",
    "list",
    "new",
    "file",
    "call",
    "cancel",
    "dot",
    "jas",
    "cancel",
    "item",
    "jas",
    "script",
    "going",
    "use",
    "main",
    "thing",
    "going",
    "call",
    "function",
    "cancel",
    "async",
    "function",
    "cancel",
    "top",
    "say",
    "const",
    "token",
    "id",
    "equals",
    "let",
    "go",
    "active",
    "item",
    "list",
    "let",
    "find",
    "token",
    "id",
    "okay",
    "token",
    "id",
    "zero",
    "use",
    "token",
    "id",
    "want",
    "delete",
    "use",
    "token",
    "id",
    "zero",
    "cancel",
    "script",
    "say",
    "const",
    "token",
    "id",
    "equals",
    "zero",
    "let",
    "cancel",
    "say",
    "const",
    "nft",
    "marketplace",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "yes",
    "const",
    "ethers",
    "equals",
    "require",
    "hardhat",
    "ft",
    "marketplace",
    "say",
    "const",
    "basic",
    "nf",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "gets",
    "contract",
    "basic",
    "nf",
    "team",
    "const",
    "tx",
    "equals",
    "await",
    "nf",
    "marketplace",
    "dot",
    "cancel",
    "listing",
    "basic",
    "nf",
    "dot",
    "address",
    "token",
    "id",
    "going",
    "call",
    "cancel",
    "item",
    "cancelled",
    "listing",
    "call",
    "cancel",
    "listing",
    "cancelled",
    "listing",
    "yep",
    "like",
    "takes",
    "address",
    "nft",
    "token",
    "id",
    "basic",
    "nf",
    "dot",
    "address",
    "token",
    "okay",
    "great",
    "weight",
    "tx",
    "dot",
    "weight",
    "one",
    "console",
    "dot",
    "log",
    "nft",
    "cancelled",
    "say",
    "network",
    "dot",
    "config",
    "dot",
    "chain",
    "id",
    "equals",
    "equals",
    "go",
    "ahead",
    "wait",
    "move",
    "blocks",
    "two",
    "say",
    "sleep",
    "mount",
    "equals",
    "say",
    "const",
    "move",
    "blocks",
    "equals",
    "require",
    "dot",
    "dot",
    "slash",
    "utils",
    "slash",
    "move",
    "blocks",
    "okay",
    "cool",
    "looks",
    "really",
    "good",
    "let",
    "go",
    "ahead",
    "run",
    "yarn",
    "hardhat",
    "run",
    "scripts",
    "cancel",
    "dash",
    "dash",
    "network",
    "local",
    "host",
    "ft",
    "cancelled",
    "moving",
    "blocks",
    "sleeping",
    "okay",
    "great",
    "node",
    "running",
    "awesome",
    "connected",
    "mirallas",
    "uploaded",
    "cloud",
    "function",
    "yarn",
    "morales",
    "cloud",
    "go",
    "back",
    "database",
    "little",
    "refresh",
    "looks",
    "like",
    "issue",
    "go",
    "info",
    "says",
    "save",
    "failed",
    "item",
    "cancel",
    "user",
    "blah",
    "blah",
    "blah",
    "login",
    "information",
    "morales",
    "dot",
    "cloud",
    "apt",
    "get",
    "latar",
    "function",
    "uh",
    "huh",
    "well",
    "makes",
    "lot",
    "sense",
    "get",
    "water",
    "let",
    "let",
    "make",
    "get",
    "logger",
    "shall",
    "get",
    "logger",
    "let",
    "upload",
    "changes",
    "uploaded",
    "correctly",
    "going",
    "manually",
    "go",
    "active",
    "item",
    "gon",
    "na",
    "manually",
    "delete",
    "one",
    "delete",
    "row",
    "yes",
    "delete",
    "refresh",
    "reason",
    "already",
    "saved",
    "save",
    "messed",
    "spelt",
    "right",
    "probably",
    "right",
    "messed",
    "gon",
    "na",
    "rebuild",
    "new",
    "one",
    "delete",
    "new",
    "one",
    "going",
    "run",
    "yarn",
    "hard",
    "hat",
    "run",
    "scripts",
    "mint",
    "list",
    "network",
    "localhost",
    "meant",
    "add",
    "new",
    "one",
    "let",
    "check",
    "morales",
    "database",
    "refresh",
    "see",
    "see",
    "item",
    "listed",
    "token",
    "id",
    "one",
    "let",
    "go",
    "ahead",
    "cancel",
    "going",
    "change",
    "token",
    "id",
    "cancel",
    "item",
    "one",
    "run",
    "script",
    "barnhardt",
    "run",
    "scripts",
    "cancel",
    "item",
    "network",
    "local",
    "host",
    "run",
    "nft",
    "cancelled",
    "moving",
    "blocks",
    "go",
    "front",
    "end",
    "refresh",
    "see",
    "removed",
    "active",
    "item",
    "programmatically",
    "great",
    "logs",
    "really",
    "helpful",
    "little",
    "scary",
    "things",
    "wrong",
    "purpose",
    "learning",
    "use",
    "information",
    "like",
    "logging",
    "learning",
    "debug",
    "effectively",
    "going",
    "make",
    "lot",
    "faster",
    "coder",
    "guess",
    "going",
    "perfect",
    "going",
    "run",
    "issues",
    "understanding",
    "use",
    "log",
    "understanding",
    "read",
    "errors",
    "going",
    "make",
    "much",
    "faster",
    "developer",
    "something",
    "cancelled",
    "item",
    "also",
    "going",
    "need",
    "something",
    "well",
    "guessed",
    "buying",
    "item",
    "let",
    "make",
    "another",
    "one",
    "murales",
    "cloud",
    "save",
    "going",
    "using",
    "exact",
    "code",
    "item",
    "bought",
    "use",
    "item",
    "cancelled",
    "probably",
    "turn",
    "function",
    "practice",
    "going",
    "go",
    "ahead",
    "one",
    "time",
    "morales",
    "dot",
    "cloud",
    "vs",
    "code",
    "keeps",
    "sticking",
    "reason",
    "going",
    "undo",
    "morales",
    "dot",
    "cloud",
    "dot",
    "save",
    "item",
    "bot",
    "event",
    "async",
    "request",
    "little",
    "arrow",
    "function",
    "say",
    "const",
    "confirmed",
    "equals",
    "request",
    "object",
    "dot",
    "get",
    "confirmed",
    "get",
    "whether",
    "transaction",
    "confirmed",
    "get",
    "logger",
    "going",
    "copy",
    "paste",
    "get",
    "right",
    "time",
    "going",
    "copy",
    "paste",
    "two",
    "lines",
    "const",
    "logger",
    "equals",
    "morales",
    "dot",
    "cloud",
    "dot",
    "get",
    "logger",
    "logger",
    "dot",
    "info",
    "say",
    "confirmed",
    "const",
    "active",
    "item",
    "equals",
    "morales",
    "dot",
    "object",
    "dot",
    "extend",
    "active",
    "item",
    "const",
    "query",
    "query",
    "actually",
    "going",
    "copy",
    "lines",
    "going",
    "exactly",
    "going",
    "look",
    "nft",
    "address",
    "token",
    "id",
    "marketplace",
    "address",
    "look",
    "nft",
    "dot",
    "soul",
    "marketplace",
    "dot",
    "som",
    "alright",
    "bot",
    "event",
    "nft",
    "address",
    "token",
    "id",
    "want",
    "find",
    "listed",
    "team",
    "run",
    "query",
    "const",
    "bots",
    "item",
    "equals",
    "await",
    "query",
    "dot",
    "first",
    "exactly",
    "bots",
    "item",
    "logger",
    "dot",
    "info",
    "deleting",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "object",
    "id",
    "await",
    "bought",
    "item",
    "dot",
    "destroy",
    "logger",
    "dot",
    "info",
    "deleted",
    "item",
    "open",
    "id",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "open",
    "id",
    "address",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "address",
    "find",
    "say",
    "else",
    "logger",
    "dot",
    "info",
    "item",
    "found",
    "address",
    "request",
    "object",
    "dot",
    "get",
    "address",
    "token",
    "id",
    "request",
    "object",
    "dot",
    "get",
    "token",
    "id",
    "cool",
    "looks",
    "good",
    "let",
    "go",
    "ahead",
    "upload",
    "cloud",
    "yarn",
    "oralis",
    "cloud",
    "changes",
    "uploaded",
    "correctly",
    "let",
    "go",
    "make",
    "sure",
    "looks",
    "good",
    "server",
    "give",
    "morale",
    "server",
    "little",
    "refresh",
    "go",
    "cloud",
    "functions",
    "see",
    "item",
    "cancelled",
    "still",
    "see",
    "item",
    "bought",
    "save",
    "perfect",
    "looks",
    "like",
    "100",
    "percent",
    "capacity",
    "gon",
    "na",
    "give",
    "second",
    "cool",
    "thinking",
    "give",
    "little",
    "refresh",
    "looks",
    "like",
    "back",
    "cloud",
    "function",
    "uploaded",
    "okay",
    "cool",
    "test",
    "part",
    "working",
    "let",
    "go",
    "ahead",
    "write",
    "another",
    "script",
    "new",
    "file",
    "item",
    "dot",
    "j",
    "thing",
    "right",
    "database",
    "active",
    "items",
    "run",
    "real",
    "quick",
    "mint",
    "list",
    "mint",
    "new",
    "one",
    "go",
    "check",
    "database",
    "little",
    "refresh",
    "looks",
    "like",
    "active",
    "vitamins",
    "token",
    "id",
    "two",
    "buy",
    "token",
    "id",
    "say",
    "const",
    "ethers",
    "network",
    "equals",
    "require",
    "arhats",
    "const",
    "move",
    "blocks",
    "equals",
    "require",
    "dot",
    "slash",
    "utils",
    "slash",
    "move",
    "blocks",
    "const",
    "token",
    "id",
    "equals",
    "async",
    "function",
    "item",
    "const",
    "nft",
    "marketplace",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "nf",
    "marketplace",
    "const",
    "basic",
    "nf",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "basic",
    "nft",
    "coms",
    "listing",
    "equals",
    "await",
    "ft",
    "market",
    "place",
    "dot",
    "get",
    "listing",
    "basic",
    "nf",
    "dot",
    "address",
    "token",
    "id",
    "say",
    "const",
    "price",
    "equals",
    "listing",
    "price",
    "string",
    "say",
    "const",
    "tx",
    "us",
    "going",
    "actually",
    "buy",
    "equals",
    "await",
    "ft",
    "marketplace",
    "dot",
    "buy",
    "item",
    "basic",
    "n",
    "f",
    "dot",
    "address",
    "token",
    "id",
    "comma",
    "value",
    "course",
    "going",
    "price",
    "await",
    "tx",
    "dot",
    "wait",
    "one",
    "console",
    "dot",
    "log",
    "bots",
    "nf",
    "network",
    "dot",
    "config",
    "dot",
    "chain",
    "id",
    "equals",
    "31337",
    "await",
    "move",
    "blocks",
    "comma",
    "sleep",
    "amount",
    "equals",
    "script",
    "course",
    "going",
    "use",
    "stuff",
    "using",
    "cancel",
    "instead",
    "cancelled",
    "going",
    "called",
    "item",
    "item",
    "inactive",
    "item",
    "run",
    "yarn",
    "art",
    "hat",
    "run",
    "scripts",
    "dash",
    "network",
    "localhost",
    "test",
    "buying",
    "item",
    "okay",
    "bob",
    "nft",
    "looping",
    "blocks",
    "little",
    "refresh",
    "database",
    "boom",
    "see",
    "active",
    "item",
    "gone",
    "see",
    "item",
    "bought",
    "awesome",
    "almost",
    "done",
    "keeping",
    "active",
    "item",
    "table",
    "active",
    "items",
    "one",
    "thing",
    "going",
    "test",
    "want",
    "test",
    "actually",
    "nft",
    "marketplace",
    "go",
    "marketplace",
    "dot",
    "sol",
    "actually",
    "update",
    "listing",
    "function",
    "well",
    "also",
    "admits",
    "item",
    "listed",
    "also",
    "want",
    "check",
    "see",
    "item",
    "listed",
    "coming",
    "update",
    "listening",
    "back",
    "item",
    "listed",
    "cloud",
    "function",
    "actually",
    "start",
    "saving",
    "stuff",
    "want",
    "check",
    "see",
    "already",
    "exists",
    "gon",
    "na",
    "say",
    "say",
    "const",
    "query",
    "equals",
    "new",
    "mirallas",
    "dot",
    "query",
    "sorry",
    "keep",
    "sticking",
    "sin",
    "active",
    "item",
    "going",
    "exactly",
    "gon",
    "na",
    "say",
    "query",
    "dot",
    "equal",
    "nft",
    "address",
    "gon",
    "na",
    "look",
    "nft",
    "address",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "ft",
    "address",
    "query",
    "dot",
    "equal",
    "token",
    "id",
    "request",
    "object",
    "dot",
    "get",
    "token",
    "id",
    "query",
    "dot",
    "equal",
    "marketplace",
    "address",
    "comma",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "address",
    "query",
    "dot",
    "equal",
    "seller",
    "requests",
    "dot",
    "object",
    "dot",
    "get",
    "seller",
    "say",
    "const",
    "already",
    "listed",
    "item",
    "equals",
    "await",
    "query",
    "dot",
    "first",
    "say",
    "item",
    "already",
    "listed",
    "go",
    "ahead",
    "say",
    "logger",
    "dot",
    "info",
    "deleting",
    "already",
    "listed",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "object",
    "id",
    "weight",
    "already",
    "listed",
    "item",
    "dot",
    "destroy",
    "logger",
    "dot",
    "info",
    "deleted",
    "item",
    "token",
    "id",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "token",
    "id",
    "address",
    "request",
    "dot",
    "object",
    "dot",
    "get",
    "address",
    "since",
    "already",
    "listed",
    "object",
    "already",
    "listed",
    "know",
    "coming",
    "update",
    "listing",
    "function",
    "going",
    "delete",
    "first",
    "resave",
    "new",
    "price",
    "let",
    "go",
    "ahead",
    "let",
    "upload",
    "cloud",
    "yarn",
    "morales",
    "cloud",
    "upload",
    "server",
    "changes",
    "uploaded",
    "correctly",
    "let",
    "go",
    "check",
    "server",
    "give",
    "little",
    "refresh",
    "go",
    "check",
    "cloud",
    "functions",
    "looks",
    "like",
    "item",
    "listed",
    "query",
    "deleting",
    "way",
    "constantly",
    "active",
    "item",
    "table",
    "items",
    "actively",
    "marketplace",
    "without",
    "spend",
    "additional",
    "gas",
    "application",
    "going",
    "way",
    "better",
    "user",
    "experience",
    "going",
    "pay",
    "extra",
    "gas",
    "keep",
    "entities",
    "maybe",
    "array",
    "data",
    "structures",
    "made",
    "far",
    "easily",
    "one",
    "hardest",
    "parts",
    "course",
    "working",
    "ton",
    "technologies",
    "working",
    "smart",
    "contract",
    "working",
    "cloud",
    "functions",
    "working",
    "back",
    "end",
    "database",
    "made",
    "far",
    "incredibly",
    "incredibly",
    "proud",
    "let",
    "go",
    "ahead",
    "let",
    "mint",
    "list",
    "one",
    "nft",
    "run",
    "yarn",
    "heart",
    "run",
    "scripts",
    "mint",
    "list",
    "network",
    "local",
    "hosts",
    "meant",
    "list",
    "sleeping",
    "let",
    "go",
    "check",
    "database",
    "refresh",
    "see",
    "active",
    "item",
    "let",
    "learn",
    "call",
    "objects",
    "active",
    "item",
    "database",
    "let",
    "remember",
    "ever",
    "reset",
    "local",
    "blockchain",
    "gon",
    "na",
    "come",
    "delete",
    "rows",
    "support",
    "tables",
    "said",
    "time",
    "finally",
    "come",
    "back",
    "front",
    "end",
    "come",
    "back",
    "index",
    "dot",
    "answer",
    "question",
    "show",
    "recently",
    "listed",
    "nf",
    "ts",
    "want",
    "show",
    "active",
    "nf",
    "marketplace",
    "system",
    "getting",
    "active",
    "ones",
    "ones",
    "currently",
    "market",
    "indexing",
    "events",
    "going",
    "delete",
    "comments",
    "let",
    "going",
    "going",
    "thing",
    "called",
    "use",
    "morales",
    "query",
    "go",
    "react",
    "morales",
    "docks",
    "hook",
    "called",
    "use",
    "morales",
    "query",
    "allows",
    "us",
    "fetch",
    "make",
    "queries",
    "database",
    "react",
    "context",
    "back",
    "going",
    "say",
    "import",
    "use",
    "morales",
    "query",
    "react",
    "mirallas",
    "look",
    "docs",
    "use",
    "mouse",
    "query",
    "returns",
    "data",
    "error",
    "loading",
    "automatically",
    "run",
    "query",
    "instant",
    "index",
    "pops",
    "get",
    "data",
    "query",
    "get",
    "active",
    "items",
    "database",
    "say",
    "const",
    "data",
    "rename",
    "data",
    "listed",
    "fts",
    "also",
    "check",
    "see",
    "query",
    "still",
    "fetching",
    "say",
    "fetching",
    "rename",
    "fetching",
    "listed",
    "nf",
    "equals",
    "use",
    "morales",
    "query",
    "inside",
    "takes",
    "two",
    "input",
    "parameters",
    "takes",
    "table",
    "name",
    "search",
    "also",
    "takes",
    "function",
    "query",
    "table",
    "name",
    "going",
    "looking",
    "going",
    "active",
    "item",
    "function",
    "query",
    "going",
    "going",
    "say",
    "query",
    "dot",
    "limit",
    "say",
    "first",
    "10",
    "dot",
    "descending",
    "order",
    "based",
    "token",
    "id",
    "wanted",
    "different",
    "pages",
    "could",
    "thing",
    "called",
    "dot",
    "skip",
    "page",
    "numbers",
    "going",
    "page",
    "numbers",
    "going",
    "leave",
    "like",
    "saying",
    "okay",
    "great",
    "grab",
    "database",
    "active",
    "item",
    "table",
    "grab",
    "first",
    "10",
    "descending",
    "order",
    "token",
    "id",
    "going",
    "save",
    "result",
    "listed",
    "nf",
    "ts",
    "section",
    "see",
    "working",
    "let",
    "little",
    "console",
    "dot",
    "log",
    "listed",
    "nf",
    "see",
    "using",
    "ross",
    "query",
    "actually",
    "returns",
    "us",
    "local",
    "blockchain",
    "node",
    "running",
    "connection",
    "morales",
    "server",
    "front",
    "end",
    "running",
    "let",
    "go",
    "front",
    "end",
    "little",
    "refresh",
    "right",
    "click",
    "hit",
    "inspect",
    "go",
    "console",
    "see",
    "array",
    "spit",
    "first",
    "time",
    "console",
    "dot",
    "logs",
    "empty",
    "initially",
    "loads",
    "listed",
    "returned",
    "yet",
    "actually",
    "going",
    "empty",
    "array",
    "finishes",
    "loading",
    "going",
    "get",
    "array",
    "size",
    "one",
    "get",
    "array",
    "size",
    "one",
    "active",
    "item",
    "one",
    "enter",
    "right",
    "get",
    "array",
    "size",
    "one",
    "see",
    "index",
    "zero",
    "class",
    "name",
    "active",
    "item",
    "item",
    "id",
    "attributes",
    "going",
    "created",
    "marketplace",
    "address",
    "address",
    "price",
    "seller",
    "token",
    "id",
    "exactly",
    "see",
    "database",
    "perfect",
    "exactly",
    "want",
    "able",
    "show",
    "nf",
    "front",
    "end",
    "actually",
    "show",
    "nft",
    "list",
    "nf",
    "people",
    "developers",
    "going",
    "go",
    "console",
    "dot",
    "log",
    "well",
    "going",
    "return",
    "put",
    "parentheses",
    "around",
    "first",
    "check",
    "see",
    "fetching",
    "listed",
    "nf",
    "javascript",
    "stuff",
    "say",
    "fetching",
    "listed",
    "nf",
    "ternary",
    "operator",
    "gon",
    "na",
    "say",
    "fetching",
    "nf",
    "let",
    "add",
    "like",
    "little",
    "div",
    "div",
    "says",
    "loading",
    "done",
    "put",
    "little",
    "colon",
    "fetching",
    "say",
    "listed",
    "nf",
    "ts",
    "dot",
    "map",
    "dot",
    "map",
    "basically",
    "loops",
    "function",
    "listed",
    "entities",
    "function",
    "going",
    "want",
    "going",
    "take",
    "nf",
    "input",
    "parameters",
    "say",
    "going",
    "basically",
    "loop",
    "nf",
    "going",
    "say",
    "console",
    "dot",
    "log",
    "f",
    "dot",
    "attribute",
    "attributes",
    "inside",
    "inside",
    "attributes",
    "different",
    "pieces",
    "want",
    "going",
    "get",
    "pieces",
    "say",
    "const",
    "want",
    "show",
    "price",
    "nft",
    "address",
    "token",
    "id",
    "marketplace",
    "address",
    "course",
    "gon",
    "na",
    "one",
    "seller",
    "information",
    "going",
    "want",
    "show",
    "front",
    "end",
    "say",
    "equals",
    "nf",
    "dot",
    "attributes",
    "going",
    "pull",
    "see",
    "price",
    "seller",
    "token",
    "id",
    "etc",
    "going",
    "pull",
    "nf",
    "dot",
    "attributes",
    "show",
    "function",
    "say",
    "return",
    "return",
    "html",
    "like",
    "div",
    "div",
    "say",
    "like",
    "price",
    "price",
    "price",
    "period",
    "f",
    "address",
    "ft",
    "address",
    "token",
    "id",
    "token",
    "id",
    "seller",
    "added",
    "reason",
    "going",
    "delete",
    "add",
    "1",
    "signs",
    "reason",
    "delete",
    "save",
    "go",
    "front",
    "end",
    "see",
    "information",
    "nft",
    "database",
    "listed",
    "fantastic",
    "see",
    "price",
    "see",
    "address",
    "see",
    "token",
    "id",
    "see",
    "seller",
    "go",
    "back",
    "nft",
    "marketplace",
    "little",
    "little",
    "hard",
    "hat",
    "mc",
    "marketplace",
    "let",
    "mint",
    "another",
    "one",
    "yarn",
    "hard",
    "hat",
    "run",
    "scripts",
    "mentalist",
    "dash",
    "network",
    "localhost",
    "going",
    "run",
    "going",
    "mint",
    "one",
    "go",
    "back",
    "morales",
    "database",
    "little",
    "refresh",
    "active",
    "item",
    "table",
    "new",
    "item",
    "go",
    "back",
    "front",
    "end",
    "give",
    "little",
    "refresh",
    "boom",
    "two",
    "items",
    "awesome",
    "way",
    "actually",
    "show",
    "recently",
    "listed",
    "nf",
    "marketplace",
    "plus",
    "ah",
    "course",
    "might",
    "saying",
    "hey",
    "patrick",
    "cool",
    "looks",
    "really",
    "ugly",
    "would",
    "agree",
    "100",
    "percent",
    "agree",
    "come",
    "component",
    "show",
    "listed",
    "entities",
    "looks",
    "lot",
    "nicer",
    "instead",
    "returning",
    "printing",
    "raw",
    "information",
    "probably",
    "want",
    "show",
    "image",
    "right",
    "want",
    "show",
    "image",
    "want",
    "make",
    "everything",
    "look",
    "lot",
    "nicer",
    "going",
    "create",
    "new",
    "component",
    "going",
    "return",
    "format",
    "nf",
    "appropriately",
    "gon",
    "na",
    "go",
    "components",
    "new",
    "file",
    "going",
    "call",
    "nf",
    "box",
    "dot",
    "j",
    "going",
    "grab",
    "information",
    "show",
    "nft",
    "actually",
    "looks",
    "like",
    "let",
    "get",
    "started",
    "working",
    "entity",
    "box",
    "gon",
    "na",
    "set",
    "way",
    "setting",
    "would",
    "export",
    "default",
    "function",
    "ft",
    "box",
    "something",
    "little",
    "bit",
    "different",
    "one",
    "though",
    "index",
    "information",
    "gon",
    "na",
    "need",
    "pass",
    "variables",
    "nft",
    "box",
    "component",
    "add",
    "input",
    "parameters",
    "component",
    "say",
    "price",
    "address",
    "token",
    "id",
    "marketplace",
    "address",
    "seller",
    "right",
    "front",
    "end",
    "whole",
    "bunch",
    "text",
    "even",
    "gross",
    "warning",
    "gon",
    "na",
    "get",
    "rid",
    "tip",
    "know",
    "tokens",
    "token",
    "uri",
    "points",
    "image",
    "uri",
    "image",
    "url",
    "actual",
    "token",
    "looks",
    "like",
    "going",
    "want",
    "going",
    "want",
    "call",
    "token",
    "uri",
    "call",
    "image",
    "uri",
    "show",
    "image",
    "going",
    "actually",
    "wait",
    "two",
    "api",
    "requests",
    "get",
    "actual",
    "image",
    "going",
    "save",
    "image",
    "state",
    "variable",
    "component",
    "already",
    "know",
    "going",
    "work",
    "use",
    "state",
    "keep",
    "track",
    "image",
    "uri",
    "import",
    "use",
    "state",
    "react",
    "like",
    "say",
    "const",
    "image",
    "uri",
    "comma",
    "set",
    "image",
    "uri",
    "equals",
    "use",
    "state",
    "start",
    "blank",
    "string",
    "let",
    "create",
    "function",
    "going",
    "call",
    "update",
    "ui",
    "update",
    "ui",
    "grab",
    "token",
    "uri",
    "image",
    "uri",
    "create",
    "async",
    "function",
    "called",
    "update",
    "ui",
    "order",
    "get",
    "image",
    "first",
    "gon",
    "na",
    "need",
    "get",
    "token",
    "uri",
    "using",
    "image",
    "ag",
    "token",
    "uri",
    "gets",
    "image",
    "first",
    "thing",
    "gon",
    "na",
    "get",
    "token",
    "uri",
    "know",
    "use",
    "web",
    "three",
    "contract",
    "import",
    "use",
    "web",
    "three",
    "contract",
    "react",
    "morales",
    "know",
    "use",
    "web",
    "contracts",
    "going",
    "need",
    "parameters",
    "say",
    "const",
    "run",
    "contract",
    "function",
    "get",
    "token",
    "uri",
    "equals",
    "use",
    "web",
    "contract",
    "first",
    "need",
    "abi",
    "nft",
    "gon",
    "na",
    "need",
    "call",
    "token",
    "uri",
    "get",
    "abi",
    "gon",
    "na",
    "need",
    "update",
    "front",
    "end",
    "let",
    "comment",
    "part",
    "go",
    "back",
    "hard",
    "hat",
    "piece",
    "let",
    "look",
    "deploy",
    "scripts",
    "update",
    "front",
    "end",
    "right",
    "updating",
    "calm",
    "object",
    "addresses",
    "well",
    "good",
    "also",
    "going",
    "want",
    "add",
    "api",
    "front",
    "end",
    "well",
    "let",
    "create",
    "another",
    "function",
    "called",
    "update",
    "api",
    "pass",
    "api",
    "well",
    "async",
    "function",
    "update",
    "api",
    "give",
    "basic",
    "nft",
    "api",
    "nft",
    "marketplace",
    "api",
    "going",
    "need",
    "say",
    "const",
    "nf",
    "marketplace",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "f",
    "marketplace",
    "going",
    "write",
    "abi",
    "front",
    "end",
    "api",
    "location",
    "front",
    "end",
    "contracts",
    "file",
    "let",
    "also",
    "const",
    "front",
    "abi",
    "location",
    "equals",
    "dot",
    "dot",
    "slash",
    "next",
    "jas",
    "marketplace",
    "dash",
    "fcc",
    "slash",
    "constants",
    "instead",
    "actually",
    "giving",
    "file",
    "name",
    "give",
    "front",
    "end",
    "api",
    "location",
    "actually",
    "generate",
    "file",
    "us",
    "going",
    "overwrite",
    "abi",
    "file",
    "anytime",
    "work",
    "marketplace",
    "fs",
    "dot",
    "right",
    "file",
    "sync",
    "front",
    "abi",
    "location",
    "ft",
    "marketplace",
    "dot",
    "json",
    "ft",
    "marketplace",
    "dot",
    "interface",
    "format",
    "ethers",
    "dot",
    "utils",
    "dot",
    "format",
    "types",
    "dot",
    "json",
    "also",
    "going",
    "want",
    "basic",
    "nf",
    "say",
    "const",
    "basic",
    "nf",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "basic",
    "nf",
    "fs",
    "dot",
    "right",
    "file",
    "sync",
    "going",
    "exact",
    "place",
    "right",
    "except",
    "going",
    "different",
    "location",
    "going",
    "basic",
    "nft",
    "dot",
    "json",
    "course",
    "gon",
    "na",
    "comma",
    "basic",
    "nf",
    "interface",
    "dot",
    "format",
    "ethers",
    "dot",
    "utils",
    "dot",
    "format",
    "types",
    "dot",
    "json",
    "find",
    "nft",
    "marketplace",
    "interface",
    "hardhead",
    "documentation",
    "find",
    "ethers",
    "documentation",
    "update",
    "abi",
    "function",
    "let",
    "also",
    "add",
    "module",
    "exports",
    "weight",
    "abi",
    "like",
    "hyphen",
    "run",
    "part",
    "hardhat",
    "front",
    "end",
    "run",
    "yarn",
    "hard",
    "hat",
    "deploy",
    "dash",
    "dash",
    "dash",
    "tags",
    "tag",
    "front",
    "end",
    "front",
    "end",
    "nothing",
    "compile",
    "updating",
    "front",
    "end",
    "done",
    "go",
    "back",
    "front",
    "end",
    "go",
    "constants",
    "see",
    "two",
    "objects",
    "going",
    "api",
    "basic",
    "nft",
    "nft",
    "marketplace",
    "awesome",
    "import",
    "front",
    "end",
    "say",
    "import",
    "marketplace",
    "abi",
    "dot",
    "dot",
    "slash",
    "constants",
    "slash",
    "nf",
    "marketplace",
    "dot",
    "json",
    "also",
    "get",
    "nf",
    "api",
    "import",
    "nf",
    "abi",
    "slash",
    "constants",
    "slash",
    "basic",
    "nf",
    "dot",
    "json",
    "run",
    "contract",
    "function",
    "token",
    "uri",
    "function",
    "part",
    "nft",
    "api",
    "api",
    "nft",
    "abi",
    "contract",
    "address",
    "going",
    "address",
    "nft",
    "passing",
    "parameter",
    "pass",
    "nf",
    "address",
    "function",
    "name",
    "going",
    "token",
    "uri",
    "params",
    "going",
    "token",
    "id",
    "getting",
    "passed",
    "input",
    "parameter",
    "function",
    "component",
    "right",
    "double",
    "check",
    "good",
    "basic",
    "nf",
    "dot",
    "soul",
    "right",
    "scroll",
    "token",
    "uri",
    "overriding",
    "function",
    "want",
    "call",
    "takes",
    "token",
    "id",
    "function",
    "want",
    "call",
    "takes",
    "token",
    "id",
    "okay",
    "great",
    "update",
    "ui",
    "first",
    "say",
    "const",
    "token",
    "uri",
    "equals",
    "await",
    "token",
    "uri",
    "let",
    "little",
    "console",
    "dot",
    "log",
    "token",
    "eye",
    "see",
    "returns",
    "make",
    "sure",
    "update",
    "ui",
    "called",
    "add",
    "use",
    "effect",
    "say",
    "use",
    "effect",
    "takes",
    "input",
    "parameter",
    "function",
    "say",
    "update",
    "ui",
    "run",
    "anytime",
    "web",
    "three",
    "enabled",
    "changes",
    "want",
    "run",
    "update",
    "ui",
    "want",
    "dependent",
    "web",
    "three",
    "enabled",
    "say",
    "web",
    "three",
    "enabled",
    "update",
    "ui",
    "need",
    "add",
    "use",
    "effect",
    "well",
    "using",
    "use",
    "state",
    "comma",
    "use",
    "effect",
    "least",
    "reading",
    "token",
    "uri",
    "blockchain",
    "going",
    "set",
    "image",
    "yet",
    "right",
    "going",
    "get",
    "image",
    "uri",
    "token",
    "neuron",
    "let",
    "add",
    "nft",
    "box",
    "index",
    "see",
    "working",
    "well",
    "far",
    "back",
    "index",
    "next",
    "top",
    "import",
    "nf",
    "box",
    "dot",
    "dot",
    "slash",
    "components",
    "slash",
    "nf",
    "box",
    "returning",
    "add",
    "nf",
    "box",
    "component",
    "make",
    "sure",
    "pass",
    "parameters",
    "takes",
    "price",
    "going",
    "equal",
    "javascript",
    "price",
    "ft",
    "address",
    "going",
    "equal",
    "javascript",
    "entity",
    "address",
    "token",
    "id",
    "going",
    "equal",
    "token",
    "id",
    "marketplace",
    "address",
    "going",
    "marketplace",
    "address",
    "seller",
    "going",
    "seller",
    "saw",
    "warning",
    "saying",
    "hey",
    "components",
    "need",
    "things",
    "mapping",
    "need",
    "unique",
    "key",
    "say",
    "key",
    "give",
    "key",
    "well",
    "say",
    "key",
    "equals",
    "string",
    "interpolation",
    "say",
    "nft",
    "address",
    "combined",
    "token",
    "id",
    "key",
    "save",
    "go",
    "back",
    "front",
    "end",
    "little",
    "refresh",
    "marketplace",
    "address",
    "defined",
    "market",
    "place",
    "address",
    "let",
    "make",
    "sure",
    "spell",
    "things",
    "right",
    "let",
    "go",
    "back",
    "front",
    "end",
    "give",
    "refresh",
    "three",
    "enabled",
    "defined",
    "oops",
    "excuse",
    "nft",
    "box",
    "need",
    "grab",
    "us",
    "morales",
    "import",
    "use",
    "morales",
    "ponents",
    "say",
    "const",
    "web",
    "three",
    "enabled",
    "equals",
    "use",
    "morales",
    "save",
    "one",
    "thing",
    "noticed",
    "actually",
    "needs",
    "wrapped",
    "squigglies",
    "sorry",
    "forgot",
    "component",
    "actually",
    "takes",
    "props",
    "props",
    "input",
    "parameter",
    "would",
    "need",
    "like",
    "props",
    "token",
    "id",
    "get",
    "token",
    "id",
    "instead",
    "extract",
    "putting",
    "little",
    "squiggly",
    "brackets",
    "put",
    "squiggly",
    "brackets",
    "great",
    "little",
    "console",
    "dot",
    "log",
    "token",
    "eye",
    "everything",
    "updated",
    "let",
    "little",
    "save",
    "even",
    "say",
    "web",
    "three",
    "enabled",
    "ui",
    "like",
    "save",
    "go",
    "front",
    "end",
    "little",
    "refresh",
    "see",
    "everything",
    "working",
    "expected",
    "long",
    "hard",
    "localhost",
    "meta",
    "mask",
    "ignore",
    "error",
    "warning",
    "click",
    "ipfs",
    "brave",
    "ipfs",
    "companion",
    "see",
    "getting",
    "token",
    "uri",
    "perfect",
    "piece",
    "want",
    "image",
    "bid",
    "one",
    "using",
    "https",
    "technically",
    "decentralized",
    "right",
    "would",
    "need",
    "come",
    "instead",
    "https",
    "would",
    "need",
    "come",
    "ipfs",
    "colon",
    "slash",
    "slash",
    "actually",
    "https",
    "good",
    "explain",
    "second",
    "getting",
    "token",
    "uri",
    "call",
    "url",
    "get",
    "back",
    "image",
    "want",
    "actually",
    "show",
    "front",
    "end",
    "little",
    "console",
    "dot",
    "log",
    "token",
    "uri",
    "string",
    "interpolation",
    "like",
    "say",
    "token",
    "uri",
    "going",
    "need",
    "grab",
    "token",
    "uri",
    "get",
    "image",
    "going",
    "get",
    "little",
    "bit",
    "funky",
    "going",
    "cheat",
    "little",
    "bit",
    "application",
    "everybody",
    "going",
    "ipfs",
    "companion",
    "every",
    "browser",
    "ipfs",
    "compatible",
    "gon",
    "na",
    "actually",
    "cheat",
    "little",
    "bit",
    "actually",
    "going",
    "change",
    "token",
    "uriah",
    "ipfs",
    "edition",
    "h",
    "https",
    "edition",
    "known",
    "using",
    "ipfs",
    "gateway",
    "server",
    "return",
    "ipfs",
    "files",
    "normal",
    "url",
    "going",
    "use",
    "ipfs",
    "gateway",
    "make",
    "regular",
    "https",
    "calls",
    "return",
    "ipfs",
    "files",
    "technically",
    "making",
    "centralized",
    "yes",
    "ideal",
    "however",
    "world",
    "adopt",
    "ipfs",
    "world",
    "adopts",
    "standards",
    "kind",
    "right",
    "otherwise",
    "front",
    "end",
    "show",
    "blank",
    "ca",
    "want",
    "gon",
    "na",
    "say",
    "const",
    "request",
    "url",
    "equals",
    "token",
    "uri",
    "dot",
    "replace",
    "ipfs",
    "slash",
    "slash",
    "http",
    "https",
    "slash",
    "slash",
    "saying",
    "token",
    "uri",
    "starts",
    "ipfs",
    "great",
    "going",
    "switch",
    "using",
    "ipfs",
    "gateway",
    "really",
    "use",
    "ipfs",
    "gateway",
    "provided",
    "team",
    "builds",
    "ipfs",
    "pretty",
    "reliable",
    "gateway",
    "kind",
    "cop",
    "yes",
    "files",
    "still",
    "ipfs",
    "yes",
    "end",
    "world",
    "going",
    "make",
    "calling",
    "api",
    "lot",
    "easier",
    "us",
    "going",
    "say",
    "const",
    "token",
    "uri",
    "response",
    "equals",
    "await",
    "going",
    "little",
    "weird",
    "going",
    "two",
    "awaits",
    "await",
    "weight",
    "fetch",
    "request",
    "url",
    "dot",
    "json",
    "fetch",
    "keyword",
    "use",
    "javascript",
    "fetch",
    "get",
    "url",
    "fetch",
    "keyword",
    "essentially",
    "thing",
    "pasting",
    "browser",
    "like",
    "getting",
    "json",
    "response",
    "await",
    "get",
    "response",
    "await",
    "convert",
    "response",
    "json",
    "get",
    "toggle",
    "response",
    "object",
    "javascript",
    "perfect",
    "object",
    "image",
    "attribute",
    "want",
    "gon",
    "na",
    "thing",
    "gon",
    "na",
    "use",
    "ipfs",
    "gateway",
    "one",
    "already",
    "using",
    "https",
    "would",
    "still",
    "want",
    "convert",
    "gon",
    "na",
    "say",
    "const",
    "image",
    "uri",
    "equals",
    "token",
    "response",
    "dot",
    "image",
    "gon",
    "na",
    "get",
    "image",
    "tag",
    "response",
    "going",
    "say",
    "const",
    "image",
    "uri",
    "url",
    "going",
    "equal",
    "gon",
    "na",
    "exact",
    "thing",
    "going",
    "use",
    "gateway",
    "image",
    "uri",
    "dot",
    "replace",
    "ipfs",
    "colon",
    "slash",
    "slash",
    "https",
    "get",
    "url",
    "right",
    "finally",
    "set",
    "image",
    "uri",
    "image",
    "url",
    "image",
    "uri",
    "going",
    "image",
    "right",
    "little",
    "bit",
    "wonky",
    "yes",
    "better",
    "ways",
    "yes",
    "actually",
    "number",
    "better",
    "ways",
    "could",
    "could",
    "actually",
    "since",
    "using",
    "morales",
    "could",
    "render",
    "image",
    "server",
    "call",
    "server",
    "else",
    "could",
    "well",
    "test",
    "nets",
    "maintenance",
    "routes",
    "actually",
    "comes",
    "bunch",
    "hooks",
    "like",
    "us",
    "nft",
    "balance",
    "show",
    "us",
    "f",
    "ts",
    "show",
    "us",
    "many",
    "nf",
    "shows",
    "information",
    "nf",
    "works",
    "test",
    "nets",
    "main",
    "net",
    "world",
    "adopt",
    "ipfs",
    "wrapping",
    "unfortunately",
    "yet",
    "life",
    "setting",
    "image",
    "alright",
    "image",
    "uri",
    "actually",
    "looks",
    "like",
    "going",
    "click",
    "use",
    "browser",
    "returns",
    "dog",
    "image",
    "uri",
    "website",
    "finally",
    "use",
    "show",
    "going",
    "look",
    "like",
    "finally",
    "create",
    "return",
    "return",
    "little",
    "div",
    "another",
    "div",
    "want",
    "javascript",
    "say",
    "image",
    "array",
    "exists",
    "stuff",
    "otherwise",
    "stuff",
    "exist",
    "maybe",
    "div",
    "div",
    "says",
    "loading",
    "dot",
    "dot",
    "exist",
    "say",
    "little",
    "div",
    "close",
    "div",
    "say",
    "found",
    "go",
    "back",
    "front",
    "end",
    "let",
    "see",
    "good",
    "uh",
    "huh",
    "refresh",
    "see",
    "found",
    "nf",
    "okay",
    "cool",
    "actually",
    "show",
    "nf",
    "finally",
    "url",
    "use",
    "show",
    "nf",
    "want",
    "actually",
    "use",
    "next",
    "jas",
    "actually",
    "comes",
    "component",
    "called",
    "image",
    "component",
    "use",
    "render",
    "images",
    "really",
    "easily",
    "using",
    "uri",
    "going",
    "use",
    "image",
    "tag",
    "optimizations",
    "back",
    "end",
    "means",
    "website",
    "wo",
    "able",
    "deployed",
    "static",
    "static",
    "site",
    "like",
    "ipfs",
    "website",
    "requires",
    "server",
    "technically",
    "requires",
    "server",
    "morales",
    "might",
    "another",
    "reason",
    "might",
    "want",
    "since",
    "using",
    "image",
    "tag",
    "ca",
    "deploy",
    "statically",
    "something",
    "like",
    "ipfs",
    "going",
    "top",
    "going",
    "import",
    "image",
    "next",
    "slash",
    "image",
    "gon",
    "na",
    "going",
    "say",
    "instead",
    "founded",
    "gon",
    "na",
    "go",
    "image",
    "gon",
    "na",
    "close",
    "gon",
    "na",
    "give",
    "loader",
    "blank",
    "function",
    "gives",
    "us",
    "image",
    "uri",
    "worry",
    "much",
    "loader",
    "gon",
    "na",
    "say",
    "source",
    "image",
    "going",
    "image",
    "uri",
    "give",
    "height",
    "maybe",
    "give",
    "width",
    "also",
    "maybe",
    "right",
    "save",
    "see",
    "image",
    "ui",
    "go",
    "back",
    "website",
    "oh",
    "goodness",
    "see",
    "dogs",
    "holy",
    "cow",
    "getting",
    "really",
    "exciting",
    "see",
    "puppies",
    "see",
    "images",
    "definitely",
    "something",
    "right",
    "really",
    "exciting",
    "know",
    "said",
    "css",
    "formatting",
    "tutorial",
    "definitely",
    "expertise",
    "however",
    "let",
    "make",
    "look",
    "little",
    "bit",
    "nicer",
    "going",
    "use",
    "web",
    "three",
    "ui",
    "kit",
    "web",
    "three",
    "ui",
    "kit",
    "whole",
    "bunch",
    "tools",
    "really",
    "really",
    "helpful",
    "us",
    "use",
    "go",
    "web",
    "three",
    "ui",
    "kit",
    "go",
    "live",
    "storybook",
    "another",
    "interactive",
    "bit",
    "scroll",
    "section",
    "called",
    "card",
    "make",
    "little",
    "clickable",
    "cards",
    "display",
    "information",
    "nfts",
    "let",
    "go",
    "ahead",
    "top",
    "import",
    "import",
    "card",
    "web",
    "three",
    "ui",
    "kit",
    "instead",
    "showing",
    "image",
    "wrap",
    "image",
    "card",
    "like",
    "save",
    "back",
    "front",
    "end",
    "give",
    "little",
    "refresh",
    "got",
    "kind",
    "clickable",
    "section",
    "looks",
    "little",
    "bit",
    "nicer",
    "even",
    "label",
    "even",
    "label",
    "title",
    "description",
    "grab",
    "title",
    "description",
    "token",
    "uri",
    "response",
    "top",
    "let",
    "go",
    "ahead",
    "let",
    "grab",
    "title",
    "description",
    "token",
    "ui",
    "state",
    "variable",
    "say",
    "const",
    "token",
    "name",
    "set",
    "token",
    "name",
    "equals",
    "use",
    "state",
    "start",
    "blank",
    "const",
    "token",
    "description",
    "token",
    "description",
    "equals",
    "use",
    "state",
    "start",
    "blank",
    "download",
    "update",
    "ui",
    "bit",
    "call",
    "set",
    "token",
    "name",
    "say",
    "name",
    "token",
    "response",
    "dot",
    "name",
    "say",
    "set",
    "token",
    "description",
    "token",
    "response",
    "dot",
    "description",
    "use",
    "descriptions",
    "title",
    "cart",
    "say",
    "title",
    "equals",
    "token",
    "name",
    "description",
    "equals",
    "token",
    "description",
    "save",
    "look",
    "front",
    "end",
    "give",
    "little",
    "refresh",
    "oh",
    "name",
    "nft",
    "description",
    "front",
    "end",
    "okay",
    "cool",
    "let",
    "keep",
    "going",
    "else",
    "want",
    "well",
    "probably",
    "want",
    "owned",
    "put",
    "little",
    "div",
    "inside",
    "card",
    "say",
    "div",
    "maybe",
    "even",
    "put",
    "token",
    "id",
    "little",
    "number",
    "token",
    "id",
    "another",
    "little",
    "div",
    "make",
    "italic",
    "say",
    "class",
    "name",
    "equals",
    "italic",
    "text",
    "going",
    "small",
    "say",
    "owned",
    "get",
    "seller",
    "passing",
    "input",
    "parameter",
    "maybe",
    "underneath",
    "image",
    "want",
    "put",
    "price",
    "little",
    "div",
    "say",
    "price",
    "like",
    "however",
    "probably",
    "want",
    "way",
    "want",
    "human",
    "readable",
    "units",
    "import",
    "ethers",
    "say",
    "import",
    "ethers",
    "ethers",
    "instead",
    "showing",
    "price",
    "little",
    "little",
    "javascript",
    "ethers",
    "dot",
    "utils",
    "dot",
    "format",
    "units",
    "price",
    "price",
    "ether",
    "space",
    "eath",
    "make",
    "class",
    "name",
    "equals",
    "font",
    "bold",
    "read",
    "much",
    "listed",
    "marketplace",
    "let",
    "go",
    "back",
    "high",
    "see",
    "token",
    "id",
    "number",
    "four",
    "see",
    "owned",
    "see",
    "price",
    "information",
    "dog",
    "yay",
    "let",
    "format",
    "stuff",
    "little",
    "bit",
    "nicer",
    "let",
    "wrap",
    "everything",
    "div",
    "one",
    "div",
    "say",
    "class",
    "name",
    "going",
    "flex",
    "going",
    "help",
    "format",
    "everything",
    "put",
    "everything",
    "column",
    "items",
    "get",
    "look",
    "back",
    "kind",
    "like",
    "column",
    "wrapping",
    "one",
    "div",
    "give",
    "padding",
    "last",
    "name",
    "equals",
    "p",
    "say",
    "little",
    "bit",
    "padding",
    "added",
    "okay",
    "nice",
    "go",
    "back",
    "index",
    "add",
    "formatting",
    "index",
    "main",
    "one",
    "going",
    "remove",
    "styles",
    "dot",
    "container",
    "gon",
    "na",
    "say",
    "container",
    "mx",
    "auto",
    "going",
    "make",
    "h1",
    "class",
    "name",
    "equals",
    "form",
    "e",
    "x",
    "font",
    "bold",
    "text",
    "xml",
    "gon",
    "na",
    "say",
    "recently",
    "listed",
    "going",
    "another",
    "div",
    "class",
    "name",
    "equals",
    "flex",
    "flex",
    "wrap",
    "going",
    "end",
    "div",
    "around",
    "javascript",
    "let",
    "look",
    "ui",
    "let",
    "see",
    "okay",
    "cool",
    "let",
    "go",
    "back",
    "index",
    "let",
    "remove",
    "stuff",
    "since",
    "adding",
    "card",
    "let",
    "save",
    "looking",
    "lot",
    "better",
    "finally",
    "able",
    "start",
    "listening",
    "nf",
    "ts",
    "show",
    "marketplace",
    "like",
    "see",
    "fantastic",
    "okay",
    "go",
    "readme",
    "homepage",
    "show",
    "recently",
    "listen",
    "empties",
    "oh",
    "goodness",
    "check",
    "done",
    "know",
    "seemed",
    "like",
    "lot",
    "work",
    "lot",
    "setting",
    "morale",
    "server",
    "correctly",
    "back",
    "end",
    "back",
    "end",
    "services",
    "needed",
    "configure",
    "everything",
    "set",
    "rest",
    "going",
    "easy",
    "going",
    "want",
    "show",
    "connected",
    "web",
    "three",
    "right",
    "click",
    "still",
    "shows",
    "going",
    "update",
    "little",
    "bit",
    "checking",
    "see",
    "fetching",
    "listen",
    "nf",
    "right",
    "right",
    "actually",
    "want",
    "see",
    "web",
    "three",
    "enabled",
    "going",
    "little",
    "bit",
    "nested",
    "tertiary",
    "operations",
    "web",
    "three",
    "enabled",
    "going",
    "fetching",
    "listed",
    "nf",
    "stuff",
    "gon",
    "na",
    "everything",
    "enabled",
    "let",
    "like",
    "little",
    "div",
    "says",
    "web",
    "three",
    "currently",
    "enabled",
    "course",
    "going",
    "need",
    "grab",
    "web",
    "three",
    "enabled",
    "going",
    "say",
    "top",
    "const",
    "three",
    "enabled",
    "equals",
    "use",
    "oralis",
    "going",
    "grab",
    "use",
    "morales",
    "react",
    "morales",
    "save",
    "go",
    "back",
    "front",
    "end",
    "give",
    "little",
    "refresh",
    "connected",
    "see",
    "marketplace",
    "disconnect",
    "see",
    "web",
    "three",
    "currently",
    "enabled",
    "want",
    "perfect",
    "next",
    "readme",
    "nft",
    "update",
    "listing",
    "let",
    "first",
    "let",
    "figure",
    "somebody",
    "actually",
    "owner",
    "entities",
    "let",
    "make",
    "really",
    "easy",
    "people",
    "website",
    "well",
    "first",
    "get",
    "person",
    "metamask",
    "grabbing",
    "account",
    "us",
    "mouse",
    "comma",
    "account",
    "easily",
    "const",
    "owned",
    "user",
    "equals",
    "seller",
    "equals",
    "equals",
    "equals",
    "account",
    "seller",
    "getting",
    "contract",
    "account",
    "getting",
    "whoever",
    "connected",
    "seller",
    "equals",
    "account",
    "seller",
    "equals",
    "equals",
    "equals",
    "undefined",
    "say",
    "owned",
    "instead",
    "saying",
    "owned",
    "seller",
    "say",
    "const",
    "formatted",
    "seller",
    "address",
    "equals",
    "ternary",
    "operator",
    "say",
    "say",
    "instead",
    "seller",
    "otherwise",
    "say",
    "seller",
    "say",
    "owned",
    "formatted",
    "seller",
    "address",
    "like",
    "go",
    "back",
    "front",
    "end",
    "little",
    "refresh",
    "depending",
    "connected",
    "might",
    "see",
    "owned",
    "blah",
    "blah",
    "blah",
    "go",
    "metamask",
    "let",
    "go",
    "ahead",
    "switch",
    "account",
    "account",
    "three",
    "let",
    "go",
    "ahead",
    "connect",
    "account",
    "three",
    "see",
    "owned",
    "instead",
    "right",
    "even",
    "switch",
    "switch",
    "accounts",
    "switch",
    "account",
    "one",
    "see",
    "owned",
    "blah",
    "blah",
    "blah",
    "like",
    "since",
    "switch",
    "back",
    "forth",
    "diameters",
    "actually",
    "change",
    "really",
    "annoying",
    "maybe",
    "want",
    "go",
    "one",
    "step",
    "want",
    "truncate",
    "seller",
    "address",
    "make",
    "little",
    "bit",
    "smaller",
    "want",
    "make",
    "seller",
    "little",
    "bit",
    "smaller",
    "let",
    "create",
    "new",
    "function",
    "create",
    "outside",
    "export",
    "default",
    "function",
    "going",
    "function",
    "depend",
    "anything",
    "inside",
    "app",
    "going",
    "kind",
    "raw",
    "function",
    "going",
    "create",
    "call",
    "const",
    "truncate",
    "string",
    "going",
    "function",
    "takes",
    "full",
    "string",
    "string",
    "length",
    "parameters",
    "going",
    "pass",
    "seller",
    "address",
    "long",
    "want",
    "make",
    "string",
    "going",
    "arrow",
    "function",
    "going",
    "gon",
    "na",
    "say",
    "string",
    "dot",
    "length",
    "less",
    "equal",
    "str",
    "lang",
    "return",
    "full",
    "str",
    "otherwise",
    "say",
    "concept",
    "ra",
    "torx",
    "equals",
    "three",
    "little",
    "dots",
    "say",
    "let",
    "separate",
    "tor",
    "length",
    "equals",
    "ra",
    "tor",
    "dot",
    "length",
    "make",
    "con",
    "separator",
    "length",
    "say",
    "const",
    "chars",
    "show",
    "going",
    "string",
    "length",
    "minus",
    "separator",
    "length",
    "say",
    "const",
    "front",
    "chars",
    "front",
    "characters",
    "going",
    "equal",
    "math",
    "dot",
    "ceiling",
    "chars",
    "show",
    "divided",
    "two",
    "const",
    "back",
    "chars",
    "going",
    "equal",
    "math",
    "dot",
    "floor",
    "chars",
    "show",
    "divided",
    "two",
    "understand",
    "math",
    "worry",
    "gon",
    "na",
    "say",
    "return",
    "full",
    "string",
    "substring",
    "zero",
    "front",
    "chars",
    "plus",
    "sep",
    "ira",
    "tour",
    "plus",
    "full",
    "str",
    "dot",
    "substring",
    "full",
    "str",
    "dot",
    "length",
    "minus",
    "back",
    "chars",
    "grab",
    "truncate",
    "str",
    "truncate",
    "string",
    "formatted",
    "seller",
    "say",
    "still",
    "otherwise",
    "truncate",
    "string",
    "seller",
    "blank",
    "seller",
    "size",
    "save",
    "go",
    "back",
    "front",
    "end",
    "owned",
    "still",
    "gon",
    "na",
    "say",
    "switch",
    "accounts",
    "says",
    "owned",
    "know",
    "blah",
    "blah",
    "blah",
    "dot",
    "dot",
    "blah",
    "blah",
    "blah",
    "truncated",
    "address",
    "sizes",
    "actually",
    "change",
    "lot",
    "nicer",
    "getting",
    "bigger",
    "smaller",
    "awesome",
    "formatted",
    "even",
    "better",
    "okay",
    "want",
    "well",
    "know",
    "owns",
    "nft",
    "nf",
    "formatted",
    "pretty",
    "nicely",
    "need",
    "figure",
    "way",
    "update",
    "listing",
    "want",
    "owned",
    "us",
    "switch",
    "back",
    "account",
    "owned",
    "owned",
    "us",
    "click",
    "want",
    "able",
    "update",
    "listing",
    "marketplace",
    "going",
    "create",
    "new",
    "component",
    "called",
    "update",
    "listing",
    "ngmodel",
    "gon",
    "na",
    "create",
    "new",
    "component",
    "new",
    "file",
    "update",
    "listing",
    "ngmodel",
    "something",
    "like",
    "pops",
    "example",
    "little",
    "pop",
    "known",
    "modal",
    "want",
    "build",
    "owned",
    "us",
    "click",
    "want",
    "pop",
    "modal",
    "thing",
    "get",
    "started",
    "thing",
    "components",
    "export",
    "default",
    "function",
    "update",
    "listing",
    "ngmodel",
    "like",
    "probably",
    "going",
    "want",
    "pass",
    "parameters",
    "entity",
    "box",
    "probably",
    "gon",
    "na",
    "want",
    "pass",
    "parameters",
    "ngmodel",
    "knows",
    "function",
    "needs",
    "call",
    "nft",
    "marketplace",
    "way",
    "going",
    "update",
    "listing",
    "going",
    "call",
    "update",
    "listing",
    "function",
    "need",
    "address",
    "token",
    "id",
    "new",
    "price",
    "going",
    "least",
    "need",
    "going",
    "need",
    "nft",
    "address",
    "least",
    "token",
    "id",
    "make",
    "little",
    "pop",
    "going",
    "code",
    "going",
    "use",
    "web",
    "three",
    "ui",
    "kit",
    "web",
    "three",
    "ui",
    "kit",
    "nice",
    "pop",
    "section",
    "code",
    "work",
    "modal",
    "going",
    "import",
    "import",
    "ngmodel",
    "web",
    "three",
    "ui",
    "kit",
    "like",
    "looks",
    "like",
    "modal",
    "stuff",
    "working",
    "modal",
    "return",
    "little",
    "modal",
    "like",
    "one",
    "key",
    "things",
    "ngmodel",
    "whether",
    "visible",
    "visible",
    "tag",
    "actually",
    "gon",
    "na",
    "grab",
    "actually",
    "gon",
    "na",
    "grab",
    "empty",
    "box",
    "going",
    "pass",
    "little",
    "visible",
    "well",
    "nft",
    "box",
    "need",
    "tell",
    "ngmodel",
    "visible",
    "make",
    "code",
    "little",
    "bit",
    "right",
    "blank",
    "inside",
    "ngmodel",
    "going",
    "want",
    "give",
    "input",
    "field",
    "update",
    "know",
    "done",
    "regular",
    "inputs",
    "since",
    "working",
    "web",
    "ui",
    "kit",
    "let",
    "use",
    "input",
    "well",
    "little",
    "comma",
    "input",
    "inside",
    "ngmodel",
    "create",
    "new",
    "input",
    "input",
    "field",
    "give",
    "label",
    "going",
    "update",
    "listing",
    "price",
    "l",
    "one",
    "currency",
    "eath",
    "hard",
    "coded",
    "eath",
    "name",
    "new",
    "listing",
    "price",
    "type",
    "going",
    "equal",
    "number",
    "little",
    "backslash",
    "oops",
    "little",
    "backslash",
    "instead",
    "like",
    "cool",
    "modal",
    "pops",
    "gon",
    "na",
    "input",
    "actually",
    "test",
    "see",
    "working",
    "import",
    "nft",
    "box",
    "import",
    "update",
    "listing",
    "ngmodel",
    "slash",
    "update",
    "listing",
    "ngmodel",
    "oops",
    "sorry",
    "need",
    "parentheses",
    "top",
    "return",
    "right",
    "card",
    "add",
    "add",
    "another",
    "div",
    "though",
    "two",
    "react",
    "add",
    "another",
    "div",
    "say",
    "update",
    "listing",
    "ngmodel",
    "like",
    "little",
    "backslash",
    "right",
    "pass",
    "visible",
    "going",
    "say",
    "true",
    "listing",
    "ngmodel",
    "front",
    "end",
    "little",
    "refresh",
    "get",
    "little",
    "box",
    "like",
    "update",
    "listing",
    "price",
    "one",
    "currency",
    "close",
    "two",
    "technically",
    "right",
    "modalities",
    "true",
    "right",
    "refresh",
    "get",
    "little",
    "input",
    "pop",
    "little",
    "modal",
    "close",
    "twice",
    "two",
    "nf",
    "ton",
    "nf",
    "close",
    "ton",
    "change",
    "false",
    "go",
    "back",
    "front",
    "end",
    "little",
    "refresh",
    "boom",
    "false",
    "true",
    "save",
    "run",
    "gross",
    "delete",
    "delete",
    "false",
    "save",
    "front",
    "end",
    "anymore",
    "okay",
    "cool",
    "gon",
    "na",
    "tell",
    "ngmodel",
    "pop",
    "somebody",
    "clicks",
    "tea",
    "actually",
    "toggle",
    "actually",
    "make",
    "work",
    "going",
    "update",
    "card",
    "whenever",
    "click",
    "card",
    "going",
    "create",
    "function",
    "called",
    "handle",
    "card",
    "click",
    "handle",
    "card",
    "click",
    "going",
    "update",
    "variable",
    "whether",
    "show",
    "ngmodel",
    "going",
    "gon",
    "na",
    "say",
    "click",
    "card",
    "aka",
    "click",
    "dog",
    "going",
    "call",
    "function",
    "gon",
    "na",
    "say",
    "click",
    "equals",
    "handle",
    "card",
    "click",
    "animal",
    "card",
    "click",
    "going",
    "make",
    "function",
    "gon",
    "na",
    "say",
    "const",
    "handle",
    "card",
    "click",
    "equals",
    "function",
    "use",
    "arrow",
    "stuff",
    "say",
    "owned",
    "user",
    "user",
    "show",
    "ngmodel",
    "else",
    "call",
    "item",
    "function",
    "since",
    "want",
    "whole",
    "ui",
    "rerender",
    "change",
    "change",
    "variable",
    "show",
    "ngmodel",
    "going",
    "us",
    "state",
    "say",
    "const",
    "show",
    "ngmodel",
    "come",
    "set",
    "show",
    "ngmodel",
    "equals",
    "use",
    "state",
    "going",
    "start",
    "defaulted",
    "false",
    "default",
    "going",
    "show",
    "want",
    "owned",
    "user",
    "gon",
    "na",
    "say",
    "set",
    "show",
    "ngmodel",
    "true",
    "else",
    "right",
    "put",
    "console",
    "dot",
    "log",
    "let",
    "buy",
    "actually",
    "update",
    "bind",
    "item",
    "little",
    "bit",
    "later",
    "instead",
    "visible",
    "false",
    "visible",
    "equal",
    "show",
    "ngmodel",
    "show",
    "ngmodel",
    "variable",
    "okay",
    "great",
    "save",
    "go",
    "back",
    "ui",
    "right",
    "click",
    "hit",
    "inspect",
    "click",
    "ngmodel",
    "pop",
    "click",
    "click",
    "another",
    "one",
    "pop",
    "switch",
    "accounts",
    "connect",
    "switch",
    "click",
    "nothing",
    "happens",
    "go",
    "inspect",
    "go",
    "console",
    "click",
    "see",
    "let",
    "buy",
    "pop",
    "see",
    "little",
    "refresh",
    "click",
    "see",
    "let",
    "buy",
    "pop",
    "click",
    "let",
    "buy",
    "click",
    "let",
    "pilots",
    "pilots",
    "great",
    "cool",
    "word",
    "ngmodel",
    "actually",
    "show",
    "correctly",
    "let",
    "switch",
    "back",
    "person",
    "actually",
    "owns",
    "nft",
    "click",
    "want",
    "able",
    "hit",
    "ok",
    "submit",
    "want",
    "send",
    "transaction",
    "update",
    "price",
    "nft",
    "input",
    "label",
    "called",
    "change",
    "equals",
    "function",
    "call",
    "whenever",
    "updates",
    "gon",
    "na",
    "say",
    "change",
    "event",
    "going",
    "function",
    "going",
    "create",
    "function",
    "called",
    "set",
    "price",
    "update",
    "listing",
    "listing",
    "event",
    "dot",
    "target",
    "dot",
    "value",
    "want",
    "keep",
    "track",
    "whatever",
    "put",
    "call",
    "function",
    "update",
    "price",
    "already",
    "automatically",
    "create",
    "function",
    "event",
    "dot",
    "target",
    "dot",
    "value",
    "going",
    "whatever",
    "input",
    "box",
    "create",
    "set",
    "price",
    "update",
    "listing",
    "use",
    "date",
    "going",
    "want",
    "change",
    "ui",
    "based",
    "say",
    "const",
    "price",
    "date",
    "listing",
    "comma",
    "set",
    "price",
    "update",
    "listing",
    "equals",
    "use",
    "state",
    "zero",
    "start",
    "blank",
    "whatever",
    "going",
    "get",
    "updated",
    "like",
    "console",
    "dot",
    "log",
    "price",
    "update",
    "listing",
    "get",
    "back",
    "front",
    "end",
    "oops",
    "need",
    "import",
    "use",
    "state",
    "import",
    "use",
    "state",
    "react",
    "go",
    "back",
    "front",
    "end",
    "click",
    "right",
    "click",
    "inspect",
    "type",
    "one",
    "see",
    "114",
    "see",
    "let",
    "remove",
    "console",
    "dot",
    "log",
    "create",
    "field",
    "called",
    "okay",
    "going",
    "function",
    "call",
    "hit",
    "okay",
    "okay",
    "going",
    "equal",
    "function",
    "going",
    "use",
    "little",
    "arrow",
    "notation",
    "going",
    "call",
    "update",
    "listing",
    "function",
    "blockchain",
    "going",
    "need",
    "grab",
    "function",
    "use",
    "use",
    "function",
    "going",
    "import",
    "use",
    "web",
    "three",
    "contract",
    "react",
    "mirallas",
    "new",
    "hook",
    "say",
    "const",
    "run",
    "contract",
    "function",
    "called",
    "update",
    "listing",
    "equals",
    "use",
    "web",
    "three",
    "contract",
    "going",
    "function",
    "going",
    "call",
    "nft",
    "marketplace",
    "abi",
    "going",
    "nft",
    "marketplace",
    "api",
    "get",
    "import",
    "similar",
    "actually",
    "copy",
    "paste",
    "nft",
    "box",
    "import",
    "nft",
    "marketplace",
    "api",
    "dot",
    "dot",
    "constant",
    "send",
    "marketplace",
    "json",
    "gon",
    "na",
    "need",
    "contract",
    "address",
    "going",
    "input",
    "parameter",
    "update",
    "listing",
    "ngmodel",
    "even",
    "comma",
    "market",
    "place",
    "address",
    "copy",
    "place",
    "means",
    "nft",
    "box",
    "pretty",
    "soon",
    "going",
    "pass",
    "variables",
    "save",
    "second",
    "nft",
    "marketplace",
    "address",
    "marketplace",
    "address",
    "function",
    "name",
    "going",
    "called",
    "update",
    "listing",
    "smart",
    "contract",
    "params",
    "go",
    "update",
    "listing",
    "takes",
    "nft",
    "address",
    "token",
    "id",
    "new",
    "price",
    "nft",
    "address",
    "nft",
    "address",
    "say",
    "token",
    "id",
    "going",
    "token",
    "id",
    "new",
    "price",
    "price",
    "get",
    "price",
    "update",
    "listing",
    "convert",
    "human",
    "readable",
    "ethers",
    "import",
    "ethers",
    "ethers",
    "new",
    "price",
    "ethers",
    "dot",
    "utils",
    "dot",
    "parse",
    "ethers",
    "ether",
    "price",
    "update",
    "listing",
    "case",
    "blank",
    "say",
    "zero",
    "nft",
    "address",
    "token",
    "id",
    "marketplace",
    "address",
    "nft",
    "box",
    "gon",
    "na",
    "pass",
    "parameters",
    "visible",
    "also",
    "going",
    "token",
    "id",
    "going",
    "equal",
    "token",
    "id",
    "marketplace",
    "address",
    "going",
    "equal",
    "marketplace",
    "address",
    "nft",
    "address",
    "going",
    "equal",
    "nft",
    "address",
    "code",
    "test",
    "something",
    "going",
    "really",
    "annoying",
    "really",
    "annoying",
    "right",
    "let",
    "refresh",
    "website",
    "click",
    "thing",
    "pops",
    "hit",
    "x",
    "click",
    "nothing",
    "shows",
    "technically",
    "show",
    "ngmodel",
    "still",
    "true",
    "right",
    "even",
    "though",
    "exited",
    "want",
    "nft",
    "box",
    "update",
    "listing",
    "ngmodel",
    "also",
    "going",
    "pass",
    "close",
    "going",
    "pass",
    "hide",
    "ngmodel",
    "variable",
    "going",
    "create",
    "right",
    "show",
    "ngmodel",
    "set",
    "show",
    "ngmodel",
    "going",
    "create",
    "const",
    "eid",
    "ngmodel",
    "going",
    "function",
    "going",
    "say",
    "set",
    "show",
    "modal",
    "false",
    "going",
    "pass",
    "function",
    "update",
    "modal",
    "listing",
    "going",
    "comma",
    "close",
    "modal",
    "going",
    "say",
    "close",
    "cancel",
    "going",
    "going",
    "call",
    "close",
    "function",
    "close",
    "button",
    "pressed",
    "also",
    "going",
    "call",
    "close",
    "function",
    "refresh",
    "website",
    "click",
    "modal",
    "pops",
    "click",
    "x",
    "click",
    "pop",
    "back",
    "properly",
    "setting",
    "false",
    "resetting",
    "true",
    "actually",
    "send",
    "update",
    "listing",
    "function",
    "going",
    "pass",
    "another",
    "thing",
    "another",
    "variable",
    "going",
    "pass",
    "okay",
    "going",
    "function",
    "well",
    "going",
    "call",
    "update",
    "listing",
    "created",
    "always",
    "good",
    "idea",
    "add",
    "error",
    "say",
    "error",
    "take",
    "error",
    "function",
    "console",
    "dot",
    "log",
    "error",
    "needs",
    "squiggly",
    "brackets",
    "like",
    "contract",
    "address",
    "wrong",
    "make",
    "contract",
    "con",
    "tract",
    "address",
    "spell",
    "correctly",
    "spelled",
    "correctly",
    "let",
    "go",
    "back",
    "ui",
    "give",
    "little",
    "refresh",
    "click",
    "add",
    "one",
    "see",
    "metamask",
    "pop",
    "working",
    "perfectly",
    "going",
    "cancel",
    "apps",
    "gon",
    "na",
    "freak",
    "stuff",
    "okay",
    "fantastically",
    "okay",
    "app",
    "popped",
    "like",
    "good",
    "little",
    "error",
    "handling",
    "like",
    "add",
    "run",
    "contract",
    "functions",
    "let",
    "also",
    "success",
    "let",
    "say",
    "go",
    "successfully",
    "call",
    "function",
    "called",
    "handle",
    "update",
    "listing",
    "success",
    "function",
    "call",
    "goes",
    "correctly",
    "top",
    "let",
    "make",
    "new",
    "function",
    "say",
    "const",
    "handle",
    "update",
    "listening",
    "success",
    "going",
    "new",
    "function",
    "using",
    "arrow",
    "syntax",
    "setup",
    "new",
    "notification",
    "web",
    "application",
    "us",
    "notifications",
    "going",
    "use",
    "web",
    "three",
    "ui",
    "kits",
    "use",
    "notification",
    "going",
    "notification",
    "service",
    "used",
    "last",
    "one",
    "top",
    "import",
    "use",
    "notification",
    "say",
    "right",
    "component",
    "say",
    "const",
    "dispatch",
    "equals",
    "use",
    "notification",
    "since",
    "using",
    "notifications",
    "back",
    "import",
    "import",
    "notification",
    "provider",
    "web",
    "three",
    "ui",
    "kit",
    "inside",
    "morales",
    "provider",
    "add",
    "notification",
    "provider",
    "around",
    "header",
    "component",
    "context",
    "handle",
    "update",
    "listing",
    "success",
    "inside",
    "function",
    "say",
    "dispatch",
    "say",
    "type",
    "going",
    "success",
    "message",
    "listing",
    "updated",
    "title",
    "listing",
    "updated",
    "please",
    "refresh",
    "please",
    "refresh",
    "move",
    "blocks",
    "position",
    "top",
    "right",
    "clothes",
    "clothes",
    "say",
    "set",
    "price",
    "update",
    "listing",
    "back",
    "zero",
    "also",
    "editing",
    "little",
    "bit",
    "future",
    "realized",
    "actually",
    "forgot",
    "add",
    "tx",
    "lot",
    "handle",
    "functions",
    "whenever",
    "call",
    "one",
    "run",
    "contract",
    "functions",
    "like",
    "saying",
    "error",
    "onsuccess",
    "onsuccess",
    "automatically",
    "passes",
    "result",
    "call",
    "whatever",
    "callback",
    "function",
    "example",
    "listing",
    "returns",
    "transaction",
    "pass",
    "transaction",
    "whatever",
    "add",
    "onsuccess",
    "actually",
    "transaction",
    "input",
    "parameter",
    "would",
    "transaction",
    "going",
    "go",
    "blockchain",
    "know",
    "update",
    "price",
    "actually",
    "want",
    "change",
    "regular",
    "function",
    "async",
    "function",
    "actually",
    "await",
    "tx",
    "dot",
    "wait",
    "one",
    "want",
    "say",
    "hey",
    "success",
    "know",
    "listing",
    "updated",
    "transaction",
    "actually",
    "goes",
    "want",
    "transaction",
    "go",
    "first",
    "want",
    "pop",
    "dispatch",
    "saying",
    "hey",
    "gone",
    "additionally",
    "actually",
    "call",
    "modells",
    "okay",
    "onsuccess",
    "pass",
    "referencing",
    "name",
    "function",
    "arrow",
    "syntax",
    "anymore",
    "like",
    "say",
    "hey",
    "onsuccess",
    "going",
    "go",
    "ahead",
    "pass",
    "results",
    "actually",
    "call",
    "look",
    "github",
    "repo",
    "associated",
    "go",
    "components",
    "go",
    "video",
    "forgot",
    "add",
    "await",
    "tx",
    "dot",
    "wait",
    "one",
    "github",
    "repo",
    "demoing",
    "things",
    "video",
    "dispatch",
    "gon",
    "na",
    "pop",
    "transaction",
    "actually",
    "finishes",
    "going",
    "want",
    "let",
    "know",
    "back",
    "video",
    "little",
    "success",
    "thing",
    "pop",
    "successful",
    "thing",
    "call",
    "going",
    "omit",
    "item",
    "listed",
    "inside",
    "morales",
    "dashboard",
    "price",
    "actually",
    "update",
    "active",
    "item",
    "cloud",
    "functions",
    "going",
    "put",
    "together",
    "front",
    "end",
    "marketplace",
    "owned",
    "click",
    "update",
    "listing",
    "gon",
    "na",
    "hit",
    "ok",
    "meta",
    "masks",
    "gon",
    "na",
    "pop",
    "gon",
    "na",
    "go",
    "ahead",
    "confirm",
    "ran",
    "error",
    "need",
    "click",
    "metamask",
    "need",
    "reset",
    "account",
    "going",
    "settings",
    "advanced",
    "reset",
    "account",
    "okay",
    "let",
    "go",
    "ahead",
    "metamask",
    "popped",
    "gon",
    "na",
    "go",
    "ahead",
    "confirm",
    "closed",
    "pop",
    "modal",
    "got",
    "little",
    "notification",
    "see",
    "activity",
    "transaction",
    "indeed",
    "completed",
    "go",
    "active",
    "item",
    "give",
    "little",
    "refresh",
    "right",
    "see",
    "item",
    "listed",
    "event",
    "issue",
    "confirmed",
    "yet",
    "going",
    "need",
    "going",
    "need",
    "move",
    "blocks",
    "one",
    "nft",
    "marketplace",
    "going",
    "create",
    "new",
    "script",
    "new",
    "file",
    "called",
    "mind",
    "dot",
    "jas",
    "move",
    "blocks",
    "going",
    "say",
    "const",
    "move",
    "blocks",
    "equals",
    "require",
    "dot",
    "slash",
    "utils",
    "slash",
    "move",
    "blocks",
    "say",
    "const",
    "blocks",
    "equals",
    "const",
    "sleep",
    "amount",
    "equals",
    "1000",
    "async",
    "function",
    "mine",
    "await",
    "move",
    "blocks",
    "blocks",
    "parameter",
    "sleep",
    "sleep",
    "amount",
    "equal",
    "sleep",
    "amount",
    "script",
    "add",
    "copy",
    "paste",
    "syntax",
    "mine",
    "want",
    "mine",
    "two",
    "blocks",
    "run",
    "yarn",
    "art",
    "hat",
    "run",
    "scripts",
    "mind",
    "jas",
    "dash",
    "dash",
    "network",
    "local",
    "host",
    "going",
    "mine",
    "two",
    "blocks",
    "go",
    "back",
    "database",
    "go",
    "back",
    "active",
    "items",
    "see",
    "updated",
    "item",
    "listed",
    "2500",
    "event",
    "confirmed",
    "transaction",
    "get",
    "confirm",
    "excellent",
    "means",
    "since",
    "confirmed",
    "back",
    "front",
    "end",
    "give",
    "little",
    "refresh",
    "see",
    "pup",
    "worth",
    "25",
    "eath",
    "awesome",
    "updating",
    "ngmodel",
    "working",
    "perfectly",
    "excellent",
    "job",
    "let",
    "go",
    "readme",
    "nft",
    "update",
    "listing",
    "checkmark",
    "excellent",
    "next",
    "want",
    "buy",
    "listing",
    "okay",
    "let",
    "go",
    "back",
    "website",
    "let",
    "switch",
    "users",
    "different",
    "account",
    "probably",
    "going",
    "want",
    "account",
    "money",
    "let",
    "go",
    "ahead",
    "send",
    "account",
    "money",
    "transfer",
    "accounts",
    "send",
    "100",
    "eath",
    "account",
    "one",
    "confirm",
    "hard",
    "hat",
    "chain",
    "alright",
    "great",
    "go",
    "ahead",
    "switch",
    "account",
    "one",
    "100",
    "eath",
    "okay",
    "great",
    "pops",
    "cost",
    "less",
    "100",
    "eath",
    "gon",
    "na",
    "plenty",
    "us",
    "test",
    "let",
    "go",
    "back",
    "box",
    "think",
    "somewhere",
    "said",
    "little",
    "handle",
    "card",
    "click",
    "owned",
    "user",
    "modal",
    "pop",
    "let",
    "functionality",
    "functionality",
    "gon",
    "na",
    "go",
    "ahead",
    "another",
    "run",
    "contract",
    "function",
    "const",
    "run",
    "contract",
    "function",
    "call",
    "one",
    "item",
    "equal",
    "use",
    "web",
    "three",
    "contract",
    "going",
    "abi",
    "nft",
    "marketplace",
    "api",
    "contract",
    "address",
    "going",
    "market",
    "place",
    "address",
    "function",
    "name",
    "going",
    "item",
    "message",
    "value",
    "going",
    "price",
    "nft",
    "need",
    "send",
    "amount",
    "buy",
    "item",
    "params",
    "going",
    "nft",
    "address",
    "going",
    "nft",
    "address",
    "token",
    "id",
    "going",
    "token",
    "id",
    "item",
    "handle",
    "card",
    "click",
    "say",
    "okay",
    "said",
    "show",
    "ngmodel",
    "true",
    "otherwise",
    "gon",
    "na",
    "call",
    "item",
    "going",
    "air",
    "air",
    "going",
    "function",
    "going",
    "console",
    "dot",
    "log",
    "air",
    "onsuccess",
    "function",
    "call",
    "handle",
    "item",
    "success",
    "create",
    "new",
    "handler",
    "right",
    "underneath",
    "handled",
    "cart",
    "click",
    "const",
    "handled",
    "item",
    "success",
    "equals",
    "function",
    "also",
    "little",
    "notification",
    "going",
    "import",
    "going",
    "import",
    "use",
    "notification",
    "web",
    "ui",
    "kit",
    "going",
    "say",
    "const",
    "dispatch",
    "equals",
    "use",
    "notification",
    "handled",
    "item",
    "success",
    "gon",
    "na",
    "say",
    "dispatch",
    "type",
    "success",
    "message",
    "item",
    "bought",
    "title",
    "also",
    "item",
    "bought",
    "pole",
    "position",
    "top",
    "right",
    "handle",
    "card",
    "click",
    "going",
    "show",
    "update",
    "listing",
    "ngmodel",
    "already",
    "someone",
    "gon",
    "na",
    "buy",
    "let",
    "go",
    "back",
    "currently",
    "account",
    "nf",
    "let",
    "go",
    "ahead",
    "click",
    "metamask",
    "indeed",
    "show",
    "25",
    "eath",
    "crazy",
    "expensive",
    "let",
    "go",
    "ahead",
    "confirm",
    "item",
    "bought",
    "go",
    "ahead",
    "click",
    "little",
    "x",
    "go",
    "meta",
    "mask",
    "transaction",
    "pending",
    "gone",
    "fantastic",
    "okay",
    "homepage",
    "done",
    "show",
    "recently",
    "listed",
    "nf",
    "update",
    "listing",
    "buy",
    "listing",
    "time",
    "cell",
    "page",
    "last",
    "thing",
    "need",
    "cell",
    "page",
    "let",
    "get",
    "cell",
    "page",
    "let",
    "get",
    "done",
    "pages",
    "cell",
    "nft",
    "page",
    "right",
    "whole",
    "lot",
    "nothing",
    "front",
    "end",
    "go",
    "whole",
    "lot",
    "actually",
    "list",
    "nft",
    "marketplace",
    "also",
    "needed",
    "add",
    "withdraw",
    "proceeds",
    "add",
    "probably",
    "going",
    "something",
    "going",
    "want",
    "allow",
    "people",
    "well",
    "let",
    "get",
    "started",
    "remove",
    "head",
    "stuff",
    "adding",
    "main",
    "page",
    "us",
    "submit",
    "new",
    "nft",
    "probably",
    "gon",
    "na",
    "need",
    "space",
    "add",
    "address",
    "entity",
    "token",
    "id",
    "nft",
    "stuff",
    "gon",
    "na",
    "need",
    "form",
    "guess",
    "also",
    "grab",
    "form",
    "web",
    "ui",
    "kit",
    "well",
    "gon",
    "na",
    "go",
    "ahead",
    "cell",
    "nmc",
    "page",
    "going",
    "import",
    "form",
    "web",
    "three",
    "ui",
    "kit",
    "going",
    "create",
    "new",
    "form",
    "cell",
    "page",
    "parameters",
    "add",
    "form",
    "find",
    "documentation",
    "going",
    "add",
    "one",
    "main",
    "pieces",
    "going",
    "data",
    "piece",
    "going",
    "object",
    "list",
    "different",
    "fields",
    "put",
    "form",
    "maybe",
    "first",
    "one",
    "name",
    "nft",
    "address",
    "gon",
    "na",
    "type",
    "text",
    "excuse",
    "going",
    "list",
    "list",
    "objects",
    "like",
    "save",
    "go",
    "back",
    "cell",
    "page",
    "see",
    "empty",
    "address",
    "little",
    "submit",
    "button",
    "right",
    "whole",
    "lot",
    "nothing",
    "nft",
    "address",
    "take",
    "text",
    "maybe",
    "also",
    "foot",
    "width",
    "50",
    "percent",
    "starting",
    "value",
    "blank",
    "key",
    "nft",
    "address",
    "else",
    "need",
    "going",
    "need",
    "give",
    "token",
    "id",
    "say",
    "name",
    "token",
    "id",
    "type",
    "going",
    "number",
    "value",
    "start",
    "blank",
    "key",
    "token",
    "id",
    "next",
    "going",
    "need",
    "price",
    "say",
    "name",
    "price",
    "eath",
    "type",
    "number",
    "value",
    "blank",
    "key",
    "price",
    "need",
    "form",
    "tags",
    "delete",
    "second",
    "one",
    "auto",
    "close",
    "one",
    "tag",
    "title",
    "equals",
    "sell",
    "nf",
    "id",
    "equals",
    "main",
    "form",
    "cool",
    "take",
    "empty",
    "address",
    "token",
    "id",
    "new",
    "price",
    "title",
    "cellular",
    "nft",
    "great",
    "looks",
    "really",
    "nice",
    "right",
    "form",
    "anything",
    "probably",
    "want",
    "give",
    "functionality",
    "actually",
    "stuff",
    "say",
    "submit",
    "create",
    "new",
    "function",
    "actually",
    "list",
    "nf",
    "going",
    "create",
    "function",
    "called",
    "approve",
    "list",
    "approve",
    "marketplace",
    "pull",
    "nft",
    "wallets",
    "going",
    "create",
    "new",
    "function",
    "sync",
    "function",
    "approven",
    "list",
    "going",
    "take",
    "data",
    "input",
    "parameter",
    "form",
    "hit",
    "submit",
    "automatically",
    "going",
    "pass",
    "data",
    "object",
    "approved",
    "list",
    "function",
    "going",
    "get",
    "value",
    "address",
    "value",
    "token",
    "id",
    "value",
    "price",
    "async",
    "function",
    "approven",
    "list",
    "console",
    "dot",
    "log",
    "approving",
    "contract",
    "nft",
    "address",
    "going",
    "come",
    "data",
    "object",
    "going",
    "data",
    "dot",
    "data",
    "index",
    "zero",
    "zero",
    "object",
    "going",
    "address",
    "input",
    "result",
    "token",
    "id",
    "going",
    "equal",
    "data",
    "dot",
    "data",
    "one",
    "one",
    "going",
    "token",
    "id",
    "input",
    "result",
    "price",
    "going",
    "equal",
    "ethers",
    "dot",
    "utils",
    "dot",
    "parse",
    "units",
    "data",
    "dot",
    "data",
    "input",
    "result",
    "comma",
    "string",
    "going",
    "get",
    "price",
    "eath",
    "human",
    "readable",
    "form",
    "going",
    "convert",
    "aetherium",
    "readable",
    "form",
    "going",
    "pass",
    "string",
    "returns",
    "big",
    "number",
    "want",
    "nft",
    "address",
    "token",
    "id",
    "price",
    "new",
    "listing",
    "say",
    "const",
    "approve",
    "options",
    "equals",
    "little",
    "function",
    "abi",
    "going",
    "nft",
    "abi",
    "need",
    "import",
    "need",
    "import",
    "ethers",
    "ethers",
    "also",
    "need",
    "import",
    "nft",
    "abi",
    "nft",
    "abi",
    "dot",
    "dot",
    "constants",
    "slash",
    "basic",
    "dot",
    "json",
    "copied",
    "pasted",
    "nft",
    "box",
    "contract",
    "address",
    "going",
    "nft",
    "address",
    "function",
    "name",
    "going",
    "approve",
    "params",
    "going",
    "two",
    "marketplace",
    "address",
    "going",
    "define",
    "second",
    "token",
    "id",
    "token",
    "id",
    "marketplace",
    "address",
    "nft",
    "box",
    "getting",
    "directly",
    "index",
    "index",
    "getting",
    "database",
    "want",
    "app",
    "smart",
    "enough",
    "able",
    "grab",
    "nft",
    "marketplace",
    "marketplace",
    "address",
    "go",
    "constants",
    "right",
    "actually",
    "network",
    "mapping",
    "going",
    "want",
    "grab",
    "right",
    "top",
    "saying",
    "const",
    "marketplace",
    "address",
    "equals",
    "network",
    "mapping",
    "network",
    "mapping",
    "chain",
    "id",
    "entity",
    "marketplace",
    "address",
    "zero",
    "index",
    "network",
    "mapping",
    "chain",
    "id",
    "going",
    "get",
    "honest",
    "chain",
    "id",
    "equals",
    "us",
    "morales",
    "chain",
    "id",
    "actually",
    "comes",
    "like",
    "said",
    "wax",
    "hex",
    "form",
    "morales",
    "gon",
    "na",
    "convert",
    "chain",
    "id",
    "string",
    "readable",
    "version",
    "say",
    "const",
    "chain",
    "string",
    "equals",
    "chain",
    "id",
    "tertiary",
    "operator",
    "chain",
    "id",
    "exists",
    "parse",
    "int",
    "chain",
    "string",
    "parse",
    "hex",
    "readable",
    "version",
    "string",
    "otherwise",
    "say",
    "chain",
    "id",
    "string",
    "network",
    "mapping",
    "chain",
    "id",
    "string",
    "dot",
    "nft",
    "marketplace",
    "index",
    "zero",
    "going",
    "marketplace",
    "address",
    "got",
    "marketplace",
    "address",
    "need",
    "call",
    "approved",
    "function",
    "nft",
    "call",
    "running",
    "contract",
    "function",
    "proof",
    "actually",
    "going",
    "little",
    "bit",
    "differently",
    "going",
    "say",
    "const",
    "run",
    "contract",
    "function",
    "equals",
    "use",
    "web",
    "three",
    "contract",
    "could",
    "import",
    "run",
    "contract",
    "function",
    "pass",
    "options",
    "like",
    "gon",
    "na",
    "gon",
    "na",
    "say",
    "await",
    "contract",
    "function",
    "async",
    "function",
    "await",
    "run",
    "contract",
    "function",
    "gon",
    "na",
    "say",
    "params",
    "going",
    "approve",
    "options",
    "gon",
    "na",
    "say",
    "onsuccess",
    "going",
    "something",
    "going",
    "say",
    "error",
    "also",
    "going",
    "error",
    "little",
    "arrow",
    "function",
    "console",
    "dot",
    "log",
    "error",
    "success",
    "send",
    "transaction",
    "approve",
    "goes",
    "going",
    "want",
    "call",
    "list",
    "function",
    "right",
    "underneath",
    "call",
    "async",
    "async",
    "function",
    "handle",
    "approve",
    "success",
    "going",
    "take",
    "nft",
    "address",
    "token",
    "id",
    "price",
    "put",
    "parameters",
    "run",
    "contract",
    "function",
    "goes",
    "going",
    "call",
    "handle",
    "proof",
    "success",
    "pass",
    "end",
    "address",
    "token",
    "id",
    "price",
    "say",
    "console",
    "dot",
    "log",
    "okay",
    "time",
    "list",
    "thing",
    "const",
    "list",
    "options",
    "equals",
    "going",
    "options",
    "calling",
    "list",
    "function",
    "api",
    "going",
    "marketplace",
    "time",
    "nft",
    "market",
    "place",
    "abi",
    "going",
    "import",
    "going",
    "go",
    "back",
    "nft",
    "box",
    "gon",
    "na",
    "copy",
    "line",
    "paste",
    "top",
    "going",
    "api",
    "contract",
    "address",
    "going",
    "marketplace",
    "address",
    "already",
    "function",
    "name",
    "going",
    "list",
    "item",
    "params",
    "going",
    "nf",
    "address",
    "nft",
    "address",
    "token",
    "id",
    "token",
    "id",
    "price",
    "price",
    "options",
    "await",
    "run",
    "contract",
    "function",
    "params",
    "list",
    "options",
    "say",
    "onsuccess",
    "arrow",
    "function",
    "handle",
    "list",
    "success",
    "function",
    "made",
    "yet",
    "say",
    "air",
    "error",
    "say",
    "console",
    "dot",
    "log",
    "error",
    "okay",
    "let",
    "make",
    "handle",
    "list",
    "success",
    "handle",
    "one",
    "spell",
    "handle",
    "correctly",
    "handle",
    "success",
    "async",
    "function",
    "also",
    "going",
    "call",
    "dispatch",
    "make",
    "little",
    "notification",
    "going",
    "grab",
    "web",
    "three",
    "ui",
    "kit",
    "use",
    "notification",
    "say",
    "const",
    "dispatch",
    "equals",
    "use",
    "notification",
    "handle",
    "success",
    "say",
    "dispatch",
    "type",
    "success",
    "message",
    "nft",
    "listing",
    "title",
    "nft",
    "listed",
    "position",
    "top",
    "bar",
    "cool",
    "also",
    "gon",
    "na",
    "grab",
    "us",
    "morales",
    "react",
    "morales",
    "import",
    "us",
    "morales",
    "react",
    "else",
    "let",
    "import",
    "network",
    "mapping",
    "import",
    "network",
    "mapping",
    "dot",
    "dot",
    "slash",
    "constants",
    "slash",
    "network",
    "mapping",
    "dot",
    "json",
    "spelled",
    "contract",
    "address",
    "wrong",
    "good",
    "front",
    "end",
    "give",
    "refresh",
    "us",
    "web",
    "three",
    "contract",
    "defined",
    "let",
    "get",
    "react",
    "moralss",
    "well",
    "save",
    "refresh",
    "front",
    "end",
    "tada",
    "good",
    "go",
    "alright",
    "test",
    "going",
    "want",
    "going",
    "want",
    "create",
    "another",
    "script",
    "back",
    "heart",
    "nft",
    "marketplace",
    "looking",
    "scripts",
    "going",
    "create",
    "new",
    "file",
    "called",
    "going",
    "list",
    "time",
    "going",
    "mint",
    "going",
    "mint",
    "nf",
    "list",
    "ui",
    "actually",
    "copy",
    "mminton",
    "list",
    "code",
    "paste",
    "remove",
    "approval",
    "listing",
    "code",
    "boom",
    "remove",
    "remove",
    "remove",
    "need",
    "change",
    "name",
    "mint",
    "well",
    "remove",
    "price",
    "well",
    "change",
    "mint",
    "script",
    "call",
    "well",
    "mint",
    "nft",
    "also",
    "get",
    "rid",
    "nft",
    "marketplace",
    "actually",
    "probably",
    "want",
    "token",
    "id",
    "know",
    "let",
    "const",
    "token",
    "id",
    "equals",
    "let",
    "actually",
    "get",
    "receipt",
    "const",
    "mint",
    "tx",
    "receipt",
    "receipt",
    "equals",
    "going",
    "copy",
    "mminton",
    "receipt",
    "cons",
    "token",
    "id",
    "equals",
    "paste",
    "console",
    "dot",
    "log",
    "got",
    "token",
    "id",
    "string",
    "interpolates",
    "token",
    "id",
    "hard",
    "hat",
    "run",
    "scripts",
    "mins",
    "dot",
    "j",
    "dash",
    "dash",
    "network",
    "local",
    "host",
    "going",
    "mint",
    "nf",
    "got",
    "token",
    "id",
    "six",
    "means",
    "know",
    "token",
    "id",
    "six",
    "list",
    "entity",
    "let",
    "also",
    "add",
    "address",
    "let",
    "console",
    "dot",
    "log",
    "nftl",
    "address",
    "going",
    "string",
    "interpolation",
    "know",
    "let",
    "make",
    "mint",
    "dot",
    "j",
    "okay",
    "cool",
    "got",
    "token",
    "id",
    "seven",
    "address",
    "grab",
    "nft",
    "address",
    "account",
    "one",
    "let",
    "go",
    "account",
    "three",
    "account",
    "done",
    "imports",
    "switch",
    "accounts",
    "going",
    "want",
    "refresh",
    "page",
    "address",
    "seven",
    "submit",
    "metamask",
    "pops",
    "give",
    "permission",
    "yes",
    "okay",
    "time",
    "list",
    "one",
    "pen",
    "okay",
    "local",
    "host",
    "list",
    "item",
    "see",
    "data",
    "everything",
    "okay",
    "let",
    "go",
    "ahead",
    "confirm",
    "nft",
    "listed",
    "okay",
    "okay",
    "okay",
    "okay",
    "good",
    "get",
    "morales",
    "catch",
    "speed",
    "back",
    "node",
    "let",
    "go",
    "ahead",
    "run",
    "yarn",
    "rt",
    "hat",
    "run",
    "scripts",
    "mine",
    "dot",
    "j",
    "dash",
    "dash",
    "network",
    "local",
    "host",
    "going",
    "mine",
    "two",
    "blocks",
    "go",
    "item",
    "listed",
    "give",
    "little",
    "refresh",
    "go",
    "active",
    "item",
    "see",
    "new",
    "item",
    "listed",
    "eath",
    "database",
    "fantastic",
    "listed",
    "go",
    "back",
    "let",
    "make",
    "let",
    "move",
    "one",
    "let",
    "list",
    "second",
    "one",
    "see",
    "actually",
    "working",
    "okay",
    "token",
    "id",
    "eight",
    "let",
    "grab",
    "address",
    "let",
    "give",
    "refresh",
    "paste",
    "token",
    "id",
    "eight",
    "let",
    "submit",
    "approve",
    "yes",
    "send",
    "yes",
    "okay",
    "let",
    "go",
    "ahead",
    "mine",
    "two",
    "blocks",
    "going",
    "hit",
    "go",
    "back",
    "mine",
    "run",
    "mining",
    "moving",
    "blocks",
    "okay",
    "great",
    "go",
    "back",
    "home",
    "see",
    "three",
    "nf",
    "listed",
    "original",
    "one",
    "two",
    "listed",
    "eight",
    "seven",
    "listed",
    "nft",
    "marketplace",
    "exciting",
    "listing",
    "working",
    "correctly",
    "okay",
    "due",
    "fact",
    "lesson",
    "already",
    "incredibly",
    "long",
    "actually",
    "decided",
    "cut",
    "part",
    "withdraw",
    "bit",
    "really",
    "learn",
    "anything",
    "new",
    "however",
    "feel",
    "free",
    "jump",
    "back",
    "get",
    "every",
    "bit",
    "associated",
    "scores",
    "withdrawal",
    "functionality",
    "want",
    "implement",
    "otherwise",
    "feel",
    "free",
    "skip",
    "move",
    "ahead",
    "incredibly",
    "powerful",
    "incredibly",
    "excited",
    "made",
    "far",
    "awesome",
    "made",
    "decentralized",
    "marketplace",
    "built",
    "front",
    "end",
    "top",
    "allow",
    "anybody",
    "interact",
    "marketplace",
    "easily",
    "huge",
    "huge",
    "congratulations",
    "oh",
    "perfect",
    "time",
    "go",
    "take",
    "break",
    "celebrate",
    "great",
    "time",
    "ping",
    "twitter",
    "ping",
    "twitter",
    "saying",
    "hey",
    "patrick",
    "completed",
    "nft",
    "marketplace",
    "full",
    "stack",
    "front",
    "end",
    "part",
    "free",
    "code",
    "camp",
    "course",
    "know",
    "build",
    "full",
    "stack",
    "front",
    "end",
    "top",
    "smart",
    "contract",
    "applications",
    "pumped",
    "awesome",
    "ca",
    "understate",
    "excited",
    "made",
    "far",
    "learning",
    "working",
    "ton",
    "technologies",
    "solidity",
    "smart",
    "contracts",
    "front",
    "end",
    "full",
    "stack",
    "lot",
    "stuff",
    "really",
    "proud",
    "huge",
    "congratulations",
    "sure",
    "absolutely",
    "give",
    "pat",
    "back",
    "get",
    "ready",
    "continue",
    "next",
    "section",
    "done",
    "using",
    "morales",
    "back",
    "end",
    "switch",
    "instead",
    "indexing",
    "events",
    "centralized",
    "server",
    "going",
    "learn",
    "build",
    "using",
    "graph",
    "decentralized",
    "event",
    "indexer",
    "use",
    "lot",
    "code",
    "going",
    "exactly",
    "instead",
    "us",
    "starting",
    "new",
    "going",
    "first",
    "close",
    "local",
    "stuff",
    "close",
    "things",
    "close",
    "terminals",
    "finally",
    "really",
    "exciting",
    "folder",
    "going",
    "actually",
    "going",
    "copy",
    "everything",
    "new",
    "folder",
    "going",
    "cd",
    "directory",
    "going",
    "make",
    "new",
    "one",
    "called",
    "next",
    "jas",
    "marketplace",
    "graph",
    "dash",
    "fcc",
    "code",
    "section",
    "going",
    "front",
    "end",
    "graph",
    "indexer",
    "gon",
    "na",
    "make",
    "another",
    "repo",
    "get",
    "little",
    "bit",
    "changes",
    "going",
    "section",
    "going",
    "going",
    "make",
    "new",
    "folder",
    "going",
    "copy",
    "dash",
    "next",
    "jas",
    "ft",
    "marketplace",
    "fcc",
    "next",
    "jas",
    "nft",
    "marketplace",
    "graph",
    "fcc",
    "going",
    "copy",
    "recursively",
    "everything",
    "inside",
    "folder",
    "created",
    "new",
    "one",
    "going",
    "make",
    "lot",
    "adjustments",
    "might",
    "take",
    "little",
    "bit",
    "time",
    "run",
    "got",
    "lot",
    "stuff",
    "folder",
    "alright",
    "done",
    "cd",
    "next",
    "jas",
    "ft",
    "marketplace",
    "graph",
    "fcc",
    "code",
    "period",
    "open",
    "new",
    "code",
    "editor",
    "always",
    "file",
    "open",
    "folder",
    "open",
    "like",
    "going",
    "learn",
    "exact",
    "project",
    "instead",
    "using",
    "mirallas",
    "using",
    "graph",
    "one",
    "things",
    "first",
    "going",
    "actually",
    "going",
    "deploy",
    "contracts",
    "rink",
    "going",
    "grab",
    "marketplace",
    "soul",
    "pull",
    "going",
    "grab",
    "hard",
    "hat",
    "marketplace",
    "dot",
    "soul",
    "project",
    "pull",
    "first",
    "going",
    "run",
    "deploy",
    "script",
    "rink",
    "hopefully",
    "got",
    "deploy",
    "stuff",
    "set",
    "correctly",
    "arguments",
    "go",
    "correctly",
    "rink",
    "v",
    "well",
    "gon",
    "na",
    "go",
    "ahead",
    "run",
    "yarn",
    "hard",
    "hat",
    "deploy",
    "dash",
    "dash",
    "network",
    "rinkeby",
    "make",
    "sure",
    "going",
    "work",
    "rinkeby",
    "let",
    "check",
    "hard",
    "hat",
    "config",
    "okay",
    "networks",
    "looks",
    "like",
    "rigby",
    "stuff",
    "networks",
    "okay",
    "got",
    "rpc",
    "url",
    "getting",
    "environment",
    "variables",
    "private",
    "key",
    "private",
    "key",
    "also",
    "getting",
    "environment",
    "variables",
    "chain",
    "id",
    "block",
    "confirmations",
    "save",
    "deployments",
    "let",
    "go",
    "ahead",
    "run",
    "going",
    "go",
    "ahead",
    "deploying",
    "nft",
    "marketplace",
    "rigby",
    "network",
    "deploy",
    "script",
    "also",
    "id",
    "verification",
    "verify",
    "well",
    "ca",
    "really",
    "follow",
    "along",
    "section",
    "without",
    "deploying",
    "marketplace",
    "rink",
    "deploy",
    "rank",
    "b",
    "whatever",
    "test",
    "net",
    "recommended",
    "lesson",
    "15",
    "section",
    "go",
    "alright",
    "great",
    "deployed",
    "nfc",
    "marketplace",
    "gon",
    "na",
    "go",
    "ahead",
    "deploy",
    "basic",
    "nft",
    "done",
    "deploying",
    "start",
    "updating",
    "front",
    "end",
    "code",
    "work",
    "graph",
    "instead",
    "mirallas",
    "okay",
    "verified",
    "everything",
    "looks",
    "great",
    "going",
    "verify",
    "basic",
    "nft",
    "verified",
    "awesome",
    "nft",
    "marketplace",
    "deployed",
    "ring",
    "p",
    "basic",
    "nft",
    "deployed",
    "rink",
    "verified",
    "sure",
    "take",
    "note",
    "going",
    "need",
    "moving",
    "graph",
    "section",
    "let",
    "grab",
    "code",
    "editor",
    "titled",
    "next",
    "jas",
    "ft",
    "marketplace",
    "graph",
    "let",
    "get",
    "going",
    "deployed",
    "rink",
    "forgot",
    "add",
    "code",
    "update",
    "network",
    "mapping",
    "however",
    "go",
    "back",
    "open",
    "back",
    "code",
    "dot",
    "dot",
    "next",
    "jas",
    "nft",
    "marketplace",
    "fcc",
    "network",
    "mapping",
    "new",
    "entry",
    "rink",
    "b",
    "correctly",
    "let",
    "copy",
    "network",
    "mapping",
    "paste",
    "network",
    "next",
    "gs",
    "ft",
    "marketplace",
    "graph",
    "section",
    "manually",
    "add",
    "new",
    "entry",
    "right",
    "want",
    "add",
    "network",
    "id",
    "network",
    "marketplace",
    "address",
    "network",
    "marketplace",
    "deployed",
    "going",
    "delete",
    "cloud",
    "functions",
    "bit",
    "goodbye",
    "since",
    "working",
    "server",
    "anymore",
    "gon",
    "na",
    "cloud",
    "functions",
    "back",
    "end",
    "run",
    "gon",
    "na",
    "move",
    "trash",
    "goodbye",
    "next",
    "need",
    "frp",
    "anymore",
    "going",
    "connecting",
    "local",
    "blockchain",
    "graph",
    "going",
    "working",
    "test",
    "net",
    "let",
    "go",
    "ahead",
    "delete",
    "goodbye",
    "next",
    "pages",
    "app",
    "dot",
    "j",
    "right",
    "connecting",
    "morales",
    "provider",
    "like",
    "going",
    "switch",
    "back",
    "initiate",
    "allies",
    "mount",
    "going",
    "go",
    "back",
    "false",
    "longer",
    "going",
    "connect",
    "morales",
    "database",
    "like",
    "going",
    "use",
    "hooks",
    "thing",
    "going",
    "change",
    "right",
    "getting",
    "list",
    "nf",
    "ts",
    "morales",
    "query",
    "going",
    "change",
    "let",
    "update",
    "readme",
    "gon",
    "na",
    "say",
    "instead",
    "reading",
    "events",
    "ralis",
    "first",
    "going",
    "index",
    "graph",
    "going",
    "read",
    "graph",
    "question",
    "graph",
    "graph",
    "going",
    "decentralized",
    "layer",
    "storing",
    "event",
    "data",
    "blockchains",
    "different",
    "storage",
    "networks",
    "graph",
    "graph",
    "network",
    "different",
    "nodes",
    "read",
    "blockchains",
    "index",
    "data",
    "exposes",
    "api",
    "us",
    "call",
    "read",
    "data",
    "rather",
    "actually",
    "nattered",
    "abbott",
    "explain",
    "lot",
    "better",
    "take",
    "away",
    "first",
    "like",
    "thank",
    "patrick",
    "creating",
    "wonderful",
    "educational",
    "resource",
    "inviting",
    "part",
    "name",
    "nadia",
    "dabit",
    "developer",
    "relations",
    "engineer",
    "working",
    "graph",
    "graph",
    "indexing",
    "querying",
    "protocol",
    "decentralized",
    "networks",
    "like",
    "aetherium",
    "ipfs",
    "dozens",
    "evm",
    "compatible",
    "networks",
    "well",
    "near",
    "future",
    "cosmos",
    "solana",
    "using",
    "graph",
    "developers",
    "build",
    "publish",
    "open",
    "api",
    "called",
    "subgraphs",
    "use",
    "applications",
    "enable",
    "better",
    "querying",
    "capabilities",
    "data",
    "stored",
    "networks",
    "including",
    "features",
    "like",
    "filtering",
    "sorting",
    "relational",
    "data",
    "full",
    "stack",
    "search",
    "subgraphs",
    "live",
    "blockchain",
    "ui",
    "providing",
    "important",
    "piece",
    "software",
    "infrastructure",
    "flexible",
    "performant",
    "decentralized",
    "api",
    "layer",
    "traditional",
    "tech",
    "stack",
    "databases",
    "servers",
    "api",
    "query",
    "filter",
    "sort",
    "paginate",
    "group",
    "join",
    "data",
    "returned",
    "application",
    "usually",
    "via",
    "type",
    "http",
    "request",
    "types",
    "data",
    "transformations",
    "possible",
    "reading",
    "data",
    "directly",
    "aetherium",
    "blockchains",
    "graph",
    "teams",
    "develop",
    "operate",
    "proprietary",
    "indexing",
    "servers",
    "required",
    "significant",
    "engineering",
    "hardware",
    "resources",
    "broke",
    "important",
    "security",
    "principles",
    "required",
    "decentralization",
    "interact",
    "build",
    "top",
    "blockchains",
    "much",
    "different",
    "used",
    "traditional",
    "tech",
    "stack",
    "blockchain",
    "data",
    "stored",
    "format",
    "easily",
    "efficiently",
    "consumed",
    "retrieved",
    "directly",
    "applications",
    "front",
    "ends",
    "problem",
    "need",
    "data",
    "indexed",
    "organized",
    "efficient",
    "retrieval",
    "traditionally",
    "work",
    "databases",
    "web",
    "servers",
    "centralized",
    "tech",
    "stack",
    "indexing",
    "layer",
    "missing",
    "web",
    "three",
    "stack",
    "let",
    "take",
    "look",
    "couple",
    "examples",
    "indexing",
    "real",
    "world",
    "search",
    "engines",
    "like",
    "google",
    "crawl",
    "internet",
    "indexing",
    "relevant",
    "data",
    "making",
    "available",
    "users",
    "search",
    "via",
    "web",
    "interface",
    "api",
    "without",
    "indexing",
    "layer",
    "hard",
    "us",
    "know",
    "find",
    "relevant",
    "information",
    "across",
    "web",
    "another",
    "similar",
    "analogy",
    "library",
    "using",
    "indexing",
    "system",
    "like",
    "dewey",
    "decimal",
    "system",
    "know",
    "find",
    "book",
    "looking",
    "without",
    "go",
    "book",
    "book",
    "looking",
    "throughout",
    "entire",
    "library",
    "graph",
    "serves",
    "2",
    "billion",
    "queries",
    "per",
    "day",
    "many",
    "different",
    "types",
    "web",
    "three",
    "applications",
    "including",
    "apps",
    "defy",
    "gaming",
    "fc",
    "space",
    "dig",
    "code",
    "let",
    "take",
    "look",
    "build",
    "sub",
    "graph",
    "get",
    "started",
    "would",
    "go",
    "create",
    "new",
    "sub",
    "graph",
    "graph",
    "user",
    "interface",
    "would",
    "use",
    "graph",
    "cli",
    "scaffold",
    "empty",
    "sub",
    "graph",
    "boilerplate",
    "update",
    "contract",
    "information",
    "subgraph",
    "configuration",
    "would",
    "define",
    "things",
    "like",
    "data",
    "model",
    "network",
    "contract",
    "addresses",
    "configurations",
    "specific",
    "data",
    "would",
    "like",
    "index",
    "data",
    "model",
    "use",
    "graph",
    "ql",
    "schema",
    "definition",
    "language",
    "defining",
    "top",
    "level",
    "types",
    "well",
    "fields",
    "within",
    "types",
    "ready",
    "deploy",
    "subgraph",
    "begin",
    "testing",
    "using",
    "application",
    "use",
    "graph",
    "cli",
    "running",
    "deploy",
    "command",
    "subgraph",
    "deployed",
    "data",
    "begins",
    "indexed",
    "start",
    "testing",
    "using",
    "graphical",
    "interface",
    "directly",
    "graph",
    "dashboard",
    "ready",
    "start",
    "queering",
    "sub",
    "graph",
    "application",
    "use",
    "api",
    "url",
    "given",
    "us",
    "graph",
    "along",
    "graph",
    "ql",
    "query",
    "like",
    "learn",
    "graph",
    "check",
    "well",
    "graph",
    "protocol",
    "twitter",
    "docs",
    "discord",
    "thanks",
    "matter",
    "better",
    "idea",
    "graph",
    "actually",
    "start",
    "building",
    "try",
    "run",
    "app",
    "obviously",
    "would",
    "fail",
    "right",
    "right",
    "reading",
    "mirallas",
    "instead",
    "graph",
    "like",
    "says",
    "readme",
    "first",
    "thing",
    "going",
    "need",
    "gon",
    "na",
    "need",
    "index",
    "graph",
    "project",
    "read",
    "graph",
    "let",
    "go",
    "ahead",
    "learn",
    "build",
    "sub",
    "graph",
    "order",
    "us",
    "tell",
    "graph",
    "network",
    "start",
    "indexing",
    "events",
    "contract",
    "gon",
    "na",
    "go",
    "gon",
    "na",
    "go",
    "products",
    "going",
    "go",
    "sub",
    "graph",
    "studio",
    "go",
    "products",
    "first",
    "thing",
    "see",
    "graph",
    "explorer",
    "already",
    "existing",
    "sub",
    "graphs",
    "go",
    "see",
    "lot",
    "incredibly",
    "popular",
    "decentralized",
    "protocols",
    "different",
    "sub",
    "graphs",
    "hosted",
    "service",
    "going",
    "get",
    "discontinued",
    "point",
    "going",
    "skip",
    "let",
    "go",
    "sub",
    "graph",
    "studio",
    "going",
    "help",
    "enable",
    "us",
    "create",
    "sub",
    "graph",
    "nodes",
    "start",
    "indexing",
    "events",
    "gon",
    "na",
    "go",
    "ahead",
    "connect",
    "wallet",
    "meta",
    "mask",
    "going",
    "choose",
    "account",
    "one",
    "next",
    "connect",
    "going",
    "want",
    "switch",
    "hardhead",
    "local",
    "rinkeby",
    "test",
    "network",
    "go",
    "account",
    "one",
    "going",
    "get",
    "signature",
    "request",
    "graph",
    "summary",
    "website",
    "built",
    "subgraph",
    "website",
    "signings",
    "functionality",
    "database",
    "back",
    "end",
    "seeing",
    "real",
    "life",
    "exactly",
    "methods",
    "used",
    "instead",
    "signing",
    "morales",
    "custom",
    "sign",
    "gon",
    "na",
    "go",
    "ahead",
    "sign",
    "graph",
    "website",
    "knows",
    "interact",
    "us",
    "go",
    "ahead",
    "enter",
    "email",
    "want",
    "gon",
    "na",
    "go",
    "ahead",
    "skip",
    "even",
    "get",
    "little",
    "notification",
    "saying",
    "subgraphs",
    "indexing",
    "aetherium",
    "main",
    "net",
    "rigby",
    "created",
    "subgraph",
    "studio",
    "let",
    "go",
    "ahead",
    "create",
    "subgraph",
    "going",
    "pick",
    "cerium",
    "rigby",
    "subgraph",
    "name",
    "going",
    "nft",
    "marketplace",
    "go",
    "ahead",
    "hit",
    "continue",
    "going",
    "dashboard",
    "creating",
    "sub",
    "graph",
    "ton",
    "instructions",
    "documentation",
    "view",
    "get",
    "started",
    "going",
    "add",
    "documentation",
    "github",
    "repo",
    "associated",
    "course",
    "nft",
    "marketplace",
    "sub",
    "graph",
    "going",
    "need",
    "git",
    "repository",
    "going",
    "back",
    "going",
    "cd",
    "going",
    "make",
    "new",
    "directory",
    "going",
    "call",
    "graph",
    "marketplace",
    "fcc",
    "going",
    "open",
    "well",
    "code",
    "graph",
    "nft",
    "marketplace",
    "fcc",
    "file",
    "open",
    "graft",
    "code",
    "marketplace",
    "fcc",
    "window",
    "going",
    "build",
    "subgraph",
    "locally",
    "going",
    "build",
    "subgraph",
    "push",
    "subgraph",
    "studio",
    "whole",
    "bunch",
    "instructions",
    "follow",
    "along",
    "go",
    "ahead",
    "install",
    "first",
    "thing",
    "need",
    "install",
    "graph",
    "command",
    "line",
    "interface",
    "want",
    "install",
    "globally",
    "going",
    "copy",
    "part",
    "come",
    "back",
    "terminal",
    "oh",
    "yarn",
    "global",
    "ad",
    "paste",
    "command",
    "line",
    "going",
    "help",
    "us",
    "build",
    "graph",
    "build",
    "instructions",
    "graph",
    "actually",
    "start",
    "indexing",
    "events",
    "installed",
    "globally",
    "initialize",
    "graph",
    "code",
    "copy",
    "line",
    "run",
    "graph",
    "knit",
    "dash",
    "dash",
    "studio",
    "nft",
    "marketplace",
    "hit",
    "enter",
    "protocol",
    "going",
    "aetherium",
    "subgraph",
    "slug",
    "nft",
    "marketplace",
    "want",
    "directory",
    "saying",
    "directory",
    "already",
    "exists",
    "give",
    "nft",
    "marketplace",
    "move",
    "rinkeby",
    "test",
    "net",
    "want",
    "give",
    "contract",
    "address",
    "want",
    "grab",
    "address",
    "deployed",
    "network",
    "mapping",
    "going",
    "grab",
    "contract",
    "address",
    "deployed",
    "paste",
    "like",
    "since",
    "already",
    "verified",
    "ether",
    "scan",
    "automatically",
    "grabs",
    "abi",
    "us",
    "ether",
    "scan",
    "give",
    "contract",
    "name",
    "nft",
    "marketplace",
    "going",
    "give",
    "us",
    "whole",
    "bunch",
    "boilerplate",
    "code",
    "nft",
    "marketplace",
    "directory",
    "might",
    "take",
    "couple",
    "minutes",
    "alright",
    "awesome",
    "done",
    "see",
    "subgraph",
    "nft",
    "marketplace",
    "created",
    "nft",
    "marketplace",
    "want",
    "seller",
    "folder",
    "going",
    "going",
    "move",
    "directory",
    "leave",
    "want",
    "going",
    "say",
    "move",
    "going",
    "say",
    "move",
    "nft",
    "marketplace",
    "star",
    "dot",
    "slash",
    "everything",
    "inside",
    "nft",
    "marketplace",
    "current",
    "directory",
    "marketplace",
    "empty",
    "gon",
    "na",
    "go",
    "ahead",
    "delete",
    "marketplace",
    "alright",
    "great",
    "let",
    "walk",
    "exactly",
    "going",
    "files",
    "created",
    "first",
    "folder",
    "going",
    "api",
    "order",
    "graph",
    "index",
    "read",
    "contract",
    "index",
    "events",
    "going",
    "need",
    "abi",
    "events",
    "got",
    "abi",
    "entire",
    "marketplace",
    "ether",
    "scan",
    "verify",
    "ether",
    "scan",
    "create",
    "api",
    "folder",
    "ourself",
    "add",
    "nft",
    "marketplace",
    "json",
    "generated",
    "folder",
    "auto",
    "generated",
    "file",
    "even",
    "says",
    "top",
    "edit",
    "file",
    "directly",
    "kind",
    "think",
    "build",
    "folder",
    "compile",
    "graph",
    "code",
    "node",
    "modules",
    "course",
    "going",
    "node",
    "modules",
    "dependencies",
    "src",
    "going",
    "define",
    "tell",
    "graph",
    "actually",
    "map",
    "actually",
    "work",
    "contract",
    "typescript",
    "file",
    "javascript",
    "teach",
    "little",
    "bit",
    "typescript",
    "get",
    "part",
    "networks",
    "dot",
    "json",
    "gives",
    "us",
    "network",
    "information",
    "networks",
    "addresses",
    "different",
    "contracts",
    "going",
    "indexing",
    "package",
    "dot",
    "json",
    "course",
    "normal",
    "package",
    "dot",
    "json",
    "got",
    "graph",
    "scripts",
    "already",
    "built",
    "schema",
    "dot",
    "graph",
    "ql",
    "going",
    "graph",
    "ql",
    "schema",
    "also",
    "going",
    "tell",
    "graph",
    "actually",
    "work",
    "events",
    "index",
    "events",
    "familiar",
    "schema",
    "follows",
    "graph",
    "ql",
    "syntax",
    "ever",
    "worked",
    "graph",
    "ql",
    "going",
    "exact",
    "way",
    "graph",
    "ql",
    "query",
    "language",
    "api",
    "instead",
    "kind",
    "relational",
    "database",
    "query",
    "graph",
    "type",
    "way",
    "going",
    "go",
    "deep",
    "actually",
    "works",
    "behind",
    "scenes",
    "want",
    "learn",
    "going",
    "leave",
    "docs",
    "github",
    "repository",
    "associated",
    "course",
    "sub",
    "graph",
    "dot",
    "yamo",
    "tells",
    "subgraph",
    "combine",
    "files",
    "together",
    "data",
    "sources",
    "data",
    "sources",
    "coming",
    "different",
    "addresses",
    "different",
    "entities",
    "events",
    "api",
    "grab",
    "files",
    "different",
    "event",
    "handlers",
    "talk",
    "minute",
    "main",
    "file",
    "going",
    "ts",
    "config",
    "configuration",
    "file",
    "specific",
    "typescript",
    "course",
    "yarn",
    "dot",
    "lock",
    "information",
    "code",
    "going",
    "update",
    "code",
    "tell",
    "graph",
    "start",
    "indexing",
    "events",
    "read",
    "events",
    "graph",
    "decentralized",
    "context",
    "opposed",
    "centralized",
    "database",
    "build",
    "everything",
    "going",
    "run",
    "deploy",
    "code",
    "authenticate",
    "deploy",
    "code",
    "graph",
    "start",
    "indexing",
    "without",
    "ado",
    "let",
    "jump",
    "let",
    "one",
    "first",
    "things",
    "going",
    "going",
    "add",
    "highlighter",
    "dot",
    "graph",
    "ql",
    "files",
    "extensions",
    "gon",
    "na",
    "look",
    "graph",
    "ql",
    "gon",
    "na",
    "stall",
    "graph",
    "ql",
    "extension",
    "installed",
    "go",
    "back",
    "schema",
    "dot",
    "graph",
    "ql",
    "got",
    "colors",
    "exciting",
    "schema",
    "dot",
    "graph",
    "ql",
    "going",
    "define",
    "entities",
    "contract",
    "analogous",
    "mirallas",
    "going",
    "going",
    "define",
    "tables",
    "going",
    "look",
    "like",
    "going",
    "events",
    "plus",
    "active",
    "item",
    "table",
    "created",
    "going",
    "example",
    "entity",
    "though",
    "going",
    "type",
    "active",
    "item",
    "going",
    "add",
    "entity",
    "different",
    "types",
    "graph",
    "actually",
    "query",
    "main",
    "thing",
    "going",
    "want",
    "query",
    "going",
    "active",
    "items",
    "inside",
    "active",
    "items",
    "going",
    "tell",
    "graph",
    "parameters",
    "one",
    "active",
    "item",
    "types",
    "well",
    "going",
    "id",
    "type",
    "id",
    "variable",
    "id",
    "type",
    "id",
    "read",
    "different",
    "types",
    "graph",
    "documentation",
    "exclamation",
    "mark",
    "means",
    "must",
    "id",
    "every",
    "active",
    "item",
    "needs",
    "id",
    "say",
    "going",
    "buyer",
    "going",
    "address",
    "going",
    "byte",
    "buyer",
    "could",
    "blank",
    "right",
    "could",
    "0x",
    "000",
    "going",
    "active",
    "items",
    "0000",
    "one",
    "bought",
    "yet",
    "going",
    "seller",
    "course",
    "also",
    "going",
    "bytes",
    "going",
    "address",
    "going",
    "nft",
    "address",
    "address",
    "nft",
    "also",
    "bytes",
    "going",
    "token",
    "id",
    "going",
    "bytes",
    "going",
    "type",
    "big",
    "int",
    "going",
    "price",
    "also",
    "going",
    "big",
    "int",
    "price",
    "going",
    "leave",
    "required",
    "price",
    "going",
    "price",
    "nullable",
    "price",
    "null",
    "active",
    "item",
    "awesome",
    "else",
    "going",
    "need",
    "tables",
    "morales",
    "well",
    "going",
    "need",
    "type",
    "item",
    "listed",
    "going",
    "entity",
    "going",
    "need",
    "id",
    "seller",
    "whenever",
    "item",
    "gets",
    "listed",
    "going",
    "seller",
    "right",
    "going",
    "bytes",
    "address",
    "address",
    "nft",
    "also",
    "bytes",
    "token",
    "id",
    "going",
    "big",
    "int",
    "price",
    "also",
    "big",
    "end",
    "gon",
    "na",
    "need",
    "type",
    "item",
    "cancelled",
    "entity",
    "id",
    "seller",
    "nft",
    "address",
    "token",
    "id",
    "big",
    "end",
    "last",
    "type",
    "item",
    "bought",
    "entity",
    "going",
    "id",
    "id",
    "going",
    "buyer",
    "bytes",
    "address",
    "bytes",
    "token",
    "id",
    "price",
    "beginnt",
    "justice",
    "information",
    "defined",
    "want",
    "subgraph",
    "keep",
    "track",
    "wants",
    "keep",
    "track",
    "item",
    "bought",
    "events",
    "item",
    "cancelled",
    "events",
    "item",
    "listed",
    "events",
    "going",
    "make",
    "new",
    "active",
    "item",
    "table",
    "similar",
    "mirallas",
    "going",
    "function",
    "three",
    "events",
    "done",
    "schema",
    "dot",
    "graph",
    "ql",
    "awesome",
    "going",
    "need",
    "tell",
    "sub",
    "graph",
    "actually",
    "listen",
    "events",
    "want",
    "tell",
    "listen",
    "events",
    "going",
    "go",
    "src",
    "file",
    "going",
    "tell",
    "subgraph",
    "actually",
    "map",
    "actually",
    "store",
    "event",
    "information",
    "look",
    "right",
    "might",
    "even",
    "give",
    "kind",
    "sample",
    "event",
    "says",
    "export",
    "function",
    "handle",
    "item",
    "event",
    "maya",
    "says",
    "right",
    "takes",
    "input",
    "parameter",
    "event",
    "item",
    "bot",
    "saying",
    "whenever",
    "item",
    "bot",
    "event",
    "occurs",
    "handle",
    "item",
    "bot",
    "function",
    "anytime",
    "item",
    "bot",
    "happens",
    "handle",
    "item",
    "bot",
    "actually",
    "getting",
    "item",
    "bot",
    "generated",
    "nft",
    "marketplace",
    "generated",
    "code",
    "graph",
    "run",
    "graph",
    "code",
    "graph",
    "code",
    "gen",
    "command",
    "grabs",
    "stuff",
    "schema",
    "dot",
    "graph",
    "ql",
    "puts",
    "generated",
    "file",
    "run",
    "graph",
    "code",
    "gen",
    "see",
    "item",
    "bot",
    "class",
    "see",
    "schema",
    "type",
    "script",
    "actually",
    "even",
    "find",
    "new",
    "active",
    "item",
    "class",
    "created",
    "schema",
    "anytime",
    "update",
    "schema",
    "dot",
    "graph",
    "ql",
    "always",
    "going",
    "want",
    "run",
    "graph",
    "code",
    "gen",
    "update",
    "types",
    "failed",
    "means",
    "messed",
    "something",
    "schema",
    "dot",
    "graph",
    "ql",
    "actually",
    "importing",
    "item",
    "bought",
    "item",
    "cancelled",
    "item",
    "listed",
    "generated",
    "marketplace",
    "marketplace",
    "generated",
    "code",
    "going",
    "events",
    "going",
    "need",
    "anything",
    "nft",
    "marketplace",
    "going",
    "need",
    "event",
    "information",
    "let",
    "go",
    "ahead",
    "delete",
    "everything",
    "inside",
    "handle",
    "item",
    "bot",
    "whatever",
    "sample",
    "given",
    "importing",
    "events",
    "generated",
    "code",
    "line",
    "going",
    "change",
    "second",
    "three",
    "functions",
    "handle",
    "item",
    "bought",
    "handle",
    "item",
    "canceled",
    "handle",
    "item",
    "listed",
    "whenever",
    "get",
    "item",
    "bought",
    "event",
    "going",
    "function",
    "whenever",
    "get",
    "item",
    "canceled",
    "event",
    "going",
    "function",
    "code",
    "defined",
    "sub",
    "graph",
    "dot",
    "yamo",
    "see",
    "different",
    "entities",
    "bot",
    "item",
    "cancelled",
    "item",
    "listed",
    "event",
    "handlers",
    "says",
    "okay",
    "anytime",
    "specific",
    "event",
    "gets",
    "fired",
    "index",
    "address",
    "index",
    "address",
    "index",
    "youtube",
    "36",
    "youtube",
    "six",
    "call",
    "handle",
    "item",
    "bought",
    "getting",
    "handle",
    "item",
    "exactly",
    "works",
    "let",
    "figure",
    "item",
    "bought",
    "event",
    "triggers",
    "think",
    "item",
    "bought",
    "item",
    "cancelled",
    "item",
    "lists",
    "little",
    "confusing",
    "like",
    "change",
    "item",
    "bought",
    "item",
    "bought",
    "event",
    "item",
    "cancelled",
    "item",
    "cancelled",
    "event",
    "item",
    "listed",
    "item",
    "listed",
    "event",
    "changing",
    "names",
    "three",
    "imported",
    "nft",
    "marketplace",
    "going",
    "change",
    "event",
    "item",
    "bot",
    "item",
    "bought",
    "event",
    "event",
    "item",
    "cancelled",
    "item",
    "cancelled",
    "event",
    "event",
    "item",
    "listed",
    "item",
    "listed",
    "event",
    "okay",
    "great",
    "going",
    "remove",
    "line",
    "also",
    "need",
    "line",
    "top",
    "beginning",
    "minute",
    "delete",
    "minimalistic",
    "code",
    "whenever",
    "list",
    "item",
    "need",
    "well",
    "need",
    "save",
    "event",
    "graph",
    "also",
    "need",
    "update",
    "active",
    "item",
    "exactly",
    "morales",
    "first",
    "thing",
    "going",
    "need",
    "either",
    "get",
    "create",
    "item",
    "listed",
    "object",
    "something",
    "need",
    "know",
    "item",
    "needs",
    "unique",
    "id",
    "actually",
    "need",
    "create",
    "id",
    "one",
    "first",
    "things",
    "going",
    "going",
    "create",
    "function",
    "called",
    "get",
    "id",
    "event",
    "params",
    "going",
    "take",
    "token",
    "id",
    "typescript",
    "comes",
    "play",
    "little",
    "bit",
    "typescript",
    "actually",
    "need",
    "define",
    "types",
    "different",
    "parameters",
    "token",
    "id",
    "going",
    "big",
    "int",
    "also",
    "take",
    "nft",
    "address",
    "take",
    "type",
    "address",
    "also",
    "need",
    "say",
    "return",
    "type",
    "function",
    "going",
    "give",
    "going",
    "return",
    "string",
    "going",
    "create",
    "id",
    "event",
    "params",
    "going",
    "combination",
    "token",
    "id",
    "nft",
    "address",
    "combination",
    "two",
    "give",
    "unique",
    "id",
    "one",
    "types",
    "event",
    "gon",
    "na",
    "say",
    "return",
    "token",
    "id",
    "token",
    "id",
    "function",
    "called",
    "x",
    "string",
    "gon",
    "na",
    "say",
    "plus",
    "x",
    "string",
    "like",
    "big",
    "int",
    "address",
    "need",
    "import",
    "graph",
    "protocol",
    "slash",
    "graph",
    "tx",
    "already",
    "imported",
    "big",
    "enough",
    "going",
    "add",
    "address",
    "two",
    "special",
    "types",
    "come",
    "graph",
    "string",
    "built",
    "typescript",
    "way",
    "get",
    "special",
    "id",
    "item",
    "function",
    "either",
    "get",
    "create",
    "new",
    "item",
    "listed",
    "right",
    "item",
    "event",
    "item",
    "bought",
    "object",
    "item",
    "bought",
    "object",
    "going",
    "save",
    "item",
    "bought",
    "event",
    "raw",
    "event",
    "create",
    "item",
    "bought",
    "object",
    "item",
    "bought",
    "event",
    "typescript",
    "going",
    "two",
    "different",
    "types",
    "import",
    "item",
    "objects",
    "actually",
    "get",
    "auto",
    "created",
    "generated",
    "schema",
    "active",
    "item",
    "item",
    "item",
    "bought",
    "class",
    "item",
    "cancelled",
    "etc",
    "gon",
    "na",
    "import",
    "types",
    "say",
    "import",
    "item",
    "listed",
    "comma",
    "active",
    "item",
    "item",
    "bought",
    "item",
    "cancelled",
    "dot",
    "slash",
    "generated",
    "slash",
    "schema",
    "let",
    "go",
    "ahead",
    "get",
    "create",
    "item",
    "bot",
    "object",
    "say",
    "let",
    "item",
    "bot",
    "equals",
    "item",
    "bot",
    "dot",
    "load",
    "load",
    "item",
    "load",
    "unique",
    "id",
    "calling",
    "get",
    "id",
    "event",
    "params",
    "dot",
    "load",
    "get",
    "id",
    "event",
    "params",
    "pass",
    "event",
    "dot",
    "params",
    "token",
    "id",
    "item",
    "bot",
    "event",
    "going",
    "token",
    "id",
    "event",
    "address",
    "know",
    "probably",
    "done",
    "handle",
    "item",
    "listed",
    "first",
    "item",
    "bot",
    "first",
    "since",
    "buying",
    "item",
    "probably",
    "also",
    "active",
    "item",
    "well",
    "right",
    "made",
    "yet",
    "item",
    "listed",
    "going",
    "similar",
    "morales",
    "know",
    "every",
    "time",
    "live",
    "certain",
    "items",
    "also",
    "list",
    "active",
    "item",
    "say",
    "let",
    "active",
    "item",
    "equals",
    "active",
    "item",
    "load",
    "going",
    "exact",
    "thing",
    "going",
    "copy",
    "paste",
    "even",
    "though",
    "going",
    "exact",
    "id",
    "matter",
    "id",
    "across",
    "different",
    "types",
    "gon",
    "na",
    "say",
    "item",
    "bot",
    "say",
    "item",
    "bot",
    "equals",
    "new",
    "item",
    "bot",
    "object",
    "give",
    "id",
    "going",
    "exactly",
    "id",
    "giving",
    "parameter",
    "get",
    "id",
    "events",
    "pass",
    "going",
    "create",
    "new",
    "item",
    "bought",
    "going",
    "update",
    "parameters",
    "back",
    "schema",
    "dot",
    "graph",
    "ql",
    "item",
    "bought",
    "id",
    "buyer",
    "address",
    "token",
    "id",
    "price",
    "gon",
    "na",
    "say",
    "item",
    "bought",
    "buyer",
    "equals",
    "event",
    "dot",
    "params",
    "dot",
    "buyer",
    "item",
    "address",
    "equals",
    "address",
    "item",
    "bot",
    "dot",
    "token",
    "id",
    "equals",
    "event",
    "dot",
    "params",
    "dot",
    "token",
    "id",
    "looks",
    "good",
    "active",
    "item",
    "item",
    "listed",
    "item",
    "listed",
    "give",
    "parameters",
    "except",
    "wo",
    "buyer",
    "need",
    "update",
    "buyer",
    "active",
    "item",
    "say",
    "active",
    "item",
    "dot",
    "buyer",
    "little",
    "exclamation",
    "mark",
    "typescript",
    "stuff",
    "saying",
    "active",
    "item",
    "worry",
    "much",
    "unfamiliar",
    "typescript",
    "say",
    "equals",
    "event",
    "dot",
    "params",
    "dot",
    "buyer",
    "similar",
    "morales",
    "gon",
    "na",
    "item",
    "bot",
    "dot",
    "save",
    "active",
    "item",
    "exclamation",
    "mark",
    "save",
    "going",
    "save",
    "item",
    "bought",
    "event",
    "object",
    "graph",
    "protocol",
    "also",
    "going",
    "update",
    "active",
    "item",
    "full",
    "function",
    "handle",
    "item",
    "bought",
    "whenever",
    "somebody",
    "buys",
    "item",
    "update",
    "new",
    "item",
    "bought",
    "object",
    "update",
    "active",
    "item",
    "new",
    "buyer",
    "going",
    "delete",
    "active",
    "items",
    "list",
    "going",
    "update",
    "new",
    "buyer",
    "say",
    "buyer",
    "means",
    "bought",
    "buyer",
    "means",
    "still",
    "market",
    "awesome",
    "done",
    "handle",
    "item",
    "bot",
    "let",
    "handle",
    "item",
    "listed",
    "hopefully",
    "make",
    "handle",
    "item",
    "bot",
    "little",
    "bit",
    "easier",
    "understand",
    "handle",
    "item",
    "listed",
    "going",
    "piece",
    "going",
    "say",
    "let",
    "item",
    "listed",
    "equals",
    "item",
    "listed",
    "dot",
    "load",
    "gon",
    "na",
    "exact",
    "thing",
    "get",
    "id",
    "event",
    "params",
    "like",
    "get",
    "different",
    "event",
    "params",
    "gon",
    "na",
    "say",
    "let",
    "active",
    "item",
    "line",
    "going",
    "exactly",
    "going",
    "copy",
    "paste",
    "saying",
    "okay",
    "great",
    "grab",
    "item",
    "listed",
    "grab",
    "active",
    "item",
    "see",
    "objects",
    "already",
    "exist",
    "say",
    "item",
    "listed",
    "go",
    "ahead",
    "create",
    "new",
    "one",
    "say",
    "item",
    "listed",
    "equals",
    "new",
    "item",
    "listed",
    "id",
    "going",
    "function",
    "created",
    "unique",
    "ids",
    "unlike",
    "also",
    "going",
    "say",
    "active",
    "item",
    "going",
    "create",
    "new",
    "active",
    "item",
    "right",
    "listing",
    "item",
    "active",
    "item",
    "functionality",
    "going",
    "make",
    "lot",
    "sense",
    "right",
    "updating",
    "price",
    "item",
    "active",
    "item",
    "already",
    "exist",
    "brand",
    "new",
    "listing",
    "though",
    "active",
    "item",
    "exist",
    "say",
    "okay",
    "exist",
    "okay",
    "means",
    "brand",
    "new",
    "listing",
    "say",
    "item",
    "listed",
    "equals",
    "new",
    "item",
    "listed",
    "give",
    "id",
    "id",
    "methodology",
    "paste",
    "got",
    "update",
    "new",
    "objects",
    "say",
    "item",
    "listed",
    "seller",
    "equals",
    "event",
    "dot",
    "params",
    "dot",
    "seller",
    "going",
    "copy",
    "paste",
    "line",
    "gon",
    "na",
    "active",
    "item",
    "dot",
    "seller",
    "oops",
    "see",
    "make",
    "active",
    "item",
    "active",
    "item",
    "instead",
    "item",
    "listed",
    "else",
    "comes",
    "item",
    "listed",
    "well",
    "let",
    "go",
    "schema",
    "item",
    "listed",
    "nft",
    "address",
    "token",
    "id",
    "price",
    "okay",
    "let",
    "add",
    "item",
    "listed",
    "dot",
    "nft",
    "address",
    "equals",
    "address",
    "copy",
    "paste",
    "line",
    "gon",
    "na",
    "exact",
    "active",
    "item",
    "item",
    "listed",
    "token",
    "id",
    "equals",
    "event",
    "dot",
    "params",
    "dot",
    "token",
    "id",
    "copy",
    "paste",
    "line",
    "thing",
    "active",
    "item",
    "item",
    "listed",
    "dot",
    "price",
    "equals",
    "event",
    "dot",
    "params",
    "dot",
    "price",
    "copy",
    "paste",
    "line",
    "active",
    "item",
    "say",
    "two",
    "item",
    "listed",
    "save",
    "active",
    "item",
    "save",
    "protocol",
    "already",
    "already",
    "active",
    "item",
    "go",
    "ahead",
    "get",
    "active",
    "item",
    "would",
    "listing",
    "updating",
    "make",
    "new",
    "one",
    "update",
    "whatever",
    "came",
    "event",
    "save",
    "graph",
    "protocol",
    "okay",
    "perfect",
    "one",
    "left",
    "item",
    "cancelled",
    "let",
    "figure",
    "item",
    "cancelled",
    "going",
    "look",
    "really",
    "similar",
    "item",
    "bought",
    "say",
    "let",
    "item",
    "cancelled",
    "equals",
    "item",
    "cancelled",
    "load",
    "going",
    "exact",
    "id",
    "get",
    "everything",
    "say",
    "let",
    "active",
    "item",
    "equals",
    "going",
    "zoom",
    "little",
    "bit",
    "less",
    "active",
    "item",
    "equals",
    "active",
    "item",
    "dot",
    "load",
    "exact",
    "thing",
    "boom",
    "gon",
    "na",
    "say",
    "item",
    "cancelled",
    "item",
    "canceled",
    "event",
    "say",
    "item",
    "cancelled",
    "equals",
    "new",
    "item",
    "cancelled",
    "gon",
    "na",
    "give",
    "id",
    "using",
    "id",
    "methodology",
    "using",
    "going",
    "look",
    "little",
    "bit",
    "different",
    "gon",
    "na",
    "say",
    "item",
    "canceled",
    "seller",
    "equals",
    "event",
    "dot",
    "params",
    "dot",
    "seller",
    "far",
    "good",
    "item",
    "canceled",
    "dot",
    "nft",
    "address",
    "equals",
    "event",
    "dot",
    "params",
    "dot",
    "nft",
    "address",
    "item",
    "canceled",
    "dot",
    "token",
    "id",
    "equals",
    "event",
    "dot",
    "params",
    "dot",
    "token",
    "id",
    "finally",
    "going",
    "change",
    "active",
    "item",
    "little",
    "bit",
    "different",
    "seen",
    "active",
    "item",
    "exclamation",
    "mark",
    "ignore",
    "confused",
    "dot",
    "buyer",
    "going",
    "update",
    "buyer",
    "equal",
    "address",
    "dot",
    "string",
    "going",
    "give",
    "called",
    "dead",
    "address",
    "right",
    "0x",
    "1112",
    "1314",
    "producing",
    "718",
    "1920",
    "21",
    "two",
    "three",
    "45",
    "67",
    "8930",
    "3130",
    "zeros",
    "lowercase",
    "uppercase",
    "e",
    "lowercase",
    "uppercase",
    "known",
    "dead",
    "address",
    "going",
    "decide",
    "item",
    "still",
    "marketplace",
    "item",
    "bought",
    "dead",
    "address",
    "buyer",
    "going",
    "mean",
    "item",
    "cancelled",
    "going",
    "able",
    "tell",
    "item",
    "marketplace",
    "dead",
    "address",
    "means",
    "cancelled",
    "empty",
    "address",
    "happen",
    "handle",
    "item",
    "listed",
    "means",
    "market",
    "actual",
    "real",
    "address",
    "means",
    "actually",
    "bought",
    "somebody",
    "way",
    "tell",
    "market",
    "0x",
    "data",
    "address",
    "obviously",
    "going",
    "different",
    "zeros",
    "data",
    "address",
    "commonly",
    "used",
    "address",
    "kind",
    "burner",
    "address",
    "nobody",
    "owns",
    "say",
    "item",
    "cancelled",
    "save",
    "active",
    "item",
    "say",
    "active",
    "item",
    "exclamation",
    "mark",
    "dot",
    "save",
    "perfect",
    "mapping",
    "file",
    "completed",
    "three",
    "different",
    "functions",
    "define",
    "handle",
    "items",
    "bought",
    "events",
    "handle",
    "items",
    "cancelled",
    "event",
    "item",
    "listed",
    "events",
    "confused",
    "remember",
    "code",
    "available",
    "graph",
    "section",
    "github",
    "follow",
    "along",
    "code",
    "ever",
    "get",
    "lost",
    "need",
    "help",
    "almost",
    "ready",
    "tell",
    "subgraph",
    "start",
    "listening",
    "contracts",
    "least",
    "one",
    "thing",
    "want",
    "sub",
    "graph",
    "dot",
    "yamo",
    "see",
    "source",
    "address",
    "blah",
    "blah",
    "blah",
    "telling",
    "us",
    "start",
    "indexing",
    "events",
    "since",
    "beginning",
    "aetherium",
    "really",
    "want",
    "take",
    "really",
    "long",
    "time",
    "want",
    "tell",
    "subgraph",
    "hey",
    "start",
    "beginning",
    "time",
    "need",
    "start",
    "right",
    "contract",
    "deployed",
    "add",
    "called",
    "start",
    "block",
    "tell",
    "block",
    "number",
    "start",
    "deploying",
    "address",
    "right",
    "copy",
    "paste",
    "rink",
    "fee",
    "ether",
    "scan",
    "paste",
    "really",
    "block",
    "explorer",
    "see",
    "block",
    "number",
    "contract",
    "deployed",
    "looks",
    "like",
    "block",
    "going",
    "copy",
    "address",
    "go",
    "back",
    "code",
    "say",
    "starting",
    "block",
    "going",
    "right",
    "starting",
    "block",
    "going",
    "deployed",
    "minus",
    "one",
    "gon",
    "na",
    "go",
    "right",
    "deployed",
    "contract",
    "going",
    "start",
    "reading",
    "event",
    "indexed",
    "deployed",
    "might",
    "events",
    "going",
    "fix",
    "minute",
    "worry",
    "instructions",
    "build",
    "sub",
    "graphs",
    "ready",
    "deployed",
    "graph",
    "start",
    "indexing",
    "start",
    "working",
    "instructions",
    "decentralized",
    "context",
    "back",
    "graph",
    "actually",
    "auth",
    "deploy",
    "code",
    "right",
    "copy",
    "graph",
    "auth",
    "dash",
    "dash",
    "studio",
    "deploy",
    "key",
    "deploy",
    "run",
    "code",
    "editor",
    "going",
    "paste",
    "graph",
    "dash",
    "studio",
    "hit",
    "enter",
    "gon",
    "na",
    "say",
    "deploy",
    "key",
    "set",
    "graph",
    "setting",
    "us",
    "whenever",
    "push",
    "code",
    "going",
    "push",
    "sub",
    "graph",
    "configuration",
    "made",
    "site",
    "help",
    "us",
    "deploy",
    "automatically",
    "need",
    "enter",
    "subgraph",
    "already",
    "moved",
    "stuff",
    "build",
    "sub",
    "graph",
    "run",
    "graph",
    "code",
    "gen",
    "run",
    "graph",
    "kojem",
    "going",
    "make",
    "sure",
    "schema",
    "dot",
    "graph",
    "ql",
    "looks",
    "good",
    "going",
    "run",
    "graph",
    "build",
    "graph",
    "build",
    "command",
    "going",
    "compile",
    "run",
    "sub",
    "graph",
    "stuff",
    "everything",
    "mapping",
    "json",
    "generated",
    "code",
    "going",
    "put",
    "real",
    "build",
    "folder",
    "generated",
    "folder",
    "kind",
    "like",
    "pseudo",
    "build",
    "folder",
    "real",
    "build",
    "folder",
    "generated",
    "build",
    "typings",
    "typescript",
    "build",
    "folder",
    "real",
    "build",
    "folder",
    "going",
    "actually",
    "deploying",
    "sending",
    "graph",
    "actually",
    "deploy",
    "subgraph",
    "graph",
    "deploy",
    "dash",
    "studio",
    "marketplace",
    "going",
    "run",
    "right",
    "going",
    "give",
    "us",
    "version",
    "label",
    "option",
    "going",
    "give",
    "point",
    "one",
    "since",
    "first",
    "version",
    "goes",
    "ahead",
    "starts",
    "deploying",
    "graph",
    "also",
    "get",
    "upload",
    "sub",
    "graph",
    "ipfs",
    "little",
    "hash",
    "right",
    "ipfs",
    "subgraph",
    "could",
    "look",
    "successful",
    "build",
    "completed",
    "thing",
    "sub",
    "graph",
    "endpoints",
    "queries",
    "subscriptions",
    "actually",
    "start",
    "querying",
    "subscribing",
    "sub",
    "graph",
    "go",
    "back",
    "site",
    "hit",
    "refresh",
    "see",
    "status",
    "deployed",
    "see",
    "sinking",
    "nodes",
    "listening",
    "events",
    "emitted",
    "incredibly",
    "exciting",
    "go",
    "logs",
    "see",
    "anything",
    "went",
    "wrong",
    "right",
    "indexing",
    "listening",
    "going",
    "different",
    "blocks",
    "blockchain",
    "listening",
    "events",
    "playground",
    "run",
    "queries",
    "see",
    "different",
    "events",
    "different",
    "responses",
    "graph",
    "ql",
    "right",
    "totally",
    "blank",
    "done",
    "anything",
    "yet",
    "let",
    "pull",
    "hard",
    "hat",
    "ft",
    "marketplace",
    "code",
    "open",
    "new",
    "terminal",
    "whatever",
    "want",
    "let",
    "go",
    "ahead",
    "let",
    "run",
    "mminton",
    "list",
    "script",
    "rink",
    "b",
    "yarn",
    "hard",
    "hat",
    "run",
    "scripts",
    "mint",
    "list",
    "item",
    "dash",
    "dash",
    "network",
    "rinkeby",
    "going",
    "mint",
    "nf",
    "right",
    "going",
    "transaction",
    "gon",
    "na",
    "wait",
    "little",
    "bit",
    "going",
    "approve",
    "nft",
    "going",
    "list",
    "marketplace",
    "listed",
    "going",
    "emit",
    "item",
    "listed",
    "event",
    "see",
    "active",
    "item",
    "item",
    "listed",
    "data",
    "graph",
    "ql",
    "learn",
    "see",
    "left",
    "hand",
    "side",
    "known",
    "graph",
    "ql",
    "query",
    "going",
    "go",
    "going",
    "leave",
    "links",
    "github",
    "repository",
    "want",
    "learn",
    "queries",
    "going",
    "similar",
    "saw",
    "morales",
    "instead",
    "kind",
    "regular",
    "table",
    "lookups",
    "graph",
    "ql",
    "syntax",
    "results",
    "query",
    "end",
    "see",
    "information",
    "schema",
    "way",
    "right",
    "look",
    "code",
    "made",
    "nft",
    "approved",
    "listed",
    "marketplace",
    "go",
    "back",
    "graph",
    "run",
    "query",
    "little",
    "refresh",
    "nft",
    "marketplace",
    "might",
    "wait",
    "minutes",
    "graph",
    "index",
    "new",
    "blocks",
    "playground",
    "see",
    "show",
    "query",
    "automatically",
    "get",
    "pause",
    "video",
    "write",
    "graph",
    "ql",
    "playground",
    "right",
    "minutes",
    "refresh",
    "ether",
    "scan",
    "see",
    "list",
    "item",
    "transaction",
    "gone",
    "means",
    "emitted",
    "new",
    "event",
    "come",
    "back",
    "playground",
    "hit",
    "play",
    "oh",
    "goodness",
    "see",
    "active",
    "items",
    "see",
    "item",
    "listed",
    "fantastic",
    "means",
    "decentralized",
    "context",
    "chain",
    "service",
    "indexing",
    "events",
    "contract",
    "update",
    "front",
    "end",
    "update",
    "people",
    "decentralized",
    "way",
    "exciting",
    "awesome",
    "set",
    "finally",
    "go",
    "back",
    "next",
    "js",
    "project",
    "next",
    "jas",
    "nft",
    "marketplace",
    "graph",
    "fcc",
    "reason",
    "right",
    "code",
    "base",
    "next",
    "jas",
    "nft",
    "marketplace",
    "application",
    "reading",
    "morales",
    "database",
    "going",
    "anymore",
    "instead",
    "reading",
    "morales",
    "database",
    "going",
    "read",
    "graph",
    "let",
    "go",
    "ahead",
    "learn",
    "update",
    "code",
    "index",
    "dot",
    "j",
    "read",
    "graph",
    "instead",
    "highlight",
    "show",
    "actually",
    "going",
    "create",
    "new",
    "page",
    "new",
    "file",
    "going",
    "call",
    "graph",
    "example",
    "dot",
    "j",
    "gon",
    "na",
    "make",
    "really",
    "minimalistic",
    "page",
    "show",
    "graph",
    "query",
    "similar",
    "index",
    "dot",
    "j",
    "gon",
    "na",
    "export",
    "default",
    "graph",
    "example",
    "going",
    "function",
    "default",
    "function",
    "graph",
    "example",
    "gon",
    "na",
    "use",
    "tool",
    "called",
    "apollo",
    "client",
    "copy",
    "paste",
    "going",
    "add",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "p",
    "slash",
    "client",
    "excuse",
    "dev",
    "need",
    "front",
    "end",
    "yarn",
    "add",
    "apollo",
    "slash",
    "client",
    "oh",
    "sorry",
    "also",
    "need",
    "yarn",
    "add",
    "graph",
    "ql",
    "need",
    "add",
    "apollo",
    "slash",
    "client",
    "going",
    "make",
    "queries",
    "newly",
    "created",
    "graph",
    "ql",
    "gon",
    "na",
    "say",
    "import",
    "use",
    "query",
    "hook",
    "package",
    "installed",
    "p",
    "slash",
    "client",
    "also",
    "import",
    "g",
    "ql",
    "create",
    "new",
    "query",
    "say",
    "const",
    "get",
    "active",
    "item",
    "equals",
    "g",
    "ql",
    "add",
    "backtick",
    "add",
    "graph",
    "ql",
    "stuff",
    "gon",
    "na",
    "equivalent",
    "graph",
    "ql",
    "syntax",
    "gon",
    "na",
    "putting",
    "graph",
    "ql",
    "syntax",
    "code",
    "base",
    "want",
    "get",
    "active",
    "items",
    "going",
    "get",
    "active",
    "items",
    "well",
    "actually",
    "build",
    "playground",
    "first",
    "add",
    "code",
    "base",
    "say",
    "want",
    "grab",
    "active",
    "items",
    "grab",
    "first",
    "five",
    "say",
    "buyer",
    "going",
    "0x",
    "saying",
    "buyer",
    "empty",
    "grabbing",
    "active",
    "items",
    "buyer",
    "going",
    "going",
    "get",
    "id",
    "buyer",
    "seller",
    "nft",
    "address",
    "token",
    "id",
    "price",
    "hit",
    "run",
    "get",
    "active",
    "item",
    "see",
    "buyer",
    "exact",
    "0x",
    "12345678",
    "gets",
    "defaulted",
    "zero",
    "buyer",
    "item",
    "cancelled",
    "updated",
    "buyer",
    "dead",
    "address",
    "bought",
    "wo",
    "active",
    "anymore",
    "cancelled",
    "also",
    "wo",
    "active",
    "anymore",
    "copy",
    "query",
    "paste",
    "code",
    "graph",
    "ql",
    "query",
    "use",
    "graph",
    "example",
    "graph",
    "example",
    "use",
    "query",
    "use",
    "query",
    "hook",
    "export",
    "default",
    "function",
    "graph",
    "example",
    "say",
    "const",
    "comes",
    "whole",
    "bunch",
    "stuff",
    "like",
    "loading",
    "error",
    "data",
    "returned",
    "equals",
    "use",
    "query",
    "pass",
    "get",
    "active",
    "item",
    "get",
    "active",
    "items",
    "let",
    "put",
    "get",
    "active",
    "items",
    "return",
    "return",
    "little",
    "div",
    "say",
    "hi",
    "div",
    "console",
    "dot",
    "log",
    "data",
    "go",
    "back",
    "wrapping",
    "everything",
    "morales",
    "provider",
    "also",
    "need",
    "wrap",
    "everything",
    "apollo",
    "provider",
    "need",
    "initialize",
    "kind",
    "similar",
    "initialize",
    "connecting",
    "morale",
    "server",
    "going",
    "initialize",
    "connecting",
    "graph",
    "ql",
    "gon",
    "na",
    "say",
    "import",
    "p",
    "provider",
    "p",
    "client",
    "mem",
    "ory",
    "cache",
    "p",
    "slash",
    "client",
    "like",
    "initialize",
    "delete",
    "morale",
    "stuff",
    "initialize",
    "client",
    "saying",
    "const",
    "client",
    "equals",
    "new",
    "p",
    "client",
    "give",
    "parameters",
    "find",
    "apollo",
    "client",
    "documentation",
    "say",
    "going",
    "cache",
    "help",
    "refreshes",
    "stuff",
    "say",
    "new",
    "memory",
    "cache",
    "say",
    "comma",
    "uri",
    "que",
    "going",
    "connecting",
    "going",
    "add",
    "api",
    "sub",
    "graph",
    "go",
    "back",
    "details",
    "see",
    "temporary",
    "query",
    "url",
    "rate",
    "limited",
    "temporary",
    "query",
    "test",
    "net",
    "going",
    "copy",
    "go",
    "back",
    "code",
    "going",
    "paste",
    "whatever",
    "temporary",
    "query",
    "url",
    "sub",
    "graph",
    "studio",
    "gon",
    "na",
    "paste",
    "client",
    "tells",
    "graph",
    "ql",
    "making",
    "queries",
    "gon",
    "na",
    "make",
    "starts",
    "https",
    "centralized",
    "yes",
    "directly",
    "calling",
    "graph",
    "website",
    "however",
    "data",
    "still",
    "gon",
    "na",
    "stored",
    "decentralized",
    "graph",
    "indexer",
    "kind",
    "similar",
    "ipfs",
    "kind",
    "gateway",
    "make",
    "lot",
    "easier",
    "us",
    "connect",
    "read",
    "data",
    "graph",
    "studio",
    "however",
    "future",
    "protocols",
    "browsers",
    "adopt",
    "graph",
    "ipfs",
    "become",
    "lot",
    "easier",
    "inside",
    "morales",
    "provider",
    "outside",
    "notifications",
    "provider",
    "gon",
    "na",
    "say",
    "p",
    "provider",
    "client",
    "equals",
    "client",
    "going",
    "copy",
    "closing",
    "tag",
    "put",
    "around",
    "notification",
    "provider",
    "press",
    "save",
    "gon",
    "na",
    "save",
    "front",
    "end",
    "going",
    "try",
    "run",
    "front",
    "end",
    "gon",
    "na",
    "change",
    "stuff",
    "going",
    "freak",
    "gon",
    "na",
    "run",
    "yarn",
    "dev",
    "new",
    "front",
    "end",
    "gon",
    "na",
    "go",
    "localhost",
    "going",
    "totally",
    "freak",
    "still",
    "morale",
    "stuff",
    "totally",
    "okay",
    "course",
    "need",
    "hard",
    "hat",
    "node",
    "running",
    "test",
    "net",
    "need",
    "synched",
    "morales",
    "need",
    "stuff",
    "working",
    "test",
    "net",
    "right",
    "actually",
    "freaking",
    "great",
    "shows",
    "obviously",
    "nothing",
    "recently",
    "listed",
    "going",
    "gon",
    "na",
    "slash",
    "graph",
    "example",
    "hit",
    "enter",
    "see",
    "hi",
    "show",
    "go",
    "inspect",
    "go",
    "console",
    "console",
    "see",
    "object",
    "active",
    "items",
    "returned",
    "graph",
    "buyer",
    "id",
    "nft",
    "address",
    "price",
    "stuff",
    "air",
    "fantastic",
    "okay",
    "okay",
    "okay",
    "update",
    "let",
    "go",
    "ahead",
    "kill",
    "server",
    "update",
    "instead",
    "use",
    "mirallas",
    "query",
    "going",
    "delete",
    "going",
    "query",
    "apollo",
    "query",
    "graph",
    "ql",
    "everything",
    "else",
    "stays",
    "right",
    "nft",
    "box",
    "rest",
    "code",
    "worked",
    "still",
    "work",
    "exactly",
    "first",
    "got",
    "get",
    "address",
    "gon",
    "na",
    "say",
    "import",
    "sell",
    "sell",
    "nft",
    "import",
    "network",
    "mapping",
    "actually",
    "going",
    "copy",
    "going",
    "import",
    "network",
    "mapping",
    "constants",
    "network",
    "mapping",
    "dot",
    "json",
    "say",
    "const",
    "marketplace",
    "address",
    "equals",
    "going",
    "get",
    "exact",
    "way",
    "sell",
    "nft",
    "going",
    "grab",
    "line",
    "getting",
    "chain",
    "string",
    "paste",
    "means",
    "going",
    "need",
    "get",
    "chain",
    "id",
    "user",
    "morales",
    "gon",
    "na",
    "get",
    "marketplace",
    "address",
    "like",
    "going",
    "copy",
    "line",
    "paste",
    "okay",
    "great",
    "marketplace",
    "address",
    "going",
    "const",
    "loading",
    "error",
    "data",
    "listed",
    "equals",
    "use",
    "query",
    "get",
    "active",
    "items",
    "going",
    "going",
    "create",
    "new",
    "file",
    "constants",
    "going",
    "pass",
    "get",
    "active",
    "items",
    "thing",
    "new",
    "file",
    "going",
    "call",
    "sub",
    "graph",
    "queries",
    "dot",
    "j",
    "gon",
    "na",
    "say",
    "import",
    "g",
    "ql",
    "apollo",
    "slash",
    "client",
    "say",
    "const",
    "get",
    "active",
    "items",
    "equals",
    "g",
    "ql",
    "backtick",
    "exactly",
    "great",
    "let",
    "go",
    "back",
    "graph",
    "example",
    "copy",
    "whole",
    "line",
    "actually",
    "pasted",
    "export",
    "default",
    "get",
    "active",
    "items",
    "import",
    "query",
    "sub",
    "graph",
    "queries",
    "index",
    "dot",
    "j",
    "say",
    "import",
    "get",
    "active",
    "queries",
    "skimming",
    "apt",
    "get",
    "active",
    "items",
    "dot",
    "dot",
    "slash",
    "constants",
    "slash",
    "sub",
    "graph",
    "queries",
    "use",
    "query",
    "pass",
    "get",
    "active",
    "items",
    "return",
    "listed",
    "nf",
    "ts",
    "change",
    "fetching",
    "listed",
    "nf",
    "ts",
    "loading",
    "loading",
    "listed",
    "nf",
    "ts",
    "loading",
    "listen",
    "ts",
    "loading",
    "otherwise",
    "going",
    "another",
    "mapping",
    "return",
    "graph",
    "ql",
    "going",
    "little",
    "bit",
    "different",
    "instead",
    "listing",
    "mts",
    "dot",
    "map",
    "going",
    "listed",
    "nf",
    "dot",
    "aq",
    "two",
    "items",
    "dot",
    "map",
    "f",
    "going",
    "get",
    "price",
    "address",
    "token",
    "id",
    "going",
    "get",
    "marketplace",
    "address",
    "get",
    "seller",
    "nft",
    "going",
    "returned",
    "attributes",
    "console",
    "dot",
    "log",
    "nft",
    "instead",
    "pass",
    "stuff",
    "normally",
    "nft",
    "box",
    "exactly",
    "way",
    "really",
    "swapping",
    "query",
    "methodology",
    "price",
    "going",
    "price",
    "price",
    "going",
    "query",
    "ft",
    "address",
    "going",
    "query",
    "token",
    "id",
    "query",
    "marketplace",
    "address",
    "also",
    "gon",
    "na",
    "slightly",
    "different",
    "going",
    "get",
    "config",
    "seller",
    "going",
    "query",
    "key",
    "going",
    "query",
    "well",
    "save",
    "restart",
    "website",
    "yarn",
    "dev",
    "go",
    "back",
    "homepage",
    "see",
    "everything",
    "exactly",
    "except",
    "images",
    "pulled",
    "graph",
    "instead",
    "pulled",
    "alice",
    "let",
    "go",
    "back",
    "front",
    "end",
    "give",
    "nice",
    "refresh",
    "close",
    "console",
    "go",
    "homepage",
    "forgot",
    "use",
    "query",
    "let",
    "import",
    "use",
    "query",
    "import",
    "use",
    "query",
    "paulo",
    "slash",
    "client",
    "let",
    "save",
    "let",
    "go",
    "back",
    "give",
    "refresh",
    "oh",
    "goodness",
    "updated",
    "get",
    "events",
    "decentralized",
    "data",
    "structure",
    "freaking",
    "awesome",
    "let",
    "talk",
    "hosting",
    "real",
    "quickly",
    "using",
    "image",
    "tag",
    "nft",
    "box",
    "using",
    "image",
    "tag",
    "next",
    "jas",
    "comes",
    "pre",
    "processing",
    "little",
    "hard",
    "use",
    "ipfs",
    "would",
    "need",
    "update",
    "way",
    "images",
    "order",
    "host",
    "ipfs",
    "still",
    "options",
    "actually",
    "morales",
    "actually",
    "even",
    "host",
    "apps",
    "morales",
    "want",
    "also",
    "use",
    "things",
    "like",
    "cell",
    "netlify",
    "etc",
    "really",
    "traditional",
    "centralized",
    "hosting",
    "service",
    "want",
    "challenge",
    "update",
    "code",
    "make",
    "able",
    "hosted",
    "ipfs",
    "end",
    "end",
    "decentralized",
    "marketplace",
    "first",
    "wanted",
    "make",
    "pr",
    "code",
    "successfully",
    "hosted",
    "completely",
    "end",
    "end",
    "ipfs",
    "wins",
    "empty",
    "wow",
    "done",
    "less",
    "absolutely",
    "monstrous",
    "accomplishment",
    "finish",
    "understood",
    "everything",
    "gotten",
    "everything",
    "far",
    "feel",
    "incredibly",
    "proud",
    "last",
    "full",
    "stack",
    "section",
    "front",
    "end",
    "section",
    "full",
    "stack",
    "monster",
    "point",
    "huge",
    "congratulations",
    "super",
    "super",
    "super",
    "proud",
    "definitely",
    "take",
    "break",
    "go",
    "get",
    "coffee",
    "get",
    "ready",
    "final",
    "stretch",
    "lessons",
    "1617",
    "gon",
    "na",
    "go",
    "little",
    "bit",
    "quicker",
    "excited",
    "take",
    "break",
    "see",
    "right",
    "welcome",
    "lesson",
    "six",
    "tene",
    "going",
    "going",
    "even",
    "low",
    "level",
    "code",
    "hard",
    "hat",
    "upgrades",
    "course",
    "per",
    "usual",
    "entire",
    "github",
    "repository",
    "located",
    "additionally",
    "optional",
    "video",
    "watch",
    "want",
    "learn",
    "actually",
    "going",
    "watch",
    "slice",
    "video",
    "explains",
    "upgradable",
    "smart",
    "contracts",
    "let",
    "jump",
    "editing",
    "video",
    "much",
    "later",
    "filmed",
    "hence",
    "beard",
    "jumping",
    "time",
    "time",
    "updating",
    "sections",
    "deploying",
    "smart",
    "contracts",
    "chain",
    "know",
    "smart",
    "contracts",
    "immutable",
    "unchangeable",
    "told",
    "immutable",
    "well",
    "technically",
    "would",
    "correct",
    "however",
    "smart",
    "contracts",
    "actually",
    "change",
    "time",
    "people",
    "transfer",
    "tokens",
    "people",
    "stake",
    "contract",
    "really",
    "type",
    "functionality",
    "smart",
    "contracts",
    "update",
    "balances",
    "update",
    "mappings",
    "update",
    "variables",
    "reflect",
    "reason",
    "immutable",
    "logic",
    "never",
    "changes",
    "chain",
    "like",
    "forever",
    "technically",
    "yes",
    "deployed",
    "immutable",
    "actually",
    "one",
    "major",
    "benefits",
    "smart",
    "contracts",
    "first",
    "place",
    "nobody",
    "tamper",
    "screw",
    "smart",
    "contracts",
    "deploy",
    "however",
    "issue",
    "example",
    "want",
    "upgrade",
    "smart",
    "contract",
    "protocol",
    "things",
    "want",
    "fix",
    "glaring",
    "bug",
    "issue",
    "even",
    "though",
    "ca",
    "change",
    "specific",
    "code",
    "deployed",
    "address",
    "actually",
    "lot",
    "think",
    "video",
    "going",
    "explain",
    "different",
    "methodologies",
    "behind",
    "upgrading",
    "smart",
    "contracts",
    "going",
    "show",
    "hard",
    "hat",
    "open",
    "zeppelin",
    "huge",
    "shout",
    "lot",
    "open",
    "zeppelin",
    "trilobites",
    "articles",
    "helped",
    "put",
    "video",
    "together",
    "number",
    "sources",
    "well",
    "links",
    "description",
    "let",
    "get",
    "first",
    "glance",
    "might",
    "thinking",
    "upgrade",
    "smart",
    "contracts",
    "really",
    "immutable",
    "way",
    "right",
    "explaining",
    "kind",
    "different",
    "philosophies",
    "patterns",
    "use",
    "need",
    "keep",
    "behind",
    "philosophies",
    "decentralization",
    "implications",
    "one",
    "patterns",
    "different",
    "advantages",
    "disadvantages",
    "yes",
    "disadvantages",
    "going",
    "affect",
    "centrality",
    "need",
    "keep",
    "mind",
    "important",
    "go",
    "ahead",
    "jump",
    "start",
    "deploying",
    "upgradable",
    "smart",
    "contracts",
    "understand",
    "trade",
    "offs",
    "going",
    "talk",
    "three",
    "different",
    "ways",
    "upgrade",
    "smart",
    "contracts",
    "first",
    "one",
    "really",
    "slash",
    "paramor",
    "ties",
    "way",
    "upgrade",
    "smart",
    "contracts",
    "social",
    "migration",
    "method",
    "method",
    "probably",
    "heard",
    "proxies",
    "ton",
    "subcategories",
    "like",
    "metamorphic",
    "contracts",
    "transparent",
    "upgradable",
    "proxies",
    "universal",
    "upgradable",
    "proxies",
    "let",
    "talk",
    "really",
    "upgrading",
    "method",
    "parameterization",
    "method",
    "whatever",
    "want",
    "call",
    "simplest",
    "way",
    "think",
    "upgrading",
    "smart",
    "contracts",
    "really",
    "upgrading",
    "smart",
    "contracts",
    "ca",
    "really",
    "change",
    "logic",
    "smart",
    "contract",
    "whatever",
    "logic",
    "written",
    "also",
    "add",
    "new",
    "storage",
    "state",
    "variables",
    "really",
    "really",
    "upgrading",
    "something",
    "think",
    "upgrades",
    "parameterizing",
    "everything",
    "whatever",
    "logic",
    "deployed",
    "interacting",
    "function",
    "means",
    "whole",
    "bunch",
    "setter",
    "functions",
    "update",
    "certain",
    "parameters",
    "like",
    "maybe",
    "reward",
    "parameter",
    "gives",
    "token",
    "1",
    "percent",
    "every",
    "year",
    "something",
    "like",
    "maybe",
    "setter",
    "function",
    "says",
    "hey",
    "update",
    "2",
    "percent",
    "update",
    "4",
    "percent",
    "setter",
    "function",
    "changes",
    "variable",
    "advantages",
    "obviously",
    "really",
    "simple",
    "implement",
    "disadvantage",
    "think",
    "logic",
    "functionality",
    "first",
    "time",
    "deployed",
    "smart",
    "contract",
    "bad",
    "stuck",
    "ca",
    "update",
    "logic",
    "really",
    "update",
    "anything",
    "parameterization",
    "aka",
    "really",
    "method",
    "thing",
    "think",
    "admins",
    "access",
    "setter",
    "functions",
    "updating",
    "functions",
    "single",
    "person",
    "guess",
    "centralized",
    "smart",
    "contract",
    "course",
    "add",
    "governance",
    "contract",
    "admin",
    "contract",
    "protocol",
    "would",
    "decentralized",
    "way",
    "keep",
    "mind",
    "method",
    "need",
    "governance",
    "protocol",
    "another",
    "example",
    "might",
    "contract",
    "registry",
    "something",
    "actually",
    "early",
    "versions",
    "aba",
    "used",
    "call",
    "function",
    "actually",
    "check",
    "contract",
    "registry",
    "updated",
    "parameter",
    "somebody",
    "get",
    "routed",
    "contract",
    "call",
    "really",
    "allow",
    "us",
    "full",
    "functionality",
    "upgrades",
    "argue",
    "registry",
    "mix",
    "one",
    "later",
    "versions",
    "intents",
    "purposes",
    "really",
    "give",
    "us",
    "flexibility",
    "want",
    "upgrades",
    "people",
    "might",
    "even",
    "think",
    "upgrading",
    "smart",
    "contract",
    "ruining",
    "decent",
    "reality",
    "one",
    "things",
    "makes",
    "smart",
    "contracts",
    "potent",
    "immutable",
    "one",
    "benefits",
    "people",
    "think",
    "add",
    "customization",
    "upgradability",
    "deploy",
    "contract",
    "trilobites",
    "actually",
    "argued",
    "deploy",
    "contract",
    "knowing",
    "ca",
    "changed",
    "later",
    "take",
    "little",
    "bit",
    "extra",
    "time",
    "making",
    "sure",
    "get",
    "everything",
    "right",
    "often",
    "less",
    "security",
    "vulnerabilities",
    "setting",
    "forgetting",
    "looking",
    "wanted",
    "upgrade",
    "smart",
    "contract",
    "philosophy",
    "mind",
    "philosophy",
    "want",
    "keep",
    "smart",
    "contracts",
    "immutable",
    "instead",
    "use",
    "social",
    "migration",
    "method",
    "previously",
    "called",
    "eat",
    "method",
    "think",
    "less",
    "funny",
    "gon",
    "na",
    "stick",
    "social",
    "migration",
    "social",
    "eating",
    "method",
    "migration",
    "method",
    "deploy",
    "new",
    "contract",
    "connected",
    "old",
    "contract",
    "way",
    "social",
    "convention",
    "tell",
    "everybody",
    "hey",
    "hey",
    "new",
    "contract",
    "new",
    "one",
    "deployed",
    "yeah",
    "real",
    "one",
    "convention",
    "people",
    "migrating",
    "using",
    "new",
    "one",
    "upgrade",
    "done",
    "hence",
    "slang",
    "name",
    "social",
    "yeet",
    "use",
    "first",
    "one",
    "way",
    "move",
    "second",
    "one",
    "think",
    "funny",
    "yeah",
    "advantage",
    "truly",
    "always",
    "saying",
    "hey",
    "immutable",
    "smart",
    "contract",
    "new",
    "one",
    "really",
    "truest",
    "definition",
    "immutable",
    "since",
    "give",
    "way",
    "upgraded",
    "place",
    "somebody",
    "calls",
    "contract",
    "years",
    "future",
    "respond",
    "exactly",
    "another",
    "huge",
    "disadvantage",
    "totally",
    "new",
    "contract",
    "address",
    "erc",
    "20",
    "token",
    "example",
    "go",
    "convince",
    "exchanges",
    "list",
    "new",
    "contract",
    "address",
    "actual",
    "address",
    "keep",
    "mind",
    "move",
    "state",
    "first",
    "one",
    "second",
    "one",
    "example",
    "erc",
    "token",
    "moving",
    "new",
    "version",
    "erc",
    "token",
    "way",
    "take",
    "mappings",
    "first",
    "contract",
    "move",
    "second",
    "one",
    "obviously",
    "ways",
    "since",
    "everything",
    "chain",
    "million",
    "transfer",
    "calls",
    "want",
    "write",
    "script",
    "updates",
    "everyone",
    "balance",
    "figures",
    "everyone",
    "balance",
    "migrate",
    "new",
    "version",
    "contract",
    "ton",
    "social",
    "convention",
    "work",
    "trilobites",
    "actually",
    "written",
    "fantastic",
    "blog",
    "upgrading",
    "v1",
    "v2",
    "etc",
    "eat",
    "methodology",
    "give",
    "lot",
    "steps",
    "moving",
    "storage",
    "state",
    "variables",
    "new",
    "contract",
    "link",
    "description",
    "want",
    "read",
    "let",
    "get",
    "big",
    "ticket",
    "item",
    "order",
    "really",
    "robust",
    "upgrading",
    "mentality",
    "philosophy",
    "need",
    "type",
    "methodology",
    "framework",
    "update",
    "state",
    "keep",
    "contract",
    "address",
    "allow",
    "us",
    "update",
    "type",
    "logic",
    "smart",
    "contracts",
    "easy",
    "way",
    "leads",
    "us",
    "big",
    "ticket",
    "item",
    "proxies",
    "big",
    "ticket",
    "item",
    "proxies",
    "proxies",
    "proxies",
    "truest",
    "form",
    "upgrades",
    "since",
    "user",
    "keep",
    "interacting",
    "protocols",
    "proxies",
    "even",
    "notice",
    "anything",
    "changed",
    "even",
    "got",
    "updated",
    "also",
    "places",
    "screw",
    "easiest",
    "proxies",
    "use",
    "lot",
    "low",
    "level",
    "functionality",
    "main",
    "one",
    "delegate",
    "call",
    "functionality",
    "delegate",
    "call",
    "low",
    "level",
    "function",
    "code",
    "target",
    "contract",
    "executed",
    "context",
    "calling",
    "contract",
    "message",
    "dot",
    "sender",
    "message",
    "dot",
    "value",
    "also",
    "change",
    "understand",
    "delegate",
    "call",
    "means",
    "right",
    "great",
    "english",
    "means",
    "delegate",
    "call",
    "function",
    "contract",
    "b",
    "contract",
    "contracts",
    "b",
    "logic",
    "contract",
    "contract",
    "b",
    "function",
    "says",
    "hey",
    "store",
    "value",
    "variable",
    "top",
    "going",
    "store",
    "variable",
    "contract",
    "powerhouse",
    "combined",
    "fallback",
    "function",
    "allows",
    "us",
    "delegate",
    "calls",
    "proxy",
    "contract",
    "address",
    "contract",
    "means",
    "one",
    "proxy",
    "contract",
    "address",
    "forever",
    "point",
    "route",
    "people",
    "correct",
    "implementation",
    "contract",
    "logic",
    "whenever",
    "want",
    "upgrade",
    "deploy",
    "new",
    "implementation",
    "contract",
    "point",
    "proxy",
    "new",
    "implementation",
    "whenever",
    "user",
    "calls",
    "function",
    "proxy",
    "contract",
    "going",
    "delegate",
    "call",
    "new",
    "contract",
    "call",
    "admin",
    "function",
    "proxy",
    "contract",
    "let",
    "call",
    "upgrade",
    "something",
    "make",
    "contract",
    "calls",
    "go",
    "new",
    "contract",
    "talking",
    "proxies",
    "four",
    "pieces",
    "terminology",
    "want",
    "keep",
    "mind",
    "first",
    "implementation",
    "contract",
    "implementation",
    "contract",
    "logic",
    "pieces",
    "protocol",
    "whenever",
    "upgrade",
    "actually",
    "launch",
    "brand",
    "new",
    "implementation",
    "contract",
    "proxy",
    "contract",
    "proxy",
    "points",
    "implementation",
    "correct",
    "one",
    "routes",
    "everyone",
    "calls",
    "correct",
    "implementation",
    "contract",
    "think",
    "proxy",
    "contracts",
    "sits",
    "top",
    "implementations",
    "user",
    "user",
    "going",
    "making",
    "contract",
    "function",
    "calls",
    "proxy",
    "contract",
    "type",
    "admin",
    "admin",
    "one",
    "going",
    "decide",
    "upgrade",
    "contract",
    "point",
    "scenario",
    "cool",
    "thing",
    "proxy",
    "delegate",
    "call",
    "storage",
    "variables",
    "going",
    "stored",
    "proxy",
    "contract",
    "implementation",
    "contract",
    "way",
    "upgrade",
    "new",
    "logic",
    "contract",
    "data",
    "stay",
    "proxy",
    "contract",
    "whenever",
    "want",
    "update",
    "logic",
    "point",
    "new",
    "implementation",
    "contract",
    "want",
    "add",
    "new",
    "storage",
    "variable",
    "new",
    "type",
    "storage",
    "add",
    "logic",
    "contract",
    "proxy",
    "contract",
    "pick",
    "using",
    "proxies",
    "couple",
    "gotchas",
    "gon",
    "na",
    "talk",
    "gotchas",
    "going",
    "talk",
    "different",
    "proxy",
    "contract",
    "methodologies",
    "yes",
    "many",
    "proxy",
    "contract",
    "methodologies",
    "well",
    "trilobites",
    "really",
    "recommend",
    "using",
    "upgradable",
    "proxies",
    "smart",
    "contracts",
    "fraught",
    "lot",
    "potential",
    "issues",
    "mention",
    "still",
    "type",
    "admin",
    "going",
    "upgrading",
    "smart",
    "contracts",
    "governance",
    "protocol",
    "great",
    "decentralized",
    "single",
    "group",
    "entity",
    "problem",
    "two",
    "biggest",
    "gotchas",
    "storage",
    "clashes",
    "function",
    "selector",
    "clashes",
    "mean",
    "use",
    "delegate",
    "call",
    "remember",
    "logic",
    "contract",
    "b",
    "inside",
    "contract",
    "contract",
    "b",
    "says",
    "need",
    "set",
    "value",
    "two",
    "go",
    "ahead",
    "set",
    "value",
    "smart",
    "contracts",
    "actually",
    "kind",
    "dumb",
    "actually",
    "set",
    "value",
    "whatever",
    "storage",
    "location",
    "contract",
    "contract",
    "contract",
    "looks",
    "like",
    "two",
    "variables",
    "contract",
    "still",
    "going",
    "set",
    "first",
    "storage",
    "spot",
    "contract",
    "new",
    "value",
    "really",
    "important",
    "know",
    "means",
    "append",
    "new",
    "storage",
    "variables",
    "new",
    "implementation",
    "contracts",
    "ca",
    "reorder",
    "change",
    "old",
    "ones",
    "called",
    "storage",
    "clashing",
    "implementations",
    "going",
    "talk",
    "address",
    "issue",
    "next",
    "one",
    "called",
    "function",
    "select",
    "clashes",
    "tell",
    "proxies",
    "delegate",
    "call",
    "one",
    "implementations",
    "uses",
    "called",
    "function",
    "selector",
    "find",
    "function",
    "function",
    "selector",
    "four",
    "byte",
    "hash",
    "function",
    "name",
    "function",
    "signature",
    "worry",
    "function",
    "signature",
    "possible",
    "function",
    "implementation",
    "contract",
    "function",
    "selector",
    "admin",
    "function",
    "proxy",
    "contract",
    "may",
    "cause",
    "accidentally",
    "whole",
    "bunch",
    "weird",
    "stuff",
    "example",
    "sample",
    "code",
    "front",
    "even",
    "though",
    "functions",
    "totally",
    "different",
    "actually",
    "function",
    "selector",
    "yes",
    "run",
    "issue",
    "harmless",
    "function",
    "like",
    "get",
    "price",
    "function",
    "selector",
    "upgrade",
    "proxy",
    "destroy",
    "proxy",
    "something",
    "like",
    "leads",
    "first",
    "three",
    "implementations",
    "proxy",
    "contracts",
    "called",
    "transparent",
    "proxy",
    "pattern",
    "actually",
    "going",
    "pattern",
    "gon",
    "na",
    "demoing",
    "today",
    "methodology",
    "admins",
    "allowed",
    "call",
    "admin",
    "functions",
    "ca",
    "call",
    "functions",
    "implementation",
    "contract",
    "users",
    "call",
    "functions",
    "implementation",
    "contract",
    "admin",
    "contracts",
    "way",
    "ca",
    "ever",
    "accidentally",
    "one",
    "two",
    "swapping",
    "function",
    "selector",
    "clash",
    "running",
    "big",
    "issue",
    "call",
    "function",
    "probably",
    "admin",
    "calling",
    "admin",
    "functions",
    "user",
    "calling",
    "implementation",
    "functions",
    "admin",
    "build",
    "crazy",
    "awesome",
    "defi",
    "protocol",
    "better",
    "come",
    "new",
    "wallet",
    "address",
    "ca",
    "participate",
    "second",
    "type",
    "proxy",
    "going",
    "talk",
    "universal",
    "upgradeable",
    "proxy",
    "op",
    "amps",
    "version",
    "upgradable",
    "contracts",
    "actually",
    "puts",
    "logic",
    "upgrading",
    "implementation",
    "way",
    "solidity",
    "compiler",
    "actually",
    "kick",
    "say",
    "hey",
    "got",
    "two",
    "functions",
    "function",
    "selector",
    "also",
    "advantageous",
    "one",
    "less",
    "read",
    "longer",
    "check",
    "proxy",
    "contract",
    "someone",
    "admin",
    "saves",
    "gas",
    "course",
    "proxy",
    "also",
    "little",
    "bit",
    "smaller",
    "issue",
    "deploy",
    "implementation",
    "contract",
    "without",
    "upgradeable",
    "functionality",
    "stuck",
    "back",
    "eat",
    "method",
    "last",
    "pattern",
    "methodology",
    "going",
    "talk",
    "diamond",
    "pattern",
    "number",
    "things",
    "one",
    "biggest",
    "things",
    "actually",
    "allows",
    "multiple",
    "implementation",
    "contracts",
    "addresses",
    "couple",
    "different",
    "issues",
    "example",
    "contract",
    "big",
    "fit",
    "one",
    "contract",
    "maximum",
    "size",
    "multiple",
    "contracts",
    "multi",
    "implementation",
    "method",
    "also",
    "allows",
    "make",
    "granular",
    "upgrades",
    "like",
    "always",
    "deploy",
    "upgrade",
    "entire",
    "smart",
    "contract",
    "upgrade",
    "little",
    "pieces",
    "chunked",
    "proxies",
    "mentioned",
    "type",
    "aetherium",
    "improvement",
    "proposal",
    "draft",
    "phase",
    "end",
    "explainer",
    "demo",
    "showing",
    "delegate",
    "call",
    "function",
    "works",
    "end",
    "demo",
    "right",
    "let",
    "look",
    "delegate",
    "call",
    "going",
    "learn",
    "actually",
    "build",
    "proxies",
    "build",
    "upgradable",
    "smart",
    "contracts",
    "first",
    "need",
    "learn",
    "delegate",
    "call",
    "function",
    "going",
    "really",
    "similar",
    "call",
    "function",
    "learned",
    "much",
    "earlier",
    "seen",
    "sure",
    "go",
    "back",
    "harnett",
    "sub",
    "lesson",
    "evm",
    "opcodes",
    "coding",
    "calling",
    "give",
    "context",
    "delegate",
    "call",
    "like",
    "said",
    "explainer",
    "similar",
    "call",
    "however",
    "way",
    "think",
    "one",
    "contract",
    "says",
    "oh",
    "really",
    "like",
    "function",
    "going",
    "borrow",
    "going",
    "looking",
    "solidity",
    "example",
    "leave",
    "description",
    "github",
    "code",
    "github",
    "associated",
    "lesson",
    "well",
    "two",
    "contracts",
    "contract",
    "b",
    "going",
    "deploying",
    "remix",
    "looks",
    "like",
    "real",
    "minimalistic",
    "real",
    "simple",
    "contract",
    "couple",
    "storage",
    "variables",
    "function",
    "updates",
    "values",
    "function",
    "called",
    "set",
    "vars",
    "updates",
    "public",
    "num",
    "learned",
    "whenever",
    "type",
    "contract",
    "storage",
    "variables",
    "get",
    "stored",
    "storage",
    "data",
    "structure",
    "index",
    "starting",
    "zero",
    "right",
    "public",
    "num",
    "index",
    "zero",
    "sender",
    "index",
    "one",
    "values",
    "index",
    "two",
    "etc",
    "going",
    "deploy",
    "contract",
    "contract",
    "actually",
    "going",
    "use",
    "delegates",
    "call",
    "function",
    "contract",
    "going",
    "look",
    "little",
    "bit",
    "different",
    "still",
    "going",
    "set",
    "bars",
    "functions",
    "except",
    "going",
    "make",
    "delegate",
    "call",
    "function",
    "call",
    "contract",
    "lesson",
    "14",
    "nf",
    "ts",
    "learned",
    "call",
    "api",
    "dot",
    "encode",
    "signature",
    "api",
    "dot",
    "encode",
    "etc",
    "unfamiliar",
    "function",
    "selectors",
    "unfamiliar",
    "unfamiliar",
    "syntax",
    "sure",
    "go",
    "back",
    "lesson",
    "14",
    "understand",
    "abi",
    "dot",
    "encode",
    "signature",
    "contract",
    "dot",
    "call",
    "difference",
    "contract",
    "dot",
    "delegate",
    "call",
    "call",
    "something",
    "similar",
    "call",
    "normally",
    "contract",
    "dot",
    "call",
    "contract",
    "would",
    "call",
    "would",
    "calling",
    "function",
    "set",
    "vars",
    "would",
    "update",
    "contracts",
    "b",
    "storage",
    "instead",
    "saying",
    "hey",
    "call",
    "set",
    "vars",
    "function",
    "pass",
    "input",
    "parameter",
    "call",
    "contract",
    "call",
    "contract",
    "kind",
    "borrowing",
    "function",
    "contract",
    "instead",
    "going",
    "going",
    "borrow",
    "set",
    "bars",
    "run",
    "set",
    "bars",
    "function",
    "difference",
    "instead",
    "num",
    "equals",
    "num",
    "variables",
    "could",
    "named",
    "different",
    "variables",
    "contract",
    "instead",
    "num",
    "equals",
    "num",
    "contract",
    "going",
    "say",
    "hey",
    "whatever",
    "storage",
    "zero",
    "equal",
    "whatever",
    "pass",
    "input",
    "parameter",
    "little",
    "bit",
    "confusing",
    "stay",
    "let",
    "go",
    "ahead",
    "let",
    "see",
    "remix",
    "going",
    "copy",
    "paste",
    "code",
    "remix",
    "kind",
    "test",
    "see",
    "looks",
    "like",
    "link",
    "github",
    "repo",
    "associated",
    "course",
    "feel",
    "free",
    "pause",
    "video",
    "grab",
    "link",
    "solidity",
    "hyphen",
    "hyphen",
    "call",
    "grab",
    "code",
    "directly",
    "lesson",
    "16",
    "hardhead",
    "upgrades",
    "let",
    "compile",
    "code",
    "let",
    "show",
    "mean",
    "going",
    "compile",
    "go",
    "run",
    "tab",
    "first",
    "let",
    "deploy",
    "contract",
    "beam",
    "hit",
    "deploy",
    "contract",
    "num",
    "center",
    "value",
    "blank",
    "update",
    "number",
    "something",
    "like",
    "777",
    "hit",
    "set",
    "vars",
    "set",
    "vars",
    "change",
    "storage",
    "variable",
    "num",
    "changing",
    "sender",
    "value",
    "sender",
    "value",
    "zero",
    "let",
    "deploy",
    "contract",
    "scroll",
    "back",
    "contract",
    "deploy",
    "course",
    "javascript",
    "vm",
    "contract",
    "num",
    "value",
    "cinder",
    "also",
    "blank",
    "call",
    "set",
    "vars",
    "going",
    "borrow",
    "set",
    "vars",
    "function",
    "contract",
    "b",
    "run",
    "contract",
    "almost",
    "think",
    "copying",
    "set",
    "vars",
    "pasting",
    "contract",
    "one",
    "run",
    "immediately",
    "deleting",
    "adm",
    "delegate",
    "call",
    "function",
    "call",
    "set",
    "vars",
    "going",
    "pass",
    "contract",
    "address",
    "input",
    "parameter",
    "knows",
    "call",
    "contract",
    "said",
    "virus",
    "function",
    "pass",
    "address",
    "pass",
    "since",
    "borrowing",
    "function",
    "going",
    "update",
    "num",
    "contract",
    "b",
    "going",
    "update",
    "num",
    "contract",
    "hit",
    "set",
    "vars",
    "see",
    "num",
    "seven",
    "see",
    "senator",
    "see",
    "value",
    "still",
    "zero",
    "borrowing",
    "function",
    "running",
    "way",
    "works",
    "actually",
    "look",
    "names",
    "stored",
    "variables",
    "looks",
    "storage",
    "slots",
    "borrow",
    "function",
    "using",
    "delegate",
    "call",
    "could",
    "variables",
    "named",
    "anything",
    "instead",
    "num",
    "could",
    "call",
    "first",
    "value",
    "senator",
    "could",
    "call",
    "something",
    "else",
    "value",
    "could",
    "call",
    "foo",
    "whatever",
    "want",
    "borrow",
    "function",
    "using",
    "delegate",
    "call",
    "instead",
    "grabbing",
    "actual",
    "names",
    "variables",
    "contract",
    "swap",
    "variable",
    "names",
    "storage",
    "slot",
    "says",
    "oh",
    "okay",
    "well",
    "contract",
    "b",
    "accessing",
    "num",
    "variable",
    "storage",
    "slot",
    "zero",
    "borrow",
    "set",
    "bars",
    "contract",
    "delegate",
    "call",
    "say",
    "storage",
    "slot",
    "zero",
    "going",
    "equal",
    "underscore",
    "num",
    "contract",
    "storage",
    "slot",
    "zero",
    "first",
    "value",
    "say",
    "first",
    "value",
    "equals",
    "underscore",
    "something",
    "else",
    "going",
    "stored",
    "slot",
    "two",
    "gon",
    "na",
    "say",
    "okay",
    "storage",
    "slot",
    "two",
    "gon",
    "na",
    "update",
    "storage",
    "slot",
    "two",
    "message",
    "sender",
    "okay",
    "value",
    "storage",
    "slot",
    "three",
    "whatever",
    "storage",
    "slot",
    "three",
    "update",
    "message",
    "dot",
    "value",
    "like",
    "essentially",
    "going",
    "behind",
    "scenes",
    "let",
    "go",
    "ahead",
    "let",
    "delete",
    "redeploy",
    "redeploy",
    "deploy",
    "contract",
    "deployed",
    "contract",
    "right",
    "b",
    "1234",
    "set",
    "vars",
    "contract",
    "even",
    "though",
    "variables",
    "different",
    "names",
    "could",
    "grab",
    "contract",
    "b",
    "address",
    "paste",
    "654",
    "hit",
    "set",
    "vars",
    "first",
    "value",
    "six",
    "four",
    "delegate",
    "call",
    "allows",
    "us",
    "borrow",
    "functions",
    "transposes",
    "whatever",
    "storage",
    "location",
    "equivalents",
    "thing",
    "interesting",
    "even",
    "variables",
    "still",
    "save",
    "storage",
    "slots",
    "contract",
    "variable",
    "names",
    "storage",
    "slot",
    "01",
    "two",
    "would",
    "still",
    "get",
    "updated",
    "things",
    "get",
    "really",
    "interesting",
    "let",
    "delete",
    "contract",
    "let",
    "change",
    "type",
    "contract",
    "first",
    "value",
    "unt",
    "boolean",
    "let",
    "save",
    "let",
    "deploy",
    "contract",
    "call",
    "set",
    "vars",
    "contract",
    "still",
    "going",
    "use",
    "set",
    "vars",
    "function",
    "contract",
    "b",
    "takes",
    "yewande",
    "assigns",
    "first",
    "storage",
    "slot",
    "number",
    "pass",
    "first",
    "storage",
    "slot",
    "boolean",
    "think",
    "going",
    "happen",
    "well",
    "let",
    "try",
    "let",
    "copy",
    "contract",
    "b",
    "address",
    "paste",
    "pass",
    "tu",
    "tu",
    "tu",
    "input",
    "parameter",
    "hit",
    "set",
    "vars",
    "transaction",
    "actually",
    "go",
    "look",
    "first",
    "value",
    "says",
    "true",
    "hmm",
    "really",
    "weird",
    "change",
    "set",
    "vars",
    "zero",
    "hit",
    "set",
    "vars",
    "first",
    "value",
    "false",
    "storage",
    "add",
    "number",
    "set",
    "vars",
    "going",
    "setting",
    "storage",
    "slot",
    "boolean",
    "number",
    "solidity",
    "reads",
    "goes",
    "oh",
    "well",
    "first",
    "value",
    "boolean",
    "anything",
    "zero",
    "going",
    "true",
    "actually",
    "get",
    "really",
    "weird",
    "results",
    "typings",
    "different",
    "stored",
    "variants",
    "different",
    "made",
    "address",
    "working",
    "delegate",
    "call",
    "get",
    "really",
    "weird",
    "really",
    "tricky",
    "really",
    "fast",
    "right",
    "said",
    "let",
    "turn",
    "heat",
    "let",
    "show",
    "small",
    "proxy",
    "minimal",
    "proxy",
    "example",
    "shows",
    "contract",
    "used",
    "singular",
    "address",
    "underlying",
    "code",
    "actually",
    "change",
    "code",
    "gon",
    "na",
    "working",
    "hardhat",
    "upgrades",
    "fcc",
    "sub",
    "lesson",
    "small",
    "proxy",
    "dot",
    "sol",
    "go",
    "ahead",
    "copy",
    "paste",
    "code",
    "want",
    "follow",
    "along",
    "code",
    "along",
    "absolutely",
    "want",
    "say",
    "going",
    "one",
    "advanced",
    "section",
    "entire",
    "course",
    "feel",
    "free",
    "go",
    "ahead",
    "skip",
    "sub",
    "lesson",
    "want",
    "move",
    "learning",
    "actually",
    "build",
    "proxies",
    "without",
    "really",
    "understanding",
    "going",
    "behind",
    "scenes",
    "however",
    "still",
    "really",
    "powerful",
    "understand",
    "going",
    "behind",
    "scenes",
    "minimalistic",
    "starting",
    "position",
    "right",
    "small",
    "proxy",
    "proxy",
    "importing",
    "proxy",
    "dot",
    "sole",
    "thing",
    "zeplin",
    "openzeppelin",
    "minimalistic",
    "proxy",
    "contract",
    "use",
    "actually",
    "start",
    "working",
    "delegate",
    "call",
    "contract",
    "uses",
    "lot",
    "assembly",
    "something",
    "called",
    "intermediate",
    "language",
    "compiled",
    "bytecode",
    "different",
    "backends",
    "sort",
    "inline",
    "assembly",
    "inside",
    "solidity",
    "allows",
    "write",
    "really",
    "really",
    "low",
    "level",
    "code",
    "close",
    "opcodes",
    "going",
    "go",
    "leave",
    "links",
    "documentation",
    "want",
    "learn",
    "even",
    "really",
    "advanced",
    "user",
    "really",
    "want",
    "try",
    "use",
    "little",
    "eula",
    "possible",
    "since",
    "much",
    "lower",
    "level",
    "much",
    "easier",
    "screw",
    "things",
    "however",
    "like",
    "said",
    "example",
    "going",
    "using",
    "little",
    "bit",
    "proxy",
    "going",
    "delegate",
    "function",
    "inside",
    "inline",
    "assembly",
    "whole",
    "lot",
    "really",
    "low",
    "level",
    "stuff",
    "main",
    "thing",
    "goes",
    "ahead",
    "delegate",
    "call",
    "functionality",
    "look",
    "see",
    "using",
    "fallback",
    "function",
    "receive",
    "function",
    "whenever",
    "receives",
    "function",
    "recognize",
    "call",
    "fallback",
    "fallback",
    "calls",
    "delegate",
    "function",
    "anytime",
    "proxy",
    "contract",
    "receives",
    "data",
    "function",
    "recognize",
    "sends",
    "implementation",
    "implementation",
    "contract",
    "call",
    "delegate",
    "call",
    "minimalistic",
    "example",
    "function",
    "called",
    "set",
    "implementation",
    "change",
    "delegate",
    "calls",
    "going",
    "sending",
    "equivalent",
    "like",
    "upgrading",
    "smart",
    "contract",
    "implementation",
    "read",
    "implementation",
    "contract",
    "work",
    "proxies",
    "really",
    "want",
    "anything",
    "storage",
    "delegate",
    "call",
    "delegate",
    "call",
    "changes",
    "storage",
    "going",
    "screw",
    "contract",
    "storage",
    "one",
    "caveat",
    "though",
    "still",
    "need",
    "store",
    "implementations",
    "address",
    "somewhere",
    "call",
    "erp",
    "called",
    "standard",
    "proxy",
    "storage",
    "slot",
    "aetherium",
    "improvement",
    "proposal",
    "certain",
    "storage",
    "slots",
    "specifically",
    "used",
    "proxies",
    "minimalistic",
    "example",
    "set",
    "bytes",
    "32",
    "private",
    "constant",
    "implementation",
    "slot",
    "location",
    "storage",
    "say",
    "okay",
    "whatever",
    "storage",
    "slot",
    "going",
    "location",
    "implementation",
    "address",
    "way",
    "proxy",
    "going",
    "work",
    "contract",
    "calls",
    "proxy",
    "contract",
    "set",
    "implementation",
    "function",
    "going",
    "pass",
    "whatever",
    "inside",
    "implementation",
    "slot",
    "address",
    "going",
    "build",
    "small",
    "proxy",
    "proxy",
    "create",
    "real",
    "minimalistic",
    "contract",
    "say",
    "contract",
    "employee",
    "mentation",
    "give",
    "u",
    "public",
    "value",
    "function",
    "set",
    "value",
    "add",
    "256",
    "new",
    "value",
    "public",
    "say",
    "value",
    "equals",
    "new",
    "value",
    "going",
    "implementation",
    "anytime",
    "somebody",
    "calls",
    "small",
    "proxy",
    "small",
    "proxy",
    "contract",
    "going",
    "delegate",
    "call",
    "implementation",
    "save",
    "storage",
    "small",
    "proxy",
    "address",
    "going",
    "call",
    "small",
    "proxy",
    "data",
    "use",
    "set",
    "value",
    "function",
    "selector",
    "let",
    "make",
    "little",
    "easier",
    "figure",
    "get",
    "data",
    "creating",
    "new",
    "helper",
    "function",
    "function",
    "get",
    "data",
    "transact",
    "get",
    "data",
    "using",
    "api",
    "dot",
    "encode",
    "signature",
    "learned",
    "earlier",
    "lesson",
    "function",
    "get",
    "data",
    "transact",
    "pass",
    "un",
    "256",
    "number",
    "update",
    "give",
    "number",
    "want",
    "call",
    "new",
    "value",
    "public",
    "pure",
    "going",
    "return",
    "bytes",
    "memory",
    "say",
    "return",
    "abi",
    "dot",
    "encode",
    "signature",
    "set",
    "value",
    "went",
    "56",
    "comma",
    "number",
    "update",
    "remember",
    "call",
    "anything",
    "section",
    "remember",
    "remember",
    "refer",
    "back",
    "nft",
    "section",
    "learn",
    "call",
    "anything",
    "use",
    "abi",
    "dot",
    "encode",
    "abi",
    "dot",
    "encode",
    "signature",
    "call",
    "anything",
    "raw",
    "bytes",
    "bring",
    "get",
    "data",
    "transact",
    "know",
    "call",
    "implementation",
    "small",
    "proxy",
    "going",
    "update",
    "small",
    "proxies",
    "storage",
    "create",
    "little",
    "function",
    "solidity",
    "read",
    "storage",
    "small",
    "proxy",
    "gon",
    "na",
    "say",
    "function",
    "read",
    "storage",
    "public",
    "view",
    "returns",
    "returns",
    "256",
    "value",
    "storage",
    "slot",
    "zero",
    "going",
    "use",
    "little",
    "bit",
    "assembly",
    "since",
    "low",
    "level",
    "stuff",
    "going",
    "call",
    "load",
    "code",
    "read",
    "value",
    "storage",
    "slot",
    "zero",
    "say",
    "value",
    "storage",
    "slot",
    "zero",
    "going",
    "set",
    "assembly",
    "set",
    "things",
    "going",
    "set",
    "equal",
    "load",
    "storage",
    "slot",
    "zero",
    "return",
    "value",
    "reading",
    "directly",
    "storage",
    "oops",
    "need",
    "little",
    "parenthese",
    "sorry",
    "let",
    "go",
    "ahead",
    "deploy",
    "small",
    "proxy",
    "let",
    "deploy",
    "implementation",
    "small",
    "proxy",
    "function",
    "called",
    "set",
    "implementation",
    "saying",
    "okay",
    "anytime",
    "call",
    "proxy",
    "contract",
    "going",
    "delegate",
    "call",
    "functions",
    "going",
    "grab",
    "current",
    "implementations",
    "address",
    "paste",
    "set",
    "implementation",
    "data",
    "set",
    "value",
    "256",
    "number",
    "update",
    "encoded",
    "call",
    "small",
    "proxy",
    "data",
    "proxy",
    "contract",
    "gon",
    "na",
    "go",
    "oh",
    "okay",
    "function",
    "see",
    "function",
    "going",
    "call",
    "fallback",
    "right",
    "coming",
    "open",
    "zeplin",
    "fallback",
    "going",
    "delegate",
    "low",
    "level",
    "stuff",
    "basically",
    "delegate",
    "call",
    "gon",
    "na",
    "call",
    "fallback",
    "function",
    "gon",
    "na",
    "get",
    "function",
    "implementation",
    "gon",
    "na",
    "borrow",
    "function",
    "gon",
    "na",
    "use",
    "copy",
    "implementation",
    "set",
    "address",
    "logic",
    "going",
    "done",
    "go",
    "ahead",
    "grabbed",
    "paste",
    "call",
    "data",
    "hit",
    "transact",
    "looks",
    "like",
    "went",
    "successfully",
    "went",
    "read",
    "storage",
    "see",
    "indeed",
    "777",
    "incredibly",
    "exciting",
    "incredibly",
    "beneficial",
    "let",
    "say",
    "want",
    "go",
    "update",
    "code",
    "right",
    "like",
    "contract",
    "implementation",
    "anymore",
    "let",
    "go",
    "ahead",
    "copy",
    "contract",
    "implementation",
    "make",
    "new",
    "one",
    "called",
    "implementation",
    "let",
    "say",
    "whenever",
    "somebody",
    "calls",
    "set",
    "value",
    "value",
    "equals",
    "new",
    "value",
    "plus",
    "one",
    "plus",
    "two",
    "let",
    "go",
    "ahead",
    "let",
    "save",
    "let",
    "compile",
    "let",
    "deploy",
    "implementation",
    "b",
    "grab",
    "implementation",
    "b",
    "contract",
    "address",
    "call",
    "onset",
    "implementation",
    "proxy",
    "essentially",
    "upgraded",
    "implementation",
    "implementation",
    "use",
    "data",
    "still",
    "going",
    "call",
    "set",
    "value",
    "instead",
    "delegate",
    "calling",
    "implementation",
    "b",
    "instead",
    "implementation",
    "call",
    "put",
    "data",
    "low",
    "level",
    "call",
    "data",
    "hit",
    "transact",
    "looks",
    "like",
    "went",
    "read",
    "storage",
    "779",
    "since",
    "value",
    "equals",
    "new",
    "value",
    "plus",
    "two",
    "minimalistic",
    "example",
    "upgrading",
    "actually",
    "works",
    "incredibly",
    "beneficial",
    "always",
    "tell",
    "people",
    "hey",
    "make",
    "function",
    "calls",
    "small",
    "proxy",
    "good",
    "go",
    "like",
    "said",
    "also",
    "means",
    "developers",
    "protocol",
    "essentially",
    "change",
    "underlying",
    "logic",
    "time",
    "important",
    "sure",
    "read",
    "contracts",
    "check",
    "see",
    "developer",
    "keys",
    "contract",
    "updated",
    "contract",
    "updated",
    "single",
    "person",
    "update",
    "well",
    "guess",
    "single",
    "centralized",
    "point",
    "failure",
    "technically",
    "contract",
    "even",
    "decentralized",
    "something",
    "else",
    "talking",
    "video",
    "function",
    "clashes",
    "function",
    "selector",
    "clashes",
    "right",
    "whenever",
    "call",
    "set",
    "implementation",
    "proxy",
    "function",
    "sedimentation",
    "gets",
    "called",
    "trigger",
    "fallback",
    "see",
    "function",
    "however",
    "function",
    "called",
    "set",
    "implementation",
    "implementation",
    "one",
    "never",
    "called",
    "whenever",
    "send",
    "function",
    "signature",
    "set",
    "implementation",
    "always",
    "going",
    "call",
    "one",
    "proxy",
    "transparent",
    "proxy",
    "going",
    "working",
    "help",
    "us",
    "universal",
    "upgradable",
    "proxy",
    "help",
    "us",
    "going",
    "go",
    "much",
    "deeper",
    "left",
    "links",
    "github",
    "repository",
    "teach",
    "selector",
    "clashes",
    "two",
    "proxy",
    "patterns",
    "mentioned",
    "transparent",
    "universal",
    "upgradable",
    "get",
    "around",
    "confused",
    "anything",
    "go",
    "discussion",
    "thread",
    "make",
    "new",
    "discussion",
    "proxies",
    "make",
    "new",
    "discussion",
    "assembly",
    "set",
    "implementation",
    "great",
    "time",
    "connect",
    "people",
    "taking",
    "course",
    "ask",
    "questions",
    "know",
    "really",
    "advanced",
    "section",
    "requires",
    "gone",
    "lot",
    "sub",
    "lessons",
    "gone",
    "takes",
    "couple",
    "times",
    "playing",
    "around",
    "solidity",
    "playing",
    "around",
    "remix",
    "definitely",
    "recommend",
    "section",
    "seeing",
    "really",
    "believing",
    "want",
    "jump",
    "remix",
    "want",
    "test",
    "want",
    "play",
    "around",
    "see",
    "break",
    "fiddle",
    "said",
    "finally",
    "knowledge",
    "need",
    "build",
    "hardhat",
    "project",
    "deals",
    "upgrades",
    "let",
    "go",
    "ahead",
    "jump",
    "new",
    "terminal",
    "going",
    "mk",
    "dir",
    "hard",
    "hat",
    "upgrades",
    "fcc",
    "cd",
    "hard",
    "hat",
    "upgrades",
    "fcc",
    "code",
    "period",
    "file",
    "open",
    "folder",
    "folder",
    "going",
    "grab",
    "yarn",
    "add",
    "grabbing",
    "less",
    "nine",
    "gon",
    "na",
    "paste",
    "going",
    "add",
    "different",
    "parameters",
    "going",
    "copy",
    "hard",
    "hat",
    "config",
    "previous",
    "sections",
    "going",
    "copy",
    "prettier",
    "going",
    "get",
    "basic",
    "default",
    "setup",
    "point",
    "might",
    "setup",
    "works",
    "best",
    "like",
    "better",
    "feel",
    "free",
    "grab",
    "well",
    "going",
    "paste",
    "prettier",
    "going",
    "paste",
    "hard",
    "using",
    "instead",
    "running",
    "yarn",
    "hard",
    "hat",
    "good",
    "go",
    "let",
    "create",
    "new",
    "folder",
    "called",
    "contracts",
    "going",
    "create",
    "new",
    "file",
    "called",
    "box",
    "dot",
    "soul",
    "contract",
    "going",
    "implementation",
    "logic",
    "contract",
    "say",
    "pragma",
    "solidity",
    "carrot",
    "zero",
    "point",
    "contract",
    "box",
    "say",
    "256",
    "internal",
    "value",
    "event",
    "value",
    "changed",
    "256",
    "new",
    "value",
    "function",
    "store",
    "went",
    "36",
    "value",
    "public",
    "function",
    "say",
    "value",
    "equals",
    "new",
    "value",
    "store",
    "function",
    "going",
    "update",
    "variable",
    "storage",
    "slot",
    "zero",
    "internal",
    "omit",
    "value",
    "changed",
    "new",
    "value",
    "create",
    "function",
    "retrieve",
    "public",
    "view",
    "returns",
    "unt",
    "256",
    "return",
    "value",
    "going",
    "create",
    "new",
    "function",
    "called",
    "version",
    "public",
    "door",
    "returns",
    "un",
    "going",
    "return",
    "one",
    "box",
    "contract",
    "going",
    "version",
    "one",
    "going",
    "copy",
    "code",
    "paste",
    "box",
    "v",
    "two",
    "dot",
    "soul",
    "rename",
    "contract",
    "box",
    "v",
    "two",
    "going",
    "update",
    "version",
    "version",
    "two",
    "going",
    "create",
    "new",
    "function",
    "called",
    "increment",
    "public",
    "function",
    "say",
    "value",
    "equals",
    "value",
    "plus",
    "one",
    "emit",
    "value",
    "changed",
    "event",
    "value",
    "going",
    "one",
    "contract",
    "address",
    "originally",
    "use",
    "logic",
    "box",
    "going",
    "upgrade",
    "logic",
    "box",
    "v",
    "two",
    "going",
    "learn",
    "use",
    "tools",
    "working",
    "add",
    "logic",
    "create",
    "logic",
    "let",
    "make",
    "sure",
    "works",
    "yarn",
    "compile",
    "let",
    "make",
    "say",
    "one",
    "going",
    "upgrade",
    "box",
    "box",
    "v",
    "two",
    "going",
    "make",
    "proxy",
    "contract",
    "gon",
    "na",
    "point",
    "box",
    "later",
    "going",
    "update",
    "point",
    "box",
    "v",
    "two",
    "right",
    "going",
    "start",
    "pointing",
    "box",
    "going",
    "point",
    "box",
    "v",
    "two",
    "going",
    "upgrade",
    "one",
    "first",
    "things",
    "going",
    "need",
    "deploy",
    "proxy",
    "deploy",
    "proxy",
    "manually",
    "build",
    "proxy",
    "contracts",
    "stuff",
    "first",
    "option",
    "hardhead",
    "deploy",
    "also",
    "comes",
    "built",
    "deploying",
    "upgrading",
    "proxies",
    "specify",
    "want",
    "use",
    "proxy",
    "could",
    "specify",
    "type",
    "proxy",
    "want",
    "use",
    "number",
    "two",
    "saying",
    "using",
    "hard",
    "hat",
    "deploys",
    "built",
    "proxies",
    "number",
    "three",
    "open",
    "zeppelin",
    "actually",
    "upgrades",
    "plugin",
    "allows",
    "write",
    "really",
    "simple",
    "scripts",
    "allows",
    "really",
    "simple",
    "api",
    "like",
    "upgrades",
    "dot",
    "deploy",
    "proxy",
    "upgrades",
    "upgrade",
    "proxy",
    "section",
    "going",
    "hard",
    "hat",
    "deploys",
    "built",
    "proxies",
    "however",
    "github",
    "repo",
    "associated",
    "go",
    "scripts",
    "upgrade",
    "examples",
    "show",
    "use",
    "opens",
    "upgrades",
    "plugin",
    "going",
    "deploy",
    "proxy",
    "manually",
    "manually",
    "essentially",
    "showed",
    "sub",
    "lesson",
    "going",
    "show",
    "going",
    "show",
    "hardhead",
    "deploys",
    "built",
    "proxies",
    "want",
    "use",
    "openzeppelin",
    "upgrades",
    "plugin",
    "available",
    "github",
    "repo",
    "well",
    "let",
    "go",
    "ahead",
    "going",
    "go",
    "ahead",
    "going",
    "make",
    "new",
    "folder",
    "deploy",
    "folder",
    "first",
    "going",
    "make",
    "new",
    "file",
    "called",
    "one",
    "deploy",
    "box",
    "dot",
    "j",
    "going",
    "look",
    "really",
    "similar",
    "everything",
    "far",
    "module",
    "dot",
    "exports",
    "equals",
    "async",
    "function",
    "going",
    "get",
    "named",
    "accounts",
    "deployments",
    "arrow",
    "function",
    "say",
    "const",
    "deploy",
    "comm",
    "log",
    "equals",
    "deployments",
    "const",
    "deployer",
    "equals",
    "await",
    "get",
    "named",
    "accounts",
    "little",
    "logging",
    "like",
    "say",
    "const",
    "box",
    "equals",
    "await",
    "loi",
    "box",
    "comma",
    "say",
    "deployer",
    "comma",
    "args",
    "like",
    "say",
    "weight",
    "con",
    "formations",
    "going",
    "network",
    "dot",
    "config",
    "dot",
    "block",
    "confirmations",
    "masons",
    "yep",
    "got",
    "grab",
    "const",
    "hard",
    "hat",
    "add",
    "parameter",
    "proxies",
    "add",
    "ton",
    "information",
    "like",
    "said",
    "going",
    "use",
    "transparent",
    "upgradable",
    "proxy",
    "open",
    "zeppelin",
    "want",
    "use",
    "going",
    "add",
    "open",
    "zeppelin",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "open",
    "zeppelin",
    "slash",
    "contracts",
    "tell",
    "hard",
    "hat",
    "deploy",
    "box",
    "contract",
    "behind",
    "proxy",
    "say",
    "proxy",
    "contract",
    "going",
    "open",
    "zeppelin",
    "transparent",
    "proxy",
    "also",
    "going",
    "via",
    "admin",
    "contract",
    "instead",
    "admin",
    "address",
    "proxy",
    "contract",
    "going",
    "proxy",
    "contract",
    "owned",
    "admin",
    "contract",
    "way",
    "considered",
    "best",
    "practice",
    "number",
    "reasons",
    "name",
    "admin",
    "contract",
    "box",
    "proxy",
    "admin",
    "artifact",
    "box",
    "proxy",
    "admin",
    "need",
    "create",
    "box",
    "proxy",
    "admin",
    "contract",
    "admin",
    "box",
    "contracts",
    "folder",
    "create",
    "new",
    "folder",
    "called",
    "proxy",
    "new",
    "file",
    "called",
    "box",
    "proxy",
    "admin",
    "saw",
    "going",
    "admin",
    "contract",
    "going",
    "controlling",
    "proxy",
    "box",
    "inbox",
    "proxy",
    "admin",
    "dot",
    "saul",
    "sp",
    "dx",
    "license",
    "fire",
    "mit",
    "pragma",
    "solidity",
    "carrot",
    "zero",
    "point",
    "say",
    "contract",
    "box",
    "proxy",
    "admin",
    "like",
    "right",
    "going",
    "use",
    "one",
    "open",
    "zetland",
    "tools",
    "transparent",
    "folder",
    "proxy",
    "admin",
    "dot",
    "saul",
    "going",
    "essentially",
    "box",
    "proxy",
    "admin",
    "going",
    "functionality",
    "functions",
    "like",
    "change",
    "proxy",
    "admin",
    "upgrade",
    "upgrade",
    "call",
    "dealing",
    "upgrades",
    "contracts",
    "going",
    "import",
    "import",
    "open",
    "zeppelin",
    "slash",
    "contracts",
    "slash",
    "proxy",
    "slash",
    "transparent",
    "slash",
    "proxy",
    "admin",
    "dot",
    "soul",
    "say",
    "brock",
    "box",
    "proxy",
    "admin",
    "proxy",
    "admin",
    "like",
    "box",
    "proxy",
    "admin",
    "work",
    "heart",
    "deploy",
    "plugin",
    "constructor",
    "needs",
    "take",
    "address",
    "owner",
    "input",
    "parameter",
    "going",
    "leave",
    "blank",
    "need",
    "proxy",
    "admin",
    "going",
    "blank",
    "well",
    "going",
    "box",
    "proxy",
    "admin",
    "contract",
    "functionalities",
    "upgrades",
    "change",
    "proxy",
    "admin",
    "stuff",
    "going",
    "deploy",
    "box",
    "contract",
    "behind",
    "proxy",
    "opens",
    "transparent",
    "proxy",
    "owned",
    "brock",
    "proxy",
    "admin",
    "contract",
    "template",
    "aetherium",
    "contracts",
    "github",
    "repo",
    "actually",
    "examples",
    "slash",
    "opens",
    "proxies",
    "branch",
    "show",
    "work",
    "different",
    "types",
    "proxies",
    "link",
    "github",
    "repo",
    "associated",
    "course",
    "verification",
    "say",
    "chains",
    "dot",
    "includes",
    "go",
    "ahead",
    "going",
    "copy",
    "paste",
    "hard",
    "hat",
    "helper",
    "config",
    "last",
    "project",
    "development",
    "chains",
    "hard",
    "hat",
    "local",
    "host",
    "export",
    "import",
    "well",
    "const",
    "development",
    "chains",
    "equals",
    "require",
    "dot",
    "slash",
    "helper",
    "hard",
    "hat",
    "config",
    "development",
    "chains",
    "dot",
    "includes",
    "network",
    "dot",
    "name",
    "process",
    "dot",
    "env",
    "dot",
    "ether",
    "scan",
    "api",
    "key",
    "log",
    "verifying",
    "done",
    "way",
    "verify",
    "last",
    "going",
    "copy",
    "utils",
    "folder",
    "copy",
    "paste",
    "verify",
    "import",
    "const",
    "verify",
    "equals",
    "require",
    "dot",
    "dot",
    "slash",
    "utils",
    "slash",
    "verify",
    "await",
    "verify",
    "box",
    "dot",
    "address",
    "args",
    "going",
    "blank",
    "blank",
    "boom",
    "going",
    "box",
    "deployment",
    "test",
    "running",
    "yarn",
    "hardhead",
    "deploy",
    "see",
    "everything",
    "works",
    "done",
    "actually",
    "add",
    "log",
    "beach",
    "true",
    "well",
    "let",
    "run",
    "much",
    "better",
    "see",
    "actually",
    "deploy",
    "couple",
    "contracts",
    "deploy",
    "box",
    "proxy",
    "admin",
    "going",
    "admin",
    "contract",
    "deploy",
    "box",
    "implementation",
    "hard",
    "hat",
    "deploy",
    "went",
    "ahead",
    "took",
    "box",
    "contract",
    "renamed",
    "box",
    "implementation",
    "deployed",
    "deployed",
    "box",
    "proxy",
    "anytime",
    "call",
    "address",
    "actually",
    "point",
    "logic",
    "box",
    "write",
    "deploy",
    "script",
    "deploy",
    "box",
    "box",
    "v2",
    "implementation",
    "upgrade",
    "box",
    "box",
    "v",
    "create",
    "new",
    "deploy",
    "script",
    "called",
    "zero",
    "deploy",
    "box",
    "v2",
    "dot",
    "j",
    "deploy",
    "box",
    "two",
    "dot",
    "j",
    "something",
    "really",
    "similar",
    "right",
    "going",
    "copy",
    "pretty",
    "much",
    "paste",
    "going",
    "const",
    "box",
    "v",
    "two",
    "equals",
    "await",
    "deploy",
    "box",
    "v",
    "two",
    "comma",
    "deployer",
    "log",
    "true",
    "rms",
    "blank",
    "weights",
    "confirmations",
    "going",
    "network",
    "dot",
    "config",
    "dot",
    "lock",
    "masons",
    "going",
    "copy",
    "verification",
    "code",
    "copy",
    "paste",
    "server",
    "going",
    "box",
    "v2",
    "dot",
    "address",
    "okay",
    "great",
    "code",
    "deploy",
    "box",
    "box",
    "v2",
    "let",
    "go",
    "ahead",
    "write",
    "script",
    "actually",
    "upgrade",
    "new",
    "folder",
    "scripts",
    "new",
    "file",
    "call",
    "upgrade",
    "box",
    "dot",
    "j",
    "going",
    "manual",
    "way",
    "reason",
    "going",
    "manual",
    "way",
    "want",
    "show",
    "exactly",
    "functions",
    "calling",
    "upgrade",
    "process",
    "however",
    "hard",
    "hat",
    "deploy",
    "also",
    "comes",
    "api",
    "make",
    "really",
    "easy",
    "actually",
    "upgrade",
    "box",
    "contracts",
    "gon",
    "na",
    "script",
    "start",
    "async",
    "function",
    "main",
    "copy",
    "paste",
    "traditional",
    "script",
    "main",
    "dot",
    "process",
    "exit",
    "blah",
    "blah",
    "blah",
    "whole",
    "thing",
    "first",
    "gon",
    "na",
    "get",
    "box",
    "proxy",
    "admin",
    "contract",
    "say",
    "box",
    "const",
    "box",
    "proxy",
    "admin",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "box",
    "proxy",
    "admin",
    "got",
    "import",
    "hardhead",
    "going",
    "get",
    "actual",
    "proxy",
    "transparent",
    "proxy",
    "say",
    "const",
    "transparent",
    "proxy",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "box",
    "underscore",
    "proxy",
    "since",
    "hard",
    "hat",
    "deploy",
    "name",
    "proxy",
    "name",
    "implementation",
    "underscore",
    "proxy",
    "course",
    "going",
    "need",
    "box",
    "v",
    "contract",
    "say",
    "const",
    "box",
    "v",
    "two",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "box",
    "v",
    "two",
    "say",
    "const",
    "upgrade",
    "tx",
    "equals",
    "weight",
    "box",
    "proxy",
    "admin",
    "upgrade",
    "going",
    "call",
    "upgrade",
    "function",
    "box",
    "proxy",
    "admin",
    "calls",
    "transparent",
    "proxy",
    "change",
    "implementation",
    "box",
    "one",
    "box",
    "two",
    "box",
    "proxy",
    "admin",
    "upgrade",
    "going",
    "upgrade",
    "transparent",
    "proxy",
    "dot",
    "address",
    "box",
    "b",
    "address",
    "look",
    "box",
    "proxy",
    "box",
    "proxy",
    "upgrade",
    "function",
    "calls",
    "upgrade",
    "transparent",
    "upgradeable",
    "proxy",
    "weight",
    "upgrade",
    "tx",
    "dot",
    "wait",
    "one",
    "work",
    "functions",
    "box",
    "v",
    "two",
    "gon",
    "na",
    "say",
    "const",
    "proxy",
    "box",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "box",
    "v",
    "two",
    "going",
    "get",
    "box",
    "v",
    "two",
    "abi",
    "however",
    "going",
    "load",
    "transparent",
    "proxy",
    "address",
    "way",
    "ethers",
    "knows",
    "okay",
    "going",
    "call",
    "functions",
    "transparent",
    "proxy",
    "address",
    "proxy",
    "box",
    "going",
    "abi",
    "box",
    "v2",
    "want",
    "say",
    "const",
    "version",
    "equals",
    "await",
    "proxy",
    "box",
    "dot",
    "version",
    "say",
    "console",
    "dot",
    "log",
    "version",
    "want",
    "compare",
    "original",
    "implementation",
    "upgrade",
    "thing",
    "say",
    "const",
    "proxy",
    "box",
    "v1",
    "let",
    "actually",
    "call",
    "proxy",
    "box",
    "v",
    "say",
    "cost",
    "proxy",
    "box",
    "v",
    "one",
    "going",
    "exact",
    "thing",
    "equals",
    "call",
    "box",
    "const",
    "version",
    "equals",
    "weight",
    "right",
    "proxy",
    "box",
    "v1",
    "dot",
    "version",
    "console",
    "dot",
    "log",
    "version",
    "version",
    "v1",
    "version",
    "v1",
    "call",
    "version",
    "v",
    "two",
    "version",
    "v",
    "two",
    "proxy",
    "box",
    "v",
    "two",
    "get",
    "version",
    "v",
    "one",
    "upgrade",
    "see",
    "address",
    "version",
    "function",
    "returns",
    "let",
    "open",
    "terminal",
    "run",
    "yarn",
    "head",
    "node",
    "spin",
    "node",
    "deployed",
    "admin",
    "implementation",
    "proxy",
    "box",
    "v",
    "implementation",
    "make",
    "new",
    "terminal",
    "run",
    "yarn",
    "hard",
    "hat",
    "run",
    "scripts",
    "upgrade",
    "box",
    "j",
    "dash",
    "dash",
    "network",
    "local",
    "host",
    "see",
    "box",
    "actually",
    "update",
    "exactly",
    "see",
    "let",
    "well",
    "forgot",
    "string",
    "goes",
    "version",
    "one",
    "version",
    "two",
    "exact",
    "address",
    "little",
    "code",
    "successfully",
    "learned",
    "upgrade",
    "smart",
    "contracts",
    "programmatically",
    "like",
    "said",
    "github",
    "repo",
    "associated",
    "lesson",
    "also",
    "check",
    "upgrades",
    "plugin",
    "open",
    "zeppelin",
    "work",
    "would",
    "upgrades",
    "dot",
    "deploy",
    "proxy",
    "proxy",
    "call",
    "prepare",
    "upgrade",
    "function",
    "upgrade",
    "upgrade",
    "proxy",
    "like",
    "also",
    "upgrade",
    "tutorial",
    "step",
    "step",
    "hardhat",
    "follow",
    "along",
    "well",
    "know",
    "advanced",
    "section",
    "know",
    "went",
    "little",
    "bit",
    "quick",
    "honestly",
    "finish",
    "section",
    "completed",
    "sections",
    "make",
    "really",
    "powerful",
    "smart",
    "contract",
    "developer",
    "learned",
    "really",
    "advanced",
    "stuff",
    "gone",
    "low",
    "level",
    "code",
    "like",
    "delegate",
    "call",
    "gotten",
    "assembly",
    "gotten",
    "gotten",
    "proxy",
    "patterns",
    "really",
    "make",
    "incredible",
    "stand",
    "developer",
    "smart",
    "contract",
    "space",
    "finished",
    "section",
    "proud",
    "went",
    "really",
    "fast",
    "lot",
    "advanced",
    "information",
    "like",
    "said",
    "100",
    "percent",
    "sure",
    "go",
    "discussions",
    "tab",
    "ask",
    "questions",
    "connect",
    "talk",
    "people",
    "area",
    "maybe",
    "look",
    "already",
    "running",
    "discussions",
    "jump",
    "start",
    "asking",
    "students",
    "start",
    "asking",
    "people",
    "learned",
    "proxies",
    "going",
    "made",
    "anything",
    "really",
    "cool",
    "excited",
    "want",
    "go",
    "show",
    "tell",
    "section",
    "make",
    "show",
    "tell",
    "like",
    "hey",
    "github",
    "repo",
    "upgrade",
    "section",
    "going",
    "excited",
    "said",
    "go",
    "take",
    "coffee",
    "break",
    "go",
    "take",
    "walk",
    "go",
    "gym",
    "go",
    "get",
    "excited",
    "go",
    "tell",
    "friends",
    "almost",
    "done",
    "two",
    "lessons",
    "left",
    "home",
    "free",
    "right",
    "welcome",
    "back",
    "lesson",
    "17",
    "hardhat",
    "douse",
    "almost",
    "done",
    "section",
    "actually",
    "already",
    "made",
    "video",
    "code",
    "dowel",
    "typescript",
    "solidity",
    "javascript",
    "actually",
    "going",
    "play",
    "video",
    "section",
    "reason",
    "going",
    "display",
    "one",
    "lot",
    "work",
    "make",
    "one",
    "look",
    "really",
    "good",
    "still",
    "incredibly",
    "date",
    "going",
    "typescript",
    "solidity",
    "however",
    "going",
    "javascript",
    "edition",
    "code",
    "base",
    "code",
    "video",
    "section",
    "want",
    "date",
    "version",
    "delta",
    "template",
    "code",
    "use",
    "select",
    "date",
    "code",
    "goes",
    "doubt",
    "template",
    "repo",
    "updating",
    "repo",
    "periodically",
    "new",
    "dao",
    "examples",
    "new",
    "ways",
    "create",
    "doubts",
    "decentralized",
    "autonomous",
    "organizations",
    "learn",
    "code",
    "doubt",
    "learn",
    "dao",
    "already",
    "made",
    "video",
    "put",
    "lot",
    "work",
    "going",
    "watch",
    "dow",
    "high",
    "level",
    "first",
    "going",
    "learn",
    "code",
    "dow",
    "last",
    "section",
    "going",
    "security",
    "auditing",
    "going",
    "finish",
    "bucklin",
    "let",
    "learn",
    "dow",
    "let",
    "go",
    "ahead",
    "build",
    "dow",
    "let",
    "daos",
    "decentralized",
    "autonomous",
    "organizations",
    "bit",
    "overloaded",
    "term",
    "typically",
    "describes",
    "group",
    "governed",
    "transparent",
    "set",
    "rules",
    "found",
    "blockchain",
    "smart",
    "contract",
    "say",
    "overloaded",
    "people",
    "say",
    "bitcoin",
    "miners",
    "choose",
    "whether",
    "upgrade",
    "software",
    "people",
    "think",
    "dows",
    "must",
    "use",
    "transparent",
    "smart",
    "contracts",
    "rules",
    "ingrained",
    "right",
    "people",
    "think",
    "tao",
    "buzzword",
    "slap",
    "name",
    "relay",
    "organization",
    "get",
    "clout",
    "makes",
    "sad",
    "patrick",
    "confused",
    "dow",
    "implementation",
    "dow",
    "back",
    "2016",
    "set",
    "record",
    "largest",
    "hack",
    "time",
    "lot",
    "different",
    "ways",
    "think",
    "dow",
    "term",
    "used",
    "lot",
    "different",
    "ways",
    "essence",
    "imagine",
    "users",
    "google",
    "given",
    "voting",
    "power",
    "google",
    "next",
    "rules",
    "voting",
    "immutable",
    "transparent",
    "decentralized",
    "solves",
    "age",
    "old",
    "problem",
    "trust",
    "centrality",
    "transparency",
    "giving",
    "power",
    "users",
    "different",
    "protocols",
    "applications",
    "instead",
    "everything",
    "happening",
    "behind",
    "closed",
    "doors",
    "voting",
    "piece",
    "cornerstone",
    "operate",
    "decentralized",
    "governance",
    "summarized",
    "company",
    "organization",
    "operated",
    "exclusively",
    "code",
    "really",
    "understand",
    "going",
    "look",
    "hood",
    "protocol",
    "setting",
    "precedent",
    "doubts",
    "compound",
    "look",
    "compound",
    "understand",
    "goes",
    "building",
    "one",
    "trade",
    "offs",
    "different",
    "architectural",
    "choices",
    "mean",
    "group",
    "next",
    "video",
    "gon",
    "na",
    "full",
    "coat",
    "along",
    "tutorial",
    "developers",
    "looking",
    "build",
    "one",
    "absolutely",
    "sure",
    "watch",
    "rest",
    "video",
    "going",
    "give",
    "architectural",
    "fundamentals",
    "make",
    "intelligent",
    "decisions",
    "get",
    "section",
    "sure",
    "dow",
    "friends",
    "smash",
    "like",
    "subscribe",
    "button",
    "keep",
    "giving",
    "best",
    "engineer",
    "first",
    "content",
    "planet",
    "comes",
    "smart",
    "contracts",
    "let",
    "get",
    "compound",
    "protocol",
    "borrowing",
    "lending",
    "application",
    "allows",
    "users",
    "borrow",
    "lend",
    "assets",
    "everything",
    "application",
    "built",
    "smart",
    "contracts",
    "oftentimes",
    "gon",
    "na",
    "want",
    "lot",
    "new",
    "things",
    "maybe",
    "want",
    "add",
    "new",
    "token",
    "allow",
    "borrowing",
    "lending",
    "maybe",
    "gon",
    "na",
    "want",
    "change",
    "api",
    "parameters",
    "maybe",
    "gon",
    "na",
    "want",
    "block",
    "certain",
    "coins",
    "lot",
    "different",
    "things",
    "might",
    "want",
    "gon",
    "na",
    "go",
    "ahead",
    "governance",
    "find",
    "user",
    "interface",
    "list",
    "proposals",
    "different",
    "ballots",
    "came",
    "list",
    "governance",
    "proposals",
    "protocol",
    "actually",
    "making",
    "improve",
    "let",
    "look",
    "one",
    "proposals",
    "currently",
    "actually",
    "process",
    "click",
    "proposal",
    "actually",
    "see",
    "everything",
    "proposal",
    "voted",
    "voted",
    "proposal",
    "history",
    "first",
    "thing",
    "one",
    "proposals",
    "somebody",
    "actually",
    "create",
    "proposal",
    "proposed",
    "transaction",
    "actually",
    "see",
    "proposed",
    "transaction",
    "right",
    "click",
    "scroll",
    "actually",
    "see",
    "exact",
    "parameters",
    "used",
    "make",
    "proposal",
    "let",
    "go",
    "ahead",
    "decode",
    "input",
    "data",
    "see",
    "exactly",
    "proposal",
    "looks",
    "like",
    "way",
    "typically",
    "divided",
    "list",
    "addresses",
    "list",
    "functions",
    "call",
    "addresses",
    "obviously",
    "parameters",
    "pass",
    "addresses",
    "proposal",
    "saying",
    "hey",
    "would",
    "like",
    "call",
    "support",
    "market",
    "address",
    "set",
    "reserve",
    "factor",
    "address",
    "parameters",
    "going",
    "pass",
    "obviously",
    "encoded",
    "bytes",
    "description",
    "string",
    "actually",
    "reason",
    "proposal",
    "governance",
    "process",
    "contracts",
    "likely",
    "access",
    "controls",
    "owner",
    "contracts",
    "actually",
    "call",
    "functions",
    "owner",
    "two",
    "contracts",
    "likely",
    "going",
    "governance",
    "style",
    "values",
    "zero",
    "means",
    "going",
    "send",
    "eath",
    "along",
    "transactions",
    "proposal",
    "created",
    "short",
    "delay",
    "becomes",
    "active",
    "people",
    "actually",
    "start",
    "voting",
    "delay",
    "proposal",
    "act",
    "vote",
    "changed",
    "modified",
    "depending",
    "doubt",
    "people",
    "time",
    "start",
    "voting",
    "passes",
    "one",
    "overwhelmingly",
    "reaches",
    "succeeded",
    "click",
    "transaction",
    "go",
    "compound",
    "governance",
    "contract",
    "scroll",
    "contract",
    "right",
    "proxy",
    "actually",
    "see",
    "exact",
    "function",
    "people",
    "call",
    "vote",
    "namely",
    "cast",
    "vote",
    "cast",
    "vote",
    "signature",
    "cast",
    "vote",
    "reason",
    "talk",
    "little",
    "bit",
    "exact",
    "differences",
    "next",
    "video",
    "functions",
    "actually",
    "calling",
    "go",
    "compound",
    "app",
    "go",
    "vote",
    "user",
    "interface",
    "actually",
    "vote",
    "make",
    "easier",
    "tech",
    "savvy",
    "vote",
    "right",
    "app",
    "dot",
    "compound",
    "finance",
    "send",
    "transaction",
    "votes",
    "happen",
    "reaches",
    "queued",
    "stage",
    "queued",
    "mean",
    "well",
    "proposal",
    "actually",
    "becomes",
    "active",
    "minimum",
    "delay",
    "proposal",
    "passing",
    "proposal",
    "executed",
    "somebody",
    "call",
    "cute",
    "function",
    "called",
    "vote",
    "passes",
    "says",
    "ok",
    "postal",
    "id",
    "cued",
    "going",
    "execute",
    "soon",
    "go",
    "different",
    "proposal",
    "like",
    "one",
    "example",
    "see",
    "executed",
    "see",
    "somebody",
    "called",
    "executed",
    "function",
    "executed",
    "proposal",
    "detail",
    "going",
    "full",
    "example",
    "lifecycle",
    "proposal",
    "going",
    "process",
    "couple",
    "even",
    "failed",
    "whole",
    "bunch",
    "people",
    "voted",
    "scroll",
    "see",
    "created",
    "active",
    "majority",
    "people",
    "voted",
    "stops",
    "oftentimes",
    "putting",
    "one",
    "proposals",
    "enough",
    "really",
    "garner",
    "votes",
    "generally",
    "want",
    "forum",
    "type",
    "discussion",
    "place",
    "talk",
    "proposals",
    "liked",
    "like",
    "oftentimes",
    "discourse",
    "one",
    "main",
    "places",
    "people",
    "going",
    "argue",
    "something",
    "good",
    "something",
    "bad",
    "people",
    "vote",
    "changes",
    "snapshot",
    "might",
    "one",
    "tools",
    "use",
    "figure",
    "community",
    "even",
    "wants",
    "something",
    "even",
    "goes",
    "vote",
    "join",
    "one",
    "tokens",
    "actually",
    "vote",
    "things",
    "without",
    "executed",
    "get",
    "sentiment",
    "like",
    "said",
    "could",
    "build",
    "protocol",
    "way",
    "snapshot",
    "actually",
    "helps",
    "voting",
    "process",
    "right",
    "seen",
    "protocol",
    "influencing",
    "details",
    "vote",
    "know",
    "know",
    "doubt",
    "looks",
    "like",
    "let",
    "talk",
    "architecture",
    "tools",
    "go",
    "building",
    "one",
    "additionally",
    "trade",
    "offs",
    "first",
    "thing",
    "talk",
    "going",
    "voting",
    "mechanism",
    "voting",
    "decentralized",
    "governance",
    "critical",
    "days",
    "sometimes",
    "need",
    "update",
    "change",
    "keep",
    "times",
    "protocols",
    "need",
    "dow",
    "need",
    "doubt",
    "need",
    "way",
    "participants",
    "engage",
    "one",
    "important",
    "questions",
    "ask",
    "tell",
    "communities",
    "participate",
    "engage",
    "doubt",
    "help",
    "make",
    "decisions",
    "find",
    "bit",
    "tricky",
    "problem",
    "solve",
    "easy",
    "approach",
    "problem",
    "going",
    "using",
    "erc",
    "20",
    "nft",
    "token",
    "voting",
    "power",
    "similar",
    "saw",
    "compound",
    "use",
    "comp",
    "token",
    "vote",
    "different",
    "proposals",
    "seems",
    "simple",
    "enough",
    "right",
    "boom",
    "problem",
    "solved",
    "gray",
    "actually",
    "might",
    "right",
    "approach",
    "certain",
    "doubts",
    "also",
    "runs",
    "risk",
    "actually",
    "less",
    "fair",
    "tokenize",
    "voting",
    "power",
    "essentially",
    "auctioning",
    "voting",
    "power",
    "whoever",
    "got",
    "deepest",
    "pockets",
    "whoever",
    "money",
    "gets",
    "pick",
    "changes",
    "rich",
    "people",
    "get",
    "vote",
    "highly",
    "likely",
    "changes",
    "protocol",
    "going",
    "benefit",
    "rich",
    "really",
    "seem",
    "like",
    "great",
    "improvement",
    "current",
    "world",
    "interesting",
    "non",
    "fungible",
    "component",
    "yet",
    "even",
    "still",
    "run",
    "issue",
    "additionally",
    "buy",
    "whole",
    "bunch",
    "votes",
    "make",
    "bad",
    "decision",
    "sell",
    "votes",
    "individual",
    "really",
    "get",
    "punished",
    "punish",
    "group",
    "whole",
    "malicious",
    "get",
    "away",
    "pretty",
    "scot",
    "free",
    "voting",
    "mechanism",
    "going",
    "correct",
    "groups",
    "groups",
    "maybe",
    "really",
    "depends",
    "community",
    "setup",
    "going",
    "look",
    "like",
    "next",
    "one",
    "going",
    "talk",
    "skin",
    "game",
    "metallic",
    "actually",
    "written",
    "lot",
    "highly",
    "recommend",
    "read",
    "article",
    "link",
    "description",
    "see",
    "skin",
    "game",
    "method",
    "means",
    "whenever",
    "make",
    "decision",
    "vote",
    "recorded",
    "decision",
    "leads",
    "bad",
    "outcome",
    "tokens",
    "axed",
    "get",
    "punished",
    "making",
    "evil",
    "bad",
    "decisions",
    "dao",
    "protocol",
    "like",
    "mentality",
    "even",
    "buy",
    "ton",
    "tokens",
    "decide",
    "ill",
    "held",
    "accountable",
    "bad",
    "decisions",
    "hardest",
    "part",
    "though",
    "gon",
    "na",
    "decide",
    "community",
    "bad",
    "outcome",
    "actually",
    "punish",
    "people",
    "easy",
    "answer",
    "sure",
    "third",
    "method",
    "voting",
    "mechanism",
    "probably",
    "one",
    "interesting",
    "ones",
    "also",
    "hardest",
    "ones",
    "implement",
    "proof",
    "personhood",
    "participation",
    "imagine",
    "users",
    "compound",
    "protocol",
    "given",
    "single",
    "vote",
    "simply",
    "use",
    "protocol",
    "even",
    "1000",
    "wallets",
    "use",
    "protocol",
    "one",
    "human",
    "means",
    "one",
    "vote",
    "would",
    "amazing",
    "far",
    "fair",
    "implementation",
    "votes",
    "could",
    "actually",
    "bought",
    "issue",
    "however",
    "comes",
    "something",
    "known",
    "civil",
    "resistance",
    "sure",
    "one",
    "vote",
    "equals",
    "one",
    "participant",
    "one",
    "participant",
    "pretending",
    "1000s",
    "different",
    "people",
    "get",
    "votes",
    "method",
    "really",
    "solved",
    "yet",
    "willing",
    "bet",
    "clever",
    "engineer",
    "amazing",
    "chainlink",
    "integration",
    "proof",
    "personhood",
    "basically",
    "chain",
    "data",
    "delivered",
    "chain",
    "exactly",
    "channeling",
    "shines",
    "see",
    "methods",
    "even",
    "probably",
    "think",
    "far",
    "fetched",
    "actually",
    "see",
    "exact",
    "methods",
    "happening",
    "real",
    "world",
    "proof",
    "personhood",
    "proof",
    "participation",
    "might",
    "exact",
    "kind",
    "regular",
    "government",
    "voting",
    "see",
    "every",
    "day",
    "united",
    "states",
    "least",
    "one",
    "person",
    "gets",
    "vote",
    "one",
    "president",
    "ca",
    "go",
    "around",
    "making",
    "whole",
    "bunch",
    "fake",
    "people",
    "voting",
    "president",
    "companies",
    "erc",
    "20",
    "voting",
    "standard",
    "kind",
    "applies",
    "shares",
    "company",
    "maybe",
    "voting",
    "power",
    "company",
    "draw",
    "parallels",
    "real",
    "world",
    "voting",
    "governance",
    "going",
    "work",
    "smart",
    "contracts",
    "fact",
    "draw",
    "parallels",
    "look",
    "inspiration",
    "web",
    "space",
    "comes",
    "implementation",
    "voting",
    "put",
    "two",
    "categories",
    "chain",
    "voting",
    "chain",
    "voting",
    "chain",
    "voting",
    "exactly",
    "saw",
    "compound",
    "smart",
    "contract",
    "chain",
    "voter",
    "call",
    "function",
    "called",
    "vote",
    "meta",
    "mask",
    "ledger",
    "whatever",
    "send",
    "transaction",
    "vote",
    "voted",
    "congrats",
    "wear",
    "little",
    "sticker",
    "call",
    "function",
    "send",
    "transaction",
    "send",
    "transaction",
    "transactions",
    "use",
    "kind",
    "annoying",
    "kind",
    "costly",
    "oh",
    "right",
    "gas",
    "imagine",
    "people",
    "community",
    "costs",
    "100",
    "vote",
    "per",
    "person",
    "costing",
    "community",
    "1",
    "million",
    "anytime",
    "want",
    "change",
    "anything",
    "obviously",
    "insane",
    "sustainable",
    "community",
    "pro",
    "architecture",
    "really",
    "easy",
    "everything",
    "going",
    "transparent",
    "everything",
    "going",
    "chain",
    "really",
    "good",
    "yes",
    "con",
    "going",
    "break",
    "bank",
    "account",
    "lot",
    "people",
    "potentially",
    "lot",
    "variations",
    "help",
    "solve",
    "problems",
    "especially",
    "gas",
    "problem",
    "one",
    "ones",
    "incredibly",
    "excited",
    "one",
    "called",
    "governor",
    "seat",
    "use",
    "random",
    "sampling",
    "quadratic",
    "voting",
    "help",
    "reduce",
    "costs",
    "increasing",
    "civil",
    "resistance",
    "want",
    "learn",
    "one",
    "sure",
    "read",
    "description",
    "chain",
    "voting",
    "simplest",
    "one",
    "let",
    "talk",
    "chain",
    "voting",
    "cast",
    "vote",
    "decentralized",
    "context",
    "relax",
    "relax",
    "vote",
    "chain",
    "still",
    "100",
    "decentralized",
    "actually",
    "sign",
    "transaction",
    "sign",
    "vote",
    "without",
    "actually",
    "sending",
    "blockchain",
    "therefore",
    "without",
    "actually",
    "spending",
    "gas",
    "instead",
    "send",
    "signed",
    "transaction",
    "decentralized",
    "database",
    "like",
    "ipfs",
    "count",
    "votes",
    "ipfs",
    "time",
    "comes",
    "deliver",
    "result",
    "data",
    "something",
    "like",
    "oracle",
    "like",
    "chain",
    "link",
    "blockchain",
    "single",
    "transaction",
    "alternatively",
    "could",
    "could",
    "replay",
    "transactions",
    "single",
    "transaction",
    "save",
    "gas",
    "reduce",
    "voting",
    "cost",
    "99",
    "right",
    "implementation",
    "one",
    "popular",
    "ways",
    "snapshot",
    "dying",
    "someone",
    "make",
    "chain",
    "link",
    "integration",
    "going",
    "much",
    "safer",
    "secure",
    "better",
    "blah",
    "blah",
    "blah",
    "die",
    "call",
    "action",
    "go",
    "build",
    "thing",
    "option",
    "voting",
    "mechanism",
    "obviously",
    "saves",
    "ton",
    "gas",
    "community",
    "efficient",
    "way",
    "store",
    "transactions",
    "anyways",
    "however",
    "needs",
    "implemented",
    "carefully",
    "run",
    "entire",
    "dow",
    "centralized",
    "oracle",
    "essentially",
    "reintroducing",
    "centralized",
    "intermediary",
    "ruining",
    "decent",
    "quality",
    "application",
    "made",
    "point",
    "video",
    "give",
    "little",
    "pat",
    "back",
    "fantastic",
    "fantastic",
    "like",
    "said",
    "video",
    "coming",
    "one",
    "going",
    "show",
    "end",
    "end",
    "build",
    "one",
    "scratch",
    "let",
    "learn",
    "tools",
    "use",
    "help",
    "get",
    "speed",
    "quicker",
    "number",
    "code",
    "solutions",
    "go",
    "building",
    "one",
    "dowels",
    "tao",
    "stack",
    "aragon",
    "kidding",
    "aragon",
    "colony",
    "tao",
    "house",
    "alternatives",
    "actually",
    "help",
    "upside",
    "running",
    "dao",
    "building",
    "doubt",
    "however",
    "want",
    "granular",
    "control",
    "want",
    "pay",
    "fees",
    "associated",
    "protocols",
    "might",
    "want",
    "scratch",
    "let",
    "talk",
    "cody",
    "solutions",
    "use",
    "snapshot",
    "one",
    "popular",
    "tools",
    "getting",
    "sentiment",
    "dao",
    "actually",
    "performing",
    "execution",
    "users",
    "vote",
    "protocol",
    "actual",
    "tokens",
    "transaction",
    "gets",
    "stored",
    "ipfs",
    "none",
    "actually",
    "gets",
    "executed",
    "unless",
    "doubt",
    "chooses",
    "great",
    "way",
    "get",
    "feel",
    "dow",
    "wants",
    "optionally",
    "send",
    "transactions",
    "execute",
    "votes",
    "well",
    "highly",
    "recommend",
    "checking",
    "zodiac",
    "suite",
    "database",
    "tools",
    "implement",
    "dallas",
    "well",
    "tally",
    "another",
    "one",
    "uis",
    "allows",
    "people",
    "see",
    "actually",
    "vote",
    "interact",
    "smart",
    "contracts",
    "user",
    "interface",
    "know",
    "gnosis",
    "safe",
    "absolutely",
    "know",
    "safe",
    "multi",
    "sig",
    "wallet",
    "reason",
    "put",
    "list",
    "even",
    "though",
    "adds",
    "kind",
    "centrality",
    "component",
    "dowels",
    "beginning",
    "probably",
    "going",
    "start",
    "type",
    "centrality",
    "much",
    "easier",
    "fast",
    "1000s",
    "people",
    "wait",
    "vote",
    "beginning",
    "protocol",
    "going",
    "centralized",
    "degree",
    "anyways",
    "using",
    "multisig",
    "voting",
    "happens",
    "key",
    "members",
    "good",
    "beginning",
    "dials",
    "often",
    "emergencies",
    "well",
    "keep",
    "mind",
    "add",
    "one",
    "adding",
    "level",
    "centrality",
    "course",
    "opens",
    "contracts",
    "love",
    "opens",
    "contracts",
    "contracts",
    "going",
    "basing",
    "dao",
    "code",
    "along",
    "alright",
    "tools",
    "architecture",
    "one",
    "thing",
    "let",
    "go",
    "legality",
    "future",
    "dows",
    "interesting",
    "reasons",
    "talked",
    "especially",
    "legal",
    "front",
    "make",
    "sense",
    "doubt",
    "live",
    "regulation",
    "another",
    "company",
    "would",
    "even",
    "force",
    "something",
    "enforce",
    "vote",
    "certain",
    "way",
    "government",
    "tells",
    "little",
    "gray",
    "hard",
    "nail",
    "even",
    "keep",
    "accountable",
    "days",
    "united",
    "states",
    "least",
    "actually",
    "form",
    "dow",
    "legally",
    "recognized",
    "state",
    "wyoming",
    "something",
    "want",
    "see",
    "happens",
    "oh",
    "point",
    "injected",
    "dow",
    "knowledge",
    "need",
    "succeed",
    "thrive",
    "new",
    "amazing",
    "technology",
    "new",
    "amazing",
    "concepts",
    "found",
    "kill",
    "baby",
    "right",
    "well",
    "heard",
    "time",
    "build",
    "like",
    "said",
    "code",
    "going",
    "located",
    "less",
    "17",
    "let",
    "jump",
    "video",
    "going",
    "show",
    "build",
    "doubt",
    "inspired",
    "compound",
    "going",
    "100",
    "chain",
    "voting",
    "chain",
    "governance",
    "going",
    "show",
    "easiest",
    "way",
    "spin",
    "nft",
    "erc",
    "20",
    "voting",
    "type",
    "using",
    "solidity",
    "hardhat",
    "watched",
    "last",
    "video",
    "going",
    "architecture",
    "dows",
    "goes",
    "one",
    "absolutely",
    "sure",
    "watch",
    "video",
    "first",
    "come",
    "video",
    "video",
    "explains",
    "philosophy",
    "behind",
    "going",
    "using",
    "opens",
    "contracts",
    "hard",
    "hat",
    "framework",
    "build",
    "solidity",
    "want",
    "see",
    "brand",
    "new",
    "pythonic",
    "version",
    "check",
    "link",
    "description",
    "video",
    "chainlink",
    "hackathon",
    "recently",
    "additionally",
    "additionally",
    "know",
    "100",
    "chain",
    "gas",
    "fees",
    "going",
    "expensive",
    "really",
    "looking",
    "forward",
    "somebody",
    "chain",
    "link",
    "plus",
    "ipfs",
    "plus",
    "snapshot",
    "integration",
    "chain",
    "exists",
    "already",
    "know",
    "gon",
    "na",
    "make",
    "tutorial",
    "like",
    "style",
    "content",
    "sure",
    "smash",
    "like",
    "button",
    "subscribe",
    "leave",
    "comment",
    "comment",
    "section",
    "let",
    "know",
    "want",
    "see",
    "next",
    "let",
    "know",
    "want",
    "supercharge",
    "smart",
    "contract",
    "developer",
    "experience",
    "let",
    "jump",
    "right",
    "going",
    "building",
    "gon",
    "na",
    "basic",
    "smart",
    "contract",
    "right",
    "called",
    "box",
    "store",
    "value",
    "retrieve",
    "value",
    "thing",
    "ownable",
    "owner",
    "contract",
    "call",
    "store",
    "function",
    "guess",
    "owner",
    "going",
    "owner",
    "going",
    "doubt",
    "process",
    "governance",
    "anyone",
    "store",
    "different",
    "function",
    "done",
    "going",
    "go",
    "entire",
    "process",
    "proposing",
    "voting",
    "queueing",
    "executing",
    "transaction",
    "dao",
    "update",
    "bach",
    "contract",
    "one",
    "beautiful",
    "things",
    "dao",
    "setups",
    "completely",
    "modular",
    "right",
    "go",
    "whole",
    "process",
    "hardhead",
    "tests",
    "tests",
    "right",
    "set",
    "everything",
    "going",
    "see",
    "every",
    "single",
    "step",
    "dow",
    "going",
    "take",
    "see",
    "box",
    "starting",
    "value",
    "going",
    "zero",
    "stuff",
    "going",
    "governance",
    "process",
    "notes",
    "basically",
    "people",
    "voting",
    "queueing",
    "executing",
    "end",
    "chained",
    "value",
    "box",
    "contract",
    "voting",
    "process",
    "exactly",
    "gon",
    "na",
    "show",
    "today",
    "remember",
    "code",
    "going",
    "doubt",
    "template",
    "github",
    "repo",
    "ever",
    "get",
    "lost",
    "feel",
    "free",
    "refer",
    "back",
    "get",
    "started",
    "additionally",
    "want",
    "see",
    "pythonic",
    "version",
    "feel",
    "free",
    "go",
    "back",
    "downmix",
    "main",
    "thing",
    "though",
    "contracts",
    "going",
    "matter",
    "brownie",
    "hard",
    "hat",
    "dab",
    "tools",
    "foundry",
    "matter",
    "first",
    "part",
    "section",
    "gon",
    "na",
    "exactly",
    "agenda",
    "first",
    "gon",
    "na",
    "write",
    "smart",
    "contract",
    "familiar",
    "hardhead",
    "cares",
    "gon",
    "na",
    "smart",
    "contracts",
    "first",
    "going",
    "write",
    "deployment",
    "scripts",
    "hard",
    "hat",
    "knowledge",
    "going",
    "come",
    "play",
    "going",
    "writing",
    "deployment",
    "scripts",
    "typescript",
    "typescript",
    "phenomenal",
    "unfamiliar",
    "typescript",
    "challenge",
    "rewrite",
    "javascript",
    "make",
    "javascript",
    "version",
    "finally",
    "going",
    "write",
    "scripts",
    "interact",
    "governance",
    "deployed",
    "contracts",
    "quick",
    "note",
    "originally",
    "built",
    "read",
    "smart",
    "contracts",
    "write",
    "deployment",
    "scripts",
    "write",
    "scripts",
    "tests",
    "boom",
    "done",
    "back",
    "forth",
    "tests",
    "smart",
    "contracts",
    "deploy",
    "scripts",
    "etc",
    "thinking",
    "oh",
    "goodness",
    "easy",
    "go",
    "seamlessly",
    "originally",
    "wrote",
    "code",
    "lot",
    "back",
    "forth",
    "developing",
    "going",
    "moving",
    "tests",
    "smart",
    "contracts",
    "stuff",
    "additionally",
    "tutorial",
    "going",
    "show",
    "sick",
    "hardhead",
    "skills",
    "gon",
    "na",
    "learn",
    "build",
    "dow",
    "gon",
    "na",
    "learn",
    "really",
    "advanced",
    "hardhead",
    "skills",
    "let",
    "jump",
    "let",
    "code",
    "editor",
    "using",
    "visual",
    "studio",
    "code",
    "make",
    "sure",
    "code",
    "editor",
    "ready",
    "go",
    "need",
    "couple",
    "prerequisites",
    "prerequisites",
    "github",
    "repository",
    "going",
    "need",
    "git",
    "j",
    "yarn",
    "want",
    "clone",
    "repo",
    "follow",
    "instructions",
    "get",
    "started",
    "absolutely",
    "100",
    "even",
    "need",
    "build",
    "scratch",
    "going",
    "want",
    "learn",
    "build",
    "scratch",
    "let",
    "start",
    "git",
    "dash",
    "dash",
    "version",
    "great",
    "git",
    "dash",
    "dash",
    "version",
    "great",
    "node",
    "yarn",
    "dash",
    "dash",
    "version",
    "great",
    "yarn",
    "get",
    "started",
    "everything",
    "going",
    "installing",
    "packages",
    "going",
    "dev",
    "dependency",
    "first",
    "thing",
    "need",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "hard",
    "hat",
    "already",
    "folder",
    "gon",
    "na",
    "node",
    "modules",
    "package",
    "dot",
    "json",
    "readme",
    "lock",
    "course",
    "run",
    "yarn",
    "rdap",
    "gon",
    "na",
    "get",
    "hard",
    "hat",
    "cli",
    "going",
    "stuff",
    "going",
    "create",
    "empty",
    "hardhat",
    "dot",
    "config",
    "dot",
    "j",
    "going",
    "turn",
    "typescript",
    "advanced",
    "sample",
    "typescript",
    "project",
    "bunch",
    "stuff",
    "like",
    "going",
    "create",
    "empty",
    "perfect",
    "got",
    "little",
    "hard",
    "let",
    "go",
    "ahead",
    "create",
    "folder",
    "contracts",
    "folder",
    "going",
    "add",
    "contracts",
    "first",
    "thing",
    "contract",
    "going",
    "need",
    "contracts",
    "want",
    "govern",
    "case",
    "going",
    "box",
    "dot",
    "soul",
    "actually",
    "going",
    "copy",
    "paste",
    "box",
    "soul",
    "particularly",
    "interesting",
    "could",
    "really",
    "code",
    "whatever",
    "want",
    "feel",
    "free",
    "pause",
    "video",
    "copy",
    "paste",
    "github",
    "repo",
    "create",
    "governance",
    "contract",
    "want",
    "play",
    "whatever",
    "want",
    "us",
    "store",
    "function",
    "retrieve",
    "function",
    "event",
    "private",
    "value",
    "going",
    "storing",
    "retrieving",
    "course",
    "want",
    "fix",
    "importing",
    "openzeppelin",
    "contracts",
    "opens",
    "amazing",
    "gon",
    "na",
    "want",
    "add",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "opens",
    "contracts",
    "get",
    "rid",
    "box",
    "let",
    "reopen",
    "box",
    "boom",
    "looks",
    "like",
    "detour",
    "perfect",
    "extensions",
    "using",
    "solidity",
    "one",
    "blonko",
    "slit",
    "extension",
    "get",
    "wonderful",
    "linting",
    "things",
    "great",
    "want",
    "check",
    "see",
    "compiles",
    "using",
    "remix",
    "compile",
    "remix",
    "hard",
    "hat",
    "gon",
    "na",
    "see",
    "compile",
    "using",
    "know",
    "browning",
    "want",
    "see",
    "compiles",
    "correctly",
    "run",
    "yarn",
    "hard",
    "hit",
    "compile",
    "looks",
    "like",
    "ran",
    "compilation",
    "errors",
    "need",
    "update",
    "let",
    "use",
    "solidity",
    "try",
    "compile",
    "perfect",
    "looks",
    "like",
    "compiling",
    "successfully",
    "look",
    "indeed",
    "contract",
    "okay",
    "perfect",
    "easy",
    "part",
    "way",
    "already",
    "quick",
    "let",
    "start",
    "creating",
    "next",
    "part",
    "let",
    "create",
    "governance",
    "part",
    "going",
    "working",
    "build",
    "governance",
    "platform",
    "gon",
    "na",
    "building",
    "erc",
    "20",
    "standard",
    "gon",
    "na",
    "get",
    "erc",
    "20",
    "token",
    "going",
    "token",
    "get",
    "vote",
    "let",
    "create",
    "new",
    "file",
    "called",
    "governance",
    "token",
    "governance",
    "token",
    "dot",
    "sol",
    "gon",
    "na",
    "code",
    "token",
    "use",
    "actually",
    "vote",
    "going",
    "create",
    "normal",
    "erc",
    "20",
    "token",
    "going",
    "extend",
    "make",
    "governance",
    "bowl",
    "understand",
    "mean",
    "second",
    "let",
    "go",
    "ahead",
    "make",
    "spdx",
    "license",
    "identifier",
    "going",
    "mit",
    "pragma",
    "solidity",
    "zero",
    "point",
    "contract",
    "governance",
    "token",
    "say",
    "erc",
    "20",
    "gon",
    "na",
    "go",
    "ahead",
    "import",
    "openzeppelin",
    "open",
    "zeppelin",
    "package",
    "basically",
    "everything",
    "need",
    "erc",
    "20",
    "token",
    "gon",
    "na",
    "say",
    "import",
    "open",
    "zeppelin",
    "slash",
    "contracts",
    "slash",
    "token",
    "slash",
    "erc",
    "20x",
    "go",
    "github",
    "openzeppelin",
    "contracts",
    "token",
    "c",
    "20",
    "erc",
    "20",
    "dotto",
    "token",
    "use",
    "c",
    "20",
    "ditzel",
    "gon",
    "na",
    "change",
    "worry",
    "yet",
    "going",
    "un",
    "256",
    "public",
    "storage",
    "max",
    "supply",
    "best",
    "practice",
    "fine",
    "give",
    "max",
    "supply",
    "much",
    "going",
    "gon",
    "na",
    "1",
    "million",
    "gon",
    "na",
    "1",
    "million",
    "tokens",
    "gon",
    "na",
    "create",
    "constructor",
    "construct",
    "c",
    "give",
    "governance",
    "token",
    "name",
    "symbol",
    "going",
    "gt",
    "know",
    "inherit",
    "another",
    "contract",
    "constructor",
    "use",
    "inherited",
    "contracts",
    "constructor",
    "well",
    "fact",
    "think",
    "governance",
    "token",
    "g",
    "team",
    "even",
    "call",
    "one",
    "erc",
    "20",
    "functions",
    "called",
    "mint",
    "mint",
    "message",
    "dot",
    "sender",
    "whoever",
    "deploys",
    "erc",
    "20",
    "contract",
    "meant",
    "everything",
    "whole",
    "max",
    "supply",
    "normally",
    "normal",
    "erc",
    "20",
    "token",
    "done",
    "normal",
    "erc",
    "20",
    "token",
    "see",
    "votes",
    "need",
    "make",
    "sure",
    "fair",
    "imagine",
    "second",
    "someone",
    "knows",
    "hot",
    "proposal",
    "coming",
    "want",
    "vote",
    "buy",
    "ton",
    "tokens",
    "dump",
    "votes",
    "want",
    "avoid",
    "want",
    "avoid",
    "people",
    "buying",
    "selling",
    "tokens",
    "get",
    "governance",
    "actually",
    "create",
    "snapshot",
    "many",
    "tokens",
    "people",
    "certain",
    "block",
    "snapshot",
    "tokens",
    "people",
    "certain",
    "block",
    "want",
    "make",
    "sure",
    "proposal",
    "goes",
    "actually",
    "pick",
    "snapshot",
    "past",
    "want",
    "use",
    "kind",
    "incentivizes",
    "people",
    "jump",
    "proposal",
    "jump",
    "proposal",
    "hits",
    "uses",
    "block",
    "snapshot",
    "past",
    "actually",
    "going",
    "need",
    "change",
    "little",
    "bit",
    "gon",
    "na",
    "change",
    "erc",
    "20",
    "erc",
    "20",
    "votes",
    "actually",
    "see",
    "open",
    "zeppelin",
    "extensions",
    "slash",
    "erc",
    "20",
    "votes",
    "soul",
    "contract",
    "go",
    "back",
    "irs",
    "github",
    "see",
    "erc",
    "20",
    "votes",
    "also",
    "snapshot",
    "pretty",
    "similar",
    "main",
    "functions",
    "checkpoints",
    "checkpoints",
    "basically",
    "hey",
    "snapshot",
    "number",
    "checkpoints",
    "also",
    "delegate",
    "tokens",
    "different",
    "people",
    "maybe",
    "going",
    "available",
    "actually",
    "vote",
    "say",
    "hey",
    "gon",
    "na",
    "give",
    "tokens",
    "somebody",
    "else",
    "get",
    "many",
    "votes",
    "somebody",
    "passed",
    "votes",
    "get",
    "passed",
    "apply",
    "functions",
    "make",
    "token",
    "much",
    "better",
    "voting",
    "tool",
    "right",
    "makes",
    "much",
    "much",
    "better",
    "gon",
    "na",
    "say",
    "contracts",
    "governance",
    "token",
    "erc",
    "20",
    "votes",
    "add",
    "additional",
    "constructor",
    "erc",
    "20",
    "permit",
    "sorry",
    "kind",
    "copied",
    "pasted",
    "erc",
    "20",
    "permit",
    "governance",
    "token",
    "right",
    "governance",
    "token",
    "little",
    "bit",
    "capable",
    "actual",
    "voting",
    "right",
    "snapshot",
    "delegating",
    "functionality",
    "checkpoints",
    "going",
    "much",
    "better",
    "votes",
    "fair",
    "way",
    "thing",
    "need",
    "though",
    "need",
    "add",
    "overrides",
    "right",
    "gon",
    "na",
    "say",
    "functions",
    "overrides",
    "required",
    "solidity",
    "part",
    "little",
    "bit",
    "boring",
    "going",
    "copy",
    "paste",
    "feel",
    "free",
    "copy",
    "paste",
    "github",
    "anytime",
    "token",
    "transfer",
    "time",
    "transfer",
    "token",
    "want",
    "make",
    "sure",
    "call",
    "token",
    "transfer",
    "erc",
    "20",
    "votes",
    "reason",
    "want",
    "make",
    "sure",
    "snapshots",
    "updated",
    "right",
    "want",
    "make",
    "sure",
    "know",
    "many",
    "people",
    "many",
    "tokens",
    "block",
    "thing",
    "mint",
    "thing",
    "burning",
    "want",
    "make",
    "sure",
    "always",
    "know",
    "many",
    "tokens",
    "people",
    "different",
    "blocks",
    "different",
    "checkpoints",
    "say",
    "important",
    "bit",
    "checkpoint",
    "going",
    "use",
    "token",
    "voting",
    "cool",
    "feel",
    "free",
    "copy",
    "github",
    "want",
    "even",
    "try",
    "rest",
    "tutorial",
    "without",
    "see",
    "fare",
    "cool",
    "governance",
    "token",
    "erc",
    "20",
    "token",
    "use",
    "governance",
    "let",
    "try",
    "compile",
    "yarn",
    "hardhead",
    "compile",
    "great",
    "looks",
    "like",
    "things",
    "compiling",
    "successfully",
    "perfect",
    "governance",
    "token",
    "looks",
    "good",
    "box",
    "looks",
    "good",
    "let",
    "actually",
    "start",
    "creating",
    "governance",
    "contracts",
    "actually",
    "going",
    "make",
    "folder",
    "called",
    "governance",
    "standard",
    "going",
    "standard",
    "governance",
    "model",
    "going",
    "chain",
    "erc",
    "20",
    "plan",
    "updating",
    "future",
    "governance",
    "chain",
    "something",
    "right",
    "calling",
    "governance",
    "standard",
    "quote",
    "unquote",
    "standard",
    "way",
    "governance",
    "air",
    "going",
    "need",
    "two",
    "contracts",
    "actually",
    "gon",
    "na",
    "need",
    "government",
    "work",
    "contract",
    "soul",
    "also",
    "going",
    "need",
    "time",
    "lock",
    "soul",
    "make",
    "sense",
    "second",
    "gov",
    "contract",
    "dot",
    "soul",
    "going",
    "contract",
    "voting",
    "code",
    "voting",
    "logic",
    "governance",
    "token",
    "going",
    "use",
    "time",
    "lock",
    "actually",
    "going",
    "additional",
    "contract",
    "actually",
    "owner",
    "time",
    "lock",
    "governor",
    "contract",
    "sort",
    "one",
    "difference",
    "time",
    "lock",
    "actually",
    "going",
    "owner",
    "box",
    "contract",
    "important",
    "whenever",
    "propose",
    "cue",
    "something",
    "proposal",
    "go",
    "want",
    "wait",
    "right",
    "want",
    "wait",
    "new",
    "vote",
    "executed",
    "want",
    "let",
    "say",
    "proposal",
    "goes",
    "bad",
    "like",
    "let",
    "say",
    "box",
    "contract",
    "proposal",
    "goes",
    "says",
    "everyone",
    "holds",
    "governance",
    "token",
    "pay",
    "five",
    "tokens",
    "something",
    "like",
    "right",
    "whatever",
    "knows",
    "right",
    "maybe",
    "something",
    "really",
    "want",
    "part",
    "governance",
    "contracts",
    "give",
    "time",
    "give",
    "time",
    "users",
    "get",
    "like",
    "governance",
    "update",
    "always",
    "want",
    "type",
    "timeline",
    "proposal",
    "passes",
    "wo",
    "go",
    "effect",
    "right",
    "away",
    "wait",
    "duration",
    "go",
    "effect",
    "timeline",
    "gon",
    "na",
    "governor",
    "contract",
    "going",
    "actual",
    "code",
    "cheat",
    "little",
    "bit",
    "actually",
    "cheat",
    "lot",
    "little",
    "bit",
    "opens",
    "one",
    "thing",
    "called",
    "contracts",
    "wizard",
    "link",
    "description",
    "well",
    "opens",
    "wizard",
    "way",
    "us",
    "write",
    "really",
    "basic",
    "boilerplate",
    "code",
    "right",
    "wizard",
    "right",
    "go",
    "wizard",
    "contract",
    "see",
    "make",
    "erc",
    "20",
    "nft",
    "finally",
    "gov",
    "thing",
    "call",
    "give",
    "name",
    "going",
    "call",
    "rs",
    "gov",
    "contract",
    "explain",
    "means",
    "give",
    "voting",
    "delay",
    "delay",
    "since",
    "proposal",
    "created",
    "voting",
    "starts",
    "create",
    "proposal",
    "got",
    "ta",
    "wait",
    "little",
    "bit",
    "voting",
    "period",
    "long",
    "votes",
    "go",
    "reason",
    "audio",
    "important",
    "actually",
    "votes",
    "voting",
    "period",
    "terms",
    "blocks",
    "anti",
    "pattern",
    "actually",
    "timed",
    "based",
    "things",
    "smart",
    "contracts",
    "much",
    "better",
    "block",
    "based",
    "things",
    "saying",
    "one",
    "week",
    "going",
    "know",
    "average",
    "block",
    "time",
    "seconds",
    "gon",
    "na",
    "figure",
    "weak",
    "proposal",
    "threshold",
    "going",
    "minimum",
    "number",
    "votes",
    "account",
    "must",
    "create",
    "proposal",
    "maybe",
    "want",
    "people",
    "lot",
    "governance",
    "token",
    "make",
    "votes",
    "quorum",
    "percentage",
    "percentage",
    "people",
    "need",
    "vote",
    "saying",
    "4",
    "token",
    "holders",
    "need",
    "vote",
    "could",
    "say",
    "know",
    "exactly",
    "100",
    "tokens",
    "need",
    "vote",
    "whatever",
    "want",
    "also",
    "updatable",
    "settings",
    "bravo",
    "compatible",
    "bravo",
    "compound",
    "type",
    "contract",
    "want",
    "make",
    "integratable",
    "compound",
    "votes",
    "comp",
    "like",
    "erc",
    "20",
    "votes",
    "working",
    "erc",
    "20",
    "votes",
    "always",
    "want",
    "time",
    "lock",
    "gon",
    "na",
    "open",
    "zeplin",
    "implementation",
    "time",
    "lock",
    "could",
    "also",
    "compound",
    "implementation",
    "going",
    "upgradability",
    "however",
    "number",
    "fantastic",
    "resources",
    "actually",
    "upgradability",
    "want",
    "upgradability",
    "adds",
    "stuff",
    "going",
    "makes",
    "much",
    "longer",
    "video",
    "add",
    "stuff",
    "like",
    "oh",
    "pretty",
    "much",
    "know",
    "feels",
    "like",
    "cheating",
    "going",
    "copy",
    "whole",
    "thing",
    "right",
    "copy",
    "stuff",
    "put",
    "copy",
    "clipboard",
    "going",
    "paste",
    "worry",
    "gon",
    "na",
    "explain",
    "going",
    "government",
    "contract",
    "governor",
    "governor",
    "setting",
    "governor",
    "counting",
    "simple",
    "governor",
    "votes",
    "governor",
    "votes",
    "quorum",
    "franco",
    "stuff",
    "implementations",
    "make",
    "easier",
    "governor",
    "governor",
    "counting",
    "simple",
    "way",
    "counting",
    "votes",
    "governor",
    "votes",
    "way",
    "integrating",
    "year",
    "20",
    "contract",
    "quorum",
    "fraction",
    "way",
    "understand",
    "quorum",
    "time",
    "lock",
    "obviously",
    "time",
    "lock",
    "going",
    "base",
    "contract",
    "gon",
    "na",
    "settings",
    "gon",
    "na",
    "talk",
    "minute",
    "let",
    "go",
    "functions",
    "voting",
    "delay",
    "exactly",
    "voting",
    "delay",
    "gon",
    "na",
    "superdad",
    "voting",
    "gelei",
    "gon",
    "na",
    "get",
    "governor",
    "settings",
    "contract",
    "going",
    "set",
    "minute",
    "voting",
    "period",
    "going",
    "set",
    "gov",
    "settings",
    "one",
    "right",
    "want",
    "like",
    "look",
    "contracts",
    "absolutely",
    "right",
    "go",
    "contracts",
    "governance",
    "extensions",
    "right",
    "look",
    "governance",
    "settings",
    "see",
    "voting",
    "delay",
    "voting",
    "period",
    "proposal",
    "threshold",
    "right",
    "constructor",
    "exactly",
    "setting",
    "right",
    "setting",
    "voting",
    "delay",
    "voting",
    "period",
    "proposal",
    "threshold",
    "also",
    "going",
    "make",
    "customizable",
    "well",
    "rest",
    "exactly",
    "calling",
    "quorum",
    "super",
    "get",
    "votes",
    "super",
    "inherited",
    "contracts",
    "get",
    "state",
    "interesting",
    "functions",
    "proposed",
    "actually",
    "going",
    "propose",
    "new",
    "governance",
    "proposal",
    "threshold",
    "execute",
    "executes",
    "cued",
    "proposal",
    "cancel",
    "executor",
    "going",
    "actually",
    "execute",
    "stuff",
    "actually",
    "going",
    "make",
    "anybody",
    "supports",
    "interface",
    "basically",
    "ignore",
    "let",
    "make",
    "little",
    "bit",
    "customizable",
    "iboats",
    "token",
    "going",
    "governance",
    "token",
    "timeline",
    "controller",
    "timeline",
    "going",
    "timeline",
    "controller",
    "make",
    "amended",
    "need",
    "want",
    "let",
    "proposal",
    "go",
    "passes",
    "want",
    "give",
    "people",
    "time",
    "get",
    "let",
    "add",
    "un",
    "256",
    "voting",
    "delay",
    "parameter",
    "voting",
    "delay",
    "going",
    "going",
    "set",
    "governor",
    "settings",
    "going",
    "unt",
    "256",
    "voting",
    "period",
    "going",
    "add",
    "right",
    "means",
    "blocks",
    "approximately",
    "one",
    "week",
    "means",
    "going",
    "leave",
    "proposal",
    "threshold",
    "zero",
    "really",
    "want",
    "change",
    "want",
    "let",
    "anyone",
    "make",
    "proposal",
    "going",
    "add",
    "256",
    "underscore",
    "core",
    "percentage",
    "governor",
    "votes",
    "quorum",
    "percentage",
    "corporate",
    "senators",
    "completely",
    "customizable",
    "voting",
    "delay",
    "voting",
    "period",
    "core",
    "percentage",
    "whatever",
    "want",
    "believe",
    "simple",
    "governance",
    "contract",
    "thank",
    "openzeppelin",
    "99",
    "work",
    "us",
    "contract",
    "going",
    "functions",
    "going",
    "go",
    "proposing",
    "executing",
    "queuing",
    "different",
    "proposals",
    "right",
    "got",
    "make",
    "time",
    "lock",
    "contract",
    "contract",
    "actually",
    "going",
    "lot",
    "easier",
    "going",
    "scratch",
    "going",
    "spdx",
    "license",
    "fire",
    "team",
    "pragma",
    "solidity",
    "let",
    "point",
    "point",
    "zero",
    "going",
    "import",
    "open",
    "zeppelin",
    "contract",
    "called",
    "time",
    "lock",
    "controller",
    "look",
    "governance",
    "time",
    "lock",
    "controller",
    "dot",
    "soul",
    "contract",
    "functionality",
    "creating",
    "roles",
    "actually",
    "propose",
    "execute",
    "time",
    "lock",
    "admin",
    "also",
    "execute",
    "stuff",
    "well",
    "gon",
    "na",
    "work",
    "tandem",
    "governance",
    "contract",
    "right",
    "contract",
    "says",
    "makes",
    "sure",
    "governance",
    "contract",
    "push",
    "stuff",
    "willy",
    "nilly",
    "gon",
    "na",
    "say",
    "gon",
    "na",
    "first",
    "import",
    "import",
    "open",
    "zeppelin",
    "slash",
    "contracts",
    "slash",
    "governance",
    "slash",
    "time",
    "lock",
    "controller",
    "gon",
    "na",
    "say",
    "contract",
    "lock",
    "time",
    "lock",
    "controller",
    "like",
    "create",
    "little",
    "constructor",
    "truck",
    "door",
    "takes",
    "couple",
    "different",
    "parameters",
    "gon",
    "na",
    "take",
    "un",
    "256",
    "min",
    "delay",
    "min",
    "delay",
    "min",
    "delay",
    "going",
    "along",
    "wait",
    "executing",
    "hey",
    "proposal",
    "passes",
    "great",
    "got",
    "ta",
    "wait",
    "minimum",
    "delay",
    "going",
    "list",
    "proposers",
    "address",
    "array",
    "memory",
    "proposers",
    "proposers",
    "list",
    "addresses",
    "propose",
    "us",
    "gon",
    "na",
    "say",
    "everyone",
    "gon",
    "na",
    "able",
    "propose",
    "last",
    "address",
    "array",
    "memory",
    "executors",
    "execute",
    "everything",
    "gon",
    "na",
    "say",
    "executors",
    "execute",
    "probe",
    "posle",
    "passes",
    "gon",
    "na",
    "say",
    "everybody",
    "reason",
    "need",
    "need",
    "pass",
    "time",
    "lock",
    "controller",
    "constructor",
    "expecting",
    "three",
    "parameters",
    "tama",
    "controller",
    "delay",
    "pro",
    "posers",
    "x",
    "eq",
    "tours",
    "going",
    "owns",
    "everything",
    "timelog",
    "going",
    "owning",
    "box",
    "government",
    "contract",
    "government",
    "contracts",
    "going",
    "send",
    "votes",
    "stuff",
    "time",
    "lock",
    "actually",
    "everything",
    "needs",
    "flow",
    "order",
    "governance",
    "actually",
    "happen",
    "want",
    "make",
    "sure",
    "min",
    "delay",
    "go",
    "right",
    "process",
    "everything",
    "believe",
    "everything",
    "code",
    "going",
    "need",
    "far",
    "solidity",
    "goes",
    "create",
    "governance",
    "create",
    "dao",
    "even",
    "hard",
    "hat",
    "compile",
    "make",
    "sure",
    "everything",
    "compiled",
    "tada",
    "done",
    "done",
    "hard",
    "work",
    "going",
    "flip",
    "actually",
    "writing",
    "scripts",
    "deploy",
    "interact",
    "everything",
    "using",
    "typescript",
    "point",
    "like",
    "oh",
    "already",
    "learned",
    "everything",
    "wanted",
    "use",
    "hard",
    "hat",
    "use",
    "tools",
    "challenge",
    "go",
    "challenge",
    "try",
    "something",
    "else",
    "reached",
    "point",
    "want",
    "give",
    "huge",
    "congrats",
    "taken",
    "steps",
    "build",
    "doubt",
    "build",
    "governance",
    "model",
    "solidity",
    "really",
    "need",
    "take",
    "deploy",
    "good",
    "go",
    "course",
    "know",
    "smart",
    "contract",
    "developer",
    "solidity",
    "got",
    "tooling",
    "right",
    "let",
    "go",
    "ahead",
    "jump",
    "writing",
    "typescript",
    "scripts",
    "actually",
    "want",
    "see",
    "python",
    "version",
    "go",
    "check",
    "link",
    "description",
    "see",
    "pythonic",
    "version",
    "course",
    "forget",
    "smash",
    "like",
    "button",
    "subscribe",
    "leave",
    "comment",
    "far",
    "course",
    "give",
    "pat",
    "back",
    "great",
    "job",
    "amazing",
    "getting",
    "far",
    "congrats",
    "let",
    "jump",
    "alright",
    "back",
    "written",
    "smart",
    "contracts",
    "already",
    "check",
    "easy",
    "right",
    "way",
    "easier",
    "thought",
    "would",
    "gon",
    "na",
    "write",
    "deployment",
    "scripts",
    "gon",
    "na",
    "write",
    "scripts",
    "interact",
    "full",
    "repo",
    "also",
    "tests",
    "gon",
    "na",
    "write",
    "scripts",
    "feel",
    "free",
    "check",
    "tests",
    "let",
    "write",
    "deployment",
    "scripts",
    "actually",
    "going",
    "using",
    "package",
    "deployment",
    "called",
    "hard",
    "hat",
    "deploy",
    "absolutely",
    "phenomenal",
    "hard",
    "hat",
    "making",
    "deployments",
    "much",
    "much",
    "easier",
    "gon",
    "na",
    "scroll",
    "installation",
    "actually",
    "gon",
    "na",
    "go",
    "ahead",
    "install",
    "typically",
    "could",
    "install",
    "like",
    "well",
    "gon",
    "na",
    "use",
    "yarn",
    "gon",
    "na",
    "kind",
    "safe",
    "way",
    "looks",
    "little",
    "wonky",
    "explaining",
    "right",
    "instead",
    "npm",
    "install",
    "gon",
    "na",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "whole",
    "thing",
    "right",
    "gon",
    "na",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "paste",
    "gon",
    "na",
    "nomic",
    "labs",
    "slash",
    "hard",
    "hat",
    "hyphen",
    "ethers",
    "npm",
    "colon",
    "hard",
    "hat",
    "deploy",
    "ethers",
    "basically",
    "saying",
    "hard",
    "hat",
    "deploy",
    "ethers",
    "going",
    "overriding",
    "hardened",
    "ether",
    "thing",
    "also",
    "going",
    "add",
    "ethers",
    "well",
    "add",
    "check",
    "package",
    "json",
    "see",
    "hard",
    "hats",
    "hard",
    "hat",
    "ethers",
    "overwritten",
    "hard",
    "hat",
    "deploy",
    "ethers",
    "additionally",
    "going",
    "want",
    "add",
    "deploy",
    "yarn",
    "add",
    "dash",
    "dash",
    "dev",
    "hard",
    "hat",
    "hyphen",
    "deploy",
    "going",
    "allow",
    "us",
    "instead",
    "write",
    "scripts",
    "stuff",
    "kind",
    "makes",
    "hard",
    "save",
    "deployments",
    "everything",
    "going",
    "create",
    "deploy",
    "folder",
    "going",
    "add",
    "deploy",
    "scripts",
    "absolutely",
    "love",
    "package",
    "makes",
    "deployment",
    "really",
    "really",
    "easy",
    "gon",
    "na",
    "create",
    "new",
    "file",
    "going",
    "oh",
    "one",
    "gon",
    "na",
    "go",
    "step",
    "step",
    "deploying",
    "everything",
    "gon",
    "na",
    "call",
    "deploy",
    "govern",
    "token",
    "dot",
    "typescript",
    "gon",
    "na",
    "first",
    "thing",
    "going",
    "also",
    "gon",
    "na",
    "change",
    "typescript",
    "tada",
    "typescript",
    "yay",
    "one",
    "thing",
    "kind",
    "nice",
    "kind",
    "advanced",
    "typescript",
    "thing",
    "heart",
    "kind",
    "gives",
    "beginning",
    "install",
    "typescript",
    "stuff",
    "going",
    "yarn",
    "add",
    "typescript",
    "type",
    "chain",
    "vs",
    "node",
    "type",
    "chain",
    "slash",
    "ethers",
    "v",
    "five",
    "lot",
    "stuff",
    "worry",
    "type",
    "chain",
    "slash",
    "hard",
    "hat",
    "type",
    "slash",
    "chai",
    "type",
    "slash",
    "node",
    "make",
    "sure",
    "dev",
    "dash",
    "dash",
    "dev",
    "know",
    "lot",
    "stuff",
    "stuff",
    "make",
    "typescript",
    "absolutely",
    "javascript",
    "want",
    "js",
    "files",
    "ignore",
    "typing",
    "feel",
    "free",
    "whatever",
    "want",
    "alright",
    "cool",
    "okay",
    "let",
    "go",
    "governor",
    "token",
    "create",
    "deploy",
    "script",
    "hardhead",
    "deploy",
    "github",
    "repo",
    "little",
    "demo",
    "boilerplate",
    "code",
    "actually",
    "deploy",
    "script",
    "feel",
    "free",
    "reference",
    "lost",
    "confused",
    "going",
    "going",
    "import",
    "hard",
    "hat",
    "runtime",
    "environments",
    "enhanced",
    "slash",
    "types",
    "see",
    "need",
    "second",
    "also",
    "going",
    "import",
    "deploy",
    "function",
    "hardhead",
    "deploy",
    "slash",
    "types",
    "two",
    "main",
    "things",
    "need",
    "create",
    "deploy",
    "function",
    "pothead",
    "deploy",
    "going",
    "create",
    "function",
    "going",
    "call",
    "const",
    "ploy",
    "governance",
    "token",
    "going",
    "type",
    "deploy",
    "function",
    "order",
    "actually",
    "work",
    "create",
    "whole",
    "bunch",
    "deploy",
    "functions",
    "run",
    "heart",
    "hub",
    "going",
    "async",
    "function",
    "going",
    "take",
    "hard",
    "hat",
    "runtime",
    "environment",
    "input",
    "parameter",
    "going",
    "call",
    "hrv",
    "run",
    "hard",
    "hat",
    "deploy",
    "see",
    "second",
    "actually",
    "passing",
    "fake",
    "hard",
    "hat",
    "chain",
    "gets",
    "spun",
    "background",
    "us",
    "right",
    "even",
    "like",
    "console",
    "dot",
    "log",
    "hello",
    "yarn",
    "hard",
    "hat",
    "deploy",
    "actually",
    "even",
    "yarn",
    "hard",
    "hat",
    "dash",
    "dash",
    "help",
    "see",
    "since",
    "imported",
    "hard",
    "hat",
    "deploy",
    "excuse",
    "need",
    "add",
    "config",
    "first",
    "config",
    "gon",
    "na",
    "need",
    "top",
    "imports",
    "hard",
    "hat",
    "deploy",
    "top",
    "roscoe",
    "need",
    "import",
    "nomic",
    "labs",
    "slash",
    "hard",
    "hat",
    "ethers",
    "also",
    "going",
    "need",
    "import",
    "type",
    "chain",
    "slash",
    "hard",
    "hat",
    "leave",
    "import",
    "stuff",
    "second",
    "literally",
    "like",
    "yarn",
    "hard",
    "hat",
    "help",
    "see",
    "new",
    "task",
    "actually",
    "see",
    "ton",
    "new",
    "tasks",
    "right",
    "filled",
    "tasks",
    "check",
    "clean",
    "compile",
    "console",
    "deployed",
    "new",
    "task",
    "actually",
    "deploys",
    "contracts",
    "anything",
    "deploy",
    "folder",
    "head",
    "go",
    "ahead",
    "run",
    "right",
    "deploy",
    "folder",
    "console",
    "dot",
    "log",
    "hello",
    "run",
    "yarn",
    "hit",
    "deploy",
    "see",
    "prints",
    "hello",
    "spin",
    "new",
    "blockchain",
    "background",
    "projects",
    "everything",
    "type",
    "type",
    "chain",
    "stuff",
    "says",
    "see",
    "lot",
    "deploy",
    "script",
    "dot",
    "func",
    "function",
    "actually",
    "need",
    "export",
    "export",
    "default",
    "deploy",
    "governance",
    "token",
    "getting",
    "mad",
    "us",
    "run",
    "yarn",
    "hard",
    "hat",
    "deploy",
    "boom",
    "say",
    "hello",
    "actually",
    "deploy",
    "scripts",
    "run",
    "everything",
    "deploy",
    "folder",
    "one",
    "go",
    "really",
    "helpful",
    "let",
    "go",
    "ahead",
    "deploy",
    "governance",
    "token",
    "first",
    "get",
    "lot",
    "faster",
    "go",
    "along",
    "worry",
    "delete",
    "first",
    "gon",
    "na",
    "gon",
    "na",
    "say",
    "const",
    "need",
    "account",
    "deploy",
    "first",
    "say",
    "const",
    "get",
    "named",
    "accounts",
    "deployments",
    "network",
    "equals",
    "hra",
    "going",
    "little",
    "bit",
    "advanced",
    "hard",
    "stuff",
    "slick",
    "stuff",
    "getting",
    "hard",
    "hat",
    "runtime",
    "environment",
    "updated",
    "hard",
    "hat",
    "deploy",
    "get",
    "named",
    "accounts",
    "way",
    "us",
    "actually",
    "import",
    "accounts",
    "hard",
    "hat",
    "config",
    "right",
    "deploy",
    "script",
    "gon",
    "na",
    "go",
    "hard",
    "hat",
    "config",
    "gon",
    "na",
    "create",
    "new",
    "config",
    "little",
    "bit",
    "nicer",
    "first",
    "need",
    "import",
    "hard",
    "hat",
    "config",
    "type",
    "since",
    "using",
    "type",
    "scripts",
    "going",
    "import",
    "hard",
    "hat",
    "user",
    "config",
    "hard",
    "hat",
    "slash",
    "config",
    "going",
    "create",
    "config",
    "gon",
    "na",
    "comment",
    "gon",
    "na",
    "say",
    "const",
    "config",
    "gon",
    "na",
    "type",
    "hard",
    "hat",
    "user",
    "config",
    "equals",
    "add",
    "whole",
    "bunch",
    "stuff",
    "let",
    "say",
    "default",
    "network",
    "going",
    "hard",
    "hat",
    "kind",
    "local",
    "fake",
    "blockchain",
    "gon",
    "na",
    "say",
    "solidity",
    "zero",
    "point",
    "going",
    "thing",
    "called",
    "named",
    "accounts",
    "came",
    "first",
    "place",
    "list",
    "accounts",
    "use",
    "accounts",
    "say",
    "deployer",
    "name",
    "account",
    "deploying",
    "say",
    "default",
    "going",
    "zero",
    "whenever",
    "run",
    "chain",
    "zero",
    "account",
    "going",
    "named",
    "deployer",
    "thing",
    "need",
    "need",
    "add",
    "networks",
    "actually",
    "two",
    "networks",
    "going",
    "gon",
    "na",
    "hard",
    "hat",
    "chain",
    "id",
    "also",
    "going",
    "local",
    "hosts",
    "chain",
    "id",
    "look",
    "like",
    "pretty",
    "much",
    "understand",
    "understand",
    "second",
    "need",
    "tell",
    "hardhead",
    "hey",
    "development",
    "fake",
    "blockchains",
    "working",
    "okay",
    "kind",
    "basic",
    "setup",
    "okay",
    "know",
    "kind",
    "lot",
    "get",
    "named",
    "accounts",
    "network",
    "right",
    "anytime",
    "deploy",
    "something",
    "going",
    "network",
    "deploy",
    "something",
    "run",
    "yarn",
    "hard",
    "hat",
    "node",
    "hard",
    "hat",
    "going",
    "going",
    "spin",
    "fake",
    "blockchain",
    "background",
    "oh",
    "gon",
    "na",
    "mad",
    "second",
    "oh",
    "forgot",
    "add",
    "export",
    "default",
    "config",
    "right",
    "need",
    "export",
    "config",
    "hell",
    "hard",
    "hat",
    "using",
    "version",
    "sling",
    "hard",
    "hat",
    "node",
    "see",
    "added",
    "two",
    "networks",
    "hard",
    "hat",
    "localhost",
    "actually",
    "get",
    "spun",
    "fake",
    "blockchain",
    "get",
    "accounts",
    "get",
    "private",
    "keys",
    "get",
    "everything",
    "right",
    "hard",
    "hat",
    "node",
    "running",
    "terminal",
    "right",
    "run",
    "hard",
    "hat",
    "node",
    "oddly",
    "enough",
    "actually",
    "local",
    "host",
    "network",
    "hard",
    "hat",
    "network",
    "using",
    "hard",
    "hat",
    "deploy",
    "gon",
    "na",
    "local",
    "host",
    "network",
    "excuse",
    "use",
    "hard",
    "hat",
    "node",
    "actually",
    "going",
    "local",
    "host",
    "network",
    "hard",
    "hat",
    "network",
    "hard",
    "hat",
    "network",
    "uses",
    "runs",
    "tests",
    "localhost",
    "run",
    "hard",
    "hat",
    "node",
    "kind",
    "fake",
    "blockchain",
    "running",
    "terminal",
    "localhost",
    "cool",
    "well",
    "ctrl",
    "c",
    "kill",
    "alright",
    "great",
    "stuff",
    "actually",
    "working",
    "get",
    "count",
    "deployments",
    "going",
    "whole",
    "bunch",
    "stuff",
    "deployments",
    "see",
    "second",
    "network",
    "network",
    "okay",
    "great",
    "gon",
    "na",
    "grab",
    "const",
    "deploy",
    "log",
    "equals",
    "deployments",
    "deployments",
    "object",
    "comes",
    "deploy",
    "function",
    "log",
    "function",
    "log",
    "function",
    "kind",
    "nice",
    "logging",
    "gon",
    "na",
    "grab",
    "const",
    "employer",
    "equals",
    "await",
    "get",
    "named",
    "accounts",
    "grabbing",
    "config",
    "deployer",
    "account",
    "right",
    "always",
    "going",
    "zero",
    "index",
    "defaulted",
    "zero",
    "index",
    "whatever",
    "accounts",
    "great",
    "account",
    "deploy",
    "stuff",
    "deploy",
    "function",
    "stuff",
    "looking",
    "pretty",
    "good",
    "cool",
    "sometimes",
    "like",
    "log",
    "flying",
    "governance",
    "token",
    "dot",
    "say",
    "const",
    "governance",
    "token",
    "equals",
    "await",
    "deploy",
    "name",
    "contract",
    "governance",
    "token",
    "comma",
    "parameters",
    "going",
    "pass",
    "gon",
    "na",
    "say",
    "deployer",
    "take",
    "arguments",
    "args",
    "going",
    "blank",
    "going",
    "log",
    "true",
    "get",
    "logs",
    "printed",
    "us",
    "wait",
    "confirmations",
    "attribute",
    "set",
    "github",
    "repo",
    "going",
    "ignore",
    "follow",
    "along",
    "repo",
    "want",
    "auto",
    "verify",
    "stuff",
    "something",
    "going",
    "want",
    "use",
    "need",
    "wait",
    "amount",
    "blocks",
    "contract",
    "deployed",
    "actually",
    "go",
    "ahead",
    "verify",
    "right",
    "using",
    "ether",
    "scan",
    "something",
    "gon",
    "na",
    "need",
    "wait",
    "like",
    "yeah",
    "gon",
    "na",
    "need",
    "wait",
    "minutes",
    "check",
    "github",
    "repo",
    "wait",
    "confirmation",
    "stuff",
    "going",
    "ignore",
    "additionally",
    "github",
    "repo",
    "verify",
    "function",
    "check",
    "see",
    "development",
    "chain",
    "verify",
    "like",
    "ether",
    "scan",
    "something",
    "go",
    "ahead",
    "verify",
    "sure",
    "check",
    "github",
    "repo",
    "learn",
    "auto",
    "verify",
    "without",
    "anything",
    "part",
    "even",
    "floyd",
    "governance",
    "token",
    "address",
    "governance",
    "token",
    "dot",
    "address",
    "yarn",
    "hardhat",
    "deploy",
    "boom",
    "spin",
    "fake",
    "hard",
    "hat",
    "network",
    "deploy",
    "governance",
    "token",
    "address",
    "boom",
    "deploy",
    "fake",
    "deployed",
    "little",
    "network",
    "great",
    "tokens",
    "deployed",
    "deploy",
    "script",
    "yeah",
    "zoom",
    "little",
    "bit",
    "let",
    "zoom",
    "little",
    "bit",
    "great",
    "whole",
    "thing",
    "going",
    "add",
    "one",
    "thing",
    "going",
    "add",
    "something",
    "called",
    "delegate",
    "function",
    "actually",
    "deploy",
    "contract",
    "nobody",
    "voting",
    "power",
    "yet",
    "reason",
    "nobody",
    "token",
    "delegated",
    "want",
    "delegate",
    "token",
    "deployer",
    "right",
    "going",
    "call",
    "delegate",
    "function",
    "going",
    "create",
    "new",
    "function",
    "called",
    "const",
    "delegate",
    "going",
    "async",
    "function",
    "going",
    "take",
    "governance",
    "token",
    "address",
    "string",
    "going",
    "take",
    "delegated",
    "account",
    "also",
    "string",
    "racing",
    "say",
    "want",
    "delegate",
    "want",
    "able",
    "vote",
    "token",
    "okay",
    "created",
    "async",
    "function",
    "called",
    "delegate",
    "well",
    "say",
    "kant",
    "token",
    "equals",
    "token",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "probably",
    "two",
    "ethers",
    "us",
    "hardheaded",
    "otto",
    "great",
    "want",
    "like",
    "ethers",
    "thank",
    "code",
    "away",
    "ether",
    "like",
    "contract",
    "going",
    "say",
    "want",
    "governance",
    "token",
    "contract",
    "governance",
    "token",
    "address",
    "auto",
    "format",
    "unsaved",
    "keeps",
    "formatting",
    "like",
    "delegated",
    "account",
    "okay",
    "cool",
    "governance",
    "token",
    "contract",
    "const",
    "tx",
    "transaction",
    "equals",
    "await",
    "governance",
    "token",
    "dot",
    "delegate",
    "delegate",
    "delegated",
    "account",
    "wait",
    "wait",
    "transaction",
    "confirmed",
    "one",
    "block",
    "console",
    "dot",
    "log",
    "checkpoints",
    "wait",
    "governance",
    "token",
    "dot",
    "num",
    "checkpoints",
    "delegated",
    "account",
    "num",
    "checkpoints",
    "function",
    "go",
    "check",
    "see",
    "erc",
    "20",
    "token",
    "actually",
    "basically",
    "whole",
    "thing",
    "delegate",
    "function",
    "used",
    "somebody",
    "calls",
    "us",
    "saying",
    "hey",
    "use",
    "vote",
    "take",
    "votes",
    "vote",
    "however",
    "want",
    "delegate",
    "look",
    "token",
    "see",
    "20",
    "extensions",
    "see",
    "20",
    "votes",
    "look",
    "number",
    "checkpoints",
    "see",
    "many",
    "checkpoints",
    "account",
    "actually",
    "reason",
    "important",
    "like",
    "saying",
    "people",
    "vote",
    "based",
    "checkpoints",
    "anytime",
    "transfer",
    "token",
    "delegate",
    "token",
    "basically",
    "call",
    "function",
    "move",
    "voting",
    "power",
    "happens",
    "back",
    "end",
    "writes",
    "checkpoint",
    "says",
    "hey",
    "checkpoint",
    "x",
    "everybody",
    "voting",
    "powers",
    "important",
    "know",
    "said",
    "every",
    "block",
    "actually",
    "every",
    "checkpoint",
    "whenever",
    "checkpoints",
    "updated",
    "gon",
    "na",
    "lot",
    "cheaper",
    "gas",
    "every",
    "single",
    "block",
    "right",
    "kind",
    "insane",
    "checkpoint",
    "governance",
    "checkpoint",
    "see",
    "actually",
    "second",
    "even",
    "wait",
    "delegate",
    "governance",
    "token",
    "dot",
    "address",
    "deployer",
    "say",
    "log",
    "delegated",
    "function",
    "john",
    "howard",
    "hit",
    "deploy",
    "one",
    "checkpoint",
    "makes",
    "sense",
    "right",
    "deployed",
    "delegated",
    "address",
    "one",
    "checkpoint",
    "reason",
    "checked",
    "see",
    "zero",
    "checkpoints",
    "means",
    "delegated",
    "correctly",
    "sure",
    "check",
    "checkpoints",
    "deployed",
    "governance",
    "token",
    "contract",
    "done",
    "bravo",
    "let",
    "move",
    "next",
    "one",
    "want",
    "deploy",
    "governance",
    "token",
    "well",
    "let",
    "deploy",
    "timelock",
    "going",
    "copy",
    "lot",
    "stuff",
    "actually",
    "going",
    "oh",
    "sometimes",
    "get",
    "weird",
    "linting",
    "errors",
    "det",
    "ts",
    "ignore",
    "sometimes",
    "get",
    "oh",
    "actually",
    "even",
    "need",
    "network",
    "okay",
    "cool",
    "yeah",
    "even",
    "need",
    "network",
    "loops",
    "sometimes",
    "get",
    "weird",
    "linting",
    "errors",
    "sometimes",
    "vyas",
    "code",
    "hard",
    "time",
    "telling",
    "understanding",
    "like",
    "overwrite",
    "thing",
    "run",
    "ts",
    "ignore",
    "gives",
    "engineers",
    "anyways",
    "yes",
    "oh",
    "deploy",
    "time",
    "lock",
    "going",
    "deploy",
    "time",
    "lock",
    "contract",
    "going",
    "borrow",
    "lot",
    "things",
    "going",
    "come",
    "back",
    "actually",
    "going",
    "copy",
    "paste",
    "two",
    "top",
    "bits",
    "gon",
    "na",
    "const",
    "deploy",
    "timelock",
    "going",
    "deploy",
    "function",
    "going",
    "async",
    "function",
    "takes",
    "heart",
    "runtime",
    "environment",
    "parameter",
    "cool",
    "nearly",
    "exactly",
    "sorry",
    "going",
    "grab",
    "first",
    "three",
    "lines",
    "first",
    "four",
    "lines",
    "guess",
    "pesos",
    "going",
    "getting",
    "exact",
    "things",
    "going",
    "nearly",
    "exact",
    "thing",
    "log",
    "deploying",
    "time",
    "lock",
    "point",
    "time",
    "lock",
    "const",
    "mark",
    "equals",
    "await",
    "deploy",
    "unlock",
    "add",
    "parameters",
    "say",
    "deployer",
    "take",
    "arguments",
    "absolutely",
    "right",
    "take",
    "look",
    "time",
    "lock",
    "min",
    "delay",
    "proposers",
    "executors",
    "want",
    "min",
    "delay",
    "well",
    "value",
    "actually",
    "going",
    "use",
    "lot",
    "usually",
    "like",
    "create",
    "new",
    "file",
    "called",
    "helper",
    "hardhats",
    "right",
    "top",
    "say",
    "export",
    "const",
    "min",
    "delay",
    "delay",
    "whatever",
    "want",
    "let",
    "go",
    "ahead",
    "3600",
    "going",
    "approximately",
    "hour",
    "right",
    "got",
    "ta",
    "wait",
    "many",
    "seconds",
    "think",
    "hour",
    "without",
    "old",
    "calculator",
    "60",
    "seconds",
    "60",
    "minutes",
    "great",
    "gon",
    "na",
    "one",
    "hour",
    "wait",
    "30",
    "minutes",
    "gon",
    "na",
    "go",
    "ahead",
    "import",
    "say",
    "import",
    "min",
    "delay",
    "wow",
    "autocomplete",
    "great",
    "helper",
    "know",
    "directory",
    "helper",
    "hardhead",
    "config",
    "gon",
    "na",
    "first",
    "argument",
    "second",
    "argument",
    "going",
    "list",
    "proposals",
    "going",
    "leave",
    "blank",
    "also",
    "list",
    "executors",
    "also",
    "going",
    "leave",
    "blank",
    "going",
    "update",
    "minute",
    "see",
    "get",
    "log",
    "true",
    "also",
    "wait",
    "confirmations",
    "thing",
    "github",
    "going",
    "skip",
    "also",
    "auto",
    "verify",
    "also",
    "gon",
    "na",
    "skip",
    "need",
    "export",
    "default",
    "deploy",
    "timelock",
    "boom",
    "good",
    "let",
    "try",
    "run",
    "hard",
    "hat",
    "deploying",
    "run",
    "great",
    "deployed",
    "governance",
    "token",
    "deployed",
    "timelock",
    "perfect",
    "cruising",
    "want",
    "deploy",
    "governance",
    "contract",
    "let",
    "go",
    "ahead",
    "gon",
    "na",
    "oh",
    "three",
    "loi",
    "gov",
    "guessed",
    "going",
    "look",
    "pretty",
    "similar",
    "right",
    "deployed",
    "time",
    "lock",
    "let",
    "go",
    "ahead",
    "grab",
    "top",
    "two",
    "things",
    "paste",
    "const",
    "deploy",
    "govern",
    "contract",
    "going",
    "apply",
    "function",
    "going",
    "async",
    "function",
    "taking",
    "part",
    "runtime",
    "environment",
    "save",
    "close",
    "even",
    "go",
    "back",
    "grab",
    "three",
    "lines",
    "oh",
    "deploy",
    "time",
    "lock",
    "paste",
    "right",
    "going",
    "need",
    "get",
    "exact",
    "things",
    "additionally",
    "going",
    "need",
    "get",
    "governance",
    "token",
    "time",
    "lock",
    "contract",
    "const",
    "governance",
    "token",
    "equals",
    "await",
    "get",
    "actually",
    "get",
    "function",
    "comes",
    "deployments",
    "literally",
    "goes",
    "gets",
    "deployments",
    "say",
    "get",
    "gover",
    "nance",
    "token",
    "also",
    "need",
    "get",
    "time",
    "lock",
    "await",
    "get",
    "lock",
    "need",
    "pass",
    "parameters",
    "governor",
    "contract",
    "right",
    "open",
    "governor",
    "contract",
    "soul",
    "look",
    "constructor",
    "takes",
    "token",
    "time",
    "lock",
    "voting",
    "delay",
    "voting",
    "period",
    "quorum",
    "percentage",
    "input",
    "parameters",
    "quick",
    "log",
    "deploying",
    "go",
    "burn",
    "ello",
    "const",
    "govern",
    "contract",
    "equals",
    "await",
    "deploy",
    "deploy",
    "govern",
    "contract",
    "sure",
    "spelling",
    "right",
    "always",
    "fine",
    "parameters",
    "gon",
    "na",
    "deployer",
    "args",
    "going",
    "list",
    "args",
    "first",
    "thing",
    "needs",
    "needs",
    "token",
    "first",
    "time",
    "lock",
    "governance",
    "token",
    "dot",
    "address",
    "going",
    "need",
    "time",
    "lock",
    "address",
    "going",
    "need",
    "vote",
    "voting",
    "delay",
    "voting",
    "period",
    "quorum",
    "percentage",
    "also",
    "values",
    "going",
    "make",
    "lot",
    "let",
    "open",
    "back",
    "helper",
    "hardhead",
    "config",
    "let",
    "create",
    "well",
    "say",
    "export",
    "const",
    "voting",
    "period",
    "say",
    "going",
    "five",
    "blocks",
    "export",
    "const",
    "voting",
    "delay",
    "going",
    "one",
    "block",
    "know",
    "really",
    "quick",
    "gon",
    "na",
    "need",
    "export",
    "const",
    "orem",
    "percentage",
    "gon",
    "na",
    "say",
    "four",
    "4",
    "voters",
    "always",
    "need",
    "voting",
    "excuse",
    "4",
    "voters",
    "need",
    "voted",
    "vote",
    "pass",
    "great",
    "going",
    "voting",
    "delay",
    "voting",
    "percentage",
    "quorum",
    "percentage",
    "import",
    "import",
    "voting",
    "delay",
    "voting",
    "period",
    "quorum",
    "percentage",
    "helper",
    "hardhead",
    "config",
    "delay",
    "period",
    "percentage",
    "kind",
    "voting",
    "delay",
    "voting",
    "period",
    "farm",
    "percentage",
    "say",
    "log",
    "true",
    "one",
    "well",
    "wait",
    "confirmations",
    "auto",
    "verification",
    "going",
    "totally",
    "ignore",
    "export",
    "default",
    "blood",
    "governor",
    "contract",
    "oh",
    "carrie",
    "getting",
    "spicy",
    "let",
    "make",
    "sure",
    "works",
    "yarn",
    "hardhat",
    "deploy",
    "see",
    "three",
    "contracts",
    "deployed",
    "think",
    "compile",
    "governance",
    "token",
    "deployed",
    "timelock",
    "deployed",
    "governance",
    "contract",
    "deployed",
    "let",
    "go",
    "alright",
    "done",
    "yet",
    "two",
    "deploy",
    "scripts",
    "first",
    "one",
    "going",
    "call",
    "setup",
    "governance",
    "contracts",
    "okay",
    "one",
    "really",
    "important",
    "right",
    "time",
    "lock",
    "contract",
    "proposers",
    "executors",
    "right",
    "want",
    "change",
    "want",
    "allow",
    "proposer",
    "governor",
    "governor",
    "contract",
    "one",
    "proposes",
    "things",
    "time",
    "lock",
    "anybody",
    "able",
    "execute",
    "way",
    "works",
    "say",
    "governance",
    "contract",
    "proposes",
    "something",
    "time",
    "lock",
    "time",
    "lock",
    "waits",
    "period",
    "anybody",
    "go",
    "ahead",
    "execute",
    "governor",
    "contract",
    "everybody",
    "votes",
    "everything",
    "vote",
    "passes",
    "governor",
    "says",
    "hey",
    "time",
    "lock",
    "please",
    "propose",
    "tom",
    "like",
    "goes",
    "yeah",
    "sure",
    "got",
    "wait",
    "minimum",
    "delay",
    "delay",
    "happens",
    "anybody",
    "execute",
    "would",
    "really",
    "cool",
    "integration",
    "chain",
    "link",
    "keepers",
    "way",
    "chain",
    "link",
    "keepers",
    "automatically",
    "execute",
    "build",
    "next",
    "anyways",
    "set",
    "work",
    "gon",
    "na",
    "create",
    "new",
    "deploy",
    "thing",
    "called",
    "oh",
    "four",
    "setup",
    "governance",
    "contracts",
    "dot",
    "typescript",
    "going",
    "code",
    "setting",
    "gon",
    "na",
    "look",
    "really",
    "similar",
    "deploy",
    "functions",
    "go",
    "head",
    "back",
    "oh",
    "three",
    "paste",
    "two",
    "top",
    "ones",
    "course",
    "gon",
    "na",
    "const",
    "setup",
    "contracts",
    "going",
    "deploy",
    "function",
    "going",
    "async",
    "function",
    "going",
    "take",
    "hrv",
    "art",
    "runtime",
    "environment",
    "parameters",
    "winner",
    "right",
    "cool",
    "gon",
    "na",
    "grabbing",
    "three",
    "top",
    "see",
    "gets",
    "little",
    "bit",
    "easier",
    "kind",
    "repetitive",
    "right",
    "gon",
    "na",
    "grab",
    "bit",
    "right",
    "gon",
    "na",
    "get",
    "contracts",
    "interact",
    "another",
    "reason",
    "hard",
    "hat",
    "deploy",
    "nice",
    "const",
    "timelock",
    "equals",
    "await",
    "ethers",
    "get",
    "next",
    "let",
    "go",
    "ahead",
    "import",
    "ethers",
    "hard",
    "hat",
    "imports",
    "ethers",
    "red",
    "hat",
    "even",
    "drop",
    "little",
    "ts",
    "ignore",
    "ethers",
    "dot",
    "get",
    "contract",
    "want",
    "time",
    "lock",
    "contract",
    "say",
    "want",
    "attach",
    "deployer",
    "whenever",
    "call",
    "function",
    "deployer",
    "calling",
    "function",
    "want",
    "const",
    "governor",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "governor",
    "contract",
    "going",
    "attached",
    "deployer",
    "right",
    "gon",
    "na",
    "log",
    "setting",
    "roles",
    "going",
    "set",
    "roles",
    "right",
    "setting",
    "governor",
    "send",
    "things",
    "time",
    "lock",
    "time",
    "lock",
    "going",
    "almost",
    "think",
    "time",
    "lock",
    "like",
    "president",
    "right",
    "everything",
    "goes",
    "senate",
    "house",
    "representative",
    "governor",
    "president",
    "says",
    "yeah",
    "sure",
    "got",
    "wait",
    "minimum",
    "delay",
    "president",
    "one",
    "actually",
    "execute",
    "everything",
    "actually",
    "sure",
    "really",
    "works",
    "politics",
    "protecting",
    "president",
    "time",
    "like",
    "one",
    "actually",
    "anything",
    "way",
    "works",
    "actually",
    "going",
    "get",
    "byte",
    "codes",
    "different",
    "roles",
    "right",
    "look",
    "time",
    "locks",
    "ones",
    "contracts",
    "go",
    "governance",
    "go",
    "tama",
    "controller",
    "things",
    "called",
    "proposal",
    "roll",
    "executor",
    "roll",
    "time",
    "like",
    "admin",
    "etc",
    "hashes",
    "strings",
    "bytes",
    "32",
    "saying",
    "hey",
    "anybody",
    "byte",
    "32",
    "proposer",
    "anybody",
    "byte",
    "32",
    "executor",
    "anybody",
    "byte",
    "soon",
    "time",
    "like",
    "admin",
    "etc",
    "right",
    "deployer",
    "account",
    "time",
    "like",
    "admin",
    "bad",
    "want",
    "want",
    "anyone",
    "time",
    "like",
    "admin",
    "right",
    "want",
    "anyone",
    "power",
    "time",
    "lock",
    "want",
    "centralized",
    "force",
    "going",
    "going",
    "const",
    "going",
    "get",
    "roles",
    "proposer",
    "proposer",
    "role",
    "going",
    "weight",
    "unlock",
    "row",
    "pole",
    "sir",
    "role",
    "familiar",
    "multi",
    "call",
    "would",
    "great",
    "time",
    "multi",
    "call",
    "copy",
    "paste",
    "whole",
    "line",
    "x",
    "eq",
    "tour",
    "role",
    "x",
    "eq",
    "tour",
    "roll",
    "gon",
    "na",
    "copy",
    "whole",
    "line",
    "admin",
    "role",
    "going",
    "lock",
    "admin",
    "role",
    "three",
    "roles",
    "need",
    "fix",
    "right",
    "let",
    "go",
    "ahead",
    "fix",
    "first",
    "thing",
    "gon",
    "na",
    "need",
    "gon",
    "na",
    "need",
    "const",
    "row",
    "poser",
    "dx",
    "equals",
    "await",
    "time",
    "lock",
    "dot",
    "grant",
    "roll",
    "propose",
    "roll",
    "governor",
    "dot",
    "address",
    "saying",
    "okay",
    "governor",
    "one",
    "actually",
    "anything",
    "tell",
    "time",
    "lock",
    "something",
    "wait",
    "time",
    "lock",
    "period",
    "done",
    "await",
    "posit",
    "tx",
    "dot",
    "wait",
    "one",
    "block",
    "make",
    "sure",
    "gon",
    "na",
    "const",
    "executor",
    "tx",
    "equals",
    "await",
    "time",
    "lock",
    "dot",
    "grant",
    "roll",
    "executor",
    "role",
    "nobody",
    "going",
    "execute",
    "gon",
    "na",
    "give",
    "nobody",
    "going",
    "say",
    "address",
    "zero",
    "going",
    "something",
    "going",
    "want",
    "add",
    "go",
    "helper",
    "head",
    "config",
    "say",
    "export",
    "const",
    "address",
    "zero",
    "equals",
    "zero",
    "copy",
    "paste",
    "want",
    "couple",
    "ways",
    "ethers",
    "well",
    "gon",
    "na",
    "like",
    "like",
    "conflict",
    "import",
    "say",
    "import",
    "zero",
    "dot",
    "dot",
    "slash",
    "helper",
    "harnett",
    "config",
    "giving",
    "executor",
    "role",
    "nobody",
    "means",
    "everybody",
    "proposers",
    "thing",
    "gone",
    "anybody",
    "execute",
    "say",
    "executor",
    "tx",
    "wait",
    "one",
    "wait",
    "block",
    "got",
    "one",
    "need",
    "revoke",
    "role",
    "right",
    "deployer",
    "count",
    "owns",
    "time",
    "lock",
    "controller",
    "right",
    "actually",
    "transactions",
    "actually",
    "grant",
    "role",
    "deployer",
    "account",
    "owns",
    "given",
    "everybody",
    "access",
    "given",
    "decentralized",
    "access",
    "need",
    "want",
    "revoke",
    "role",
    "const",
    "revoke",
    "tx",
    "equals",
    "await",
    "locked",
    "revoke",
    "role",
    "admin",
    "role",
    "deployer",
    "rotex",
    "wait",
    "guess",
    "anything",
    "um",
    "like",
    "wants",
    "go",
    "governance",
    "nobody",
    "owns",
    "time",
    "controller",
    "currently",
    "runs",
    "impossible",
    "anyone",
    "anything",
    "time",
    "lock",
    "without",
    "governance",
    "happening",
    "course",
    "export",
    "default",
    "set",
    "contracts",
    "great",
    "last",
    "step",
    "need",
    "need",
    "deploy",
    "contract",
    "actually",
    "want",
    "govern",
    "write",
    "box",
    "contract",
    "real",
    "basic",
    "contract",
    "gon",
    "na",
    "create",
    "new",
    "105",
    "deploy",
    "gon",
    "na",
    "exact",
    "stuff",
    "done",
    "right",
    "gon",
    "na",
    "grab",
    "two",
    "two",
    "paste",
    "os",
    "deploy",
    "box",
    "going",
    "deploy",
    "function",
    "equals",
    "async",
    "function",
    "ah",
    "sorry",
    "hard",
    "hat",
    "runtime",
    "environment",
    "gon",
    "na",
    "grab",
    "first",
    "three",
    "lines",
    "ts",
    "ignore",
    "like",
    "going",
    "deploy",
    "box",
    "log",
    "deploying",
    "bucks",
    "going",
    "const",
    "box",
    "equals",
    "await",
    "deploy",
    "box",
    "give",
    "us",
    "values",
    "deployer",
    "args",
    "args",
    "open",
    "box",
    "dot",
    "soul",
    "see",
    "constructor",
    "easiest",
    "contract",
    "though",
    "constructor",
    "say",
    "log",
    "going",
    "true",
    "want",
    "check",
    "github",
    "repo",
    "confirmations",
    "feel",
    "free",
    "coming",
    "right",
    "deployer",
    "actually",
    "deployed",
    "right",
    "time",
    "lock",
    "want",
    "give",
    "boxes",
    "ownership",
    "governance",
    "process",
    "going",
    "say",
    "const",
    "timelock",
    "going",
    "weight",
    "ethers",
    "dot",
    "get",
    "contract",
    "thing",
    "timelock",
    "going",
    "grab",
    "ethers",
    "hardhat",
    "import",
    "ethers",
    "hard",
    "hat",
    "gon",
    "na",
    "little",
    "tls",
    "ignore",
    "finicky",
    "going",
    "transfer",
    "ownership",
    "box",
    "time",
    "lock",
    "okay",
    "actually",
    "known",
    "box",
    "deployment",
    "get",
    "box",
    "contract",
    "box",
    "deployment",
    "object",
    "contract",
    "functions",
    "want",
    "get",
    "box",
    "contract",
    "object",
    "box",
    "const",
    "box",
    "contract",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "box",
    "know",
    "box",
    "address",
    "could",
    "also",
    "get",
    "contract",
    "actually",
    "pretty",
    "much",
    "address",
    "box",
    "address",
    "could",
    "also",
    "get",
    "contract",
    "either",
    "one",
    "works",
    "box",
    "contract",
    "const",
    "transfer",
    "owner",
    "dx",
    "equals",
    "await",
    "contract",
    "dot",
    "transfer",
    "tx",
    "schema",
    "dot",
    "transfer",
    "ownership",
    "timelock",
    "dot",
    "address",
    "time",
    "walk",
    "dot",
    "address",
    "weight",
    "transfer",
    "ownership",
    "tx",
    "dot",
    "weight",
    "one",
    "log",
    "done",
    "export",
    "default",
    "deploy",
    "box",
    "oh",
    "let",
    "see",
    "works",
    "everything",
    "deploying",
    "gov",
    "token",
    "deploying",
    "timelock",
    "owns",
    "governance",
    "process",
    "deployed",
    "governance",
    "process",
    "setting",
    "governance",
    "process",
    "totally",
    "decentralized",
    "deployed",
    "set",
    "box",
    "updated",
    "governance",
    "process",
    "let",
    "see",
    "works",
    "yarn",
    "hard",
    "hat",
    "deploy",
    "let",
    "see",
    "works",
    "bada",
    "boom",
    "done",
    "set",
    "script",
    "set",
    "entire",
    "governance",
    "process",
    "build",
    "doubt",
    "still",
    "well",
    "hell",
    "yeah",
    "congratulations",
    "getting",
    "far",
    "one",
    "piece",
    "go",
    "got",
    "write",
    "scripts",
    "actually",
    "interact",
    "actually",
    "governance",
    "actually",
    "see",
    "exactly",
    "governance",
    "process",
    "looks",
    "like",
    "watch",
    "last",
    "video",
    "dows",
    "sure",
    "watch",
    "going",
    "give",
    "context",
    "part",
    "still",
    "watching",
    "100",
    "smash",
    "like",
    "button",
    "hit",
    "subscribe",
    "leave",
    "comment",
    "comment",
    "section",
    "really",
    "helps",
    "channel",
    "proud",
    "getting",
    "far",
    "almost",
    "getting",
    "one",
    "go",
    "home",
    "free",
    "building",
    "doubt",
    "let",
    "get",
    "back",
    "alright",
    "going",
    "make",
    "scripts",
    "actually",
    "interact",
    "propose",
    "q",
    "vote",
    "anything",
    "happens",
    "dao",
    "scripts",
    "kind",
    "things",
    "would",
    "front",
    "end",
    "build",
    "build",
    "doubt",
    "front",
    "end",
    "could",
    "integration",
    "snapshot",
    "tally",
    "something",
    "like",
    "want",
    "see",
    "come",
    "full",
    "functionality",
    "github",
    "test",
    "greatest",
    "test",
    "also",
    "check",
    "also",
    "soup",
    "nuts",
    "demonstration",
    "going",
    "exact",
    "process",
    "let",
    "go",
    "ahead",
    "start",
    "making",
    "scripts",
    "gon",
    "na",
    "create",
    "new",
    "folder",
    "called",
    "scripts",
    "going",
    "put",
    "scripts",
    "process",
    "going",
    "first",
    "going",
    "propose",
    "something",
    "right",
    "know",
    "maybe",
    "going",
    "propose",
    "box",
    "contract",
    "stores",
    "value",
    "77",
    "right",
    "first",
    "gets",
    "initialized",
    "going",
    "start",
    "zero",
    "maybe",
    "propose",
    "could",
    "start",
    "proposing",
    "done",
    "voting",
    "right",
    "proposals",
    "going",
    "vote",
    "whether",
    "want",
    "proposal",
    "go",
    "right",
    "yes",
    "passes",
    "go",
    "queue",
    "execute",
    "queue",
    "first",
    "execute",
    "putting",
    "script",
    "make",
    "easier",
    "let",
    "start",
    "propose",
    "going",
    "first",
    "thing",
    "going",
    "let",
    "create",
    "new",
    "function",
    "call",
    "async",
    "function",
    "actually",
    "export",
    "export",
    "async",
    "function",
    "propose",
    "going",
    "little",
    "bit",
    "let",
    "clear",
    "everything",
    "okay",
    "cool",
    "actually",
    "going",
    "propose",
    "governor",
    "contract",
    "right",
    "going",
    "propose",
    "new",
    "governor",
    "contract",
    "first",
    "thing",
    "gon",
    "na",
    "need",
    "course",
    "gon",
    "na",
    "governor",
    "ca",
    "govern",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "govern",
    "contract",
    "right",
    "since",
    "ethers",
    "gon",
    "na",
    "import",
    "ethers",
    "heart",
    "app",
    "still",
    "getting",
    "fundamental",
    "thing",
    "little",
    "ts",
    "ignore",
    "cool",
    "governor",
    "contract",
    "going",
    "need",
    "box",
    "contract",
    "gon",
    "na",
    "say",
    "hey",
    "want",
    "propose",
    "box",
    "contract",
    "changes",
    "store",
    "value",
    "const",
    "box",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "gift",
    "contract",
    "want",
    "get",
    "contract",
    "get",
    "contracts",
    "box",
    "two",
    "main",
    "ones",
    "going",
    "need",
    "start",
    "look",
    "proposed",
    "function",
    "right",
    "go",
    "governance",
    "go",
    "governor",
    "look",
    "proposed",
    "looks",
    "like",
    "explained",
    "proposed",
    "function",
    "last",
    "video",
    "seen",
    "sure",
    "go",
    "back",
    "watch",
    "right",
    "give",
    "everything",
    "need",
    "know",
    "basically",
    "pick",
    "list",
    "targets",
    "list",
    "going",
    "box",
    "contract",
    "targets",
    "want",
    "call",
    "functions",
    "values",
    "like",
    "much",
    "needed",
    "ether",
    "want",
    "send",
    "going",
    "send",
    "anything",
    "bytes",
    "array",
    "called",
    "data",
    "going",
    "encoded",
    "parameters",
    "function",
    "want",
    "call",
    "description",
    "exactly",
    "going",
    "first",
    "need",
    "figure",
    "going",
    "look",
    "box",
    "going",
    "call",
    "store",
    "function",
    "new",
    "value",
    "need",
    "encode",
    "need",
    "encode",
    "socks",
    "also",
    "need",
    "encode",
    "want",
    "upgrade",
    "right",
    "code",
    "function",
    "parameters",
    "const",
    "encoded",
    "function",
    "call",
    "equals",
    "box",
    "way",
    "get",
    "box",
    "interface",
    "encode",
    "function",
    "data",
    "actually",
    "turns",
    "bytes",
    "call",
    "data",
    "right",
    "encoding",
    "everything",
    "encoded",
    "function",
    "find",
    "ethers",
    "documentation",
    "pass",
    "function",
    "call",
    "arguments",
    "want",
    "pass",
    "right",
    "actually",
    "get",
    "let",
    "get",
    "arguments",
    "gon",
    "na",
    "say",
    "args",
    "going",
    "make",
    "proposed",
    "function",
    "little",
    "bit",
    "modular",
    "gon",
    "na",
    "say",
    "args",
    "going",
    "array",
    "anything",
    "gon",
    "na",
    "say",
    "function",
    "call",
    "going",
    "string",
    "right",
    "right",
    "bottom",
    "actually",
    "gon",
    "na",
    "call",
    "proposed",
    "function",
    "gon",
    "na",
    "say",
    "propose",
    "let",
    "say",
    "want",
    "give",
    "77",
    "function",
    "going",
    "going",
    "store",
    "store",
    "string",
    "needs",
    "list",
    "going",
    "like",
    "actually",
    "going",
    "use",
    "place",
    "since",
    "gon",
    "na",
    "using",
    "place",
    "want",
    "stick",
    "part",
    "head",
    "helper",
    "config",
    "going",
    "gon",
    "na",
    "say",
    "export",
    "const",
    "new",
    "store",
    "value",
    "equals",
    "gon",
    "na",
    "export",
    "const",
    "funk",
    "equals",
    "store",
    "propose",
    "going",
    "import",
    "import",
    "new",
    "store",
    "value",
    "also",
    "funk",
    "helper",
    "hardhead",
    "dot",
    "config",
    "added",
    "us",
    "great",
    "put",
    "new",
    "store",
    "value",
    "put",
    "funk",
    "know",
    "might",
    "look",
    "little",
    "confusing",
    "basically",
    "first",
    "thing",
    "gon",
    "na",
    "gon",
    "na",
    "call",
    "proposed",
    "function",
    "calls",
    "know",
    "post",
    "function",
    "going",
    "fun",
    "little",
    "process",
    "exit",
    "zero",
    "going",
    "dot",
    "catch",
    "error",
    "error",
    "basically",
    "console",
    "dot",
    "log",
    "error",
    "process",
    "makes",
    "pretty",
    "typical",
    "setup",
    "really",
    "script",
    "work",
    "hardhat",
    "great",
    "constant",
    "coded",
    "function",
    "call",
    "function",
    "call",
    "arc",
    "basically",
    "combining",
    "bytes",
    "thing",
    "even",
    "print",
    "see",
    "looks",
    "like",
    "console",
    "dot",
    "log",
    "see",
    "like",
    "crazy",
    "bytes",
    "thing",
    "way",
    "kind",
    "test",
    "yarn",
    "hardhat",
    "node",
    "spin",
    "fake",
    "blockchain",
    "additionally",
    "hardhead",
    "deploy",
    "deploy",
    "contracts",
    "right",
    "see",
    "timelog",
    "governance",
    "know",
    "everything",
    "need",
    "testing",
    "locally",
    "already",
    "done",
    "yarn",
    "hardhat",
    "run",
    "scripts",
    "propose",
    "ts",
    "dash",
    "dash",
    "network",
    "local",
    "host",
    "important",
    "working",
    "node",
    "running",
    "locally",
    "going",
    "working",
    "local",
    "host",
    "see",
    "prints",
    "contract",
    "named",
    "governor",
    "contracts",
    "governor",
    "contract",
    "let",
    "try",
    "cool",
    "see",
    "encoded",
    "function",
    "call",
    "arguments",
    "looks",
    "like",
    "really",
    "long",
    "byte",
    "string",
    "decode",
    "using",
    "box",
    "interface",
    "would",
    "get",
    "function",
    "call",
    "arguments",
    "really",
    "exciting",
    "cool",
    "encoded",
    "bytes",
    "want",
    "encourage",
    "bytes",
    "going",
    "create",
    "proposal",
    "transaction",
    "console",
    "dot",
    "log",
    "say",
    "pro",
    "posing",
    "say",
    "function",
    "call",
    "box",
    "address",
    "args",
    "also",
    "need",
    "pass",
    "proposal",
    "description",
    "gon",
    "na",
    "say",
    "pro",
    "pose",
    "description",
    "would",
    "new",
    "line",
    "pro",
    "pulls",
    "option",
    "yet",
    "alright",
    "gon",
    "na",
    "get",
    "also",
    "need",
    "pass",
    "proposal",
    "description",
    "right",
    "description",
    "let",
    "add",
    "another",
    "parameter",
    "propose",
    "say",
    "proposal",
    "description",
    "also",
    "string",
    "bottom",
    "going",
    "need",
    "proposal",
    "description",
    "well",
    "create",
    "proposal",
    "export",
    "const",
    "proposal",
    "description",
    "going",
    "string",
    "say",
    "proposal",
    "number",
    "one",
    "door",
    "77",
    "box",
    "description",
    "comma",
    "proposal",
    "description",
    "import",
    "helper",
    "config",
    "okay",
    "perfect",
    "new",
    "store",
    "value",
    "function",
    "proposal",
    "description",
    "call",
    "propose",
    "looking",
    "going",
    "const",
    "propose",
    "tx",
    "equals",
    "await",
    "gov",
    "dot",
    "propose",
    "need",
    "pass",
    "lists",
    "first",
    "going",
    "list",
    "targets",
    "us",
    "box",
    "address",
    "right",
    "one",
    "target",
    "little",
    "brackets",
    "make",
    "list",
    "values",
    "going",
    "zero",
    "list",
    "encoded",
    "function",
    "calls",
    "bytes",
    "data",
    "basically",
    "proposal",
    "description",
    "going",
    "propose",
    "tx",
    "dot",
    "wait",
    "one",
    "remember",
    "compound",
    "going",
    "exact",
    "go",
    "back",
    "compound",
    "back",
    "governance",
    "transaction",
    "literally",
    "going",
    "created",
    "thing",
    "right",
    "scroll",
    "like",
    "see",
    "code",
    "input",
    "data",
    "exact",
    "things",
    "compound",
    "proposal",
    "right",
    "targets",
    "values",
    "signatures",
    "well",
    "okay",
    "ces",
    "little",
    "bit",
    "little",
    "bit",
    "advanced",
    "using",
    "signatures",
    "got",
    "thing",
    "called",
    "data",
    "description",
    "okay",
    "since",
    "voting",
    "delay",
    "people",
    "actually",
    "ca",
    "vote",
    "voting",
    "delay",
    "passes",
    "local",
    "blockchain",
    "nobody",
    "actually",
    "processing",
    "blocks",
    "time",
    "really",
    "pass",
    "quick",
    "want",
    "going",
    "speed",
    "things",
    "testing",
    "purposes",
    "way",
    "normally",
    "create",
    "variable",
    "development",
    "exports",
    "development",
    "chains",
    "add",
    "hard",
    "hat",
    "local",
    "host",
    "actually",
    "things",
    "local",
    "blockchain",
    "actually",
    "speed",
    "time",
    "speed",
    "blocks",
    "crazy",
    "stuff",
    "usually",
    "actually",
    "import",
    "quick",
    "say",
    "development",
    "chain",
    "let",
    "go",
    "ahead",
    "speed",
    "things",
    "us",
    "right",
    "say",
    "development",
    "chains",
    "includes",
    "network",
    "dot",
    "name",
    "import",
    "network",
    "ethers",
    "well",
    "talking",
    "super",
    "six",
    "skills",
    "gon",
    "na",
    "learn",
    "includes",
    "network",
    "dot",
    "name",
    "gon",
    "na",
    "go",
    "ahead",
    "move",
    "blocks",
    "forward",
    "right",
    "development",
    "chain",
    "ca",
    "actually",
    "move",
    "blocks",
    "actually",
    "create",
    "new",
    "folder",
    "called",
    "utilities",
    "folder",
    "utils",
    "create",
    "script",
    "called",
    "move",
    "going",
    "create",
    "little",
    "function",
    "called",
    "move",
    "blocks",
    "moves",
    "blocks",
    "us",
    "see",
    "going",
    "import",
    "network",
    "heart",
    "app",
    "want",
    "speed",
    "voting",
    "delay",
    "export",
    "async",
    "function",
    "call",
    "move",
    "blocks",
    "take",
    "amount",
    "number",
    "many",
    "blocks",
    "actually",
    "want",
    "move",
    "console",
    "dot",
    "log",
    "moving",
    "blocks",
    "say",
    "let",
    "index",
    "equals",
    "zero",
    "index",
    "less",
    "amount",
    "index",
    "plus",
    "plus",
    "going",
    "going",
    "weight",
    "network",
    "dap",
    "provider",
    "dot",
    "request",
    "request",
    "going",
    "request",
    "method",
    "evm",
    "mine",
    "basically",
    "mining",
    "local",
    "blockchain",
    "right",
    "find",
    "docks",
    "hard",
    "hat",
    "docks",
    "ethers",
    "docks",
    "couple",
    "different",
    "places",
    "find",
    "kind",
    "really",
    "cool",
    "hack",
    "use",
    "actually",
    "move",
    "blocks",
    "forward",
    "local",
    "chain",
    "obviously",
    "wo",
    "work",
    "actual",
    "chain",
    "actually",
    "mining",
    "local",
    "chains",
    "absolutely",
    "exported",
    "move",
    "blocks",
    "function",
    "actually",
    "gon",
    "na",
    "grab",
    "mark",
    "propose",
    "going",
    "import",
    "move",
    "box",
    "utils",
    "blocks",
    "going",
    "say",
    "development",
    "chain",
    "weight",
    "move",
    "blocks",
    "move",
    "blocks",
    "voting",
    "delay",
    "talking",
    "right",
    "need",
    "wait",
    "voting",
    "delay",
    "order",
    "move",
    "looks",
    "like",
    "auto",
    "import",
    "us",
    "helper",
    "hardware",
    "config",
    "told",
    "gon",
    "na",
    "use",
    "couple",
    "times",
    "gon",
    "na",
    "move",
    "blocks",
    "voting",
    "delay",
    "proposed",
    "transaction",
    "stuff",
    "actually",
    "want",
    "right",
    "one",
    "big",
    "things",
    "wants",
    "proposal",
    "id",
    "scroll",
    "event",
    "emits",
    "ends",
    "emitting",
    "proposal",
    "id",
    "actually",
    "need",
    "proposal",
    "id",
    "later",
    "actually",
    "go",
    "vote",
    "going",
    "actually",
    "going",
    "const",
    "propose",
    "receipt",
    "equals",
    "proposed",
    "text",
    "dot",
    "weight",
    "going",
    "get",
    "events",
    "proposed",
    "receipt",
    "gon",
    "na",
    "say",
    "const",
    "proposal",
    "id",
    "equals",
    "proposed",
    "receipt",
    "events",
    "zero",
    "event",
    "first",
    "event",
    "one",
    "care",
    "stop",
    "proposal",
    "id",
    "get",
    "proposal",
    "id",
    "omit",
    "also",
    "created",
    "event",
    "couple",
    "ways",
    "get",
    "proposals",
    "get",
    "events",
    "hardhat",
    "got",
    "video",
    "youtube",
    "want",
    "go",
    "check",
    "something",
    "else",
    "want",
    "maybe",
    "want",
    "see",
    "deadline",
    "snapshot",
    "go",
    "ahead",
    "check",
    "github",
    "kind",
    "see",
    "snapshot",
    "looks",
    "like",
    "deadline",
    "basically",
    "long",
    "vote",
    "know",
    "snapshot",
    "working",
    "different",
    "things",
    "gon",
    "na",
    "stick",
    "proposal",
    "id",
    "sure",
    "check",
    "github",
    "stuff",
    "want",
    "save",
    "proposal",
    "id",
    "want",
    "save",
    "somewhere",
    "scripts",
    "vote",
    "queue",
    "execute",
    "know",
    "proposal",
    "id",
    "going",
    "run",
    "going",
    "going",
    "create",
    "file",
    "called",
    "proposals",
    "dot",
    "json",
    "going",
    "store",
    "proposals",
    "gon",
    "na",
    "say",
    "pro",
    "poll",
    "souls",
    "dot",
    "json",
    "going",
    "proposals",
    "going",
    "going",
    "add",
    "helper",
    "hardhead",
    "config",
    "export",
    "const",
    "proposals",
    "file",
    "equals",
    "proposals",
    "dot",
    "json",
    "going",
    "import",
    "top",
    "well",
    "proposals",
    "file",
    "get",
    "proposal",
    "id",
    "going",
    "going",
    "read",
    "current",
    "proposals",
    "gon",
    "na",
    "say",
    "let",
    "proposals",
    "equals",
    "json",
    "dot",
    "parse",
    "gon",
    "na",
    "fs",
    "dot",
    "read",
    "file",
    "sync",
    "probe",
    "proposals",
    "file",
    "going",
    "pass",
    "utf",
    "eight",
    "fs",
    "yet",
    "going",
    "need",
    "import",
    "fs",
    "going",
    "yarn",
    "add",
    "fs",
    "like",
    "looking",
    "package",
    "dot",
    "json",
    "oops",
    "saved",
    "dev",
    "oh",
    "well",
    "really",
    "matter",
    "actually",
    "import",
    "typescript",
    "going",
    "say",
    "import",
    "star",
    "fs",
    "fs",
    "actually",
    "use",
    "fs",
    "f",
    "way",
    "kind",
    "read",
    "files",
    "get",
    "list",
    "proposals",
    "got",
    "two",
    "proposals",
    "json",
    "right",
    "making",
    "blank",
    "json",
    "first",
    "time",
    "run",
    "blank",
    "later",
    "stuff",
    "way",
    "going",
    "save",
    "proposals",
    "going",
    "say",
    "pro",
    "proposals",
    "network",
    "dot",
    "config",
    "dot",
    "chain",
    "id",
    "little",
    "bank",
    "say",
    "yes",
    "chain",
    "string",
    "going",
    "store",
    "chain",
    "ids",
    "right",
    "network",
    "proposal",
    "start",
    "like",
    "dot",
    "push",
    "proposal",
    "string",
    "write",
    "back",
    "fs",
    "dot",
    "right",
    "file",
    "sync",
    "proposals",
    "file",
    "json",
    "string",
    "phi",
    "proposals",
    "awesome",
    "need",
    "let",
    "go",
    "ahead",
    "actually",
    "run",
    "console",
    "dot",
    "logs",
    "saying",
    "hey",
    "proposal",
    "state",
    "open",
    "voting",
    "canceled",
    "know",
    "etc",
    "proposal",
    "snapshot",
    "know",
    "check",
    "github",
    "done",
    "yarn",
    "hardhead",
    "node",
    "spin",
    "little",
    "note",
    "contracts",
    "deployed",
    "yarn",
    "run",
    "scripts",
    "proposed",
    "ts",
    "dash",
    "dash",
    "network",
    "local",
    "host",
    "scripts",
    "proposed",
    "ts",
    "found",
    "pro",
    "pose",
    "yarn",
    "hard",
    "hat",
    "run",
    "scripts",
    "pose",
    "ids",
    "oops",
    "dash",
    "dash",
    "network",
    "local",
    "hosts",
    "try",
    "found",
    "yay",
    "oh",
    "ran",
    "issue",
    "although",
    "description",
    "moviebox",
    "read",
    "property",
    "zero",
    "undefined",
    "let",
    "see",
    "got",
    "mad",
    "poser",
    "sheet",
    "dot",
    "event",
    "events",
    "event",
    "shots",
    "localhost",
    "go",
    "running",
    "ran",
    "another",
    "issue",
    "posle",
    "already",
    "exists",
    "okay",
    "great",
    "proposal",
    "already",
    "exists",
    "let",
    "go",
    "ahead",
    "like",
    "kill",
    "node",
    "restart",
    "node",
    "ca",
    "two",
    "proposals",
    "exactly",
    "basically",
    "right",
    "ca",
    "would",
    "need",
    "change",
    "description",
    "something",
    "going",
    "kill",
    "node",
    "restart",
    "going",
    "run",
    "proposal",
    "hopefully",
    "one",
    "work",
    "time",
    "community",
    "property",
    "zero",
    "undefined",
    "owes",
    "receipt",
    "needs",
    "await",
    "promise",
    "kill",
    "one",
    "time",
    "run",
    "get",
    "deployed",
    "gon",
    "na",
    "go",
    "ahead",
    "run",
    "see",
    "much",
    "quicker",
    "actually",
    "send",
    "test",
    "net",
    "right",
    "event",
    "lot",
    "waiting",
    "bueno",
    "run",
    "one",
    "read",
    "property",
    "push",
    "undefined",
    "makes",
    "lot",
    "sense",
    "proposals",
    "dot",
    "json",
    "nothing",
    "chain",
    "ids",
    "put",
    "little",
    "list",
    "right",
    "empty",
    "list",
    "going",
    "kill",
    "one",
    "time",
    "kill",
    "goes",
    "gon",
    "na",
    "go",
    "ahead",
    "perfect",
    "going",
    "run",
    "save",
    "everything",
    "peachy",
    "hunky",
    "dory",
    "awesome",
    "proposal",
    "number",
    "one",
    "store",
    "box",
    "move",
    "blocks",
    "look",
    "proposal",
    "dot",
    "json",
    "see",
    "list",
    "proposals",
    "proposal",
    "id",
    "one",
    "created",
    "oh",
    "okay",
    "made",
    "proposal",
    "awesome",
    "nice",
    "work",
    "leave",
    "node",
    "running",
    "hopefully",
    "things",
    "right",
    "voting",
    "let",
    "create",
    "vote",
    "script",
    "okay",
    "proposed",
    "time",
    "vote",
    "let",
    "little",
    "voting",
    "going",
    "look",
    "pretty",
    "similar",
    "script",
    "created",
    "right",
    "new",
    "async",
    "function",
    "call",
    "main",
    "proposal",
    "index",
    "number",
    "calling",
    "main",
    "going",
    "vote",
    "function",
    "little",
    "bit",
    "different",
    "see",
    "bottom",
    "course",
    "going",
    "main",
    "index",
    "dot",
    "process",
    "dot",
    "exit",
    "zero",
    "catch",
    "error",
    "arrow",
    "function",
    "console",
    "dot",
    "error",
    "error",
    "process",
    "exit",
    "one",
    "main",
    "index",
    "gon",
    "na",
    "say",
    "index",
    "zero",
    "cost",
    "index",
    "zero",
    "like",
    "cost",
    "index",
    "postal",
    "index",
    "gon",
    "na",
    "get",
    "gon",
    "na",
    "get",
    "bit",
    "zero",
    "index",
    "right",
    "first",
    "index",
    "proposals",
    "dot",
    "json",
    "whatever",
    "first",
    "one",
    "list",
    "gon",
    "na",
    "use",
    "right",
    "want",
    "right",
    "one",
    "easy",
    "gon",
    "na",
    "get",
    "first",
    "one",
    "first",
    "thing",
    "gon",
    "na",
    "need",
    "gon",
    "na",
    "need",
    "grab",
    "list",
    "proposals",
    "gon",
    "na",
    "const",
    "proposals",
    "equals",
    "json",
    "dot",
    "parse",
    "fs",
    "dot",
    "read",
    "file",
    "sync",
    "proposals",
    "file",
    "utf",
    "eight",
    "course",
    "going",
    "need",
    "import",
    "bunch",
    "stuff",
    "going",
    "import",
    "proposals",
    "file",
    "slash",
    "bernhard",
    "config",
    "going",
    "import",
    "star",
    "fs",
    "us",
    "great",
    "fs",
    "read",
    "stuff",
    "get",
    "boats",
    "okay",
    "cool",
    "list",
    "proposal",
    "ids",
    "let",
    "get",
    "proposal",
    "idea",
    "const",
    "probo",
    "also",
    "id",
    "equals",
    "proposals",
    "network",
    "dot",
    "config",
    "want",
    "want",
    "actually",
    "import",
    "network",
    "import",
    "network",
    "hard",
    "hat",
    "network",
    "dot",
    "config",
    "chain",
    "id",
    "exclamation",
    "mark",
    "proposal",
    "index",
    "us",
    "going",
    "zero",
    "right",
    "getting",
    "first",
    "proposal",
    "list",
    "proposals",
    "gon",
    "na",
    "choose",
    "want",
    "vote",
    "zero",
    "equals",
    "one",
    "equals",
    "four",
    "two",
    "abstain",
    "know",
    "ever",
    "abstain",
    "abstaining",
    "costs",
    "gas",
    "could",
    "vote",
    "gon",
    "na",
    "say",
    "const",
    "vote",
    "way",
    "way",
    "gon",
    "na",
    "vote",
    "equals",
    "one",
    "also",
    "reason",
    "go",
    "back",
    "governor",
    "couple",
    "different",
    "functions",
    "get",
    "vote",
    "cast",
    "vote",
    "cast",
    "vote",
    "cast",
    "vote",
    "reason",
    "cast",
    "vote",
    "signature",
    "actually",
    "signature",
    "asked",
    "question",
    "hey",
    "cast",
    "vote",
    "sick",
    "opens",
    "forum",
    "like",
    "hey",
    "purpose",
    "hunch",
    "anyone",
    "could",
    "execute",
    "vote",
    "behalf",
    "send",
    "transaction",
    "exactly",
    "method",
    "implements",
    "meta",
    "transaction",
    "allows",
    "project",
    "subsidize",
    "voting",
    "fees",
    "voters",
    "generate",
    "signature",
    "free",
    "project",
    "submit",
    "pay",
    "gas",
    "incredibly",
    "powerful",
    "function",
    "allows",
    "cast",
    "vote",
    "signature",
    "allows",
    "snapshot",
    "chain",
    "link",
    "integration",
    "know",
    "hopefully",
    "one",
    "build",
    "us",
    "since",
    "implementing",
    "meta",
    "transactions",
    "chain",
    "stuff",
    "going",
    "cast",
    "vote",
    "reason",
    "want",
    "give",
    "reason",
    "really",
    "gon",
    "na",
    "say",
    "const",
    "boat",
    "tx",
    "response",
    "equals",
    "await",
    "gov",
    "dot",
    "cast",
    "excuse",
    "need",
    "get",
    "government",
    "contract",
    "const",
    "gov",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "gov",
    "contract",
    "ethers",
    "get",
    "ethers",
    "great",
    "let",
    "get",
    "ethers",
    "ignore",
    "contract",
    "weight",
    "gov",
    "dot",
    "cast",
    "vote",
    "reason",
    "spell",
    "right",
    "reason",
    "say",
    "proposal",
    "id",
    "way",
    "reason",
    "reason",
    "let",
    "make",
    "reason",
    "let",
    "say",
    "reason",
    "reason",
    "equals",
    "like",
    "cha",
    "cha",
    "know",
    "film",
    "definitely",
    "comment",
    "description",
    "reason",
    "voting",
    "saying",
    "yes",
    "want",
    "indeed",
    "want",
    "change",
    "box",
    "reason",
    "like",
    "cha",
    "cha",
    "makes",
    "perfect",
    "sense",
    "think",
    "wait",
    "kotex",
    "response",
    "wait",
    "stuff",
    "checking",
    "state",
    "proposal",
    "different",
    "numbers",
    "mean",
    "hey",
    "process",
    "voting",
    "etc",
    "could",
    "check",
    "gon",
    "na",
    "skip",
    "going",
    "voted",
    "going",
    "ones",
    "vote",
    "going",
    "move",
    "blocks",
    "along",
    "want",
    "get",
    "end",
    "voting",
    "period",
    "gon",
    "na",
    "velopment",
    "chains",
    "includes",
    "network",
    "dot",
    "name",
    "gon",
    "na",
    "weight",
    "move",
    "blocks",
    "voting",
    "period",
    "plus",
    "one",
    "need",
    "import",
    "whole",
    "bunch",
    "stuff",
    "poses",
    "file",
    "development",
    "looks",
    "like",
    "got",
    "auto",
    "imported",
    "need",
    "import",
    "move",
    "blocks",
    "import",
    "move",
    "blocks",
    "utils",
    "blocks",
    "network",
    "need",
    "voting",
    "period",
    "helper",
    "config",
    "voting",
    "period",
    "okay",
    "cool",
    "console",
    "dot",
    "log",
    "voted",
    "ready",
    "go",
    "reason",
    "checked",
    "proposal",
    "state",
    "state",
    "function",
    "governor",
    "contract",
    "look",
    "state",
    "tells",
    "us",
    "state",
    "proposals",
    "right",
    "executed",
    "return",
    "executed",
    "canceled",
    "return",
    "canceled",
    "deadline",
    "check",
    "see",
    "active",
    "check",
    "see",
    "quorum",
    "reached",
    "stuff",
    "right",
    "usually",
    "looking",
    "worm",
    "reached",
    "vote",
    "succeeded",
    "right",
    "happen",
    "proposal",
    "state",
    "dot",
    "succeeded",
    "right",
    "otherwise",
    "defeated",
    "yet",
    "believe",
    "one",
    "zero",
    "call",
    "function",
    "get",
    "state",
    "right",
    "get",
    "zero",
    "excuse",
    "get",
    "one",
    "passed",
    "want",
    "little",
    "extra",
    "credit",
    "feel",
    "free",
    "let",
    "see",
    "right",
    "well",
    "actually",
    "guess",
    "got",
    "change",
    "vote",
    "wrapped",
    "everything",
    "main",
    "let",
    "see",
    "works",
    "yarn",
    "hard",
    "hat",
    "run",
    "scripts",
    "vote",
    "network",
    "local",
    "host",
    "get",
    "little",
    "console",
    "dot",
    "log",
    "bottom",
    "says",
    "voted",
    "ready",
    "go",
    "voting",
    "go",
    "arctic",
    "council",
    "could",
    "yarn",
    "hard",
    "hat",
    "console",
    "dash",
    "dash",
    "network",
    "local",
    "host",
    "actually",
    "check",
    "state",
    "right",
    "copy",
    "line",
    "governor",
    "either",
    "get",
    "contract",
    "governor",
    "contract",
    "wait",
    "governor",
    "state",
    "go",
    "proposals",
    "dot",
    "json",
    "grab",
    "paste",
    "get",
    "state",
    "right",
    "forget",
    "four",
    "means",
    "like",
    "proposal",
    "state",
    "proposal",
    "state",
    "actually",
    "eye",
    "governor",
    "interface",
    "governor",
    "see",
    "zero",
    "pending",
    "one",
    "active",
    "two",
    "cancelled",
    "three",
    "defeated",
    "four",
    "succeeded",
    "succeeded",
    "state",
    "really",
    "good",
    "exactly",
    "want",
    "let",
    "go",
    "ahead",
    "quit",
    "excuse",
    "ctrl",
    "c",
    "proposal",
    "succeeded",
    "state",
    "actually",
    "moved",
    "blocks",
    "along",
    "voting",
    "period",
    "voting",
    "cheated",
    "let",
    "go",
    "ahead",
    "queue",
    "execute",
    "last",
    "bit",
    "gon",
    "na",
    "look",
    "real",
    "similar",
    "done",
    "already",
    "right",
    "let",
    "minimize",
    "export",
    "async",
    "function",
    "q",
    "execute",
    "bottom",
    "call",
    "queue",
    "execute",
    "going",
    "copy",
    "paste",
    "syntax",
    "process",
    "exec",
    "catch",
    "blah",
    "blah",
    "blah",
    "get",
    "drill",
    "order",
    "queue",
    "execute",
    "go",
    "back",
    "governor",
    "contract",
    "governor",
    "let",
    "go",
    "governor",
    "first",
    "thing",
    "going",
    "call",
    "queue",
    "q",
    "function",
    "actually",
    "governor",
    "time",
    "lock",
    "extensions",
    "find",
    "governor",
    "time",
    "lock",
    "controller",
    "exactly",
    "propose",
    "take",
    "everything",
    "proposal",
    "queue",
    "like",
    "pass",
    "exact",
    "values",
    "cute",
    "going",
    "gon",
    "na",
    "need",
    "first",
    "get",
    "exact",
    "values",
    "told",
    "going",
    "use",
    "times",
    "going",
    "import",
    "bunk",
    "new",
    "store",
    "value",
    "proposal",
    "description",
    "article",
    "thing",
    "right",
    "stuff",
    "say",
    "const",
    "args",
    "equals",
    "new",
    "store",
    "value",
    "const",
    "box",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "let",
    "get",
    "box",
    "contract",
    "gon",
    "na",
    "import",
    "ethers",
    "hat",
    "going",
    "gon",
    "na",
    "ts",
    "ignore",
    "code",
    "function",
    "call",
    "const",
    "encoded",
    "function",
    "call",
    "equals",
    "boxtop",
    "interface",
    "encode",
    "function",
    "data",
    "gon",
    "na",
    "funk",
    "function",
    "want",
    "call",
    "args",
    "like",
    "real",
    "similar",
    "proposed",
    "bit",
    "gon",
    "na",
    "content",
    "description",
    "hash",
    "equals",
    "ethers",
    "dot",
    "utils",
    "get",
    "gac",
    "256",
    "ethers",
    "dot",
    "utils",
    "tf",
    "eight",
    "bytes",
    "make",
    "sense",
    "second",
    "also",
    "description",
    "propose",
    "pass",
    "proposal",
    "description",
    "however",
    "actually",
    "gets",
    "hashed",
    "chain",
    "view",
    "execute",
    "gon",
    "na",
    "looking",
    "gon",
    "na",
    "looking",
    "description",
    "hash",
    "instead",
    "pure",
    "description",
    "right",
    "gon",
    "na",
    "little",
    "bit",
    "cheaper",
    "gas",
    "wise",
    "good",
    "description",
    "hash",
    "functions",
    "suppose",
    "time",
    "queue",
    "cost",
    "gov",
    "equals",
    "await",
    "ethers",
    "dot",
    "get",
    "contract",
    "gov",
    "contract",
    "console",
    "dot",
    "log",
    "say",
    "queuing",
    "cos",
    "q",
    "dx",
    "equals",
    "gov",
    "dot",
    "going",
    "pass",
    "exact",
    "parameters",
    "pose",
    "except",
    "hash",
    "instead",
    "actual",
    "proposal",
    "box",
    "address",
    "zero",
    "eath",
    "pass",
    "code",
    "function",
    "call",
    "description",
    "hash",
    "rate",
    "going",
    "oops",
    "going",
    "weight",
    "gon",
    "na",
    "wait",
    "text",
    "oh",
    "wait",
    "one",
    "wait",
    "block",
    "great",
    "queued",
    "still",
    "wait",
    "minimum",
    "delay",
    "right",
    "remember",
    "timeline",
    "got",
    "min",
    "delay",
    "thing",
    "says",
    "hey",
    "something",
    "gets",
    "queued",
    "ca",
    "execute",
    "right",
    "away",
    "got",
    "ta",
    "give",
    "people",
    "time",
    "get",
    "going",
    "speed",
    "time",
    "going",
    "say",
    "development",
    "chains",
    "develop",
    "l",
    "meant",
    "chains",
    "includes",
    "looks",
    "like",
    "auto",
    "imported",
    "development",
    "chains",
    "yes",
    "amazing",
    "includes",
    "network",
    "dot",
    "name",
    "let",
    "make",
    "sure",
    "import",
    "network",
    "hardhead",
    "includes",
    "name",
    "course",
    "going",
    "move",
    "blocks",
    "also",
    "actually",
    "move",
    "time",
    "minimum",
    "delay",
    "looking",
    "time",
    "let",
    "create",
    "new",
    "util",
    "called",
    "move",
    "time",
    "okay",
    "move",
    "time",
    "yes",
    "util",
    "going",
    "allow",
    "us",
    "move",
    "time",
    "learning",
    "cool",
    "stuff",
    "quickly",
    "write",
    "script",
    "important",
    "network",
    "hard",
    "hat",
    "export",
    "async",
    "function",
    "move",
    "time",
    "much",
    "time",
    "number",
    "mount",
    "console",
    "dot",
    "log",
    "moving",
    "time",
    "let",
    "say",
    "await",
    "network",
    "dot",
    "provider",
    "dot",
    "send",
    "evm",
    "increase",
    "time",
    "amount",
    "say",
    "console",
    "dot",
    "log",
    "move",
    "forward",
    "amount",
    "seconds",
    "goes",
    "forward",
    "seconds",
    "cool",
    "move",
    "time",
    "function",
    "pretty",
    "quick",
    "right",
    "first",
    "going",
    "move",
    "time",
    "gon",
    "na",
    "move",
    "time",
    "min",
    "delay",
    "first",
    "plus",
    "one",
    "safe",
    "also",
    "going",
    "move",
    "blocks",
    "gon",
    "na",
    "weight",
    "move",
    "time",
    "weight",
    "move",
    "blocks",
    "move",
    "block",
    "got",
    "import",
    "move",
    "blocks",
    "utils",
    "imports",
    "move",
    "time",
    "utils",
    "well",
    "time",
    "also",
    "import",
    "min",
    "delay",
    "get",
    "helper",
    "hardhead",
    "config",
    "great",
    "moved",
    "stuff",
    "real",
    "chain",
    "wait",
    "since",
    "real",
    "chain",
    "whatever",
    "want",
    "yes",
    "love",
    "whatever",
    "want",
    "cued",
    "voters",
    "passed",
    "looking",
    "spicy",
    "let",
    "drive",
    "home",
    "xe",
    "cuting",
    "little",
    "console",
    "dot",
    "log",
    "executing",
    "const",
    "execute",
    "tx",
    "equals",
    "await",
    "gov",
    "dot",
    "execute",
    "going",
    "pass",
    "exact",
    "set",
    "things",
    "q",
    "tx",
    "literally",
    "gon",
    "na",
    "copy",
    "paste",
    "going",
    "weight",
    "sq",
    "tx",
    "dot",
    "weight",
    "going",
    "wait",
    "one",
    "block",
    "final",
    "hour",
    "see",
    "governance",
    "updated",
    "box",
    "contract",
    "const",
    "box",
    "new",
    "value",
    "equals",
    "await",
    "box",
    "dot",
    "retrieve",
    "console",
    "dot",
    "log",
    "new",
    "box",
    "value",
    "box",
    "new",
    "string",
    "oh",
    "right",
    "new",
    "box",
    "value",
    "updated",
    "let",
    "see",
    "right",
    "yarn",
    "hard",
    "hat",
    "run",
    "grips",
    "q",
    "execute",
    "work",
    "localhost",
    "right",
    "successfully",
    "done",
    "governance",
    "okay",
    "gon",
    "na",
    "figure",
    "wrong",
    "mean",
    "could",
    "check",
    "256",
    "spelt",
    "stuff",
    "wrong",
    "needs",
    "spelt",
    "like",
    "ck",
    "okay",
    "let",
    "try",
    "failed",
    "actually",
    "think",
    "good",
    "queuing",
    "moving",
    "time",
    "provider",
    "evm",
    "crit",
    "cuz",
    "spelt",
    "increased",
    "time",
    "wrong",
    "oh",
    "evm",
    "increase",
    "time",
    "double",
    "check",
    "make",
    "sure",
    "spelling",
    "right",
    "actually",
    "capital",
    "totally",
    "messed",
    "actually",
    "already",
    "queued",
    "queued",
    "right",
    "little",
    "node",
    "evm",
    "increased",
    "team",
    "either",
    "delete",
    "kind",
    "restart",
    "go",
    "ahead",
    "going",
    "comment",
    "bunch",
    "stuff",
    "going",
    "skip",
    "cueing",
    "gon",
    "na",
    "run",
    "one",
    "time",
    "already",
    "queued",
    "execute",
    "gon",
    "na",
    "move",
    "time",
    "fine",
    "oh",
    "goodness",
    "right",
    "normally",
    "would",
    "one",
    "script",
    "queue",
    "would",
    "fail",
    "already",
    "queued",
    "right",
    "ca",
    "queue",
    "twice",
    "move",
    "forward",
    "time",
    "move",
    "blocks",
    "executed",
    "got",
    "new",
    "box",
    "value",
    "completely",
    "using",
    "dow",
    "completely",
    "decentralized",
    "voting",
    "completely",
    "chain",
    "third",
    "party",
    "trust",
    "going",
    "voting",
    "booth",
    "know",
    "spending",
    "1000s",
    "dollars",
    "staff",
    "everything",
    "voted",
    "happened",
    "right",
    "front",
    "faces",
    "highly",
    "recommend",
    "go",
    "github",
    "repo",
    "take",
    "look",
    "see",
    "going",
    "want",
    "see",
    "javascript",
    "stuff",
    "feel",
    "free",
    "javascript",
    "stuff",
    "goes",
    "get",
    "clone",
    "get",
    "started",
    "want",
    "well",
    "walked",
    "walked",
    "learned",
    "absolute",
    "khan",
    "thank",
    "much",
    "see",
    "next",
    "time",
    "right",
    "welcome",
    "final",
    "section",
    "course",
    "security",
    "auditing",
    "section",
    "one",
    "going",
    "little",
    "bit",
    "less",
    "coding",
    "little",
    "bit",
    "explaining",
    "going",
    "learning",
    "hardhead",
    "security",
    "fcc",
    "section",
    "throughout",
    "course",
    "given",
    "couple",
    "tips",
    "different",
    "security",
    "features",
    "one",
    "talked",
    "reentrancy",
    "talked",
    "little",
    "bit",
    "oracle",
    "tax",
    "going",
    "talk",
    "tools",
    "use",
    "make",
    "code",
    "efficient",
    "look",
    "bugs",
    "make",
    "code",
    "secure",
    "gon",
    "na",
    "go",
    "ahead",
    "gon",
    "na",
    "go",
    "hard",
    "hat",
    "security",
    "fcc",
    "code",
    "base",
    "going",
    "walk",
    "little",
    "bit",
    "one",
    "first",
    "things",
    "going",
    "talk",
    "audit",
    "well",
    "audit",
    "going",
    "security",
    "focused",
    "code",
    "review",
    "looking",
    "issues",
    "code",
    "example",
    "let",
    "say",
    "code",
    "looks",
    "like",
    "little",
    "bit",
    "familiar",
    "talked",
    "one",
    "earlier",
    "sections",
    "reentrancy",
    "code",
    "withdraw",
    "goes",
    "sends",
    "ether",
    "updates",
    "balances",
    "code",
    "clearly",
    "vulnerable",
    "reentrancy",
    "attack",
    "something",
    "auditor",
    "would",
    "catch",
    "since",
    "deploy",
    "code",
    "code",
    "immutable",
    "code",
    "always",
    "really",
    "important",
    "security",
    "reviews",
    "done",
    "deploy",
    "code",
    "main",
    "net",
    "go",
    "live",
    "going",
    "deploy",
    "crazy",
    "massive",
    "defy",
    "protocol",
    "gon",
    "na",
    "billions",
    "dollars",
    "people",
    "money",
    "locked",
    "protocol",
    "probably",
    "want",
    "make",
    "sure",
    "money",
    "going",
    "go",
    "correct",
    "places",
    "audits",
    "incredibly",
    "important",
    "lifecycle",
    "projects",
    "want",
    "people",
    "peer",
    "review",
    "want",
    "people",
    "review",
    "code",
    "make",
    "sure",
    "everything",
    "looks",
    "good",
    "send",
    "code",
    "audit",
    "though",
    "say",
    "hey",
    "code",
    "check",
    "make",
    "sure",
    "good",
    "going",
    "give",
    "auditor",
    "enough",
    "information",
    "need",
    "able",
    "easily",
    "know",
    "code",
    "work",
    "looking",
    "auditors",
    "going",
    "kind",
    "failsafe",
    "code",
    "terrible",
    "going",
    "catch",
    "everything",
    "auditors",
    "human",
    "beings",
    "miss",
    "things",
    "well",
    "auditors",
    "also",
    "make",
    "sure",
    "code",
    "bug",
    "free",
    "like",
    "said",
    "audits",
    "security",
    "focused",
    "peer",
    "reviews",
    "codebase",
    "send",
    "code",
    "audit",
    "want",
    "make",
    "sure",
    "help",
    "auditors",
    "much",
    "possible",
    "amazing",
    "tweet",
    "thread",
    "tinto",
    "previously",
    "open",
    "zeplin",
    "auditor",
    "ton",
    "tips",
    "tricks",
    "working",
    "auditors",
    "highly",
    "recommend",
    "pause",
    "video",
    "click",
    "link",
    "read",
    "tweets",
    "fantastic",
    "openzeppelin",
    "readiness",
    "guide",
    "try",
    "help",
    "make",
    "sure",
    "even",
    "ready",
    "audit",
    "first",
    "place",
    "got",
    "link",
    "readiness",
    "guide",
    "github",
    "repository",
    "summary",
    "add",
    "comments",
    "code",
    "use",
    "natspec",
    "learned",
    "document",
    "functions",
    "document",
    "functions",
    "document",
    "functions",
    "test",
    "ready",
    "talk",
    "auditors",
    "prepared",
    "give",
    "plenty",
    "time",
    "literally",
    "pouring",
    "code",
    "weeks",
    "end",
    "make",
    "sure",
    "nothing",
    "wrong",
    "rush",
    "auditors",
    "gon",
    "na",
    "get",
    "rushed",
    "audit",
    "going",
    "miss",
    "things",
    "let",
    "talk",
    "auditing",
    "process",
    "auditing",
    "process",
    "going",
    "look",
    "like",
    "first",
    "going",
    "run",
    "tests",
    "first",
    "step",
    "order",
    "always",
    "going",
    "take",
    "right",
    "gon",
    "na",
    "find",
    "okay",
    "enough",
    "code",
    "coverage",
    "everything",
    "passing",
    "tests",
    "optimal",
    "functionality",
    "auditor",
    "runs",
    "tests",
    "going",
    "read",
    "specs",
    "run",
    "docs",
    "going",
    "run",
    "fast",
    "tools",
    "like",
    "slither",
    "linters",
    "static",
    "analysis",
    "going",
    "one",
    "first",
    "things",
    "going",
    "talk",
    "slither",
    "static",
    "analysis",
    "static",
    "analysis",
    "process",
    "running",
    "program",
    "read",
    "code",
    "look",
    "commonly",
    "known",
    "bugs",
    "one",
    "popular",
    "static",
    "analysis",
    "tools",
    "going",
    "tool",
    "called",
    "slither",
    "going",
    "one",
    "first",
    "things",
    "going",
    "let",
    "go",
    "ahead",
    "open",
    "vs",
    "code",
    "make",
    "new",
    "directory",
    "called",
    "hardhats",
    "security",
    "fcc",
    "cd",
    "code",
    "period",
    "open",
    "want",
    "instead",
    "starting",
    "new",
    "folder",
    "everything",
    "going",
    "get",
    "clone",
    "heart",
    "security",
    "fcc",
    "git",
    "clone",
    "net",
    "security",
    "fcc",
    "space",
    "put",
    "period",
    "clone",
    "directory",
    "get",
    "everything",
    "like",
    "comes",
    "couple",
    "different",
    "contracts",
    "us",
    "already",
    "different",
    "vulnerability",
    "one",
    "going",
    "bad",
    "rng",
    "contract",
    "picks",
    "random",
    "winner",
    "raffle",
    "using",
    "block",
    "difficulty",
    "message",
    "dot",
    "sender",
    "truly",
    "random",
    "miners",
    "influence",
    "block",
    "dot",
    "difficulty",
    "people",
    "cancel",
    "transactions",
    "ton",
    "ton",
    "different",
    "vulnerabilities",
    "creating",
    "randomness",
    "way",
    "also",
    "liquid",
    "pool",
    "oracle",
    "two",
    "common",
    "types",
    "attacks",
    "reentrancy",
    "learned",
    "oracle",
    "manipulation",
    "attacks",
    "luckily",
    "taught",
    "decentralized",
    "oracle",
    "working",
    "chain",
    "link",
    "make",
    "lot",
    "safer",
    "especially",
    "section",
    "going",
    "harp",
    "please",
    "please",
    "please",
    "taking",
    "course",
    "please",
    "make",
    "protocol",
    "falls",
    "victim",
    "one",
    "feel",
    "like",
    "failed",
    "build",
    "protocol",
    "use",
    "centralized",
    "oracle",
    "gets",
    "manipulated",
    "build",
    "protocol",
    "reentrancy",
    "attack",
    "tools",
    "going",
    "show",
    "right",
    "going",
    "help",
    "reentrancy",
    "everything",
    "taught",
    "chain",
    "link",
    "hopefully",
    "teach",
    "get",
    "oracle",
    "manipulated",
    "contract",
    "using",
    "liquidity",
    "pool",
    "oracle",
    "kind",
    "advanced",
    "defy",
    "stuff",
    "minimalistic",
    "decentralized",
    "exchange",
    "example",
    "people",
    "buy",
    "sell",
    "swap",
    "different",
    "assets",
    "using",
    "singular",
    "exchange",
    "get",
    "swap",
    "price",
    "terrible",
    "idea",
    "single",
    "protocol",
    "single",
    "price",
    "price",
    "protocol",
    "single",
    "centralized",
    "location",
    "want",
    "get",
    "price",
    "single",
    "centralized",
    "exchange",
    "want",
    "get",
    "many",
    "exchanges",
    "getting",
    "price",
    "asset",
    "single",
    "decentralized",
    "exchange",
    "decentralized",
    "somebody",
    "manipulates",
    "market",
    "crazy",
    "advanced",
    "defy",
    "things",
    "ruin",
    "price",
    "assets",
    "getting",
    "price",
    "assets",
    "centralized",
    "location",
    "terrible",
    "idea",
    "metamorphic",
    "proxy",
    "issue",
    "initialized",
    "double",
    "guarantee",
    "contract",
    "initialized",
    "classic",
    "reentrancy",
    "issue",
    "vault",
    "password",
    "stored",
    "chain",
    "crossing",
    "fingers",
    "nobody",
    "reads",
    "password",
    "unlock",
    "going",
    "run",
    "static",
    "analysis",
    "contracts",
    "see",
    "static",
    "analysis",
    "spot",
    "bad",
    "things",
    "get",
    "started",
    "going",
    "use",
    "tool",
    "like",
    "said",
    "called",
    "slither",
    "slither",
    "tool",
    "created",
    "crytek",
    "team",
    "aka",
    "trilobites",
    "team",
    "trilobites",
    "one",
    "absolute",
    "favorite",
    "auditors",
    "space",
    "absolutely",
    "love",
    "tools",
    "team",
    "puts",
    "put",
    "open",
    "source",
    "security",
    "tools",
    "us",
    "use",
    "slitter",
    "get",
    "started",
    "slither",
    "actually",
    "need",
    "install",
    "python",
    "first",
    "also",
    "run",
    "docker",
    "going",
    "show",
    "work",
    "python",
    "first",
    "worked",
    "python",
    "come",
    "download",
    "python",
    "right",
    "website",
    "know",
    "done",
    "right",
    "run",
    "python",
    "three",
    "dash",
    "dash",
    "version",
    "like",
    "older",
    "version",
    "python",
    "run",
    "python",
    "dash",
    "dash",
    "version",
    "install",
    "python",
    "also",
    "tool",
    "called",
    "pip",
    "three",
    "installed",
    "check",
    "running",
    "pip",
    "three",
    "dash",
    "dash",
    "version",
    "pip",
    "dash",
    "dash",
    "version",
    "also",
    "want",
    "install",
    "sock",
    "select",
    "package",
    "case",
    "using",
    "weird",
    "versions",
    "solidity",
    "install",
    "select",
    "run",
    "pip",
    "three",
    "install",
    "sock",
    "select",
    "like",
    "sock",
    "select",
    "use",
    "choose",
    "version",
    "solidity",
    "slither",
    "work",
    "tools",
    "run",
    "pip",
    "three",
    "install",
    "slither",
    "analyzer",
    "like",
    "install",
    "slither",
    "python",
    "environment",
    "going",
    "run",
    "already",
    "also",
    "learn",
    "docker",
    "learn",
    "docker",
    "little",
    "bit",
    "package",
    "json",
    "actually",
    "command",
    "script",
    "package",
    "json",
    "running",
    "slither",
    "know",
    "installed",
    "slither",
    "correctly",
    "run",
    "slither",
    "dash",
    "dash",
    "help",
    "get",
    "output",
    "like",
    "use",
    "slither",
    "run",
    "contracts",
    "folder",
    "running",
    "big",
    "command",
    "say",
    "slither",
    "want",
    "run",
    "dot",
    "slash",
    "contracts",
    "need",
    "tell",
    "psaltery",
    "mappings",
    "every",
    "time",
    "sees",
    "open",
    "zeppelin",
    "use",
    "node",
    "module",
    "slash",
    "open",
    "zeppelin",
    "every",
    "time",
    "sees",
    "chain",
    "link",
    "introduced",
    "node",
    "modules",
    "slash",
    "chain",
    "link",
    "going",
    "read",
    "package",
    "json",
    "excluding",
    "couple",
    "functions",
    "runs",
    "excluding",
    "builder",
    "ignore",
    "worry",
    "much",
    "actually",
    "run",
    "first",
    "running",
    "yarn",
    "install",
    "packages",
    "installed",
    "packages",
    "run",
    "yarn",
    "slither",
    "copy",
    "paste",
    "slither",
    "command",
    "run",
    "directly",
    "get",
    "massive",
    "output",
    "looks",
    "like",
    "red",
    "green",
    "let",
    "go",
    "actually",
    "happening",
    "way",
    "read",
    "slither",
    "list",
    "number",
    "lines",
    "issue",
    "reference",
    "issue",
    "one",
    "separated",
    "new",
    "line",
    "section",
    "exception",
    "etc",
    "get",
    "red",
    "means",
    "high",
    "impact",
    "issue",
    "definitely",
    "address",
    "even",
    "comes",
    "reference",
    "link",
    "copy",
    "paste",
    "put",
    "browser",
    "see",
    "issue",
    "information",
    "slither",
    "tool",
    "issue",
    "correct",
    "see",
    "catches",
    "metamorphic",
    "contract",
    "issue",
    "says",
    "metamorphic",
    "contract",
    "never",
    "initialized",
    "used",
    "metamorphic",
    "dot",
    "kill",
    "reason",
    "massive",
    "issue",
    "go",
    "metamorphic",
    "contract",
    "outsole",
    "deploy",
    "contract",
    "somebody",
    "else",
    "could",
    "initialize",
    "code",
    "become",
    "owner",
    "automatically",
    "kill",
    "even",
    "chance",
    "actually",
    "something",
    "happened",
    "past",
    "caused",
    "ton",
    "issues",
    "see",
    "red",
    "terminal",
    "means",
    "hey",
    "massive",
    "issue",
    "absolutely",
    "check",
    "gon",
    "na",
    "ton",
    "green",
    "detectors",
    "probably",
    "low",
    "impact",
    "probably",
    "okay",
    "fact",
    "see",
    "even",
    "calling",
    "opens",
    "stuff",
    "saying",
    "hey",
    "see",
    "inline",
    "assembly",
    "inline",
    "assembly",
    "kind",
    "scary",
    "maybe",
    "use",
    "think",
    "green",
    "kind",
    "warning",
    "low",
    "likelihood",
    "impact",
    "anything",
    "might",
    "want",
    "check",
    "get",
    "different",
    "versions",
    "solidity",
    "used",
    "saying",
    "hey",
    "couple",
    "different",
    "versions",
    "solidity",
    "might",
    "something",
    "want",
    "keep",
    "mind",
    "maybe",
    "use",
    "versions",
    "solidity",
    "allow",
    "old",
    "versions",
    "actually",
    "throughout",
    "whole",
    "course",
    "using",
    "zero",
    "point",
    "zero",
    "point",
    "zero",
    "point",
    "considered",
    "stable",
    "versions",
    "solidity",
    "using",
    "versions",
    "outside",
    "say",
    "hey",
    "maybe",
    "want",
    "work",
    "different",
    "version",
    "flags",
    "maybe",
    "hey",
    "make",
    "variable",
    "constant",
    "never",
    "changes",
    "great",
    "uses",
    "literal",
    "many",
    "digits",
    "saying",
    "hey",
    "kind",
    "hard",
    "read",
    "maybe",
    "screwed",
    "zeros",
    "loud",
    "old",
    "versions",
    "reentrancy",
    "ether",
    "store",
    "dot",
    "withdraw",
    "running",
    "slither",
    "tool",
    "catch",
    "reentrancy",
    "vulnerability",
    "one",
    "contracts",
    "fantastic",
    "running",
    "static",
    "analysis",
    "caught",
    "least",
    "two",
    "huge",
    "vulnerabilities",
    "metamorphic",
    "contract",
    "reentrancy",
    "contract",
    "catch",
    "issues",
    "involved",
    "sole",
    "liquidity",
    "pool",
    "bad",
    "rng",
    "though",
    "want",
    "rely",
    "slither",
    "going",
    "catch",
    "everything",
    "catch",
    "lot",
    "major",
    "vulnerabilities",
    "use",
    "slither",
    "least",
    "middle",
    "middle",
    "stack",
    "point",
    "get",
    "started",
    "great",
    "learned",
    "work",
    "slither",
    "one",
    "first",
    "tools",
    "really",
    "fantastic",
    "audit",
    "process",
    "going",
    "considered",
    "fast",
    "tool",
    "static",
    "analysis",
    "running",
    "tests",
    "linters",
    "etc",
    "also",
    "types",
    "static",
    "analysis",
    "run",
    "tool",
    "like",
    "enter",
    "manual",
    "analysis",
    "walk",
    "code",
    "manually",
    "maybe",
    "tangent",
    "running",
    "slower",
    "tools",
    "like",
    "kitna",
    "manta",
    "corp",
    "symbolic",
    "execution",
    "tools",
    "symbolic",
    "execution",
    "simulate",
    "executing",
    "transactions",
    "blockchain",
    "one",
    "symbolic",
    "execution",
    "tools",
    "going",
    "work",
    "kidmin",
    "tool",
    "trail",
    "bits",
    "tool",
    "something",
    "called",
    "fuzz",
    "testing",
    "programming",
    "fuzzing",
    "fuzz",
    "testing",
    "automated",
    "software",
    "testing",
    "technique",
    "involves",
    "providing",
    "invalid",
    "unexpected",
    "random",
    "data",
    "inputs",
    "computer",
    "program",
    "lot",
    "code",
    "oftentimes",
    "going",
    "get",
    "people",
    "interacting",
    "ways",
    "never",
    "think",
    "want",
    "able",
    "provide",
    "random",
    "data",
    "random",
    "information",
    "test",
    "see",
    "something",
    "weird",
    "happens",
    "expecting",
    "actually",
    "build",
    "fuzz",
    "tests",
    "hard",
    "hat",
    "projects",
    "run",
    "fuzz",
    "tests",
    "actually",
    "created",
    "sample",
    "fuzz",
    "tests",
    "write",
    "fuzz",
    "tests",
    "solidity",
    "actually",
    "opposed",
    "writing",
    "tests",
    "javascript",
    "let",
    "say",
    "example",
    "built",
    "vault",
    "contract",
    "think",
    "first",
    "glance",
    "hey",
    "nobody",
    "ever",
    "able",
    "know",
    "password",
    "one",
    "ever",
    "able",
    "unlock",
    "contract",
    "obviously",
    "know",
    "ridiculous",
    "know",
    "anybody",
    "read",
    "anything",
    "storage",
    "variable",
    "know",
    "fail",
    "might",
    "hard",
    "write",
    "test",
    "catch",
    "actually",
    "would",
    "fail",
    "good",
    "approach",
    "testing",
    "would",
    "send",
    "ton",
    "random",
    "bytes",
    "32",
    "objects",
    "unlock",
    "function",
    "see",
    "unlock",
    "write",
    "fuzz",
    "test",
    "exactly",
    "vault",
    "fuzz",
    "test",
    "dot",
    "sol",
    "importing",
    "vault",
    "outsole",
    "saying",
    "vault",
    "fuzz",
    "test",
    "vault",
    "password",
    "123",
    "asd",
    "function",
    "called",
    "kid",
    "test",
    "find",
    "password",
    "going",
    "send",
    "ton",
    "random",
    "data",
    "vault",
    "try",
    "make",
    "locked",
    "equal",
    "false",
    "say",
    "locked",
    "equals",
    "true",
    "first",
    "test",
    "try",
    "make",
    "locked",
    "equals",
    "false",
    "could",
    "install",
    "kitna",
    "point",
    "good",
    "idea",
    "bring",
    "security",
    "toolbox",
    "trail",
    "bits",
    "trail",
    "bits",
    "package",
    "called",
    "eath",
    "security",
    "toolbox",
    "security",
    "tools",
    "one",
    "single",
    "container",
    "kitna",
    "ethan",
    "manta",
    "core",
    "slither",
    "rattle",
    "smart",
    "contracts",
    "exact",
    "package",
    "work",
    "toolbox",
    "gon",
    "na",
    "need",
    "docker",
    "installed",
    "gon",
    "na",
    "little",
    "bit",
    "installation",
    "sometimes",
    "hardest",
    "part",
    "course",
    "installing",
    "packages",
    "left",
    "link",
    "doc",
    "dot",
    "get",
    "docker",
    "install",
    "docker",
    "actually",
    "work",
    "tools",
    "going",
    "come",
    "going",
    "click",
    "whichever",
    "one",
    "appropriate",
    "install",
    "docker",
    "docker",
    "installed",
    "run",
    "e",
    "security",
    "toolbox",
    "pulling",
    "docker",
    "equivalent",
    "github",
    "going",
    "use",
    "whole",
    "bunch",
    "docker",
    "commands",
    "going",
    "explain",
    "docker",
    "course",
    "looking",
    "get",
    "security",
    "stuff",
    "would",
    "definitely",
    "recommend",
    "reading",
    "commands",
    "afterwards",
    "going",
    "leave",
    "ton",
    "links",
    "learn",
    "package",
    "json",
    "associated",
    "lesson",
    "even",
    "command",
    "get",
    "set",
    "right",
    "run",
    "yarn",
    "toolbox",
    "run",
    "docker",
    "command",
    "like",
    "going",
    "run",
    "yarn",
    "toolbox",
    "get",
    "something",
    "like",
    "saying",
    "connect",
    "docker",
    "daemon",
    "docker",
    "daemon",
    "running",
    "need",
    "docker",
    "daemon",
    "running",
    "since",
    "installed",
    "docker",
    "desktop",
    "need",
    "docker",
    "engine",
    "started",
    "running",
    "actually",
    "working",
    "work",
    "lot",
    "docker",
    "setup",
    "configuration",
    "needs",
    "happen",
    "going",
    "leave",
    "ton",
    "instructions",
    "get",
    "started",
    "docker",
    "docker",
    "setup",
    "run",
    "yarn",
    "toolbox",
    "stick",
    "us",
    "new",
    "shell",
    "work",
    "tools",
    "trilobites",
    "box",
    "vault",
    "fuzz",
    "test",
    "comes",
    "config",
    "well",
    "yamo",
    "file",
    "arguments",
    "running",
    "kidnap",
    "test",
    "limit",
    "many",
    "different",
    "runs",
    "time",
    "delay",
    "block",
    "delay",
    "course",
    "mappings",
    "darker",
    "shell",
    "already",
    "security",
    "tools",
    "already",
    "installed",
    "like",
    "kidner",
    "test",
    "run",
    "kinah",
    "test",
    "src",
    "slash",
    "contracts",
    "slash",
    "test",
    "slash",
    "fuzzing",
    "slash",
    "fault",
    "fuzz",
    "test",
    "dot",
    "sol",
    "dash",
    "dash",
    "contract",
    "vault",
    "fuzz",
    "test",
    "dash",
    "dash",
    "config",
    "src",
    "slash",
    "contracts",
    "slash",
    "test",
    "slash",
    "buzzing",
    "slash",
    "config",
    "dot",
    "yamo",
    "go",
    "ahead",
    "hit",
    "enter",
    "say",
    "analyzing",
    "contract",
    "give",
    "us",
    "output",
    "like",
    "give",
    "us",
    "output",
    "looks",
    "like",
    "saying",
    "found",
    "use",
    "case",
    "could",
    "make",
    "locked",
    "equals",
    "false",
    "use",
    "case",
    "123",
    "asd",
    "seemed",
    "like",
    "almost",
    "seconds",
    "found",
    "password",
    "unlock",
    "contract",
    "running",
    "fuzz",
    "tester",
    "powerful",
    "thought",
    "contract",
    "secure",
    "immediately",
    "found",
    "password",
    "means",
    "anybody",
    "else",
    "could",
    "immediately",
    "find",
    "password",
    "would",
    "indicator",
    "good",
    "setup",
    "hit",
    "ctrl",
    "c",
    "escape",
    "leave",
    "docker",
    "setup",
    "write",
    "exit",
    "going",
    "leave",
    "ton",
    "links",
    "work",
    "kidnapper",
    "work",
    "fuzz",
    "tester",
    "github",
    "repo",
    "associated",
    "lesson",
    "go",
    "ahead",
    "learn",
    "take",
    "anything",
    "away",
    "whole",
    "section",
    "right",
    "two",
    "common",
    "tasks",
    "reentrant",
    "see",
    "oracle",
    "manipulation",
    "going",
    "auditor",
    "want",
    "deploy",
    "things",
    "main",
    "net",
    "always",
    "always",
    "deploy",
    "anything",
    "absolute",
    "minimum",
    "always",
    "running",
    "slither",
    "looking",
    "manually",
    "oracle",
    "manipulation",
    "reentrancy",
    "attacks",
    "see",
    "code",
    "getting",
    "pricing",
    "information",
    "price",
    "piece",
    "data",
    "humans",
    "assigned",
    "something",
    "getting",
    "pricing",
    "information",
    "centralized",
    "location",
    "rethink",
    "scenario",
    "rethink",
    "getting",
    "random",
    "number",
    "type",
    "automation",
    "centralized",
    "location",
    "rethink",
    "change",
    "strategy",
    "chain",
    "link",
    "oracle",
    "network",
    "created",
    "reason",
    "prevent",
    "getting",
    "hacked",
    "like",
    "please",
    "keep",
    "mind",
    "deploy",
    "anything",
    "main",
    "type",
    "security",
    "guarantees",
    "okay",
    "great",
    "learned",
    "fast",
    "tools",
    "learned",
    "slow",
    "tools",
    "look",
    "manta",
    "corp",
    "mythix",
    "also",
    "tools",
    "use",
    "manta",
    "corp",
    "going",
    "another",
    "tool",
    "trilobites",
    "team",
    "mythix",
    "actually",
    "smart",
    "contract",
    "security",
    "service",
    "consensus",
    "team",
    "basically",
    "send",
    "bot",
    "running",
    "cloud",
    "contracts",
    "automated",
    "process",
    "check",
    "security",
    "vulnerabilities",
    "paid",
    "service",
    "going",
    "deploying",
    "protocol",
    "worth",
    "millions",
    "dollars",
    "spending",
    "spending",
    "make",
    "sure",
    "actually",
    "says",
    "going",
    "correctly",
    "definitely",
    "something",
    "want",
    "invest",
    "run",
    "whole",
    "process",
    "smart",
    "contract",
    "developers",
    "auditors",
    "discuss",
    "findings",
    "issues",
    "repeat",
    "steps",
    "repeat",
    "steps",
    "changes",
    "made",
    "audit",
    "process",
    "making",
    "sure",
    "contracts",
    "secure",
    "long",
    "process",
    "afterwards",
    "auditor",
    "finally",
    "write",
    "report",
    "security",
    "vulnerabilities",
    "everything",
    "found",
    "contracts",
    "typically",
    "organize",
    "reports",
    "chart",
    "look",
    "something",
    "like",
    "label",
    "issues",
    "high",
    "chance",
    "happening",
    "high",
    "impact",
    "critical",
    "things",
    "high",
    "impact",
    "low",
    "likelihood",
    "medium",
    "etc",
    "also",
    "going",
    "leave",
    "examples",
    "two",
    "audits",
    "done",
    "past",
    "take",
    "look",
    "see",
    "full",
    "audit",
    "looks",
    "like",
    "certain",
    "code",
    "looking",
    "openzeppelin",
    "sigma",
    "prime",
    "trilobites",
    "three",
    "think",
    "best",
    "auditors",
    "space",
    "github",
    "repo",
    "also",
    "ton",
    "tools",
    "use",
    "mythix",
    "mithril",
    "ethers",
    "play",
    "consensus",
    "security",
    "tools",
    "want",
    "learn",
    "security",
    "auditing",
    "highly",
    "recommend",
    "course",
    "play",
    "ethernet",
    "game",
    "damn",
    "vulnerable",
    "defy",
    "two",
    "games",
    "teach",
    "ton",
    "security",
    "test",
    "chops",
    "test",
    "everything",
    "learned",
    "course",
    "also",
    "couple",
    "security",
    "focused",
    "blogs",
    "really",
    "like",
    "one",
    "particular",
    "wrecked",
    "dot",
    "news",
    "keep",
    "running",
    "list",
    "largest",
    "hacks",
    "ever",
    "happened",
    "space",
    "retrospectives",
    "actually",
    "happened",
    "usually",
    "make",
    "entertaining",
    "well",
    "articles",
    "well",
    "one",
    "best",
    "places",
    "look",
    "known",
    "attacks",
    "section",
    "talk",
    "talk",
    "reentrancy",
    "oracle",
    "manipulation",
    "front",
    "running",
    "ton",
    "attacks",
    "absolutely",
    "aware",
    "writing",
    "smart",
    "contracts",
    "going",
    "go",
    "great",
    "job",
    "resources",
    "explaining",
    "also",
    "check",
    "article",
    "helped",
    "write",
    "definitely",
    "check",
    "got",
    "list",
    "even",
    "sections",
    "going",
    "living",
    "section",
    "please",
    "feel",
    "free",
    "find",
    "things",
    "future",
    "please",
    "feel",
    "free",
    "make",
    "pull",
    "requests",
    "update",
    "repository",
    "people",
    "learn",
    "know",
    "security",
    "auditing",
    "contract",
    "examples",
    "bad",
    "code",
    "looks",
    "like",
    "actually",
    "catch",
    "even",
    "though",
    "one",
    "quickest",
    "sections",
    "video",
    "standpoint",
    "actually",
    "going",
    "one",
    "longest",
    "sections",
    "career",
    "security",
    "something",
    "always",
    "going",
    "mind",
    "always",
    "going",
    "new",
    "tools",
    "help",
    "security",
    "always",
    "going",
    "new",
    "things",
    "think",
    "even",
    "though",
    "went",
    "quickly",
    "would",
    "100",
    "want",
    "pause",
    "video",
    "work",
    "try",
    "tools",
    "tried",
    "maybe",
    "even",
    "try",
    "coming",
    "vulnerabilities",
    "well",
    "said",
    "finished",
    "last",
    "section",
    "massive",
    "master",
    "course",
    "learning",
    "smart",
    "contracts",
    "solidity",
    "web",
    "three",
    "blockchain",
    "development",
    "incredibly",
    "proud",
    "congratulations",
    "web",
    "three",
    "community",
    "whole",
    "want",
    "congratulate",
    "completing",
    "absolutely",
    "monstrosity",
    "tutorial",
    "done",
    "amazing",
    "job",
    "get",
    "far",
    "watch",
    "talking",
    "right",
    "finished",
    "course",
    "go",
    "back",
    "finish",
    "coming",
    "learned",
    "much",
    "journey",
    "say",
    "bottom",
    "soul",
    "glad",
    "web",
    "three",
    "space",
    "smart",
    "contract",
    "space",
    "blockchain",
    "space",
    "cryptocurrency",
    "space",
    "excited",
    "really",
    "looking",
    "forward",
    "seeing",
    "web",
    "three",
    "blockchain",
    "community",
    "lot",
    "people",
    "ask",
    "well",
    "go",
    "newfound",
    "knowledge",
    "armed",
    "intelligence",
    "web",
    "three",
    "developer",
    "space",
    "well",
    "left",
    "links",
    "github",
    "repository",
    "lead",
    "next",
    "steps",
    "biggest",
    "thing",
    "right",
    "go",
    "take",
    "learned",
    "apply",
    "somewhere",
    "going",
    "probably",
    "thorough",
    "course",
    "ever",
    "go",
    "space",
    "go",
    "tutorial",
    "tutorial",
    "boot",
    "camp",
    "bootcamp",
    "want",
    "point",
    "make",
    "leap",
    "dive",
    "majority",
    "growth",
    "going",
    "anyways",
    "wondering",
    "go",
    "next",
    "go",
    "join",
    "hackathon",
    "go",
    "start",
    "jumping",
    "issues",
    "github",
    "repos",
    "go",
    "start",
    "applying",
    "grants",
    "go",
    "start",
    "applying",
    "jobs",
    "say",
    "took",
    "patrick",
    "massive",
    "course",
    "github",
    "repo",
    "work",
    "personal",
    "project",
    "work",
    "somebody",
    "else",
    "project",
    "take",
    "knowledge",
    "apply",
    "challenges",
    "run",
    "challenges",
    "face",
    "really",
    "trying",
    "something",
    "without",
    "hand",
    "holding",
    "going",
    "learn",
    "10",
    "times",
    "much",
    "learned",
    "walked",
    "deep",
    "rabbit",
    "hole",
    "take",
    "go",
    "something",
    "thank",
    "everybody",
    "helped",
    "create",
    "course",
    "thank",
    "taking",
    "course",
    "excited",
    "see",
    "community",
    "see",
    "build",
    "see",
    "create",
    "technology"
  ],
  "keywords": [
    "learning",
    "blockchain",
    "course",
    "patrick",
    "developer",
    "sure",
    "leave",
    "comment",
    "something",
    "learned",
    "solidity",
    "smart",
    "contract",
    "javascript",
    "version",
    "video",
    "right",
    "making",
    "tutorial",
    "ton",
    "first",
    "language",
    "definitely",
    "check",
    "one",
    "got",
    "put",
    "looking",
    "get",
    "started",
    "web",
    "three",
    "contracts",
    "terms",
    "anybody",
    "matter",
    "level",
    "programming",
    "know",
    "little",
    "bit",
    "starting",
    "help",
    "along",
    "way",
    "case",
    "want",
    "learn",
    "fantastic",
    "free",
    "code",
    "camp",
    "absolutely",
    "really",
    "object",
    "work",
    "new",
    "coding",
    "exactly",
    "already",
    "lot",
    "give",
    "even",
    "space",
    "name",
    "chain",
    "link",
    "protocol",
    "live",
    "breed",
    "also",
    "make",
    "people",
    "technology",
    "developers",
    "world",
    "section",
    "basics",
    "excited",
    "data",
    "project",
    "everything",
    "working",
    "100",
    "certain",
    "follow",
    "come",
    "side",
    "around",
    "massive",
    "interact",
    "track",
    "giving",
    "needs",
    "sending",
    "going",
    "tools",
    "use",
    "things",
    "like",
    "nf",
    "ts",
    "erc",
    "build",
    "defy",
    "applications",
    "ave",
    "decentralized",
    "nft",
    "projects",
    "seen",
    "completely",
    "building",
    "community",
    "system",
    "value",
    "lesson",
    "finish",
    "ready",
    "step",
    "enter",
    "see",
    "bottom",
    "let",
    "jump",
    "best",
    "skip",
    "part",
    "issue",
    "github",
    "repository",
    "associated",
    "description",
    "click",
    "open",
    "tab",
    "yes",
    "place",
    "ask",
    "questions",
    "well",
    "etc",
    "say",
    "move",
    "quickly",
    "updated",
    "always",
    "latest",
    "documentation",
    "try",
    "maybe",
    "sample",
    "next",
    "writing",
    "back",
    "sometimes",
    "might",
    "change",
    "better",
    "file",
    "called",
    "run",
    "easier",
    "find",
    "basically",
    "repo",
    "take",
    "tell",
    "many",
    "entire",
    "setting",
    "much",
    "information",
    "every",
    "five",
    "minute",
    "two",
    "longer",
    "break",
    "go",
    "time",
    "though",
    "speed",
    "takes",
    "using",
    "talking",
    "order",
    "full",
    "stack",
    "stuff",
    "advanced",
    "highly",
    "pause",
    "incredibly",
    "asking",
    "aetherium",
    "exchange",
    "issues",
    "different",
    "reason",
    "putting",
    "ones",
    "makes",
    "fun",
    "continue",
    "places",
    "connect",
    "chainlink",
    "eath",
    "global",
    "dev",
    "great",
    "alright",
    "keep",
    "blockchains",
    "important",
    "feel",
    "since",
    "probably",
    "bitcoin",
    "protocols",
    "created",
    "transactions",
    "network",
    "talk",
    "store",
    "example",
    "similar",
    "amount",
    "set",
    "available",
    "buy",
    "sell",
    "read",
    "actually",
    "works",
    "saw",
    "wanted",
    "later",
    "named",
    "additional",
    "number",
    "could",
    "agreements",
    "ways",
    "without",
    "centralized",
    "idea",
    "thing",
    "made",
    "add",
    "fact",
    "technically",
    "instructions",
    "need",
    "core",
    "think",
    "except",
    "instead",
    "however",
    "main",
    "means",
    "functionality",
    "would",
    "huge",
    "real",
    "ca",
    "listen",
    "known",
    "oracle",
    "problem",
    "happens",
    "external",
    "play",
    "runs",
    "single",
    "provider",
    "source",
    "running",
    "logic",
    "gives",
    "type",
    "comes",
    "end",
    "allows",
    "us",
    "random",
    "numbers",
    "whenever",
    "often",
    "component",
    "block",
    "chains",
    "avalanche",
    "polygon",
    "deploying",
    "funding",
    "switch",
    "easily",
    "line",
    "worry",
    "specific",
    "tool",
    "together",
    "couple",
    "still",
    "far",
    "used",
    "kind",
    "mean",
    "obviously",
    "popular",
    "powerful",
    "application",
    "usually",
    "looks",
    "said",
    "static",
    "dynamic",
    "networks",
    "creating",
    "enable",
    "users",
    "high",
    "trust",
    "look",
    "mind",
    "good",
    "mark",
    "words",
    "unique",
    "create",
    "head",
    "additionally",
    "pretty",
    "money",
    "send",
    "explain",
    "outside",
    "old",
    "promise",
    "result",
    "pay",
    "return",
    "built",
    "nothing",
    "almost",
    "form",
    "safe",
    "lottery",
    "chance",
    "happen",
    "ran",
    "simple",
    "hey",
    "zero",
    "went",
    "another",
    "essentially",
    "deployed",
    "immutable",
    "10",
    "please",
    "wrong",
    "tag",
    "says",
    "hit",
    "current",
    "else",
    "happened",
    "okay",
    "cool",
    "times",
    "last",
    "user",
    "access",
    "asset",
    "remember",
    "behind",
    "enough",
    "finally",
    "fix",
    "true",
    "helpful",
    "needed",
    "gon",
    "na",
    "quick",
    "links",
    "automatically",
    "person",
    "entity",
    "anymore",
    "typically",
    "getting",
    "stands",
    "yet",
    "log",
    "somebody",
    "owned",
    "internal",
    "vrf",
    "public",
    "exist",
    "20",
    "tokens",
    "confusing",
    "wo",
    "either",
    "market",
    "especially",
    "big",
    "away",
    "based",
    "math",
    "oh",
    "plus",
    "equals",
    "equal",
    "given",
    "double",
    "choose",
    "coming",
    "security",
    "whole",
    "top",
    "future",
    "able",
    "environment",
    "node",
    "weird",
    "anything",
    "perfect",
    "ever",
    "transfer",
    "basic",
    "balance",
    "adding",
    "long",
    "changed",
    "whatever",
    "server",
    "database",
    "nodes",
    "computer",
    "gone",
    "copy",
    "sense",
    "private",
    "key",
    "password",
    "remove",
    "heart",
    "execute",
    "pieces",
    "piece",
    "never",
    "correct",
    "easy",
    "directly",
    "voting",
    "governance",
    "watch",
    "non",
    "art",
    "show",
    "transaction",
    "wallet",
    "website",
    "test",
    "process",
    "exact",
    "evm",
    "compatible",
    "ahead",
    "meta",
    "mask",
    "download",
    "browser",
    "extension",
    "install",
    "import",
    "phrase",
    "metamask",
    "care",
    "funds",
    "fake",
    "testing",
    "recommend",
    "keys",
    "write",
    "location",
    "practice",
    "save",
    "verify",
    "confirm",
    "awesome",
    "interface",
    "depending",
    "pin",
    "account",
    "address",
    "ether",
    "scan",
    "paste",
    "details",
    "view",
    "addresses",
    "net",
    "accounts",
    "call",
    "button",
    "multiple",
    "export",
    "mine",
    "gets",
    "trying",
    "saying",
    "list",
    "currently",
    "local",
    "default",
    "slash",
    "settings",
    "page",
    "select",
    "scroll",
    "close",
    "rinkeby",
    "rink",
    "b",
    "blank",
    "covid",
    "rigby",
    "indeed",
    "dot",
    "cost",
    "considered",
    "pop",
    "pick",
    "connected",
    "request",
    "actual",
    "hash",
    "waiting",
    "wait",
    "sent",
    "blocks",
    "timestamp",
    "x",
    "blah",
    "fee",
    "gas",
    "price",
    "unit",
    "less",
    "second",
    "uses",
    "limit",
    "expensive",
    "pull",
    "total",
    "anytime",
    "left",
    "count",
    "ui",
    "notification",
    "indexing",
    "passed",
    "start",
    "grab",
    "understand",
    "256",
    "length",
    "string",
    "meant",
    "function",
    "six",
    "changes",
    "max",
    "size",
    "seven",
    "e",
    "delete",
    "figure",
    "bunch",
    "nonce",
    "four",
    "zeros",
    "error",
    "variable",
    "previous",
    "rest",
    "hard",
    "past",
    "state",
    "initial",
    "setup",
    "includes",
    "pure",
    "catch",
    "stop",
    "c",
    "strings",
    "token",
    "difference",
    "tx",
    "low",
    "goes",
    "question",
    "implementation",
    "answer",
    "signature",
    "sign",
    "message",
    "hi",
    "verified",
    "bytes",
    "note",
    "front",
    "wrap",
    "costs",
    "base",
    "values",
    "minimum",
    "notice",
    "eight",
    "team",
    "small",
    "ends",
    "converter",
    "programmatically",
    "50",
    "confirmed",
    "confirmations",
    "input",
    "ignore",
    "listening",
    "least",
    "sync",
    "extra",
    "proof",
    "defined",
    "types",
    "added",
    "point",
    "tells",
    "attack",
    "collateral",
    "upgrade",
    "propose",
    "proposal",
    "hook",
    "layer",
    "moving",
    "sections",
    "remix",
    "storage",
    "format",
    "found",
    "development",
    "allow",
    "files",
    "boilerplate",
    "scripts",
    "tests",
    "dependencies",
    "folder",
    "inside",
    "readme",
    "box",
    "text",
    "soul",
    "parameters",
    "compile",
    "updating",
    "pragma",
    "versions",
    "compiled",
    "greater",
    "command",
    "windows",
    "ctrl",
    "define",
    "class",
    "brackets",
    "successfully",
    "errors",
    "deploy",
    "boolean",
    "int",
    "false",
    "variables",
    "favorite",
    "keyword",
    "special",
    "specify",
    "memory",
    "un",
    "lines",
    "objects",
    "64",
    "stick",
    "functions",
    "modules",
    "familiar",
    "underscore",
    "parameter",
    "vm",
    "correctly",
    "injected",
    "deployment",
    "window",
    "id",
    "stored",
    "calling",
    "calls",
    "update",
    "returns",
    "retrieve",
    "reading",
    "console",
    "cheaper",
    "index",
    "indexed",
    "slot",
    "array",
    "empty",
    "push",
    "boom",
    "comma",
    "logs",
    "exists",
    "expect",
    "mapping",
    "knows",
    "app",
    "response",
    "passing",
    "delay",
    "search",
    "super",
    "refresh",
    "ah",
    "standard",
    "dash",
    "f",
    "factory",
    "jas",
    "path",
    "package",
    "nicer",
    "deployments",
    "abi",
    "api",
    "binary",
    "metadata",
    "output",
    "pass",
    "syntax",
    "script",
    "rate",
    "revert",
    "override",
    "funmi",
    "fund",
    "owner",
    "withdraw",
    "payable",
    "withdrawal",
    "funders",
    "reset",
    "channeling",
    "feeds",
    "usd",
    "v",
    "components",
    "require",
    "done",
    "events",
    "feed",
    "consumer",
    "decimals",
    "pool",
    "keepers",
    "event",
    "trigger",
    "perform",
    "module",
    "requests",
    "url",
    "receive",
    "raw",
    "conversion",
    "aggregator",
    "v3",
    "git",
    "hat",
    "locally",
    "npm",
    "minimalistic",
    "interval",
    "method",
    "funded",
    "sender",
    "library",
    "oops",
    "loop",
    "task",
    "funder",
    "success",
    "commands",
    "otherwise",
    "constructor",
    "soon",
    "eyes",
    "disconnect",
    "constant",
    "nice",
    "fallback",
    "arguments",
    "selector",
    "receipt",
    "ethers",
    "encoding",
    "sorry",
    "hardhead",
    "options",
    "formatting",
    "helper",
    "tags",
    "votes",
    "typescript",
    "visual",
    "studio",
    "vs",
    "terminal",
    "linux",
    "installed",
    "j",
    "js",
    "auto",
    "item",
    "cd",
    "directory",
    "period",
    "cloud",
    "h",
    "fcc",
    "json",
    "prettier",
    "const",
    "async",
    "popcorn",
    "await",
    "yarn",
    "lock",
    "packages",
    "recent",
    "ganache",
    "rpc",
    "fs",
    "resolve",
    "arrow",
    "weight",
    "hex",
    "env",
    "dog",
    "config",
    "encrypted",
    "kit",
    "morales",
    "verification",
    "active",
    "hardhat",
    "graph",
    "tasks",
    "exports",
    "sub",
    "params",
    "packed",
    "host",
    "localhost",
    "cancel",
    "cancelled",
    "describe",
    "assert",
    "enabled",
    "coin",
    "header",
    "coverage",
    "args",
    "upload",
    "mocks",
    "image",
    "deployer",
    "mock",
    "docs",
    "utils",
    "staging",
    "player",
    "excuse",
    "challenge",
    "multi",
    "loading",
    "html",
    "react",
    "approve",
    "query",
    "listener",
    "raffle",
    "players",
    "winner",
    "entrance",
    "marketplace",
    "encoded",
    "decode",
    "subscription",
    "coordinator",
    "fulfill",
    "v2",
    "num",
    "upkeep",
    "counter",
    "checkup",
    "admin",
    "div",
    "images",
    "svg",
    "listed",
    "mirallas",
    "effect",
    "handle",
    "ngmodel",
    "tailwind",
    "ipfs",
    "encode",
    "proposals",
    "dye",
    "deposit",
    "borrow",
    "mint",
    "zeppelin",
    "lending",
    "bot",
    "bought",
    "721",
    "uri",
    "percent",
    "ft",
    "pinata",
    "delegate",
    "listing",
    "proceeds",
    "items",
    "seller",
    "table",
    "proxy",
    "logger",
    "ql",
    "proxies",
    "vote",
    "governor"
  ]
}