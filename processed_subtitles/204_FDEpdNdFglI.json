{
  "text": "learning aws can be pretty intimidating\nthere's hundreds of services and it can\nbe difficult to understand which one is\nthe right tool for what you're trying to\naccomplish this video is going to help\nyou navigate the complex world of aws\nservices we're going to approach this by\nexamining a standard three-tier\napplication architecture like you can\nsee here so let's take a look at this\narchitecture now before peeling back the\nlayers and revealing the aws services\nbehind the scenes so what do we have\nhere in this application architecture we\nhave a pretty standard three-tier\narchitecture here with a web backend\nlayer we have our application layer here\nwhich is kind of if you're in an\norganization with a service-oriented\narchitecture this will be pretty\nfamiliar this is where all your backend\nservices will be and then you have your\nthird tier here which is your database\nlayer this includes uh can be relational\ncould be a nosql database you can also\nhave some caching in there as well and\nthen we have a bunch of other components\nrelated to this so we have deployment\norchestration to hold on to our source\ncode and then facilitate deployment we\nalso have a monitoring component here\nfor monitoring the state of the system\nuh we have a load balancer here with a\ndns pointing to that load balancer to\ndistribute traffic and then we have some\nother toolkits here on the right for\nevent coordination say for instance um\nthis application did some kind of\nsomething like google where you have\nsearch query submission and like every\ntime that gets saved to a database you\nwant to trigger some kind of event in\nthis layer over here we have storage for\nthat event we have some analytical\nprocessing a data warehouse and finally\nsome dashboarding for end users to\nexamine that content we also have some\ntoolkits for rapid development to deploy\na little bit faster as well and over\nhere finally on the left hand side these\ntwo elements so for user pools to define\ndifferent users that are going to be\ninteracting with your application and\nthen of course to serve cache content so\nthis is our pretty standard application\nhere let's take a look now at some of\nthe aws services behind the scenes that\nreplace each of these different elements\nso the first one is for dns so what is\nthe service that we want to use for dns\nand aws\nso for aws that's going to be amazon\nroute 53 and row 53 is the service where\nyou define all your dns configuration\nincluding you know where you're going to\nroute traffic to from the internet also\nsupports other things like you know\nhealth checks on your endpoints and any\ntraffic shaping that you want to do\nthat's going to all be done in your\nrel53 service so it's great to be\nfamiliar with rel53 you're probably\ngoing to be using it all the time if you\nwere defining kind of externally facing\napis or endpoints\nnow from there your dns will typically\npoint to an endpoint for a load balancer\nso for aws there's a couple options for\nload balancers but the kind of top level\ncategory here\nis something called the elastic load\nbalancer service and there's two\nvariations for elastic load balancer\nthere's what's called the application\nload balancer which operates at the l7\nlayer and that's more applicable for\nthose you that want to use content from\nyour http headers to route your traffic\nand for those of you that are looking\nfor something a little bit more lower\nlevel aws also offers a network load\nbalancer which operates at the l4 level\nwhich is a little bit\nmore cost effective and supports higher\nthroughput limits as well so that's an\nelastic load balancer and some of the\ndifferent options that you may want to\nuse now in terms of your web backend\nlayer over here this is going to be the\nfirst kind of\ntime that a request from the front end\ntouches the back end now with compute\nthere's a couple different options that\nyou can decide to leverage and those\ncompute options it doesn't really matter\nif it's your web backend layer or your\napplication layer the compute options\nthat you select for either of these two\nthings will be the same so what are the\noptions that are available to us so the\nfirst option is amazon ec2 ec2 stands\nfor elastic compute cloud very very old\nservice and the basic gist of this\nservice is that you rent\nvirtual machines that you pay for by the\nhour and they're really convenient\nbecause with ec2 machines you can set\nthem up to do whatever you please you\ncan use them to host\nback-end databases if you want you can\nhost a wordpress blog on it you can\ncreate and deploy your application for a\nrest api so it's a really flexible\nservice that allows you to do whatever\nyou want but some of the drawbacks with\nec2 can include just the all the setup\nand configuration that you're going to\nhave to go through to use it so some\nfolks shy away from ec2 in favor of\nsomething a little bit more hands-off\nand for those of you that are interested\nin serverless that's where our next\npoint comes in and that's aws lambda so\naws lambda is a serverless compute\ninfrastructure option and what that\nbasically means is that you define what\nare called functions and these functions\nare just snippets of code they can be\nsmall or large pieces of code and aws\ndoes not require you to have to worry\nabout any of the infrastructure as you\nhad to do with ec2 you just basically\nwrite and deploy your functions and aws\nworries about deploying your application\nonto a container and then scaling that\napplication whenever the number of\nrequests to your lambda function\nincrease\nso this is a really really attractive\nmodel because\nlambda is paper invocation so it's\nreally cost effective for application\nworkloads that have bursty traffic\npatterns\nor for applications that have traffic\nduring the day and then it kind of\nrecedes down to nothing in the evening\nso lambda is a really really popular\nservice it's getting more and more\npopular by the day and it's definitely\none to consider if you want to learn\nmore about aws lambda you should check\nout my brand new udemy course in the top\nright of this video now if you're not\ninto kind of deploying your\ninfrastructure onto machines directly\nand you're not into using this\nserverless model there is a third option\nfor those you that are more kind of\ndocker folks or docker fans\nand that third option is amazon ecs so\necs stands for elastic container service\nand there's also a variation of ecs\ncalled eks or elastic kubernetes service\nand essentially ecs is just a service to\nhelp you manage your containers helps\nyou set up servers with integrated load\nbalancing and auto scaling helps you\nfacilitate your deployments to those\ncontainers so it's kind of like\nsomething in the middle between ec2 and\nlambda and if you're interested in\nlearning more about like these three\nservices and different compute options\nthat are available to you i have a video\nwhere i compare these three things i'll\nput that in the comments or the\ndescription section below\nso like i was kind of saying uh the\napplication layer doesn't really change\nin terms of the compute options you have\nthe same kind of fundamental building\nblocks that are available to you\nregardless of if it's your web backend\nlayer or your kind of business logic\nheavy heavy application layer here now\nanother service that helps kind of\nfacilitate the creation of your rest\napis and hosting those apis is one\nthat's called api gateway over here an\napi gateway is a super super powerful\nservice because it offers additional\nfunctionality on top of just kind of\nusing a load balancer to distribute your\ntraffic to different nodes here and the\ntypes of uh kind of features that api\ngateway offers are things like api\nthrottling or authorization on an api\nsay for example you you're building kind\nof a private api that you only want to\nbe accessible from users in a user pool\nwhich we're going to talk about next\nyear\nyou can set up your api gateway to\nvalidate that you know a token is valid\nuh by integrating with the user pool\nservice or you can define your own also\noffers other features such as model\nvalidation so you can define what types\nof models your api supports and then\nhave that validation performed before\nthe request actually gets to your\nbackend layer here\nso you can do like a bunch of different\ncombinations here you can do your dns\npointing to your api gateway which\npoints to your load balancer which\npoints to your infrastructure layer and\nthat is if you want to take advantage of\nsome of those features that i just\ndescribed so speaking of user pools we\njust kind of touched on that we might as\nwell reveal the service here and that's\none called amazon cognito so amazon\ncognito is kind of a very very powerful\nbut underrated service and what it\nallows you to do is to create user pools\nand these user pools kind of similar to\nwhat you'd have on any kind of login and\nregistration website you know you create\na user they provide a login a username a\nphone number a recovery option all that\nkind of stuff and so with cognito you\ncan\nhave users sign up for accounts directly\nwithin cognito using the hosted ui\nor you can integrate with other\nthird-party identity providers such as\ngoogle facebook amazon so anytime you've\nseen like login with amazon or log in\nwith google or facebook or any other\nidentity provider\nthat could be integrated with cognito as\nwell so very very useful for\napplications that require user\nregistration and if you combine that\nwith api gateway you can do things like\nensuring that a user is part of a\ncertain user group before the request\ncan be validated and that flows through\nto your backend layer here so that's a\nlittle bit about cognito let's kind of\nfinish this three-tier architecture\ndiscussion and talk a little bit about\nthe database layers now or the storage\nslash persistence layer\nso a lot of applications have caching\nenabled on them just to increase\nperformance on some\nlookups of items that are quite common\nor maybe you just want increased\nperformance so what's the aws service\nthat allows that to happen so that\nservice is called elastic cache and\nelastic cache kind of comes in two\ndifferent flavors you can either go with\nthe flavor that\nis memcache based or you can choose\nredis now redis is probably the most\npopular one people when people think\nabout caches i think redis comes to mind\nalmost immediately but regardless of\nwhat you choose when using elastic cache\nit is a caching service so it's going to\nbe based on key value lookups and you\nare going to have to worry about hosting\nthat infrastructure essentially you kind\nof own a cluster of nodes and\nthese are memory optimized nodes where\nthey have plenty of memory to facilitate\nyour application's needs um but you\nstill have to worry about the\nmaintenance of that cluster you know and\nnode replacement hardware failures\nthings like that it's a relatively\nhands-off service but there are some\nnuances that you may need to know about\nin terms of maintenance and alarming and\nall that now in terms of what should we\nstore our database in should we store it\nin a relational database or a nosql\ndatabase so there's a bunch of different\noptions here that you can choose from so\nthe one that aws likes to push a lot is\na relatively popular one called amazon\naurora now amazon aurora is a in-house\nbuilt amazon database that is compatible\nwith both my sequel and postgres i\nbelieve postgres is still in preview\nmode now so it's a fully managed rds\ndatabase that kind of makes your life\neasier in terms of worrying about things\nlike administration monitoring\nauto scaling storage auto scaling and\ncompute auto scaling also offers\nsomething called the data api that you\ncan use to\ncall your rds database using a rest api\nas opposed to a traditional kind of\ndatabase connection so there's a lot of\nfeatures that are coming with aurora and\nyou may really want to consider it if\nyou're thinking about using a relational\ndatabase now a relatively similar\nservice to that is amazon rds or\nrelational database service and where\nthese two are different is that rds is a\ndatabase service that allows you to\nselect which database configuration that\nyou would like so you get to pick from\ncommon database uh platforms such as\nmysql postgres microsoft sql server\noracle cassandra and probably a couple\nother ones that i'm missing as well so\nrds is probably what i would think most\npeople are familiar with but a lot of\ncustomers are deciding to go with aurora\njust because it's more of a hands-off\noption and just makes life easier one\nother thing about aurora is that it does\noffer a serverless compute model as well\nwhere you don't need to worry about\nprovisioning any type of hardware behind\nthe scenes as you would with an rds\ndatabase you can use the serverless\nmodel and it's kind of like an auto\nscaling type of database thing similar\nto what lambda did for ec2 aurora server\nlist is doing for rds so it's it\nprovisions your infrastructure whenever\nthe request rate requires it so if you\nhave a bursty workload it'll add more\nnodes and scale you up so that your\ndatabase can handle more volume\nso that's a little bit for rds here\nlet's talk about nosql database options\nnow now definitely the most popular\nnosql database that you're going to hear\nabout a lot is dynamodb now dynamodb is\na nosql database that is optimized for\nkey value lookups it is a fully managed\ndatabase service so that means that you\ndon't worry about anything with regards\nto infrastructure or hardware all you\nreally worry about is your scaling\nconfiguration and dynamodb handles the\nauto scaling for you behind the scenes\nand so it's a really really powerful\nnosql database and it's kind of used as\nthe building block for much of the\ninternet really if you take a look at\none of the aws white papers where\ndynamodb unfortunately went down one day\nit brought down with it a large part of\nthe internet including common\nservices that we all love like netflix\nand other websites as well\nso dynamodb is a super super powerful\nand popular nosql database on aws and\nreally this is this service is kind of\nat the heart of many other aws services\nas well like behind the scenes\nso yeah that's it for dynamodb now if\nyou're a mongodb type of person and\nyou're coming to aws you don't want to\nlearn dynamodb\nthere is a service option for you so aws\nalso offers what's called documentdb\nlike you see here and documentdb similar\nto dynamo is a fully managed service but\nthis time it is compatible with mongodb\nso that you can you know use mongodb as\nyou normally would in a fully managed\nway so that should satisfy any mongodb\nlovers and if you're looking for\nsomething that supports more flexible\nquerying at scale\nyou may want to consider a service\ncalled open search open search is the\nnew name for the traditional elastic\nsearch service i believe aws and\nelasticsearch had a falling out so aws\nkind of came up with their own service\nhere but really this is elasticsearch\nbehind the scenes now what open search\nallows you to do over some of these\nother nosql databases is perform queries\nthat are more kind of fuzzy in nature so\ngive me all the records with with value\nequals x y and z and you know value two\nequaling something else and value three\nequaling something else also allows you\nto do some really powerful grouping\nfeatures dynamic grouping as well\ncomes with cabana as well which is an\nopen source dashboarding technology to\ntake a look at your data inside your\nopen search database\nthis has been used quite effectively as\na replacement to rds in some cases but\nit's a really neat service that you\nshould consider as well now i wanted to\npause here to talk about some other\nservices that don't really fit the molds\nhere but kind of play a role in terms of\npackaged infrastructure because so far\nwhat i've talked to you about here these\nare all kind of lower level building\nblock services but aws does offer these\nkind of packaged infrastructure services\nthat make your life easier as a\ndeveloper you can tell that if you want\nto build this three-tier application\narchitecture here there's a lot of\nmoving pieces here there's a different\ncompute option there's load balancing\nthere's api gateways there's databases\nthere's a lot of stuff going on so aws\ndoes have some services that kind of\noffer a combination of these different\nelements as a single product and so\ninstead of having to worry about you\nknow each of the building blocks and\ndeciding on your own which one you want\nto use you can use these pre-packaged\ninfrastructure services that bundle this\nfunctionality together\nand often they abstract some of the\ncomplexity away from you at the\nsacrifice of kind of configuration and\ncontrol so some of those different\nservices are\nwell the first one that i have for you\nhere is elastic bean stock now elastic\nbeanstalk is a pretty old service it\nallows you to set up any kind of web\napplication could be a containerized web\napplication as well and it just makes it\neasier for you to set up your app with\nall these different components so a\nbackend layer load balancing also lets\nyou set up auto scaling and monitoring\nso it comes with a lot of the components\nhere but you manage it in one spot\nwhich is the elastic bean stock console\nso you're still controlling the\ninfrastructure with elastic bean stock\nbut it's kind of like an orchestrator\nservice it'll go out to all these\ndifferent services here and provision\nwhat it needs for the the type of\napplication that you're trying to deploy\nonto it\nnow another service that just came out\npretty recently that does something\nsimilar is one that's called app runner\nand app runner behind the scenes uses\necs and something called fargate which\nis a kind of a serverless mode for\nrunning containers where it uses\nprovision containers that you can\nspecify but you don't need to worry\nabout the infrastructure\nso that's what app runner relies on so\nwith elastic bean stock you know it's\norchestrating the deployment of your ec2\nmachines your load balancers and any\nother stuff that you may need however\nyou still have visibility or insight\ninto that infrastructure you still need\nto worry about maintaining it with app\nrunner it's a little bit different all\nof the lower level components are\nabstracted away from you you just kind\nof worry about your application\nconfiguration and deployment an app\nrunner will worry about deploying that\nonto your infrastructure and scaling it\nif it requires it so that's another\nimportant service to know as well and\nalso there's another option here which\nis amazon light sale and light sale is\nwhat i actually use for my personal aws\nblog you can check it out at be a better\ndev.com\nand it's another one of these\npre-packaged services that just makes\nyour life easier so it's similar to\nother uh kind of cloud vendors like i\nwant to say godaddy or digitalocean\nwhere you kind of select the type of\nstack that you want to set up for your\napplication and there's a bunch of\ndifferent pricing models kind of\npre-packaged pricing models where you\ndon't have to worry about the details of\nkind of which node type is right for you\nas you would have to do with your ec2\nmachines over here you just pick\ndifferent pre-packaged options for\ncompute and the costs are reasonable as\nwell and in terms of what you can deploy\non lightsail i use it to deploy my\nwordpress blog but you can also use it\nto deploy a lamp stack a mean stack a\nruby application you can also use it to\ndeploy your own containers\nand you can also add other components as\nwell such as load balancing and auto\nscaling uh so there's a lot of different\nfeatures that are built into light sale\nbut it's a much more simplified and\npaired down version so you can add all\nthis extra stuff but you're doing it\nwithin this kind of i want to say safe\nsafe zone or safe version of the aws\nconsole so things are much more\nstreamlined in light sale you have very\nfew options of types of things that you\ncan do and it's a very beginner friendly\noption for those of you that are just\ngetting started not recommended for kind\nof production grade applications but\nsomething great for smaller applications\nor even a wordpress blog such as in my\ncase\nnow another honorable mention that i did\nwant to talk about briefly for those of\nyou that love graphql maybe you're a\nfront-end guy you love graphql aws does\noffer a fully managed graphql as a\nservice\nservice called appsync and appsync just\nmakes it easier for you to develop your\ngraphql applications by providing you\nwith that graphql functionality\nso you can use it to integrate with\nother backend aws services such as\ndynamodb you can use it to integrate\nwith lambda functions if you want to\nhave some custom resolvers and it can\nalso scale really really well too\ncompletely transparently to you as an\nadministrator depending on the level of\ntraffic that's hitting your application\nso appsync is another popular one that\nyou can think about if you're a graphql\nuser\nnow one other thing to mention as well\nis in terms of cached content so for\nmany of these web applications you're\ngoing to be serving different types of\ncached content whether that be image\nfiles your javascript your html your css\nanything that you may want to cache and\nbasically put close to the end user so\nyou can get better performance\nand for that you're going to be using a\nservice called amazon cloudfront\nso cloudfront allows you to deploy a\ncloudfront distribution\nso you can have your application source\ndeployed in for example north america\nbut what if you have customers that are\nlocated in europe or asia or australia\nif you don't use cloudfront then any\ncustomer is going to have to hit that\nnorth america server which you know does\ntake some time so there's going to be\nsome performance degradation with\ncloudfront you can set up and deploy\ndistributions that replicate some of\nyour content from your general object\nstorage which we're going to talk about\na little bit later and then replicate\nthat content to regional nodes that are\nlocated all across the world close to\nyour end users and what that allows you\nto do is get some better performance for\nmuch of this static content so great for\napplications that want to optimize the\nexperience for the user\nokay so so far we talked about quite a\nfew concepts talked about like routing\napis user pools load balancing compute\ndatabases\npackaged infrastructure caching\nnow i want to talk about some other\ncomponents in terms of like how do we\nactually deploy and monitor these\napplications so in terms of deployment\nthere's actually four different\nsmaller services i want to say that aws\nprovides and these kind of work hand in\nhand for deployment pipeline so let's\npeel these back one by one so the first\nservice at hand is code commits now what\ncode commit is basically for is for\nstoring your source code so you can\neither store your source code directly\ninside code commit as a service or you\ncan integrate code commit with third\nparty providers such as\ngithub if you have a private github\nrepository really the option is up to\nyou now code commit on its own isn't\ntoo impressive or too powerful but it's\nthe integration with some of these other\nservices that do make it powerful and\nthe next one is code build now code\nbuild allows you to take your source\nthat's located in code commit or any\nother kind of third-party connected\nrepository and then build that up into\nartifacts it also allows you to create\nand run tests in a test environment for\nyour source code and when you combine\nthat with some other components that\nwe're going to get to in a second you\ncan build some pretty sophisticated ci\ncd pipelines that have multiple\ndifferent steps here in terms of running\nyour unit tests and your integration\ntests and all that but we'll get to that\nin a second here so yeah code build is\nfor building and testing your source\ncode now how do we actually deploy that\nsource code out to our compute\ninfrastructure here well that's the job\nfor code deploy and like the name kind\nof implies it's all about taking these\nartifacts that are built in the build\nstep and then knowing how to integrate\nwith these other compute layers to\nactually deploy your artifacts onto\nthese different types of services so\nthat's what code deploy is all about\nso so far these are kind of individual\nbuilding blocks that are chained\ntogether but don't really give you a way\nto kind of orchestrate a sophisticated\ndeployment pipeline and that's what this\nlast service is for and that's called as\nyou may imagine code pipeline now code\npipeline is kind of like a deployment\norchestration service so code pipeline\nallows you to define a kind of a\nworkflow of the different stages that\nyour application will run through so for\ninstance you first you have your source\ncode then you have a build step then you\nhave a test step and then maybe you\ndeploy that source code to a test\nenvironment and then after the test you\nrun another set of tests and then after\nthat maybe you deploy to your production\nenvironment so code pipeline allows you\nto take these smaller building blocks\nhere and weave them together to build a\npretty sophisticated ci cd pipeline and\nif you're interested i do have a video\non this where i kind of walk you through\nhow to set up a pipeline with all these\ndifferent components here as well\ni'll put a link to that in the\ndescription so you can check that out\nlater so that's it for deployments now\nwhat about monitoring um and i should\nsay that i have monitoring here kind of\nbarred over kind of this section of the\ndiagram but monitoring really applies to\nthis entire diagram for everything that\nwe've discussed so far and everything\nthat we will discuss monitoring is a\nvery important concept and if you're\nrunning any kind of production workload\nyou need to have you know monitoring\nconfigured and know where to look to\ndetermine when things are going wrong\nand you need to step in or when things\nare fine and you can go home and sleep\nnicely on your bed so there's two key\nservices that are involved in monitoring\nand the first one let's start on the\nright here and that's amazon cloud watch\nso cloud watch i want to call it kind of\nlike an umbrella service because there's\na lot of different features that are\ninside cloudwatch but by far the most\nimportant feature in my opinion is the\nability to evaluate your metrics on many\nof these other aws services so you can\ngo into cloudwatch and view different\nmetrics on your ec2 machines to see over\ntime in chart format you know what is it\ncpu utilization what it's what is its\nmemory utilization for your lambda maybe\nyou want to know what are the concurrent\nnumber of invocations or all the\ninvocations in one day the count that is\nso you use cloudwatch to derive that\nkind of information another useful\nfeature is logging so for many of these\napplications you're going to be emitting\napplication logs in terms of what your\napplication is doing for other services\nthat are just kind of managed services\nthat sit on their own often these\nservices will integrate with cloudwatch\nto give you kind of administration level\nevents whenever things are happening on\nthe services if you're using that piece\nof infrastructure so you're going to be\nusing cloudwatch quite a bit and in fact\nthey just released a new feature\nrecently called cloudwatch insights that\nlets you search over very very large\nvolumes of cloudwatch data using kind of\nlike a sql style language so it makes it\nvery very convenient to find certain log\nlines if you're looking for them in just\nkind of a giant mess of log files now\nthe other service that's important in\nterms of monitoring is one that's called\ncloudtrail and cloudtrail is a little\nbit different than cloudwatch cloudwatch\nhelps you monitor the state of your\napplications in your aws account cloud\ntrail is more in terms of kind of an\naudit trail of the operations that are\nbeing performed on your infrastructure\nhere not only the operations that are\nbeing performed but who is performing\nthose operations\nwhether or not that's an application so\nlike a lambda function calling a\ndatabase or maybe it's a user that kind\nof went rogue and maybe they're deleting\nall your infrastructure cloudtrail is\ngoing to offer you different types of\nevents that allow you to gain insight\ninto who is accessing different services\nand what they are doing on those\nservices so the types of events can\neither be at the\nkind of control or administration level\nthose are just kind of when your\ninfrastructure gets provisioned or\ndeleted or modified in any way there's\nalso data level\nevents and the the kind of collection of\nevents is called trails so the data\nlevel events give you a little bit more\ngranular data so for something if you\nconfigured it on a dynamodb table it'll\ngive you log information on every single\nrequest that comes to your table i don't\nadvise it you're going to be chewing\nthrough a lot of bandwidth for\nbasically log storage but you can enable\nthat if there's a situation where you\nkind of need to know\nwho is hitting this database\nand then the third one is kind of a\nproactive one it's called insights and\ninsights you can configure it to\nautomatically monitor your account and\naws uses machine learning to monitor the\ncloudtrail events for any anomalies so\nvery useful for kind of being proactive\nabout security threats\nnow one other service that i think we\nshould mention at this point\nthat is kind of similar to monitoring in\nthat it applies to any of these\ndifferent infrastructure components is a\nservice called uh identity and access\nmanagement which is often referred to as\niam for short so iam is kind of a\nsecurity management service for aws\nyou can you create high-level entities\nsuch as users or roles and associated\nwith these users are policies now these\npolicies are important because by\ndefault a user will not have any kind of\npermissions to do anything on aws unless\nyou define a im policy that gives that\nuser to perform that action in other\nwords aws security management uses a\nimplicit deny operation in that you're\ndenied access to everything unless\nsomeone says otherwise so that's what\nyou do in iem you create these iem\npolicies you attach these policies to\nusers you can assign users to different\ngroups that have a kind of a policy\npermission set predefined and applied to\nanyone in the group and you can also use\nit to create accounts that users can log\nin directly so a developer a can have\ntheir own account developer b can have\ntheir own so on and so forth so again\nidentity management is definitely\nsomething to be very familiar with\nyou're going to be using it pretty much\ni want to say every day if you're\nworking with aws because you're always\nyou know trying to get access to\nsomething if you're experimenting with a\nnew service or feature you're going to\nneed to give yourself access so get\nfamiliar with it you're going to want to\nknow about it and if you haven't spent\nthe time to learn it you're going to\nkind of stumble over a lot of ambiguous\npermission related errors and i do have\na video on iem that you should\ndefinitely check out to learn about\nthese concepts more in detail and so now\ni want to talk about two components here\ni want to talk about uh rapid\ndevelopment and then some infrastructure\nas code components as well so let me\njust erase some of this i realize i just\nmade a mistake as i'm erasing it now\nthis stuff was kind of positioned in the\nwrong way in the layer beneath it but i\nhope you forgive me\nso this first section here is for\ninfrastructure as code now for those of\nyou that are living under a rock for the\npast 10 years infrastructure is coded as\nthe preferred way to create and manage\nyour infrastructure no one really goes\ninto the console anymore to create\nthings and manage your infrastructure\nunless it's kind of your first time\ndoing it and you're just experimenting\nit's much more preferred to write your\ninfrastructure in a code format or\nconfiguration format so that it can be\neasily picked up and deployed to a new\nenvironment and cloudformation is one of\nthe options that allows you to do that\nnow cloudformation is a service that\nallows you to write json or yaml based\nkind of a configuration files and so you\nupload these files to cloudformation and\ncloudformation will be responsible for\ncalling these other aws services to\nprovision your infrastructure so for\nexample you can write a a template file\nhere that has a dynamodb table in it and\nmaybe a lambda function in it and when\nyou upload your your change set here\ninto cloudformation cloudformation will\ngo and create your lambda function it'll\ngo and create your dynamodb table\nit's very very convenient it's pretty\nquick however it does have some\ndownfalls and the specific one is that\nwriting your your infrastructure as yaml\nor json kind of sucks\nand that's where cdk comes in it kind of\nfixes this problem cdk stands for cloud\ndevelopment kit and it is a method of\nwriting your infrastructure as code that\nis a little bit more fluent for us\ndevelopers it involves you writing\nactual code so you know you have access\nto loops primitive functions\nand what this allows you to do is be a\nlittle bit more expressive with your\ninfrastructure definition files so that\nyou can be a little bit more dynamic and\nstructure your code in a much simpler\nway\nusing functions using just general\ncloudformation yaml files it gets\nannoying quick you don't have access to\nthings like autocomplete whereas with\ncdk you do and the cool thing about cdk\nespecially is that it's very easy to use\nwhat are called higher level constructs\nand these constructs can contain an\nentire\napplication specification so you can\nhave a construct that's an entire\nserverless architecture that contains a\nlambda function contains a dynamodb\ntable contains i don't know a load\nbalancer with api gateway and a cognito\nuser pool\nall you have to do is use that construct\nand it's just one line that you write in\nyour cdk code\nnow behind the scenes cdk does generate\nthe code that you write into\ncloudformation and then cloudformation\nis the one that deploys that out into\naws but it's just a much more preferred\nway in my opinion easier way to deploy\nyour infrastructure out to the cloud now\nthere are some other options that you\ncan use for infrastructure as codes such\nas i believe terraform and i think the\nother one is called polumi or something\nlike that you can also use those that\nintegrate with aws as well but if you're\nlooking to do everything native in aws\nyou probably want to use cdk also learn\ncloud formation while you're at it as\nwell now two services in the rapid\ndevelopment category that are of note\nare firstly aws amplify so aws amplify\nis kind of a tool kit style service that\nallows you to rapidly build and deploy\nentire applications here so where where\namplify is different is that for a it's\nprimarily a cli tool so you're going to\nbe using the cli a lot and secondly it\nfocuses more on the functionality and\nnot necessarily on the infrastructure\nof what you're trying to provision so\nfor example with amplify you can run a\nvery simple command to add an api it's\nliterally add api and behind the scenes\namplify it'll deploy maybe a lambda\nfunction with an api gateway allows you\nto add things such as user\nauthentication and authorization behind\nthe scenes it'll give you a cognito user\npool\nyou can add things such as a relational\ndatabase it'll give you an aurora\nprobably serverless database that you\ncan use\nso it's much more focused on the\nfunctionality and for a lot of people\nthat's great amplify is a great choice\nbecause you know maybe they're coming\nfrom a different cloud provider you\ndon't want to learn about all this\ndifferent stuff maybe they're more\noverwhelmed than you and they haven't\nwatched this video yet and they don't\nknow about all these different aws\nservices but amplify is a great\nabstraction for you but the one problem\nwith it is that it's the abstraction so\nit's great when everything is working\ncorrectly but anytime something breaks\nor something isn't quite working as it\nshould you're gonna need to dive into\nthese independent services and if you're\nusing amplify you probably don't know\nanything about these other aws services\nso that's going to be a pretty big\nchallenge so if you want to stay within\na well-defined box then amplify is great\nand if you want to venture out of that\nbox you probably shouldn't use amplify\nand should just like write your own cdk\ncode and understand these other aws\nservices um before you get into them but\napply is great for some of you that um\nmaybe you just you don't care about aws\nservices and you just want to focus on\nthe functionality so that's where\namplify is great now we have sam so sam\nstands for serverless application model\nand sam is great in terms of providing\nshorthands of uh common infrastructure\nsetups that would typically be written\nin cloud formation there's sam templates\nthat you can use that\nkind of similar to what those higher\norder constructs do in cdk similar idea\nwith sam so it can kind of handle much\nof the complexity of the setup for you\nyou'll need to find a couple\nspecifications or a couple fields and\nthe other stuff it gives an intelligent\nkind of default\nso sam is also great for local testing\nof your lambda functions so you can use\nsam to\nbuild and run your lambda functions\nlocally before you deploy them into aws\nso that's another great reason to use it\nas well\nall right so let's talk about this kind\nof half of this diagram over here and so\num i put this hypothetical use case here\nso search query submission i was\nthinking like maybe we're building an\napplication here that's similar to\ngoogle so you have someone that's\nsubmitting a request to our application\nlayer here through our back end\nmaybe someone is searching for i don't\nknow aws on google someone's going to\nstore that in a database somewhere right\nand then you know as a typical service\noriented architecture you probably want\nto send a notification out to other\nmicroservices that hey someone search\nfor this thing maybe someone else or\nsome other microservice cares about it\nmaybe an analytics service or some other\ntype of service so what do we use for\nevent coordination or pub sub or\nnotifications of other services that\nsomething has changed in our application\nso there's a couple different services\nat play here so uh\nthere's a little bit of a misalignment\nhere but that's okay\nso the first one is what is called sns\nso simple notification service and sns\nis basically a pub sub service and it is\nthe pub in the sub so it is responsible\nfor publishing notifications to a topic\nand a topic can have many different\nsubscribers\nso the idea is that kind of a domain\nmodel owner such as you know search\nquery service or whatever\nwhenever it's kind of puts an entry into\nits database it wants to notify other\nservices that hey someone put something\ninto my system you guys should check\nthis out that system will use an sns\ntopic that they publish to to notify\nthese other microservices that something\nchanged so it is the publisher and the\nsubscribers can be many different types\nof infrastructure you can have other aws\nservices that are your subscribers such\nas a lambda function you can have a http\nendpoint that exists on maybe an ec2\ninstance or something like that\nyou can also have a very common one\nwhich is an sqsq or a simple q service\nqueue\nand so\nsqs is simple queue service and this\nservice is effectively responsible for\nholding messages so that you can process\nthem at a later time and so you define\ncues and queues can be connected to from\nmany different types of\ncompute infrastructure so you can\nconnect your queue to a lambda function\nor an ec2 machine or an ecs task and\nthose pieces of infrastructure will pull\nyour queue for new messages and then\nperform some type of action when it\nfinds new messages in the queue so\ntypically people set up an sns to an sqs\nso the sns topic being the publisher and\nthe sqsq being the subscriber and if\nyou're confused at all between the\ndifference of these two surfaces i do\nhave a video on this that i discuss this\nat nauseam and i'll put that in the\ndescription so that you can check that\nout as well\nbut basically if you want to tell other\npeople about data or data changes use\nsns if you want to be notified of when\nsomething changes in someone else's data\nuse sqs that's the basic gist of it now\nthere is another service that's pretty\nsimilar to sns and it's one that's\ncalled eventbridge and eventbridge is\nvery very similar in terms of what sns\noffers although it does offer some\ndistinct benefits so first of all\ninstead of sns topics eventbridge uses\nthis concept of eventbuses and you can\nintegrate your event bridge event bus\nwith many different kind of application\nactions all across aws so for instance\nmaybe\nyou want to integrate your event bridge\nwith whenever an ec2 machine gets\nterminated maybe that's some kind of\noperation that you're interested in or\nwhenever a lambda function gets updated\nor whenever the configuration on your\ndynamo table gets changed you can\nintegrate those events into eventbridge\nand then you can define rules that\nspecify who to deliver these events to\nso similar to how sns\nhas subscribers eventbridge also has\nsubscribers and you define these rules\nand target groups of who to deliver\nthese messages to depending on the type\nof event\nnow where eventbridge really shines over\nsomething like sns is that it has two\nimportant features the first one is\nsomething that's called schema discovery\nso if you are using sns and you're\npublishing to your topic and someone is\ngetting a message in your sqsq what does\nthe schema of that message look like\nwhat does the format of the message look\nlike does it have no is it a json is it\na an xml file does it have you know foo\nas a key and bar as a value like is it\nan array like what's in there so\neventbridge allows you to define these\nschema definitions to help subscribers\nget access to the models that are going\nto be delivered from the eventbridge\nevent bus which is a very very nifty\nfeature and also allows you to search\nthrough different schemas to maybe find\nthe one that's necessary for your\napplication another important feature is\nthird-party integrations and this is\nsomething that's really cool with\neventbridge so an example third-party\nintegration that you can work with is\nsomething like shopify so shopify has\nnative integration with eventbridge so\nwhat that means is that anytime someone\nplaces a order on your shopify\ne-commerce website that can be directly\nintegrated into eventbridge and then you\ncan have specific rules set up to\ndeliver that\nnotification to maybe a microservice\nover here or a backend service that\ncares about those updates or maybe you\njust want to deliver that to general\nobject storage which can happen as well\nbut eventbridge is great because it\nallows for these third-party\nintegrations such as shopify pagerduty\nand many many others and that's not\nreally natively offered in sns so that's\nwhere it kind of shines now another\nservice that's in this kind of event and\ncoordination department let me just\nerase this here so it looks pretty\nsmooth\nis step functions and honestly out of\nall of these step functions are one of\nmy favorite services offered in all of\naws\nand what step functions allow you to do\nis to define kind of workflows um so\nit's more like um i want to draw it out\nbut maybe i won't but you define like\nworkflows and different steps that you\nhave so you have a starting step and\nthen next you want to do like x step and\nthen y step you can have conditional\nlogic in your step function workflows\nand so what this allows you to do is\nbuild things like you know a customer\nordering workflow where the first step\nis to validate\nthe details of the order the next step\nis to package that order in the\nwarehouse the next step is to\nyou know send out delivery notifications\nand send out a notification to this to\nthe customer all of that can be modeled\nin a step function workflow and you can\nhave kind of fail safe and conditional\nlogic in that workflow so if anything\nfails then a different path or a\ndifferent choice is taken and it offers\ndirect integration with many other aws\nservices so you can use a service like\naws lambda to kind of glue different\nparts of the workflow together and this\nis going to be completely serverless so\nin summary step functions are kind of\nthis orchestration service that allows\nyou to define these very sophisticated\nand large workflows that may run through\nmany many steps\nso after you've kind of\ndone your event delegation here maybe\nyou want to store copies of those events\nin object storage or maybe you want to\nkind of replicate whatever is in your\ndynamo or aurora table or rds table into\njust some cheap cost effective general\nobject storage so what service would you\nuse for that well the service you're\ngoing to be using is one that is one of\nthe oldest in aws and that's called\namazon s3\nstands for simple storage service and it\nis just your kitchen sink of data\nstorage very cheap very scalable you can\nstore like basically exobytes or\npetabytes of data in here just massive\nmassive amounts at very very affordable\nrates and you can also move your data\nover time into cold storage to get even\nbetter price points however it can scale\nreally well\nso when we were talking about like\ncaching earlier when we were talking\nabout cloudfront you would typically\nstore your asset files in your s3\nbuckets and then connect that to your\ncloudfront distribution so that it can\nbe replicated to cloudfront and serve to\nall your customers around the world so\ns3 can be used to store basically any\ntype of file images css video\nany type of media that you can think of\nyou can store in s3 there are some\npretty reasonable limits on file sizes\nso you have to check that out if you\nwant to upload some massive files but s3\nis a super super important service\nyou should definitely know about it if\nyou're learning aws\nokay so now for analytical processing\nsay we got our data into s3 now you know\nsomeone saved it into their database\nover here we dispatched an event then we\nstored it in s3 now we want to run some\nanalytics on it so what infrastructure\noption should we use for that so i want\nto start with the bottom one here\nemr and emr is a large-scale distributed\ndata processing system so it allows you\nto run many different frameworks\nincluding the most common ones so spark\nclusters hive\npresto you can even run it in a\nserverless mode now but emr is going to\nbe the service where you're going to do\njust massive\nnumber crunching to perform some kind of\nanalytics\nso the other option to use instead of\nemr is one that i'm a really big fan of\nwhich is amazon athena and athena is a\ncompletely serverless big data\nprocessing or analytic service so how it\nworks is that you can keep your data\nstored in s3 you don't need to load it\ninto anywhere as you may with emr but\nyou keep your data stored in s3 athena\nwill directly connect to your s3 data\ncrawl your data automatically detect the\nschema of the data of whatever you have\nin your buckets and then create these\nkind of tables that you can query using\nsql and so whenever you dispatch a job\nto athena it uses aws infrastructure\nbehind the scenes to prioritize the\nrequest so you can run massive massive\nqueries on data that is already stored\nin s3 using amazon athena a really\nreally powerful analytics service and\njust number crunching service that's a\nvery viable option when compared to emr\nnow our next step is the data warehouse\nso where do we actually want to store\nthis data for things like you know\nbusiness intelligence or any types of\nanalytics that we may want to perform on\nit we don't want to store that in\nsomething like document db dynamo or any\nof these rds options over here because\nthey're not really meant for that\nso the service that you'd want to use\nfor that type of operation is amazon\nredshift and amazon redshift is a\ncolumnar style database that allows you\nto perform some very very large queries\nconcurrently so it can support many many\nusers at the same time it is a little\nbit expensive but they do offer a\nserverless mode i swear everything is\ngoing serverless these days like all of\nthese services now have some kind of\nserverless variation but anyways they\noffer a kind of a provision mode where\nyou can provision the nodes\nin a distributed way\nor there's a server list mode where it's\nkind of a pay-per-use type model\nhowever that's where you're going to be\nrunning your\nworkloads for your kind of olap style\nqueries that's going to happen in\nredshift and in fact there is kind of a\nconnection you can do with redshift and\ns3 so say there's like no analytics that\nyou want to do you can just deliver data\nto s3 and then set up an automatic load\njob to load that into redshift so that\nit can be available for this olap style\nquerying\nso redshift is another great one for\ndata engineers business intelligence\nusers\nanyone that wants to interact with data\nat scale using sql and the next one here\nis dashboarding so dashboarding for that\ni would use quicksite so quicksite is a\ntool that is great for end users so you\ngive users their independent logins they\ncan access\ndata whether it be in redshift or s3 or\nanything else they can create these kind\nof business facing dashboard so similar\nto what\ni think it's called a microsoft bi or\npower bi did for microsoft redshift kind\nof does for aws so that's what your end\nusers can use to explore your data\nthat's located in many of these\ndifferent aws services\nand one final thing before i let you go\nis this network boundary here so so aws\nis pretty big on security so it does\noffer a service that allows you to\nisolate all of your resources into a\nspecific isolated network and the\nservice that allows you to do that is\namazon vpc or virtual private cloud and\nthis service allows you to create your\nown vpcs that are basically private\nnetworking spaces for your\ninfrastructure to exist in so it's\ncompletely separate from all other aws\nusers it's just your networking space\nand you can connect your vpcs to other\nvpcs so that if you want to talk to\nother services and maybe a different\naccount\nyou can open up your vpc so that your\ninfrastructure is callable from the\npublic internet you can have very very\nlarge vpcs that host many many different\nmicroservices here or service oriented\narchitectures so there's a lot you can\ndo with vpcs in terms of defining the\nsetup and configuration in terms of the\nsecurity so there's a lot you can do\nwith vpcs in terms of setup to isolate\nyour resources from any other system and\nalso allows you to find some security\nrules to make sure that your\ninfrastructure is protected from any\noutside actor so if you enjoyed this\nvideo i'm going to put links in the\ndescription section to what i think are\npertinent videos on all of these\ndifferent aws services and if you want\nto learn more check out other ones here\non the right and thanks so much for\nwatching i hope you learned a lot about\naws services thanks so much and i'll see\nyou next time\n",
  "words": [
    "learning",
    "aws",
    "pretty",
    "intimidating",
    "hundreds",
    "services",
    "difficult",
    "understand",
    "one",
    "right",
    "tool",
    "trying",
    "accomplish",
    "video",
    "going",
    "help",
    "navigate",
    "complex",
    "world",
    "aws",
    "services",
    "going",
    "approach",
    "examining",
    "standard",
    "application",
    "architecture",
    "like",
    "see",
    "let",
    "take",
    "look",
    "architecture",
    "peeling",
    "back",
    "layers",
    "revealing",
    "aws",
    "services",
    "behind",
    "scenes",
    "application",
    "architecture",
    "pretty",
    "standard",
    "architecture",
    "web",
    "backend",
    "layer",
    "application",
    "layer",
    "kind",
    "organization",
    "architecture",
    "pretty",
    "familiar",
    "backend",
    "services",
    "third",
    "tier",
    "database",
    "layer",
    "includes",
    "uh",
    "relational",
    "could",
    "nosql",
    "database",
    "also",
    "caching",
    "well",
    "bunch",
    "components",
    "related",
    "deployment",
    "orchestration",
    "hold",
    "source",
    "code",
    "facilitate",
    "deployment",
    "also",
    "monitoring",
    "component",
    "monitoring",
    "state",
    "system",
    "uh",
    "load",
    "balancer",
    "dns",
    "pointing",
    "load",
    "balancer",
    "distribute",
    "traffic",
    "toolkits",
    "right",
    "event",
    "coordination",
    "say",
    "instance",
    "um",
    "application",
    "kind",
    "something",
    "like",
    "google",
    "search",
    "query",
    "submission",
    "like",
    "every",
    "time",
    "gets",
    "saved",
    "database",
    "want",
    "trigger",
    "kind",
    "event",
    "layer",
    "storage",
    "event",
    "analytical",
    "processing",
    "data",
    "warehouse",
    "finally",
    "dashboarding",
    "end",
    "users",
    "examine",
    "content",
    "also",
    "toolkits",
    "rapid",
    "development",
    "deploy",
    "little",
    "bit",
    "faster",
    "well",
    "finally",
    "left",
    "hand",
    "side",
    "two",
    "elements",
    "user",
    "pools",
    "define",
    "different",
    "users",
    "going",
    "interacting",
    "application",
    "course",
    "serve",
    "cache",
    "content",
    "pretty",
    "standard",
    "application",
    "let",
    "take",
    "look",
    "aws",
    "services",
    "behind",
    "scenes",
    "replace",
    "different",
    "elements",
    "first",
    "one",
    "dns",
    "service",
    "want",
    "use",
    "dns",
    "aws",
    "aws",
    "going",
    "amazon",
    "route",
    "53",
    "row",
    "53",
    "service",
    "define",
    "dns",
    "configuration",
    "including",
    "know",
    "going",
    "route",
    "traffic",
    "internet",
    "also",
    "supports",
    "things",
    "like",
    "know",
    "health",
    "checks",
    "endpoints",
    "traffic",
    "shaping",
    "want",
    "going",
    "done",
    "rel53",
    "service",
    "great",
    "familiar",
    "rel53",
    "probably",
    "going",
    "using",
    "time",
    "defining",
    "kind",
    "externally",
    "facing",
    "apis",
    "endpoints",
    "dns",
    "typically",
    "point",
    "endpoint",
    "load",
    "balancer",
    "aws",
    "couple",
    "options",
    "load",
    "balancers",
    "kind",
    "top",
    "level",
    "category",
    "something",
    "called",
    "elastic",
    "load",
    "balancer",
    "service",
    "two",
    "variations",
    "elastic",
    "load",
    "balancer",
    "called",
    "application",
    "load",
    "balancer",
    "operates",
    "l7",
    "layer",
    "applicable",
    "want",
    "use",
    "content",
    "http",
    "headers",
    "route",
    "traffic",
    "looking",
    "something",
    "little",
    "bit",
    "lower",
    "level",
    "aws",
    "also",
    "offers",
    "network",
    "load",
    "balancer",
    "operates",
    "l4",
    "level",
    "little",
    "bit",
    "cost",
    "effective",
    "supports",
    "higher",
    "throughput",
    "limits",
    "well",
    "elastic",
    "load",
    "balancer",
    "different",
    "options",
    "may",
    "want",
    "use",
    "terms",
    "web",
    "backend",
    "layer",
    "going",
    "first",
    "kind",
    "time",
    "request",
    "front",
    "end",
    "touches",
    "back",
    "end",
    "compute",
    "couple",
    "different",
    "options",
    "decide",
    "leverage",
    "compute",
    "options",
    "really",
    "matter",
    "web",
    "backend",
    "layer",
    "application",
    "layer",
    "compute",
    "options",
    "select",
    "either",
    "two",
    "things",
    "options",
    "available",
    "us",
    "first",
    "option",
    "amazon",
    "ec2",
    "ec2",
    "stands",
    "elastic",
    "compute",
    "cloud",
    "old",
    "service",
    "basic",
    "gist",
    "service",
    "rent",
    "virtual",
    "machines",
    "pay",
    "hour",
    "really",
    "convenient",
    "ec2",
    "machines",
    "set",
    "whatever",
    "please",
    "use",
    "host",
    "databases",
    "want",
    "host",
    "wordpress",
    "blog",
    "create",
    "deploy",
    "application",
    "rest",
    "api",
    "really",
    "flexible",
    "service",
    "allows",
    "whatever",
    "want",
    "drawbacks",
    "ec2",
    "include",
    "setup",
    "configuration",
    "going",
    "go",
    "use",
    "folks",
    "shy",
    "away",
    "ec2",
    "favor",
    "something",
    "little",
    "bit",
    "interested",
    "serverless",
    "next",
    "point",
    "comes",
    "aws",
    "lambda",
    "aws",
    "lambda",
    "serverless",
    "compute",
    "infrastructure",
    "option",
    "basically",
    "means",
    "define",
    "called",
    "functions",
    "functions",
    "snippets",
    "code",
    "small",
    "large",
    "pieces",
    "code",
    "aws",
    "require",
    "worry",
    "infrastructure",
    "ec2",
    "basically",
    "write",
    "deploy",
    "functions",
    "aws",
    "worries",
    "deploying",
    "application",
    "onto",
    "container",
    "scaling",
    "application",
    "whenever",
    "number",
    "requests",
    "lambda",
    "function",
    "increase",
    "really",
    "really",
    "attractive",
    "model",
    "lambda",
    "paper",
    "invocation",
    "really",
    "cost",
    "effective",
    "application",
    "workloads",
    "bursty",
    "traffic",
    "patterns",
    "applications",
    "traffic",
    "day",
    "kind",
    "recedes",
    "nothing",
    "evening",
    "lambda",
    "really",
    "really",
    "popular",
    "service",
    "getting",
    "popular",
    "day",
    "definitely",
    "one",
    "consider",
    "want",
    "learn",
    "aws",
    "lambda",
    "check",
    "brand",
    "new",
    "udemy",
    "course",
    "top",
    "right",
    "video",
    "kind",
    "deploying",
    "infrastructure",
    "onto",
    "machines",
    "directly",
    "using",
    "serverless",
    "model",
    "third",
    "option",
    "kind",
    "docker",
    "folks",
    "docker",
    "fans",
    "third",
    "option",
    "amazon",
    "ecs",
    "ecs",
    "stands",
    "elastic",
    "container",
    "service",
    "also",
    "variation",
    "ecs",
    "called",
    "eks",
    "elastic",
    "kubernetes",
    "service",
    "essentially",
    "ecs",
    "service",
    "help",
    "manage",
    "containers",
    "helps",
    "set",
    "servers",
    "integrated",
    "load",
    "balancing",
    "auto",
    "scaling",
    "helps",
    "facilitate",
    "deployments",
    "containers",
    "kind",
    "like",
    "something",
    "middle",
    "ec2",
    "lambda",
    "interested",
    "learning",
    "like",
    "three",
    "services",
    "different",
    "compute",
    "options",
    "available",
    "video",
    "compare",
    "three",
    "things",
    "put",
    "comments",
    "description",
    "section",
    "like",
    "kind",
    "saying",
    "uh",
    "application",
    "layer",
    "really",
    "change",
    "terms",
    "compute",
    "options",
    "kind",
    "fundamental",
    "building",
    "blocks",
    "available",
    "regardless",
    "web",
    "backend",
    "layer",
    "kind",
    "business",
    "logic",
    "heavy",
    "heavy",
    "application",
    "layer",
    "another",
    "service",
    "helps",
    "kind",
    "facilitate",
    "creation",
    "rest",
    "apis",
    "hosting",
    "apis",
    "one",
    "called",
    "api",
    "gateway",
    "api",
    "gateway",
    "super",
    "super",
    "powerful",
    "service",
    "offers",
    "additional",
    "functionality",
    "top",
    "kind",
    "using",
    "load",
    "balancer",
    "distribute",
    "traffic",
    "different",
    "nodes",
    "types",
    "uh",
    "kind",
    "features",
    "api",
    "gateway",
    "offers",
    "things",
    "like",
    "api",
    "throttling",
    "authorization",
    "api",
    "say",
    "example",
    "building",
    "kind",
    "private",
    "api",
    "want",
    "accessible",
    "users",
    "user",
    "pool",
    "going",
    "talk",
    "next",
    "year",
    "set",
    "api",
    "gateway",
    "validate",
    "know",
    "token",
    "valid",
    "uh",
    "integrating",
    "user",
    "pool",
    "service",
    "define",
    "also",
    "offers",
    "features",
    "model",
    "validation",
    "define",
    "types",
    "models",
    "api",
    "supports",
    "validation",
    "performed",
    "request",
    "actually",
    "gets",
    "backend",
    "layer",
    "like",
    "bunch",
    "different",
    "combinations",
    "dns",
    "pointing",
    "api",
    "gateway",
    "points",
    "load",
    "balancer",
    "points",
    "infrastructure",
    "layer",
    "want",
    "take",
    "advantage",
    "features",
    "described",
    "speaking",
    "user",
    "pools",
    "kind",
    "touched",
    "might",
    "well",
    "reveal",
    "service",
    "one",
    "called",
    "amazon",
    "cognito",
    "amazon",
    "cognito",
    "kind",
    "powerful",
    "underrated",
    "service",
    "allows",
    "create",
    "user",
    "pools",
    "user",
    "pools",
    "kind",
    "similar",
    "kind",
    "login",
    "registration",
    "website",
    "know",
    "create",
    "user",
    "provide",
    "login",
    "username",
    "phone",
    "number",
    "recovery",
    "option",
    "kind",
    "stuff",
    "cognito",
    "users",
    "sign",
    "accounts",
    "directly",
    "within",
    "cognito",
    "using",
    "hosted",
    "ui",
    "integrate",
    "identity",
    "providers",
    "google",
    "facebook",
    "amazon",
    "anytime",
    "seen",
    "like",
    "login",
    "amazon",
    "log",
    "google",
    "facebook",
    "identity",
    "provider",
    "could",
    "integrated",
    "cognito",
    "well",
    "useful",
    "applications",
    "require",
    "user",
    "registration",
    "combine",
    "api",
    "gateway",
    "things",
    "like",
    "ensuring",
    "user",
    "part",
    "certain",
    "user",
    "group",
    "request",
    "validated",
    "flows",
    "backend",
    "layer",
    "little",
    "bit",
    "cognito",
    "let",
    "kind",
    "finish",
    "architecture",
    "discussion",
    "talk",
    "little",
    "bit",
    "database",
    "layers",
    "storage",
    "slash",
    "persistence",
    "layer",
    "lot",
    "applications",
    "caching",
    "enabled",
    "increase",
    "performance",
    "lookups",
    "items",
    "quite",
    "common",
    "maybe",
    "want",
    "increased",
    "performance",
    "aws",
    "service",
    "allows",
    "happen",
    "service",
    "called",
    "elastic",
    "cache",
    "elastic",
    "cache",
    "kind",
    "comes",
    "two",
    "different",
    "flavors",
    "either",
    "go",
    "flavor",
    "memcache",
    "based",
    "choose",
    "redis",
    "redis",
    "probably",
    "popular",
    "one",
    "people",
    "people",
    "think",
    "caches",
    "think",
    "redis",
    "comes",
    "mind",
    "almost",
    "immediately",
    "regardless",
    "choose",
    "using",
    "elastic",
    "cache",
    "caching",
    "service",
    "going",
    "based",
    "key",
    "value",
    "lookups",
    "going",
    "worry",
    "hosting",
    "infrastructure",
    "essentially",
    "kind",
    "cluster",
    "nodes",
    "memory",
    "optimized",
    "nodes",
    "plenty",
    "memory",
    "facilitate",
    "application",
    "needs",
    "um",
    "still",
    "worry",
    "maintenance",
    "cluster",
    "know",
    "node",
    "replacement",
    "hardware",
    "failures",
    "things",
    "like",
    "relatively",
    "service",
    "nuances",
    "may",
    "need",
    "know",
    "terms",
    "maintenance",
    "alarming",
    "terms",
    "store",
    "database",
    "store",
    "relational",
    "database",
    "nosql",
    "database",
    "bunch",
    "different",
    "options",
    "choose",
    "one",
    "aws",
    "likes",
    "push",
    "lot",
    "relatively",
    "popular",
    "one",
    "called",
    "amazon",
    "aurora",
    "amazon",
    "aurora",
    "built",
    "amazon",
    "database",
    "compatible",
    "sequel",
    "postgres",
    "believe",
    "postgres",
    "still",
    "preview",
    "mode",
    "fully",
    "managed",
    "rds",
    "database",
    "kind",
    "makes",
    "life",
    "easier",
    "terms",
    "worrying",
    "things",
    "like",
    "administration",
    "monitoring",
    "auto",
    "scaling",
    "storage",
    "auto",
    "scaling",
    "compute",
    "auto",
    "scaling",
    "also",
    "offers",
    "something",
    "called",
    "data",
    "api",
    "use",
    "call",
    "rds",
    "database",
    "using",
    "rest",
    "api",
    "opposed",
    "traditional",
    "kind",
    "database",
    "connection",
    "lot",
    "features",
    "coming",
    "aurora",
    "may",
    "really",
    "want",
    "consider",
    "thinking",
    "using",
    "relational",
    "database",
    "relatively",
    "similar",
    "service",
    "amazon",
    "rds",
    "relational",
    "database",
    "service",
    "two",
    "different",
    "rds",
    "database",
    "service",
    "allows",
    "select",
    "database",
    "configuration",
    "would",
    "like",
    "get",
    "pick",
    "common",
    "database",
    "uh",
    "platforms",
    "mysql",
    "postgres",
    "microsoft",
    "sql",
    "server",
    "oracle",
    "cassandra",
    "probably",
    "couple",
    "ones",
    "missing",
    "well",
    "rds",
    "probably",
    "would",
    "think",
    "people",
    "familiar",
    "lot",
    "customers",
    "deciding",
    "go",
    "aurora",
    "option",
    "makes",
    "life",
    "easier",
    "one",
    "thing",
    "aurora",
    "offer",
    "serverless",
    "compute",
    "model",
    "well",
    "need",
    "worry",
    "provisioning",
    "type",
    "hardware",
    "behind",
    "scenes",
    "would",
    "rds",
    "database",
    "use",
    "serverless",
    "model",
    "kind",
    "like",
    "auto",
    "scaling",
    "type",
    "database",
    "thing",
    "similar",
    "lambda",
    "ec2",
    "aurora",
    "server",
    "list",
    "rds",
    "provisions",
    "infrastructure",
    "whenever",
    "request",
    "rate",
    "requires",
    "bursty",
    "workload",
    "add",
    "nodes",
    "scale",
    "database",
    "handle",
    "volume",
    "little",
    "bit",
    "rds",
    "let",
    "talk",
    "nosql",
    "database",
    "options",
    "definitely",
    "popular",
    "nosql",
    "database",
    "going",
    "hear",
    "lot",
    "dynamodb",
    "dynamodb",
    "nosql",
    "database",
    "optimized",
    "key",
    "value",
    "lookups",
    "fully",
    "managed",
    "database",
    "service",
    "means",
    "worry",
    "anything",
    "regards",
    "infrastructure",
    "hardware",
    "really",
    "worry",
    "scaling",
    "configuration",
    "dynamodb",
    "handles",
    "auto",
    "scaling",
    "behind",
    "scenes",
    "really",
    "really",
    "powerful",
    "nosql",
    "database",
    "kind",
    "used",
    "building",
    "block",
    "much",
    "internet",
    "really",
    "take",
    "look",
    "one",
    "aws",
    "white",
    "papers",
    "dynamodb",
    "unfortunately",
    "went",
    "one",
    "day",
    "brought",
    "large",
    "part",
    "internet",
    "including",
    "common",
    "services",
    "love",
    "like",
    "netflix",
    "websites",
    "well",
    "dynamodb",
    "super",
    "super",
    "powerful",
    "popular",
    "nosql",
    "database",
    "aws",
    "really",
    "service",
    "kind",
    "heart",
    "many",
    "aws",
    "services",
    "well",
    "like",
    "behind",
    "scenes",
    "yeah",
    "dynamodb",
    "mongodb",
    "type",
    "person",
    "coming",
    "aws",
    "want",
    "learn",
    "dynamodb",
    "service",
    "option",
    "aws",
    "also",
    "offers",
    "called",
    "documentdb",
    "like",
    "see",
    "documentdb",
    "similar",
    "dynamo",
    "fully",
    "managed",
    "service",
    "time",
    "compatible",
    "mongodb",
    "know",
    "use",
    "mongodb",
    "normally",
    "would",
    "fully",
    "managed",
    "way",
    "satisfy",
    "mongodb",
    "lovers",
    "looking",
    "something",
    "supports",
    "flexible",
    "querying",
    "scale",
    "may",
    "want",
    "consider",
    "service",
    "called",
    "open",
    "search",
    "open",
    "search",
    "new",
    "name",
    "traditional",
    "elastic",
    "search",
    "service",
    "believe",
    "aws",
    "elasticsearch",
    "falling",
    "aws",
    "kind",
    "came",
    "service",
    "really",
    "elasticsearch",
    "behind",
    "scenes",
    "open",
    "search",
    "allows",
    "nosql",
    "databases",
    "perform",
    "queries",
    "kind",
    "fuzzy",
    "nature",
    "give",
    "records",
    "value",
    "equals",
    "x",
    "z",
    "know",
    "value",
    "two",
    "equaling",
    "something",
    "else",
    "value",
    "three",
    "equaling",
    "something",
    "else",
    "also",
    "allows",
    "really",
    "powerful",
    "grouping",
    "features",
    "dynamic",
    "grouping",
    "well",
    "comes",
    "cabana",
    "well",
    "open",
    "source",
    "dashboarding",
    "technology",
    "take",
    "look",
    "data",
    "inside",
    "open",
    "search",
    "database",
    "used",
    "quite",
    "effectively",
    "replacement",
    "rds",
    "cases",
    "really",
    "neat",
    "service",
    "consider",
    "well",
    "wanted",
    "pause",
    "talk",
    "services",
    "really",
    "fit",
    "molds",
    "kind",
    "play",
    "role",
    "terms",
    "packaged",
    "infrastructure",
    "far",
    "talked",
    "kind",
    "lower",
    "level",
    "building",
    "block",
    "services",
    "aws",
    "offer",
    "kind",
    "packaged",
    "infrastructure",
    "services",
    "make",
    "life",
    "easier",
    "developer",
    "tell",
    "want",
    "build",
    "application",
    "architecture",
    "lot",
    "moving",
    "pieces",
    "different",
    "compute",
    "option",
    "load",
    "balancing",
    "api",
    "gateways",
    "databases",
    "lot",
    "stuff",
    "going",
    "aws",
    "services",
    "kind",
    "offer",
    "combination",
    "different",
    "elements",
    "single",
    "product",
    "instead",
    "worry",
    "know",
    "building",
    "blocks",
    "deciding",
    "one",
    "want",
    "use",
    "use",
    "infrastructure",
    "services",
    "bundle",
    "functionality",
    "together",
    "often",
    "abstract",
    "complexity",
    "away",
    "sacrifice",
    "kind",
    "configuration",
    "control",
    "different",
    "services",
    "well",
    "first",
    "one",
    "elastic",
    "bean",
    "stock",
    "elastic",
    "beanstalk",
    "pretty",
    "old",
    "service",
    "allows",
    "set",
    "kind",
    "web",
    "application",
    "could",
    "containerized",
    "web",
    "application",
    "well",
    "makes",
    "easier",
    "set",
    "app",
    "different",
    "components",
    "backend",
    "layer",
    "load",
    "balancing",
    "also",
    "lets",
    "set",
    "auto",
    "scaling",
    "monitoring",
    "comes",
    "lot",
    "components",
    "manage",
    "one",
    "spot",
    "elastic",
    "bean",
    "stock",
    "console",
    "still",
    "controlling",
    "infrastructure",
    "elastic",
    "bean",
    "stock",
    "kind",
    "like",
    "orchestrator",
    "service",
    "go",
    "different",
    "services",
    "provision",
    "needs",
    "type",
    "application",
    "trying",
    "deploy",
    "onto",
    "another",
    "service",
    "came",
    "pretty",
    "recently",
    "something",
    "similar",
    "one",
    "called",
    "app",
    "runner",
    "app",
    "runner",
    "behind",
    "scenes",
    "uses",
    "ecs",
    "something",
    "called",
    "fargate",
    "kind",
    "serverless",
    "mode",
    "running",
    "containers",
    "uses",
    "provision",
    "containers",
    "specify",
    "need",
    "worry",
    "infrastructure",
    "app",
    "runner",
    "relies",
    "elastic",
    "bean",
    "stock",
    "know",
    "orchestrating",
    "deployment",
    "ec2",
    "machines",
    "load",
    "balancers",
    "stuff",
    "may",
    "need",
    "however",
    "still",
    "visibility",
    "insight",
    "infrastructure",
    "still",
    "need",
    "worry",
    "maintaining",
    "app",
    "runner",
    "little",
    "bit",
    "different",
    "lower",
    "level",
    "components",
    "abstracted",
    "away",
    "kind",
    "worry",
    "application",
    "configuration",
    "deployment",
    "app",
    "runner",
    "worry",
    "deploying",
    "onto",
    "infrastructure",
    "scaling",
    "requires",
    "another",
    "important",
    "service",
    "know",
    "well",
    "also",
    "another",
    "option",
    "amazon",
    "light",
    "sale",
    "light",
    "sale",
    "actually",
    "use",
    "personal",
    "aws",
    "blog",
    "check",
    "better",
    "another",
    "one",
    "services",
    "makes",
    "life",
    "easier",
    "similar",
    "uh",
    "kind",
    "cloud",
    "vendors",
    "like",
    "want",
    "say",
    "godaddy",
    "digitalocean",
    "kind",
    "select",
    "type",
    "stack",
    "want",
    "set",
    "application",
    "bunch",
    "different",
    "pricing",
    "models",
    "kind",
    "pricing",
    "models",
    "worry",
    "details",
    "kind",
    "node",
    "type",
    "right",
    "would",
    "ec2",
    "machines",
    "pick",
    "different",
    "options",
    "compute",
    "costs",
    "reasonable",
    "well",
    "terms",
    "deploy",
    "lightsail",
    "use",
    "deploy",
    "wordpress",
    "blog",
    "also",
    "use",
    "deploy",
    "lamp",
    "stack",
    "mean",
    "stack",
    "ruby",
    "application",
    "also",
    "use",
    "deploy",
    "containers",
    "also",
    "add",
    "components",
    "well",
    "load",
    "balancing",
    "auto",
    "scaling",
    "uh",
    "lot",
    "different",
    "features",
    "built",
    "light",
    "sale",
    "much",
    "simplified",
    "paired",
    "version",
    "add",
    "extra",
    "stuff",
    "within",
    "kind",
    "want",
    "say",
    "safe",
    "safe",
    "zone",
    "safe",
    "version",
    "aws",
    "console",
    "things",
    "much",
    "streamlined",
    "light",
    "sale",
    "options",
    "types",
    "things",
    "beginner",
    "friendly",
    "option",
    "getting",
    "started",
    "recommended",
    "kind",
    "production",
    "grade",
    "applications",
    "something",
    "great",
    "smaller",
    "applications",
    "even",
    "wordpress",
    "blog",
    "case",
    "another",
    "honorable",
    "mention",
    "want",
    "talk",
    "briefly",
    "love",
    "graphql",
    "maybe",
    "guy",
    "love",
    "graphql",
    "aws",
    "offer",
    "fully",
    "managed",
    "graphql",
    "service",
    "service",
    "called",
    "appsync",
    "appsync",
    "makes",
    "easier",
    "develop",
    "graphql",
    "applications",
    "providing",
    "graphql",
    "functionality",
    "use",
    "integrate",
    "backend",
    "aws",
    "services",
    "dynamodb",
    "use",
    "integrate",
    "lambda",
    "functions",
    "want",
    "custom",
    "resolvers",
    "also",
    "scale",
    "really",
    "really",
    "well",
    "completely",
    "transparently",
    "administrator",
    "depending",
    "level",
    "traffic",
    "hitting",
    "application",
    "appsync",
    "another",
    "popular",
    "one",
    "think",
    "graphql",
    "user",
    "one",
    "thing",
    "mention",
    "well",
    "terms",
    "cached",
    "content",
    "many",
    "web",
    "applications",
    "going",
    "serving",
    "different",
    "types",
    "cached",
    "content",
    "whether",
    "image",
    "files",
    "javascript",
    "html",
    "css",
    "anything",
    "may",
    "want",
    "cache",
    "basically",
    "put",
    "close",
    "end",
    "user",
    "get",
    "better",
    "performance",
    "going",
    "using",
    "service",
    "called",
    "amazon",
    "cloudfront",
    "cloudfront",
    "allows",
    "deploy",
    "cloudfront",
    "distribution",
    "application",
    "source",
    "deployed",
    "example",
    "north",
    "america",
    "customers",
    "located",
    "europe",
    "asia",
    "australia",
    "use",
    "cloudfront",
    "customer",
    "going",
    "hit",
    "north",
    "america",
    "server",
    "know",
    "take",
    "time",
    "going",
    "performance",
    "degradation",
    "cloudfront",
    "set",
    "deploy",
    "distributions",
    "replicate",
    "content",
    "general",
    "object",
    "storage",
    "going",
    "talk",
    "little",
    "bit",
    "later",
    "replicate",
    "content",
    "regional",
    "nodes",
    "located",
    "across",
    "world",
    "close",
    "end",
    "users",
    "allows",
    "get",
    "better",
    "performance",
    "much",
    "static",
    "content",
    "great",
    "applications",
    "want",
    "optimize",
    "experience",
    "user",
    "okay",
    "far",
    "talked",
    "quite",
    "concepts",
    "talked",
    "like",
    "routing",
    "apis",
    "user",
    "pools",
    "load",
    "balancing",
    "compute",
    "databases",
    "packaged",
    "infrastructure",
    "caching",
    "want",
    "talk",
    "components",
    "terms",
    "like",
    "actually",
    "deploy",
    "monitor",
    "applications",
    "terms",
    "deployment",
    "actually",
    "four",
    "different",
    "smaller",
    "services",
    "want",
    "say",
    "aws",
    "provides",
    "kind",
    "work",
    "hand",
    "hand",
    "deployment",
    "pipeline",
    "let",
    "peel",
    "back",
    "one",
    "one",
    "first",
    "service",
    "hand",
    "code",
    "commits",
    "code",
    "commit",
    "basically",
    "storing",
    "source",
    "code",
    "either",
    "store",
    "source",
    "code",
    "directly",
    "inside",
    "code",
    "commit",
    "service",
    "integrate",
    "code",
    "commit",
    "third",
    "party",
    "providers",
    "github",
    "private",
    "github",
    "repository",
    "really",
    "option",
    "code",
    "commit",
    "impressive",
    "powerful",
    "integration",
    "services",
    "make",
    "powerful",
    "next",
    "one",
    "code",
    "build",
    "code",
    "build",
    "allows",
    "take",
    "source",
    "located",
    "code",
    "commit",
    "kind",
    "connected",
    "repository",
    "build",
    "artifacts",
    "also",
    "allows",
    "create",
    "run",
    "tests",
    "test",
    "environment",
    "source",
    "code",
    "combine",
    "components",
    "going",
    "get",
    "second",
    "build",
    "pretty",
    "sophisticated",
    "ci",
    "cd",
    "pipelines",
    "multiple",
    "different",
    "steps",
    "terms",
    "running",
    "unit",
    "tests",
    "integration",
    "tests",
    "get",
    "second",
    "yeah",
    "code",
    "build",
    "building",
    "testing",
    "source",
    "code",
    "actually",
    "deploy",
    "source",
    "code",
    "compute",
    "infrastructure",
    "well",
    "job",
    "code",
    "deploy",
    "like",
    "name",
    "kind",
    "implies",
    "taking",
    "artifacts",
    "built",
    "build",
    "step",
    "knowing",
    "integrate",
    "compute",
    "layers",
    "actually",
    "deploy",
    "artifacts",
    "onto",
    "different",
    "types",
    "services",
    "code",
    "deploy",
    "far",
    "kind",
    "individual",
    "building",
    "blocks",
    "chained",
    "together",
    "really",
    "give",
    "way",
    "kind",
    "orchestrate",
    "sophisticated",
    "deployment",
    "pipeline",
    "last",
    "service",
    "called",
    "may",
    "imagine",
    "code",
    "pipeline",
    "code",
    "pipeline",
    "kind",
    "like",
    "deployment",
    "orchestration",
    "service",
    "code",
    "pipeline",
    "allows",
    "define",
    "kind",
    "workflow",
    "different",
    "stages",
    "application",
    "run",
    "instance",
    "first",
    "source",
    "code",
    "build",
    "step",
    "test",
    "step",
    "maybe",
    "deploy",
    "source",
    "code",
    "test",
    "environment",
    "test",
    "run",
    "another",
    "set",
    "tests",
    "maybe",
    "deploy",
    "production",
    "environment",
    "code",
    "pipeline",
    "allows",
    "take",
    "smaller",
    "building",
    "blocks",
    "weave",
    "together",
    "build",
    "pretty",
    "sophisticated",
    "ci",
    "cd",
    "pipeline",
    "interested",
    "video",
    "kind",
    "walk",
    "set",
    "pipeline",
    "different",
    "components",
    "well",
    "put",
    "link",
    "description",
    "check",
    "later",
    "deployments",
    "monitoring",
    "um",
    "say",
    "monitoring",
    "kind",
    "barred",
    "kind",
    "section",
    "diagram",
    "monitoring",
    "really",
    "applies",
    "entire",
    "diagram",
    "everything",
    "discussed",
    "far",
    "everything",
    "discuss",
    "monitoring",
    "important",
    "concept",
    "running",
    "kind",
    "production",
    "workload",
    "need",
    "know",
    "monitoring",
    "configured",
    "know",
    "look",
    "determine",
    "things",
    "going",
    "wrong",
    "need",
    "step",
    "things",
    "fine",
    "go",
    "home",
    "sleep",
    "nicely",
    "bed",
    "two",
    "key",
    "services",
    "involved",
    "monitoring",
    "first",
    "one",
    "let",
    "start",
    "right",
    "amazon",
    "cloud",
    "watch",
    "cloud",
    "watch",
    "want",
    "call",
    "kind",
    "like",
    "umbrella",
    "service",
    "lot",
    "different",
    "features",
    "inside",
    "cloudwatch",
    "far",
    "important",
    "feature",
    "opinion",
    "ability",
    "evaluate",
    "metrics",
    "many",
    "aws",
    "services",
    "go",
    "cloudwatch",
    "view",
    "different",
    "metrics",
    "ec2",
    "machines",
    "see",
    "time",
    "chart",
    "format",
    "know",
    "cpu",
    "utilization",
    "memory",
    "utilization",
    "lambda",
    "maybe",
    "want",
    "know",
    "concurrent",
    "number",
    "invocations",
    "invocations",
    "one",
    "day",
    "count",
    "use",
    "cloudwatch",
    "derive",
    "kind",
    "information",
    "another",
    "useful",
    "feature",
    "logging",
    "many",
    "applications",
    "going",
    "emitting",
    "application",
    "logs",
    "terms",
    "application",
    "services",
    "kind",
    "managed",
    "services",
    "sit",
    "often",
    "services",
    "integrate",
    "cloudwatch",
    "give",
    "kind",
    "administration",
    "level",
    "events",
    "whenever",
    "things",
    "happening",
    "services",
    "using",
    "piece",
    "infrastructure",
    "going",
    "using",
    "cloudwatch",
    "quite",
    "bit",
    "fact",
    "released",
    "new",
    "feature",
    "recently",
    "called",
    "cloudwatch",
    "insights",
    "lets",
    "search",
    "large",
    "volumes",
    "cloudwatch",
    "data",
    "using",
    "kind",
    "like",
    "sql",
    "style",
    "language",
    "makes",
    "convenient",
    "find",
    "certain",
    "log",
    "lines",
    "looking",
    "kind",
    "giant",
    "mess",
    "log",
    "files",
    "service",
    "important",
    "terms",
    "monitoring",
    "one",
    "called",
    "cloudtrail",
    "cloudtrail",
    "little",
    "bit",
    "different",
    "cloudwatch",
    "cloudwatch",
    "helps",
    "monitor",
    "state",
    "applications",
    "aws",
    "account",
    "cloud",
    "trail",
    "terms",
    "kind",
    "audit",
    "trail",
    "operations",
    "performed",
    "infrastructure",
    "operations",
    "performed",
    "performing",
    "operations",
    "whether",
    "application",
    "like",
    "lambda",
    "function",
    "calling",
    "database",
    "maybe",
    "user",
    "kind",
    "went",
    "rogue",
    "maybe",
    "deleting",
    "infrastructure",
    "cloudtrail",
    "going",
    "offer",
    "different",
    "types",
    "events",
    "allow",
    "gain",
    "insight",
    "accessing",
    "different",
    "services",
    "services",
    "types",
    "events",
    "either",
    "kind",
    "control",
    "administration",
    "level",
    "kind",
    "infrastructure",
    "gets",
    "provisioned",
    "deleted",
    "modified",
    "way",
    "also",
    "data",
    "level",
    "events",
    "kind",
    "collection",
    "events",
    "called",
    "trails",
    "data",
    "level",
    "events",
    "give",
    "little",
    "bit",
    "granular",
    "data",
    "something",
    "configured",
    "dynamodb",
    "table",
    "give",
    "log",
    "information",
    "every",
    "single",
    "request",
    "comes",
    "table",
    "advise",
    "going",
    "chewing",
    "lot",
    "bandwidth",
    "basically",
    "log",
    "storage",
    "enable",
    "situation",
    "kind",
    "need",
    "know",
    "hitting",
    "database",
    "third",
    "one",
    "kind",
    "proactive",
    "one",
    "called",
    "insights",
    "insights",
    "configure",
    "automatically",
    "monitor",
    "account",
    "aws",
    "uses",
    "machine",
    "learning",
    "monitor",
    "cloudtrail",
    "events",
    "anomalies",
    "useful",
    "kind",
    "proactive",
    "security",
    "threats",
    "one",
    "service",
    "think",
    "mention",
    "point",
    "kind",
    "similar",
    "monitoring",
    "applies",
    "different",
    "infrastructure",
    "components",
    "service",
    "called",
    "uh",
    "identity",
    "access",
    "management",
    "often",
    "referred",
    "iam",
    "short",
    "iam",
    "kind",
    "security",
    "management",
    "service",
    "aws",
    "create",
    "entities",
    "users",
    "roles",
    "associated",
    "users",
    "policies",
    "policies",
    "important",
    "default",
    "user",
    "kind",
    "permissions",
    "anything",
    "aws",
    "unless",
    "define",
    "im",
    "policy",
    "gives",
    "user",
    "perform",
    "action",
    "words",
    "aws",
    "security",
    "management",
    "uses",
    "implicit",
    "deny",
    "operation",
    "denied",
    "access",
    "everything",
    "unless",
    "someone",
    "says",
    "otherwise",
    "iem",
    "create",
    "iem",
    "policies",
    "attach",
    "policies",
    "users",
    "assign",
    "users",
    "different",
    "groups",
    "kind",
    "policy",
    "permission",
    "set",
    "predefined",
    "applied",
    "anyone",
    "group",
    "also",
    "use",
    "create",
    "accounts",
    "users",
    "log",
    "directly",
    "developer",
    "account",
    "developer",
    "b",
    "forth",
    "identity",
    "management",
    "definitely",
    "something",
    "familiar",
    "going",
    "using",
    "pretty",
    "much",
    "want",
    "say",
    "every",
    "day",
    "working",
    "aws",
    "always",
    "know",
    "trying",
    "get",
    "access",
    "something",
    "experimenting",
    "new",
    "service",
    "feature",
    "going",
    "need",
    "give",
    "access",
    "get",
    "familiar",
    "going",
    "want",
    "know",
    "spent",
    "time",
    "learn",
    "going",
    "kind",
    "stumble",
    "lot",
    "ambiguous",
    "permission",
    "related",
    "errors",
    "video",
    "iem",
    "definitely",
    "check",
    "learn",
    "concepts",
    "detail",
    "want",
    "talk",
    "two",
    "components",
    "want",
    "talk",
    "uh",
    "rapid",
    "development",
    "infrastructure",
    "code",
    "components",
    "well",
    "let",
    "erase",
    "realize",
    "made",
    "mistake",
    "erasing",
    "stuff",
    "kind",
    "positioned",
    "wrong",
    "way",
    "layer",
    "beneath",
    "hope",
    "forgive",
    "first",
    "section",
    "infrastructure",
    "code",
    "living",
    "rock",
    "past",
    "10",
    "years",
    "infrastructure",
    "coded",
    "preferred",
    "way",
    "create",
    "manage",
    "infrastructure",
    "one",
    "really",
    "goes",
    "console",
    "anymore",
    "create",
    "things",
    "manage",
    "infrastructure",
    "unless",
    "kind",
    "first",
    "time",
    "experimenting",
    "much",
    "preferred",
    "write",
    "infrastructure",
    "code",
    "format",
    "configuration",
    "format",
    "easily",
    "picked",
    "deployed",
    "new",
    "environment",
    "cloudformation",
    "one",
    "options",
    "allows",
    "cloudformation",
    "service",
    "allows",
    "write",
    "json",
    "yaml",
    "based",
    "kind",
    "configuration",
    "files",
    "upload",
    "files",
    "cloudformation",
    "cloudformation",
    "responsible",
    "calling",
    "aws",
    "services",
    "provision",
    "infrastructure",
    "example",
    "write",
    "template",
    "file",
    "dynamodb",
    "table",
    "maybe",
    "lambda",
    "function",
    "upload",
    "change",
    "set",
    "cloudformation",
    "cloudformation",
    "go",
    "create",
    "lambda",
    "function",
    "go",
    "create",
    "dynamodb",
    "table",
    "convenient",
    "pretty",
    "quick",
    "however",
    "downfalls",
    "specific",
    "one",
    "writing",
    "infrastructure",
    "yaml",
    "json",
    "kind",
    "sucks",
    "cdk",
    "comes",
    "kind",
    "fixes",
    "problem",
    "cdk",
    "stands",
    "cloud",
    "development",
    "kit",
    "method",
    "writing",
    "infrastructure",
    "code",
    "little",
    "bit",
    "fluent",
    "us",
    "developers",
    "involves",
    "writing",
    "actual",
    "code",
    "know",
    "access",
    "loops",
    "primitive",
    "functions",
    "allows",
    "little",
    "bit",
    "expressive",
    "infrastructure",
    "definition",
    "files",
    "little",
    "bit",
    "dynamic",
    "structure",
    "code",
    "much",
    "simpler",
    "way",
    "using",
    "functions",
    "using",
    "general",
    "cloudformation",
    "yaml",
    "files",
    "gets",
    "annoying",
    "quick",
    "access",
    "things",
    "like",
    "autocomplete",
    "whereas",
    "cdk",
    "cool",
    "thing",
    "cdk",
    "especially",
    "easy",
    "use",
    "called",
    "higher",
    "level",
    "constructs",
    "constructs",
    "contain",
    "entire",
    "application",
    "specification",
    "construct",
    "entire",
    "serverless",
    "architecture",
    "contains",
    "lambda",
    "function",
    "contains",
    "dynamodb",
    "table",
    "contains",
    "know",
    "load",
    "balancer",
    "api",
    "gateway",
    "cognito",
    "user",
    "pool",
    "use",
    "construct",
    "one",
    "line",
    "write",
    "cdk",
    "code",
    "behind",
    "scenes",
    "cdk",
    "generate",
    "code",
    "write",
    "cloudformation",
    "cloudformation",
    "one",
    "deploys",
    "aws",
    "much",
    "preferred",
    "way",
    "opinion",
    "easier",
    "way",
    "deploy",
    "infrastructure",
    "cloud",
    "options",
    "use",
    "infrastructure",
    "codes",
    "believe",
    "terraform",
    "think",
    "one",
    "called",
    "polumi",
    "something",
    "like",
    "also",
    "use",
    "integrate",
    "aws",
    "well",
    "looking",
    "everything",
    "native",
    "aws",
    "probably",
    "want",
    "use",
    "cdk",
    "also",
    "learn",
    "cloud",
    "formation",
    "well",
    "two",
    "services",
    "rapid",
    "development",
    "category",
    "note",
    "firstly",
    "aws",
    "amplify",
    "aws",
    "amplify",
    "kind",
    "tool",
    "kit",
    "style",
    "service",
    "allows",
    "rapidly",
    "build",
    "deploy",
    "entire",
    "applications",
    "amplify",
    "different",
    "primarily",
    "cli",
    "tool",
    "going",
    "using",
    "cli",
    "lot",
    "secondly",
    "focuses",
    "functionality",
    "necessarily",
    "infrastructure",
    "trying",
    "provision",
    "example",
    "amplify",
    "run",
    "simple",
    "command",
    "add",
    "api",
    "literally",
    "add",
    "api",
    "behind",
    "scenes",
    "amplify",
    "deploy",
    "maybe",
    "lambda",
    "function",
    "api",
    "gateway",
    "allows",
    "add",
    "things",
    "user",
    "authentication",
    "authorization",
    "behind",
    "scenes",
    "give",
    "cognito",
    "user",
    "pool",
    "add",
    "things",
    "relational",
    "database",
    "give",
    "aurora",
    "probably",
    "serverless",
    "database",
    "use",
    "much",
    "focused",
    "functionality",
    "lot",
    "people",
    "great",
    "amplify",
    "great",
    "choice",
    "know",
    "maybe",
    "coming",
    "different",
    "cloud",
    "provider",
    "want",
    "learn",
    "different",
    "stuff",
    "maybe",
    "overwhelmed",
    "watched",
    "video",
    "yet",
    "know",
    "different",
    "aws",
    "services",
    "amplify",
    "great",
    "abstraction",
    "one",
    "problem",
    "abstraction",
    "great",
    "everything",
    "working",
    "correctly",
    "anytime",
    "something",
    "breaks",
    "something",
    "quite",
    "working",
    "gon",
    "na",
    "need",
    "dive",
    "independent",
    "services",
    "using",
    "amplify",
    "probably",
    "know",
    "anything",
    "aws",
    "services",
    "going",
    "pretty",
    "big",
    "challenge",
    "want",
    "stay",
    "within",
    "box",
    "amplify",
    "great",
    "want",
    "venture",
    "box",
    "probably",
    "use",
    "amplify",
    "like",
    "write",
    "cdk",
    "code",
    "understand",
    "aws",
    "services",
    "um",
    "get",
    "apply",
    "great",
    "um",
    "maybe",
    "care",
    "aws",
    "services",
    "want",
    "focus",
    "functionality",
    "amplify",
    "great",
    "sam",
    "sam",
    "stands",
    "serverless",
    "application",
    "model",
    "sam",
    "great",
    "terms",
    "providing",
    "shorthands",
    "uh",
    "common",
    "infrastructure",
    "setups",
    "would",
    "typically",
    "written",
    "cloud",
    "formation",
    "sam",
    "templates",
    "use",
    "kind",
    "similar",
    "higher",
    "order",
    "constructs",
    "cdk",
    "similar",
    "idea",
    "sam",
    "kind",
    "handle",
    "much",
    "complexity",
    "setup",
    "need",
    "find",
    "couple",
    "specifications",
    "couple",
    "fields",
    "stuff",
    "gives",
    "intelligent",
    "kind",
    "default",
    "sam",
    "also",
    "great",
    "local",
    "testing",
    "lambda",
    "functions",
    "use",
    "sam",
    "build",
    "run",
    "lambda",
    "functions",
    "locally",
    "deploy",
    "aws",
    "another",
    "great",
    "reason",
    "use",
    "well",
    "right",
    "let",
    "talk",
    "kind",
    "half",
    "diagram",
    "um",
    "put",
    "hypothetical",
    "use",
    "case",
    "search",
    "query",
    "submission",
    "thinking",
    "like",
    "maybe",
    "building",
    "application",
    "similar",
    "google",
    "someone",
    "submitting",
    "request",
    "application",
    "layer",
    "back",
    "end",
    "maybe",
    "someone",
    "searching",
    "know",
    "aws",
    "google",
    "someone",
    "going",
    "store",
    "database",
    "somewhere",
    "right",
    "know",
    "typical",
    "service",
    "oriented",
    "architecture",
    "probably",
    "want",
    "send",
    "notification",
    "microservices",
    "hey",
    "someone",
    "search",
    "thing",
    "maybe",
    "someone",
    "else",
    "microservice",
    "cares",
    "maybe",
    "analytics",
    "service",
    "type",
    "service",
    "use",
    "event",
    "coordination",
    "pub",
    "sub",
    "notifications",
    "services",
    "something",
    "changed",
    "application",
    "couple",
    "different",
    "services",
    "play",
    "uh",
    "little",
    "bit",
    "misalignment",
    "okay",
    "first",
    "one",
    "called",
    "sns",
    "simple",
    "notification",
    "service",
    "sns",
    "basically",
    "pub",
    "sub",
    "service",
    "pub",
    "sub",
    "responsible",
    "publishing",
    "notifications",
    "topic",
    "topic",
    "many",
    "different",
    "subscribers",
    "idea",
    "kind",
    "domain",
    "model",
    "owner",
    "know",
    "search",
    "query",
    "service",
    "whatever",
    "whenever",
    "kind",
    "puts",
    "entry",
    "database",
    "wants",
    "notify",
    "services",
    "hey",
    "someone",
    "put",
    "something",
    "system",
    "guys",
    "check",
    "system",
    "use",
    "sns",
    "topic",
    "publish",
    "notify",
    "microservices",
    "something",
    "changed",
    "publisher",
    "subscribers",
    "many",
    "different",
    "types",
    "infrastructure",
    "aws",
    "services",
    "subscribers",
    "lambda",
    "function",
    "http",
    "endpoint",
    "exists",
    "maybe",
    "ec2",
    "instance",
    "something",
    "like",
    "also",
    "common",
    "one",
    "sqsq",
    "simple",
    "q",
    "service",
    "queue",
    "sqs",
    "simple",
    "queue",
    "service",
    "service",
    "effectively",
    "responsible",
    "holding",
    "messages",
    "process",
    "later",
    "time",
    "define",
    "cues",
    "queues",
    "connected",
    "many",
    "different",
    "types",
    "compute",
    "infrastructure",
    "connect",
    "queue",
    "lambda",
    "function",
    "ec2",
    "machine",
    "ecs",
    "task",
    "pieces",
    "infrastructure",
    "pull",
    "queue",
    "new",
    "messages",
    "perform",
    "type",
    "action",
    "finds",
    "new",
    "messages",
    "queue",
    "typically",
    "people",
    "set",
    "sns",
    "sqs",
    "sns",
    "topic",
    "publisher",
    "sqsq",
    "subscriber",
    "confused",
    "difference",
    "two",
    "surfaces",
    "video",
    "discuss",
    "nauseam",
    "put",
    "description",
    "check",
    "well",
    "basically",
    "want",
    "tell",
    "people",
    "data",
    "data",
    "changes",
    "use",
    "sns",
    "want",
    "notified",
    "something",
    "changes",
    "someone",
    "else",
    "data",
    "use",
    "sqs",
    "basic",
    "gist",
    "another",
    "service",
    "pretty",
    "similar",
    "sns",
    "one",
    "called",
    "eventbridge",
    "eventbridge",
    "similar",
    "terms",
    "sns",
    "offers",
    "although",
    "offer",
    "distinct",
    "benefits",
    "first",
    "instead",
    "sns",
    "topics",
    "eventbridge",
    "uses",
    "concept",
    "eventbuses",
    "integrate",
    "event",
    "bridge",
    "event",
    "bus",
    "many",
    "different",
    "kind",
    "application",
    "actions",
    "across",
    "aws",
    "instance",
    "maybe",
    "want",
    "integrate",
    "event",
    "bridge",
    "whenever",
    "ec2",
    "machine",
    "gets",
    "terminated",
    "maybe",
    "kind",
    "operation",
    "interested",
    "whenever",
    "lambda",
    "function",
    "gets",
    "updated",
    "whenever",
    "configuration",
    "dynamo",
    "table",
    "gets",
    "changed",
    "integrate",
    "events",
    "eventbridge",
    "define",
    "rules",
    "specify",
    "deliver",
    "events",
    "similar",
    "sns",
    "subscribers",
    "eventbridge",
    "also",
    "subscribers",
    "define",
    "rules",
    "target",
    "groups",
    "deliver",
    "messages",
    "depending",
    "type",
    "event",
    "eventbridge",
    "really",
    "shines",
    "something",
    "like",
    "sns",
    "two",
    "important",
    "features",
    "first",
    "one",
    "something",
    "called",
    "schema",
    "discovery",
    "using",
    "sns",
    "publishing",
    "topic",
    "someone",
    "getting",
    "message",
    "sqsq",
    "schema",
    "message",
    "look",
    "like",
    "format",
    "message",
    "look",
    "like",
    "json",
    "xml",
    "file",
    "know",
    "foo",
    "key",
    "bar",
    "value",
    "like",
    "array",
    "like",
    "eventbridge",
    "allows",
    "define",
    "schema",
    "definitions",
    "help",
    "subscribers",
    "get",
    "access",
    "models",
    "going",
    "delivered",
    "eventbridge",
    "event",
    "bus",
    "nifty",
    "feature",
    "also",
    "allows",
    "search",
    "different",
    "schemas",
    "maybe",
    "find",
    "one",
    "necessary",
    "application",
    "another",
    "important",
    "feature",
    "integrations",
    "something",
    "really",
    "cool",
    "eventbridge",
    "example",
    "integration",
    "work",
    "something",
    "like",
    "shopify",
    "shopify",
    "native",
    "integration",
    "eventbridge",
    "means",
    "anytime",
    "someone",
    "places",
    "order",
    "shopify",
    "website",
    "directly",
    "integrated",
    "eventbridge",
    "specific",
    "rules",
    "set",
    "deliver",
    "notification",
    "maybe",
    "microservice",
    "backend",
    "service",
    "cares",
    "updates",
    "maybe",
    "want",
    "deliver",
    "general",
    "object",
    "storage",
    "happen",
    "well",
    "eventbridge",
    "great",
    "allows",
    "integrations",
    "shopify",
    "pagerduty",
    "many",
    "many",
    "others",
    "really",
    "natively",
    "offered",
    "sns",
    "kind",
    "shines",
    "another",
    "service",
    "kind",
    "event",
    "coordination",
    "department",
    "let",
    "erase",
    "looks",
    "pretty",
    "smooth",
    "step",
    "functions",
    "honestly",
    "step",
    "functions",
    "one",
    "favorite",
    "services",
    "offered",
    "aws",
    "step",
    "functions",
    "allow",
    "define",
    "kind",
    "workflows",
    "um",
    "like",
    "um",
    "want",
    "draw",
    "maybe",
    "wo",
    "define",
    "like",
    "workflows",
    "different",
    "steps",
    "starting",
    "step",
    "next",
    "want",
    "like",
    "x",
    "step",
    "step",
    "conditional",
    "logic",
    "step",
    "function",
    "workflows",
    "allows",
    "build",
    "things",
    "like",
    "know",
    "customer",
    "ordering",
    "workflow",
    "first",
    "step",
    "validate",
    "details",
    "order",
    "next",
    "step",
    "package",
    "order",
    "warehouse",
    "next",
    "step",
    "know",
    "send",
    "delivery",
    "notifications",
    "send",
    "notification",
    "customer",
    "modeled",
    "step",
    "function",
    "workflow",
    "kind",
    "fail",
    "safe",
    "conditional",
    "logic",
    "workflow",
    "anything",
    "fails",
    "different",
    "path",
    "different",
    "choice",
    "taken",
    "offers",
    "direct",
    "integration",
    "many",
    "aws",
    "services",
    "use",
    "service",
    "like",
    "aws",
    "lambda",
    "kind",
    "glue",
    "different",
    "parts",
    "workflow",
    "together",
    "going",
    "completely",
    "serverless",
    "summary",
    "step",
    "functions",
    "kind",
    "orchestration",
    "service",
    "allows",
    "define",
    "sophisticated",
    "large",
    "workflows",
    "may",
    "run",
    "many",
    "many",
    "steps",
    "kind",
    "done",
    "event",
    "delegation",
    "maybe",
    "want",
    "store",
    "copies",
    "events",
    "object",
    "storage",
    "maybe",
    "want",
    "kind",
    "replicate",
    "whatever",
    "dynamo",
    "aurora",
    "table",
    "rds",
    "table",
    "cheap",
    "cost",
    "effective",
    "general",
    "object",
    "storage",
    "service",
    "would",
    "use",
    "well",
    "service",
    "going",
    "using",
    "one",
    "one",
    "oldest",
    "aws",
    "called",
    "amazon",
    "s3",
    "stands",
    "simple",
    "storage",
    "service",
    "kitchen",
    "sink",
    "data",
    "storage",
    "cheap",
    "scalable",
    "store",
    "like",
    "basically",
    "exobytes",
    "petabytes",
    "data",
    "massive",
    "massive",
    "amounts",
    "affordable",
    "rates",
    "also",
    "move",
    "data",
    "time",
    "cold",
    "storage",
    "get",
    "even",
    "better",
    "price",
    "points",
    "however",
    "scale",
    "really",
    "well",
    "talking",
    "like",
    "caching",
    "earlier",
    "talking",
    "cloudfront",
    "would",
    "typically",
    "store",
    "asset",
    "files",
    "s3",
    "buckets",
    "connect",
    "cloudfront",
    "distribution",
    "replicated",
    "cloudfront",
    "serve",
    "customers",
    "around",
    "world",
    "s3",
    "used",
    "store",
    "basically",
    "type",
    "file",
    "images",
    "css",
    "video",
    "type",
    "media",
    "think",
    "store",
    "s3",
    "pretty",
    "reasonable",
    "limits",
    "file",
    "sizes",
    "check",
    "want",
    "upload",
    "massive",
    "files",
    "s3",
    "super",
    "super",
    "important",
    "service",
    "definitely",
    "know",
    "learning",
    "aws",
    "okay",
    "analytical",
    "processing",
    "say",
    "got",
    "data",
    "s3",
    "know",
    "someone",
    "saved",
    "database",
    "dispatched",
    "event",
    "stored",
    "s3",
    "want",
    "run",
    "analytics",
    "infrastructure",
    "option",
    "use",
    "want",
    "start",
    "bottom",
    "one",
    "emr",
    "emr",
    "distributed",
    "data",
    "processing",
    "system",
    "allows",
    "run",
    "many",
    "different",
    "frameworks",
    "including",
    "common",
    "ones",
    "spark",
    "clusters",
    "hive",
    "presto",
    "even",
    "run",
    "serverless",
    "mode",
    "emr",
    "going",
    "service",
    "going",
    "massive",
    "number",
    "crunching",
    "perform",
    "kind",
    "analytics",
    "option",
    "use",
    "instead",
    "emr",
    "one",
    "really",
    "big",
    "fan",
    "amazon",
    "athena",
    "athena",
    "completely",
    "serverless",
    "big",
    "data",
    "processing",
    "analytic",
    "service",
    "works",
    "keep",
    "data",
    "stored",
    "s3",
    "need",
    "load",
    "anywhere",
    "may",
    "emr",
    "keep",
    "data",
    "stored",
    "s3",
    "athena",
    "directly",
    "connect",
    "s3",
    "data",
    "crawl",
    "data",
    "automatically",
    "detect",
    "schema",
    "data",
    "whatever",
    "buckets",
    "create",
    "kind",
    "tables",
    "query",
    "using",
    "sql",
    "whenever",
    "dispatch",
    "job",
    "athena",
    "uses",
    "aws",
    "infrastructure",
    "behind",
    "scenes",
    "prioritize",
    "request",
    "run",
    "massive",
    "massive",
    "queries",
    "data",
    "already",
    "stored",
    "s3",
    "using",
    "amazon",
    "athena",
    "really",
    "really",
    "powerful",
    "analytics",
    "service",
    "number",
    "crunching",
    "service",
    "viable",
    "option",
    "compared",
    "emr",
    "next",
    "step",
    "data",
    "warehouse",
    "actually",
    "want",
    "store",
    "data",
    "things",
    "like",
    "know",
    "business",
    "intelligence",
    "types",
    "analytics",
    "may",
    "want",
    "perform",
    "want",
    "store",
    "something",
    "like",
    "document",
    "db",
    "dynamo",
    "rds",
    "options",
    "really",
    "meant",
    "service",
    "want",
    "use",
    "type",
    "operation",
    "amazon",
    "redshift",
    "amazon",
    "redshift",
    "columnar",
    "style",
    "database",
    "allows",
    "perform",
    "large",
    "queries",
    "concurrently",
    "support",
    "many",
    "many",
    "users",
    "time",
    "little",
    "bit",
    "expensive",
    "offer",
    "serverless",
    "mode",
    "swear",
    "everything",
    "going",
    "serverless",
    "days",
    "like",
    "services",
    "kind",
    "serverless",
    "variation",
    "anyways",
    "offer",
    "kind",
    "provision",
    "mode",
    "provision",
    "nodes",
    "distributed",
    "way",
    "server",
    "list",
    "mode",
    "kind",
    "type",
    "model",
    "however",
    "going",
    "running",
    "workloads",
    "kind",
    "olap",
    "style",
    "queries",
    "going",
    "happen",
    "redshift",
    "fact",
    "kind",
    "connection",
    "redshift",
    "s3",
    "say",
    "like",
    "analytics",
    "want",
    "deliver",
    "data",
    "s3",
    "set",
    "automatic",
    "load",
    "job",
    "load",
    "redshift",
    "available",
    "olap",
    "style",
    "querying",
    "redshift",
    "another",
    "great",
    "one",
    "data",
    "engineers",
    "business",
    "intelligence",
    "users",
    "anyone",
    "wants",
    "interact",
    "data",
    "scale",
    "using",
    "sql",
    "next",
    "one",
    "dashboarding",
    "dashboarding",
    "would",
    "use",
    "quicksite",
    "quicksite",
    "tool",
    "great",
    "end",
    "users",
    "give",
    "users",
    "independent",
    "logins",
    "access",
    "data",
    "whether",
    "redshift",
    "s3",
    "anything",
    "else",
    "create",
    "kind",
    "business",
    "facing",
    "dashboard",
    "similar",
    "think",
    "called",
    "microsoft",
    "bi",
    "power",
    "bi",
    "microsoft",
    "redshift",
    "kind",
    "aws",
    "end",
    "users",
    "use",
    "explore",
    "data",
    "located",
    "many",
    "different",
    "aws",
    "services",
    "one",
    "final",
    "thing",
    "let",
    "go",
    "network",
    "boundary",
    "aws",
    "pretty",
    "big",
    "security",
    "offer",
    "service",
    "allows",
    "isolate",
    "resources",
    "specific",
    "isolated",
    "network",
    "service",
    "allows",
    "amazon",
    "vpc",
    "virtual",
    "private",
    "cloud",
    "service",
    "allows",
    "create",
    "vpcs",
    "basically",
    "private",
    "networking",
    "spaces",
    "infrastructure",
    "exist",
    "completely",
    "separate",
    "aws",
    "users",
    "networking",
    "space",
    "connect",
    "vpcs",
    "vpcs",
    "want",
    "talk",
    "services",
    "maybe",
    "different",
    "account",
    "open",
    "vpc",
    "infrastructure",
    "callable",
    "public",
    "internet",
    "large",
    "vpcs",
    "host",
    "many",
    "many",
    "different",
    "microservices",
    "service",
    "oriented",
    "architectures",
    "lot",
    "vpcs",
    "terms",
    "defining",
    "setup",
    "configuration",
    "terms",
    "security",
    "lot",
    "vpcs",
    "terms",
    "setup",
    "isolate",
    "resources",
    "system",
    "also",
    "allows",
    "find",
    "security",
    "rules",
    "make",
    "sure",
    "infrastructure",
    "protected",
    "outside",
    "actor",
    "enjoyed",
    "video",
    "going",
    "put",
    "links",
    "description",
    "section",
    "think",
    "pertinent",
    "videos",
    "different",
    "aws",
    "services",
    "want",
    "learn",
    "check",
    "ones",
    "right",
    "thanks",
    "much",
    "watching",
    "hope",
    "learned",
    "lot",
    "aws",
    "services",
    "thanks",
    "much",
    "see",
    "next",
    "time"
  ],
  "keywords": [
    "learning",
    "aws",
    "pretty",
    "services",
    "one",
    "right",
    "tool",
    "trying",
    "video",
    "going",
    "application",
    "architecture",
    "like",
    "see",
    "let",
    "take",
    "look",
    "back",
    "behind",
    "scenes",
    "web",
    "backend",
    "layer",
    "kind",
    "familiar",
    "third",
    "database",
    "uh",
    "relational",
    "nosql",
    "also",
    "caching",
    "well",
    "bunch",
    "components",
    "deployment",
    "source",
    "code",
    "facilitate",
    "monitoring",
    "system",
    "load",
    "balancer",
    "dns",
    "traffic",
    "event",
    "say",
    "instance",
    "um",
    "something",
    "google",
    "search",
    "query",
    "time",
    "gets",
    "want",
    "storage",
    "processing",
    "data",
    "dashboarding",
    "end",
    "users",
    "content",
    "development",
    "deploy",
    "little",
    "bit",
    "hand",
    "two",
    "user",
    "pools",
    "define",
    "different",
    "cache",
    "first",
    "service",
    "use",
    "amazon",
    "configuration",
    "know",
    "internet",
    "supports",
    "things",
    "great",
    "probably",
    "using",
    "apis",
    "typically",
    "couple",
    "options",
    "level",
    "called",
    "elastic",
    "looking",
    "offers",
    "may",
    "terms",
    "request",
    "compute",
    "really",
    "either",
    "available",
    "option",
    "ec2",
    "stands",
    "cloud",
    "machines",
    "set",
    "whatever",
    "databases",
    "blog",
    "create",
    "api",
    "allows",
    "setup",
    "go",
    "interested",
    "serverless",
    "next",
    "comes",
    "lambda",
    "infrastructure",
    "basically",
    "functions",
    "large",
    "worry",
    "write",
    "onto",
    "scaling",
    "whenever",
    "number",
    "function",
    "model",
    "applications",
    "day",
    "popular",
    "definitely",
    "consider",
    "learn",
    "check",
    "new",
    "directly",
    "ecs",
    "manage",
    "containers",
    "helps",
    "balancing",
    "auto",
    "put",
    "description",
    "section",
    "building",
    "blocks",
    "business",
    "another",
    "gateway",
    "super",
    "powerful",
    "functionality",
    "nodes",
    "types",
    "features",
    "example",
    "private",
    "pool",
    "talk",
    "models",
    "actually",
    "cognito",
    "similar",
    "stuff",
    "integrate",
    "identity",
    "log",
    "lot",
    "performance",
    "quite",
    "common",
    "maybe",
    "people",
    "think",
    "key",
    "value",
    "still",
    "need",
    "store",
    "aurora",
    "mode",
    "fully",
    "managed",
    "rds",
    "makes",
    "life",
    "easier",
    "would",
    "get",
    "sql",
    "server",
    "thing",
    "offer",
    "type",
    "add",
    "scale",
    "dynamodb",
    "anything",
    "much",
    "many",
    "mongodb",
    "dynamo",
    "way",
    "open",
    "perform",
    "queries",
    "give",
    "else",
    "far",
    "build",
    "together",
    "bean",
    "stock",
    "app",
    "provision",
    "runner",
    "uses",
    "running",
    "however",
    "important",
    "light",
    "sale",
    "better",
    "safe",
    "graphql",
    "completely",
    "files",
    "cloudfront",
    "located",
    "general",
    "object",
    "monitor",
    "pipeline",
    "commit",
    "integration",
    "run",
    "tests",
    "test",
    "environment",
    "sophisticated",
    "step",
    "workflow",
    "entire",
    "everything",
    "cloudwatch",
    "feature",
    "format",
    "events",
    "style",
    "find",
    "cloudtrail",
    "account",
    "table",
    "security",
    "access",
    "management",
    "policies",
    "someone",
    "cloudformation",
    "file",
    "cdk",
    "amplify",
    "simple",
    "big",
    "sam",
    "order",
    "notification",
    "analytics",
    "sns",
    "topic",
    "subscribers",
    "queue",
    "messages",
    "connect",
    "eventbridge",
    "rules",
    "deliver",
    "schema",
    "shopify",
    "workflows",
    "s3",
    "massive",
    "stored",
    "emr",
    "athena",
    "redshift",
    "vpcs"
  ]
}