{
  "text": "for most people studying data structures\nand algorithms is not the most exciting\npart of programming and trust me this is\nexactly the feeling that i used to have\nwhen i first started learning about data\nstructures and algorithms to me they\njust seemed so boring and i just\ncouldn't quite understand why they are\neven important and this seemed like\nsomething that i just sort of have to\nlearn to get my foot through the door\nand after that i can just forget about\nthem and focus on what i'm actually\nexcited about like coding tinderbots\nbut now that i've actually properly\nlearned about these topics and taking\nthe time to actually understand not only\nwhat they are but why they are important\ni've actually completely changed my mind\ni think data reaction algorithms is one\nof the most beautiful parts of\nprogramming and computer science and in\nthis video i want to give you a glimpse\nof this beauty by giving you literally\nthe dumbest most simple explanation of\nwhat data structures are to give you\nsort of an intuitive understanding that\nyou can then take into your actual study\nof each particular data structure so you\ncan have this sort of framework in your\nmind going into it and hopefully\nhopefully you may even start to\nappreciate the beauty that implementing\ndata structures can actually have and\nbelieve me i remember exactly what it\nwas like to not understand anything\nabout data structures this video is\ncompletely language agnostic so\nwhichever programming language you've\nlearned in the past you can watch this\nvideo and then at the end as always i\nwill give you the exact resources that i\nuse in a step-by-step way to go from\nthis conceptual high-level understanding\ninto mastering all of these topics i'm\nreally passionate about this reaction\nalgorithms so if you enjoyed this video\nthere will be a very similar video\ncoming on algorithms as well so if you\ndo enjoy this video leave a like down\nbelow because how many people like this\nvideo will then sort of tell me whether\ni should make it or not okay so what are\ndata structures at an extremely high\nlevel all a data structure is is a way\nof organizing data so whenever you're\nwriting a program the purpose why\ncomputers exist in the first place is\nthat we have some data which can be like\nnumbers or maybe it's a string and then\nwe have something that we want to do\nwith that data to produce some useful\nresult it turns out that it really\nmatters how we actually organize data in\na computer's memory and i know that\nright now now this makes any sense and\nthat is why i have organized a couple of\nvery specific examples which will allow\nyou to actually understand it again in\nthe dumbest way possible in a way that\neven a literal dumbass like me could\nunderstand how this work but first let's\njust briefly talk about\nwhy this idea of organizing data is\nactually so important to the point where\nif you want to get a job studying data\nstructures and algorithms is literally\nthe most important thing that you need\nto know if you're good at data\nstructures and algorithms you will be\ngood at writing programs in a logical\nway in a way that makes sense in a way\nthat is efficient and what companies\nwant to see is that you have that\nfundamental knowledge and those\nprinciples that you can apply in their\nproduction code to make the gold really\ngood and therefore that you as the\nprogrammer are worth the money that the\ncompany is spending on you so data\nstructure is a way of organizing data in\nthe computer's memory the way the\ncomputer's memory works in again a\nreally dumb sort of simplified way you\nhave these memory blocks which are\ncalled like memory registers all these\nregisters hold some kind of value maybe\nthis is a two this is a five this is a\nseven and whenever you're writing a\nprogram you're probably not just doing\nsomething with one piece of data like\nthese two here often you'll have\nsomething like a collection of data\nthat's sort of related to each other in\nsome way maybe it's a list of numbers\nlike a list of transactions that you\nwant to add together or something like\nthat so it makes sense to actually\norganize this data close to each other\nin the computer's memory so that it's\neasy for you to access all these\ndifferent pieces of data rather than\nhaving to define separate variables like\na equals two or b equals five you can\njust define one variable one data\nstructure called a list and this is the\nfirst data structure that we learned the\nmost basic one and then you put all of\nthese numbers into this one variable so\nthen in the future if you want to access\nthe middle element of this list you can\njust go list one from the computer's\nperspective when all of these variables\nare stored close together to each other\naccessing them together and maybe\nlooping over them or something is a lot\neasier this is sort of the computer\nequivalent of let's say like when i'm\nmaking these youtube videos right\nthere's multiple pieces of gear that i\nalways sort of need and so whenever i\nwant to start filming a video it makes\nsense if i've sort of placed all my\ncamera gear in the same part of the room\nso all i have to do is go to that part\nof the room grab the gear and start\nfilming and storing values in something\nlike a list is just a computer\nequivalent of this same principle let's\ntalk about a limitation that a very\nsimple data structure like a list could\nhave the way lists or arrays are usually\ndefined in a programming language is\nthere a certain amount of memory in this\ncase we've just allocated three\nregisters of memory to our list here but\nwhat happens if we now want to add a\nfourth element to the list well you\nmight say that well that's easy we just\nsort of added here but what if this\nregister in the memory was already taken\nup by a different piece of data maybe we\nalready had a string like hello in here\nnow we put the eight on top of it so\nthis hello gets replaced and maybe we\nhad a different part of the programmer\nwe'll be using that piece of string and\nnow instead of hello it's certainly an\neight and just everything crashes right\nso the way lists are usually actually\ndefined under the hood in the language\nis that if you add an element to a list\nit will actually take this list and move\nit to a completely different part of the\nmemory and then allocate more memory to\nit even if you don't understand anything\nabout low level programming you might\nsee that this is sort of very\ninefficient if you know that you'll be\nconstantly adding data to a list every\ntime moving into a different location in\nthe memory can become very slow so that\nis why you can see that actually if we\nknow that the thing we want to do with\nour data is to\nkeep adding stuff to it and we know that\nin the future we'll be adding a lot of\nstuff to it it actually doesn't make\nsense to use a list and there might be a\nbetter way to organize that data again\nfor this purpose that we have here and\nin particular for something like this we\nmight use something called a linked list\nand what a linked list is instead of\nstoring your items just sequentially\nafter each other in the memory what\nwe're doing is we're defining this node\nstructure so we just have two\nplaces in memory where the first one is\na piece of data like r2 here and the\nnext one is a pointer to a different\nnode somewhere else in the memory it\ndoesn't matter where it is essentially\nthis second item of this node will be\npointing to the next element which will\nagain just be a node and the way this\nactually works is that these memory\nregisters are numbered in the computer's\nmemory let's say this is a number five\nis number six and then somewhere\nrandomly in the memory we have a memory\nregister i don't know like 102 and here\nas the second element of this first node\nwe just have the memory address where we\nknow that the second element will be and\nagain for the next one we would have\nmaybe a pointer to register 463\nand this one will then know that okay\nthe next element of our link deletion\nwill be in memory location\n463 and again using our camera example\nhere let's say i'm using all my camera\ngear in this part of the room here but\nnow there's no space anymore what i\ncould do is include like a post-it note\nin that area to see that okay the next\nbatch of my gear is going to be in this\narea of my room maybe there's a note\nthere that says i don't know under the\nbed or something so that i know where to\ngo to find the next part of the gears\nand this way you can essentially just\nkeep increasing this chain of values or\nchain of camera gear almost indefinitely\nas long as you actually have a space in\nyour memory or space in your room all\nyou have to do is just know where the\nvery last element of the list is and\nthen users have to find an empty\nlocation anywhere in your memory and\nthen add\nanother node into your linked list and\nso you can see how we already with this\nvery simple requirements we already sort\nof have a need for a slightly more\ncomplex data structure and from the\nprogrammer's perspective when you want\nto add something to the list you just\ncall the linked list sort of a method\nthat's defined inside of the data\nstructure to append an element in the\nlist and under the hood all of this\nstuff is happening all this sort of\ndrama is happening but the programming\ndoesn't even need to know anything about\nit but crucially if the designer of this\nprogram hadn't designed this in the\ncorrect way it could be causing problems\nlike this and causing the whole hardware\nto essentially crash or explode or\nwhatever horrible things would happen\nbut again obviously even the linked list\nalso has downsides let's say what's\nreally important in the specific\napplication we're developing is for\nexample accessing elements in the middle\nof the list like accessing this one\nright here now this specific operation\nis actually a lot easier to do in an\narray or a list like data structure we\njust call list one like this here\nwhereas with a link to this we just sort\nof have to loop over the list until we\narrive at the item that we're looking\nfor which is a lot more expensive so as\nyou can see again which data structure\nwe're using always depends on the\nspecific thing we're trying to do and\nsort of the specific things that you can\nsee the user of that program needing to\ndo a lot of the time and the way all of\nthis like the linked list would be\nimplemented in an actual programming\nlanguage or python is that you would do\nsomething like create a class called\nlinked list then you would create method\ninside that do all of this magic and\nthen there will be a client where all\nthey would have to do is call this\nappend method and it would simply just\ndo all of this magic behind the scenes\nand that is really the beauty of data\nstructures and i know that all the\ndetails of this might be a bit fuzzy for\nyou again the point of this video is not\nso that you can understand all these\ndetails it's just to give you an idea of\nwhy different data structures even exist\nif my sort of weird way of explaining\ndata structures is making sense to you\nat all i would appreciate it if you\ncould tap the like button down below in\nthe description so let's now move on to\na couple of slightly more complex\nexamples to really drill this in and to\nmake sure that you really understand\nwhat's going on here but first a word\nfrom our sponsor if you have a business\nor you're working on a project that\nrequires e-signature you want to make\nsure that your documents are signed\nsecurely fast and in a legally binding\nway so if that's you\nyou need to listen the sign now api is a\npowerful e-signature tool that allows\nyou to embed e-signature on your website\nit's free to test fast to deploy and\nwill allow you to not worry about\ndocument approval cycles and instead\nfocus your time on growing your business\ndevelopers particularly love site now's\neasy to use and detailed documentation\nwith clear coding examples as well as\ngreat video tutorials on how to get\nstarted which makes implementing the api\nextremely easy in any programming\nlanguage the synonym api is available\nthrough straightforward sdks and allows\nyou to complete entire document approval\ncycles from uploading documents to\ntracking signature progress and not only\nthat design now api make sure that your\napps keep running with\n99.99\nuptime and in accordance with all the\nrequired compliance and security\nrequirements so if that is something\nthat sounds useful for your app you are\nin luck because they currently have a\nunique offer on the market which gives\nyou 250 legally binding e-signatures for\nfree so if you don't want to miss out on\nthat click the link down below in the\ndescription to create your free sandbox\naccount and start building dynamic\ne-signature workflows today thank you\nfor sign now for sponsoring this video\nand now back to the tutorial so in\npractice we obviously have a lot more\neven more complicated requirements for\nthings we want to do with data let's say\nyou are an airline and you want to sort\nof structure the data about all the\npeople who have bought tickets to some\nflights what makes sense for you is\nprobably not just to group stuff\ntogether randomly in the computer's\nmemory like for example in the order\nthat they bought the tickets because\nwhat you probably really want to do is\norder them in some sort of priority\nwhere the people who have bought first\nclass tickets are first but then when\nthey want to do something with it they\ncan see the first class passengers first\nand then the business class passengers\nand then the peasant economy passengers\nlike me so it would be very useful for\nthese airline operators to have a data\nstructure that would allow them to group\ndata in a way like this and it turns out\nthis is a very common requirement in\nmany different computer programs that is\nwhy a very common data structure that is\nused is something called a priority\nqueue for this you would define\nessentially a linked list just like this\nbut essentially every time when you're\nadding something to the list but the add\nmethod wouldn't just be doing this it\nwouldn't just be adding it to the end of\nthe list but rather every time we're\nadding a person it would do some sort of\noperations which automatically sort of\norders the list in the way that the\nairline wants so it orders it in a\npriority order so here what we would\nprobably have is instead of just a piece\nof data and the link to the next node in\nthe list we would have also a field for\nthe priority class of the passenger so\nwe would have a node that looks\nsomething like this where there's three\nvalues there's the actual person\nprobably this would already be something\nlike a dictionary with like their name\nand their birthday the price they paid\nor whatever we would just have a value\nthat indicates that this is a business\nclass passenger and here again we would\nhave the pointers or the memory address\nof the next person on the list and then\nevery time we're adding a person we\nwould have defined inside the data\nstructures of app operations that\nautomatically perhaps it calls a\ndifferent function to reorder all the\npassengers in such a way that this\npassenger will entity do the correct\nlocation of the list so as you can see a\nlot of the time even though you might\nthink about data structures it's just\nabout the structure so where we put the\ndata a lot of the time especially these\nmore complex data structures are a lot\nmore about the operations that we want\nto do with that data and that is really\nthe other thing that you should keep in\nmind that when you're defining data\nstructures is really not just the\norganization of the data but also the\noperations that we define on that data\nand again the point here is that the\nairline operators or the person who's\nlike going through the ticket doesn't\nneed to know anything about any of this\ndrama that's happening down there in the\ncomputer memory because the programmer\nthe programmer who understands data\nstructures has been able to program it\nis in an intelligent way from the\nairline operator's perspective all this\nis just happening like magic when they\nadd a new ticket into the pool of ticket\nholders the list is automatically\norganized in the exact priority that\nthey want and that is again the magic of\ndata structures and this whole principle\nis also something that we often refer to\nas abstraction the most beautiful thing\nabout computers and computer science is\nthat there's like a million different\nlevels of abstraction where at the very\nlow level you just have zeros and ones\ninside the computers or even lower these\nteran sisters where electricity is going\nthrough these logic gates but you don't\nneed to know about any of these because\nthere are low level programmers who have\ndesigned these higher level programming\nlanguages that allow us to do stuff with\nthe low level computer without\nunderstanding all the drama that's\nhappening down below and the same thing\nhere when as a programmer as a\nhigh-level program and your most\nimportant task is to understand the\nlanguage and to understand programming\nconcepts like data structures in such a\nway that you can design programs so that\nthe people who use these programs don't\nneed to know anything about how they\nwork thinking just use them you just\ntell them click this button or run this\nfunction and it will do exactly what\nthey want and in reality the\nrelationships with pieces of data and\nthe things we want to do are even more\ncomplicated than this where for example\nif you're organizing web page like the\nway google actually organizes their web\npage they have these like very deep\ncomplicated relationships with like all\nthe different web pages so they need\nstructures to deal with it again for the\npurposes that they need the data for so\nat the end of the day the reason why\ncompanies care about all of this the\nreason why you need to know all of this\nas a programmer it's like the equivalent\nof someone who organizes their room like\na complete mess no one wants to hire\nsomeone who doesn't know how to organize\ntheir work effectively and to do stuff\nin an efficient way and so this is the\nanalogy of the programmer who just does\nstuff in a way that maybe works but it's\nnot the most efficient way to do it and\nfor companies especially these large\nenterprises where all these details\nreally matter because they're dealing\nwith like billions of pieces of data\nthey want to hire programmers who can\norganize their code effectively and that\nis really what data structures are all\nabout if you want to actually now learn\nthese details obviously this video is\nnot enough first of all i would\nrecommend subscribing to this channel\nbecause again if enough of you like this\nvideo i want to make a similar video\nabout the other side of these virtual\nalgorithms which is algorithms but\nreally to learn all of this is not easy\nand to learn it effectively you need a\ngood step-by-step plan and a path to\nmake sure that you're learning\neverything that you need to know in the\nmost efficient way if possible and for\nthat i can be for you i mean this video\nwhere i talk about exactly that i\ndescribe exactly an exact step-by-step\nplan that you can take from a high level\noverview into all the theoretical\ndetails if you want to master all these\ntopics and learn to pass coding\ninterviews you should absolutely watch\nthis video right here\n",
  "words": [
    "people",
    "studying",
    "data",
    "structures",
    "algorithms",
    "exciting",
    "part",
    "programming",
    "trust",
    "exactly",
    "feeling",
    "used",
    "first",
    "started",
    "learning",
    "data",
    "structures",
    "algorithms",
    "seemed",
    "boring",
    "could",
    "quite",
    "understand",
    "even",
    "important",
    "seemed",
    "like",
    "something",
    "sort",
    "learn",
    "get",
    "foot",
    "door",
    "forget",
    "focus",
    "actually",
    "excited",
    "like",
    "coding",
    "tinderbots",
    "actually",
    "properly",
    "learned",
    "topics",
    "taking",
    "time",
    "actually",
    "understand",
    "important",
    "actually",
    "completely",
    "changed",
    "mind",
    "think",
    "data",
    "reaction",
    "algorithms",
    "one",
    "beautiful",
    "parts",
    "programming",
    "computer",
    "science",
    "video",
    "want",
    "give",
    "glimpse",
    "beauty",
    "giving",
    "literally",
    "dumbest",
    "simple",
    "explanation",
    "data",
    "structures",
    "give",
    "sort",
    "intuitive",
    "understanding",
    "take",
    "actual",
    "study",
    "particular",
    "data",
    "structure",
    "sort",
    "framework",
    "mind",
    "going",
    "hopefully",
    "hopefully",
    "may",
    "even",
    "start",
    "appreciate",
    "beauty",
    "implementing",
    "data",
    "structures",
    "actually",
    "believe",
    "remember",
    "exactly",
    "like",
    "understand",
    "anything",
    "data",
    "structures",
    "video",
    "completely",
    "language",
    "agnostic",
    "whichever",
    "programming",
    "language",
    "learned",
    "past",
    "watch",
    "video",
    "end",
    "always",
    "give",
    "exact",
    "resources",
    "use",
    "way",
    "go",
    "conceptual",
    "understanding",
    "mastering",
    "topics",
    "really",
    "passionate",
    "reaction",
    "algorithms",
    "enjoyed",
    "video",
    "similar",
    "video",
    "coming",
    "algorithms",
    "well",
    "enjoy",
    "video",
    "leave",
    "like",
    "many",
    "people",
    "like",
    "video",
    "sort",
    "tell",
    "whether",
    "make",
    "okay",
    "data",
    "structures",
    "extremely",
    "high",
    "level",
    "data",
    "structure",
    "way",
    "organizing",
    "data",
    "whenever",
    "writing",
    "program",
    "purpose",
    "computers",
    "exist",
    "first",
    "place",
    "data",
    "like",
    "numbers",
    "maybe",
    "string",
    "something",
    "want",
    "data",
    "produce",
    "useful",
    "result",
    "turns",
    "really",
    "matters",
    "actually",
    "organize",
    "data",
    "computer",
    "memory",
    "know",
    "right",
    "makes",
    "sense",
    "organized",
    "couple",
    "specific",
    "examples",
    "allow",
    "actually",
    "understand",
    "dumbest",
    "way",
    "possible",
    "way",
    "even",
    "literal",
    "dumbass",
    "like",
    "could",
    "understand",
    "work",
    "first",
    "let",
    "briefly",
    "talk",
    "idea",
    "organizing",
    "data",
    "actually",
    "important",
    "point",
    "want",
    "get",
    "job",
    "studying",
    "data",
    "structures",
    "algorithms",
    "literally",
    "important",
    "thing",
    "need",
    "know",
    "good",
    "data",
    "structures",
    "algorithms",
    "good",
    "writing",
    "programs",
    "logical",
    "way",
    "way",
    "makes",
    "sense",
    "way",
    "efficient",
    "companies",
    "want",
    "see",
    "fundamental",
    "knowledge",
    "principles",
    "apply",
    "production",
    "code",
    "make",
    "gold",
    "really",
    "good",
    "therefore",
    "programmer",
    "worth",
    "money",
    "company",
    "spending",
    "data",
    "structure",
    "way",
    "organizing",
    "data",
    "computer",
    "memory",
    "way",
    "computer",
    "memory",
    "works",
    "really",
    "dumb",
    "sort",
    "simplified",
    "way",
    "memory",
    "blocks",
    "called",
    "like",
    "memory",
    "registers",
    "registers",
    "hold",
    "kind",
    "value",
    "maybe",
    "two",
    "five",
    "seven",
    "whenever",
    "writing",
    "program",
    "probably",
    "something",
    "one",
    "piece",
    "data",
    "like",
    "two",
    "often",
    "something",
    "like",
    "collection",
    "data",
    "sort",
    "related",
    "way",
    "maybe",
    "list",
    "numbers",
    "like",
    "list",
    "transactions",
    "want",
    "add",
    "together",
    "something",
    "like",
    "makes",
    "sense",
    "actually",
    "organize",
    "data",
    "close",
    "computer",
    "memory",
    "easy",
    "access",
    "different",
    "pieces",
    "data",
    "rather",
    "define",
    "separate",
    "variables",
    "like",
    "equals",
    "two",
    "b",
    "equals",
    "five",
    "define",
    "one",
    "variable",
    "one",
    "data",
    "structure",
    "called",
    "list",
    "first",
    "data",
    "structure",
    "learned",
    "basic",
    "one",
    "put",
    "numbers",
    "one",
    "variable",
    "future",
    "want",
    "access",
    "middle",
    "element",
    "list",
    "go",
    "list",
    "one",
    "computer",
    "perspective",
    "variables",
    "stored",
    "close",
    "together",
    "accessing",
    "together",
    "maybe",
    "looping",
    "something",
    "lot",
    "easier",
    "sort",
    "computer",
    "equivalent",
    "let",
    "say",
    "like",
    "making",
    "youtube",
    "videos",
    "right",
    "multiple",
    "pieces",
    "gear",
    "always",
    "sort",
    "need",
    "whenever",
    "want",
    "start",
    "filming",
    "video",
    "makes",
    "sense",
    "sort",
    "placed",
    "camera",
    "gear",
    "part",
    "room",
    "go",
    "part",
    "room",
    "grab",
    "gear",
    "start",
    "filming",
    "storing",
    "values",
    "something",
    "like",
    "list",
    "computer",
    "equivalent",
    "principle",
    "let",
    "talk",
    "limitation",
    "simple",
    "data",
    "structure",
    "like",
    "list",
    "could",
    "way",
    "lists",
    "arrays",
    "usually",
    "defined",
    "programming",
    "language",
    "certain",
    "amount",
    "memory",
    "case",
    "allocated",
    "three",
    "registers",
    "memory",
    "list",
    "happens",
    "want",
    "add",
    "fourth",
    "element",
    "list",
    "well",
    "might",
    "say",
    "well",
    "easy",
    "sort",
    "added",
    "register",
    "memory",
    "already",
    "taken",
    "different",
    "piece",
    "data",
    "maybe",
    "already",
    "string",
    "like",
    "hello",
    "put",
    "eight",
    "top",
    "hello",
    "gets",
    "replaced",
    "maybe",
    "different",
    "part",
    "programmer",
    "using",
    "piece",
    "string",
    "instead",
    "hello",
    "certainly",
    "eight",
    "everything",
    "crashes",
    "right",
    "way",
    "lists",
    "usually",
    "actually",
    "defined",
    "hood",
    "language",
    "add",
    "element",
    "list",
    "actually",
    "take",
    "list",
    "move",
    "completely",
    "different",
    "part",
    "memory",
    "allocate",
    "memory",
    "even",
    "understand",
    "anything",
    "low",
    "level",
    "programming",
    "might",
    "see",
    "sort",
    "inefficient",
    "know",
    "constantly",
    "adding",
    "data",
    "list",
    "every",
    "time",
    "moving",
    "different",
    "location",
    "memory",
    "become",
    "slow",
    "see",
    "actually",
    "know",
    "thing",
    "want",
    "data",
    "keep",
    "adding",
    "stuff",
    "know",
    "future",
    "adding",
    "lot",
    "stuff",
    "actually",
    "make",
    "sense",
    "use",
    "list",
    "might",
    "better",
    "way",
    "organize",
    "data",
    "purpose",
    "particular",
    "something",
    "like",
    "might",
    "use",
    "something",
    "called",
    "linked",
    "list",
    "linked",
    "list",
    "instead",
    "storing",
    "items",
    "sequentially",
    "memory",
    "defining",
    "node",
    "structure",
    "two",
    "places",
    "memory",
    "first",
    "one",
    "piece",
    "data",
    "like",
    "r2",
    "next",
    "one",
    "pointer",
    "different",
    "node",
    "somewhere",
    "else",
    "memory",
    "matter",
    "essentially",
    "second",
    "item",
    "node",
    "pointing",
    "next",
    "element",
    "node",
    "way",
    "actually",
    "works",
    "memory",
    "registers",
    "numbered",
    "computer",
    "memory",
    "let",
    "say",
    "number",
    "five",
    "number",
    "six",
    "somewhere",
    "randomly",
    "memory",
    "memory",
    "register",
    "know",
    "like",
    "102",
    "second",
    "element",
    "first",
    "node",
    "memory",
    "address",
    "know",
    "second",
    "element",
    "next",
    "one",
    "would",
    "maybe",
    "pointer",
    "register",
    "463",
    "one",
    "know",
    "okay",
    "next",
    "element",
    "link",
    "deletion",
    "memory",
    "location",
    "463",
    "using",
    "camera",
    "example",
    "let",
    "say",
    "using",
    "camera",
    "gear",
    "part",
    "room",
    "space",
    "anymore",
    "could",
    "include",
    "like",
    "note",
    "area",
    "see",
    "okay",
    "next",
    "batch",
    "gear",
    "going",
    "area",
    "room",
    "maybe",
    "note",
    "says",
    "know",
    "bed",
    "something",
    "know",
    "go",
    "find",
    "next",
    "part",
    "gears",
    "way",
    "essentially",
    "keep",
    "increasing",
    "chain",
    "values",
    "chain",
    "camera",
    "gear",
    "almost",
    "indefinitely",
    "long",
    "actually",
    "space",
    "memory",
    "space",
    "room",
    "know",
    "last",
    "element",
    "list",
    "users",
    "find",
    "empty",
    "location",
    "anywhere",
    "memory",
    "add",
    "another",
    "node",
    "linked",
    "list",
    "see",
    "already",
    "simple",
    "requirements",
    "already",
    "sort",
    "need",
    "slightly",
    "complex",
    "data",
    "structure",
    "programmer",
    "perspective",
    "want",
    "add",
    "something",
    "list",
    "call",
    "linked",
    "list",
    "sort",
    "method",
    "defined",
    "inside",
    "data",
    "structure",
    "append",
    "element",
    "list",
    "hood",
    "stuff",
    "happening",
    "sort",
    "drama",
    "happening",
    "programming",
    "even",
    "need",
    "know",
    "anything",
    "crucially",
    "designer",
    "program",
    "designed",
    "correct",
    "way",
    "could",
    "causing",
    "problems",
    "like",
    "causing",
    "whole",
    "hardware",
    "essentially",
    "crash",
    "explode",
    "whatever",
    "horrible",
    "things",
    "would",
    "happen",
    "obviously",
    "even",
    "linked",
    "list",
    "also",
    "downsides",
    "let",
    "say",
    "really",
    "important",
    "specific",
    "application",
    "developing",
    "example",
    "accessing",
    "elements",
    "middle",
    "list",
    "like",
    "accessing",
    "one",
    "right",
    "specific",
    "operation",
    "actually",
    "lot",
    "easier",
    "array",
    "list",
    "like",
    "data",
    "structure",
    "call",
    "list",
    "one",
    "like",
    "whereas",
    "link",
    "sort",
    "loop",
    "list",
    "arrive",
    "item",
    "looking",
    "lot",
    "expensive",
    "see",
    "data",
    "structure",
    "using",
    "always",
    "depends",
    "specific",
    "thing",
    "trying",
    "sort",
    "specific",
    "things",
    "see",
    "user",
    "program",
    "needing",
    "lot",
    "time",
    "way",
    "like",
    "linked",
    "list",
    "would",
    "implemented",
    "actual",
    "programming",
    "language",
    "python",
    "would",
    "something",
    "like",
    "create",
    "class",
    "called",
    "linked",
    "list",
    "would",
    "create",
    "method",
    "inside",
    "magic",
    "client",
    "would",
    "call",
    "append",
    "method",
    "would",
    "simply",
    "magic",
    "behind",
    "scenes",
    "really",
    "beauty",
    "data",
    "structures",
    "know",
    "details",
    "might",
    "bit",
    "fuzzy",
    "point",
    "video",
    "understand",
    "details",
    "give",
    "idea",
    "different",
    "data",
    "structures",
    "even",
    "exist",
    "sort",
    "weird",
    "way",
    "explaining",
    "data",
    "structures",
    "making",
    "sense",
    "would",
    "appreciate",
    "could",
    "tap",
    "like",
    "button",
    "description",
    "let",
    "move",
    "couple",
    "slightly",
    "complex",
    "examples",
    "really",
    "drill",
    "make",
    "sure",
    "really",
    "understand",
    "going",
    "first",
    "word",
    "sponsor",
    "business",
    "working",
    "project",
    "requires",
    "want",
    "make",
    "sure",
    "documents",
    "signed",
    "securely",
    "fast",
    "legally",
    "binding",
    "way",
    "need",
    "listen",
    "sign",
    "api",
    "powerful",
    "tool",
    "allows",
    "embed",
    "website",
    "free",
    "test",
    "fast",
    "deploy",
    "allow",
    "worry",
    "document",
    "approval",
    "cycles",
    "instead",
    "focus",
    "time",
    "growing",
    "business",
    "developers",
    "particularly",
    "love",
    "site",
    "easy",
    "use",
    "detailed",
    "documentation",
    "clear",
    "coding",
    "examples",
    "well",
    "great",
    "video",
    "tutorials",
    "get",
    "started",
    "makes",
    "implementing",
    "api",
    "extremely",
    "easy",
    "programming",
    "language",
    "synonym",
    "api",
    "available",
    "straightforward",
    "sdks",
    "allows",
    "complete",
    "entire",
    "document",
    "approval",
    "cycles",
    "uploading",
    "documents",
    "tracking",
    "signature",
    "progress",
    "design",
    "api",
    "make",
    "sure",
    "apps",
    "keep",
    "running",
    "uptime",
    "accordance",
    "required",
    "compliance",
    "security",
    "requirements",
    "something",
    "sounds",
    "useful",
    "app",
    "luck",
    "currently",
    "unique",
    "offer",
    "market",
    "gives",
    "250",
    "legally",
    "binding",
    "free",
    "want",
    "miss",
    "click",
    "link",
    "description",
    "create",
    "free",
    "sandbox",
    "account",
    "start",
    "building",
    "dynamic",
    "workflows",
    "today",
    "thank",
    "sign",
    "sponsoring",
    "video",
    "back",
    "tutorial",
    "practice",
    "obviously",
    "lot",
    "even",
    "complicated",
    "requirements",
    "things",
    "want",
    "data",
    "let",
    "say",
    "airline",
    "want",
    "sort",
    "structure",
    "data",
    "people",
    "bought",
    "tickets",
    "flights",
    "makes",
    "sense",
    "probably",
    "group",
    "stuff",
    "together",
    "randomly",
    "computer",
    "memory",
    "like",
    "example",
    "order",
    "bought",
    "tickets",
    "probably",
    "really",
    "want",
    "order",
    "sort",
    "priority",
    "people",
    "bought",
    "first",
    "class",
    "tickets",
    "first",
    "want",
    "something",
    "see",
    "first",
    "class",
    "passengers",
    "first",
    "business",
    "class",
    "passengers",
    "peasant",
    "economy",
    "passengers",
    "like",
    "would",
    "useful",
    "airline",
    "operators",
    "data",
    "structure",
    "would",
    "allow",
    "group",
    "data",
    "way",
    "like",
    "turns",
    "common",
    "requirement",
    "many",
    "different",
    "computer",
    "programs",
    "common",
    "data",
    "structure",
    "used",
    "something",
    "called",
    "priority",
    "queue",
    "would",
    "define",
    "essentially",
    "linked",
    "list",
    "like",
    "essentially",
    "every",
    "time",
    "adding",
    "something",
    "list",
    "add",
    "method",
    "would",
    "would",
    "adding",
    "end",
    "list",
    "rather",
    "every",
    "time",
    "adding",
    "person",
    "would",
    "sort",
    "operations",
    "automatically",
    "sort",
    "orders",
    "list",
    "way",
    "airline",
    "wants",
    "orders",
    "priority",
    "order",
    "would",
    "probably",
    "instead",
    "piece",
    "data",
    "link",
    "next",
    "node",
    "list",
    "would",
    "also",
    "field",
    "priority",
    "class",
    "passenger",
    "would",
    "node",
    "looks",
    "something",
    "like",
    "three",
    "values",
    "actual",
    "person",
    "probably",
    "would",
    "already",
    "something",
    "like",
    "dictionary",
    "like",
    "name",
    "birthday",
    "price",
    "paid",
    "whatever",
    "would",
    "value",
    "indicates",
    "business",
    "class",
    "passenger",
    "would",
    "pointers",
    "memory",
    "address",
    "next",
    "person",
    "list",
    "every",
    "time",
    "adding",
    "person",
    "would",
    "defined",
    "inside",
    "data",
    "structures",
    "app",
    "operations",
    "automatically",
    "perhaps",
    "calls",
    "different",
    "function",
    "reorder",
    "passengers",
    "way",
    "passenger",
    "entity",
    "correct",
    "location",
    "list",
    "see",
    "lot",
    "time",
    "even",
    "though",
    "might",
    "think",
    "data",
    "structures",
    "structure",
    "put",
    "data",
    "lot",
    "time",
    "especially",
    "complex",
    "data",
    "structures",
    "lot",
    "operations",
    "want",
    "data",
    "really",
    "thing",
    "keep",
    "mind",
    "defining",
    "data",
    "structures",
    "really",
    "organization",
    "data",
    "also",
    "operations",
    "define",
    "data",
    "point",
    "airline",
    "operators",
    "person",
    "like",
    "going",
    "ticket",
    "need",
    "know",
    "anything",
    "drama",
    "happening",
    "computer",
    "memory",
    "programmer",
    "programmer",
    "understands",
    "data",
    "structures",
    "able",
    "program",
    "intelligent",
    "way",
    "airline",
    "operator",
    "perspective",
    "happening",
    "like",
    "magic",
    "add",
    "new",
    "ticket",
    "pool",
    "ticket",
    "holders",
    "list",
    "automatically",
    "organized",
    "exact",
    "priority",
    "want",
    "magic",
    "data",
    "structures",
    "whole",
    "principle",
    "also",
    "something",
    "often",
    "refer",
    "abstraction",
    "beautiful",
    "thing",
    "computers",
    "computer",
    "science",
    "like",
    "million",
    "different",
    "levels",
    "abstraction",
    "low",
    "level",
    "zeros",
    "ones",
    "inside",
    "computers",
    "even",
    "lower",
    "teran",
    "sisters",
    "electricity",
    "going",
    "logic",
    "gates",
    "need",
    "know",
    "low",
    "level",
    "programmers",
    "designed",
    "higher",
    "level",
    "programming",
    "languages",
    "allow",
    "us",
    "stuff",
    "low",
    "level",
    "computer",
    "without",
    "understanding",
    "drama",
    "happening",
    "thing",
    "programmer",
    "program",
    "important",
    "task",
    "understand",
    "language",
    "understand",
    "programming",
    "concepts",
    "like",
    "data",
    "structures",
    "way",
    "design",
    "programs",
    "people",
    "use",
    "programs",
    "need",
    "know",
    "anything",
    "work",
    "thinking",
    "use",
    "tell",
    "click",
    "button",
    "run",
    "function",
    "exactly",
    "want",
    "reality",
    "relationships",
    "pieces",
    "data",
    "things",
    "want",
    "even",
    "complicated",
    "example",
    "organizing",
    "web",
    "page",
    "like",
    "way",
    "google",
    "actually",
    "organizes",
    "web",
    "page",
    "like",
    "deep",
    "complicated",
    "relationships",
    "like",
    "different",
    "web",
    "pages",
    "need",
    "structures",
    "deal",
    "purposes",
    "need",
    "data",
    "end",
    "day",
    "reason",
    "companies",
    "care",
    "reason",
    "need",
    "know",
    "programmer",
    "like",
    "equivalent",
    "someone",
    "organizes",
    "room",
    "like",
    "complete",
    "mess",
    "one",
    "wants",
    "hire",
    "someone",
    "know",
    "organize",
    "work",
    "effectively",
    "stuff",
    "efficient",
    "way",
    "analogy",
    "programmer",
    "stuff",
    "way",
    "maybe",
    "works",
    "efficient",
    "way",
    "companies",
    "especially",
    "large",
    "enterprises",
    "details",
    "really",
    "matter",
    "dealing",
    "like",
    "billions",
    "pieces",
    "data",
    "want",
    "hire",
    "programmers",
    "organize",
    "code",
    "effectively",
    "really",
    "data",
    "structures",
    "want",
    "actually",
    "learn",
    "details",
    "obviously",
    "video",
    "enough",
    "first",
    "would",
    "recommend",
    "subscribing",
    "channel",
    "enough",
    "like",
    "video",
    "want",
    "make",
    "similar",
    "video",
    "side",
    "virtual",
    "algorithms",
    "algorithms",
    "really",
    "learn",
    "easy",
    "learn",
    "effectively",
    "need",
    "good",
    "plan",
    "path",
    "make",
    "sure",
    "learning",
    "everything",
    "need",
    "know",
    "efficient",
    "way",
    "possible",
    "mean",
    "video",
    "talk",
    "exactly",
    "describe",
    "exactly",
    "exact",
    "plan",
    "take",
    "high",
    "level",
    "overview",
    "theoretical",
    "details",
    "want",
    "master",
    "topics",
    "learn",
    "pass",
    "coding",
    "interviews",
    "absolutely",
    "watch",
    "video",
    "right"
  ],
  "keywords": [
    "people",
    "data",
    "structures",
    "algorithms",
    "part",
    "programming",
    "exactly",
    "first",
    "could",
    "understand",
    "even",
    "important",
    "like",
    "something",
    "sort",
    "learn",
    "get",
    "actually",
    "coding",
    "learned",
    "topics",
    "time",
    "completely",
    "mind",
    "one",
    "computer",
    "video",
    "want",
    "give",
    "beauty",
    "simple",
    "understanding",
    "take",
    "actual",
    "structure",
    "going",
    "start",
    "anything",
    "language",
    "end",
    "always",
    "exact",
    "use",
    "way",
    "go",
    "really",
    "well",
    "make",
    "okay",
    "level",
    "organizing",
    "whenever",
    "writing",
    "program",
    "computers",
    "numbers",
    "maybe",
    "string",
    "useful",
    "organize",
    "memory",
    "know",
    "right",
    "makes",
    "sense",
    "specific",
    "examples",
    "allow",
    "work",
    "let",
    "talk",
    "point",
    "thing",
    "need",
    "good",
    "programs",
    "efficient",
    "companies",
    "see",
    "programmer",
    "works",
    "called",
    "registers",
    "two",
    "five",
    "probably",
    "piece",
    "list",
    "add",
    "together",
    "easy",
    "different",
    "pieces",
    "define",
    "put",
    "element",
    "perspective",
    "accessing",
    "lot",
    "equivalent",
    "say",
    "gear",
    "camera",
    "room",
    "values",
    "defined",
    "might",
    "register",
    "already",
    "hello",
    "using",
    "instead",
    "low",
    "adding",
    "every",
    "location",
    "keep",
    "stuff",
    "linked",
    "node",
    "next",
    "essentially",
    "second",
    "would",
    "link",
    "example",
    "space",
    "requirements",
    "complex",
    "call",
    "method",
    "inside",
    "happening",
    "drama",
    "things",
    "obviously",
    "also",
    "create",
    "class",
    "magic",
    "details",
    "sure",
    "business",
    "api",
    "free",
    "complicated",
    "airline",
    "bought",
    "tickets",
    "order",
    "priority",
    "passengers",
    "person",
    "operations",
    "automatically",
    "passenger",
    "ticket",
    "web",
    "effectively"
  ]
}