{"ast":null,"code":"var _jsxFileName = \"/home/kadi/PythonProjects/eng4IT/flashcards-app/src/components/WordList.js\",\n  _s = $RefreshSig$();\n// В src/components/WordList.js\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WordList({\n  words,\n  userWords,\n  learnedWords,\n  repeatWords,\n  setLearnedWords\n}) {\n  _s();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortMode, setSortMode] = useState(\"alphabet\");\n  const allWords = [...words, ...userWords];\n  const filteredWords = allWords.filter(word => word.english.toLowerCase().includes(searchTerm.toLowerCase()));\n  const sortedWords = filteredWords.sort((a, b) => {\n    if (sortMode === \"alphabet\") {\n      return a.english.localeCompare(b.english);\n    } else if (sortMode === \"difficulty\") {\n      const aErrors = repeatWords.includes(a.english) ? 1 : 0;\n      const bErrors = repeatWords.includes(b.english) ? 1 : 0;\n      return bErrors - aErrors;\n    } else if (sortMode === \"learned\") {\n      const aLearned = learnedWords.includes(a.english) ? 1 : 0;\n      const bLearned = learnedWords.includes(b.english) ? 1 : 0;\n      return bLearned - aLearned;\n    }\n    return 0;\n  });\n  const toggleLearned = word => {\n    if (learnedWords.includes(word.english)) {\n      setLearnedWords(learnedWords.filter(w => w !== word.english));\n    } else {\n      setLearnedWords([...learnedWords, word.english]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A...\",\n      value: searchTerm,\n      onChange: e => setSearchTerm(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: sortMode,\n      onChange: e => setSortMode(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"alphabet\",\n        children: \"\\u0410\\u043B\\u0444\\u0430\\u0432\\u0438\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"difficulty\",\n        children: \"\\u0421\\u043B\\u043E\\u0436\\u043D\\u043E\\u0441\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"learned\",\n        children: \"\\u0418\\u0437\\u0443\\u0447\\u0435\\u043D\\u043D\\u044B\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: sortedWords.map((word, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [word.english, \" - \", word.russian.join(\", \")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleLearned(word),\n          children: learnedWords.includes(word.english) ? \"Удалить из изученных\" : \"Добавить в изученные\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(WordList, \"59tHuk24YTNhx57GJKrhXRVzqGY=\");\n_c = WordList;\nexport default WordList;\nvar _c;\n$RefreshReg$(_c, \"WordList\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","WordList","words","userWords","learnedWords","repeatWords","setLearnedWords","_s","searchTerm","setSearchTerm","sortMode","setSortMode","allWords","filteredWords","filter","word","english","toLowerCase","includes","sortedWords","sort","a","b","localeCompare","aErrors","bErrors","aLearned","bLearned","toggleLearned","w","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","map","index","russian","join","onClick","_c","$RefreshReg$"],"sources":["/home/kadi/PythonProjects/eng4IT/flashcards-app/src/components/WordList.js"],"sourcesContent":["// В src/components/WordList.js\nimport React, { useState } from \"react\";\n\nfunction WordList({\n  words,\n  userWords,\n  learnedWords,\n  repeatWords,\n  setLearnedWords,\n}) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortMode, setSortMode] = useState(\"alphabet\");\n\n  const allWords = [...words, ...userWords];\n\n  const filteredWords = allWords.filter((word) =>\n    word.english.toLowerCase().includes(searchTerm.toLowerCase()),\n  );\n\n  const sortedWords = filteredWords.sort((a, b) => {\n    if (sortMode === \"alphabet\") {\n      return a.english.localeCompare(b.english);\n    } else if (sortMode === \"difficulty\") {\n      const aErrors = repeatWords.includes(a.english) ? 1 : 0;\n      const bErrors = repeatWords.includes(b.english) ? 1 : 0;\n      return bErrors - aErrors;\n    } else if (sortMode === \"learned\") {\n      const aLearned = learnedWords.includes(a.english) ? 1 : 0;\n      const bLearned = learnedWords.includes(b.english) ? 1 : 0;\n      return bLearned - aLearned;\n    }\n    return 0;\n  });\n\n  const toggleLearned = (word) => {\n    if (learnedWords.includes(word.english)) {\n      setLearnedWords(learnedWords.filter((w) => w !== word.english));\n    } else {\n      setLearnedWords([...learnedWords, word.english]);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Поиск...\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n      />\n      <select value={sortMode} onChange={(e) => setSortMode(e.target.value)}>\n        <option value=\"alphabet\">Алфавит</option>\n        <option value=\"difficulty\">Сложность</option>\n        <option value=\"learned\">Изученные</option>\n      </select>\n      <ul>\n        {sortedWords.map((word, index) => (\n          <li key={index}>\n            <span>\n              {word.english} - {word.russian.join(\", \")}\n            </span>\n            <button onClick={() => toggleLearned(word)}>\n              {learnedWords.includes(word.english)\n                ? \"Удалить из изученных\"\n                : \"Добавить в изученные\"}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default WordList;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,QAAQA,CAAC;EAChBC,KAAK;EACLC,SAAS;EACTC,YAAY;EACZC,WAAW;EACXC;AACF,CAAC,EAAE;EAAAC,EAAA;EACD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,UAAU,CAAC;EAEpD,MAAMc,QAAQ,GAAG,CAAC,GAAGV,KAAK,EAAE,GAAGC,SAAS,CAAC;EAEzC,MAAMU,aAAa,GAAGD,QAAQ,CAACE,MAAM,CAAEC,IAAI,IACzCA,IAAI,CAACC,OAAO,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACV,UAAU,CAACS,WAAW,CAAC,CAAC,CAC9D,CAAC;EAED,MAAME,WAAW,GAAGN,aAAa,CAACO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC/C,IAAIZ,QAAQ,KAAK,UAAU,EAAE;MAC3B,OAAOW,CAAC,CAACL,OAAO,CAACO,aAAa,CAACD,CAAC,CAACN,OAAO,CAAC;IAC3C,CAAC,MAAM,IAAIN,QAAQ,KAAK,YAAY,EAAE;MACpC,MAAMc,OAAO,GAAGnB,WAAW,CAACa,QAAQ,CAACG,CAAC,CAACL,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;MACvD,MAAMS,OAAO,GAAGpB,WAAW,CAACa,QAAQ,CAACI,CAAC,CAACN,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;MACvD,OAAOS,OAAO,GAAGD,OAAO;IAC1B,CAAC,MAAM,IAAId,QAAQ,KAAK,SAAS,EAAE;MACjC,MAAMgB,QAAQ,GAAGtB,YAAY,CAACc,QAAQ,CAACG,CAAC,CAACL,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;MACzD,MAAMW,QAAQ,GAAGvB,YAAY,CAACc,QAAQ,CAACI,CAAC,CAACN,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;MACzD,OAAOW,QAAQ,GAAGD,QAAQ;IAC5B;IACA,OAAO,CAAC;EACV,CAAC,CAAC;EAEF,MAAME,aAAa,GAAIb,IAAI,IAAK;IAC9B,IAAIX,YAAY,CAACc,QAAQ,CAACH,IAAI,CAACC,OAAO,CAAC,EAAE;MACvCV,eAAe,CAACF,YAAY,CAACU,MAAM,CAAEe,CAAC,IAAKA,CAAC,KAAKd,IAAI,CAACC,OAAO,CAAC,CAAC;IACjE,CAAC,MAAM;MACLV,eAAe,CAAC,CAAC,GAAGF,YAAY,EAAEW,IAAI,CAACC,OAAO,CAAC,CAAC;IAClD;EACF,CAAC;EAED,oBACEhB,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MACE+B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,mCAAU;MACtBC,KAAK,EAAEzB,UAAW;MAClB0B,QAAQ,EAAGC,CAAC,IAAK1B,aAAa,CAAC0B,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACFxC,OAAA;MAAQiC,KAAK,EAAEvB,QAAS;MAACwB,QAAQ,EAAGC,CAAC,IAAKxB,WAAW,CAACwB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAAAH,QAAA,gBACpE9B,OAAA;QAAQiC,KAAK,EAAC,UAAU;QAAAH,QAAA,EAAC;MAAO;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACzCxC,OAAA;QAAQiC,KAAK,EAAC,YAAY;QAAAH,QAAA,EAAC;MAAS;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC7CxC,OAAA;QAAQiC,KAAK,EAAC,SAAS;QAAAH,QAAA,EAAC;MAAS;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,eACTxC,OAAA;MAAA8B,QAAA,EACGX,WAAW,CAACsB,GAAG,CAAC,CAAC1B,IAAI,EAAE2B,KAAK,kBAC3B1C,OAAA;QAAA8B,QAAA,gBACE9B,OAAA;UAAA8B,QAAA,GACGf,IAAI,CAACC,OAAO,EAAC,KAAG,EAACD,IAAI,CAAC4B,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrC,CAAC,eACPxC,OAAA;UAAQ6C,OAAO,EAAEA,CAAA,KAAMjB,aAAa,CAACb,IAAI,CAAE;UAAAe,QAAA,EACxC1B,YAAY,CAACc,QAAQ,CAACH,IAAI,CAACC,OAAO,CAAC,GAChC,sBAAsB,GACtB;QAAsB;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB,CAAC;MAAA,GARFE,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASV,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACjC,EAAA,CApEQN,QAAQ;AAAA6C,EAAA,GAAR7C,QAAQ;AAsEjB,eAAeA,QAAQ;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}