{"ast":null,"code":"var _jsxFileName = \"/home/kadi/PythonProjects/eng4IT/flashcards-app/src/App.js\",\n  _s = $RefreshSig$();\n// eng4IT/flashcards-app/src/App.js\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"./components/Card\";\nimport ProgressBar from \"./components/ProgressBar\";\nimport AchievementModal from \"./components/AchievementModal\";\nimport WordList from \"./components/WordList\";\nimport Test from \"./components/Test\";\nimport Compare from \"./components/Compare\";\nimport CreateCard from \"./components/CreateCard\";\nimport Statistics from \"./components/Statistics\";\nimport Settings from \"./components/Settings\";\nimport Recommendations from \"./components/Recommendations\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport words from \"./data/words\";\nimport \"./styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentWord, setCurrentWord] = useState(null);\n  const [isNewCard, setIsNewCard] = useState(false);\n  const [isShaking, setIsShaking] = useState(false);\n  const [isSlideOut, setIsSlideOut] = useState(false);\n  const [showSkip, setShowSkip] = useState(false);\n  const [correctAnswers, setCorrectAnswers] = useLocalStorage(\"correctAnswers\", 0);\n  const [incorrectAnswers, setIncorrectAnswers] = useLocalStorage(\"incorrectAnswers\", 0);\n  const [learnedWords, setLearnedWords] = useLocalStorage(\"learnedWords\", []);\n  const [repeatWords, setRepeatWords] = useLocalStorage(\"repeatWords\", []);\n  const [includeLearnedWords, setIncludeLearnedWords] = useLocalStorage(\"includeLearnedWords\", true);\n  const [showAchievement, setShowAchievement] = useState(false);\n  const [achievementMessage, setAchievementMessage] = useState(\"\");\n  const [mode, setMode] = useState(\"cards\"); // Режим обучения\n  const [testResults, setTestResults] = useState([]); // Результаты теста\n  const [showTestResults, setShowTestResults] = useState(false); // Отображение результатов теста\n  const [testLevel, setTestLevel] = useState(\"easy\"); // Уровень сложности теста\n  const [compareWords, setCompareWords] = useState(null); // Слова для режима \"Сравнение\"\n  const [compareAnswer, setCompareAnswer] = useState(null); // Ответ пользователя в режиме \"Сравнение\"\n  const [compareCorrect, setCompareCorrect] = useState(null); // Правильный ответ в режиме \"Сравнение\"\n  const [newWord, setNewWord] = useState(\"\"); // Ввод нового слова\n  const [newTranslations, setNewTranslations] = useState(\"\"); // Ввод переводов\n  const [userWords, setUserWords] = useLocalStorage(\"userWords\", []); // Сохраненные пользовательские карточки\n  const [showCreateCard, setShowCreateCard] = useState(false); // Отображение формы создания карточки\n  const [showImportForm, setShowImportForm] = useState(false); // Отображение формы импорта\n  const [importedWords, setImportedWords] = useState([]); // Импортированные карточки\n  const [points, setPoints] = useLocalStorage(\"points\", 0); // Баллы за правильные ответы\n  const [achievements, setAchievements] = useLocalStorage(\"achievements\", []); // Достижения\n  const [notificationsEnabled, setNotificationsEnabled] = useLocalStorage(\"notificationsEnabled\", true); // Оповещения\n  const [notificationFrequency, setNotificationFrequency] = useLocalStorage(\"notificationFrequency\", \"daily\"); // Частота оповещений\n\n  useEffect(() => {\n    selectNewWord();\n  }, []);\n  useEffect(() => {\n    // Обновление словаря при изменении userWords\n    const updatedWords = [...words, ...userWords];\n    setCurrentWord(updatedWords[Math.floor(Math.random() * updatedWords.length)]);\n  }, [userWords]);\n\n  // Функция для выбора нового слова\n  const selectNewWord = () => {\n    setIsSlideOut(true);\n    setTimeout(() => {\n      setIsNewCard(false);\n      setShowSkip(false);\n      setIsSlideOut(false);\n      const availableWords = words.filter(word => !learnedWords.includes(word.english) || includeLearnedWords && Math.random() > 0.7);\n      const newWord = availableWords[Math.floor(Math.random() * availableWords.length)];\n      setCurrentWord(newWord);\n      setIsNewCard(true);\n    }, 500);\n  };\n  const handleCorrectAnswer = () => {\n    setCorrectAnswers(prev => prev + 1);\n    setPoints(prev => prev + 10);\n    if (repeatWords.includes(currentWord.english)) {\n      setLearnedWords(prev => [...prev, currentWord.english]);\n      setRepeatWords(prev => prev.filter(word => word !== currentWord.english));\n    }\n    checkAchievements();\n    selectNewWord();\n  };\n  const handleIncorrectAnswer = () => {\n    setIncorrectAnswers(prev => prev + 1);\n    if (!repeatWords.includes(currentWord.english)) {\n      setRepeatWords(prev => [...prev, currentWord.english]);\n    }\n    setIsShaking(true);\n    setShowSkip(true);\n    setTimeout(() => setIsShaking(false), 500);\n  };\n  const handleSkip = () => {\n    selectNewWord();\n  };\n  const checkAchievements = () => {\n    if (correctAnswers + 1 === 10 && !achievements.includes(\"10_correct\")) {\n      setAchievements([...achievements, \"10_correct\"]);\n      setAchievementMessage(\"Поздравляем! Вы правильно ответили на 10 слов!\");\n      setShowAchievement(true);\n    }\n  };\n\n  // Функция для управления режимами обучения\n  const handleModeChange = newMode => {\n    setMode(newMode);\n\n    // Очищаем результаты теста при переключении режима\n    if (newMode !== \"test\") {\n      setShowTestResults(false);\n      setTestResults([]);\n    }\n\n    // Очищаем слова для режима \"Сравнение\" при переключении режима\n    if (newMode !== \"compare\") {\n      setCompareWords(null);\n      setCompareAnswer(null);\n      setCompareCorrect(null);\n    }\n  };\n\n  // Функция для старта теста\n  const startTest = () => {\n    setShowTestResults(false);\n    setTestResults([]);\n    const wordsForTest = [...words, ...userWords].filter(word => !learnedWords.includes(word.english));\n    const testWords = wordsForTest.sort(() => 0.5 - Math.random()).slice(0, 10);\n    setTestResults(testWords.map(word => ({\n      word,\n      answer: null\n    })));\n  };\n\n  // Функция для обработки ответа в тесте\n  const handleTestAnswer = (index, answer) => {\n    const updatedResults = [...testResults];\n    updatedResults[index].answer = answer;\n    setTestResults(updatedResults);\n  };\n\n  // Функция для завершения теста\n  const finishTest = () => {\n    setShowTestResults(true);\n  };\n\n  // Функция для выбора слов для режима \"Сравнение\"\n  const selectCompareWords = () => {\n    const availableWords = [...words, ...userWords].filter(word => !learnedWords.includes(word.english));\n    const randomWords = availableWords.sort(() => 0.5 - Math.random()).slice(0, 2);\n    setCompareWords(randomWords);\n    setCompareAnswer(null);\n    setCompareCorrect(null);\n  };\n\n  // Функция для обработки ответа в режиме \"Сравнение\"\n  const handleCompareAnswer = answer => {\n    setCompareAnswer(answer);\n    const correctAnswer = compareWords[0].english === answer ? compareWords[0].russian[0] : compareWords[1].russian[0];\n    setCompareCorrect(correctAnswer);\n  };\n\n  // Функция для добавления новой карточки\n  const addNewWord = () => {\n    const newWordData = {\n      english: newWord,\n      russian: newTranslations.split(\",\")\n    };\n    setUserWords(prev => [...prev, newWordData]);\n    setNewWord(\"\");\n    setNewTranslations(\"\");\n    setShowCreateCard(false);\n  };\n\n  // Функция для импорта карточек\n  const importWords = () => {\n    const parsedWords = importedWords.map(line => {\n      const [english, ...translations] = line.split(\",\");\n      return {\n        english,\n        russian: translations\n      };\n    });\n    setUserWords(prev => [...prev, ...parsedWords]);\n    setImportedWords([]);\n    setShowImportForm(false);\n  };\n\n  // Функция для обработки изменений в форме импорта\n  const handleImportChange = e => {\n    setImportedWords(e.target.value.split(\"\\n\"));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n      correctAnswers: correctAnswers,\n      incorrectAnswers: incorrectAnswers,\n      learnedWords: learnedWords.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mode-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleModeChange(\"cards\"),\n        children: \"\\u041A\\u0430\\u0440\\u0442\\u043E\\u0447\\u043A\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleModeChange(\"list\"),\n        children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleModeChange(\"test\"),\n        children: \"\\u0422\\u0435\\u0441\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleModeChange(\"compare\"),\n        children: \"\\u0421\\u0440\\u0430\\u0432\\u043D\\u0435\\u043D\\u0438\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleModeChange(\"statistics\"),\n        children: \"\\u0421\\u0442\\u0430\\u0442\\u0438\\u0441\\u0442\\u0438\\u043A\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleModeChange(\"settings\"),\n        children: \"\\u041D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleModeChange(\"recommendations\"),\n        children: \"\\u0420\\u0435\\u043A\\u043E\\u043C\\u0435\\u043D\\u0434\\u0430\\u0446\\u0438\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowCreateCard(true),\n        children: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043A\\u0430\\u0440\\u0442\\u043E\\u0447\\u043A\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), mode === \"cards\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-stack\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), currentWord && /*#__PURE__*/_jsxDEV(Card, {\n        word: currentWord,\n        onCorrectAnswer: handleCorrectAnswer,\n        onIncorrectAnswer: handleIncorrectAnswer,\n        isNew: isNewCard,\n        isShaking: isShaking,\n        isSlideOut: isSlideOut,\n        mode: mode // Передаем mode в props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }, this), mode === \"list\" && /*#__PURE__*/_jsxDEV(WordList, {\n      words: words,\n      userWords: userWords,\n      learnedWords: learnedWords,\n      repeatWords: repeatWords,\n      setLearnedWords: setLearnedWords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }, this), mode === \"test\" && /*#__PURE__*/_jsxDEV(Test, {\n      words: words,\n      userWords: userWords,\n      learnedWords: learnedWords,\n      repeatWords: repeatWords,\n      setLearnedWords: setLearnedWords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }, this), mode === \"compare\" && /*#__PURE__*/_jsxDEV(Compare, {\n      words: words,\n      userWords: userWords,\n      learnedWords: learnedWords,\n      repeatWords: repeatWords,\n      setLearnedWords: setLearnedWords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }, this), mode === \"create\" && /*#__PURE__*/_jsxDEV(CreateCard, {\n      userWords: userWords,\n      setUserWords: setUserWords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }, this), mode === \"statistics\" && /*#__PURE__*/_jsxDEV(Statistics, {\n      correctAnswers: correctAnswers,\n      incorrectAnswers: incorrectAnswers,\n      learnedWords: learnedWords,\n      repeatWords: repeatWords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }, this), mode === \"settings\" && /*#__PURE__*/_jsxDEV(Settings, {\n      notificationsEnabled: notificationsEnabled,\n      setNotificationsEnabled: setNotificationsEnabled,\n      notificationFrequency: notificationFrequency,\n      setNotificationFrequency: setNotificationFrequency\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }, this), mode === \"recommendations\" && /*#__PURE__*/_jsxDEV(Recommendations, {\n      words: words,\n      userWords: userWords,\n      learnedWords: learnedWords,\n      repeatWords: repeatWords\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 9\n    }, this), showSkip && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"skip-button\",\n      onClick: handleSkip,\n      children: \"\\u041F\\u0440\\u043E\\u043F\\u0443\\u0441\\u0442\\u0438\\u0442\\u044C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: includeLearnedWords,\n          onChange: () => setIncludeLearnedWords(!includeLearnedWords)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this), \"\\u0412\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C \\u0438\\u0437\\u0443\\u0447\\u0435\\u043D\\u043D\\u044B\\u0435 \\u0441\\u043B\\u043E\\u0432\\u0430\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AchievementModal, {\n      show: showAchievement,\n      message: achievementMessage,\n      onClose: () => setShowAchievement(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"e6jbFHqzgfNh2LN9SrkoM0iQt3Y=\", false, function () {\n  return [useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Card","ProgressBar","AchievementModal","WordList","Test","Compare","CreateCard","Statistics","Settings","Recommendations","useLocalStorage","words","jsxDEV","_jsxDEV","App","_s","currentWord","setCurrentWord","isNewCard","setIsNewCard","isShaking","setIsShaking","isSlideOut","setIsSlideOut","showSkip","setShowSkip","correctAnswers","setCorrectAnswers","incorrectAnswers","setIncorrectAnswers","learnedWords","setLearnedWords","repeatWords","setRepeatWords","includeLearnedWords","setIncludeLearnedWords","showAchievement","setShowAchievement","achievementMessage","setAchievementMessage","mode","setMode","testResults","setTestResults","showTestResults","setShowTestResults","testLevel","setTestLevel","compareWords","setCompareWords","compareAnswer","setCompareAnswer","compareCorrect","setCompareCorrect","newWord","setNewWord","newTranslations","setNewTranslations","userWords","setUserWords","showCreateCard","setShowCreateCard","showImportForm","setShowImportForm","importedWords","setImportedWords","points","setPoints","achievements","setAchievements","notificationsEnabled","setNotificationsEnabled","notificationFrequency","setNotificationFrequency","selectNewWord","updatedWords","Math","floor","random","length","setTimeout","availableWords","filter","word","includes","english","handleCorrectAnswer","prev","checkAchievements","handleIncorrectAnswer","handleSkip","handleModeChange","newMode","startTest","wordsForTest","testWords","sort","slice","map","answer","handleTestAnswer","index","updatedResults","finishTest","selectCompareWords","randomWords","handleCompareAnswer","correctAnswer","russian","addNewWord","newWordData","split","importWords","parsedWords","line","translations","handleImportChange","e","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onCorrectAnswer","onIncorrectAnswer","isNew","type","checked","onChange","show","message","onClose","_c","$RefreshReg$"],"sources":["/home/kadi/PythonProjects/eng4IT/flashcards-app/src/App.js"],"sourcesContent":["// eng4IT/flashcards-app/src/App.js\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"./components/Card\";\nimport ProgressBar from \"./components/ProgressBar\";\nimport AchievementModal from \"./components/AchievementModal\";\nimport WordList from \"./components/WordList\";\nimport Test from \"./components/Test\";\nimport Compare from \"./components/Compare\";\nimport CreateCard from \"./components/CreateCard\";\nimport Statistics from \"./components/Statistics\";\nimport Settings from \"./components/Settings\";\nimport Recommendations from \"./components/Recommendations\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport words from \"./data/words\";\nimport \"./styles/App.css\";\n\nfunction App() {\n  const [currentWord, setCurrentWord] = useState(null);\n  const [isNewCard, setIsNewCard] = useState(false);\n  const [isShaking, setIsShaking] = useState(false);\n  const [isSlideOut, setIsSlideOut] = useState(false);\n  const [showSkip, setShowSkip] = useState(false);\n  const [correctAnswers, setCorrectAnswers] = useLocalStorage(\n    \"correctAnswers\",\n    0,\n  );\n  const [incorrectAnswers, setIncorrectAnswers] = useLocalStorage(\n    \"incorrectAnswers\",\n    0,\n  );\n  const [learnedWords, setLearnedWords] = useLocalStorage(\"learnedWords\", []);\n  const [repeatWords, setRepeatWords] = useLocalStorage(\"repeatWords\", []);\n  const [includeLearnedWords, setIncludeLearnedWords] = useLocalStorage(\n    \"includeLearnedWords\",\n    true,\n  );\n  const [showAchievement, setShowAchievement] = useState(false);\n  const [achievementMessage, setAchievementMessage] = useState(\"\");\n  const [mode, setMode] = useState(\"cards\"); // Режим обучения\n  const [testResults, setTestResults] = useState([]); // Результаты теста\n  const [showTestResults, setShowTestResults] = useState(false); // Отображение результатов теста\n  const [testLevel, setTestLevel] = useState(\"easy\"); // Уровень сложности теста\n  const [compareWords, setCompareWords] = useState(null); // Слова для режима \"Сравнение\"\n  const [compareAnswer, setCompareAnswer] = useState(null); // Ответ пользователя в режиме \"Сравнение\"\n  const [compareCorrect, setCompareCorrect] = useState(null); // Правильный ответ в режиме \"Сравнение\"\n  const [newWord, setNewWord] = useState(\"\"); // Ввод нового слова\n  const [newTranslations, setNewTranslations] = useState(\"\"); // Ввод переводов\n  const [userWords, setUserWords] = useLocalStorage(\"userWords\", []); // Сохраненные пользовательские карточки\n  const [showCreateCard, setShowCreateCard] = useState(false); // Отображение формы создания карточки\n  const [showImportForm, setShowImportForm] = useState(false); // Отображение формы импорта\n  const [importedWords, setImportedWords] = useState([]); // Импортированные карточки\n  const [points, setPoints] = useLocalStorage(\"points\", 0); // Баллы за правильные ответы\n  const [achievements, setAchievements] = useLocalStorage(\"achievements\", []); // Достижения\n  const [notificationsEnabled, setNotificationsEnabled] = useLocalStorage(\n    \"notificationsEnabled\",\n    true,\n  ); // Оповещения\n  const [notificationFrequency, setNotificationFrequency] = useLocalStorage(\n    \"notificationFrequency\",\n    \"daily\",\n  ); // Частота оповещений\n\n  useEffect(() => {\n    selectNewWord();\n  }, []);\n\n  useEffect(() => {\n    // Обновление словаря при изменении userWords\n    const updatedWords = [...words, ...userWords];\n    setCurrentWord(\n      updatedWords[Math.floor(Math.random() * updatedWords.length)],\n    );\n  }, [userWords]);\n\n  // Функция для выбора нового слова\n  const selectNewWord = () => {\n    setIsSlideOut(true);\n    setTimeout(() => {\n      setIsNewCard(false);\n      setShowSkip(false);\n      setIsSlideOut(false);\n\n      const availableWords = words.filter(\n        (word) =>\n          !learnedWords.includes(word.english) ||\n          (includeLearnedWords && Math.random() > 0.7),\n      );\n\n      const newWord =\n        availableWords[Math.floor(Math.random() * availableWords.length)];\n      setCurrentWord(newWord);\n      setIsNewCard(true);\n    }, 500);\n  };\n\n  const handleCorrectAnswer = () => {\n    setCorrectAnswers((prev) => prev + 1);\n    setPoints((prev) => prev + 10);\n\n    if (repeatWords.includes(currentWord.english)) {\n      setLearnedWords((prev) => [...prev, currentWord.english]);\n      setRepeatWords((prev) =>\n        prev.filter((word) => word !== currentWord.english),\n      );\n    }\n\n    checkAchievements();\n    selectNewWord();\n  };\n\n  const handleIncorrectAnswer = () => {\n    setIncorrectAnswers((prev) => prev + 1);\n\n    if (!repeatWords.includes(currentWord.english)) {\n      setRepeatWords((prev) => [...prev, currentWord.english]);\n    }\n\n    setIsShaking(true);\n    setShowSkip(true);\n    setTimeout(() => setIsShaking(false), 500);\n  };\n\n  const handleSkip = () => {\n    selectNewWord();\n  };\n\n  const checkAchievements = () => {\n    if (correctAnswers + 1 === 10 && !achievements.includes(\"10_correct\")) {\n      setAchievements([...achievements, \"10_correct\"]);\n      setAchievementMessage(\"Поздравляем! Вы правильно ответили на 10 слов!\");\n      setShowAchievement(true);\n    }\n  };\n\n  // Функция для управления режимами обучения\n  const handleModeChange = (newMode) => {\n    setMode(newMode);\n\n    // Очищаем результаты теста при переключении режима\n    if (newMode !== \"test\") {\n      setShowTestResults(false);\n      setTestResults([]);\n    }\n\n    // Очищаем слова для режима \"Сравнение\" при переключении режима\n    if (newMode !== \"compare\") {\n      setCompareWords(null);\n      setCompareAnswer(null);\n      setCompareCorrect(null);\n    }\n  };\n\n  // Функция для старта теста\n  const startTest = () => {\n    setShowTestResults(false);\n    setTestResults([]);\n\n    const wordsForTest = [...words, ...userWords].filter(\n      (word) => !learnedWords.includes(word.english),\n    );\n\n    const testWords = wordsForTest.sort(() => 0.5 - Math.random()).slice(0, 10);\n    setTestResults(testWords.map((word) => ({ word, answer: null })));\n  };\n\n  // Функция для обработки ответа в тесте\n  const handleTestAnswer = (index, answer) => {\n    const updatedResults = [...testResults];\n    updatedResults[index].answer = answer;\n    setTestResults(updatedResults);\n  };\n\n  // Функция для завершения теста\n  const finishTest = () => {\n    setShowTestResults(true);\n  };\n\n  // Функция для выбора слов для режима \"Сравнение\"\n  const selectCompareWords = () => {\n    const availableWords = [...words, ...userWords].filter(\n      (word) => !learnedWords.includes(word.english),\n    );\n    const randomWords = availableWords\n      .sort(() => 0.5 - Math.random())\n      .slice(0, 2);\n    setCompareWords(randomWords);\n    setCompareAnswer(null);\n    setCompareCorrect(null);\n  };\n\n  // Функция для обработки ответа в режиме \"Сравнение\"\n  const handleCompareAnswer = (answer) => {\n    setCompareAnswer(answer);\n    const correctAnswer =\n      compareWords[0].english === answer\n        ? compareWords[0].russian[0]\n        : compareWords[1].russian[0];\n    setCompareCorrect(correctAnswer);\n  };\n\n  // Функция для добавления новой карточки\n  const addNewWord = () => {\n    const newWordData = {\n      english: newWord,\n      russian: newTranslations.split(\",\"),\n    };\n    setUserWords((prev) => [...prev, newWordData]);\n    setNewWord(\"\");\n    setNewTranslations(\"\");\n    setShowCreateCard(false);\n  };\n\n  // Функция для импорта карточек\n  const importWords = () => {\n    const parsedWords = importedWords.map((line) => {\n      const [english, ...translations] = line.split(\",\");\n      return { english, russian: translations };\n    });\n    setUserWords((prev) => [...prev, ...parsedWords]);\n    setImportedWords([]);\n    setShowImportForm(false);\n  };\n\n  // Функция для обработки изменений в форме импорта\n  const handleImportChange = (e) => {\n    setImportedWords(e.target.value.split(\"\\n\"));\n  };\n\n  return (\n    <div className=\"App\">\n      <ProgressBar\n        correctAnswers={correctAnswers}\n        incorrectAnswers={incorrectAnswers}\n        learnedWords={learnedWords.length}\n      />\n\n      <div className=\"mode-selector\">\n        <button onClick={() => handleModeChange(\"cards\")}>Карточки</button>\n        <button onClick={() => handleModeChange(\"list\")}>Список</button>\n        <button onClick={() => handleModeChange(\"test\")}>Тест</button>\n        <button onClick={() => handleModeChange(\"compare\")}>Сравнение</button>\n        <button onClick={() => handleModeChange(\"statistics\")}>\n          Статистика\n        </button>\n        <button onClick={() => handleModeChange(\"settings\")}>Настройки</button>\n        <button onClick={() => handleModeChange(\"recommendations\")}>\n          Рекомендации\n        </button>\n        <button onClick={() => setShowCreateCard(true)}>\n          Создать карточку\n        </button>\n      </div>\n\n      {mode === \"cards\" && (\n        <div className=\"card-stack\">\n          <div className=\"card-placeholder\" />\n          <div className=\"card-placeholder\" />\n          <div className=\"card-placeholder\" />\n          {currentWord && (\n            <Card\n              word={currentWord}\n              onCorrectAnswer={handleCorrectAnswer}\n              onIncorrectAnswer={handleIncorrectAnswer}\n              isNew={isNewCard}\n              isShaking={isShaking}\n              isSlideOut={isSlideOut}\n              mode={mode} // Передаем mode в props\n            />\n          )}\n        </div>\n      )}\n\n      {mode === \"list\" && (\n        <WordList\n          words={words}\n          userWords={userWords}\n          learnedWords={learnedWords}\n          repeatWords={repeatWords}\n          setLearnedWords={setLearnedWords}\n        />\n      )}\n\n      {mode === \"test\" && (\n        <Test\n          words={words}\n          userWords={userWords}\n          learnedWords={learnedWords}\n          repeatWords={repeatWords}\n          setLearnedWords={setLearnedWords}\n        />\n      )}\n\n      {mode === \"compare\" && (\n        <Compare\n          words={words}\n          userWords={userWords}\n          learnedWords={learnedWords}\n          repeatWords={repeatWords}\n          setLearnedWords={setLearnedWords}\n        />\n      )}\n\n      {mode === \"create\" && (\n        <CreateCard userWords={userWords} setUserWords={setUserWords} />\n      )}\n\n      {mode === \"statistics\" && (\n        <Statistics\n          correctAnswers={correctAnswers}\n          incorrectAnswers={incorrectAnswers}\n          learnedWords={learnedWords}\n          repeatWords={repeatWords}\n        />\n      )}\n\n      {mode === \"settings\" && (\n        <Settings\n          notificationsEnabled={notificationsEnabled}\n          setNotificationsEnabled={setNotificationsEnabled}\n          notificationFrequency={notificationFrequency}\n          setNotificationFrequency={setNotificationFrequency}\n        />\n      )}\n\n      {mode === \"recommendations\" && (\n        <Recommendations\n          words={words}\n          userWords={userWords}\n          learnedWords={learnedWords}\n          repeatWords={repeatWords}\n        />\n      )}\n\n      {showSkip && (\n        <button className=\"skip-button\" onClick={handleSkip}>\n          Пропустить\n        </button>\n      )}\n\n      <div className=\"settings\">\n        <label>\n          <input\n            type=\"checkbox\"\n            checked={includeLearnedWords}\n            onChange={() => setIncludeLearnedWords(!includeLearnedWords)}\n          />\n          Включить изученные слова\n        </label>\n      </div>\n\n      <AchievementModal\n        show={showAchievement}\n        message={achievementMessage}\n        onClose={() => setShowAchievement(false)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}