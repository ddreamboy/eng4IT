flask a minimalistic web framework which
turns request handling into its most
basic possible form a function to get
started create a file ending in py and
import flask then create an application
object with the flask Constructor Define
a function which returns some data and
decorate it with app. route and a path
this function will now be called
whenever a request hits the server with
this path and the return value will be
sent back to the client to handle other
HTTP verbs pass the methods argument to
app. Route what if you want to use Query
parameters simply reference flask
request. args to get a dictionary of
them for dynamic paths wrap a node with
angle brackets and accept it as a
parameter to the function access cookies
with flask do request. cookies and to
create new ones wrap your content with
flask do make response you can then edit
response headers or just use do set
cookie with a key and a value for it to
be sent back in subsequent requests but
what about files create a static
directory and then anyone will be able
to access files within with the URL /
static SL followed by the file name you
can also return a specific file from a
route function with flask do send file
flask supports Ginger a templating
engine for embedding python into HTML
and rendering it on the server to use
ginger create a templates folder and a
regular old. HTML file within this file
you can evaluate pythonic expressions
with double curly braises their outputs
will be rendered into the file use curly
braces with percentage signs to create
blocks anything within an if block will
only render if the pass condition is
true similarly anything within a four
block will render once for every
iteration of the loop in your python
code use flask do render template with
the name of the file you wish to render
pass as many keyword arguments as you
want containing all the data you used
within the template once your W is ready
run it with the proper wsgi server or in
a development setting just slap app.run
at the end of the file that was a bite
of flask I hope you enjoyed and thanks
for watching
