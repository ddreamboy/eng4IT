I dropped out of college, was
in debt, working 60 hours a week,
hated my job,
and most importantly, I felt stuck.
This is the
story of how I learned how to code
within four months, and I got a job.
I did it with no computer science
degree or a coding BootCamp
I am going to explain
exactly what I learned, how I got
a job, and how much that job paid.
Let's go.
Before
I got into tech, I was working
a lot of dead end sales jobs,
because I dropped
out of community college and
I didn't really have any other skills.
I didn't like the
idea of always having to hop from
job to job If I didn't like something.
I wanted something with a little
bit more career mobility long term.
I didn't
even really know what coding was.
I just
knew that the tech industry was,
let's say, a great environment for
$180 grand now
$200 ish
$250,000
$400,000 annually
growth... Yeah.
By the way, I'm not knocking sales.
I think sales
is a really important skill to learn.
I just needed a change, and it
really just wasn't for me long term.
And I wanted to gain the ability
to build something of my own.
The idea of building
something from zero to one
seemed like a superpower to me.
Day one,
I just went on
Google and I typed in how to code.
That's when I found a site called
FreeCodeCamp, and I started
to learn about web development.
I quickly learned about HTML, CSS,
and I learned
about my first real programming
language called JavaScript.
There's
a bunch of different programming
languages that you could learn,
but I personally
chose JavaScript because
I wanted to build web apps.
Even
major companies like Uber and
Airbnb use it, and there's a massive
demand for it in the job market.
By using FreeCodeCamp, I started
to learn the basics of coding.
I learned things like variables,
loops, objects, and functions.
But even after
doing the tutorials, I didn't really
feel like I could apply to anything.
And I still didn't
even know how to do something
as basic as building a website.
And I realized that I learned how to
code, not exactly how to program.
I was writing
code to solve logic problems,
but I didn't know how to program,
which is using
the code to build something useful.
At this point, though, already
I was starting to love the journey.
I really liked problem solving,
and I could see myself doing
something like this long term.
So
I did what any sane person would
do and I quit my job and I moved
to Korea to minimize my expenses.
And I decided to learn full time.
Learning full time
was a lot harder than I thought.
I've
actually never studied anything
this complicated or tough before,
and I was quickly starting
to realize that I didn't really
know how to study at this pace.
I would sit in front of my computer
and hours and hours would go by.
That was when I went
online, I typed in how to learn.
And
I found a course called "Learning
how to Learn" by Barbara Oakley.
This course was life changing.
My two main
takeaways were one, it taught me
how to learn in space segments,
A technique called Pomodoros.
And the course
taught me that I needed to create
a dedicated space for learning.
So I joined a Coworking
space, so I could focus better.
Now,
armed with new knowledge, I got
back to studying. And it worked.
Here's
what a normal day looked like.
08:00 a.m wake up.
8:30, Head to the train station.
09:00
a.m. Arrive at the coworking space.
9:15, Coffee Journaling
reviewing the curriculum.
9:30 to 12:30,
I would have my first study session,
where I did 30
minutes increments of Pomodoros.
From 12:30
to 1:30, I would eat lunch and take a
small break, then back to studying.
From
02:00 p.m to 6:30, it was more 30
minutes increments of Pomodoros
until I was ready to head out.
From 6:30 to 7:30,
I would gym three times a week,
And then 8:30
to 9:00, I would eat dinner with
my grandma, then help her clean.
This was my schedule
for six days a week, no exceptions.
The next part of FreeCodeCamp
was a lot more challenging.
Front end projects.
They essentially give you a list
of projects that you have to build
using HTML, CSS and JavaScript.
To me, this felt like
a massive jump because I never
actually built anything before.
I felt stuck at this stage
until I found a YouTube channel
of this guy named Stephen
who would stream himself
building these projects line by line.
By copying him
and recreating what he was doing,
I was able to
use that experience and build the
next couple of projects on my own.
I also found a great resource
called watchandcode.com,
where you watch and code.
By following along once again
and modeling others, the concepts
really started to take hold,
and I was really starting
to understand what I was doing,
not just solving a math problem.
In exactly one month, I ended
up earning my FreeCodeCamp
Front End Developer certificate.
I was
learning a lot, but I never actually
built anything full stack before.
Something with a
front end or an interface, the thing
that you see within the browser.
A database where all
the information lives, essentially,
and a server
which handles and manipulates
all the data in the back end
by taking
in requests from the front end.
So I still felt like an
imposter and not a real developer.
You're not an intellectual.
You're a fake and a fraud.
So to
become a programmer, I decided
to build my first full stack project.
Remember
Stephen with a YouTube channel?
I reached out to him
to get his assistance to help me
build my first full stack web app,
we decided
to meet three times a week.
Here's what we did.
We picked one
major overarching project which
will teach me the basics of CRUD,
which
is Create, read, update and delete.
These are the foundations
for any web application.
I decided to clone Pinterest.
I honestly don't think
I would have gotten a job without
this next part, so pay attention.
I asked Stephen
to treat me like a real junior
developer working at a company.
We implemented a project
management tool called Jira.
We used
Jira to compartmentalize the entire
project and write the requirements
of exactly what I'd be building.
This taught
me how to estimate my work
and plan how to build an entire
web app from zero to launch.
We also set
the project up on GitHub, which
is a version control application.
This taught me how to develop
different branches for when
I was working on certain features,
and I could learn how to control
different versions of the code.
Most tech companies use some
version of the two applications
because being a developer isn't
just about knowing how to code.
It's about knowing
how to work collaboratively
with other people as well.
Stephen grilled me on
our pair of programming sessions.
He was
very strict about me keeping the
deadlines and the estimates that
I originally wrote out for myself.
He would constantly question
why I was doing what I was doing.
And
he even taught me the concept
of DRY, just Don't Repeat Yourself,
or essentially
just making reusable code.
I had to learn how
to build by Googling for answers
and using sites like Stack Overflow.
And he
would leave me a lot of comments
on things that I needed to change.
So I learned
how to debug my code on my own.
This made
me feel like I was a real developer.
at this time, I supplemented
my learning journey with
Udemy courses on React and Node
because these
were the two frameworks that
I chose to build my Pinterest clone.
As a result of building
my first full stack project, I ended
up learning how to do things like
how to design a database, build
APIs, set up Auth, and eventually
push the app to a cloud server.
These
are all things I would have never
learned by just doing tutorials.
And
in around two months, I finished
my first full-stack web app.
I remember when I finished the
app, I felt like a real programmer.
That's when reality
set in and I realized I'm still broke.
I haven't made a single
penny in over a couple of months,
and I still needed to find a job.
It was time
to see if everything that I learned
was actually worth anything.
First,
I defined the job that I wanted.
I wanted to be remote. And most
importantly, I wanted to work for
a small to medium sized company,
because I hate working
in a corporate environment.
I found
all the jobs that fit my parameters
on sites like weworkremotly.com
and remoteok.io
And instead
of just applying to these jobs,
I found
the contact information of the
hiring managers and developers
who worked at the company,
and I messaged
them to introduce myself.
I explained
exactly what I had learned up until
this point,what I was looking for.
I even included
the link to my GitHub so they could
see the projects that I had built.
Most importantly,
I included an offer that
I know that they couldn't refuse.
I offered to work for free.
And I understand
guys, not everyone can afford to do
this, but I had originally estimated
that this was going to take
me around four months anyways.
And I had
another month of time that I could
essentially dedicate to learning.
I knew all I had to do
was get my foot into a company,I
could essentially learn there
and then prove
my worth over time to leverage
that into a real job long term.
Overall, I found around
22 jobs I thought fit the parameters
of what I was looking for.
I got
around six responses. From those
responses, I got four interviews.
And out
of the four interviews, I ended up
getting three legitimate job offers.
Even
though I had offered to work for
free, after the technical interviews,
the employers thought that I had
enough skills at that point where I
was worth hiring for a full time job.
I ended up choosing the company
with the best opportunity to learn,
and that
also happened to have the best
compensation package as well.
My first salary was
$50,000 a year,
and
then after my probationary period,
I was making $65,000 a year.
My benefits
kicked in like health and dental.
But the
biggest perk for me was that I got
to work remotely the entire time as
long as I worked the US time zone.
I'm
not saying that you'll be an expert
developer if you follow this plan.
I'm just sharing what I did to
learn just enough to land me a job,
as
most of the progress that I've had
as a developer all came on the job.
No luck here, just focused effort.
Now, I've been
working in tech for over a decade,
and let me
be the first to tell you that nobody
cares about your credentials.
Learning
how to code was mainly two things
learning how to solve problems,
and two, persisting until you find
the answer that you're looking for.
If you're interested in seeing
us learn more cool stuff, make
sure to subscribe to the channel.
And also, if you want
to see me apply these principles
to something other than coding,
like something
artistic, click on this video.
Where we're going to put it?
Here?
