what's happening everyone in this video
I'll be introducing the linked list data
structure we'll be using the Python
coding language because one it's my
favorite language and to its simplicity
will allow me to explain more of the
high-level features of the data
structure without having to delve too
deep into the lower level functionality
unlike dictionaries seen in our prior
video link lists are not a built-in
feature of the Python language instead
in this video I'll start off by
explaining the basics of the data
structure and later on we'll get to
coding up the actual classes and
functions if you have any suggestions on
data structures to cover in future
videos definitely don't hesitate to post
a comment I'll certainly read through
them all as well as address any
questions you may have so to start off
with a linked list is essentially a way
in which to store data in an ordered
manner if you have any experience with
arrays as you can see in this picture
here there should be a fairly simple
idea to understand the easiest way in my
opinion to introduce linked lists is to
compare them with arrays in most coding
languages an array is basically a fixed
sized chunk in memory this chunk is then
subdivided into smaller sections which
can be accessed using indices starting
with the index zero one of the great
benefits to using an array is that we
can access any of the addresses or
indices in constant time that is Big O
of one in Big O notation in layman's
terms this means we can pretty much
access any of the elements in the array
in the same amount of time be that the
first index or at the millionth index
the reason being we only need to
calculate a single memory address that
instruct the computer to pull the data
at that address for any spot in the
array so for example if this were an
array here these shaded green blocks the
indices above them or what you would use
to index into each one of the green
blocks so this would be the data at the
zero with index first index all the way
on up to however large the array may be
in this case the array length is 10 the
only true connection between the
elements of an array lies in the fact
they're slotted next to each other in
memory you can think of the Python list
object as being an array like data
structure the linked list on the other
hand has no strict linear ordering in
memory
instead the ordering of the elements is
controlled by the data structures which
contain each one of the individual
elements rather than each element having
its own fixed size block in memory
slotted in next to its neighbors the
length list uses a data structure called
a node to wrap each one of its elements
along with the stored element itself
this node structure contains the
metadata that shows the whole linked
list together the node contains for one
a pointer to the next element in the
list you can think of the pointer as
either the memory address of the next
node or the next node itself suffice to
say the node has the knowledge of how to
get to the next node as you can see in
the picture the last node can be
identified as the last node because its
next node pointer is set to null there
are two common forms of the length list
both shown in the picture the first is
the one we have just described and is
called a singly linked list the other is
the doubly linked list the only
difference being that the doubly linked
list nodes contain pointers to the prior
element in the list as well as the next
in this picture we can see the
efficiency of various operations using
both the singly and doubly linked lists
pause the video now and jot down this
information if you need it for an exam
take note of the comparisons here
between the linked list and array data
structures I'll now switch over to a
coding editor so we can begin developing
the underlying node and length list data
structures and algorithms okay so the
first data structure we're going to be
implementing is the node class fairly
simple just contains two elements we'll
be passing in a data point or an element
to be stored by this node in the
constructor and by default it will be
set to none
so this is where we're going to be
storing the past data point and this is
where we'll be storing the pointer to
the next node as you can see in the
constructor we're initializing this to
none which makes sense if you recall
that the last element in the linked list
is always going to have its next pointer
set to none so by default we'll set it
to that and then if we have a child node
B attached to the end of this node will
then update this variable as such the
next data structure we're going to be
creating is going to be called
the linked list class and this is
basically a wrapper that wraps over
these nodes so the user is never
actually going to interface with this
node class this is just going to be a
subclass of the linked list okay so here
in the constructor we're always going to
want to have our head node available
inside of the linked list the head node
is never going to contain any actual
data and it's not going to be indexable
in other words the user isn't going to
be able to access this head node this is
just going to be simply used as a
placeholder to allow us to point to the
first element in the list so when we're
first creating our list we're going to
have a list of length 0 so don't get
confused even though we do have a single
node in our length list this actually
isn't going to be one of the data nodes
now the first function we're going to
want to implement is probably going to
be the the append function which is
going to function similarly to the
append function in the list object built
into Python this is going to be adding
on a new data point to the end of the
current list and so obviously when the
linked list is first created there's not
going to be any elements so the append
function will be what's used to create
the first element of the list
be passing in the datapoint now first
we're gonna be creating a new node of
the class node and obviously passing the
data into that which as you can recall
will set the data point inside of the
node will now be creating a variable to
store the node that we're currently
looking at so we'll just call that cur
it was equal to self dot head because
we're going to start obviously at the
left turn left most point of the list
and now we're going to iterate over each
one of the nodes in the list starting
with the head and then once we get to a
point where the next node of the current
node is none we know that that's going
to be the last node in the list at which
point we can insert our new node as the
next node in the prior node so iterating
well the next element of the current
node is not equal to none just traverse
through the list and now once we know
we're at the last element of the list we
can set the next node equal to our new
node the next function we're probably
going to want to implement is going to
be a function to figure out the length
of our linked list which is obviously
very useful if you're trying to manage
the nodes in the list or if you just
want to figure out how large the data
structure is that you're working with so
we'll call this one length not passing
any parameters other than obviously the
instance of the class we'll be creating
another variable to point to our current
node and obviously again we'll set that
equal to head well create another
variable to contain the total number of
nodes we've seen so at this point we
have zero and now we're going to begin
iterating over our nodes
incrementing the total and then
traversing to the next node and then
here once we're done obviously we'll be
exiting once we know that we're at the
last node which you can tell once again
because the next node will be equal to
nine so once we're done with this
iteration or all the iterations of this
loop we'll know that our total variable
will contain the number of elements in
our list so we can return that the next
function we'll be creating is kind of
just a helper function just to help us
along while we're creating the rest of
the functions and that's going to be a
function we can use to display the
current contents of our list after which
we can test and play around with our
lengths and append functions so we'll
call this one display not passed any
parameters we're gonna be just for now
creating a list of elements we've seen
set a new variable for our current over
looking at set that equal to head and
then we're going to begin traversing
over the nodes while the current node
the next element in the current node is
not equal to none set the current node
equal to the next node and then append
the data of the current node to our list
of elements we've seen and at the end of
this iteration or this loop here we're
going to be printing at the elements
we've come across so now we can play
around with our linked list that we've
created so far just test it out and make
sure that our two append and length
functions work properly we can begin by
just creating an instance of our length
list call up my list and first we'll
just display it
switch over to our command prompt and
run the file okay so as we expected
obviously at this point we have nothing
in the list let's try appending on an
integer just append on one try appending
on a second integer as well and then
display it again perfect so now we can
see we've added in our two elements and
we can see them printed nicely as a list
in the Python list object format the
next function will be implementing will
be a extractor function in essence we
want to be able to pull out a data point
at a certain index from our linked list
and this will be the function we'll be
using to do that we'll call it a get
function pass in the index at which we
want to extract the data from first
thing we want to do here is just have a
small check to make sure that the index
that the user passed is not out of the
range or out of the length of our our
length list so we can say if index is
greater than or equal to the length
we'll just print out an error message
get index of range and then for now we
can just return none so now you're
probably getting the hang of this
already and pretty much every one of the
linked list functions you're going to
have to do some sort of iteration over
the elements of the list and obviously
that's the downside that you get when
you switch over from having a structured
data type such as an array or a list
over to one that's more relational so
I'll begin by creating a variable to
contain the current index we're looking
at set that equal to zero once again
another variable to contain the current
though you're looking at which is going
to start with the head and then begin
the iteration here incrementing the
current node by setting the current node
equal to the next node and now here
we're going to be check if the current
index is equal to the index that was
provided by the user then we know we're
at the data point that we want to
extract we'll say return current node
dot data as simple as that
and then otherwise we're going to be
incrementing our current index and we
don't have to worry about the fact that
this is a pretty much a forever loop
because we already checked to make sure
that the index they provided was not
longer than the length of our or list so
far so now I can write some helper code
here to make sure our new get function
works properly
well obviously again create a linked
list we can append on some data end on
one two three and four just print this
out again to make sure it looks
appropriate perfect now let's try doing
printing
Oh mints at second index do my list
get index of two okay
so the element at the second index of
zero one two is three and we've reported
that correctly here so now I can go on
and implement the last function we'll be
implementing in our linked list which
will be an erase function to erase a
node at a certain provided index so
we'll call that erase passing the index
B would wish to erase app and once again
we're going to be checking to make sure
that the index they provided is not
longer than the actual linked list that
we have so far and we would just return
if that was the case so once again we're
going to obviously be using same
notation here to begin our iteration
start the loop and in this case it's
going to be a little bit different we're
going to be saving the current node as
what we can call our last node we're
going to need to do this because when
we're erasing a node say for example if
we wanted to erase three we have to do a
little bit of bookkeeping to make sure
that after we've erased three the next
node in two points to the appropriate
spot at four so last node equals current
node and then we'll increment current
node by spending it equal to the next
node now here we want to check and see
if we're at the index that the user
provided in which case we're going to
want to delete the node so we don't even
actually have to delete the current node
all we have to do is change the pointer
from the last node to be the one skipped
past the current node
so we can say last node dot next is
equal to current node dot next and so
effectively this is going to be a racing
current node and then return and then if
we weren't at the current index yet at
the index the user provided we're going
to be incrementing our current index to
reflect the fact that we've incrementing
our current node now I can add in some
helper code once again to make sure that
our erase function works properly we'll
just append in some data after creating
our linked list just make these a little
bit differentiated display this before
we erase anything now we can erase the
element at index one which should erase
our one and then we can display this
again to make sure it worked properly
okay cool
so as you can see after having inserted
our five elements 0 1 2 3 4 obviously we
have now a linked list of length 5 and
then after calling our erase function at
the first index which is this index here
now we're left with a list of only
length 4 where the 1 is now gone so guys
I think that's going to be it for this
video if you'd like me to create a
github repository for the code in this
lesson post a comment if I end up doing
that I'll also post that in the
description probably also post a comment
on the video so you guys can check that
out
if you enjoyed the video give me a
thumbs up subscribe to my channel if you
want to see more of these videos in the
future also I'd recommend checking out
the video I did on dictionaries in
Python if you're interested in that it's
another data structure that's very
useful
in numerous algorithms and it's also
very efficient to so keep that in mind
hope you guys enjoy the video and I'll
see in the next one
