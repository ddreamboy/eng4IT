today i'm going to talk about the
mysterious init.pie
file and what it is used for in short it
is used to make directories appear as
libraries that way i can import them and
all of the things within them
with simpler commands so in this
resources folder
i have two objects that i've created
object one
is just a class called one that will
print out object one
once it's instantiated and object two is
the same thing just printing
object two and let's say i want to use
those two
objects in the other directory or
outside directory
in tutorial.pi so let's just see what
happens if i try to
import resources
so i'll say python 3 tutorial
dot pi and what we can see is this
actually runs with no problems
so python has no problem importing a
directory
but let's see what happens when i try to
actually access one of the objects
so let's say o equals
resources dot object
one dot one
so i'm saying that this is the directory
here is the file
housing the class and this is the class
if we remember over here we have
resources
object one and then the class one
now what happens if we run this
we get an error that the module
resources has no attribute object 1.
so even though python has imported the
resources directory it's not noticing
any of these python files within it
so what i actually have to do is clear
this out and say
from resources
dot object one
import one now this is saying
from which is specifying the directory
and the file
i am telling that to import from that
file
this class so now when i run it
we have no problem we have imported
object one
and then for object two i have to do the
same thing
from resources dot object
to import two and i could say
t equals 2.
we'll run this and we get object 1
object 2.
so if you just want to import things
from subdirectories this is how you have
to do it you have to say
from path to the object file
the file itself then you have to tell it
to import
the particular thing you want from that
file
and this becomes tedious if you have
multiple files from which you want to
import from and also multiple objects
you want to import
from that file so what we can do is
create an
init.pi file to take care of some of
this for us
so i'm going to come back to my command
line and i'm going to use the touch
command
to create this file and i'll say
resources
slash underscore underscore in it
dot pi
now what i can do is clear all of this
out
and i can simply import resources
now just like the init function in a
class
over here which runs automatically as
soon as the class is instantiated
the init.pi file runs automatically as
soon as a library is imported
so as soon as i say import resources it
looks for and
runs this init.pi file but at the moment
init.pi is blank and what we want
is for our resources library to
automatically have access to
object one and object two so i'm going
to in this init
file say from resources
dot object one import
one and then from resources dot
object to import
to so what's going to happen is
when i run this file it will import
resources which is automatically going
to run
init.pi and init.pi is going to
import the one and two object itself
so when i come back here i can actually
reference
resources dot one
and resources dot two so if i run this
we can see object one and object two
so by creating this init.pi file and
populating it with these
import statements i can turn a set of
individual
files into one library called
resources without init.pi i will have to
import everything one by one in these
import statements
but with it i can simplify the process
and make it repeatable
so we can imagine these object 1 and
object 2
classes being much more useful than they
are and much more generic
such that i might want to import them
into other projects
by having this init.pi file i am able to
simply copy and paste my resources
directory wherever i want
and i'll have access to all the same
functionalities simply by saying
import resources so the init.pi file is
used to make a directory into a library
by automatically running this file
when you import the directory and
in this file you will specify all the
things you want in the library that
exists
in the directory so if this video was
useful for you please leave a like
it helps me grow the channel and it will
help other people find the video
and again if you would like to see these
tools used in a broader context
i recommend checking out my developer
diary series where i am working long
term on big projects and actually
putting these tools to use
so thank you for watching i hope you
learned something and i will see you in
the next one
you
