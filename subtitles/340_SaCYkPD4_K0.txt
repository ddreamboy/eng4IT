how do you decide what your next step on
a project is let's hope you're not
relying on a role of the dice especially
when the decision concerns something as
costly as software development in that
case we suggest a tried and true method
like the software development life cycle
or
sdlc it's a standardized process that
describes different stages of building
highquality software sdlc was conceived
in the 1970s as a way of formulating the
development of large-scale Business
Systems but it prevails today as a
reminder of What stages a product goes
through on the way to eventual we hope
success there are many methodologies
addressing this sequence of stages that
you might have heard of so today we will
talk about the phases of sdlc and the
methodologies applying
[Music]
them the father of the software
development life cycle was a computer
scientist and a director at Lockheed
software Technology Center in Austin
when instant
wroy in his influential article managing
the development of large software
systems he described implementation
steps that are similar to what we use
today there are generally six stages of
software development covered in
sdlc planning and
Analysis it's sometimes also called
requirement analysis or has analysis as
a separate stage before or after
planning all in all at this prolonged
stage the product team collects business
and use requirements about what the
final product must do and how it should
work cost and time estimation scoping
and other planning activities all go
here this is such an extensive phase
that we have several videos covering
software planning so make sure to check
them out after this one second is
designing after the planning stage you
prepare the product's architecture and
design here a software architect
analyzes the requirements and sets the
highlevel structure of the future
systems describing what components on go
where and how they interact with one
another they will also select a
technology for development user
experience and visual design can also be
drafted at this stage clearly without
this stage the following one can't
happen the next phase development is a
stage where programmers use the
architect's design to write code that
will finally turn the vision into a real
thing this is where some aspects of the
final product will be first revealed to
stakeholders then testing more quality
assurance takes place testers and QA
professionals review the products code
and useability for bugs and errors so
they can be fixed before the next
stage deployment is when the product is
released to the
users sometimes this stage is combined
with the following one maintenance where
feedback is constantly gathered and the
product receives continuous updates and
support this includes both fixes and new
features sometimes there's a prototyping
stage between planning and designing a
prototype is a simplified version of the
product used to validate the idea before
any major work begins it doesn't even
have to be coded the design can be used
to receive feedback from stakeholders
and users a prototype is the best way to
verify requirements with minimal effort
and costs so the number of phases and
their titles can differ depending on the
specifics of the projects or a
particular methodology but a common
understanding Remains the Same you start
with a plan then then you design and
develop after that you test and then
release a product but by itself sdlc is
just a concept and it's used as a base
for several models you apply that will
give your project Clarity and help
deliver the best results so what are
they waterfall was the first software
development approach described in Rey's
article back in the 1970s and it adheres
strictly to the sdlc stages the main
idea is that each stage starts only
after the previous one is finished the
timeline due dates and deliverables are
clearly set the waterfall model was
borrowed from the construction and
Manufacturing Industries where it makes
total sense you need to wait for the
blueprints before laying any bricks this
model is very straightforward and well
defined and the team can focus on just
one phase at each point in time so the
project is easier to manage but today
it's fallen out of favor in the
engineering World why
the main reason is that it's the
opposite of flexible whenever you need
to make a change in requirements or
design you need to roll back to stage
one and do the whole cycle all over
again what if at the Finish Line you've
identified some unforeseen risks that
should have been mitigated during
planning when testing happens so late in
the process and stages don't overlap it
inevitably leads to blown deadlines and
budgets so in modern software
development a different approach is used
today agile philosophy is the king the
agile Manifesto which was written by 17
software developers in 2001 was a direct
response to the heavyweight waterfall
methodology among its 12 principles
there are calls to welcome change even
in late development stages and to
deliver software continuously and early
agile solved the waterfall drawbacks in
a few ways firstly the testing phase
isn't separate from the building phase
but rather it's done at every iteration
for example in scrum one of the
Frameworks based on agile the
development is broken down into smaller
Cycles
Sprints Sprints are considered to be
part of the scrum development framework
and they are short periods of time
typically lasting from 1 to 4 weeks at
each Sprint cycle the team Works through
all stages at the end of the Sprint the
finished piece of product is shown to
stakeholders the short feedback loop
allows devs to adapt quickly and find
new approaches faster without
compromising the delivery date another
key change that agile brought to the
development life cycle is the approach
to planning or more specifically to
documentation one of the main values
listed in the agile Manifesto says
working software over comprehensive
documentation but the assumption that
agile teams use little to no docs is
wrong in waterfall the idea was to
create detailed documentation covering
project goals and the working process as
well as precise budget and time
estimates for agile where change is
welcome this would be just a waste of
time so the idea is to produce only
essential docks that is just barely good
enough yes this is a real term in agile
plus it must be a collaborative effort
where a tech writer asks the team for
feedback and encourages others to share
their ideas if you want to learn more
about documentation types and how
they're created we have a few videos
you'll find useful while originally
agile was more of a philosophy today it
has loads of specific tools and
techniques such Frameworks as scrum lean
extreme programming or conon are also
classified as agile approaches even
though they existed before the agile
Manifesto was formulated they now fall
under the agile umbrella each framework
has its best applications and specific
tool set apart from the aforementioned
scrum there's a lean methodology that
focuses on eliminating waste and at its
core is a feedback loop for testing your
assumptions it consists of three
recurrent steps build which basically
means drafting some version of the
product such as an
MVP measure meaning collecting feedback
and evaluating if this version of the
product succeeds and learn drawing
conclusions and deciding how you refine
your product for the next Loop another
framework called Extreme programming or
XP uses the usual life cycle but
emphasizes the technical aspect of
development
it uses such practices as test driven
development code refactoring pair
programming and more also kbon is more
of a management method than a framework
since it uses so-called conon boards to
visualize work for efficiency there are
many more Frameworks in the Agile
development process that can be used
depending on what the team wants or the
project
requires around 2008 A New Concept
emerged from agile that drastically
changed how software is built and
released today
devops is one of the most discussed
development approaches employed by such
Giants as Amazon Netflix Google and
Facebook it stands for development and
operations devops introduces a cultural
shift where different teams work
together developers qas and operations
are no longer writing the code testing
it and deploying and supporting the code
apart from one another now they merge
into a single team often having
multi-disciplinary skills devops life
cycle is typically visualized as an
infinity loop representing the
development processes on the left side
and operations on the right side a team
collaborates and communicates throughout
each phase we have a whole separate
video covering devops and a video series
about all devops aspects you need to
know so check it out after this one
what's important is that devops uses
typical agile planning the product
development has rough objectives
outlined and only the few future Sprints
are detailed so while agile is focused
on identifying features that users will
like devops make sure that existing
processes are optimized and streamlined
to do that devops uses CI
CD continuous integration and continuous
delivery or cicd is a set of principles
that allow developers to deliver
frequent code changes it means that
teams integrate code on a daily or even
an hourly basis by merging code changes
in a central repository and preparing
for deployment at any moment basically
all changes new features and Bug fixes
are always ready to be deployed and the
product can be updated multiple times
per day continuously delivering value to
users HubSpot shared that they add 200
to 300 deployments a day using cicd
Netflix orchestrates over 20,000
deployments daily in 2022 11% of organiz
Iz ation were considered high devops
performers and deployed 417 more times
than low performers this is of course
achieved by high levels of Automation
and the infrastructure that connects all
aspects of product delivery and a
unified
ecosystem although cicd facilitates
agile practices such as getting feedback
quickly and detecting errors in the
early stages it doesn't require short
iterations and introduces automation to
the development life cycle even in agile
introducing product changes can be a
long process especially today when
technological innovations happen so fast
and consumer needs change easily so cicd
solves this problem by adapting in a
short amount of time without disrupting
the whole development flow and consumers
get to see the new features added in
real time and provide their feedback
instantly for 60 years the phases of the
software development life cycle remained
relatively unchanged regardless of
whether you're building a house a rocket
ship or an app you will need to plan
design build test deploy and maintain
the product what matters is the
relations between these phases now when
testers and devs collaborate or are even
capable of doing the same job you don't
need to separate those tasks much
automation tools made it possible to do
many things at the same time and shrink
the cycle to days and hours agile and
many models and approaches that spurted
from it have remained relevant for
decades perhaps they will last another
decade or maybe a new hip technology
will show us a more efficient way to
follow the product development path
regardless we will keep you
updated let us know if you enjoyed the
video like And subscribe if you want
more videos like this we'll see you soon
in the next
[Music]
video yeah
