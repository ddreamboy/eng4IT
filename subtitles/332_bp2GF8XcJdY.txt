data driven documents or d3 is a
javascript library for creating
interactive data visualizations with
scalable vector graphics if you've ever
been to a website that has a graph map
scatter plot histogram dependency
diagram b swarm tree map or pie chart
it's probably powered by d3 under the
hood it was created in 2011 with the
goal of generating svg graphics from
data drawing a data visualization by
hand is extremely difficult with d3 you
start with some input data then write
some javascript to programmatically draw
the graphic for you which can then be
made interactive with things like labels
and controls and when the underlying
data changes it can interpolate and
animate between values resulting in a
beautiful visual for the end user that's
built entirely on web standards that you
already know like html css and
javascript its api allows you to select
and manipulate items in the dom not much
different than something like jquery
what makes d3 different is that you can
set properties as functions that
automatically draw different graphics
based on your data to get started you'll
first want to grab an element from the
dom with the select method like an empty
svg you could then draw a single shape
inside of it with the append method and
customize its appearance by chaining the
attribute method to it that draws a
single shape but the real power of d3
comes into play when you attach data to
a selection instead of using a for loop
to draw a bunch of shapes the select all
method allows you to describe how to
draw shape making your code more
declarative you can then attach data to
it in the form of an array or an
external file and it will draw a shape
for every point in your data set each
point has three possible states enter
update and exit enter is when you would
initially draw your shape but d3 also
keeps track of changes to the data set
allowing you to react when data is
updated or removed it also provides a
bunch of features to make your data look
beautiful like helpers that
automatically draw scales along the x
and y axis based on the domain and range
of the data or you might use transition
to create an animation as each data
point is added to the chart and finally
you might listen to events to add
tooltips or other interactive elements
to your chart this has been d3js in 100
seconds if you want to see more short
videos like this hit the like button and
subscribe and if you want to go beyond
100 seconds there's a new fireship pro
lesson about building a real-time chart
with d3 and firestore thanks for
watching and i will see you in the next
one
