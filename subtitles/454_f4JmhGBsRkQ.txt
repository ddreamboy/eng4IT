hey everyone welcome to my channel take
B store or in my last video we discussed
about what is the Internet of Things
what is web of things and how web of
things is complementing Internet of
Things if you want to get a brief
introduction about Internet of Things
and type of things please check out the
link in the description in today's video
we are going to discuss about widely
used web protocols in Internet of Things
applications such as HTTP web sockets
and mqtt so let's start with HTTP HTTP
stands for hypertext Transfer Protocol
HTTP perhaps the most popular
application protocol used in the
internet and in today's web in order to
send and receive messages between
various systems in the network HTTP and
a symmetric request response
client-server protocol so meaning the
client will request for an information
from the server and the server will
respond with the requested information
if it is available in the Internet HTTP
is stateless so meaning the server will
not remember the previous requests sent
by the client so all the requests sent
by the client to the server is
independent okay so in the diagram you
can see a client and a server for
example the client is requesting for an
information so we are going to browse a
website here so the client is requesting
for
www.hp.com then the server is checking
for this information in the Internet and
once it finds this information its
responding with the beautiful web page
that's how this HTTP protocol works in
simple this has two DP protocol always
runs over TCP and IP TCP is from the
transport layer and IP is from the
network layer of the OSI model so let's
talk in detail about HTTP over tcp/ip in
my next slide I should TP over tcp/ip as
I said before has TTP runs over tcp/ip
in most of the scenario the reason
behind this is let's say you are
requesting for an information from the
client to the server or the class the
server is responding to the clients
request there should be a packet
delivery guarantee okay so that's the
main reason HTTP always runs over
CPI P because TCP has a property so the
property of TCP is the TCP will provide
an acknowledgment okay
so whereas UDP does not provide any
acknowledgement
okay so TCP stands for a transmission
control protocol
whereas IP stands for Internet Protocol
so TCP is used to provide a
communication between two systems or two
computers or to two machines in the
network and IP is used to provide
routing between these devices and each
device will be provided with the IP
address in order to identify and send
the data and packets between these
devices okay
so TCP IP is a transport and network
layer protocol used to communicate
between two machines using the IP
address you can you can send and receive
messages okay
so you from the diagram below you can
see IP is on the layer 3 and TCP is on
the layer 4 whereas HTTP is running over
the TCP IP ok so let's see how this high
street EP works in Internet of Things
before I talk about how this HTTP works
in Internet of Things I want to
introduce a new term called rest rest
stands for representational state
transfer so basically the rest is
standard or you can consider it as a
design ok
to communicate between systems on the
web where as HTTP implementation based
on rest standard ok so a rest is
standard or design and HTTP is an
implementation following that standard
ok so if any architecture in the web
follows the rest standards it is said to
be a restful ok by default if a device
is working based on this standard means
in order to access the device the device
should provide a REST API so API means
application programming interface
basically it's a it's a set of rules in
order to make programs talk to each
other or you can say web services talk
to each other ok ok so let's take an
example here so I have a client
it can be any of your smart phones or
your laptops or browsers whatever so and
I have a smart bulb which supports HTTP
and it's running a web server inside ok
and the device provide REST API which
supports a get put and delay so what
does this I get put until it so
basically these are all the HTTP verbs
we call so when you are searching for a
website in from your browser by default
you are making a get request ok that's
how this HTTP works in normal scenario
so but but when it comes to REST API
there are some other HTTP verbs we will
have the option to use for example put
and delete so put you when you will
users in order to change the state of a
bulb you can use put request and if you
want to remove this device or if you
want to delete this little device from
the so you can use a delete request ok
so now I have a client I have a smart
bulb
supporting this HTTP protocol providing
a REST API I'm going to make a put
request for example the web server
inside the smart bulb is accessible over
HTTP colon slash slash with a web server
calm flashbulb slash property /
- this HTTP endpoint and the bulb will
turn on when once I make and the server
will respond with some kind of status
code as I said 200 ok okay this is the
acknowledgement the server will make to
the client ok so I received your request
I have turned on so so ok 200 ok so it's
saying I'm fine now ok so that's how
this has TTP works in Internet of Things
so basically it can be anything you can
let's say you have a smart sensor you
have any kind of IOT devices each device
will support some some kind of HTTP
verbs get put post to delete so anything
so basically how this is how the hash
TTP works in Internet of Things ok now
let's talk about the WebSocket so what
is a web socket so web socket is a
communication protocol providing full
duplex communication between the client
and the server over a single
see IP connection okay so how WebSocket
is different from hash TT HTTP is
unidirectional meaning the client will
send a request to the server in one
direction and the server will respond to
the client in another direction so
basically it's just uni direction but in
WebSockets scenario both your client and
server will establish a full duplex
communication and the connection between
the client and server will always remind
open as long as the client or server
explicitly close it okay so a WebSocket
is also an application layer protocol
located at layer 7 in the OSI model and
it's depends on that transport
transmission control protocol at layer 4
okay so today the most of the modern
browsers which we are using like firefox
chrome everything supports this
WebSocket
so basically WebSocket is one of the
html5 standard ok so a lot of web
applications today support WebSocket and
there are wide range of IOT applications
or under development using this website
so let's see so here you can see so
basically the client and server is a
bi-directional communication between the
client and server using a single tcp/ip
connection in order to send and receive
messages so now let's see how this web
socket works in Internet of Things ok I
have a client so it can be anything as I
said you know smartphone or browser and
I have a smart but supporting web socket
ok so basically how this celeb socket
works is the client will always do a
handshake with this server first so for
example it's going to use a hash TTP get
request by mentioning that upgrade my
connection to WebSocket ok once the
server received this request from the
client it will respond with one not one
I am switching the protocol to WebSocket
ok so now the bust is back mul and the
client will have a full duplex
connection so meaning the client can
send anything to the smart bulb and the
smart bulb can send anything all its
information to that client in real time
ok so that's how this web socket works
so you should always make a handshake
with the server first the clients up if
the server supports or
but bulb supports WebSocket it will
respond with one not one status quo if
it does not support it will still run
along the HTTP you can access it over a
REST API if it supports okay so if any
of the client or server want to close
the connection they can close the
connection of this WebSocket okay so
that's how simple the WebSocket is so we
can use it for a lot of real-time
applications and why we need to use
WebSocket so web socket is basically an
internet standard and it's it's all of
the commonly and widely used web
technologies in modern web browsers
nowadays okay so web sockets are not
blocked by firewall and can traverse
proxies so meaning that subcircuit
always complements HTTP so so it can run
on a port port 80 or port 443 in order
to provide a secure web socket okay
web socket is useful for real-time
communications without any delay in IOT
applications so you can always use if
you want to sense a data you to show it
on your dashboard you can always use a
WebSocket connection in order to send
real-time information okay then web
socket used very less bandwidth than
HTTP okay whenever the HTTP you are
making a request to the server
there are you're going to make a some
kind of high bandwidth in order to make
a request and get respond but web socket
since the claw the connection is always
open the bandwidth requirement is very
minimum then HTTP and of course
WebSocket is faster than HTTP okay so
these are all the advantages of using
the socket over HTTP
but if battery base to devices if you're
having means it's always good to use
HTTP because WebSocket you are going to
make connection between a client and
server always open which will drain the
battery very fast okay okay now let's
talk about
mqtt MQTT stands for message queuing
telemetry transport so I can strongly
say this is one of the trendy protocol
used by a lot of companies or developers
around the world okay for IOT based
applications so basically what is MQTT
so MQTT is an application
protocol similar to HTTP and WebSocket
located at layer 7 in OSI model which
works on publish/subscribe concept so in
WebSocket and HTTP we call it was the
response but here it is a
publish/subscribe concept ok
so it runs on the top of a tcp/ip
similar to past UDP and absorption here
there will be a mediator we use ok we
will use to communicate or we you to
send data between your sensor and your
client device or whatever so we call it
a broker ok so we always use a broker in
order to send and receive data so the
broker can either being local or in the
Internet let's say if you want to
communicate locally ok you can use the
local broker or let's say you want to
communicate with Internet your device is
somewhere and you want to access it
somewhere from the world so you can use
you can use your broker available on the
Internet there are a lot of public
brokers like hi you
mosquito is a local broker so lot of
brokers are available open source
brokers are available which you can make
use of and one of the key feature of
those mqtt is this mqtt offers a quality
of service ok so basically the immediate
e offers three level of cures so what
does it mean so QoS zero he was one key
word to so Q and s 0 means it's just
fire-and-forget so meaning what are the
messages you published ok there won't be
any delivery guarantee so whether the
subscriber may get your message or may
not so there won't be any guarantee for
your messages qrz 1 means
deliver at least once okay so for
example the published messages will be
delivered to the subscriber at least
once QoS - meaning deliver exactly once
so the published messages will be
delivered exactly once to the
subscribers so whoever subscribed to
this particular topic the message will
be delivered exactly once okay so this
is one of the key feature offered by
MQTT so basically this MQTT will publish
and subscribe via some
some some kind of parameters called we
call it topics okay so basically all the
informations or all the sensor data
whatever we published we will publish on
a topic the subscriber will subscribe to
this topic in order to read the data
okay so maybe let's take a look into a
real life example so now let's see how
this MQTT works in the Internet of
Things scenario okay let's say you own a
smart car or an autonomous car we're
just having a lot of sensors like radar
sensors laser sensors ultrasonic sensors
okay and you're planning to use mqtt in
order to monitor the performance of the
car and you want to get the data in real
time and you want to monitor it in a
dashboard okay so now you're going to
use a public trend broker which is
available on the Internet and what
you're going to do is you are going to
publish your sensor data to this broker
so in this mqt scenario your smart car
and your client device both are clients
and your broker is a sower okay so your
smart car will publish the sensor data
to the broker on the topic sensors slash
Raider which publish the radar data and
sensors slash ultrasonic which publish
the ultrasonic sensors data and you are
using your client device in order to
subscribe to this particular topic so
subscribe sensor slash trader subscribe
sensor slash ultrasonic once you
subscribe the broker will publish the
information to you so sensor slash
ultrasonic publish sensor Schlatter data
publisher so you can able to read this
data sent by the smart card so basically
this publish and subscribe it's it's
happening through tcp/ip okay so that's
how this MQTT works in a real world
scenario so the smart car and the broker
so meaning the client and the server
will always try to remain or try to keep
its connection open as long as possible
okay the sparked car will always send a
frequent ping request to the broker in
order to ensure that the connection is
always open to ensure that quality
of service so that's how this MQTT works
and now why MQTT why I need to use mqtt
so let's take an example like you own a
farmland and you want to monitor your
farmland by deploying some sensors
around the farmland okay so and there is
no proper network connection there
because palm lines will be somewhere
around the corner and there won't be any
proper network connection there so you
can use MQTT protocol under such
scenario okay so MQTT is mainly used for
constraint devices with a limited
bandwidth or a limited battery so those
kind of devices so mqt always uses less
battery power to publish and subscribe
data okay and as you can see the
connection is always a secure using TLS
so meaning the publish and subscribe
subscribed data is always encrypted over
the web okay and mqt has a wide range of
applications and that's the reason
amputees widely adapter in a lot of IOT
application nowadays okay so I hope you
guys enjoyed this session and I hope you
guys understood what is the difference
between various IOT protocols like HTTP
MQTT and WebSocket and I hope you can
confidently choose your protocols based
on your needs and you can build your eye
out the applications okay so thanks guys
and thanks for watching
so your comments are welcome so every
day I'm trying to improve myself so
whatever your thoughts you can just put
it in YouTube comments and please
subscribe to the channel and I will be
making a lot of new videos and we'll be
talking about about open source cloud
and a lot of tracks are on the way so
let's make technology easy PC for
everyone and have a good
