so good afternoon everyone my name is
Gerry Ryder and it's my pleasure to host
this webinar today now on to our speaker
today for those that weren't with us
further previous webinar in this in this
series our speaker is Martin Schweitzer
who is a data technologist with Ann's in
our Melbourne office Martin has a
background in computer science and a
particular interest in visualization
data science and user interface design
he has a very professional background
which includes photography working on
large IT systems lecturing as well as
running workshops and training courses
martin is currently seconded to Ann's
from the Bureau of Meteorology
where he is largely responsible for the
climate record of Australia today Martin
is presenting the second in the series
of two webinars on data visualization
and today's focus will be on tools and
techniques so without any further ado
I'll hand over to you Martin thanks
Jerry and thanks Suzanna is behind the
controls I hope everybody can see my
screen so today we're going to look at
creating visualizations and pretty much
everything you see is going to be live
I'm using a tool called Jupiter notebook
you don't have to be familiar with this
tool to follow along also be using
Python for my examples but if you don't
know Python once again that shouldn't be
a problem because most of the tools and
techniques that have will be shown you
will be available in other languages
with example R and the languages like
that so I'll be going through a number
of libraries and generally the strengths
of each library where there can be used
how they can be used and as we
progressed progress will move from more
static to more web-based type
environments so chip the notebook runs
in a web browser and so what you see
here is my web browser and I'll just max
at winnards web browser and what it
allows us to do is to type in Python
code and then executed immediately and
this is great for anybody doing research
because a lot of the work is in
experimenting you try something you
adjust a few parameters and so on the
first two lines I've got is just to set
up our environment and it's often we get
error messages showing so this will just
hide them some of the lobbies we'll be
exploring today
the first one is matplotlib I will be
looking at pandas one called Seabourn a
- web-based called bouquet and pluckley
and the last one is one that's used for
mapping called base map and as I go into
each one we'll talk about them in detail
now if anybody missed the first talk
that's not a problem because I'll
explain things as I go along but a
number of these examples are showing how
we created the plots that you may have
seen in the first talk also one of the
things I said in the first talk was when
doing any sort of visualization it's
important to have some sort of story or
some sort of reason or something we're
trying to say with their visualizations
so the first visualization I'm going to
show is actually based on a problem that
I came across just while browsing the
web and I'll explain the problem
basically we have a room there are 50
people in the room and each person
starts with $100 each time the clock
ticks each person takes a random number
yeah pics are called between 1 and 50
and let's say their code says point 4 6
they'll give $1 to person 26 if they've
got someone in their hand if they've got
no money at that point in time they
don't give anything so the question was
after a few thousand takes less a
thousand how much money how will the
money be distributed will it be fairly
evenly distributed among the people will
some people have a lot of money and some
people a little and so on so I found
this quite interesting I wrote as small
simulation the first part of this code
is the simulation so all that is
simulating
what happens and I'm now using the lab
recalled Mack front lip matplotlib is as
much as you can say there's a standard
protein library in Python the standard
plotting library and in macro clip to
plot my results that are got requires
one line so to run this I just press I'm
going to press ctrl return and if
everything works as it hope it will we
get a plot so this one line of code gave
me a plot it realized that there were
50/50 elements and it taught and that
they values inside those elements were
between 0 and 350 however this plot
doesn't really give us a picture of
what's happened so what I'm going to do
is sort it so that the people with the
least money come up first and the people
with the most money come last and so as
I said this is an interactive
environment so all after it is press and
make that change
press shift enter again it runs it a
thousand times now get a very different
plot and yeah we can see that a lot of
people have beloved 50 dollars most of
them have below a hundred dollars and
they're very few people have between 250
and 350 dollars so one of the things you
will notice yet I'll just change this
once again and now what I'm going to do
is to save the plot as an SVG SVG is
scalable vector graphics and I'll run
the plot again it will save it and I can
now open it in a web page so just a
pager and what we see is we've got a
nice plot and the other thing about it
that's special about scalable vector
graphics is that it's scalable if I'm
make it bigger because it's a vector we
don't get any artifacts it just scales
it gets bigger it gets smaller we don't
lose any quality the next thing is we
can look at this and say well this sort
of looks exponential how well does
an exponential curve and so once again
matplotlib
allows us to do this we're not going to
rerun the simulation we'll just choose
the data from the last simulation and
when we run it what we see is we get a
nice little so what I've done is I said
added a LAN a polynomial of third degree
that fits those points and I've just
noticed that I haven't reset something
from the last time I ran it some quickly
don't restart this and have to rerun the
simulation unfortunately and when we do
this again okay which is what I expected
an orange line so initially what we see
is we've got this thin orange line which
nicely fits the points and by changing
the Patrick and said things like the
line width equals fine run it again and
we get a thick orange line which is much
easier to see but it's crossing over the
points so the next thing we can do is
just say alpha which is the transparency
so equals 0.5 which basically says make
it 50% transparent and now we get a nice
thick transparent line running through
those points so once again matplotlib
gives us the ability to customize this
line if we wanted X's instead of circles
we can change the plot of the points to
X's and run again and we get X's so one
of the characteristics that we often
look for when looking for a library is
this idea that simple things should be
simple complex things should be possible
in other words we don't want a very long
learning curve we'll have to do a lot of
work to get a simple graph but if we do
want something special we want to be
able to do it we don't want it tool
that's really simple to use but as soon
as we want something a little bit out of
the ordinary sunny of the tool stops
working so we'll look at a few more
examples of metrically this one actually
comes from the documentation and easiest
thing is to show it if
lots of Cola broth it's using different
colors and we've just in this case
generated some random numbers and make
them the size of the circle and
generated a random number for where
around the circle we've got at it and
then depending on the end of we plotting
the numbers in a different color
once again the code that's doing the
plotting of those two lines once we've
generated the data all we need our two
lines of code and it gives us a really
nice polar plot and yes another example
once again also from the documentation
what we're doing with this one is we're
going to display it interactively in
cipta notebook but we're also going to
say that this time we're going to save
it as a PDF so let's run this and there
we get four histograms it's the same
data each time but what it's
demonstrating dress is different ways in
which we can create histograms so we can
have stacked we can have unfilled we can
have bars with legends etc and if we
have a look at the PDF that we've
generated they were going once again
because it's a PDF it's scalable and as
we scale we don't lose any quality it
just is all done with vectors and gives
us really nice output and and where
that's useful is if we're doing any kind
of publication it's really nice to be
able to save output either as SVG or PDF
and include that in a publication this
is one more showing the range of plots
we can do and this one is called a hex
pin plot so it's plotting with hexagons
and
what we're doing is it's kind of a cross
between a scatterplot which cuts X
values and Y values on a graph where
we've got like we may have the X values
maybe harmony
think somebody is eaten and the Y values
maybe something like the weight and we
want but those two against each other
but what this is also doing is plotting
it against how frequently those values
occur and we one of the nice things is
it's really easy to do log scales what
we see is a nice graph showing us that
that white area in the center of values
that occur very often and as we move our
values occurring less and less often the
following one is we've actually what
we're going to do is quickly look at a
comic some people may be familiar with
the web comic called xkcd the person
randall munroe
is a very funny person but with quite a
scientific bent and also quite strong
computer skills this one is called stove
ownership and it shows his health before
he realized he could cook bacon whenever
he wanted and afterwards the thing about
this graph is that it's hand drawn and
while sometimes we want graphs that look
very polished very professional there's
often a perception when people see a
graph like that that the figures are
very accurate and this isn't was the
case so what people did was to create a
style using McLaughlin that would
recreate the look and feel of the xkcd
and this is quite long because there's
quite a lot in fact they've taken two of
these comics and I'll quickly
prop that using metric Lib and what we
see is a computer-generated reproduction
of Randall Martinez
well if that's the one of his this is a
histogram in done in very much the same
style which cut is another one of his
comics so taking the style I will read
plot my simulation you'll remember the
results from my simulation so if we run
that again we see we get this thing and
which once again so now that it doesn't
look slick and professional we see
really this is very much a simulation at
these figures aren't accurate and so on
what this does do for us is it does give
us an idea of the flexibility of
matplotlib so quickly restart the kernel
before going into our next library and
the next library is called pandas pandas
is a very useful library for anybody
who's working with spreadsheets who's
working with CSV files who's working
with data that's coming from an API
across the web and it also has its own
plotting routines built in so in this
code year the first line which actually
goes over three lines
I'm reading a file which is danced or
reach levels it's a CSV file anybody who
watched the last presentation would be
familiar that I showed some examples
you'll see the same examples again today
so the first line reads the file the
second line plots it using pandas
plotting and the third line just adds a
legend to all sets at the label of the
farm
percent fool so we'll run this code and
then we could get these our Melbourne
gems and this is showing that the
Thompson is about 68 percent full and
things like turaga are 95% full so what
we've done is in one line we've read
that CSV file we've called it what we
want to call it columns one of the
columns is called name and one of the
columns is called P full for percentage
full and when we thought it
because pandas knows about this thing
called the earth or we have to say I
want to plot the name against the
percentage fool and I want to bar chart
and the voice has said I want to plot
from the value sixty to a hundred so if
I leave out those values but the same
graph it will plot from zero to a
hundred body faults or just this one and
part of the thing was to show that even
though we've got the same figures in the
same graph it looks different when we
start our scale from zero so once again
the Thompson is about 68 percent full
and turaga is almost hundred percent
full the the point the take home point
here is that to create that plot took
two lands of code and the third thing
that we showed last time was what's
really interesting there is the gap in
volume of these different dams and that
gives us a much better picture of what's
happening so when we run that what we
see is because the Thompson dam is a
really big dam it's got over 200,000
gigalitres of water deficit so even
those even though these dams on the
right are almost full altogether they
don't even make up that deficit in the
dam
so that's matplotlib and its strength is
that it can pretty much come standard
with Python it's flexible and so on
however its simplicity often comes at
the cost that it's not the best
publication ready graphing tool you can
get very nice publication ready graphs
by doing a bit of work but what some
people have done is to do that work to
make it easier for people to create
better graphs so one of those libraries
is called Seaborn and Seaborn basically
sits on top of matplotlib and simply
adds some nice tiles so will reap lot
that same plot this time using Seaborn
and all that all that we do
is importing it and just saying and
initializing it so we've just added
those two lines everything else is
exactly as the last example and we run
this and we see a totally well similar
graph but different styling and what
Seabourn has done is to make it quite
easy to change the styling so I'll say
set the style to white run it again and
we see we get a nice clean graph and for
example in the next example what we will
do is we'll set the status tile but we
want to white grid and a muted palette
and we will run that one and we get that
white grid with a muted palette okay
the next twenty is just one of the well
one thing that's he ponders which a few
packages are starting to do is that it
actually includes its own datasets when
you install the package which is really
great for when you're learning because
one of the worst things is you pick up a
package you can learn it but the first
thing you've got it is find some data to
pretend so on
one of the data sets that c1 comes with
is this one called flights and I really
enjoy heat maps so this is just an
example of really simple he using
Seaborn and some of its inbuilt data or
some of the data is provided and what we
see are VA is these going down the
bottom are years across the y-axis or
months and so roundabout 1960 July there
were lots of flights and the sort of in
the earlier years I guess there were
fewer flights also during winter there
fewer flights then in summer once again
done with Seaborn and done really with
two three two lines of text to lines of
code which are those lines another data
set that comes with Seaborn
is called tubes and it's basically how
much people would at restaurants so the
first thing we'll do is to load the data
set
have a look at the first ten rows of
this dataset so what we see is we've got
a few columns the first one is the
amount of the total bill how much tip
what tip was left the sex of the person
serving whether or not there were smoker
what day of the week it was whether it
was lunch or dinner and the size of the
party so we're going to use that data
set and have a look at a few Seabourn
graphs first one we're going to look at
is a box plot and what we've done is
we've said we want for you to be whether
they smoke or not so the purplish color
means there were smokers the greenish
color means there weren't on the left
hand side we've got the size of the
total bill and across the bottom is day
so it does seem that on Sundays maybe
people tip more and it would look like
on Sundays maybe for some reason
whatever smokers took more than
non-smokers another plot that is often
used in similar ways to the box plot but
carries a bit more information in codes
a bit more information is what's known
as a violent plant and these ones are
quite easy in Seabourn and in this case
what we've done is we've used a
different view for male and female and
so basically you read this pretty much
the same as the box but there's the
median there's one the top quarter of
the bottom quartile etc and some of the
information is very much the same on
Sundays people seem to tip the most and
we concede they've been splitting this
time into male and female those people
who have the last one will remember I
demonstrated something called and scums
quartet it's four data sets each with
the same means and linear regression
lines but each data set looks very
different here's a very simple example
of it being done in Seabourn we'll just
have a quick look at that and we see it
was quite
see in this case we sharing the y-axis
across the bottom we share in the x-axis
of the two plots and all of this was
done in a very very compact way using
Seaborn the next thing we're going to
look at is plotting data on maps and
this is goes back to a lot of what I do
in my substantive job at the bureau so
the library that we use for a lot of our
mapping is once again it's a standard
with Python it's called base map and the
first one we're not actually plotting
anything we just simply drawing a map
and so it takes a little bit the first
time we run it but we've plotted a map
of the world in a few lines of code it's
pretty much from there to there so the
story we also what we're really
interested in at this stage is Australia
and this projection isn't as useful as
what we're going to look at now which is
the sort of McKay turn so we'll just
change some of the parameters and this
should give us a map of Australia which
is great looks a bit like the ones I
draw by hand so what I'm going to
demonstrate now is some more
visualization but it goes back to a
problem I was given about a year or two
ago so we haven't about a hundred and
twelve reference stations around
Australia and these are stations with a
very high quality data that have a long
record about fifty years or longer and
these are very important in as reference
station is to see what's happening with
the climate of Australia and one of the
outcomes of this the reference station
set is called acorn and we do a
publication where we publish the names
of each station and one of the things we
also publish is for each session which
are the closest relations to that
station so I wrote some code that worked
out what the closest three stations were
to each station this was
Fowler was given if once again I'm using
pandas to read it and so we've got for
example all squeak we've got the
latitude longitude the altitude and the
date it was opened as we can see these
all have a very long record and so the
first thing I let's plot these are using
matplotlib the first part we've seen
that grows the map this line after
having read the file plots the date on
the maps that will just quickly prop
those stations so the black dots of
course are the stations and they're 112
of them around Australia so the question
I was asked is after saying ok as a list
for each station these are the closest 3
sessions to that particular station
being scientists that was asking for
some questions they said but going to
one of the closest three stations from
each station is it possible to get from
any station to any other station now it
may seem that the obvious answer is yes
but the thing is because if I'm sitting
yearn these may be my three closest
stations but that does not mean that
where I'm sitting which is around
without maketh or that it's going to be
one of the closest three stations to
this station because this stations three
closest neighbors or maybe these three
stations so the first thing I did
because fill official was to try and
visualize it and what I did was to go
back to a very old package which is but
that he is older I first used it
probably more than 20 years ago called
broth base and Python includes bindings
for graph is so we can think of this as
each station is a node and we've got
lines connecting it to the three closest
stations so what I've done is to do
something that will visualize that and
so we will just run this current and it
creates a PDF and what we see in this
PDF is that I've simply use the station
numbers to save space we can see the
layout of all the stations and move the
question we
one of the things that we see for
example is that stations 7:05 even
though it's got three stations that are
closest to it
there's no station for which 7 0 4 5 is
the closest station and we can see it in
a few other places as well I think over
yeah we've only got one line going from
85 and 969 1 2 9 3 if anybody wants to
guess this part is in fact these
stations that are in Tasmania and if we
go back to a graph that we can see how
these are all close together that
station is close to that one but these
are all closer to each other then the
main one so basically that graph helped
us visualize and yes it turns out after
writing some code that there is no
single path so the next question once
again these people being scientists is
where would we have to add stations so
that the closest selected there's always
a way that we can get to another station
by visiting one of the closest three so
I came up with a new visualization and
it's called a Voronoi plot and I'll run
this code and what a Voronoi cut does is
it's not easy to show you a chart in a
webpage that I did so on this map you
see the a concept stations and you see
all these polygons and what these
polygons are every point inside this
polygon for example is closer to this
station than to any other station that's
not inside the polygon so any point
inside this polygon this point for
example is closer to there than it is to
any of the surrounding stations
so basically active adds that Erik react
in two areas and we in a way saying ok
will the temperature there we could
argue smile
influenced by this station so if we've
got a temperature you and want to check
it for accuracy or whatever we're more
likely to look here than one of these
other stations but so what does this
have to do with where do we build a site
well if we consider this line the in any
point along this line is the point
that's the furthest point between this
station and the station and any point on
this line is the point that's the
furthest one between that station in
that station therefore if we were going
to so any point on one of these edges
yet is where these lines meet is that
point that's the furthest from all the
adjoining stations so this point is
furthest from that one that one and that
one and obviously further than any other
so what it comes down to is if we're
going to build a new station we want it
on one of these points on one of these
vertices so it's just another example of
how we can use visualizations to solve
some real problems so for the moment
that's all we're going to do with maps
and we may return to it soon the next
library we're going to quickly have a
look at is called bouquet and bouquets
the first library it works with patent
but its output is targeted generally at
webpages so once again you remember an
scums put it from a previous slide we'll
do it in bouquet and it's given us a
really nice graph of pens combs quartet
and if one sees some of the original
drawings of it for example in toughness
but this is very close to the original
so it was very easy to book it required
some work to make it look similar but we
could it was flexible enough that we
could I'll quickly show another one
which is another famous machine learning
data set which is our
and this one is plotting so what we're
plotting is the petal width of different
species against the petal length and we
see that some species are down yeah
some species the green ones are yeah and
some of you
the thing about bouquet is it allows us
some interactivity so we can do things
like zoom we can also pan and if we put
the output on a web page the web page
can have these same tools there's a
wheel zoom we can go back to what it
looked like initially so that's quite
okay and yes one that also came from
that last one called joy plots and the
thing about this is we plotting a whole
lot of variables against a common set of
axes well just for the moment skippable
plot lean because I want to look at a
few tools that are useful in web
development so we live in - for a moment
and the first one is one that I read a
few years ago so this is using Google
Maps and I'm putting some date on it and
these are the icon set stations once
again and when we click on one we get a
graph of the climatology the average
monthly temperature so we're now in
April so the average maximum temperature
for Melbourne is normally 21 degrees
this is their average rainfall for
Melbourne around 50mm we can also get
time series and we can zoom in on the
time series so this graph and the time
series were done using a tool called
high charts pie charts is available free
for non-commercial use but it does
require lessons for any kind of
commercial years and government this is
also considered commercial having said
that if you are doing webpages and you
are looking for protein package it's
worth considering heart charts and the
next example
is another mapping library
this one is leaflet in this case this is
something I did for work what we plot in
here is this data is coming from
netcdf and some people will be familiar
and I've used netcdf and the data is
coming straight out of these netcdf
files so we can the main purpose of this
slide there is to show this library
leaflet which basically allows us to put
date on top of maps in this case with
its gridded data but we can also put the
yeah we've got some geo jason we could
also be putting shape files and other
things there's things like utility
boundaries which you can overlay on the
map so it basically allows us to overlay
d8 on top of maps the third example I'll
show is one called
open layers and this was one of the more
complex visualizations I did basically
what this one is demonstrating is East
Coast lows of the eastern seaboard of
Australia and all of this was overlaid
on this map using the map was done with
open layers so I think that's all I'll
talk about and I think finally what
we'll do is look at one more library and
one more example so the library we're
going to look at is called Vega and once
again it's another simulation I came
across this thing called charondas
paradox and for me it was quite
mind-blowing so I just had to do that
visualization to make sure that I
understood it and that it work so
basically I'll try and explain it
quickly you've got three games you can
play and each of them involves a coin
being spun and in game one the coin is
more likely to land on tails and so
each time in Game one you bet on its in
other words it's a losing strategy
so that's game 1 in game 2 we
occasionally choose coin 1 oh sorry
we've got coin to which most often lands
on heads but we don't choose coin 2 all
the time it just sorry we don't choose
heads all the time
sometimes we choose heads sometimes we
choose tails and most of the times we
choose heads but two or three times we
choose tails and it can be shown once
again the better losing strategy in game
3 what we do is we randomly decide to
either play game 1 again - so if game
one we definitely lose again - we
definitely lose we would think that
choosing game 1 and game 2 we should
also lose if we just choose randomly
between whether to play again 1 or game
2 so in this one I've used the slab
recalled vaguer and I think the first
thing I'll do is just run so I play this
game 10,000 times I play game a and plot
the results I play again be 10,000 times
blood the result and then up I do p3
which is where I randomly choose between
game 1 and game 2 and plug the results
we run the simulation p1 is when I play
game 1 and we can see I started off with
$0 end up with minus $100 when I played
game 2 which was also a losing strategy
I did actually quite badly I ended up
with minus 250 dollars but when I
alternated randomly between the two
games I landed up in the black with plus
150 so this adds or this - notebook will
be included after the talk are you
welcome to have a look at this and find
the mathematical explanation why it
works or you can also just google around
those paradox so what have we found out
well I guess one of the questions is if
I want to do visualizations what's a
good tool so in brief matplotlib is a
good one to start with easy things are
easy
flexible things are possible it can do
dozens of different visualizations it's
very good for static plots in other
words if you're going to publish your
results in a book or whatever and it
also integrates well with pythons maths
and science toolkits it's and this if
you're familiar with math and it
understands things like vampires on time
and they're all tightly integrated
Seabourn makes it easier to do let's say
publication ready plots with meant plot
live
bouquet has very nice output it targets
webpages it's got a slightly easier
learning curve in my plot lib and it
looks good out of the box partly one of
the things is it's based on a commercial
package and there's both commercial and
non-commercial versions of it available
it leverages d3 for graphics d3 is a
fantastic JavaScript graphics library
that unfortunately the stroke didn't
give us time for and because of that the
interaction is more extensive than
bouquet and also the range of things one
thing I didn't talk about a PD Vega or
very girl is that it's got a investment
way of working in that it defines a
language for defining the graph and it
displays it but when you create a graph
with Vega that graph includes all the
data that was used to create the graph
so if you interested in making your
publications in your data available so
it's one thing to get see a graph in a
paper and say okay well how do i
reproduce this graph it's another thing
to say okay this is the graph and this
is all the data they've created this
graph so it's really worth considering
if it's important to you to publish the
data with the graphs basemap is based on
matplotlib it sits on top of matplotlib
it can be a bit clunky but it does the
job
Carter PI is still I don't think I
hundred percent product
I'm ready but it improves on basement
makes it easier to use and some great
features and then I'll quickly go
through leaflet its advantages were that
wait it's quick to learn and use and
supports many formats most particularly
WMS and geo Jason openlayers
is more feature well than leaflet it
used to be a steeper learning curve than
leaflet but modern what versions are
actually much easier or they've improved
the learning they've made the learning
curve less steep I didn't get a chance
to demonstrate caesium but it can
utilize built-in 3G capabilities of
browsers and it works just out of the
box you can install it and immediately
you've got a map up and running I
installed it recently just ripped right
out and about an hour later I decided to
download some earthquake data from the
United States geographical survey and
within about 15 minutes I was displaying
that data on my Mac so it makes it
really easy what are my recommendations
if you work with Python and you not
interested in learning a lot of
programming and getting deeply into it
but you do need to work with data and
you're doing research I recommend learn
pandas use pandas for protecting for
static parts and use Vega for the web
thanks very much well thank you so much
Martin for such an informative and
practical presentation and bravely with
so many live demos which we rarely see
so thank you for that now we do have
time for questions so if people have
questions or comments please put them
into the question pod now is your chance
with the Martin online to ask any
specific questions about packages or
just some of the things that you've seen
today so please and
to ask away we have got time for a few
questions
so Martin we do have a question from
Marlon what's your opinion on tools like
to blow or to blue ta baa you two people
have asked about that one
so tableau is what's known as a bi tool
or business intelligence tool it's used
in the bureau it's a commercial tool I
think I'm correct in saying that it's
only commercial there may be demo
versions available from everything I
understand it does what it's designed to
do extremely well and it so it's very
good at building dashboards I think it
often assumes the idea that there's
going to be a data warehouse available
or at least the data Mart I know
previous versions work was used there
were some issues with creating websites
that were being presented to the public
this was because it wasn't wicked
compliant you know that wicker gives the
web accessibility guidelines and for
government work websites need to be
week' compliant it had some mapping
features but the maps only a large
single layers which would have made
something like what I demonstrated with
the rainfall maps very tricky because we
we had sometimes up to five or six
different layers on those maps so I
guess I another one you sort of
recommend or there's many packages but I
think from everything I understand and
I'm not a regular tableau user but it
works well for its design purpose and
one of the areas where no people have
really enjoyed using it is where they've
wanted management app dashboards on
their desktop to be able to monitor
whatever it was that they were
monitoring it thanks Matt in an end
John has popped into the question pod
that there is a free public version
of tableau to blue I get my mouth around
it so if people are interested they
could go and check that out for
themselves
Collins Aston Martin why Python and not
Ruby and he also has asked if met web or
our make the grade
okay a reason - and not prove is because
I know Python and they don't know Ruby
particularly well when Ruby came out I
started learning it and then other
things got in the way I don't think
there's any good reason why not Ruby but
I can't talk with authority on harmony I
think one of the things is with data
science - and I really seem to have
taken a lot of that man chair between
continent are I wouldn't it's six of one
half a dozen of that there there are a
lot of people using are there lot of
domains where people really love our
bioinformatics and those one with very
common every and as I said in the
beginning most of these visualizations
in that are available enormous any
language that people look at or any
popular language when people come up
with a library lamp ugly though other
people will create bindings for
different languages thanks Matt another
question do you use other mapping tools
like arcmap that's another question from
Marlon well at the bureau
ESRI products are very popular I
personally don't use off map and
probably just because of the nature of
the work that I'm doing and probably
because of the current set of tool chain
that we've got I do use an open-source
product called huges occasionally but
even that I don't use often so most of
my work is done in the well of this time
is done it using things got JavaScript
and so I just used the JavaScript
libraries that over
okay and a question from Susan who's
interested in a online tutorial for
beginners in data visualization so apart
from recordings of your own webinars
Martin is there any anything that you
could recommend to Susan that might you
want to take on notice I think it is a
no definitely of a look but there's a
lot of MOOCs
so my go-to places are things like
Udacity or EDX and likely I've been
noticing particularly with sort of the
current flavor of the month being
datasets a lot of these places are
offering courses but yeah certainly
I'll have a look at maybe we'll put a in
one of our snippets or something okay
Thank You Martin and that's probably a
nice segue to to plug our updated web
page now we Martin's kindly spent some
time updating the content of our web
page on the ends website and I'm just
showing you the link here so a lot of
the tools and the libraries that
Martin's spoken about in the webinars
are available and described there so
please go and have a look at that and
also of course these webinar recordings
will be made available we have one last
question Martin from Sophie do you
recommend code Academy I have been used
code Academy I've got an account or no
because I keep getting emails from them
but I think it's pretty much there's a
lot of good stuff available so I think
that's pretty much try and find
something that suits you so that's a
great timing for the end of our webinar
today thank you all for coming along and
big thanks to Martin for two fantastic
webinars and presentations and making
all the materials available through the
presentations and through our updated
webpage we look forward to seeing you at
one of our future webinars and in the
meantime have a great afternoon
thank you very much
