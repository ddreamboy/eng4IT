now I know my audience y'all are
aspiring software developers or current
software developers so I know you've
come across a video titled A Day in the
Life of a software engineer YouTube is
absolutely plastered with them eating
typing eating meeting eating I don't
know why they eat so much but I've made
my fair share of day in life of a
software engineer even day in life
computer science student and plenty of
others have done the same as what I
tried to do and showed you the actual
day and some of the actual work of a
software engineer instead of just what
is being done just typing is a lot
different than the actual work that is
getting done as a software engineer but
regardless of what they showed you every
single one had something in common and
that is this they're all taking place
inside at a computer and that is the
first realization I want you to make as
a software engineer for most of your
life you're going to be inside sitting
at a computer now personally I don't see
that being most suitable for most humans
we I'd think we weren't made to be
sitting at a desk for 8 hours a day so
just out the gate if that's something
that doesn't sound too appetizing to you
then you may want to take a deeper look
into the potential career path that
you're currently looking at as a
software engineer and that's what we're
doing in this video looking at the Hard
truths of being a software engineer What
It Takes and not just the Highlight Reel
so let's get started
[Music]
most of the experiences you see are from
software Engineers on YouTube sharing
their day but that is a biased point of
view they're entertainers they want you
to watch the entire video think about it
it is a lot easier to sit down and watch
an hourlong movie that has been directed
and filmed and has a story throughout
rather than sitting down and watching an
hourong lecture can we agree on that and
people who want to share their
experience want you to be captivated by
their day they want you to watch the
video as long as they can get you to
watch the video because the whole idea
with a lot of these channels especially
on YouTube whether it be softare
engineer or not whole ideas for them or
for you to forget about the entire
outside world and focus on their video
watch their video in its entirety be
consumed by it be entertained by it and
well that is the main goal whether it is
helping you out or educating you that is
the goal I only bring this up because
it's a highlight re at best or
misinforming you at worst so don't look
at these videos and think that's exactly
how it is because you can't see into the
minds of these individuals they aren't
just typing aimlessly on a keyboard
they're deep in thought trying to figure
out the solution to the task at hand and
then doing research and implementing
that solution in code and in their
meetings they're not just shooting the
breeze with the co-workers they're being
told that the entire weeks worth of work
before is completely worthless because a
client decided to go another route and
they don't want that that feature
Implement anymore or you're being told
that your task was done incorrectly so
now you have to redo it and those
meetings are never fun but you know it's
not all bad sometimes you are just
shooting the breeze with your co-workers
and discussing what to do next and
plenty of the things that I mentioned in
this video may be SE seen as negative or
or whatever it may be or it may appear
that I'm trying to discourage some
individuals from becoming software
Engineers no I'm trying to show you the
reality of what it's like to be a
software engineer not just the good
thing so if I do focus on things that
are a little bit more negative don't see
that the majority of the job is negative
I'm just trying to counteract all of the
positive and all the good things the
Highlight Reel that people are putting
out there but neglecting to do so for
the bad thing because you need to
understand that in any job especially
this job there's a give a take good and
bad which brings us to the Everlasting
question especially staying on top topic
when it comes to software engineering
YouTubers like myself I'm not I'm not
I'm not calling anyone out in particular
I am a software engineer and computer
science YouTuber just like everyone else
and I made the same videos because the
Everlasting question really contradicts
how a lot of these people portray their
day as being always good always positive
always fun but most of these YouTubers
who display it like that end up quitting
their full-time software engineering job
to do YouTube full-time well if it is
all butterflies and rainbows on the
software engineering side of that then
why do they quit that job I know why
I've done it but for me it may be a
little bit different than most so I've
always wanted to work for myself if I
never discovered YouTube I'd probably be
freelancing so for me it wasn't always
about what I was doing as long as I
could do something that I enjoyed and
work for myself many of these
individuals probably shared the same
sentiment after all they did start a
YouTube channel for a reason that reason
could be because they thought it was fun
cuz they wanted to help people out or
because they saw it leading to their
Financial Freedom whatever it may be
they saw this as being part of their
future but also because if they truly
enjoyed coding this was a way for them
to make it living but also be able to
work on their own projects which brings
me to one of the biggest points of this
video which I feel like people never
talk about that is working as a
professional software engineer is
working for someone else's company
working on someone else's idea you may
love the idea you love working on that
app but you never have the final say on
what features are implemented or even
exactly how it looks or the overall
growth of the company and where that app
will be in 5 years for lack of a better
term you're very much a Code Monkey
being told what to do and how to do it
with very little creative freedom some
creative freedom but very little I
personally can't work that way but for
some people that may be their cup you
need that direction you need that
structure so this may be perfect for you
I know people who thrive on not
completing the overall idea or worrying
about the overall app but solving the
task at hand each individual task is
like a new challenge for them and that
is what gets them going in the morning
they know that they get to work on this
task that task and that task they don't
wor have to worry about the growth of
the company or the growth of the app or
the user interface they are a back-end
developer and all they have to worry
about are these tasks today and that's
basically it there really is a luxury in
that if you are wired that way but if
you are someone who got into development
because you wanted to create your own
apps you wanted to make your ideas a
reality then it gets a little bit dicey
there but to sum it all up many people
get into coding to make their ideas a
reality it starts off as a hobby but it
becomes a job once you make it your job
the old adage says do what you enjoy and
you never work a day in your life life
but making something your job that you
do enjoy will often times take the
enjoyment out of it so what is an actual
day in the life of a software engineer
well this will vary from company to
company team to team person to person
but the overall structure is typically
the same you have standup about every
day this is when you get together with
your team you talk about what you did
since the last standup any roadblocks
that you're facing and what you plan to
do next now when you accomplish
everything that you set out to do the
day before you're confidence is through
the roof you're a genius programmer and
you just want to tell everyone what you
did in that standup and you love it
however there's a flip side to this coin
if you spent the entire previous day
working on a 2hour task and still maybe
haven't even figured it out well then
you just
feel bad bad no bad doesn't really begin
to describe you begin to maybe get a
little bit anxious you're very stressed
out you feel incompetent because you're
the developer being paid to do a
particular job and complete this
particular task and it says it was
estimated to be completed in 2 hours and
you spent 6 hours doing it the day
before and you still haven't even
completed it it's like if you have to
present something in front of the entire
class that you know you didn't do and
the whole entire class knows you failed
but at work you're not only worried
about what your classmates think of you
or your teacher thinks of you or your
grade but the stability of your job your
livelihood I mean you tried but you just
couldn't successfully complete the task
it is an incredibly stressful feeling
that I hated every second of when that
would happen to me and honestly it could
just be because I felt like my team were
genius programmers I mean in their
defense they kind of were they had 20
years experience each under their belt
so yeah needless to say I was a little
bit intimidated by them even though they
were incredibly nice and helped me out
even with those traits I still felt that
way with that being said I could even
begin to think about having a boss or a
team that just like is mean or opposite
of that that would suck but you know
maybe you're a better programmer than me
maybe that stuff never happens to you so
you never have to feel that way I don't
know I can tell you my experiences and
mishaps all I want but at the end of the
day many things cannot be learned from
other people's mistakes often times you
have to make the mistake or in this
instance you have to experience that
situation in order to understand what it
actually feels like and maybe you thrive
in those situations maybe you hate those
situations but you'll never know until
you're in it it kind of reminds me of an
analogy it's like whenever you're at a
restaurant and a waiter hand you your
food and they say oh you know hot plate
so they put on your table but you got to
see just how hot that plate is so you
touch it sometimes you got to figure
things out for yourself
on the job the amount of coding that is
expected from you is typically around 6
hours this is how they base it on tasks
so if you have a 2hour task a three-hour
task and a 1 hour task you can complete
that in one day but you can't complete
another two-hour task on top of that for
the eight hours a day because you have
standup you have meetings you have
breaks all of that ties in to your 8
hour day so don't go in expecting that
you're going to be coding for 8 hours a
day typically what your team should
expect is around six now if you've seen
my video how long I Cod a day you will
see that I'm typically burn out around 4
hours so an extra two is a lot to handle
but it also depends on the work at hand
I've spent 8 10 hours almost straight
you know I have to eat and go to the
bathroom and stuff but basically almost
straight coding and when I say coding
that is basically by the definition that
I laid out in that video how long I code
a day and that is including everything
from research to actually typing out
your code but that's when I'm working on
something simple or fairly
straightforward something that's already
been laid out but when you have to
figure out how to code something that
has never been done in your language and
your stack in your context well then it
makes things quite a bit more difficult
more brain power is needed to figure out
the logic you have to figure out how to
use it in your language with your stack
in your context and the more brain power
you use the more energy you use and the
quicker you get burnt out I don't mean
burnt out in how you've been hearing it
a lot lately but just on that day more
brain power is needed to figure out the
logic and to implement it in your
language using your stack and in your
exact context and the more brain power
you use the more drained you get and
you're just tired I've said this before
how individuals who work hard labor will
never understand the mental drain that
it takes to do our job because it's not
physically difficult and the best way I
can describe the difference between
those 8 to 10 hour coding days and the
4H hour coding days it's like digging a
little hole with a little shovel for 8
hours a day compared to digging a giant
hole with a real shovel you're still
digging coating but one is much more
taxing and I found a fine balance of
being able to figure out when I've when
I'm at my wits in for that day if I'm
working on something a little bit more
difficult then maybe I'm in there three
to 4 hours don't need to worry about
anything else at hand that needs to be
done I'll sa that for another day but if
I to relax and I want to do a little bit
easier work and nothing too too mentally
draining then I can do that too and I
can work as long as I want on my own
projects but when you're at work you're
expected to do six hours a day give or
take whatever your company wants you to
do if you have to do more then the Lord
help you it's like all coding work is
treated equally when it's not equal some
tasks are a lot easier than others but
if you have a lot of difficult tasks to
do one day it's hard to hit 6 hours of
coding on difficult tasks that is one of
the downfalls when it comes to working
in a professional environment and that's
the entire premise of what I wanted to
discuss here in today's video not to to
bring anyone away from being a software
engineer but rather show you some of the
realities that others do not on the
outside you see typing you see this
wonderful app that they created but you
never see what goes on in the meetings
you never see what goes on in their
heads when they're actually doing this
work and the difficulty of it and the
nuances and differences of working as a
professional developer than just as a
hobby developer I hope you learned
something from today's video but more so
I hope you give it a little bit more
thought into the potential career that
you're looking at based on the reality
of it and not how it's portrayed it's a
fun job at times but it feels like it
can be the worst job too let me know if
you've had a similar experience in the
field or if you've had a different
experience in the field completely
opposite of how I feel because at the
end of the day this is just one man's
opinion one man's View and experiences
that I'm sharing and that's mine I can't
really speak from anybody else's point
of view so I'd love to hear he some of
y'all current software developers on
y'all's experience what you agree with
what you disagree with down in the
comment section below like subscribe hit
the bell and enjoy yourself some Icy
Puck coffee from commenter and I'll see
you on the next one
[Music]
