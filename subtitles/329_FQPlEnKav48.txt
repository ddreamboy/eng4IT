this is a web app this is a web app this
thing here also a web app dude why am I
doing this again I built the same app 10
times with 10 different Frameworks using
10 different programming languages it
was a horrible experience but I learned
a lot and I figured out which Full stack
framework is the greatest of all time
which will be revealed in dramatic
fashion at the end of this video to
maximize the watch time on this journey
you will meet 10 different serers side
Frameworks like rails Django laravel
spring.net nextjs Phoenix rocket Jin
vapor and Kor I realize that's 11 but
you don't need to be good at math to be
a programmer this video was insanely
difficult because each one of these
Frameworks uses a different programming
language for each one of them we will
look at the overall developer experience
including things like setup routing
database integration and the overall
architecture now before we get started
here's a warning the framework you
choose by the end of this video is going
to dictate your life for the next 10
years as you grow your startup into a
Deca unicorn if your startup fails it's
100% because you didn't choose the right
framework reminds me of one my dad made
me choose which of my pet calves to
slaughter with my own hands for for my
sixth birthday now before we look at the
code let's first answer the question of
what does a web framework actually do
there are three main things you should
know first they provide an abstraction
over your relational database they
typically have a built-in object
relational mapper that can migrate code
from your preferred programming language
into SQL code that can be used by the
database second they provide routing
that can map a URL in the browser to
code that you want to run on the server
and third they provide a way to
dynamically insert data from your
database directly into HTML for the UI
together these three elements make up
the model view controller architecture
or MVC which is by far the most common
approach when building a full stack web
app the first framework we'll look at is
Ruby on Rails made famous for building
some of the biggest companies in the
world like Shopify Airbnb and GitHub
rails was revolutionary when it came out
because it dramatically simplified web
development compared to other approaches
of the day it's still very popular in
2022 and is kind of a rebel in the web
development space it has adjacent
libraries like hot wire stimulus and
turbo that take an HTML Centric approach
to building web apps which goes against
the approach you might see in front in
Frameworks like react angular and view
to get started with rails you'll first
need to have Ruby installed then install
the rails Gem and run rails new I'm
developing this app on a fresh install
of Debian Linux and I did run into some
issues with the initial setup these were
errors that could easily be solved with
a Google search but the initial setup
was a little more error prone than other
Frameworks once you get the project set
up though the rail CLI is extremely
powerful not only does it do things like
serve the application with rail server
but but it can also generate a ton of
code for you automatically with commands
like scaffold now if we look in the file
explorer you'll notice a bunch of
different folders here and that's
because rails is a batteries included
framework it handles your relational
database testing logging and a bunch of
other stuff it might look pretty
overwhelming at first your main
application code is contained in the app
directory where you'll find folders for
models views and controllers the first
thing we'll look at is routing in the
routes.rb file from this file we can map
URLs to actions in a controller
resources create all the routes we would
need need for a basic cred feature
automatically it's kind of magical but
what it's actually doing is setting up a
mapping between URLs in the browser and
controller actions now when the user
visits a URL it will trigger one of
these actions on the server that action
might go and retrieve some data from
your database the logic for that data is
contained in the model but before we can
use the data in the database we need to
run a migration which will take the code
in the model and sync it up with the
actual database and all the data is
managed with an object relational mapper
called active record and then finally
you have a view which is an html.erb
file Erb stands for embedded Ruby and it
allows you to render your data
dynamically inside an HTML file overall
this provides a very nice separation of
concerns and rails is very opinionated
which means you can achieve a lot of
functionality with very little code the
scaffold not only retrieves items from
the database but it also provides UI to
create and update that data as well but
too much magic can also be a bad thing
depending on who you ask and Ruby is not
the most popular language in the world
but python is what if there's way we
could build web apps like this with
python and that's where D Jango comes in
it's also extremely popular and has been
used to build massive sites like Spotify
and bit bucket when you generate a new
Jango app you'll notice the file
structure is far less overwhelming than
rails but at the same time it's still
very much a batteries included framework
in addition your code tends to be a lot
more explicit for example we have this
manage py file that contains the code
for the actual command line interface to
generate things in the project we could
use it to serve the app locally or
generate an app to represent a feature
of the website it also follows the MBC
architecture with routes being defined
in the urls.py file and controllers are
represented as python functions in the
views.py file a route points to one of
these functions which itself might want
to access data from one of our models a
model is a python class that represents
the structure of data in an SQL database
aka the object relational mapper and
finally we have our HTML templates that
allow you to embed python directly into
the code that's pretty cool but one
extra superpower of D Jango is that it
has an admin feature built into it
directly as you define models in your
application you can register them with
the admin app to easily manage all of
your data in the browser this is really
useful and not something that you'd want
to roll out on your own Python's great
and all but the original serers side
language of the web was PHP there have
been countless PHP Frameworks over the
years and high Lev tools like WordPress
but the most popular one today is LEL
the PHP framework for web Artisans to
use it you'll first want to install PHP
and a tool called compos Er When I
generated my initial app it took a long
time and downloaded a lot of packages
and as you can see the initial project
has a lot of batteries included even
more so than rails if we look at routes
you can see it not only handles web
routes but also API routes and channels
for real-time communication with
websockets now if we go into the app
code you'll notice it's already been
configured with things like user
authentication via providers a provider
is like a shared service that you can
use anywhere in the application in the
HTTP directory we will find our
controllers and just like r s we have a
class that contains a bunch of different
methods that can access data and render
a specific template now our database
models use a tool called eloquent omm
which is based on the same active record
pattern as rails now when it comes to
views PHP is a language that's designed
to work with HTML out of the box LL
makes it even easier by building on top
of PHP with blade templates another cool
point about the ecosystem is that they
put a lot of thought into how to
integrate front-end Frameworks like
react and view it has an adjacent tool
called inertia that can bridge the gap
between front-end and backend Frameworks
the next framework we'll look at is
nextjs which allows us to build a full
stack application entirely with
JavaScript now in the JavaScript world
there's a million different options we
could have chosen here like njs angular
Universal spel kit nestjs Adonis and
many others maybe I'll make a top 10
video Just For Those to get started with
next we run npx create next app and that
will generate a starter project now the
one thing you'll notice about next right
off the bat is that it doesn't provide
any integration for your database there
are a million different solutions to
choose from but one of my personal
favorites is Prisma so I'm going to add
Prisma to this project the fact that
nextjs doesn't have a database out of
the box is a good thing in my opinion
the JavaScript ecosystem is just way too
crazy it's nice to start with a very
good minimal framework and then add
whatever database integration you want
on top of it now that we have a database
integrated let's take a look at the
Page's directory one thing that's
different about next is that routing is
handled with the file system each file
defined in the Pages directory defines a
different URL in the browser Dynamic
routes can be created by wrapping the
file name in bracket now each one of
these files exports a react component to
define the UI or view this is actually
really convenient because many other
Frameworks will ultimately want to have
some kind of front-end framework having
react fundamentally integrated into the
framework can streamline your
productivity big time now things get
more complex when you think about data
fetching normally in a react app you're
thinking about client side code but in
nextjs you can also run server side code
with functions like get serers side
props this function will run on the
server with no JS and as you can see
inside of it we're using Prisma to fetch
some items from the database these items
can then be delivered as props to the
react component where they're rendered
in the UI both your server side and
client side code is tightly coupled
together which may feel like a bad
separation of concerns but generally
speaking it actually works very well
overall nextjs feels very minimal
compared to other Frameworks in this
list but it does a ton of stuff behind
the scenes to simplify the annoying
parts of web development now speaking of
simple we're going to do the polar
opposite and see what Java has to offer
even though Java is a boiler play driven
language for writing instant Legacy code
the spring framework actually makes it
very enjoyable to work with the first
thing you'll notice when building with
it is that it's kind of like a create
your own adventure story it has a
generator that allows you to start with
a framework and you can even use cotlin
or groovy if you'd like then you choose
all the different dependencies that you
want to add to this project now even
though Java does have a lot of boiler
plate the code pretty much writes itself
and in my opinion it feels a lot more
robust compared to the dynamic languages
that we've looked at so far you'll find
the source code way down in this deeply
nested folder and it also follows the
MBC pattern the controller is is a class
and a route is defined using a decorator
on each one of its methods spring relies
on a lot of metaprogramming to keep your
code nice and simple it feels very much
like angular in the JavaScript world the
database models are based on code with
the Java persistence API then we can use
that data in templates using time Leaf
where you add these attributes to your
HTML to Define where your data should go
to be honest though I didn't have a very
good time using time leaf and that
brings me to Java's arch nemesis C and
The NET Framework or asp.net it's an
open source project maintained by
Microsoft and obviously feels very
Microsoft but is extremely popular and
reliable it's evolved very nicely over
the years and has modern supporting
libraries like Blazer that allow you to
build client side apps using web
assembly and C to use it install the net
SDK then generate a new MVC application
I really like the initial project
structure everything is clearly named
and it's not too overwhelming and you
get all the awesome tooling and static
typing like you do in Java when it comes
to routing the URLs are inferred from
the class names in your controllers here
we have an animal controller which gives
us the animals URL then we have methods
in that class that then represent the
next URL segment the method can take an
argument to create a dynamic URL to
represent our data we have a model that
is managed by an omm called The Entity
core framework and then finally we have
our views which are written in CSH HTML
at the top of one of these files you'll
notice a model where we can access our
data and we can also declare additional
data here in C like a title it's more
verbose than other templating languages
but you get full intellisense inside of
it which is really helpful over overall
net is really impressive the only real
drawback is that you have to sell your
soul to the big giant Tech Corporation
if you want to take the righteous path
another awesome framework to check out
is Phoenix which is based on the Elixir
programming language it's a functional
language that feels much different than
most of the objectoriented languages
that we've looked at throughout the
video Don't Worry a 100 second video is
coming soon install it then generate a
new project like Ruby on Rails it has a
very powerful CLI that can automatically
scaffold an entire cred application for
you routing is also very similar to
rails where we have sources that map all
the necessary cred URLs to the
controller in the controller we have
functions namespaced under a module that
access data and render the appropriate
template the model uses an object
relational mapper called Ecto and
templates use embedded Elixir which
again feels very similar to rails
however Phenix has a huge advantage in
performance because Elixir is a compiled
language as an added bonus every app has
a built-in live dashboard to closely
monitor performance and that brings us
to another high performance framework
worth checking out Jin which is powered
by the go language it easily wins the
best logo award to get started we're not
going to use a fancy CLI but instead
create a go project from scratch Jin is
a minimal HTTP framework and is not
concerned with the model view controller
architecture we'll have to figure that
out on our own it also doesn't contain
an omm for the database so for that
we'll bring in another package called
gorm the nice thing about this approach
is that we don't really need to follow
the MVC conventions of a framework which
is probably overkill for many
applications instead we can write some
very focused functions and do things in
a way that makes sense for our our exact
business needs like in this app we just
have two routes that need to retrieve
some data from a database which itself
is modeled with a struct using the or
then go has its own built-in templating
language so we can simply create a
couple of template files here in the
project and interpolate the values that
we retrieve from the database the end
result is a much smaller code base with
a lot more low-level control however as
this application grows bigger it's going
to get harder and harder so you really
kind of have to know what you're doing
and that brings us to our next language
rust and the web framework rocket as far
as I know the rust ecosystem doesn't
have a full-blown MVC framework like
rails and to be honest I found it very
difficult to build a basic application
my Approach was to use rocket for HTTP
and routing then combine it with diesel
which is a rust based omm and then
finally a templating language to use the
data in HTML called ascoma I think this
is a reasonable approach but I didn't
quite get to a full workking demo with
rust it's a systems language that gives
you low-level control over memory which
the average web application developer
doesn't really need I quickly realized
that it would take more time and
dedication than I'm willing to give for
the tail end of a silly YouTube video
however there is one rust based library
that I want to bring to your attention
called you it's a component based
framework for building web apps with web
assembly and it's coming to a fireship
tutorial near you soon and that brings
us to the final framework in this list
Vapor which is based on the Swift
programming language this is the only
app that I built on my Mac because I
found that anything with swift just
works better on a Mac it provides you
with a project structure that looks like
this it's well organized with
controllers models and routes routes
point to methods in the controller which
can access data from a model it it uses
an orm called fluent which uses classes
along with decorators to model your data
Swift is a very well-designed language
and I found it very enjoyable to work
with for stuff like this the code is
concise and readable yet statically
typed with awesome tooling like you
would get in Java or C I also like how
it Embraces async of weight when
fetching data from your models for
templating it has an engine called Leaf
which also felt very modern and
practical now that we look at Vapor I
want to also mention Kor which is a
cotlin based web application framework
it's a lot more minimal than something
like spring but also something worth
checking out and with that we've looked
at 10 full stack Frameworks now I'm
ready to show you the best full stack
framework in the world you're looking at
your own reflection in the mirror yes it
was you all along without you the
framework would be nothing actually no
no that's that's just dumb Ruby on Rails
is by far the best framework nothing
else even comes close it's like the
magic Jordan of web Frameworks thanks
for watching and I will see you in the
next one
