hi I'm Joe today I'm going to cover
python lists tles sets and dictionaries
now the list is the most widely used
data structure in Python it's very
general purpose similar to an array in
Java and it covers most of what you
would need but Tuple sets and
dictionaries have some advantages in
specific areas and are very very useful
data structures so the list is a
sequence type it's sortable the tupple
is mutable which means you can't change
add or remove items in a tupple once
it's been created so it's useful for
fixed data andle is also a sequence type
which we'll explain in a second the set
you can store non duplicate items so
it's good for storing unique items in a
set and it's also very good for doing
mathematical comparisons to sets Union
intersect those kinds of set operations
dictionaries contain key value pairs
it's like an associative array similar
to a Java hashmap and both sets and
dictionaries are unordered which means
they're not sortable and they're in
random order and one amazing thing about
these data structures in Python is that
they can hold any data type so they
could hold integers floating Point
values strings or other object types and
even other lists tupples sets and
dictionaries and the data types don't
have to be homogeneous so you can mix
and match data types within a single
list or within a set or within a
dictionary now sequences include list
this tles and also strings there are a
bunch of different functions that are
applicable to all three of these data
types and we're going to go into them in
detail so indexing you can access any
item in the sequence instantly using its
index if you have a million items in
your list and you want to access an item
instantly you can do that if you know as
index so a string is a sequence of
letters let's say we want to access one
of the items in the word frog we can say
print X of 3 using the square bracket
for the three and that gives us the
third index starting from index zero for
f the G is going to be index 3 and in
our list if we say we want item with
index one that's going to give us cow
the second item in the list slicing
allows us to slice out sub strings and
sub lists and subtles using indexes and
the syntax is using square brackets
start End plus one and step and these
are all optional I'll cover some
examples that explain that and these are
applicable to string tles and lists but
in this example I'm just going to use
the word computer which is a string so
let's say we have X from 1 to 4 using a
colon and this will return to us items 1
to 3 which is om if we want uh to slice
items 1 to six this actually cuts off at
five and it'll give us every other item
since we have a step of two here so
items 1 3 and 5 opt and x with uh items
three to basically uh no end right we
didn't put an item after the colon so
that's going to give us three onward so
p e r if we don't put anything before
the colon then it starts at zero so this
will give us items 1 through 4 or rather
0 through 4 and if we want to use
negative numbers here we can use - 1
which will give us the last item in a
list or a sequence so X of -3 colon
nothing is going to give us the last
three items in a sequence and then if we
have X colon -2 will give us everything
except the last two items in the in the
sequence adding and concatenating we can
do using the plus symbol so we can
combine two sequences of the same type
only so if we have two strings that we
want to combine we can use a plus sign
to add them together and if we have two
lists we want to merge together we can
use the plus sign and will give us one
list with three items in it multiplying
we can use the Star Sign to multiply
sequences again of the same type so if
we have a bug it will multiply the word
bug three times and give us bug bug bug
or if we have a list with an eight and
five in it we want to multiply that by
three it will give us 85 three times in
our list checking membership test
whether or not an item is in or not in a
sequence using keywords in and not in so
it's very simple to use so if we have x
equals bug and we want to print u n x we
print true If U is actually in X and
it'll print false if it's not so in our
list Pig Cow Horse print cow not in X we
print true if cow is not an X however
cow is in X so it prints false so that's
checking membership using the in and not
in keywords iterating we can iterate
through the items in a sequence using
for Loop so if we have list of integers
in X we can say four item or any any
variable name in X print or whatever we
want to do to that variable name it
returns to us one list item at a time
each Loop iteration and if we need both
the index and the item we can use the
enumerate function so we say for index
and item we basically need two variable
names here the first one is going to be
index second is going to be the value or
the item uh in enumerate X and then we
can do inside this for Loop we can do
whatever we want with those two
variables here I just have a print
statement that prints the index followed
by the value number of items we'll count
the number of items in a sequence and we
do that using the Len function which is
short for length and we can do the same
thing in a list prints the length of a
list three items in this list minimum
finds the minimum number lexical
graphically which means Alpha
numerically but this only works when all
of the items in the list are either
alpha or numeric you can mix and match
integers and floating Point values but
you cannot have both strings and
integers so if x equals bug we want to
find the minimum the minimum is B we
have a list of three strings we're going
to find the lowest one which is C Cal So
prce Cal maximum is going to find the
maximum item in a sequence again lexical
graphically and they have to be all the
same type either numeric or string type
so if we take the maximum of bug we get
U and if we take the maximum of pig cow
and horse we're going to get Pig because
that comes last
alphabetically sum we can find the sum
of the items in a sequence if they're
numeric type so 5 S and bug is going to
give us an error because bug is is not a
numeric type but if we take the sum of 2
5 8 and 12 it's going to print 27 or if
we want to do a slice we can say hey I
just want the sum of the last two items
of X and this here we'll print 20 we can
sort the items of the list this sorted
function actually returns a new list
without changing the original List It
returns a new list in sorted order so
bug will return to letters of bug in a
list in sorted order bgu and our list
Pig Cow Horse if we call sorted of X
it's going to return Cow Horse Pig and
mind you the original X is still
unchanged count of item Returns the
count of a specific item in the sequence
so here we're looking for the count x.
count of P will tell us there are two PS
in
hippo and x. count of cow will tell us
how many times the word cow appears in
our list X if we want to find the index
of an item the index function actually
Returns the index of the first
occurrence of an item so if the item is
in the list or sequence multiple times
it Returns the index of the first
occurrence so here the H is zero the I
is 1 the P the first p is 2 so x. index
of p is going to return two and here we
find the first cow which has an index of
one unpacking if we want to assign all
the items in a sequence to a set of
variables we can say a comma B comma c =
x and then all of the strings in X will
be assigned in order to the variables
here on the left so Pig assigned to a
cow assigned to B and horse assigned to
C but this only works if the number of
variables exactly matches the length of
your list so here we have three items we
must have three
variables so that covers General
functions for sequence types then let's
talk about specific list functions so
there are a few different ways to create
lists we can say x equals list
parentheses uh we can say x equals in
square brackets whatever list I it we
want to add to populate the list and
again we can mix and match uh data types
so we have here some strings integers
floating points and we can say x equals
list and in parentheses a Tule and we'll
get a list from the items in the Tuple
there's a really cool function called
list comprehension so we can create a
new list using what is returned by the
for Loop for m in range 8 so m in range
8 Returns the values 0 through 7 and
here we're saying we just take those
values M so the resulting list is 0
through 7 here we have a for Loop that
says Z in range 10 if Z is greater than
four so in other words items 4 through 9
but we said hey look instead of adding
the item itself Z to our list we want to
add z^ squ so it's going to take 5
through n and it's going to square each
one of them and add it to the list so we
get 25 36 49 64 81 so list
comprehensions you can have fairly
complex function inside of the square
brackets to create and populate a new
list with whatever values you want
delete we can delete an item from a list
or we can delete a complete list the
item we would delete using the index or
we can delete the entire list a pin we
can append an item to the end of a list
using the do appin
function extend we can combine two lists
this is very similar to the plus
function that we already showed x.
extend Y is going to combine both X and
Y together into list X insert allows us
to insert an item into a certain index
position so here we want to insert a
seven into position one it will scoot
the rest of the items to the right and
put the seven into the list and here
we're going to insert a su list or an
embedded list with letters A and M into
position one which is going to scoot all
the rest of the items to the right and
pop our sub list right in here the pop
function pops the last item off the list
and returns it so if we want to let's
say print an item as we pop it off the
list we can say print x.p and it will
print the last item on the list and the
new list will have one less item in it
remove is going to uh remove a specific
instance of an item so if we want to
remove a three from this list we can put
x. remove three and it'll remove the
first three that it finds not every
three just the first three so you can
see here the first three is gone and
reverse reverses the current order of
the list so the number that is first
will become the last the number that
last is going to become first and so on
sort will actually do an inplace sort so
the new list you get back our list X
here is going to become a sorted list so
unlike the sorted function sort is an
inplace sort so it actually changes the
order of the items in list
X now let's talk about tuples so tles
support all the operations for sequences
but tles are immutable so member objects
inside a tle may be mutable for example
you may have a list inside of a tuple
could be one of the items in your tupple
that list is still mutable you can still
change and add and delete item from the
list but you cannot delete the list
itself from your tupple so it's a little
confusing I'm going to show some
examples in a second if the contents of
a list shouldn't be changed then you can
use a tupple that's what tupples are
used for it's useful when you have a
const set of values that are not going
to be changed that you want to use
throughout your program and tles are
more efficient than list due to how
python implements them so how do you
construct a tupple well a new tupple
with no no values in it is going to just
be created using the parentheses and we
can say x = 1A 2 comma 3 if we want to
create a tupp hole with values 1 2 and 3
in it and you don't even need the
parentheses actually the parentheses are
optional if you want to create a single
item tupple you still have to put a
comma after that item otherwise it would
just sign x equals integer value two and
X would be an integer not a tle so the
comma tells it hey this is a tupple but
it's a single item tupple and we can
create a tupple from all the members of
a list just using the tupple function so
tuples are immutable as I said if we try
to delete an item from a tupple or
change the value of an item in a tupple
we're going to get an error but if we
have let's say a list inside of a tupple
here we have a
called X and our first item is a list
with one and two in it and our second
item is an integer three so we can't
change that three that's immutable
however we can change the list here
we're going to delete the first item in
the list which is two the item in index
one so our new tupple has a list with
just the one in it and integer three so
we can change the list the list itself
is mutable but the tupple is not we
still have to keep the list in in this
position let's talk about sets now so
there are some Constructors how do we
create a new set we use the curly braces
if we want to populate a set with values
and we can create a new empty set using
set with parenthesis and we can create a
set from a list by calling the set
function in parentheses the name of the
list when we do this though it strips
out all the duplicates from our list and
returns only unique values to the set
and then we also have similar to the
list comprehension a set comprehension
so we can use a for Loop uh if
statements and whatever functions we
want to do on those X values X is
probably a bad choice of variables here
since we're using X for the uh set name
but uh but we can use the list
comprehension to put values into our set
and sets are unordered so as as we
populate set the items are going to be
in random order so some basic set
operations we can add an item to set X
by using x. add item remove an item from
set X using x. remove item get length of
set X using the Len function we can
check membership in X by simply saying
item in X or item not in X that's going
to return a Boolean true or false we can
pop a random item from set X using the
pop function we don't know which item is
going to be popped it's arbitrary
selected and we can delete item items
from set X by saying x. CLE will
completely empty our set some of the
standard mathematical functions for sets
are very useful uh we can find the
intersection of two sets using the
Ampersand function and we can find the
union of two sets using the vertical bar
symmetric difference or exclusive ore in
other words items that are in set one
but not in set two or in set two and not
in set one using the uh up air
the difference which means items that
are in set one but not in set two we
just take set one minus set two and
subset and superet basically returns a
Boolean value does set two contain set
one or does set one contain set two for
super set
question so those are some of the set
operations now let's take a look at
dictionaries so a dictionary again is a
key value pair and you can see three
different ways here to create a
dictionary you can use curly braces with
the key first in this case I chose to
use strings for a key and floating Point
values for my value and they're
separated by a colon so this is the most
standard way to create a dictionary you
can also call the dictionary function to
create a dictionary by placing comma
separated tupples inside of a set and
you can also um say key equals value
comma separated and call on that so
there's three different ways to create a
dictionary I find the first one is more
widely used and more standard U but they
all three work so some basic dictionary
operations you can add or change an item
in dictionary X by saying X key is equal
to Value if this key is already existing
in the dictionary then it will change
the value to this if the key doesn't
exist in dictionary it will add this key
value pair to the
dictionary remove item from dictionary X
delete uh X and then the key get the
length of dictionary using the L
function check membership in X item in X
or item not in X this only looks in the
keys it does not compare to values so if
we want to look through values I'll show
show you a way on the next slide to do
that delete all items from dictionary X
we can say x. CLE and delete the entire
dictionary X delete x d x so how do we
access the keys and values in a
dictionary we can say x. Keys it will
return a list of the keys in X x.v
values returns a list of values in x and
x. items returns a list of key value
tupple pairs in X so if we want to check
membership in values of X we can say
item in x. values and this will text
test the membership in X and return a
Boolean iterating a dictionary we can
use for Loops for variable in X print
variable right so we say key we use the
the word key for our variable we can
print our key and then if we want access
to the value as well we say x and then
key in uh square brackets and we can get
both the key and the value this way by
iterating however if we want to do a lot
of operations or use use the value quite
frequently inside of our for Loop we
could use items instead so we can get
two separate variables for the key and
the value by saying 4 K comma V in x.
item items is going to return both a key
and a value and assign them to variables
K and v in this case so when we print K
and V we print out each key and each
value for the entire dictionary that
wraps up my video on python lists tles
sets and dictionaries I hope you enjoyed
the video please click the like button
at the bottom I'm Joe James thanks for
watching
[Music]
