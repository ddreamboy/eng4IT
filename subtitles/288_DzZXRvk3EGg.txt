custom events in javascript are amazing
at implementing things like double
clicking or swipe based gestures but
they can also be used to communicate
between two different parts of your
application incredibly easily and best
of all creating and using a custom event
is about as easy as it gets in
javascript i'm going to show you
absolutely everything you need to know
about them in this quick video
[Music]
welcome back to web dev simplified my
name is kyle and my job is to simplify
the web for you so you can start
building your dream project sooner and
today we're going to be talking all
about custom elements and to get started
i just have a simple script tag being
linked in this html and this html has
one button on the right you can see the
button and the console for this page
then inside of our script.js we have
nothing now in order to create and use
custom events it's as simple as calling
a new event and this is just a
constructor and inside of it you can
pass it a name and then some options
first we're going to look at just
passing it a name and then we're going
to look at the options next so you can
give it any name you want we're just
going to call this my custom event
and we can set that to a variable such
as my event just like that so now we
have created an event and if i save
you'll notice nothing happens because
all we've done is created an event we
haven't actually triggered the event and
we aren't listening for this event at
all so let's listen for this event on
let's say our document we'll say
document.add event listener and we're
going to add an event listener for my
custom event and whatever you call your
event is the same thing that you want to
listen to inside of your ad event
listener then we can take in that event
object and for now all i'm going to do
is console log that event object out now
if we save again you'll notice nothing
happens and that's because we've created
an event we've created a way to listen
for that event but we haven't actually
triggered that event yet in order to
actually trigger the event all we need
to do is take any element we want for
our case we're going to use document and
you're going to call a message called
dispatch event you just pass it in the
event you want to dispatch what this is
going to do is it's going to take our
custom event it's going to dispatch that
and if we're listening to it which we
are it is going to run that code now
when i save you can see down here it
prints out information about my event
and you can see there's actually a lot
of default information that you get
probably the most important information
that you're going to see inside of here
is you're going to get a bunch of
information for the options that we can
set so bubbles cancelable composed those
are options we can change within our
event you're also going to see here if
the default has been prevented have we
tried to cancel the event and then most
importantly down here you're going to
get the target that's the actual thing
that the event is being triggered on and
then finally we have is trusted at the
very top here if this is set to false it
means it's created via this dispatch
event and if it's set to true then that
means this event was triggered by a user
clicking so like if you listen to a
click event which i can do here i can
say click and if i click up here and we
look inside of here you can see is
trusted is true because that's related
to a ui event that the user actually
triggered let's just bring it back here
to my custom event and we'll look down
at the very bottom you'll also see
timestamp which is when the event
occurred and the type which is just the
name we specified for our event this is
really great if you just want to have
like really basic custom events where
you can send information and you can
receive it with this ad event listener
what if you want to customize it a
little bit we can come into here and we
can add some properties into this
customization the first one is going to
be bubbles and this determines whether
or not the event is going to bubble up
by default it is set to false but we can
change it to true if we want if you're
unfamiliar with bubbling and event
propagation i have a full video covering
i'll link in the cards and description
for you and also put at the end of this
video because it's a really important
follow-up so next property that we want
to talk about is cancelable so if this
is set to true it means you can actually
cancel the event so like a click event
for example you can cancel so that it no
longer triggers things like link tags
moving onwards so if you really want to
cancel it you can but for the most part
you don't really have to worry too much
about this cancelable property because
you're not really doing a default thing
with your events but by default this is
set to false so you can change it to
true if you want now the final property
i want to talk about is composed and
this one's a little bit tricky composed
essentially means that this event is
able to propagate up through your shadow
dom so if you're using like custom
elements and you have some shadow dom
and you want to have an event trigger
inside that shadow dom and then
propagate up outside of the shadow dom
you would need to set compose to true by
default it's set to false this is
something you generally don't have to
worry about unless you're working with
custom elements and the shadow jam and
then in that case most likely you want
it to propagate up or in some cases you
maybe only want it to stay within that
custom element so you'd set this to
false which is the default honestly it
doesn't matter either way but for the
most part you're not going to really
mess too much with these properties you
may mess with the bubbles one but the
other two you're not going to use that
often let's take a look at what happens
if you do have a cancelable event so
we're going to say cancelable true
inside of here and then what i'm going
to do is i'm going to add another event
listener on our button
oops button right here and all i want to
do is i want to say default
prevented i just want to check to see
what the value for this property is
we're going to do it inside of our
document
event listener and we're going to do it
inside of our button event listener and
this is a cancelable event so by default
if we just save this real quick and i
click on our button and i need to make
sure i get a reference to our button
so we can just say document dot gray
selector
our button there we go so now if i just
change this to dispatch this on the
actual button itself you should see that
we get it saying console log button and
we want to make this bubble so we're
going to say
bubbles
true that way it bubbles up to our
document as well so now you can see it's
going inside of our button and it's
going inside of our document it's
rendering on both of these so we have
our event listener going on both and on
both of them prevent defaulted or
default prevented is set to false if we
come in here and we just say e dot
prevent default
like you would do if you have like a
link or a form submitting and we do that
in our button you're going to notice now
this is set to true if we do it after
that log you can see it's false when it
gets into the button and then when it
goes to the document this is set to true
because we prevented the default in our
button well if we change cancelable to
false now you can see no matter what we
do if we try to prevent the default
it'll still say false because this is an
event that cannot be cancelled
you can use this to like really
fine-tune your events to say hey you
know what if we click inside the button
or if the button dispatches the event
you know we can cancel it in the button
and then that way the document doesn't
listen to it so that's an important
thing to consider but for the most part
you really don't have to worry about it
too much
now this covers most of your use cases
when it comes to events but what happens
if you want to pass custom data along
with your event well to do that you need
to change your constructor here you want
to call new custom event instead a new
event and nothing else changes the name
stays the same all the properties inside
of here change the same we just add one
additional property which is called
detail and detail can be anything you
want generally it's going to be an
object with all the information you care
about so for example we can just say
like hello
and we can pass in some text such as
world
just like that so now if i save and we
dispatch our event and i look at the e
dot detail
and get rid of all the rest of this code
that we don't need you can see that
detail is an object which has the key
hello and the value world so this is
really great if you need to pass data
from one place to another using an event
you're going to use a custom event
otherwise if you don't care about
passing custom data you can just use a
normal event for the most part though
you're probably going to be using a
custom event now that covers like most
of the use cases of events but how
exactly would you go about implementing
and using these custom events in a real
world example in our case i'm going to
implement double click so when we click
on our button twice within quick
succession it's going to trigger a
double click event so we're going to
have an event we're going to call it
double-click and one important thing to
consider when you're naming your events
is what happens if in the future the
browser implements their own
double-click event well we don't want to
have a clash with them so generally when
i create custom events i have some kind
of prefix that i put at the front so for
example i just put the text custom with
a colon or if you're in a project just
put the name of your project right here
followed by a colon and this will kind
of help you know when you're reading
your code okay this is a custom event
it's not an actual javascript event and
if in the future javascript implements
their own doubleclick event you don't
accidentally clash with that and have
issues due to that you just have this
custom event that's completely separate
from anything that javascript implements
so now we have this let's just print
inside of here
double click because any time we double
click on our button we want to run this
function so how would we go about doing
that well we can add another event
listener to listen for clicks
we can just come in here and say click
it's going to take in an event and what
i want to do is i want to say hey you
know what if this max double click
time this is going to be the maximum
time between our clicks we're going to
say 500 milliseconds so if we click the
button twice within 500 milliseconds
then it's going to be considered a
double click and inside of here all i
want to do is i want to get the time
between clicks so we can say const time
between
clicks and to get that we can take our
timestamp which is the current time of
our event we could subtract the time
since our last click and we're going to
save that in a variable
and by default we're going to set it to
0.
then we can say hey if our time between
clicks is greater than our max
doubleclick time well what we want to do
is do nothing because this means it's
taken too long essentially the time
between our clicks is longer than a
normal double click so what i want to do
is i want to take my last click time i
want to set it to my time stamp and then
return so this is just saying hey you
know what if it's been too long reset
our last click time to the current click
that way the next time we click we can
do this check again otherwise if we have
not exceeded that time we've clicked
twice within 500 milliseconds then what
i want to do is i want to create a new
event
we're going to call this a double click
event which is going to be a new custom
event
and this new custom event we called
double click
with that prefix of custom
and inside of here i want this to work
just like a normal click event so a
normal click event will double so we're
going to say bubbles true it is
cancelable so we're going to say cancel
true
oops
true just like that
and also it is composed so we're going
to set that to true and then finally
we're going to put some custom detail in
here we're going to get the time between
clicks and we're going to pass that up
into this button here and then all we
need to do is we just need to dispatch
that event so we're going to say
double click event then we're going to
reset our last click time to zero and
one important thing to do is instead of
using button here we can just say
e.target and that's just going to make
sure it dispatches the event on whatever
we're currently clicking on so if we're
clicking on the button it's going to
dispatch the event to the button that's
a really neat trick right there so now
let's save and if i click this twice
back to back you can see it prints out
double click but if i click it once wait
a while and then click again you can see
it doesn't print out anything new we can
also get the time between clicks by just
getting the detail object here and
getting the time between clicks so now
when i click it twice you can see
there's 113 milliseconds between my
clicks if i do it again there's 141
milliseconds if i take too long you can
see it no longer prints out
now one of the places these events shine
the most is with touch-based gestures so
if you want to understand how to do
touch-based events in javascript i'm
gonna have a video linked over here as
well as that video covering event
propagation that's linked over here as
well with that said thank you very much
for watching and have a good day
