hi there my front and friends I always
enjoy when people complain that there's
too many ways to do something in CSS but
they seem perfectly happy when we can do
the same thing multiple ways in
JavaScript but of course whenever we end
up with multiple ways to do the same
thing it's usually because one is better
in a specific situation over one of our
other options one example of this in
JavaScript is that there's a bunch of
different ways to create functions and
today I brought Christopher Dandy with
me to help break them down because as
well as I know CSS he knows his way
around JavaScript thank you for joining
me today Chris and yeah why are there so
many ways to make different functions in
JavaScript Kevin thanks so much for
having me I don't know why there's so
many ways I know why there's at least
two different ways I do not know for the
life of me why there's three um so let's
talk about it so um I'm going to start
with the OG ways to declare functions
and then we'll get into like the new way
I use new and quotes because it's been
around for a while now it's still kind
of irks me but I'm also an old man who
yells at the clouds so um like the
original old school way to declare
functions function declarations is to
use the function operator or keyword
followed by the function
name uh and then you've got your
parentheses with any sort of variables
or um parameters that are being declared
on the function and your curly brackets
and then inside those curly brackets is
where the stuff happens so in this case
I'm taking two numbers I'm adding them
together and I'm returning the result
and I could do something like add three
and four and it's going to to return
seven um there's also a function
expression where you have a function
usually Anonymous but I have sometimes
seen people do things where they like
they create a named function and then
also assign it to a variable I don't
know why you would do this but I do
sometimes see it done and so here I've
got an anonymous function that then gets
assigned to the ad variable and so I can
do the exact same thing here I've got my
two numbers uh they get added together
and return turned and I could do
something like add three and four and
I'm going to get back seven the question
around these is always why would you
favor one versus the other for the most
part they work exactly the same except
with one weirdish little kind of gotcha
Ed Edge case around something called
hoisting so um
when the browser runs so actually let me
let me start with this so here I've got
an ad function and a ract function uh
and I'm declaring them with function
declarations or I'm assign I'm creating
them as a function declaration I can run
the ad function after after I've
declared it or I can run the subtract
function before I've declared it when
the browser loads a Javascript file it's
not like HTML where it just kind of
instantly starts doing all the things or
even CSS where it starts painting all
the things because JavaScript is a
scripting language the browser actually
reads through the whole thing first to
understand all the different pieces and
then it goes through it again and runs
it top to bottom um when it does that
first read through it does this thing
called hoisting it doesn't actually move
anything around in the file but it
already knows there's a function called
add and this is what it does so uh and
in this case there's a function called
subtract and I know what it does so
that's the reason why this works even
though I haven't said what subtract does
here the browser runs it just fine
because it's done a read through it
already knows okay there's a function
called subtract and it does a thing um
and I know what that thing is so I can I
can just do it but when you use function
Expressions it actually works a little
bit differently so because I have a
variable that is being assigned an
anonymous function the browser doesn't
Hoist the function that's assigned to
the variable um or that true for any
variable so I could have a bunch of
variables that were just other things
right so let name equal Chris for
example when the browser does its first
pass it knows there's a variable called
name it does not have a value for that
yet it hasn't executed the code so it
hasn't assigned any sort of value to
that variable yet and so as a result
when we try to declare a function with a
function expression and then run it
before we've expressed it we get an
uncaught reference error um cannot
access subtract before initialization so
in this case what's happening is the
browser knows there's a variable called
subtract it has no idea that it's a
function could be a string could be
something it just knows the variable
exists so then when it goes to actually
run the code it hits this and it's like
I don't know what to do here yet um
whereas if I do it this way it works as
you would expect um and so you're not
often in a situation where you're trying
to run code before you've declared it
but I do sometimes see people who like
to organize their code where they have
all of the stuff that runs up at the top
and then all of the kind of the
Declarations of those things down below
it so if you like to structure your code
that way you have to use a function
declaration you cannot use a function
expression or you're going to run into
errors I personally tend to favor
function declarations but aside from the
hoisting thing it is entirely a matter
of personal preference that's that
before I move on uh this is actually
relevant to when we start to talk about
Arrow functions but any questions there
Kevin you know hoisting seems well I
know there's a bit more to it than than
just that but it you know I think at its
Bas level that's a pretty easy way to
understand what's going on there um yeah
and yeah it makes sense and I think
we've all seen that that error that
you've you've shown in there um the one
question I'd actually would have is it's
a little bit off topic maybe but you
were just talking about the different
ways to organize the code
where some people like to have you said
everything going on and then the the
functions declared lower down do you
have a preference one way or the other
for that I do yeah so I um if you look
at my code uh I almost always have them
set up where I've got my variables up at
the top and then in the middle I've got
my like methods and functions so
anything that sets up what's supposed to
run and then down at the end I've got my
initializations and event listeners um
and so if my codee is really big I'll
sometimes even set it up like this right
but so I might have something like uh
you know let name equal Chris and then I
have um you know my functions so say
hello and this is going to do something
stupid like um it's going to console log
hello hello name and then down at the
very end I'm actually going to run that
code so this is a really common common
structure in my code bases usually
they're not big enough that I need these
headings here but I have on occasion if
I've got like really large code bases
it's nice to have these these physical
breaks so you can see how things work um
but this is often how my code code works
or if I'm like getting elements right if
I'm going to set up a an event listener
of some some kind um I'll have my you
know my thing up here where I'm getting
let's say I'm getting my form and then
down here I'm um I'm adding an event
listener uh it would help if I could
type um you know I'm listening for the
submit event and I'm GNA have some sort
of like Handler for that that'll get
declared up up over here so you'll see
this a lot in in my code I want to
stress this is a personal preference
there are so many different ways to do
this and none of them are inherently
right or wrong it's just you know what
what feels most natural and readable to
you um and if you're working on a team
I'd say stick with Team conventions but
if you're doing solo projects just pick
the thing that's easiest for you to
reason about and maintain in the long
run so that brings us to Arrow functions
Arrow functions came about as a way to
address some of the idiosyncrasies of
traditional functions and also give them
a potentially terser syntax depending on
your use case we'll talk about some of
that but first let's just talk about the
general way of writing them so um if I
have a traditional function here so I've
got my my original ad function as a
function expression the arrow function
version you drop the function keyword
and drop a fat Arrow between the
parentheses and the curly brackets or
curly braces otherwise you can keep it
exactly the same so the difference
between a function expression and an
arrow function is is just I remove the
word function I add this this little
arrow thing here um there's more to it
than that but that's you know kind of at
a high level um the thing about Arrow
functions if you want them to be named
you cannot write them as a function
declaration there's no way to do like uh
like this that that doesn't exist uh so
it has to it has to be a function
expression so again be mindful of
hoisting in that case it's a reason why
we talked about that but there is also a
way to write this in a more Abridged
syntax if you have an arrow function
that is only returning things you can um
you can drop the curly brackets all
together and it'll still work so in this
case this is going to give me the same
exact result as this did and this is
where a lot of folks start to really
like Arrow functions because can keep
them really compactly on just one line
the one big advantage of Arrow functions
is um they do not override the this
keyword in JavaScript and so this is
where developers start to really love
them this is confusing as as heck um
it's it's it's a keyword whose
definition or the the thing that's
assigned to it changes depending on
where it's invoked but it's used heavily
in JavaScript classes and forgive me
Kevin because I know I'm probably
getting way too into the weeds but this
is the best way I could think of to kind
of explain this concept here yeah no
it's I've got this JavaScript class that
I can use to create a new instance of a
thing and then run some methods on it so
in this case I've get this calculator I
pass in some sort of Base number and
then I can run the add method on it so
here I'm going to add five to 42 and the
new value of count will be 47 I promise
I'm I'm terrible at
math so the way this works in the class
I've got this thing called The
Constructor this sets up the instance um
and I'm assigning a a total to the
instance to this with whatever my start
value was in this case it's zero by
default or if you pass something in it's
that number um and then I've got this
add method here where I am accepting any
number of numbers and then as an array
and I'm going to Loop through them or it
turns them into an array I should say uh
and then I'm going to Loop through each
one and add them to my total um the
problem here is inside this function
this no longer refers to the same thing
as here so if we were to jump over to
the browser and take a look at this I've
got this error here cannot read property
of undefined when trying to read total
um we can actually we can see this in
action so if I if I console log this um
we get just this undefined thing this
doesn't even exist inside this function
whereas if I were to log it here inside
add uh it refers to my calculator
instance with the total of
42 um so one of the ways the developers
historically would try to get around
this is they would assign this to some
other variable and then use that inside
the function instead I'm using instance
here but used to see let that equal this
all the time back in like the jQuery era
um just all over code let that equal
this it was so confusing I never had any
idea what was going on but if I jump
over to the browser you can see now it
works now we get 47 uh you the the
expected number Arrow
functions prevent you from having to do
let that equal this or let instance
equal this um so so in an arrow
function this does not get adjusted at
all so whatever it was in the the parent
scope it is inside the arrow function so
now instead of having to to let instance
equals this and instance total I can
just say this total plus equals number
and it will add it so if we jump over
the browser and reload I still get
47 uh and this is where in my opinion
the real value of Arrow functions starts
to come in when you start doing things
like working with classes and prototypes
and you need to preserve this for some
reason that's where they really win um
one other thing you can see I'm doing
here because there is only one argument
I don't even have to have the
parenthesis here I can just drop them
entirely and so you'll um actually even
now that I think about it these curly
brackets are optional as well so I could
do something like um like this and uh
this here actually let's let's reload it
I'm still getting 47s so this is for
developers who like tur code and I not
one of them I like verbose code because
I I think it's easier to read um but if
you're someone who really like super
short code and code golf um Arrow
functions are also a boon in that regard
because they allow you to keep things
much smaller um here this this
multi-line thing becomes just a single
line of code that's the different ways
to write functions if we want to get
into which one should you use and when
again personal preference so I know a
lot of newer developers tend to use
Arrow functions for literally everything
uh I think it's what they teach in a lot
of like school programs and boot camps
and stuff now um I'm old so I tend to
use function declarations for everything
except when there's some beneficial
reason to use Arrow functions so I'll
use Arrow functions inside like classes
and web components but um other than
that it's function declarations for me
and if you'd like to continue learning
some JavaScript from Chris I've put a
link down in the description that goes
over to his site he's together a special
page for people who have watched this
video that has the source code from
everything that we've looked at today
and also a whole bunch of Articles and
other things that you might find helpful
thank you very much for watching and of
course until next time don't forget to
make your corner of the internet just a
little bit more awesome
