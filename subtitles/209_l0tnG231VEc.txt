hello this is matthew from simply learn
and in this video we're going to take
you through the 10 most popular tools
that you'll need to have in your devops
setup what we're going to do is we're
going to break up the tools into eight
different categories now we're going to
go through the planning and code based
tools the building tools the testing
tools the all-important integration tool
deployment operation and then finally
monitoring tools something we should
also add is that all of these tools are
open source this means that you can get
up and running with your devops
environment immediately without having
to worry about licensing costs so let's
jump into the very first tool which is
get so get is a distributed version
control tool that allows development
teams to be able to share code amongst
each other in a way that allows the
creation of small to extremely large
applications to be created effortlessly
if we look at the architecture of git
and the way that it works that there are
four key areas we have the working
directory the staging area local
repository and then remote repository so
your working directory is where you
actually create all the files that
you'll be working on in your application
and the staging is the area that you get
ready to commit those files to your
local repository for version control and
once you actually have then put them
into your local repository then you want
to be able to push those files using a
push command out to a remote repository
such as github or git lab in addition if
you have a distributed team you can then
also then pull down the latest files so
as a team you can always be working on
all the files all the time and then go
through the whole process again by
working on your local files you can do
this whole process really quickly and
easily get is actually a free tool you
can download and run through command
line off your computer finally you want
to be able to merge files that you may
be working on say for instance a
different branch which is a new feature
you want to be able to merge those files
back into the master directory the
master branch that's running on git
itself so some of the things to point
out with get what makes it really useful
is that it's absolutely brilliant at
being able to track changes in your
source code this is something that
source code tools are really kind of
should be able to do but get is
exceptionally good at this having large
teams working at different phases within
the project and working on different
branches within the project is really
easy to do and the collaboration tools
will then get to make it so that your
teams can work effortlessly with each
other inherently you are creating
backups of all your code which is
fantastic and probably most important
part is that the environment itself is a
non-linear environment this means that
you don't have to work through specific
gates to be able to reach feature to
actually get a feature ready for
delivery you can actually work in a
non-linear fashion so who's using git
well as you can imagine all of the big
technology companies are using git
including netflix lyft and intel plus
many many other companies so let's get
on to our next tool which is maven and
the focus on maven is to automate the
build process of code that's being
checked into a repository such as a git
repository so we have a look at the
architecture here maven itself actually
executes what are called palm files and
those palm files actually then look for
specific dependencies that will then go
against a repository to be able to build
out the project you can actually extend
the prompt files with plugins and you
can actually then create a specific
build profile for your environments
which is actually fantastic because you
can really fine-tune the profile and
again all of this is scripted and this
is something that is common with all the
tools that you'll be using in a true
devops environment is that you can
script all of them which means that you
can automate the processes that are in
your devops environment and really
accelerate the ability to be able to
build consistent high quality software
final step for a maven environment is to
actually build all the software into a
in our build server so a couple of
things that are important to notice with
mavin one of things that you'll see
that's key with all of the tools that we
have here really easy to use marvin
itself it's got a pretty simple setup
it's highly available which means that
your teams can rely on the solution
being ready for your environment and you
can actually get to it and use it very
easily and consistently you can have
multiple builds happening at the same
time which is really important
particularly if you have branched
software you want to be able to test the
branches and the other thing as well is
that it's open source so you have
instant access to new features without
any additional configuration so it
really helps your teams to get the new
code and implement new features within
the environment itself so you're always
working on the latest and greatest as
you can imagine devops shops such as
zillow and zens and jp morgan and chase
are already using maven and you'll see
that many devops shops are also using
maven for their build software testing
with selenium is very important and
being able to automate that environment
is critical so you can actually
guarantee that your code will work and
selenium itself is designed for testing
and automating web applications it's
really good in that environment and we
look at the architecture the way that it
works is that you actually have a client
library that goes against the code
you're writing with a c sharp python
java javascript and then there are
specific drivers that go against the web
browsers to actually test out the code
that you have created so that you can
actually see whether it works in the
appropriate web browsers and all of the
popular web browsers are supported with
selenium selenium is an open source
solution it does allow you to write
scripts in multiple different languages
which is a real big bonus you can as
well run parallel test execution so this
balances very well with mavin and as
with other tools that we have it's
really easy to use and selenium is being
used by google hubspot and salesforce as
well as many other companies so let's
talk about the really important part
which is integrating all of this and
jenkins really is the de facto tool in
this space so the role of jenkins is to
be able to manage and allow for that
continuous integration that you need to
make devops successful so allowing the
dev the development team to integrate
effectively with the ops the operations
team and do that through testing and
management of the code that has been
created so we look at the architecture
here we have our remote source code
repository is going to be waiting for a
jenkins pull to be able to create a
commit and then that jenkins surfmaster
will then push out and distribute the
work to multiple slaves so that you
actually have the actual code being
pushed around your environment so
jenkins is really easy to use it's very
mature it's been around for many years
there are a significant number of
plug-ins that allow for the jenkins
environment to be scaled very
effectively and it is portable across
multiple platforms in fact most of the
leading operating systems will support
jenkins and as you can imagine jenkins
is being used by companies such as
linkedin and microsoft ebay dell and
cloudera so let's talk about the other
side of devops and talk about some of
the operations tool and we'll start off
with docker so the role of docker is to
make it easy for people to be able to
simulate full environments quickly and
easily on their desktop for building and
testing but at the same time make that
real easy to be able to port those
environments across multiple um areas so
let's let me talk a little bit about how
that would work so with the docker
engine
you have a docker client locally that
allows you to emulate the whole docker
environment without having to have the
overhead that you would typically have
if you're doing virtualization or
dedicated servers running specific
dedicated operating systems because you
are scripting the entire environment
docker is a very scalable and repeatable
environment for being able to take
across the entire cloud network so some
of the features are really important for
docker it's incredibly portable across
multiple platforms uh the docker team
have done fantastic job on portability
it does run in isolation so what this
means is that you can actually have
multiple docker environments running on
a server concurrently and they will not
interrupt each other they actually fully
isolated sandbox environments so the
other part to dockers because it is
stripped out needless operating system
and and host environment apis and
services the actual startup and boot
time for a docker is really very fast
which in turn makes this very scalable
and efficient to run and you can
actually reuse volumes very easily so
who's using docker just about everybody
spotify uber paypal bbc really docker is
used by a lot of people just a side note
probably something that would complement
docker very well is kubernetes and
kubernetes is becoming a very popular
alternative to docker and so you know
really get to know both of those tools
so let's talk about uh some of the
operation and management tools that you
have for your environment and the three
big ones here are chef and spawn puppet
and we'll start with ansible and ansible
is a configuration software package and
unlike the other two products here um
unlike chef and puppet ansible doesn't
actually require a client to run on the
host server where you're pushing out a
configuration you can actually have a
defined operation configuration so
that's a web server configuration or
database configuration or an iot cloud
configuration you can actually have that
running um effectively from a script
that is written on a client machine and
then on your local machine and then you
can push that script that you've created
out to your remote and servers and have
everything work um as you'd expect
quickly on your remote servers you know
just some of the key features of ansible
is incredibly lightweight one of the
things that's really important with
ansible is that it's actually very easy
easy to use there is unlike the other
two tools we'll be covering unlike um
puppet and chef ansible actually has a
full gui that you can use to actually
interact and build out solutions so
there is a a visual interface that you
can actually go in so you're not just
working completely in command line
companies that are using ansible include
twitter ea sports cisco and nasa as well
as verizon so complementing ansible but
probably a little bit more popular right
now are chef and puppet and we'll cover
chef first now both chef and puppet are
somewhat similar in configuration and
both of them rely on having a client
server relationship with their
architecture the way that chef works is
that chef actually creates recipes and
each recipe is a
server configuration
setup and what you actually do is you
create individual recipes and then for
your entire network you create what's
called a cookbook and that cookbook
actually can be used to control the
setup of your entire network and this
works really well for being able to
create consistent and highly scalable
environments things that are great with
chef is that it's actually a very
flexible configuration and you can
actually do an awful lot with it has
really good security features which are
very appealing to particularly if you
have a devsec ops environment where the
security team are integrated with your
devops environment and that's something
that's becoming more and more popular
chef itself is actually pretty easy to
use it is a command line tool but it is
actually fairly easy to use and the
actual scripting of the recipes is
something that you can do even if you
don't have much scripting experience
it's something there are so many recipes
out and available you can actually use
many of the templates i've already been
written and just either copy them or
modify them to your environment as you'd
expect a lot of the companies are using
chef are the big technology companies
such as facebook and ibm microsoft in
particular has really invested heavily
and shared fact you'll find that chef is
probably the most popular management
tool used within the azure environment
so a complimentary product to chef is
puppets and if we look at puppets as you
can imagine again another open source
configuration tool the structure as you
can see is actually very similar in
concept to uh chef in which you have a
local server that actually has all the
configuration environments the templates
and the files and the manifests and it
will actually then communicate with all
of your entire environments such as and
then with puppet they refer to them as
nodes and within your node you have
multiple servers but it's similar in
concept to chef in many ways in that
it's just another way of being able to
control your environment both are really
great tools in fact really all three of
them ansible chef and puppet are great
tools what you have to do as a devops
team is really just decide which tool is
the one that's appropriate for your
environment so some things are great
with puppet it's a multi-platform
compatible it's very scalable and it
allows you to push out changes to your
environment really really fast and who
are using puppets you've got red hat hp
google leading devops teams are using
puppets today so let's get into the two
tools that we have that actually monitor
our operations environment splunk and
negus so splunk is as expected as a
monitoring tool and its goal is to
actually monitoring the operations of
all the environments that you have make
sure that they're working correctly and
it does this by going through and
reviewing your entire environment and
writing the operational information to
disk and then searching that environment
to make sure everything works correctly
it does a lot of analysis in real time
it is a very easy to uh set up and use
tool for testing for analysis and to
then be able to then troubleshoot any
failures that may come up the thing
that's great about splunk is that you
can actually put it in a distributed
environment so that's no single point of
failure which makes it itself inherently
very very scalable so cisco facebook
domino's pizza dubai airports are all
customers that are using splunk today in
their devops environments so finally
let's jump into our final monitoring
tour which is uh negios and very similar
to splunk is uh nego so probably the big
difference is it has client server setup
but
really again it's all about being able
to monitor and check the status of your
entire environment and your network and
your servers in real time and give you
the appropriate visualizations whether
it's on your laptop or whether it's an
alert that's sent out to your phone and
you know so you're aware in real time
how your network is performing and can
then check and adjust to uh actually
making changes and the bottom line in
this kind of architecture with splunk
and lagos is that it allows you as the
operations lead to be able to be ahead
of any perceived impact so say for
instance you are putting in specific
check marks for your environment you can
actually have alerts being sent out to
your team when certain thresholds are
met and so that means that you are aware
of problems with your environment before
your customer is there's nothing worse
than somebody emailing and saying hey
your website doesn't work or like a page
is down or it's slow or something like
this with uh nagios and splunk these are
tools that really address those kind of
problems so that you stay ahead of the
curve so some of the things that are
really good with negatives is it
negatives itself is very very
comprehensive you can do an awful lot
with it and it allows you to be able to
get to the root of monitoring and
analyzing your problems within your
operations and network environment very
quickly it has a very modular
architecture which also then makes it um
extremely highly available and because
the the system itself is not reliant on
just a single large application actually
the module architecture allows it to be
scalable and very easy to manage across
your entire environment companies using
an ios include uber and hike and web
media again these are all technology
companies but there's no reason why you
shouldn't be using them as well so
hopefully you've enjoyed our uh 10 tools
that you need within your devops
environment to help cover both the dev
the ops and the integration between dev
and ops we also snuck in a couple of
extra bonuses in there as well as
talking a little bit about dev sec ops
which is really the evolution of devops
if you have any additional tools you
think that we missed that we should have
had in this list please put those in the
comments below and again as always if
you have any questions put your
questions below in the comments and
we'll get back to you with answers from
our simply learn team this has been
matthew giving you a quick overview of
the top 10 tools in devops have a
brilliant day
hi there if you like this video
subscribe to the simply learn youtube
channel and click here to watch similar
videos to nerd up and get certified
click here
