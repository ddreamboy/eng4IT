hi today we're going to build a beginner machine 
learning project we'll start out with a seven-step  
process that you can use to build an effective 
project then we'll build an end-to-end project  
using python and jupiter notebook let's 
get started now we can talk about the seven  
steps that we'll need to undertake to build a 
complete machine learning project step one is to  
form a hypothesis and a hypothesis is a statement 
that we can prove or disprove using data in this  
case let's make our hypothesis that we can predict 
how many metals a country will win in the olympics  
using data we have our hypothesis we need to 
find the data to prove or disprove it in this  
case we can use data from the summer olympics 
this data set contains more than 2000 rows  
where each row is a single country in a single 
olympic game so as you can see this first row  
is team usa from 2008 and we also have some data 
on how they did in the olympics and the second row  
is team usa from the 2012 summer olympics now 
let's go through the columns in this data set  
so the first column is the team code so it's a 
three letter code that indicates which country  
participated in the olympics the second column 
indicates which year these olympic games took  
place the third column indicates how many athletes 
that country entered into the olympics the fourth  
column indicates how many medals they won in the 
previous olympics so for the first row which is  
for the year 2008 previous medals would indicate 
how many medals team usa won in the 2004 olympics  
and then the final column is what we're going to 
try to predict it's how many medals the given team  
won in these olympics so again going back to our 
first row you can see that team usa in 2008 won  
317 olympic medals once we have the data we need 
to reshape it to make machine learning predictions  
possible in this case we don't need to do a lot of 
reshaping since what we're going to predict is the  
final column the metals column and we're going to 
use the athletes and previous metals columns to do  
that so our data is already in the form it needs 
to be in where we can pull data from a single row  
to make the predictions that we need sometimes 
data will be in a position where the target column  
what you're trying to predict isn't available in 
a single row or the predictors what you're trying  
to use to predict the target aren't available 
in a single row in this case our data is clean  
and everything is available in a single row 
so we'll be able to use the athletes column  
and the previous metals column to predict how many 
medals a team will win in a given year once we've  
reshaped our data we can start to clean it and 
cleaning the data involves making sure that our  
data is ready for machine learning in this case 
a lot of our data contains missing values so  
if you look at the previous metals column for 
some teams we can't actually find a value for  
previous metals and that's because that team 
did not compete in the previous olympics  
so alb is albania and albania did not compete in 
the 1988 olympics so there's no value for previous  
medals because previous medals is how many medals 
albania would have received in the 1988 olympics  
so for this first row previous medals is missing 
same thing for the other rows these countries did  
not compete in the prior summer olympics therefore 
we don't have a value for previous metals  
most machine learning algorithms 
cannot work with missing data  
so our fourth step is we're going to need to 
clean the data to handle those missing values  
and the fifth step is going to be finding an error 
metric that we can use to evaluate the performance  
of our machine learning model so our machine 
learning model is going to create predictions  
so we're going to predict how many metals we think 
a country should have earned in a given olympics  
and those predictions are going to be different 
from the actual medal counts and we need a way  
to figure out if those predictions are good or not 
and the way we do that is to use an error metric  
the error metric we'll be using is called mean 
absolute error and you can see the formula for  
it on the left don't be intimidated though 
we'll break down what that formula means  
and how we're going to use it so the formula can 
look a little complex but i'll explain how it's  
actually going to work so i just added a column 
to our table called error so error is just the  
the actual metals so that the value in the 
metals column minus the predictions and if  
there's a negative we just drop the negative sign 
and that's that's creating the the absolute error  
so that's everything in the formula to the right 
of the the sum sign which looks like a big e so  
that's all we're doing is subtracting the the 
predictions from the actual values and then after  
we do that we go ahead and take the mean of all 
the individual errors so what we do is we add up  
all of the error values and then we divide by the 
total number of predictions we made and that gives  
us what's called the mean absolute error so that's 
the metric we're going to use to evaluate if our  
algorithm is making predictions effectively step 6 
is splitting the data so we need to split the data  
because we want to train on one part of the data 
and make predictions on another part of the data  
and the reason we want to do that is if we train 
the algorithm on the same data that we use to  
evaluate it it's like the algorithm having 
an open book on a test so if you're studying  
for a test and you're given a practice test to 
take and you can memorize all the questions on  
the practice test if you're doing well on the 
practice test it might just be because you've  
memorized all the questions it not it might not 
be because you understand the material on the test  
so what we want to do is give the algorithm 
a new set of data that it hasn't been trained  
on to make predictions on and that new set 
of data will tell us how well the algorithm  
is performing so we're going to train the 
algorithm on the training data and then test  
it on the test data and we'll measure the mean 
absolute error so how well the algorithm makes  
predictions on the test data and that will tell 
us if we've built the algorithm properly or not  
and then the final step step seven is the fun 
part actually training the model so we're going  
to use linear regression which is a very popular 
machine learning model and linear regression works  
with an equation so if you look at the top left 
the equation y equals ax plus b is the equation  
that we're going to use to train our model and 
there's a simple example of how that can work  
below so you see the axis metals is on the 
y-axis and previous metals some metals in the  
last olympics is on the x-axis so for example if 
a country a country may have gotten one medal in  
the last olympics and three medals in the current 
olympics and you see that at the 0.13 on the left
so a linear regression model will draw a line  
between the points and we can 
use that line to make predictions
so you can see that we've now drawn a line 
and this line is a linear regression line  
and what this line does is it 
lets us predict new data using  
past data so we've trained the slope of this line 
using the equation at the top left so the this  
equation at the top left dictates the 
y-intercept and the slope of the line  
and we can use this line to predict data that we 
haven't trained it on so for example if a country  
got six medals in the last olympics we can look at 
the line and we can see that that corresponds to  
about six medals in this olympics so we would 
predict that that country would get six medals  
in the current olympics so for example if a 
country got six medals in the 2016 olympics  
using this line we might predict that they'll 
also get six medals in the 2020 olympics  
so the way that we build a linear regression 
is we train it using data that we already have  
and then we use what we've trained the 
line to make predictions on future data  
now the model we're going to train is going to 
be slightly more complicated than this model  
this is what's called univariate or 
single variable linear regression  
where we're only using previous metals so 
the metals a country got in the last olympics  
to predict the metals they'll get in this 
olympics but we're going to do something a  
little bit more complicated in our actual model 
and we're actually going to use two predictors
so we're going to use this equation instead 
which enables us to use two predictors so  
the number of athletes a country is entered into 
the olympics and how many medals they got in the  
previous olympics so we're going to train a model 
that takes into account both of those factors  
and then we're going to make predictions all 
right so that's the setup and hopefully now  
you have a good overview of the steps we're 
going to take let's dive in and start coding
okay let's go ahead and get started so the first 
thing we're going to do is we're going to import  
pandas as pd and pandas is an amazing 
python and data analysis library and  
we're going to use it to read in and explore 
our data so we're going to read our data in  
teams.csv is the file that contains our data 
and the download link is in the description if  
you want to go ahead and download that data 
so let's take a look at the teams data this  
is similar to what we saw in the table in the 
introduction except there's a few extra columns  
let's go ahead and remove those columns 
just to make this a little bit simpler  
those extra columns are columns you can use to 
continue building this model out on your own  
but for the purposes of this video i'm 
going to just take those extra columns out  
so let's use the same subset of columns 
that we saw in the table earlier
with a couple of additions so i'll 
explain the additions in just a second
okay so let's take a look here
okay so we have team which is the three-letter 
code for the country we have country which is just  
the longer country name we have the year so this 
is the year that the summer olympic games happened  
we have the number of athletes the team 
entered into the summer olympic games  
we have the average age of those athletes that 
were entered we have how many medals the country  
got in the previous olympics and we have the 
number of medals the country got in these olympics  
so we're going to be trying to predict metals 
and we're going to use previous metals and  
athletes to do so so we're going to use two 
columns to try to predict the number of metals a  
country got in the olympics and before we dive in 
and do that let's take a quick look to see if it's  
even possible to make these predictions so what 
we're looking at here is the correlation between  
the metals column and the other columns in our 
data so when we're building a linear model we want  
to look for strong correlations between the column 
we're trying to predict and the columns we're  
trying to use to predict that value because that 
enables a linear model to make good predictions  
to draw the line in a place that makes sense so 
these correlations are on a zero to one scale  
and you can see the correlation for athletes and 
for previous metals is very high which indicates  
that yes we probably can use these columns to make 
predictions let's take a closer look at the graph  
of how these columns look versus the metals column 
and we'll talk a little bit more about correlation  
so we're going to import a python graphing library 
called seaborn and then what we can do is use  
seaborn and the pandas data frame to actually plot 
athletes on the x-axis and metals on the y-axis
and then we're going to use our 
teams data frame as the data source  
and what we're going to say is fit regression 
equals true which will fit a nice regression  
line like we did earlier in the intro and we'll 
say ci equals none if we don't say ci equals  
none seaborn will give us a confidence interval 
around the line which is not what we want  
so we can see that there is a rough linear 
relationship between the number of athletes  
a country enters into the olympics and 
the number of medals the country earns  
which makes a lot of sense right if you enter 
more athletes into the olympics you have a higher  
chance of winning medals if you only enter 
one athlete the maximum number of medals you  
can win is one whereas if you enter a thousand the 
maximum number of medals you can win is a thousand  
so this shows us that there is a relationship as 
the number of athletes increases the number of  
medals also seems to increase and this is good 
news for us because we want to make predictions  
using athletes so this the existence 
of this relationship is great  
now we can look at a column where there isn't as 
strong of a correlation we can look at age so you  
can see there's a very very weak correlation 
between age and metals it's .02 out of out of  
one which is very low let's make another plot and 
look at the relationship between these two columns
so we'll say fit reg equals true again and we'll 
say ci equals not so let's go ahead and plot that  
and we can see here there really isn't a 
linear relationship between age and metals  
so as age increases the number of metals doesn't 
really increase you can see when age is low the  
number of metals is also low and when age is 
high the number of metals is also high there  
could be an interesting non-linear correlation 
here where if age is between 20 and 30 it seems  
like potentially the number of metals could be 
high but it's hard to tell this may be something  
worth investigating later on your own but for now 
we just won't use age as a predictor in our model  
now one last bit of exploration we'll do 
before we go ahead and do the machine learning  
is we'll make a quick histogram to look at how 
many countries fall into each bin for number of  
metals they earned so to explain this histogram 
you can see a lot of countries almost 2 000 in  
our data set have earned between zero and 50 
medals in an olympics and there's very very few  
countries that have earned a lot of metals so our 
data is a little bit unbalanced in the sense that  
some countries have earned a lot of metals and 
most countries have earned very very few medals  
so this may impact the usefulness of our model and 
our accuracy and we'll look into that later and  
see if this affects it at all but it's usually a 
good idea to look at your the column you're trying  
to predict the target and see how balanced 
it is all right now it's on to the next step  
we've we've found the data we've explored it our 
next step is doing a little bit of data cleaning  
so i mentioned earlier that there are some missing 
values in our data and we actually want to go  
ahead and remove those missing values so what 
i'm going to do is first find the missing values  
so what this code does is it finds 
any rows that have missing values  
so let's go ahead and run that and you can see  
there are a few rows about 130 that have 
missing values for the previous metals column  
and i mentioned earlier why the previous metals 
column might have missing values so albania for  
example didn't participate in the 1988 olympics 
which were the olympics previous to this so  
it didn't we don't have any data on metals 
that they received or didn't receive in 1988  
same thing with algeria and andorra and so on so 
what we're going to do with this missing data is  
we're just going to drop any rows that have a 
missing value so the way we'll do that is we'll  
say teams equals teams dot drop n a and that'll 
just remove all of these rows from our data  
so we're left with 2014 rows and previous 
metals doesn't have any missing values anymore
the next thing we're going to do is go ahead and 
split our data up and because this data is time  
series data right some rows come before other rows 
we want to split it in a way that respects that  
so we want to take the last two years of 
data we have 2012 and 2016 and put them  
in our test data set and take the previous 
years and put them in our train data set  
and the reason we want to do that is in the 
real world if we're trying to predict who's  
going to win the most metals in the olympics 
in 2024 we don't have access to data from 2028  
right we only have access to data from the past so 
when we train our machine learning model we want  
to respect the order of the data and make sure 
that we don't use future data to predict the past  
so we're splitting up our training and test set 
here and the reason we're splitting them up is we  
want to be able to train our model on the training 
set and then use a different set to evaluate how  
well the model is doing and that's going to be 
the test set we don't want to train the model on  
the train set and evaluate how well it's doing on 
the train set because that's like giving somebody  
all the answers to the test before they take the 
test we want the model to be evaluated on data  
that it hasn't seen before that it has not been 
trained on okay so we can look at train dot shape  
and we can see our training set has 600 rows and 
our test set has about 400 rows so that's an about  
80 20 split of our data which is perfect that's 
very very close to what the default split is  
people usually just do a default 80 20 train 
test split so this will give us a good way to  
train our algorithm and evaluate the error okay 
now let's move on to actually training the model  
so earlier we picked mean absolute error as our 
error metric so we're going to use that metric to  
evaluate our model after we train it so to train 
our model we can import from sklearn.linearmodel  
we can import linear regression and the 
linear regression class is going to enable us  
to train and make predictions with a linear model 
so i showed you earlier what a linear model looks  
like you draw a line and then you use that line 
to make predictions so we're going to initialize  
our linear regression class reg equals linear 
regression and we're using scikit-learn which is  
an amazing python machine learning library that 
has lots of built-in algorithms that all have a  
similar interface so you could easily switch 
from a linear regression to a different model  
now we're going to define our predictors so 
these are the columns that we're going to use  
to predict our target and our predictors 
are going to be athletes and previous medals  
then we're going to define our target which if 
you remember our target was the metals column  
so we're going to train a linear regression 
model to use these two columns to predict  
this column let's go ahead and run that now we 
can do is we can call the fit method to actually  
fit our linear regression model so 
we'll call we'll call the fit method  
and we'll pass in the columns from the training 
data set that we want to use as predictors  
so this is this is the data we're going to use to 
train the algorithm and then this is the target  
so this is the data this is the target 
that we're going to pass into the algorithm  
and the algorithm is going to be trained on the 
training data set so let's go ahead and run that  
now that we fit our algorithm we can use that 
to actually make predictions so we can type  
predictions equals reg.predict test predictors 
so you'll notice this we're calling the predict  
method of our linear regression class and we're 
only passing in the predictors for test we're not  
passing in the actual values and that's because 
we want the algorithm to create predictions  
without knowing what the actual answers are so 
we're going to use this to generate predictions
now let's take a look at our 
predictions so this is a numpy array  
and it is kind of hard to read but you may 
notice a couple of things one these values  
are not rounded right which doesn't really make 
sense given our scenario our scenario is we're  
trying to predict the number of medals a country 
will win and countries can only win a whole number  
of medals you can't win a half medal the second 
thing is that some of these numbers are negative  
and countries cannot get a negative number of 
metals so we're just going to do a some quick  
correction to correct the model to just prevent 
any negatives and to round our numbers and the  
easiest way to do this is to just manually correct 
it so we'll just do a couple of things to actually  
rescale our predictions and make sure that 
they make sense so the first thing that we're  
going to do is we'll go ahead and assign our 
predictions to a column in our test data frame
and this will let us just take a look at our 
predictions more easily we can see them there on  
the right and then what we'll say is test.loc test 
predictions less than zero predictions equals zero  
so what this is going to do is it's going to index 
our test data frame it's going to find any rows  
where the predictions column is less than zero 
and it's going to replace the predictions value in  
that row with a zero so basically if predictions 
was less than zero it will be turned into a zero  
then what we'll do is we'll say test 
predictions equals test predictions  
dot round just to make this data make more sense 
we'll round all the predictions to the nearest  
whole number so we can take a look at tests 
now and predictions make a lot more sense now  
zero is the minimum and we can see that the 
values are rounded to the nearest whole number  
now we can do is we can go ahead and look 
at mean absolute error mean absolute error  
so we will import mean absolute error 
from scikit-learn and then we can write  
we can call the function and then pass in 
our actual values which are the number of  
metals the team actually won in the test 
set and then we can pass in our predictions
all right and we'll get a number back 
indicating our mean absolute error  
now what does this actually mean so this 
means that on average we were within  
3.3 metals of how many metals a team actually 
won in the olympics now whether or not that's  
a good value let's find out so we're going 
to dig a little bit deeper into the data set  
and investigate if that is actually a good 
error or not so first let's take a look at our  
metals column in a little more depth using the 
pandas describe method and what this shows us is  
the minimum value in the column the percentiles 
and the standard deviation so it's usually nice  
to just do a quick sanity check and make sure 
that your error is below the standard deviation  
if it's higher than the standard deviation usually 
something's wrong either you're using predictors  
that just don't give you any information to 
predict the target or you you mess something up  
with your model in this case things look okay 
our error is far below the standard deviation
then what we can do is look team by team  
to see how our predictions look for 
different countries so let's look at the usa
so we can see in 2012 the us got 248 medals but 
we predicted 285 and in 2016 they got 264 medals  
but we predicted 236. that's not bad right 
we're we're not we're not absolutely correct  
but we're not super far off so we are about 
40 medals off here but in percentage terms  
it's not that high of a percentage and same here 
the percentage that we're off is not very high  
now we can look at another country like india that 
doesn't enter as many athletes into the olympics  
and see how we did there so with india in 2012 
india got six medals and we predicted they  
would get seven which is which is good right we're 
pretty close in percentage terms but in 2016 india  
got two medals in the olympics and we predicted 
12. so we're off by a factor of six and this is  
where mean absolute error can be very different 
for different countries on a percentage basis so  
if a country only got two medals an average error 
of four medals is huge right that's a factor of  
two either way whereas for a country that gets 300 
medals earns 300 medals in an olympics an average  
error of four is not that big a deal right in 
percentage terms it's pretty small so what we can  
do now is look at our errors by country just to 
see how we're doing on a country by country basis
okay so this is just finding the mean the absolute 
error so we're subtracting our predictions from  
our actual metals and we're taking the absolute 
value we saw the formula for this earlier  
and i'll we'll take a look at errors so this is 
just the difference between our predicted number  
of metals and our actual number of metals and 
i'll i'll use the column and test instead of the  
predictions variable because that's 
the one that we rounded all nicely  
so this just gives us our difference between how 
many metals we predicted and how many metals were  
actually earned by the team what we can now 
do is group this by team so we can create a  
variable called error by team and we'll say 
errors dot group by test team so group by  
is a pandas method that creates a separate group 
for each team and then we will calculate the mean  
so this will create a separate group 
for each team and then find the mean  
error for that team so if we look at error by team
we now have how many metals off we 
were on average for each country
now we can do is we can look at how many 
metals each country earned on average
so we can do the same thing with the 
metals column we can group it by team  
and then we can find the mean and 
this will tell us how many metals  
each country earned on average in the olympics 
and then we can find the ratio between our errors  
error by team divided by medals 
by team call this medals team
and let's call this error ratio okay so now we 
can take a look at error ratio and see what it is  
if i run it properly and we can see 
there's a lot of nan values here  
and this is because a lot of teams there the 
average number of metals they earn is zero  
so we're dividing by zero and 
we're getting a missing value
so what we need to do here is import 
what we can do is we can say error ratio
so we can take only values that are not missing 
so this gives us 102 countries where we don't have  
missing values in our predictions here we also get 
some infinite values so we need to figure out how  
to remove those as well so for whatever reason 
if a country has an average ratio of zero metals  
so if if our average error was zero and our 
total number of metals was zero then we'll  
get an nan while doing this division in 
pandas but if instead the error by team is  
one and metals by team is zero then we get 
an infinite value like in this case so we  
just need to clean up our infinite values as 
well so what we'll say here is error ratio
equals error ratio np dot is finite error 
ratio okay and then i'll import numpy as np
all right so now we can take a look at 
error ratio okay so we now have 97 values  
we've removed all our missing 
values and our infinite values  
so that gives us only the countries 
that we have an actual error ratio for  
and now what we can do is we can go ahead 
and create another histogram of this
and what this tells us is an error ratio of 0 
to let's say 0.5 means that you are within 50  
of the actual metal count but in some 
cases here error ratio is 2 and above  
which means that our predictions were twice 
as high as the predicted metals or half of  
the predicted metals so it means that we're pretty 
far off the true value so what you'll want to do  
to determine if this model works for your purposes 
is look through the error ratios for the countries  
that you want to make predictions for and for 
some countries the error ratios are pretty good  
right so for the u.s we're within 12 of the true 
metal count for australia we're within 36 percent  
but for other countries the error is higher right 
and we're much further off the true metal count so  
whether or not this model is good depends on if it 
can do well in what you want it to to do well in  
so sometimes you need to go a layer deeper and get 
a little bit below just the mean absolute error or  
the all-in-one error metric and actually figure 
out what that metric means and how it breaks down  
among specific groups in your data so in 
this case if we wanted to make predictions  
for countries that tend to earn a 
lot of metals we would do pretty well  
and we can see this by typing 
error ratio.sort values
so countries that tend to get a lot of medals in 
the olympics like france canada russia our error  
is pretty low whereas for other countries 
which maybe we don't have as much data for  
or don't send as many athletes to the 
olympics our error is much higher so  
for countries that send a lot of athletes to 
the olympics our model performs pretty well  
but there is a lot we could do to continue to 
improve it if we want if we want it all right  
so at this point we've gone through the 
seven main steps in building a machine  
learning model and now we can talk about if 
we wanted to extend this what we would do
so there's a couple of things you can do to 
improve the accuracy and performance of this model  
so you can add in more predictors to the model  
so you'll notice there are a few columns we 
didn't use so that would be columns like events  
and age or height so that's that's one option 
you could try different machine learning models  
so models like a random forest or a neural network 
to see if they perform better you could go back to  
the original athlete level data and actually try 
to build a different kind of model so the data  
that we're using the teams.csv data i actually 
summarized from a different athlete level data set  
so we can go ahead and take a look at that data 
set that's this athlete events dot csv data set  
and this data set has information about individual 
athletes in the olympics so each row is a specific  
athlete and what you could do is build a model 
to predict if a specific athlete will win a medal  
and you could add the results of that model 
together to figure out how many medals each  
country will win and that model could be more 
accurate than a top down just looking at the  
total number of athletes in a country model so 
you could build a specific athlete level model  
you could also try to reshape some of these 
columns some some of these columns may have  
non-linear correlations with our target with 
metals so you could try reshaping those columns  
using different mathematical transformations to 
see if that creates a more linear correlation  
all right the final thing you can do is measure 
the error more predictably so you can build a  
system like a back testing system which i've 
talked about in other videos or another kind  
of system that can measure error across the 
whole data set not just on a 20 subset of it  
you could also train a model for different types 
of countries so you could train different models  
for countries that earn low numbers of 
metals versus high numbers of metals etc  
so all of these ideas could 
help you build a more accurate  
model well i hope this was a good beginner 
introduction to machine learning and that  
you understand the main steps in building a 
machine learning model thanks a lot for watching
