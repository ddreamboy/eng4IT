foreign
today we will take you through a hands
of lab demo of how we can use Gan the
native adversarial Network for the image
classification
and for amazing videos like this
subscribe to our YouTube channel and
press that Bell icon to stay updated so
in today's session
we will discuss what Gan is and moving
ahead we will cover types of models in
GM and in the end we will do a hands-up
lab demo of celebrated face image using
GN so now let's see what is gan
so generative adversarial networks were
introduced in 2014 by inj Goodfellow and
co-authors JNS perform unsupervised
learning tasks in machine learning gns
can be used to generate new examples
that possibly could have been drawn from
the original data set
so this is an image of GN there is a
database that has a real 100 rupee node
the generator neural network generates
fake hundred rupee node so the
discriminator network will help to
identify the real and the fake node or
the real and the fake images you can see
so moving ahead let's see what is
generator
so a generator is a GN neural network
that creates fake data to be trained on
the discriminator it learns to generate
plausible data so the generator examples
or instances become negative training
examples of the discriminator
so as you can see here the random input
generate a new fake image the main aim
of the generator is to make the
discriminator classify its output as
real
so the part of GN that drains the
generator includes the noisy input
vector or generator Network which
transform the random input into a
instance or the discriminator network
which classifies as generator data so
after seeing what is generated let's see
what is a discriminator
so the discriminator is a neural network
that identifies the real data from the
fake data created by the generator
so the discriminator training data comes
from two sources the real data instance
such as real pictures of birds human
currency nodes and anything are used by
the riskimeter as a positive sample
during training the second one is the
fake data instance created by the
generator are used as a negative
examples during the training process so
discriminator decide from the real
images and the fake images generated by
generator and discriminator decide which
is fake and which are real so now let's
move on to the programming part and see
how we can use Jan using celebrity face
image data set so before move on to the
programming part let me tell you that
the demand for machine learning AI is
growing faster than that of other
profession in fact according to
statistic there will be more than 2.3
million job opening in the field of
artificial intelligence and machine
learning by 2023 but you can beat the
cow with a professional certificate
program in Ai and machine learning
co-sponsored by Pardi University and IBM
this course covers tools and techniques
like numpy pandas python sci-fi along
with industry project like social media
by Twitter delivery service provider by
zomato and transportation service
provided by Uber and many more Amazing
projects choosing this course can you
get hired in renowned companies like
Netflix Amazon Facebook and Adobe and
many more and an average salary hike of
70 percent so what are you waiting for
join the professional certificate
program in Ai and machine learning and
Excel your career into machine learning
the link is in the description box below
so here we will start with GN generative
adversarial networks okay so first I
will rename with gan
okay
so here we will import some libraries
like import
OS
so we will do from PI torch machine
learning deep learning library
which worked for like neural networks so
here I will add from
list
dot data report
data loader
okay so what is this torch dot
utlist.data so this is an app set class
representing a data set and you here you
can custom data set
that inherit data set and override that
this is it okay
and this import data loader so data
loader is a client application for the
bulk import or export of the data and we
can use it for to insert update delete
or export like records and when
importing data data loader reads extract
and loads data from the CSV files like
comma separated values or from a
database connection you can say and when
exporting data it's output a CSV file
okay then moving forward
Dodge
vision
Dot
transform
as
t
okay
so Transformer like very common image
transformation available in the toss
Vision so transformation module they can
be changed together using compost so
most transform classes have function
equivalent functional transform give
fine grain control over the
transformations
and one more like from
torch vision
Dot
transforms
sorry data set
s
import
image
folder
okay invalid syntax
thank you
why it is invalid to let I will tell you
not it's important
okay yes
so now what I will do
okay Dodge
utils it is
yeah now it's working fine so now we
will import the data set so we are here
we are using celebrity face image Okay
so
I will provide you the data in the
description box below don't worry okay
so you can download from
data set directly from there
so this is my path
to data set
on five
let's stop
face image data set
foreign
now I guess it's fine
yeah
so here
what I will do I will set the image size
and all so image
size
64. then batch size
equals to
256.
then best size equal to 256
then stats
equals to
0.5
comma 0.5
and again
0.5
okay comma
0.5
comma 0.5
comma 0.5
okay so here we have set the image size
and the batch size and the stat values
so now what we will do we will train the
data set so here I will write train
DS equals
image
folder
data
sorry
data directory
comma transform
T Dot
T Dot
compose
here I will add D dot
uh study size
the image size
okay
then again repeat Dot
Center crop
Center crop here I will write image
size
I will click small
[Music]
then here I will add T Dot
to
tensor
comma T Dot
normalize
stats
okay
because here I can write train
DL equals to data
loader
then train
ideas
press size
then Shuffle
true
common num
workers
because two number of workers
then here I will let pin memory
okay
the system cannot find the body specific
user
okay so there is an
okay so let me copy my path
let's see
now let me run
yeah so it's working fine
so
let me put
Dot
so
torch vision
Dot utils
import
okay then import matplotlab
my problem
Dot
Pi plot
as PLT
then
that plotlet
so this torchvision dot utils import
make grid is used to make a grade
okay great you know small small boxes
and this matplotlib you already know is
used for the making charts
different types of chart line chart bar
chart pie chart
okay so let me run this
so here I will write now make a function
no
IMG
dancers
then
return
IMG
dancers
stats
run
1 0
plus that
zero
negative
okay
so let me run this
now what we will do we will make again a
new function for show images and show
patches okay for that I will write the
show
image
okay
and Max
equals to 64. so simple will be there
then
figure
from our axis
equals to PLT Dot subplots
figure size
so
10 comma 10.
okay
then ax axis dot set
X takes
ax dot set
vertex
okay then ax dot I am sure this is image
show
then make grid
the norm with General function
images Dot
detect
and Max
comma intro
number of rows will be eight
then Dot
brought me out
one comma 2 comma zero
okay
then the
show
badge
DL comma
and Max equals to 54.
then for
images
in there
show
images
the images comma Max
like n Max
then break
okay so now let's see some badges so I
will write show batch
chain
deal
it's loading it's loading
okay
okay image okay
so
the none
okay the spelling mistake
so as you can see here this maybe Robert
Downey Jr this is Robert Downey Junior
and different celebrities here
so
we have to do GN in this we will
generate the fake images and will
generate the new images that
discriminator will set the images which
are real or fake
okay so now let's use GPU
like let's see GPU is available or not
okay
so here I will write the
get
fault
device
then if
Dodge dot Q Dot
dot is
available
the return
dot dot device
Cuda
okay
as
return
dot dot device to CPU
then DF
2 device
data from our device
like for from this we will move tensors
to chosen device like okay if
is instance
let's see stars
data comma
list command double
return
to
foreign
X comma
device
for X in data
return
data dot to
device
blocking equals to true
okay T will be Capital here
then I will write class
device
data loader
so here what will we will do we will
wrap a data loader to move data to our
device so for the DF
init function and to self
comma TL device
then here I will write self
dot DL equals to DN
then self
Dot
device question device
okay
so
here I will write
for the attrition
so here I have to give to underscore
here I will write again self
so it yield a batch to data after moving
it to a device
so for
for
b m
self dot DL
then
yield
to device
then B comma cell
the device
okay
and the last one is DF
length
will write self
the
it will return the number of batches so
return
length of
self dot DL
okay invalid syntax
okay not not
okay so here I will write
device
as you get
fault
device
okay
then train
DL question
device
data loader
chain
okay
so uh as we already know what is GN and
what is discriminator and
you know generator so let's take again
GN overview so our generative adversial
Network GN has two parts
so the generator learns to generate
plausible data the generator instant
become negative training examples for
the for producing impossible results so
so you have data so what discriminator
will do
discriminator will you know decide from
the generated data and the real data
which are fake and which are real
okay this will generator will do
discriminator sorry okay so
discriminator like takes an image as an
input and tries to classify it as real
or generated
in this sense it's like any other neural
network so I will use here CNN which
outputs is a single neural network for
every image so
okay so I hope you know again like what
discriminator is what generator is and
what is like real data it is this okay
and we will generate the data
okay fake data and what discriminal will
do discriminator will
check whether the data is fake or real
okay
so here I will write import
torch
Dot and then
here I will write this criminator
equals to Ln Dot
sequential
foreign
so these are some
so these are some layer okay flight and
layer converter layer okay leaky uh
so here I am setting you know descriptor
like 3 into 64 64. okay so here 64 by
2128 128 by 256 so these are the sizes
sizes of the images
okay
so
here discriminator
because you
to device
discriminator
on my device
okay
address
okay what's wrong spelling is wrong
Maybe
okay so it's saying get this limit is
not defined
okay let me debug
okay nothing else the spelling was wrong
so sorry for that
so let me do for the better visuals
okay
so I know I hope you know the generator
what generator network is
so here what I will do I will set the
size latent
size equals to
128
okay so here
we have set this discriminator
now what we will do we will set the
generator okay the size is
like 3 into 64 64 or 32 128 and so on
for all the layers
so here I am setting for the generator
the same I will write here
generator
to device
generator
common device
again the generator is
okay
okay
then data is defined here
okay
now it's working fine
so here
so now what I will do I will do the
discriminator training okay
so for that I have to write Def
train
discriminator
real images
of the
okay now we will clear the discriminator
gradients so opt
D dot
zero
great
okay here we will pass real images
through discriminator
okay
so these are the for the real images
because we have to show the all the real
and the fake images then we'll Shuffle
then and we'll find out which is real
and which is not okay so and now we will
generate the fake images using latent
foreign
so now what we will do we will pass the
fake images through discriminator as we
did for the real images
okay so now we will update discriminator
weights for that I have to write laws
equals to
real loss
then Plus
fake loss
okay
the loss Dot
backward
option
return
loss dot item
comma
yeah
cool
okay
cool
okay
all right
um
okay bracket is missing
close backward
and 36.
okay so here what we did we did the
width pass the real images to
discriminator then generate fake images
and the same time we pass the fake
images through discriminator and the at
the end that loss equal to real loss and
the fake loss we update the
discriminator bits
okay so now so this was the
discriminator training now what we will
do we will do the generator training
okay so for that I have to write Def
for that after that DF train
train generator
then OBT
G Dot
zero
Grant
so what we are doing here we are
clearing the generator gradients
before that we did for the same the
discriminator one okay so now we will
generate the fake images
okay what generator do generator only uh
generates the fake images okay
so from this prediction
from this prediction what we are doing
we are just make trying to fool the
discriminator okay
so
so here we will update the generator
rate so I will write loss Dot
backward
then I will add opt
underscore g dot step
then he will add return
okay let's run it
so here I will write from
torch
vision
dot YouTube
save
image
and here I will write sample
directory
because you generated
generated
okay and Os dot me directory
sample
directory
comma
exist
okay
true
okay
so
now what we will do we will save the
sample data okay so we I have to create
uh to save samples uh one function
okay so here what I'm doing we are I'm
making the fake images generating the
fake images and saving it
okay
so moving forward well what I will fix
the
I will fix the latent
Dot
random input
then 64.
size comma one comma
one comma then device
question device
then
again save
samples
two zero comma fixed
latent
okay save samples is not defined
it's defined here
yeah
so see this is the generated images this
is the fake image okay
now what I will do I will do the full
training Loop for that I have to write
from
tqdm dot notebook
import
take you
and import
Dot
[Music]
functional
as f
let me keep the spaces
so
now what we will do we will train this
uh
we will do the full training Loop till
the 400 Epoch so it will take a
very long time so first I will write the
definition
okay I will Define one uh the function
okay and then I will get back to you
so yes what I did uh so this I have set
the losses and the scores okay and
these are the optimizer some optimizers
opt you can say Optimizer we are
creating
and here I'm training the uh
discriminator and here I am training the
generator
okay for the loss
and here the record of the loss in the
you know this course will save
and this is for the log of
losses in this course last batch and for
this this is for the generated image
okay it will save the generated image
okay we have already created here you
can see
for the sample image for the saving
okay now what I will do I will write
percent
time
time then LR equals to 0.005
the Box
equals to 400 a box means it will take a
huge time
so
history
because to fit
box comma
okay fit is not defined
okay I have to run it again
this
okay something random objective zero
quit
okay I have to check
so as you can see it's started running
so this box will run till 400
so it will take a long time very long
time so I will get back to you after
that
thank you
so as you can see this is of 1 by 400 so
it will run to three till 339 okay so it
will take a very very long time so it
will Define the loss of generated the
loss of discriminator and the real score
and the fake score and at the same time
it's saving the generator images
okay so it will take a long time and
then I will get back to you
so as you can see here the gns are done
till like 400 okay
till all the 400 okay so now let's do
some losses
come on losses
of the discriminator and the real score
and the previous course
question history
so here I will touch
dot save
the generator
yeah
this state
and let's go
directly path
comma
g dot
okay
then I will write Dodge
C
the discriminator
dot state
direct path
comma D dot pth
so the spelling mistake is there
yeah so I've read from
IPython
your display
import
image
okay
so here I will write image
like what the generator generated the
image
the dot slash
generated
slash
images
okay let's see so this is this is the
first image which generated by the
generator okay so same we we have 400 a
box so let's see
so here
I will check the 100
image
so as you can see 100 images more bit
clear
so what if I will check for the like 300
300 image one it's morbid clear
okay now let's check the 400 image
I hope see it is clear so it is these
are the fake images which are generated
by the generator to fold the
discriminator to confuse the
discriminator okay
so now we will
plot a graph
we will protograph for the pocket loss
in the
for the discriminator and the generator
so for that
that's right
so as you can see this is a
discriminator okay blue one and there is
a generator generator so loss for the
generator is the mode and the loss for
discriminator is less which is very good
and now let's see the real and fake
images
okay so these are the real images score
and these are the fake images
so I hope you understand what is GA and
how to do GN with pi dot or python in ml
so I hope you like this video please
don't forget to check the course link
from the description box below okay and
don't forget to subscribe to our YouTube
channel till then stay safe and keep
learning
hi there if you like this video
subscribe to the simply learned YouTube
channel and click here to watch similar
videos turn it up and get certified
click here
