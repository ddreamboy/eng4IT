what if we see some rest is for first
grade student in one poem Jupiter is the
fifth from the sun it's the biggest in
the solar system it is the brightest of
them all the Romans named it after they
got Jupiter
is it really doing this rhymes
hey what is up everybody Ivan from
weights and biases here and in this
video I'll show you a really quick and a
really simple way that you can start
using opening eyes really cool Jupiter 3
models in Python and if you have fine
tune the gpt3 model and wondering how
you can use your fine tune gupt3 model
I'll also show you how you can do that
in the video let's get started so I
would say the main reason as to why you
would want to deploy gpt3 in Python is
if you wanted to build some sort of
application uh using the magic of this
really really cool large language model
so maybe you're coming into this video
after you've played around with Chad GPT
which has very much taken the Internet
by storm in the last couple months and
tragic is essentially an application a a
nicer way to ask questions from gbg3 and
essentially like a gpt3 with a nicer UI
and couple tweaks that that make it
possible but the actual thing that
generates text is still like very
creation of the gpt3 model that they're
using for chat GPT and so if you want to
do cool stuff the gpt3 that's what we're
gonna learn about using in this video
and hopefully we'll build some cool
applications for it and this is going to
be a series of videos where in this one
we'll cover
setting it up in Python but in the next
videos we'll actually cover what kind of
applications you can build with it so
stay stay tuned for that and now let's
jump into setting up an open AI account
and getting the API keys and all that
good stuff that we need to actually
start using it in Python so I am on the
opening a website right now and Tuesday
API we click on API and that's the part
where you need to either create a new
account within openai or log into an
existing one I already have an account
um but but it's a fairly simple way to
create it so just like go ahead click
click sign up and put in your details
and you know get you an account I'm
going to log into mine right now
all right now I've logged into the open
AI API part of the open AIS website so
here's a few things that we can do right
off the bat for example you can go to
the playground here and here you can
actually try the goose gpt3 essentially
like the same
um results that we'll get in this web
client will be getting uh in Python via
the API so for example maybe we want to
here's a poem about openai API so maybe
we'll ask you to write a poem about open
API
it's definitely it's definitely not the
most
um humble
AI system that I've seen but
um I don't I don't think it's I don't
think it's very wrong uh what's it
saying here
so um as you can see it works and that's
what we'll be getting to use in Python
and to use it in Python we need to get
an API key
um so API key is essentially what will
allow
um open AI to know that
a particular Python program that's
coloring the API is attached to our
account and this is the way they can you
know charge you money if you're using it
a lot and things like that and if you're
curious about prices I'm showing you
some on screen right now as you can see
like the prices vary by how powerful is
the model uh and also by how much text
you're generating with it so here
they're saying that the prices are per
1000 tokens you can think of tokens as
pieces of words where thousand tokens is
about 750 words and as you can see you
can start experimenting for free using
18 of free credits which you can use in
your first three months of using it and
then you can pay as you go and uh you
know you can choose your model but we've
already talked about the fact that you
can choose your model so yeah refer to
openai.com API pricing for the most
relevant pricing information but this is
just for me to give you like an overview
of uh what you can expect when you first
started using the the API so now we're
gonna go and get our API keys to do that
we'll click on our account we'll click
on view API keys
so here we can see the existing API keys
that have been tied to our account and
when they've been last used
and I'm gonna create one right now to
show in this video but don't worry
though uh obviously after I've finished
editing and making this video I'll click
on delete this API key and you know it's
it's it's a
I'm going to show you an example but
don't think that you can go and use it
then
um because I've revoked it so let's
click on this button to create a new
secret key API key generated so here
it's saying that it's only showing us
the API key once and once we've copied
it and saved it somewhere safe it's not
going to show it to us again it's okay
I'll copy it to clipboard and press ok
now we have a new API key that we'll use
in the code and
to do that let's obviously jump in the
code
so the first thing we will do here is
we'll paste our very secret API key
um here which will essentially set up an
environmental variable uh with the open
AI key and that'll in the future will
let the open AI python client know what
our API key is so let's do that so we've
pasted the API key here we run the self
code and the variable is defined so
we'll install openai which is Open the
Eyes python library and we'll install
ydb which is the weights and biases
python library and waits and biases if
you're not familiar is an mlapse
platform which helps you with a lot of
the machine learning uh pipeline things
like tracking your data training your
models optimizing the hyper parameters
and all of that and since we're looking
at this video as an example of a use
case where you want to go and develop
some sort of application using gpt3 it
becomes really important that you have a
way to keep track of your prompts
because a really important part of
building on top of a gpk3 is prompt
engineering we're just kind of like
figuring out a nice way to almost like
ask the gpt3 to give you a desired
outcome and and for that it's very vital
that you have a way to keep track while
you're experimenting of your prompts and
the completions that you're getting so
that you would not lose the best
performing prompts for example and that
is what we're going to use weights and
biases for in this video so let's click
on the cell and install the libraries
and kind of like an additional fun fact
about the two companies is that open AI
is the first customer of weights and
biases and they actually use wnb to
train all of this amazing GPT models and
when it comes to fine-tuning wmbs also
integrated into openai so that you can
get like with one line of code all of
the training metrics from your fine
tunes and the weights and biases and all
that good stuff and all that is to kind
of say that there's a lot of Merit using
the two products together so next up
we'll import some libraries and pass the
API key to open Ai and so next up we're
going to go and Define a new which
devices run inside a project that will
name gpt3 app in Python and we'll also
Define the new weights and biases table
with two columns for prompt and
completion
as we want to keep track of that and wmb
tables is a product inside wnb that lets
you interactively query and explore
tabular data which is what we're going
to do in this video with all the cool
predictions
and so now in the next cell we'll
actually perform inference on our prompt
using gpt3 uh using the API so here let
me make a larger so here's the command
in the python that we're using to access
gpt3 it's open AI that completion.create
and here we pass the name of the engine
which is as you remember there's couple
variations of GPU threes there's
different like
DaVinci models and different versions of
these models for this one we're going to
use the most powerful as of right now
text DaVinci version 3 Model uh then we
pass our prompt as you can see our
prompt is we Define it here and our
prompt is to correct this to Standard
English she know when to the market so
it's gonna do like some grammar
correction stuff
um so we passed another prompt then we
Define temperature and temperature is a
hyper parameter uh that is responsible
for how random the predictions that gpt3
gives us are if it's like zero it's
always going to be the same thing if
it's if it's uh closer to one it's
actually gonna throw in some different
stuff occasionally there and then Max
tokens is for how many tokens do we want
to run our predictions so the more
tokens we have the more tax Deputy 3 can
generate but the key word here is May
because so for example when it finishes
correcting this sentence to proper
grammar it'll output like a stop
sequence which means the gpt3 is done
with uh with the with the predictions
because if you think about it it's just
important for the model to know when to
stop its uh Generations as to be able to
generate in general and that is me
essentially trying to say that this type
of parameter controls how many tokens
the model can predict in our case uh but
it does not mean that it will always be
256 tokens yeah that makes sense because
sometimes it'll run into that like stop
sequence and then there's tap and then
there's tab B frequency penalty and
presence penalty which also we kind of
used to guide the predictions a little
bit and then it prints out the response
and we added the wmb table our prompt in
the first column in the second column
the response to the gp3 gave us so let's
let's finally run the cell and see what
it gives us
um so as you can see we had she know
when to the market it transformed into
she did not go to the market which is
correct if you ask me and the logic
everything wmb tables in this case is
that we can go and we can run the cell
with like different prompts for a little
bit so for example we'll ask it to
correct he know when to
like say the store instead of the market
right it'll give us the prediction
um he did not go to the store
um all that stuff gets added to the
doubling B tables in this case and then
once we're done with the predictions we
can call wnb.blog to lock this
um predictions table and call WB that
finish to kind of finish our particular
run and I'll kind of show you what that
gives us right now
and so it gives us a link now to our
project page and to this run the which
we've logged this table so we can go and
we can see here in the table
um our predictions she now went to the
market you know in the market one time I
did this like off camera to test it and
he you know went to the store he did not
go to the store so
um there we have it so the usage here is
that you go you try different prompts
you log into the table once you're done
you lock the table and then you can
explore your prompt and by the way you
can find more information about these
hyper parameters in the open AI docs
I'll leave a link to them in the video
description and if you want some
inspiration for all the cool tasks that
you can do with gbt3 you can go to
um overview then you can go to like it's
on the opening I API website right so
you go to overview and then here you can
click on examples and an example here we
have all sorts of different tasks and by
the way I've taken the grammar one uh
right here it's an example
um like it's an example right here in
their in their docs in this way and as
you can see it has all sorts of tasks it
has SQL translate classification so here
for example we have this like task
examples summarize for a second Creator
so we go here um The Prompt is summarize
this for a second grade student
um here's some information about Jupiter
and we can go here look at the code look
at the prompt
okay so let's say for example we want to
work closely with this task so what I'll
do is I'll go and I'll start a new
random awaits and buy something new
table because our previous round was
around this task of correcting grammar
so I'll start a new one and then I'll go
and I'll update our prompt so I'll copy
this
and paste it
here as I prompt and then there is also
some hyper parameter difference here
that open AI people have put for this
task so also copy and paste the highway
parameters for this task right here
and let's try running it
so Jupiter is the fifth planet from the
sun and the biggest in our solar system
it is so bad that it can cast Shadows on
Earth it is named after the Roman god
Jupiter also and has been known to
people since before recorded history
and we've started with
um sunrise for second graders is done
it has a lot of math stuff
yeah so it's noticeably less complex
than what we've started with I would say
and let's say maybe we want to vary this
a little bit so let's try
um summarize this for let's say first
grade student in uh one sentence
so let's say we'll make it like even
simpler we'll share this prompt
so it just gives us Jupiter is the fifth
planet from the sun and it's very bright
and big named after the Roman god
Jupiter okay so maybe we want to vary
this prompt even more what if we see
some races for first grade student in
one poem
because gpt3 in recent update it's
gotten really good with rhyming so
um
okay Jupiter is the fifth Jupiter is the
fifth from the sun it's the biggest in
the solar system
it is the brightest of them all the
Romans named it after they got Jupiter
is it really doing this Rhymes so we
know it by that name
it's so bad that you can it's so bright
that you can cast Shadows with its light
it's the third brightest in the night
wow like this is pretty cool yeah it's
quite fun and you can do a lot of
variability with this promise and also
like this rhymes like if it's really
pulling up its Rhymes Sun System like
there's some cool rhymes
and uh keep in mind we've been uh
lagging all of this like prompting
completion pairs wmb table so that we if
we stumble on some of this like cool
prompt and yes we're not losing them and
we can go and lock them to weights and
biases now and then click the link to
navigate to our run page to which we've
locked the table and then see our uh
prompts and completions
so here's the yeah so here's the latest
one summarizes for
our first grade students in the poem and
hear our previous ones this way you can
keep track of all that good stuff
and the last thing I wanted to show you
is how you can use a fine tune gpt3
model in Python using the API as well in
the video which will pop up somewhere in
one of the corners I find tune gpt3 to
generate new
um Doctor Who episodes not so to like
come up with new Sci-Fi TV show ideas
and I'm gonna show you how you can use
those types of fine-tuned models in the
API as well so a couple things you need
to change so in that video like I've
done a detailed explanation of all the
steps there so go and watch that video
to learn how I fine-tuned it and all
that good stuff and so to use a fine
tune model you need to know the name of
that fine tune and in that video we use
the opening W and B integration so I've
been logging all that stuff to weights
and biases and here for example let's
say I want to use this model with its
name Curry FG 1GB
etc etc
I go and you know I copy the name of the
fine tune and then I place the name of
the fine tune in the name of the engine
uh like
let's let's see I do it like this
because that's like our engine and
that's the you know name of the model
and then move our fine tune on that
model
and if that function is in your open AI
account it'll be able to access it via
the API in this way and then we also
need to we can play with time parameters
but I don't think that's necessary I
mean maybe we'll give it more tokens to
generate with maybe a temperature seems
good and we also need to
change your prompt to the type of prompt
completion structure that we've used for
fine tuning so for example in the Doctor
Who fine-tunes I've used imaginary name
of an episode so let's for example try
invasion of alien fish and then this
like arrow symbol to know the transition
from where the prompt ends to where the
completion should begin that's that's
like the fine tuning stuff like
watch that video I go into way more
depth on this particular topic so now
that we've done that I'll go and I'll
start a new weights and biases run and
we'll run this cell to perform inference
on our prompt using the fine-tuned model
so here we can see the results the
completion for the prompt invasion of
alien fish and ancient race of
amphibious creatures known only as the
invasions have taken over the British
Coastline and are now in a bit to take
over the world their leader in Grid has
kidnapped the doctor's companion Joe
Grant and the first doctor to come their
aid doctor must then go on a dangerous
mission to defeat the Invaders but will
he returned with news of Ingrid's
weakness ending credits followed by the
epilogue uh uh yeah it goes a bit off
the rail here with the Indians so I
think it may benefit here if we also add
stop sequence so as you can see in the
last example it kind of went all the
rails at the end because I forgot to
include a stop sequence so here in the
Ducks I found that we can pass the
agreement stop and so here I'll put the
stop sequence I think it was just and
for that particular fine tune and let's
try to generate some more
link towards the futuristic factor in
Earth yada
and yeah as you can see now it ends
normally when the factory explodes and
destroys a life on Earth well not
normally in the synopsis sense but
normally in the sense that it's not
spamming all of like and and then then
step sequences and it actually stops
generation when it stumbles into an end
so that's like a useful one to know uh
when using this uh when using your fine
tune models with the opening API in
Python and in the end we'll uh lock the
table and uh call 1GB that finish
and here we can see all the prompt and
their completions that we've tried this
time so thank you so much for watching
this video we've covered all the stuff
that I could think of that can be useful
when deploying gpt3 and python with the
open air API and if you have any
questions uh please feel free to leave
them in the comment section down below
and I'll be happy to answer you and if
you like this video consider smashing
the like button and subscribing to our
channel to see more tutorials interviews
and talks and yeah thank you so much for
watching this video I really hope you
enjoyed it and found it useful
