hey guys welcome back to another video
by simplylaw
in today's video we're going to learn
all about javascript functions in our
previous videos we've covered topics
like javascript arrays and loops
if you're new to this topic i suggest
you go through these topics before
all right so before jumping in let's go
ahead and look at what's in store for us
first we're going to learn what exactly
javascript functions are
then we'll look at javascript function
expressions then the function
constructor
self-invoking functions functions as
values functions as objects arrow
functions generator function and the
predefined functions
also don't forget to subscribe to our
channel and hit the bell icon to never
miss an update
moving on to our first topic
what are javascript functions
so basically a function is a group of
reusable code which can be called from
anywhere in your program right
when you have a piece of code that you
want to execute repeatedly in your
entire program it makes more sense to
define it once and call it over and over
right it makes the code more efficient
and readable this also helps programmers
write modular codes
so this is the syntax you make use of
the function keyword followed by which
you mentioned the name of the function
the name of the function is completely
your choice
next you mention the parameter list and
within curly braces you can define the
function
now the function body is basically the
code that is executed every time the
function is called
so let's go to our vs code editor
and here it created a folder called demo
functions within which i've created an
html file called functions.html
all right and now i've just typed in the
initial code
now let's create a function
so let me say script
within which i use the keyword that is
function keyword
and now i give
the name for my function i say my
underscore
function
and the function takes
a parameter say value now this function
basically returns the square of the
digit all right
so within which
i say
document dot get element by id
the id is demo
and now it just displays value into
value
all right so the function basically
displays the square of the number
now outside the function let me call the
function
does
my function
and let me pass the value 5
all right now let's save this
and execute it
so let me go back to my file
and here we go it displays the value 25
so this was a simple function which took
a value
a digit as a parameter and then returned
the square
moving on to the next concept
function expression
now what we learnt previously was
function declaration but a function can
also be defined as an expression
now this is what the syntax looks like
now here the function is created and
assigned to the variable explicitly like
any other value
the meaning remains the same that is you
create the function and store the value
that it returns into a variable and in
our case it's x right so let's go to our
vs code and let me help you understand
this better
so now
i create another function
and here i say
let
x equals let's use a simpler function so
i just mentioned
function
and within curly braces i display an
alert message
and i display a message saying hello
all right
now
after that to display the message what
we can do is let me just copy this
output
code
and you place it here
and here what we're going to be
displaying is the value x right now
since it consists of a function you'll
have to type the curly braces now this
is crucial for its execution all right
so let me save this
and then execute
let me execute this
and here you go it says the site says
hello so we successfully executed the
piece of code
we can also assign this variable x to
another variable and then call that
variable instead
right we can say let
y equals x
and instead of calling x here
we can simply call y
let me save it and then let me refresh
the page
and there we go it still displays a
message hello
all right so this is one of the ways of
defining a function that is as an
expression
moving on to our next concept function
constructor
now javascript functions are defined
using the keyword function right now
functions can also be defined using a
javascript built-in function
now this is the basic syntax so here
we've created a function called my
function and we've used the keyword new
after which we've used the constructor
function
and inside we provide the parameter list
after that the return value
next you can call the function here
right so let me just go back to my vs
code
and now
let me just make changes to the same
piece of code here
i create a function say
my underscore function
okay
all right let me just change the name
to my function all right
and then here i use the keyword new
and the function constructor that is
function
[Music]
within which i'm passing all the
parameters
so i have
a
b
and i'm going to return
the sum of the digits
all right
and now while calling the function
let me just store the value in a
variable say x
and let's call the function that is my
function
with the parameters
2 and three
all right
and now let me
display it so i'm just
gonna copy this
and i want to display the value of x
right
all right so let me save this
and execute it
if you refresh the page it displays the
sum that is 5.
to make it more readable let me just
display another message here
let me just say
the sum is
x all right
let me save it and then refresh the page
it says the sum is 5.
all right now this is how you make use
of the function constructor
next up we learn about self-invoking
functions
now as the name suggests these functions
are invoked automatically without being
called
now previously when we learnt about
function expressions we saw that
parentheses were crucial
so you have to add parentheses around
the function to indicate that it is a
function expression
so here is a syntax for you so what
we've done is we've made sure we've
enclosed the entire function within
parentheses
so let me help you with that let's go
back to our vs code
and let me create another script
and here
let me create the function within the
parentheses
and say function
it's not taking any parameters
instead it is going to
alert a message so let me say
hello
welcome
all right
after which
we're going to call the function so
again we have to mention the parentheses
let's save this
and execute
so when we
refresh the page
it says hello welcome
so we never called the function
rather it got invoked by itself so these
are self-invoking functions
now let's go ahead and look at functions
as values
now in javascript a function is
basically a value so we can deal with it
as a value now here is a simple syntax
now if you closely look at the syntax
you might think that this is same as
function expressions well no in this
case what we do is we first define the
function and then we assign it to a
particular variable but in the case of
expressions the function definition was
defined during the initialization of the
variable right and also we had to
specify the parenthesis in order to call
the function so to help you understand
this better let me go back to our vs
code
and here
let me just erase this
and let's define a function
that returns the product of two digits
so let me just call it product
which takes two parameters let me say a
and b
within which we return the value
a into b
all right now after this let's create
another variable say y
equals
function oh i'm sorry the name of the
function is product
so product
of two and five
all right so this basically returns us
10 right so let me just
copy this to display this on our web
page
and here i change the message to the
product
and here let me change it to y
so let's save this and execute it
so let me refresh the page and here you
go you can see the message the product
is 10.
now what we can do is we can make
alterations to this
now say i want to multiply the value
with 5 again
right so basically this returns 10 and
that value is multiplied by 5. so let me
save this
and
refresh our page and there we go it
returns
and there we go it displays 50. so this
is how you can make use of functions as
values
moving on to the next topic functions as
objects
now javascript functions are a special
type of objects called function objects
now a function includes a string which
holds the actual code that is the
function body of the function
the code is literally just a string
although not recommended you can also
create a function with the help of the
function constructor
i will show that you a little later on
but for now let's look at the syntax
now here we have a variable called body
which basically consists of the function
body it's enclosed in double quotes and
that's a mistake please ignore it all
right so next we have variable function
name here we create a function using the
keyword new and then we pass the
parameter list
and the body basically tells us what the
function returns
right
next we have an alert message to call
the function so let me just show how
this is executed
back in obvious code let me create
another
function
and let's say the function returns the
area of a circle right so let me just
create
a body variable
which returns
so the area of a circle is pi r square
so we make use of math
dot i
into
radius into radius
right
so it's basically pi r square
after which
let's see
where circle
[Music]
and here let's create a function using
the new keyword
function
and then here we pass
the value that is the radius
and then the body
right so basically
this is the definition of our function
so let's use alert
to display the area so we say alert of
circle
of five
all right let me save this
and execute it
so when you refresh the page
it displays the area of the circle
so this is how you can use functions as
objects
moving on to our next concept arrow
functions
now functions can be written more
compactly and more precisely with the
help of arrow functions
all right now arrow function expressions
are ill-suited as methods and they
cannot be used as constructors
now also while using arrow functions
using const is a safer option because a
function expression is always a constant
value
so this is the syntax now you can only
omit the return keyword
within the curly braces if the function
is a single statement
so this is the syntax first you provide
the name of the function
with an equal to sign
followed by the argument list
and later you make use of this arrow
icon and define the expression
so this is basically
nothing
but this
so let's go back to our vs code and
check for ourselves
so let's create another function
and here let me say
const
my func
equals now say we want to display the
product of three digits so let me just
pass a b c of my parameters
and we make use of this icon which
indicates that this is an arrow function
within which i say return
a
into b into c
all right
now let me just
assign this to a variable
okay let me say
product
because we've used x here
and then let me call my function that is
my func
and pass the value 2 3 and say 4.
all right so let's display the product
so let me just copy this
code
and here let me say the product
of the three
digits is
and let me say product here because that
is what is being used here right
all right so let me save this and
execute it
all right first it displays the area of
the circle
all right and then we say okay
and there we go it displays the message
the product of the three digits is 24.
so let me do one thing let me just
comment this out
okay
let me save it and then execute it again
it just displays this
all right so this is how we can make use
of arrow functions
moving on let's look at the generator
function
now regular functions typically return
only one value right or a single value
or sometimes even nothing but a
generator function can return multiple
values
and the speciality is that it can do it
so on demand all right now to create a
generator function we make use of an
asterisk
so an asterisk indicates that the
function is a generator function
so here you can see that we have a
function followed by asterisks and we've
created a function called generator
sequence
so here you can see we have the asterisk
after the keyword function followed by
the name of the function right
but the main method of a generator
function is the next method
when this method is called it basically
runs the execution until the nearest
yield value
all right all the nearest yield
statement
then the function execution pauses and
the yielded value is returned to the
outer code
all right so the result of the next
method is always an object with two
properties it has a value property which
is basically the yielded value
and then it has a done property which
displays true if the function code is
finished or false if it's otherwise
so let me show it execution for a
clearer understanding so let's go back
to our vs code
and here let's create the generator
function
let's say function
asterisk
generate
function all right
now within which
i make use of the keyword yield
and i say yield 1 first
followed by yield
2
and finally i make use of return which
indicates the termination so i say
return 3
all right now let me make use of
a variable say generator
and assign it to the generator function
that is generate
function and now i create another
variable say 1
which will basically
return the value when i call the next
function so here i say generator
dot
next
okay
so whatever generator dot next returns
it's stored in one
so to display the message i say alert
and now i'm going to make use of a
method called json.stringify
[Music]
all right so basically this method
converts a javascript object or a value
to a json string
all right so within which i'm gonna say
one
that is this
all right
so now let me save this
and execute it
let me refresh the page and there you go
here it returns
two properties that has value and done
it says value is one and done is false
right it is false because we haven't
reached the return statement yet
so what we can do is to display the rest
let me just copy these
and display it one by one
see there let's see this
and here let me say 2
and this is 3.
let me copy this
okay here i say
2
and then i say three
all right so let me save this and then
execute it
so when i refresh the page
it says one and false
after which again it says two and false
and finally when it displays 3 it
returns true for the done property that
means we've reached the end of the
function definition
so this is how you make use of a
generator function
now let's move on to our last topic that
is predefined functions
now javascript has many built-in
functions all right now here are a few
of them we have eval parseint pass float
escape and unescape now let's go through
one by one
all right first up is eval now this
basically evaluates a string and returns
a value
all right so to help you understand this
better let me go back to our vs code
and now let me just create another file
and let me call it
predefined
functions.html all right
and i've just copied the initial code
all right so for eval
the syntax is eval
within which
i say
expression
all right now this is the general syntax
so what this eval does is that it
evaluates the expression
and if the result is not a string the
result is just returned and if the
result is a string it is taken to be a
javascript program and evaluate it
so let me show you how it's done
so first let's create three variables
all right let's call them
x
and initialize it to five
then y
with 6
and then let z
be 7 all right
now let's just displace the result on
the console so let's say console.log
eval
of let me say
x plus y
all right
after which i again say console.log
of eval
offset
here since the expression is a string
this gets evaluated
and here since it's not a string it just
returns the value z
and here since it is not a string it
just returns the value of z
so let me save this
and then execute it
all right so let me just
check
our console
there you go it evaluated the expression
and added the two values that is x and y
and returned 11
while z is returned as it is
all right this is what eval does
next up is parseint now as the name
suggests it parses a string argument and
returns an integer of the specified
radix or base
and the syntax basically includes the
keyword parse
and the string within paranthesis
pars float on the other hand passes a
string argument and returns a floating
point number
again the syntax has the keyword parse
float along with the string within
parenthesis
next up is escape now this returns a
hexadecimal encoding of an argument
and on the other hand unescape returns
the ascii string for the specified value
so with that we come to the end of this
video i hope you found it helpful if you
have any doubts or queries let us know
in the comment section below
so i'll see you guys in the next session
until then keep learning and stay tuned
to simply learn
hi there if you like this video
subscribe to the simply learn youtube
channel and click here to watch similar
videos turn it up and get certified
click here
